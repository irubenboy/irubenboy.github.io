{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"tema_1/page_1/","title":"1 Introducci\u00f3n a HTML","text":""},{"location":"tema_1/page_1/#que-es-html","title":"\u00bfQu\u00e9 es HTML?","text":"<p>Defini\u00e9ndolo de forma sencilla, \"HTML es lo que se utiliza para crear todas las p\u00e1ginas web de Internet\". M\u00e1s concretamente, HTML es el lenguaje con el que se \"escriben\" la mayor\u00eda de p\u00e1ginas web.</p> <p>Los dise\u00f1adores utilizan el lenguaje HTML para crear sus p\u00e1ginas web, los programas que utilizan los dise\u00f1adores generan p\u00e1ginas escritas en HTML y los navegadores que utilizamos los usuarios muestran las p\u00e1ginas web despu\u00e9s de leer su contenido HTML.</p> <p>Aunque HTML es un lenguaje que utilizan los ordenadores y los programas de dise\u00f1o, es muy f\u00e1cil de aprender y escribir por parte de las personas. En realidad, HTML son las siglas de HyperText Markup Language y m\u00e1s adelante se ver\u00e1 el significado de cada una de estas palabras.</p> <p>El lenguaje HTML es un est\u00e1ndar reconocido en todo el mundo y cuyas normas define un organismo sin \u00e1nimo de lucro llamado World Wide Web Consortium, m\u00e1s conocido como W3C. Como se trata de un est\u00e1ndar reconocido por todas las empresas relacionadas con el mundo de Internet, una misma p\u00e1gina HTML se visualiza de forma muy similar en cualquier navegador de cualquier sistema operativo.</p> <p>El propio W3C define el lenguaje HTML como \"un lenguaje reconocido universalmente y que permite publicar informaci\u00f3n de forma global\". Desde su creaci\u00f3n, el lenguaje HTML ha pasado de ser un lenguaje utilizado exclusivamente para crear documentos electr\u00f3nicos a ser un lenguaje que se utiliza en muchas aplicaciones electr\u00f3nicas como buscadores, tiendas online y banca electr\u00f3nica.</p>"},{"location":"tema_1/page_1/#historia-de-html","title":"Historia de HTML","text":"<p>El origen de HTML se remonta a 1980, cuando el f\u00edsico Tim Berners-Lee, trabajador del CERN (Organizaci\u00f3n Europea para la Investigaci\u00f3n Nuclear) propuso un nuevo sistema de \"hipertexto\" para compartir documentos. Los sistemas de \"hipertexto\" hab\u00edan sido desarrollados a\u00f1os antes. En el \u00e1mbito de la inform\u00e1tica, el \"hipertexto\" permit\u00eda que los usuarios accedieran a la informaci\u00f3n relacionada con los documentos electr\u00f3nicos que estaban visualizando. De cierta manera, los primitivos sistemas de \"hipertexto\" podr\u00edan asimilarse a los enlaces de las p\u00e1ginas web actuales. Tras finalizar el desarrollo de su sistema de \"hipertexto\", Tim Berners-Lee lo present\u00f3 a una convocatoria organizada para desarrollar un sistema de \"hipertexto\" para Internet. Despu\u00e9s de unir sus fuerzas con el ingeniero de sistemas Robert Cailliau, presentaron la propuesta ganadora llamada WorldWideWeb (W3).</p> <p>El primer documento formal con la descripci\u00f3n de HTML se public\u00f3 en 1991 bajo el nombre HTML Tags (Etiquetas HTML) y todav\u00eda hoy puede ser consultado online a modo de reliquia inform\u00e1tica.</p> <p>La primera propuesta oficial para convertir HTML en un est\u00e1ndar se realiz\u00f3 en 1993 por parte del organismo IETF (Internet Engineering Task Force). Aunque se consiguieron avances significativos (en esta \u00e9poca se definieron las etiquetas para im\u00e1genes, tablas y formularios) ninguna de las dos propuestas de est\u00e1ndar, llamadas HTML y HTML+ consiguieron convertirse en est\u00e1ndar oficial.</p> <p>En 1995, el organismo IETF organiza un grupo de trabajo de HTML y consigue publicar, el 22 de septiembre de ese mismo a\u00f1o, el est\u00e1ndar HTML 2.0. A pesar de su nombre, HTML 2.0 es el primer est\u00e1ndar oficial de HTML. los est\u00e1ndares de HTML los publica otro organismo de estandarizaci\u00f3n llamado W3C (World Wide Web Consortium)</p> <p>La versi\u00f3n HTML 3.2 se public\u00f3 el 14 de Enero de 1997 y es la primera recomendaci\u00f3n de HTML publicada por el W3C. Esta revisi\u00f3n incorpora los \u00faltimos avances de las p\u00e1ginas web desarrolladas hasta 1996, como applets de Java y texto que fluye alrededor de las im\u00e1genes.</p> <p>A principios de 1997, el W3C decide separar los trabajos del grupo de HTML en tres secciones: el grupo de trabajo de HTML, el grupo de trabajo de DOM y el grupo de trabajo de CSS.</p> <p>HTML 4.0 se public\u00f3 el 24 de Abril de 1998 (siendo una versi\u00f3n corregida de la publicaci\u00f3n original del 18 de Diciembre de 1997) y supone un gran salto desde las versiones anteriores. Entre sus novedades m\u00e1s destacadas se encuentran las hojas de estilos CSS, la posibilidad de incluir peque\u00f1os programas o scripts en las p\u00e1ginas web, mejora de la accesibilidad de las p\u00e1ginas dise\u00f1adas, tablas complejas y mejoras en los formularios.</p> <p>El 24 de diciembre de 1999 se publica HTML 4.01. Se trata de una revisi\u00f3n y actualizaci\u00f3n de la versi\u00f3n HTML 4.0, por lo que no incluye novedades significativas.</p> <p>Desde la publicaci\u00f3n de HTML 4.01, la actividad de estandarizaci\u00f3n de HTML se detuvo y el W3C se centr\u00f3 en el desarrollo del est\u00e1ndar XHTML. Por este motivo, en el a\u00f1o 2004, las empresas Apple, Mozilla y Opera mostraron su preocupaci\u00f3n por la falta de inter\u00e9s del W3C en HTML y decidieron organizarse en una nueva asociaci\u00f3n llamada WHATWG (Web Hypertext Application Technology Working Group). La actividad del WHATWG se centr\u00f3 en el futuro est\u00e1ndar HTML 5, cuyo primer borrador oficial se public\u00f3 el 22 de enero de 2008.</p> <p>De forma paralela a su actividad con HTML, W3C continu\u00f3 con la estandarizaci\u00f3n de XHTML, una versi\u00f3n avanzada de HTML y basada en XML. La primera versi\u00f3n de XHTML se denomin\u00f3 XHTML 1.0 y se public\u00f3 el 26 de Enero de 2000 (y posteriormente se revis\u00f3 el 1 de Agosto de 2002). XHTML 1.0 era una adaptaci\u00f3n de HTML 4.01 al lenguaje XML, por lo que manten\u00eda casi todas sus etiquetas y caracter\u00edsticas, pero a\u00f1ad\u00eda algunas restricciones y elementos propios de XML.</p> <p>Debido a la fuerza de las empresas que formaban el grupo WHATWG y a la publicaci\u00f3n de los borradores de HTML 5.0, en marzo de 2007 el W3C decidi\u00f3 retomar la actividad estandarizadora de HTML, de manera que se unificaron los esfuerzos del grupo WHATWG y de W3C.</p> <p>En octubre de 2014 se present\u00f3 el est\u00e1ndar HTML 5.0.</p> <p>En noviembre de 2016 se public\u00f3 la recomendaci\u00f3n HTML 5.1, y en octubre de 2017 HTML 5.1 2nd Edition.</p>"},{"location":"tema_1/page_1/#lenguajes-de-etiquetas","title":"Lenguajes de etiquetas","text":"<p>Uno de los retos iniciales a los que se tuvo que enfrentar la inform\u00e1tica fue el de c\u00f3mo almacenar la informaci\u00f3n en los archivos digitales. Como los primeros archivos s\u00f3lo conten\u00edan texto sin formato, la soluci\u00f3n utilizada era muy sencilla: se codificaban las letras del alfabeto y se transformaban en n\u00fameros.</p> <p>De esta forma, para almacenar un contenido de texto en un archivo electr\u00f3nico, se utiliza una tabla de conversi\u00f3n que transforma cada car\u00e1cter en un n\u00famero. Una vez almacenada la secuencia de n\u00fameros, el contenido del archivo se puede recuperar realizando el proceso inverso.</p> <p> Figura 1 - Esquema codificaci\u00f3n de caracteres</p> <p>El proceso de transformaci\u00f3n de caracteres en secuencias de n\u00fameros se denomina codificaci\u00f3n de caracteres y cada una de las tablas que se han definido para realizar la transformaci\u00f3n se conocen con el nombre de p\u00e1ginas de c\u00f3digo. Una de las codificaciones m\u00e1s conocidas (y una de las primeras que se publicaron) es la codificaci\u00f3n ASCII. La importancia de las codificaciones en HTML se ver\u00e1 m\u00e1s adelante.</p> <p>Una vez resuelto el problema de almacenar el texto simple, se presenta el reto de almacenar los contenidos de texto con formato. En otras palabras, \u00bfc\u00f3mo se almacena un texto en negrita? \u00bfy un texto de color rojo? \u00bfy otro texto azul, en negrita y subrayado?</p> <p>Utilizar una tabla de conversi\u00f3n similar a las que se utilizan para textos sin formato no es posible, ya que existen infinitos posibles estilos para aplicar al texto. Una soluci\u00f3n t\u00e9cnicamente viable consiste en almacenar la informaci\u00f3n sobre el formato del texto en una zona especial reservada dentro del propio archivo. En esta zona se podr\u00eda indicar d\u00f3nde comienza y d\u00f3nde termina cada formato.</p> <p>No obstante, la soluci\u00f3n que realmente se emplea para guardar la informaci\u00f3n con formato es mucho m\u00e1s sencilla: el archivo electr\u00f3nico almacena tanto los contenidos como la informaci\u00f3n sobre el formato de esos contenidos. Si por ejemplo se quiere dividir el texto en p\u00e1rrafos y se desea dar especial importancia a algunas palabras, se podr\u00eda indicar de la siguiente manera:</p> <pre><code>&lt;parrafo&gt;\n    Contenido del texto con &lt;importante&gt;algunas palabras&lt;/importante&gt; resaltadas\n&lt;/parrafo&gt;\n</code></pre> <p>El principio de un p\u00e1rrafo se indica mediante la palabra <code>&lt;parrafo&gt;</code> y el final de un p\u00e1rrafo se indica mediante la palabra <code>&lt;/parrafo&gt;</code>. De la misma manera, para asignar m\u00e1s importancia a ciertas palabras del texto, se encierran entre <code>&lt;importante&gt;</code> y <code>&lt;/importante&gt;</code>.</p> <p>El proceso de indicar las diferentes partes que componen la informaci\u00f3n se denomina marcar (markup). Cada una de las palabras que se emplean para marcar el inicio y el final de una secci\u00f3n se denominan etiquetas (tags).</p> <p>Aunque existen algunas excepciones, en general las etiquetas se indican por pares y se forman de la siguiente manera:</p> <ul> <li>Etiqueta de apertura: car\u00e1cter <code>&lt;</code>, seguido del nombre de la etiqueta (sin espacios en blanco) y terminado con el car\u00e1cter <code>&gt;</code></li> <li>Etiqueta de cierre: car\u00e1cter <code>&lt;</code>, seguido del car\u00e1cter <code>/</code>, seguido del nombre de la etiqueta (sin espacios en blanco) y terminado con el car\u00e1cter <code>&gt;</code>. As\u00ed, la estructura t\u00edpica de las etiquetas HTML es: <code>&lt;nombre_etiqueta&gt; ... &lt;/nombre_etiqueta&gt;</code>.</li> </ul> <p>HTML es un lenguaje de etiquetas (tambi\u00e9n llamado lenguaje de marcado) y las p\u00e1ginas web habituales est\u00e1n formadas por cientos o miles de pares de etiquetas. De hecho, las letras \"ML\" de la sigla HTML significan markup language, que es como se denominan en ingl\u00e9s a los lenguajes de marcado. Adem\u00e1s de HTML, existen muchos otros lenguajes de etiquetas como XML, SGML, DocBook y MathML.</p> <p>La principal ventaja de los lenguajes de etiquetas es que son muy sencillos de leer y escribir por parte de las personas y de los sistemas electr\u00f3nicos. La principal desventaja es que pueden aumentar mucho el tama\u00f1o del documento, por lo que en general se utilizan etiquetas con nombres muy cortos.</p>"},{"location":"tema_1/page_1/#el-primer-documento-html","title":"El primer documento HTML","text":"<p>Las p\u00e1ginas HTML se dividen en dos partes: la cabecera y el cuerpo. La cabecera incluye informaci\u00f3n sobre la propia p\u00e1gina, como por ejemplo su t\u00edtulo y su idioma. El cuerpo de la p\u00e1gina incluye todos sus contenidos, como p\u00e1rrafos de texto e im\u00e1genes.</p> <p> Figura 2 - Esquema partes de un documento HTML</p> <p>El cuerpo (body) contiene todo lo que el usuario ve en su pantalla y la cabecera (head) contiene todo lo que no se ve, con la \u00fanica excepci\u00f3n del t\u00edtulo de la p\u00e1gina, que los navegadores muestran como t\u00edtulo de sus ventanas.</p> <p> See the Pen    Untitled by irubenboy (@irubenboy)   on CodePen. </p> <p>Para escribir el ejemplo anterior debes utilizar un editor de texto sin formato, como Brackets, Visual Studio Code, Atom, Notepad++ o el propio Bloc de notas. NO se debe utilizar un procesador de textos, como Word u Libre Office Writer, ya que \u00e9stos a\u00f1aden sus propios c\u00f3digos al texto.</p> <p>Otra alternativa inicial para \"jugar\" con el HTML, CSS y JavaScript es usar un editor online, como por ejemplo Codepen, Plunker o JS Bin.</p> <p>Volviendo al c\u00f3digo HTML del primer ejemplo, es importante conocer los elementos principales de un documento HTML:</p> <ul> <li><code>&lt;!DOCTYPE html&gt;</code>: Debe estar situado en la primera l\u00ednea del archivo y no le puede preceder ning\u00fan espacio en blanco. Se usa para indicar que el lenguaje en el que est\u00e1 escrito el resto del documento es HTML y debe ser interpretado como tal.</li> <li><code>&lt;html&gt;</code>: indica el comienzo y el final de un documento HTML. Ninguna etiqueta o contenido puede colocarse antes o despu\u00e9s de la etiqueta <code>&lt;html&gt;</code> (con una sola excepci\u00f3n que se ver\u00e1 m\u00e1s adelante). En el interior de la etiqueta <code>&lt;html&gt;</code> se definen la cabecera y el cuerpo del documento HTML y todo lo que se coloque fuera de la etiqueta <code>&lt;html&gt;</code> se ignora. Su atributo m\u00e1s importante es <code>lang=\"c\u00f3digo_idioma\"</code>, que se emplea para indicar el idioma en el que est\u00e1 escrito el contenido de la p\u00e1gina web, por ejemplo <code>lang=\"es\"</code> para el espa\u00f1ol.</li> <li><code>&lt;head&gt;</code>: delimita la parte de la cabecera del documento. La cabecera contiene informaci\u00f3n sobre el propio documento HTML, como por ejemplo su t\u00edtulo y el idioma de la p\u00e1gina. Los contenidos indicados en la cabecera no son visibles para el usuario, con la excepci\u00f3n de la etiqueta <code>&lt;title&gt;</code>, que se utiliza para indicar el t\u00edtulo del documento y que los navegadores lo visualizan en la parte superior izquierda de la ventana del navegador (si no te has fijado anteriormente, vuelve a abrir el primer ejemplo en cualquier navegador y observa d\u00f3nde se muestra el t\u00edtulo de la p\u00e1gina).</li> <li><code>&lt;body&gt;</code>: delimita el cuerpo del documento HTML. El cuerpo encierra todos los contenidos que se muestran al usuario (p\u00e1rrafos de texto, im\u00e1genes, tablas). En general, el <code>&lt;body&gt;</code> de un documento contiene cientos de etiquetas HTML, mientras que el <code>&lt;head&gt;</code> no contiene m\u00e1s que unas pocas.</li> </ul>"},{"location":"tema_1/page_1/#elementos-html","title":"Elementos HTML","text":"<p>HTML define el t\u00e9rmino elemento para referirse a las partes que componen los documentos HTML. Aunque en ocasiones se habla de forma indistinta de \"elementos\" y \"etiquetas\", en realidad un elemento HTML es mucho m\u00e1s que una etiqueta, ya que est\u00e1 formado por:</p> <ul> <li>Una etiqueta de apertura.</li> <li>Cero o m\u00e1s pares atributo=\"valor\".</li> <li>Contenido encerrado por la etiqueta.</li> <li>Una etiqueta de cierre.</li> </ul> <p>El contenido encerrado por la etiqueta es opcional, ya que algunas etiquetas de HTML no pueden encerrar ning\u00fan contenido. El siguiente esquema muestra un elemento HTML, formado por una etiqueta <code>&lt;p&gt;</code>, atributos y contenidos de texto:</p> <p> Figura 3 - Elementos HTML</p> <p>La estructura mostrada en el esquema anterior es un elemento HTML ya que comienza con una etiqueta de apertura (<code>&lt;p&gt;</code>), contiene cero o m\u00e1s atributos (<code>class=\"normal\"</code>), dispone de un contenido de texto (<code>Esto es un p\u00e1rrafo</code>) y finaliza con una etiqueta de cierre (<code>&lt;/p&gt;</code>).</p> <p>No todos los atributos se pueden utilizar en todas las etiquetas. Por ello, cada etiqueta define su propia lista de atributos disponibles. Adem\u00e1s, cada atributo tambi\u00e9n indica el tipo de valor que se le puede asignar. Si el valor de un atributo no es v\u00e1lido, el navegador ignora ese atributo. Aunque cada una de las etiquetas HTML define sus propios atributos, algunos de los atributos son comunes a muchas o casi todas las etiquetas.</p> <p>Los elementos deben cumplir una serie de recomendaciones:</p> <ul> <li> <p>Los elementos deben cerrarse en orden inverso a como se abren. Por ejemplo:</p> <pre><code>&lt;p&gt;Este es un p\u00e1rrafo con &lt;a&gt;un enlace&lt;/a&gt;&lt;/p&gt;\n</code></pre> </li> <li> <p>Los nombres de las etiquetas y atributos siempre se escriben en min\u00fasculas:</p> </li> <li>El valor de los atributos siempre se encierra con comillas dobles <code>atributo=\"valor\"</code>.</li> <li> <p>Hay unos pocos atributos que se pueden comprimir, es decir, para los que no es necesario indicar el valor porque es el mismo que el nombre del atributo. Por ejemplo las dos formas siguientes son v\u00e1lidas:</p> <pre><code>&lt;dl compact=\"compact\"&gt;...&lt;/dl&gt;\n&lt;dl compact&gt;...&lt;/dl&gt;\n</code></pre> </li> <li> <p>La mayor\u00eda de elementos HTML encierran un contenido de texto entre la etiqueta de apertura y la etiqueta de cierre. Sin embargo, algunas etiquetas especiales llamadas \"etiquetas vac\u00edas\" no necesitan encerrar ning\u00fan texto. La etiqueta <code>&lt;br&gt;</code> por ejemplo, se utiliza para indicar el comienzo de una nueva l\u00ednea. Por sus caracter\u00edsticas, la etiqueta <code>&lt;br&gt;</code> nunca encierra ning\u00fan contenido de texto. En estos casos se puede, opcionalmente, modificar la etiqueta de apertura para que termine en <code>/&gt;</code> en vez de en <code>&gt;</code>, de manera que act\u00fae a la vez como etiqueta de apertura y etiqueta de cierre. As\u00ed nuestro elemento quedar\u00eda como <code>&lt;br/&gt;</code></p> </li> </ul> <p>Todas estas recomendaciones no son estrictamente necesarias en HTML 5, pero altamente recomendables.</p>"},{"location":"tema_1/page_1/#comentarios-html","title":"Comentarios HTML","text":"<p>Al igual que la mayor\u00eda de lenguajes de marcado, HTML permite incluir comentarios dentro de su c\u00f3digo para a\u00f1adir informaci\u00f3n que no se debe mostrar por pantalla. Normalmente, los dise\u00f1adores y programadores incluyen comentarios para marcar el comienzo y el final de las secciones de las p\u00e1ginas, para incluir avisos y notas para otros dise\u00f1adores o para incluir explicaciones sobre la forma en la que se ha creado el c\u00f3digo HTML.</p> <p>Aunque los comentarios no se muestran por pantalla y por tanto son invisibles para los usuarios, s\u00ed que se descargan con el c\u00f3digo HTML de la p\u00e1gina. Por este motivo, nunca debe incluirse informaci\u00f3n sensible o confidencial en los comentarios. La sintaxis de los comentarios es la siguiente:</p> <pre><code>&lt;!-- Esto es un comentario --&gt;\n&lt;p&gt;Soy un p\u00e1rrafo&lt;/p&gt;\n</code></pre> <p>Los comentarios de HTML pueden ocupar tantas l\u00edneas como sea necesario. Sin embargo, no se pueden anidar, es decir, no se puede incluir un comentario dentro de otro.</p> Ejercicio <p>Realiza una p\u00e1gina web que contenga:</p> <ul> <li>Un comentario explicando su contenido.</li> <li>Dos p\u00e1rrafos: uno que muestre tu nombre y otro que diga la nota que vas a sacar en la asignatura.</li> <li>Otro texto que no sea un p\u00e1rrafo.</li> </ul> <p>Responde, adem\u00e1s a las siguientes preguntas:</p> <ol> <li>\u00bfPara qu\u00e9 sirve un comentario?</li> <li>\u00bfQu\u00e9 diferencia hay entre marcar un texto como p\u00e1rrafo y no marcarlo con ninguna etiqueta.</li> </ol>"},{"location":"tema_1/page_1/#cabecera","title":"Cabecera","text":"<p>Las p\u00e1ginas y documentos HTML incluyen m\u00e1s informaci\u00f3n de la que los usuarios ven en sus pantallas. Estos datos adicionales siempre est\u00e1n relacionados con la propia p\u00e1gina, por lo que se denominan meta-informaci\u00f3n o metadatos (datos sobre los datos). La meta-informaci\u00f3n siempre se incluye en la secci\u00f3n de la cabecera, es decir, dentro de la etiqueta <code>&lt;head&gt;</code>.</p>"},{"location":"tema_1/page_1/#etiqueta-title","title":"Etiqueta title","text":"<p>La meta-informaci\u00f3n m\u00e1s conocida y utilizada es el t\u00edtulo de la propia p\u00e1gina, que, como hemos visto se indica usando la etiqueta <code>&lt;title&gt;</code>, de la siguiente manera:</p> <pre><code>&lt;title&gt;Ejemplo de elementos en l\u00ednea y elementos de bloque&lt;/title&gt;\n</code></pre> <p>La etiqueta <code>&lt;title&gt;</code> proporciona la siguiente funcionalidad:</p> <ul> <li>Define el t\u00edtulo que aparece en la pesta\u00f1a correspondiente del navegador.</li> <li>Proporciona el t\u00edtulo para la p\u00e1gina cuando se a\u00f1ade a los \"Favoritos\" del navegador</li> <li>Muestra el t\u00edtulo de la p\u00e1gina en los resultados de los motores de b\u00fasqueda.</li> </ul>"},{"location":"tema_1/page_1/#etiqueta-meta","title":"Etiqueta meta","text":"<p>Adem\u00e1s del t\u00edtulo, es posible incluir mucha otra informaci\u00f3n que sirva de utilidad a los navegadores, a los buscadores y a otros servicios web. Para ello usaremos la etiqueta <code>&lt;meta&gt;</code>, que tiene distintos casos de uso. Veamos algunos ejemplos:</p> <pre><code>&lt;!-- Define el juego de caracteres que debe usarse --&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;!-- Define una descripci\u00f3n de la p\u00e1gina web --&gt;\n&lt;meta name=\"description\" content=\"Free Web tutorials\" /&gt;\n&lt;!-- Define palabra clave para los motores de los b\u00fasqueda --&gt;\n&lt;meta name=\"keywords\" content=\"HTML, CSS, apuntes, inform\u00e1tica\" /&gt;\n&lt;!-- Define el autor de la p\u00e1gina --&gt;\n&lt;meta name=\"author\" content=\"Pedro Pica piedra\"&gt;\n&lt;!-- Refresca el documento cada 30 segundos --&gt;\n&lt;meta http-equiv=\"refresh\" content=\"30\" /&gt;\n&lt;!-- Activa los modos de compatibilidad de Internet Explorer --&gt;\n&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n&lt;!-- Establece que la ventana de renderizado del navegador (viewport) tenga el ancho del dispositivo en el que se ejecuta y no se haga zoom --&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;\n</code></pre> <p>Es importante que el meta charset se coloque justo despu\u00e9s de la apertura de la etiqueta <code>&lt;head&gt;</code>. De este modo nos aseguramos que el navegador conocer\u00e1 la codificaci\u00f3n de caracteres utilizada antes de que comience a procesar nada.</p>"},{"location":"tema_1/page_1/#etiqueta-base","title":"Etiqueta base","text":"<p>Otra etiqueta disponible para asignar meta-informaci\u00f3n es la etiqueta <code>&lt;base&gt;</code>, que permite definir una URL y un tipo de destinatario por defecto para todos los enlaces de una p\u00e1gina. Por ejemplo:</p> <pre><code>&lt;base href=\"http://www.w3schools.com/images/\" target=\"_blank\" /&gt;\n</code></pre> <p>De esta manera, cuando indiquemos un enlace, por defecto la URL base corresponder\u00e1 a la indicada anteriormente y por defecto el enlace se abrir\u00e1 en una nueva ventana o pesta\u00f1a, como aprenderemos m\u00e1s adelante.</p>"},{"location":"tema_1/page_1/#etiqueta-link","title":"Etiqueta Link","text":"<p>La etiqueta <code>&lt;link&gt;</code> define la relaci\u00f3n entre nuestro documento y un recurso externo a \u00e9l. Por ejemplo, como ya hemos visto, se usa la etiqueta <code>&lt;link&gt;</code> para establecer la relaci\u00f3n del documento HTML con un archivo de hojas de estilo CSS. El tipo de relaci\u00f3n se indica a trav\u00e9s del atributo <code>rel</code>. Para el caso de las hojas de estilo el valor de dicho atributo debe ser stylesheet. Por ejemplo:</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;\n</code></pre> <p>Tambi\u00e9n podemos usar la etiqueta link para a\u00f1adir el icono de favoritos (favicon) a nuestra p\u00e1gina. Un favicon es una peque\u00f1a imagen asociada con una p\u00e1gina o sitio web en particular. Los navegadores gr\u00e1ficos suelen mostrar el favicon de la p\u00e1gina visitada, si \u00e9sta lo posee, en la barra de direcciones y en el encabezado de la pesta\u00f1a correspondiente. Asimismo los utilizan para identificar m\u00e1s f\u00e1cilmente las p\u00e1ginas, present\u00e1ndolos junto a sus respectivos t\u00edtulos, en las listas de marcadores (navegadores web) o favoritos, en los historiales (navegador web) de p\u00e1ginas visitadas y de navegaci\u00f3n reciente, y toda vez que deban hacer referencia a ellas. Por ejemplo:</p> <pre><code>&lt;link rel=\"shortcut icon\" href=\"favicon.ico\" /&gt;\n</code></pre> <p>Info</p> <p>Existen varios generadores online que permite generar un favicon a partir de una imagen o icono:</p> <p>http://www.favicon-generator.org/</p> <p>http://www.genfavicon.com/es/</p>"},{"location":"tema_1/page_1/#etiqueta-script","title":"Etiqueta script","text":"<p>Para insertar c\u00f3digo JavaScript en nuestro documento, usaremos la etiqueta <code>&lt;script&gt;</code>. Se puede usar la etiqueta <code>&lt;script</code>&gt; tanto dentro del <code>&lt;body&gt;</code> como dentro del <code>&lt;head&gt;</code>. Nuestro c\u00f3digo JavaScript puede ser encerrado entre <code>&lt;script&gt;</code> y <code>&lt;/script&gt;</code>. Por ejemplo:</p> <pre><code>&lt;script src=\"js/codigo.js\"&gt;&lt;/script&gt;\n</code></pre> <p>En conjunci\u00f3n con la etiqueta <code>&lt;script&gt;</code> se debe usar la etiqueta <code>&lt;noscript&gt;</code> para indicar el c\u00f3digo HTML que debe mostrar el navegador si \u00e9ste no soporta JavaScript o el usuario ha deshabilitado dicha funcionalidad. Por ejemplo:</p> <pre><code>&lt;script&gt;\ndocument.write(\"Hola Mundo!\")\n&lt;/script&gt;\n&lt;noscript&gt;\n&lt;p&gt;Bienvenido a Mi Sitio&lt;/p&gt;\n&lt;p&gt;La p\u00e1gina que est\u00e1s viendo requiere para su funcionamiento el uso de JavaScript.\nSi lo has deshabilitado intencionadamente, por favor vuelve a activarlo.&lt;/p&gt;\n&lt;/noscript&gt;\n</code></pre>"},{"location":"tema_1/page_1/#elementos-en-bloque-y-elementos-en-linea","title":"Elementos en bloque y elementos en l\u00ednea","text":"<p>Para cada etiqueta HTML el motor de renderizado del navegador crea un elemento o caja. Dependiendo del tipo etiqueta del que se trate, el elemento creado tiene unas determinadas caracter\u00edsticas respecto a su modo de formato visual.</p> <p>La mayor\u00eda de las etiquetas HTML crean elementos denominados de bloque (block elements en ingl\u00e9s). Es el caso, por ejemplo, de las etiquetas <code>&lt;p&gt;</code>, <code>&lt;h1&gt;</code>, etc. Los elementos de bloque siempre empiezan en una nueva l\u00ednea y ocupan todo el espacio disponible hasta el final de la l\u00ednea, aunque sus contenidos no lleguen hasta el final de la l\u00ednea.</p> <p>Hay algunas etiquetas que crean elementos en l\u00ednea (inline elements en ingl\u00e9s). Es el caso, por ejemplo, de las etiquetas <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code>. Los elementos en l\u00ednea s\u00f3lo ocupan el espacio necesario para mostrar sus contenidos.</p> <p>Hay otras etiquetas espec\u00edficas que crean elementos con otros modelos de formato visual m\u00e1s espec\u00edficos, como <code>&lt;table&gt;</code>, <code>&lt;tr&gt;</code>, etc.</p> <p>Veamos un demostraci\u00f3n de la diferencia entre elementos en bloque y elementos en l\u00ednea:</p> <p> See the Pen    Elementos en bloque y elementos en l\u00ednea by irubenboy (@irubenboy)   on CodePen. </p> HTMLCSS <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;\n&lt;title&gt;Ejemplo de elementos en l\u00ednea y elementos de bloque&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;Los p\u00e1rrafos son elementos de bloque.&lt;/p&gt;\n&lt;a href=\"https://www.google.com\"&gt;Los enlaces son elementos en l\u00ednea&lt;/a&gt;\n&lt;p&gt;Dentro de un p\u00e1rrafo, &lt;a href=\"https://www.google.com\"&gt;los enlaces&lt;/a&gt; siguen siendo elementos en l\u00ednea.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>p {\nborder: solid 2px black;\n}\na {\nborder: dashed 1px red;\n}\n</code></pre> <p>En la demo anterior, el primer p\u00e1rrafo contiene un texto corto que s\u00f3lo ocupa la mitad de la anchura de la ventana del navegador. No obstante, el espacio reservado por el navegador para el primer p\u00e1rrafo llega hasta el final de esa l\u00ednea, por lo que resulta evidente que los elementos <code>&lt;p&gt;</code> son elementos de bloque.</p> <p>Por otra parte, el primer enlace del ejemplo anterior tambi\u00e9n tiene un texto corto que ocupa solamente la mitad de la anchura de la ventana del navegador. En este caso, el navegador s\u00f3lo reserva para el enlace el sitio necesario para mostrar sus contenidos. Si se a\u00f1ade otro enlace en esa misma l\u00ednea, se mostrar\u00eda a continuaci\u00f3n del primer enlace. Por tanto, los elementos <code>&lt;a&gt;</code> son elementos en l\u00ednea.</p> <p>Por \u00faltimo, el segundo p\u00e1rrafo sigue ocupando todo el espacio disponible hasta el final de cada l\u00ednea (por ser un elemento de bloque) y el enlace que se encuentra dentro del p\u00e1rrafo s\u00f3lo ocupa el sitio necesario para mostrar sus contenidos (por ser un elemento en l\u00ednea).</p> <p>La mayor\u00eda de elementos de bloque pueden contener en su interior elementos en l\u00ednea y otros elementos de bloque. Los elementos en l\u00ednea s\u00f3lo pueden contener texto u otros elementos en l\u00ednea. En otras palabras, un elemento de bloque no puede aparecer dentro de un elemento en l\u00ednea. En cambio, un elemento en l\u00ednea puede aparecer dentro de un elemento de bloque y dentro de otro elemento en l\u00ednea.</p> <p>M\u00e1s adelante veremos otros modelos de formato visual y c\u00f3mo desde CSS podremos cambiar el modelo de formato visual de cualquier elemento a trav\u00e9s de la propiedad <code>display</code>.</p>"},{"location":"tema_1/page_1/#etiquetas-div-y-span","title":"Etiquetas div y span","text":"<p>HTML define la etiqueta <code>&lt;div&gt;</code> para agrupar los elementos que forman cada zona o divisi\u00f3n de la p\u00e1gina. Se trata de un elemento en bloque gen\u00e9rico, sin ning\u00fan significado sem\u00e1ntico especial. El nombre de la etiqueta <code>&lt;div&gt;</code> tiene su origen en la palabra **div**isi\u00f3n (division), ya que esta etiqueta define zonas o divisiones dentro de una p\u00e1gina HTML.</p> <p>Por su parte tambi\u00e9n tendremos la posibilidad de marcar un determinado un texto dentro del contenido de un elemento con objeto de aplicar un estilo visual espec\u00edfico. Para ello utilizaremos la etiqueta <code>&lt;span&gt;</code>, que define un elemento en l\u00ednea gen\u00e9rico.</p> <p>Veamos una demostraci\u00f3n de las etiquetas gen\u00e9ricas <code>&lt;div&gt;</code> y <code>&lt;span&gt;</code> (se omiten el resto de etiquetas y se deja tan s\u00f3lo el contenido de la etiqueta <code>&lt;body&gt;</code>):</p> <p> See the Pen    Div vs span by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_1/page_1/#validacion-html","title":"Validaci\u00f3n HTML","text":"<p>Si queremos comprobar si hay errores en nuestro documento HTML, no nos basta con simplemente mostrarlo en un navegador. El motivo es que los navegadores son bastante permisivos, ya que en el caso de encontrar un error, intentan intuir lo que se quiso decir e incluso, prosiguiendo con la carga del documento en vez de mostrar un error.</p> <p>Para asegurarnos de que nuestro documento est\u00e1 escrito correctamente podemos utilizar una herramienta conocida como validador HTML, que no es m\u00e1s que un programa que analiza nuestro c\u00f3digo y nos dice el n\u00famero de errores que tenemos, junto a una breve descripci\u00f3n del mismo. El m\u00e1s conocido de ellos es el validador HTML de W3C.</p>"},{"location":"tema_1/page_1/#lorem-ipsum","title":"Lorem ipsum","text":"<p>Lorem ipsum es el texto que se usa habitualmente en dise\u00f1o gr\u00e1fico en demostraciones de tipograf\u00edas o de borradores de dise\u00f1o para probar el dise\u00f1o visual antes de insertar el texto final. Corresponde por tanto a simple texto de relleno.</p> <p>Aunque no posee actualmente fuentes para justificar sus hip\u00f3tesis, el profesor de filolog\u00eda cl\u00e1sica Richard McClintock asegura que su uso se remonta a los impresores de comienzos del siglo XVI. Su uso en algunos editores de texto muy conocidos en la actualidad ha dado al texto lorem ipsum nueva popularidad.</p> <p>El texto en s\u00ed no tiene sentido, aunque no es completamente aleatorio, sino que deriva de un texto de Cicer\u00f3n en lengua latina, a cuyas palabras se les han eliminado s\u00edlabas o letras. El significado del texto no tiene importancia, ya que solo es una demostraci\u00f3n o prueba, pero se inspira en la obra de Cicer\u00f3n De finibus bonorum et malorum (Sobre los l\u00edmites del bien y del mal).</p> <p>La mayor\u00eda de los editores de texto proporcionan la funcionalidad de generaci\u00f3n de lorem ipsum, algunos incluyendo un determinado plugin.</p> <p>Info</p> <p>Tambi\u00e9n tenemos varios generadores online (algunos de ellos c\u00f3micos):</p> <p>Lipsum</p> <p>Con frases de \"La hora Chanante\"</p> <p>Con frases de Hodor, de Juego de Tronos</p> <p>Con frases de Chiquito de la Calzada</p> Ejercicio <p>Realiza una p\u00e1gina web que use las siguientes etiquetas: html, head, meta, title, body, p, div y span.</p> <p>Adem\u00e1s deben usarse comentarios y el texto mostrado debe corresponder a p\u00e1rrafos del lorem ipsum.</p>"},{"location":"tema_1/page_2/","title":"2 Introducci\u00f3n al css","text":""},{"location":"tema_1/page_2/#que-es-css","title":"\u00bfQu\u00e9 es CSS?","text":"<p>Originalmente, las p\u00e1ginas HTML s\u00f3lo inclu\u00edan informaci\u00f3n sobre sus contenidos de texto e im\u00e1genes. Con el desarrollo del est\u00e1ndar HTML, las p\u00e1ginas empezaron a incluir tambi\u00e9n informaci\u00f3n sobre el aspecto de sus contenidos: tipos de letra, colores y m\u00e1rgenes.</p> <p>La posterior aparici\u00f3n de tecnolog\u00edas como JavaScript, provocaron que las p\u00e1ginas HTML tambi\u00e9n incluyeran el c\u00f3digo de las aplicaciones (llamadas scripts) que se utilizan para crear p\u00e1ginas web din\u00e1micas.</p> <p>Incluir en una misma p\u00e1gina HTML los contenidos, el dise\u00f1o y la programaci\u00f3n complica en exceso su mantenimiento. Normalmente, los contenidos y el dise\u00f1o de la p\u00e1gina web son responsabilidad de diferentes personas, por lo que es conveniente separarlos.</p> <p>CSS es el mecanismo que permite separar los contenidos definidos mediante HTML y el aspecto que deben presentar esos contenidos:</p> <p> Figura 1 - Separaci\u00f3n de contenidos</p> <p>Separar la definici\u00f3n de los contenidos y la definici\u00f3n de su aspecto presenta numerosas ventajas, ya que obliga a crear documentos HTML/XHTML bien definidos y con significado completo (tambi\u00e9n llamados \"documentos sem\u00e1nticos\"). Adem\u00e1s, mejora la accesibilidad del documento, reduce la complejidad de su mantenimiento y permite visualizar el mismo documento en infinidad de dispositivos diferentes. Una ventaja a\u00f1adida de la separaci\u00f3n de los contenidos y su presentaci\u00f3n es que los documentos HTML creados son m\u00e1s flexibles, ya que se adaptan mejor a las diferentes plataformas: pantallas de ordenador, pantallas de dispositivos m\u00f3viles, impresoras y dispositivos utilizados por personas discapacitadas.</p> <p>CSS es un lenguaje de hojas de estilos creado para controlar el aspecto o presentaci\u00f3n de los documentos electr\u00f3nicos definidos con HTML y XHTML. CSS es la mejor forma de separar los contenidos y su presentaci\u00f3n y es imprescindible para crear p\u00e1ginas web complejas.</p> <p>Al crear una p\u00e1gina web, se utiliza en primer lugar el lenguaje HTML/XHTML para marcar los contenidos, es decir, para designar la funci\u00f3n de cada elemento dentro de la p\u00e1gina: p\u00e1rrafo, titular, texto destacado, tabla, lista de elementos, etc.</p> <p>Una vez creados los contenidos, se utiliza el lenguaje CSS para definir el aspecto de cada elemento: color, tama\u00f1o y tipo de letra del texto, separaci\u00f3n horizontal y vertical entre elementos, posici\u00f3n de cada elemento dentro de la p\u00e1gina, etc.</p>"},{"location":"tema_1/page_2/#historia-de-css","title":"Historia de CSS","text":"<p>Entre finales de 1994 y 1995 H\u00e5kon Wium Lie y Bert Bos se unieron para definir un nuevo lenguaje para hojas de estilos al que llamaron CSS (Cascading Style Sheets).</p> <p>En 1995, el W3C decidi\u00f3 apostar por el desarrollo y estandarizaci\u00f3n de CSS y lo a\u00f1adi\u00f3 a su grupo de trabajo de HTML.</p> <p>A finales de 1996, el W3C public\u00f3 la primera recomendaci\u00f3n oficial, conocida como \"CSS nivel 1\".</p> <p>El 12 de Mayo de 1998, el grupo de trabajo de CSS publica su segunda recomendaci\u00f3n oficial, conocida como \"CSS nivel 2\".</p> <p>El 7 de junio de 2011 se aprueba como recomendaci\u00f3n oficial CSS 2.1.</p> <p>Los trabajos en el CSS3, comenzaron a la vez que se public\u00f3 la recomendaci\u00f3n oficial de CSS2, y los primeros borradores de CSS3 fueron liberados en junio de 1999. CSS3 est\u00e1 dividida en varios documentos separados, llamados \"m\u00f3dulos\". Cada m\u00f3dulo a\u00f1ade nuevas funcionalidades a las definidas en CSS2, de manera que se preservan las anteriores para mantener la compatibilidad.</p> <p>Debido a la modularizaci\u00f3n del CSS3, diferentes m\u00f3dulos pueden encontrarse en diferentes estados de su desarrollo, habiendo alrededor de cincuenta m\u00f3dulos publicados. Algunos de ellos est\u00e1n en el estado de recomendaciones oficiales, otros en el estado de \"candidatos\", y debemos considerados como razonablemente estables. Otros est\u00e1n a\u00fan en estado de borrador..</p> <p>CSS est\u00e1 en continuo desarrollo, subdividido en distintos m\u00f3dulos que avanzan en paralelo, a diferente velocidad, por lo que en el futuro no existir\u00e1 una \u00fanica especificaci\u00f3n CSS4.</p> <p>Info</p> <p>En el siguiente enlace puede verse el estado actual de los distintos m\u00f3dulos:</p> <p>Estado actual de CSS</p>"},{"location":"tema_1/page_2/#como-incluir-css-en-un-documento-html","title":"Como incluir CSS en un documento HTML","text":""},{"location":"tema_1/page_2/#incluir-css-en-el-mismo-documento-html","title":"Incluir CSS en el mismo documento HTML","text":"<p>Los estilos se definen en una zona espec\u00edfica del propio documento HTML. Se emplea la etiqueta <code>&lt;style&gt;</code> de HTML, que se incluye dentro de la etiqueta <code>&lt;head&gt;</code>. Por ejemplo:</p> <p> See the Pen    CSS &lt;style&gt; by irubenboy (@irubenboy)   on CodePen. </p> <p>Este m\u00e9todo se emplea cuando se define un n\u00famero peque\u00f1o de estilos o cuando se quieren incluir estilos espec\u00edficos en una determinada p\u00e1gina HTML que completen los estilos que se incluyen por defecto en todas las p\u00e1ginas del sitio web. El principal inconveniente es que si se quiere hacer una modificaci\u00f3n en los estilos definidos, es necesario modificar todas las p\u00e1ginas que incluyen el estilo que se va a modificar.</p>"},{"location":"tema_1/page_2/#definir-css-en-un-archivo-externo","title":"Definir CSS en un archivo externo","text":"<p>En este caso, todos los estilos CSS se incluyen en un archivo de tipo CSS que las p\u00e1ginas HTML enlazan mediante la etiqueta <code>&lt;link&gt;</code>. Un archivo de tipo CSS no es m\u00e1s que un archivo simple de texto cuya extensi\u00f3n es <code>.css</code>. Por ejemplo podemos crear un archivo <code>index.html</code> que enlace com un archivo <code>style.css</code>:</p> <p> See the Pen    CSS external file by irubenboy (@irubenboy)   on CodePen. </p> <p>Se pueden crear todos los archivos CSS que sean necesarios y cada p\u00e1gina HTML puede enlazar tantos archivos CSS como necesite.</p> <p>Cuando el navegador carga la p\u00e1gina HTML anterior, antes de mostrar sus contenidos tambi\u00e9n descarga los archivos CSS externos enlazados mediante la etiqueta <code>&lt;link&gt;</code> y aplica los estilos a los contenidos de la p\u00e1gina.</p> <p>Normalmente, la etiqueta  incluye los siguientes atributos cuando enlaza un archivo CSS:</p> <ul> <li><code>rel</code>: indica el tipo de relaci\u00f3n que existe entre el recurso enlazado (en este caso, el archivo CSS) y la p\u00e1gina HTML. Para los archivos CSS, siempre se utiliza el valor <code>stylesheet</code></li> <li><code>href</code>: indica la URL del archivo CSS que contiene los estilos. La URL indicada puede ser relativa o absoluta y puede apuntar a un recurso interno o externo al sitio web.</li> <li><code>media</code>: indica el medio en el que se van a aplicar los estilos del archivo CSS, por ejemplo pantalla o impresora. Lo veremos m\u00e1s adelante.</li> </ul> <p>De todas las formas de incluir CSS en las p\u00e1ginas HTML, \u00e9sta es la m\u00e1s utilizada con mucha diferencia. La principal ventaja es que se puede incluir un mismo archivo CSS en multitud de p\u00e1ginas HTML, por lo que se garantiza la aplicaci\u00f3n homog\u00e9nea de los mismos estilos a todas las p\u00e1ginas que forman un sitio web. Con este m\u00e9todo, el mantenimiento del sitio web se simplifica al m\u00e1ximo, ya que un solo cambio en un solo archivo CSS permite variar de forma instant\u00e1nea los estilos de todas las p\u00e1ginas HTML que enlazan ese archivo.</p>"},{"location":"tema_1/page_2/#incluir-css-en-los-elementos-html","title":"Incluir CSS en los elementos HTML","text":"<p>El \u00faltimo m\u00e9todo para incluir estilos CSS en documentos HTML es el peor y el menos utilizado.Consiste en incluir el contenido CSS como valor del atributo <code>style</code> de una determinada etiqueta. Por ejemplo:</p> <p> See the Pen    CSS inline by irubenboy (@irubenboy)   on CodePen. </p> <p>Esta forma de incluir CSS directamente en los elementos HTML solamente se utiliza en determinadas situaciones en las que se debe incluir un estilo muy espec\u00edfico para un solo elemento concreto.</p>"},{"location":"tema_1/page_2/#estilos-css","title":"Estilos CSS","text":"<p>CSS define una serie de t\u00e9rminos que permiten describir cada una de las partes que componen los estilos CSS. El siguiente esquema muestra las partes que forman un estilo CSS muy b\u00e1sico:</p> <p> Figura 2 - Estilos CSS</p> <p>Los diferentes t\u00e9rminos se definen a continuaci\u00f3n:</p> <ul> <li>Regla: cada uno de los estilos que componen una hoja de estilos CSS. Cada regla est\u00e1 compuesta de una parte de selectores, un s\u00edmbolo de llave de apertura (<code>{</code>), otra parte denominada declaraci\u00f3n y por \u00faltimo, un s\u00edmbolo de llave de cierre (<code>}</code>).</li> <li>Selector: indica el elemento o elementos HTML a los que se aplica la regla CSS.</li> <li>Declaraci\u00f3n: especifica los estilos que se aplican a los elementos. Est\u00e1 compuesta por una o m\u00e1s propiedades CSS.</li> <li>Propiedad: caracter\u00edstica que se modifica en el elemento seleccionado, como por ejemplo su tama\u00f1o de letra, su color de fondo, etc.</li> <li>Valor: establece el nuevo valor de la caracter\u00edstica modificada en el elemento.</li> </ul> <p>Un archivo CSS puede contener un n\u00famero ilimitado de reglas CSS, cada regla se puede aplicar a varios selectores diferentes y cada declaraci\u00f3n puede incluir tantos pares propiedad/valor como se desee.</p>"},{"location":"tema_1/page_2/#herencia-de-estilos","title":"Herencia de estilos","text":"<p>Una de las caracter\u00edsticas principales de CSS es la herencia autom\u00e1tica de propiedades desde elementos padres a elementos hijos, de manera que cuando se establece un valor para una propiedad en un elemento, sus elementos descendientes heredan de forma autom\u00e1tica el valor de esa propiedad. Veamos un ejemplo.</p> HTMLCSS <pre><code>&lt;body&gt;\n    Yo soy un texto\n    &lt;p&gt;Yo soy un p\u00e1rrafo&lt;/p&gt;\n&lt;/body&gt;\n</code></pre> <pre><code>body{\ncolor: blue; /* Color de texto azul */\nborder: 2px solid green;\n}\n</code></pre> <p>s\u00f3lo al texto contenido directamente dentro de dicha etiqueta <code>&lt;body&gt;</code>, es decir Yo soy texto deber\u00eda mostrarse de color azul. Sin embargo, el texto de la etiqueta <code>&lt;p&gt;</code>, es decir, Yo soy un p\u00e1rrafo tambi\u00e9n se muestra en azul. El motivo es que la propiedad color es una de las propiedades CSS que hereda autom\u00e1ticamente de padres a hijos.</p> <p>Debemos tener en cuenta que s\u00f3lo algunas propiedades son heredadas autom\u00e1ticamente. En general, son heredadas autom\u00e1ticamente las propiedades relacionadas con el texto, las listas y las tablas.</p> <p>Hay otras propiedades en las que no tiene sentido esta herencia autom\u00e1tica. Por ejemplo, si aplicamos un borde a un elemento, no tiene sentido que todas sus elementos descendientes muestren tambi\u00e9n el mismo borde. Este es el caso del ejemplo anterior, donde el p\u00e1rrafo NO se muestra con borde, porque la propiedad <code>border</code> NO ha sido heredada autom\u00e1ticamente.</p> <p>Otro aspecto importante es que aunque la herencia de estilos se aplica autom\u00e1ticamente, se puede anular su efecto estableciendo de forma expl\u00edcita en el elemento hijo otro valor para la propiedad que se hereda. Por ejemplo, si al siguiente c\u00f3digo HTML</p> HTMLCSS <pre><code>&lt;body&gt;\n    Yo soy un texto\n    &lt;p&gt;Yo soy un p\u00e1rrafo&lt;/p&gt;\n&lt;/body&gt;\n</code></pre> <pre><code>body{\ncolor: blue; /* Color de texto azul */\n}\np{\ncolor: red;\n}\n</code></pre> <p>El texto Yo soy texto se ver\u00e1 de color azul y el texto Yo soy un p\u00e1rrafo se mostrar\u00e1 de color rojo. El motivo es que aunque el p\u00e1rrafo ha heredado el valor de la propiedad color desde su padre, luego se ha sobrescrito estableci\u00e9ndolo a rojo.</p> <p>Por otro lado, CSS incluye un mecanismo para modificar el comportamiento preestablecido de la herencia, mediante la asignaci\u00f3n de un valor especial a dicha propiedad en el elemento hijo. Veamos dichos valores:</p> <ul> <li><code>inherit</code>: Fuerza a que el elemento herede el valor de la propiedad del elemento padre, incluso aunque se trate de una propiedad no heredable por defecto.</li> <li><code>initial</code>: Establece el valor por defecto de la propiedad, incluso aunque haya sido heredado desde el padre.</li> <li><code>unset</code>: Combinaci\u00f3n de las dos anteriores. Hereda el valor de la propiedad del elemento padre, y en caso de no se haya especificado un valor para dicha propiedad en el elemento padre, se asignar\u00e1 al elemento hijo el valor por defecto de la propiedad.</li> </ul>"},{"location":"tema_1/page_2/#comentarios-css","title":"Comentarios CSS","text":"<p>Igualmente, CSS permite incluir comentarios dentro de su c\u00f3digo, con la siguiente sintaxis:</p> <pre><code>/* Esto es un comentario */\np {\ncolor: blue;\n}\n</code></pre> <p>Los comentarios de CSS pueden ocupar tantas l\u00edneas como sea necesario.</p> Ejercicio <p>Realiza una p\u00e1gina web que muestre el nombre de tu equipo de f\u00fatbol favorito y su plantilla de jugadores, organizados por su posici\u00f3n en el campo (porteros, defensas, .etc.). Para el nombre del equipo utiliza la etiqueta h1, que deber\u00e1n aparecer con el color de fondo en rojo y el color de texto en blanco. Para las posiciones de juego usa la etiqueta h2, que deber\u00e1n aparecer con el color de fondo en azul y el color de texto en blanco. Para cada jugador la etiqueta p. Crea un fichero style.css donde incluyas las reglas CSS necesarias y vinculalo a tu archivo index.html</p> <p>Hazte las siguientes preguntas:</p> <ol> <li>\u00bfPor qu\u00e9 el nombre de cada jugador aparece debajo del anterior y no a su lado?</li> <li>\u00bfPor qu\u00e9 el nombre de cada jugador no aparece pegado justo debajo del anterior?</li> <li>\u00bfPor qu\u00e9 existe una separaci\u00f3n vertical entre el nombre del equipo y la primera posici\u00f3n (porteros)?</li> <li>\u00bfPor qu\u00e9 el color del texto del nombre de los jugadores es negro?</li> <li>\u00bfPor qu\u00e9 el color del texto del nombre de los jugadores es blanco?</li> </ol> <p>Algunas mejoras que deber\u00edamos a\u00f1adir a nuestra web:</p> <ol> <li>Que el nombre del equipo apareciera centrado horizontalmente</li> <li>Que el texto del nombre del equipo y el de las posiciones de juego no estuviera tan pegado al borde.</li> <li>Que hubiera un espacio de separaci\u00f3n m\u00e1s grande o m\u00e1s peque\u00f1o entre el nombre del equipo y la primera posici\u00f3n de juego</li> <li>Que el listado no ocupara todo el ancho de pantalla y tuviera el aspecto de una tarjeta</li> </ol>"},{"location":"tema_1/page_3/","title":"3 Unidades de medida CSS","text":""},{"location":"tema_1/page_3/#introduccion","title":"Introducci\u00f3n","text":"<p>Las medidas en CSS se emplean, entre otras, para definir la altura, anchura y m\u00e1rgenes de los elementos y para establecer el tama\u00f1o de letra del texto. Todas las medidas se indican como un valor num\u00e9rico entero o decimal seguido de una unidad de medida (sin ning\u00fan espacio en blanco entre el n\u00famero y la unidad de medida).</p> <p>CSS divide las unidades de medida en dos grupos: absolutas y relativas. Las medidas relativas definen su valor en relaci\u00f3n con otra medida, por lo que para obtener su valor real, se debe realizar alguna operaci\u00f3n con el valor indicado. Las unidades absolutas establecen de forma completa el valor de una medida, por lo que su valor real es directamente el valor indicado.</p> <p>Si el valor es 0, la unidad de medida es opcional. Si el valor es distinto a 0 y no se indica ninguna unidad, la medida se ignora completamente, lo que suele ser uno de los errores m\u00e1s habituales de los dise\u00f1adores que empiezan con CSS. Algunas propiedades permiten indicar medidas negativas, aunque habitualmente sus valores son positivos. Si el valor decimal de una medida es inferior a 1, se puede omitir el 0 de la izquierda (0.5em es equivalente a .5em).</p> <p>En general, se recomienda el uso de unidades relativas siempre que sea posible, ya que mejora la accesibilidad de la p\u00e1gina y permite que los documentos se adapten f\u00e1cilmente a cualquier medio y dispositivo.</p>"},{"location":"tema_1/page_3/#unidades-absolutas","title":"Unidades absolutas","text":"<p>Una medida indicada mediante unidades absolutas est\u00e1 completamente definida, ya que su valor no depende de otro valor de referencia. A continuaci\u00f3n se muestra la lista completa de unidades absolutas definidas por CSS y su significado:</p> <ul> <li><code>in</code>, pulgadas (inches). Una pulgada equivale a 2.54 cent\u00edmetros.</li> <li><code>cm</code>, cent\u00edmetros.</li> <li><code>mm</code>, mil\u00edmetros.</li> <li><code>pt</code>, puntos. Un punto equivale a 1 pulgada/72, es decir, unos 0.35 mil\u00edmetros.</li> <li><code>pc</code>, picas. Una pica equivale a 12 puntos, es decir, unos 4.23 mil\u00edmetros. A continuaci\u00f3n se muestran algunos ejemplos:</li> </ul> <pre><code>body { margin: 0.51 in; }\nh1 { line-height: 2cm; }\np { word-spacing: 4mm; }\na { font-size: 12pt; }\nspan { font-size: 1pc; }\n</code></pre> <p>La principal ventaja de las unidades absolutas es que su valor es directamente el valor que se debe utilizar, sin necesidad de realizar c\u00e1lculos intermedios. Su principal desventaja es que son muy poco flexibles y no se adaptan f\u00e1cilmente a los diferentes medios.</p> <p>De todas las unidades absolutas, la \u00fanica que suele utilizarse es el punto (<code>pt</code>). Se trata de la unidad de medida preferida para establecer el tama\u00f1o del texto en los documentos que se van a imprimir, es decir, para el medio print de CSS.</p>"},{"location":"tema_1/page_3/#unidades-relativas","title":"Unidades relativas","text":"<p>La unidades relativas, a diferencia de las absolutas, no est\u00e1n completamente definidas, ya que su valor siempre est\u00e1 referenciado respecto a otro valor. A pesar de su aparente dificultad, son las m\u00e1s utilizadas en el dise\u00f1o web por la flexibilidad con la que se adaptan a los diferentes medios.</p> <p>A continuaci\u00f3n se muestran las tres unidades de medida relativas definidas por CSS y la referencia que toma cada una para determinar su valor real:</p> <ul> <li><code>px</code> (p\u00edxeles): relativa respecto a la resoluci\u00f3n de la pantalla del dispositivo.</li> <li><code>ex</code>: relativa respecto a la altura de la letra x min\u00fascula en el tipo y tama\u00f1o de letra del elemento.</li> <li><code>em</code>: relativa respecto al tama\u00f1o de letra del elemento. Por ejemplo, si un div tiene un tama\u00f1o de fuente de 18px, 10em equivaldr\u00edan a 180px. Debemos tener en cuenta que el elemento puede haber heredado el tama\u00f1o de fuente de su elemento padre, que puede haberlo heredado a su vez de su elemento padre, y as\u00ed sucesivamente. Por tanto, es posible que los em especificados se vean afectados por por el tama\u00f1o de fuente de cualquiera de los elementos antepasados de dicho elemento. Por ejemplo, si se establece el tama\u00f1o de letra de un elemento a 1.25em, y \u00e9ste hab\u00eda heredado de su padre un tama\u00f1o de letra de 16px, entonces el tama\u00f1o final de letra con el que se mostrar\u00e1 ser\u00e1 16 x 1.25 = 20px.</li> <li><code>rem</code> (root em): relativa respecto al tama\u00f1o de letra del elemento ra\u00edz. El tama\u00f1o real en p\u00edxeles al que traducen a la hora de mostrar el elemento depende del tama\u00f1o de la fuente del elemento ra\u00edz de la p\u00e1gina, o sea el elemento <code>&lt;html&gt;</code>. Ese tama\u00f1o de fuente ra\u00edz es multiplicado por cualquier numero que est\u00e1 usando con tu unidad rem. Todos los navegadores por asignan por defecto al elemento ra\u00edz <code>&lt;html&gt;</code> un tama\u00f1o de letra de 16px. As\u00ed, con un tama\u00f1o fuente de elemento ra\u00edz de 16px, 10rem equivaldr\u00e1 a 160px.</li> <li>Relativas al viewport (ventana de visualizaci\u00f3n):<ul> <li><code>vw</code>: 1% del ancho del viewport</li> <li><code>vh</code>: 1% del alto del viewport</li> <li><code>vmin</code>: 1% del valor menor entre el ancho y el alto del viewport.</li> <li><code>vmax</code>: 1% del valor mayor entre el ancho y el alto del viewport.</li> </ul> </li> </ul> Ejercicio <p>Realiza una p\u00e1gina web que contenga 4 divs, donde cada uno de ellos muestra un nombre. Pon el color de fondo de cada uno de ellos distinto. Haz que los tres primeros tengan un tama\u00f1o de fuente de 2em y el \u00faltimo de ellos de 2rem. Adem\u00e1s establece el tama\u00f1o base de la p\u00e1gina web (etiqueta html) a 20px. Finalmente establece el tama\u00f1o del body a 30px</p> <p>Hazte las siguientes preguntas:</p> <ol> <li>\u00bfDe qu\u00e9 tama\u00f1o se muestran los tres primeros divs y por qu\u00e9?</li> <li>\u00bfDe qu\u00e9 tama\u00f1o se muestra el \u00faltimo div y por qu\u00e9?</li> </ol> Ejercicio <p>Realiza el ejercicio anterior pero haciendo que el segundo div sea hijo del primero, el tercero del segundo y el cuarto del tercero. Aplica los mismos estilos CSS del ejercicio anterior.</p> <p>Hazte las siguientes preguntas:</p> <ol> <li>\u00bfDe qu\u00e9 tama\u00f1o se muestran los tres primeros divs y por qu\u00e9?</li> <li>\u00bfDe qu\u00e9 tama\u00f1o se muestra el \u00faltimo div y por qu\u00e9?</li> </ol> Ejercicio <p>Realiza una p\u00e1gina web que contenga 2 divs, donde cada uno de ellos muestra un nombre. Pon el color de fondo de cada uno de ellos distinto. Haz que cada div tenga la misma altura del viewport</p> <p>\u00bfQu\u00e9 efecto produce en la p\u00e1gina web y por qu\u00e9?</p>"},{"location":"tema_1/page_3/#porcentajes","title":"Porcentajes","text":"<p>El porcentaje tambi\u00e9n es una unidad de medida relativa, aunque por su importancia CSS la trata de forma separada al resto. Un porcentaje est\u00e1 formado por un valor num\u00e9rico seguido del s\u00edmbolo <code>%</code> y siempre est\u00e1 referenciado a otra medida. Cada una de las propiedades de CSS que permiten indicar como valor un porcentaje, define el valor al que hace referencia ese porcentaje.</p> <p>Los porcentajes se pueden utilizar por ejemplo para establecer el valor del tama\u00f1o de letra de los elementos:</p> <pre><code>/* Tama\u00f1o de letra el doble de grande del tama\u00f1o heredado del padre */\nh1 {\nfont-size: 200%;\n}\n/* Tama\u00f1o de letra 1.5 veces el tama\u00f1o de letra heredado del padre */\nh2 {\nfont-size: 150%;\n}\n</code></pre> Ejercicio <p>Realiza una web que muestre un div padre que dentro contiene dos divs hijos. Haz que todos los divs tengan un color de fondo distinto. El div padre ocupa el 50% de ancho del body. El primer div hijo debe ocupar el 75% del ancho del div padre y el segundo div hijo el 75% del ancho del viewport.</p> <p>Info</p> <p>Tenemos disponibles una serie de conversores online entre distintas unidades:</p> <p>http://simplecss.eu/pxtoems.html</p> <p>http://emilolsson.com/tools/vw-unit-calc-an-online-responsive-css-font-size-calculator/</p>"},{"location":"tema_1/page_3/#calc","title":"calc()","text":"<p>Algunas veces necesitamos realizar determinados c\u00e1lculos matem\u00e1ticos para asignar un valor a una propiedad CSS, incluso usando medidas relativas como porcentajes. Por ejemplo, supongamos que queremos repartir proporcionalmente la anchura de una caja padre entre sus cajas hijas, por lo que deber\u00eda dividir el 100% de padre entre el n\u00famero de cajas hijas.</p> <p>Para poder realizar este tipo de operaciones CSS 3 proporciona la funci\u00f3n <code>calc()</code>, que permite realizar c\u00e1lculos con medidas, como sumas, restas, multiplicaciones y divisiones, mezclando porcentajes, p\u00edxeles o cualquier unidad.</p> <p>Veamos un ejemplo. Queremos hacer que las tres cajas hijas se repartan la anchura del padre y dejen entre ellas un margen izquierdo y derecho de 15px. Establecer\u00edamos para las cajas hijas la siguiente regla:</p> <pre><code>.hija{\nwidth: calc((100% / 3) - 30px)\n}\n</code></pre> <p>La gran ventaja de la funci\u00f3n <code>calc()</code> es que nos permite mezclar distintos tipos de unidades para realizar c\u00e1lculos complejos. Veamos algunos ejemplos:</p> <pre><code>div {\nfont-size: calc(3em + 5px);\npadding: calc(1vmax + -1vmin);\ntransform: rotate(calc(1turn - 32deg));\nbackground: hsl(180, calc(2*25%), 65%);\nline-height: calc(8/3);\nwidth: calc(23vmin - 2*3rem);\n}\n</code></pre>"},{"location":"tema_1/page_3/#colores-en-css","title":"Colores en CSS","text":"<p>Los colores en CSS se pueden indicar de distintas formas diferentes:</p> <ul> <li> <p>Palabras clave: CSS define una serie de palabras clave para referirse a los colores principales. Por ejemplo:</p> <pre><code>p { color: black;\n}\n</code></pre> </li> <li> <p>La variable <code>currentColor</code>, que hace referencia al color actual del elemento, ya sea porque haya sido establecido expl\u00edcitamente o porque haya sido heredado de su padre.</p> <pre><code>p{\ncolor: currentColor\n}\n</code></pre> </li> <li> <p>RGB decimal: Se indica el color en relaci\u00f3n a la cantidad de rojo (R), verde (G) y azul (B) de la que est\u00e1 compuesto el color. Cada componente se expresa con un valor entre 0 y 255. Por ejemplo:</p> <pre><code>p{\ncolor: rgb(71, 98, 176);\n}\n</code></pre> </li> <li> <p>RGB porcentual: Similar al anterior, pero la cantidad de cada componente se indica en porcentaje de mezcla. Por ejemplo:</p> <pre><code>p {\ncolor: rgb(27%, 38%, 69%);\n}\n</code></pre> </li> <li> <p>RGB hexadecimal: Se usa el car\u00e1cter <code>#</code> seguido de dos d\u00edgitos hexadecimales por cada componente para especificar la cantidad correspondiente. Por ejemplo:</p> <pre><code>p { color: #B1251E;\n}\n</code></pre> <p>Si los dos d\u00edgitos de cada componente son similares, se puedo usar el formato comprimido, donde se usa un \u00fanico car\u00e1cter hexadecimal por cada componente. Por ejemplo:</p> <pre><code>/* Similar a #336699 */\np {\ncolor: #369;\n}\n</code></pre> </li> <li> <p>RGB + canal alpha: Se indica la cantidad cada componente con valores entre 0 y 255, y el nivel de opacidad con un valor decimal entre 0.0 y 1.0. Por ejemplo:</p> <pre><code>p{\ncolor: rgba(255, 0, 0, 0.3);\n}\n</code></pre> </li> <li> <p>HSL: Se indica la tonalidad (hue) con un valor entre 0 y 255, la saturaci\u00f3n (saturation) con un valor porcentual y la luminosidad (luminosity) con un valor porcentual. Por ejemplo:</p> <pre><code>p{\ncolor: hsl(120, 60%, 70%);\n}\n</code></pre> </li> <li> <p>HSL + canal alpha: Se indica la tonalidad (hue) con un valor entre 0 y 255, la saturaci\u00f3n (saturation) con un valor porcentual, la luminosidad (luminosity) con un valor porcentual y el nivel de opacidad con un valor decimal entre 0.0 y 1.0. Por ejemplo:</p> <pre><code>p{\ncolor: hsla(120, 60%, 70%, 0.3);\n}\n</code></pre> </li> </ul> <p>Podemos usar las funciones <code>rgba</code> o <code>hsla</code> para que el color de algo sea un determinado tanto por ciento m\u00e1s claro o m\u00e1s oscuro que su fondo. Para aclarar usaremos la funci\u00f3n <code>rgba</code> con el color blanco y como nivel de opacidad el porcentaje que queremos que se aclare el color respecto al fondo, y para oscurece usaremos de forma similar el color negro. Por ejemplo <code>rgba(255, 255, 255, .1)</code> establecer\u00e1 un color un 10% m\u00e1s claro respecto al color <code>del fondo, mientras que</code>rgba(0, 0, 0, .1) establecer\u00e1 un color un 10% m\u00e1s oscuro respecto al color del fondo. Por ejemplo:</p> <p> See the Pen    CSS colors by irubenboy (@irubenboy)   on CodePen. </p> <p>Normalmente cuando de dise\u00f1a una web se usa una paleta de colores, que contiene la lista de colores que usar\u00e1n los distintos elementos. Para crear dicha paleta hay varios esquemas de selecci\u00f3n de colores manteniendo cierta harmon\u00eda. Para crear la paleta de colores se recomienda visitar la web http://paletton.com/ que nos va a permitir elegir entre distintos esquemas de selecci\u00f3n harm\u00f3nica de colores.</p>"},{"location":"tema_1/page_4/","title":"4 Variable CSS","text":""},{"location":"tema_1/page_4/#introduccion","title":"Introducci\u00f3n","text":"<p>Cuando se dise\u00f1a un sitio o aplicaci\u00f3n web es habitual reutilizar una serie de valores, por ejemplo colores, para dar consistencia al dise\u00f1o. El problema es que repetir los mismos valores una y otra vez no solo es tedioso sino adem\u00e1s propenso a cometer errores.</p> <p>Desde hace tiempo muchos dise\u00f1adores usan pre-procesadores CSS, como por ejemplo Sass, que nos facilitan mucho el trabajo a la hora de generar nuestros archivos CSS. Normalmente en los archivos fuentes que se crean con estos pre-procesadores se definen variables para guardar estos valores, y son usadas posteriormente en distintas reglas del CSS. Finalmente, cuando el pre-procesador genera el archivo CSS resultante, el nombre de la variable es sustituido por su valor, de manera que el resultado es CSS puro.</p> <p>Sin embargo, las variables definidas mediante pre-procesadores tienen una una limitaci\u00f3n muy importante: no se pueden modificar en tiempo real, ya que \"desaparecen\" cuando se genera el CSS final. Como consecuencia, dichas variables NO existen para el navegador, por lo que no se pueden modificar en tiempo de ejecuci\u00f3n mediante JavaScript.</p> <p>Para paliar este inconveniente, CSS nos permite definir las conocidas como \"propiedades CSS no est\u00e1ndar\", que no dejan de ser variables que pueden incluidas y usadas en nuestros archivos CSS est\u00e1ndar. Al tratarse de variables CSS puras, pueden ser modificadas en tiempo de ejecuci\u00f3n en nuestro navegador mediante JavaScript. Por ejemplo, si definimos los colores de nuestra p\u00e1gina web en forma de variables CSS, desde el navegador ser\u00edamos capaces de modificarlos mediante JavaScript, de manera que nuestra web podr\u00eda lucir distinto atendiendo a valores seleccionados por el usuario.</p>"},{"location":"tema_1/page_4/#definicion-de-variables-css","title":"Definici\u00f3n de variables CSS","text":"<p>Debemos tener en cuenta que una variable CSS en realidad es una propiedad no est\u00e1ndar, es decir, que estamos definiendo una propiedad con un nombre inventado a los elementos de nuestro HTML al que se le aplique la regla en la que se est\u00e1 definiendo la variable.</p> <p>Aunque podemos definir una variable CSS dentro de cualquier regla, se suele hacer en una regla cuyo selector sea <code>:root</code>, que corresponde al elemento ra\u00edz de nuestro HTML. El motivo es que las variables CSS son propiedades que son heredadas de padres a hijos, por lo que al definirlas en el elemento ra\u00edz ser\u00e1n heredadas por todos los elemento del HTML y por tanto podr\u00e1n ser usadas en cualquier regla del archivo CSS.</p> <p>Veamos un ejemplo:</p> <pre><code>:root {\n/* Definimos una variable llamada color-principal */\n--color-principal: #06c;\n}\n</code></pre> <p>Algunos aspectos que debemos tener en cuenta respecto a la definici\u00f3n de variables CSS:</p> <ul> <li>No dejan de ser como cualquier otra propiedad CSS, pero con un nombre no est\u00e1ndar.</li> <li> <p>Se heredan por defecto, aunque podemos cambiar este comportamiento definiendo la regla:</p> <pre><code>:root { --color-principal: blue;\n}\n# alert {\n--color-principal: red;\n}\n</code></pre> </li> <li> <p>El espacio en blanco es un valor v\u00e1lido para una variable CSS. Por ejemplo <code>--foo: ;</code> es v\u00e1lido.</p> </li> <li>Son case-sensitive, es decir, se distinguen entre may\u00fasculas y min\u00fasculas en su identificador.</li> <li> <p>Se pueden combinar las variables CSS con las media queries en tus dise\u00f1os \"responsive\". Por ejemplo:</p> <p>```css :root {   --separacion: 4px; }</p> <p>@media (min-width: 600px) {   :root {     --separacion: 16px;   } } ```</p> </li> <li> <p>El valor de la variable puede contener unidad o no, por ejemplo <code>--variable: 10</code> o <code>--variable: 10px</code></p> </li> </ul>"},{"location":"tema_1/page_4/#uso-de-la-variable-css","title":"Uso de la variable CSS","text":"<p>Para usar el valor de una variable CSS en una regla CSS usaremos la funci\u00f3n <code>var()</code>. Esta funci\u00f3n obtiene el valor de la propiedad indicada y su sintaxis completa es la siguiente:var(<code>&lt;nombre-propiedad&gt; [, &lt;valor-por-defecto&gt; ]?</code>).</p> <p>El primer argumento (<code>&lt;nombre-propiedad&gt;</code>) es el nombre completo de la propiedad cuyo valor se quiere obtener. El segundo argumento (<code>&lt;valor-por-defecto&gt;</code>) es opcional y es el valor que debe retornar la funci\u00f3n cuando la propiedad no existe. Veamos un ejemplo:</p> <pre><code>:root {\n--color-principal: #06c;\n}\n\u200b\n#foo h1 {\ncolor: var(--color-principal);\n}\n</code></pre> <p>El valor por defecto puede ser en realidad una lista de varios valores separados por comas. Por ejemplo, si utilizas <code>var(--font-stack, \"Roboto\", \"Helvetica\");</code> y la propiedad <code>--font-stack</code> no existe, el valor devuelto ser\u00e1 \"Roboto\", \"Helvetica\" todo junto.</p> <p>Cuidado con los atajos en las propiedades CSS como <code>margin</code> y <code>padding</code>. En este caso, como sus valores no est\u00e1n separados por comas, el valor por defecto tampoco debe contener comas. por ejemplo: <code>padding: var(--separacion, 10px 15px 20px);</code>.</p> <p>Aspectos a tener en cuenta:</p> <ul> <li>El resultado de <code>var()</code> NO se puede usar como nombre de una propiedad CSS. Por ejemplo: <code>var(--lado): 20px;</code> NO es v\u00e1lido.</li> <li>NO deben usarse variables dentro de la funci\u00f3n <code>url()</code></li> <li>Se pueden anidar <code>var()</code> como segundo par\u00e1metro de un <code>var()</code>. Ojo, esto NO funciona si el navegador no soporta las variables.</li> <li>Si el valor de la variable no es v\u00e1lido en el contexto en el que se usa, la propiedad no ser\u00e1 aplicada.</li> <li>No se puede definir una variable haciendo uso del valor de la propia variable (ciclo). Por ejemplo <code>--vari: calc(var(--vari) + 2px);</code> NO es v\u00e1lido. El resultado es como si no se hubiera definido la variable.</li> <li> <p>Para navegadores que no soporten variables se recomienda definir la propiedad normalmente con un valor literal y despu\u00e9s sobrescribir la propiedad usando variable. Por ejemplo:</p> <pre><code>:root {\n--color-principal: #06c;\n}\n# foo h1 {\ncolor: red;\ncolor: var(--color-principal);\n}\n</code></pre> </li> <li> <p>Si el valor de la variable no contiene unidad, NO podemos simplemente tratar de concatenar. Por ejemplo <code>var(--variable)px</code> NO es v\u00e1lido. Para conseguir el valor en px tendremos que usar la funci\u00f3n <code>calc()</code> de la siguiente manera: <code>calc(var(--variable) * 1px)</code>, que s\u00ed es v\u00e1lida. De hecho, se recomienda definirlas sin unidad, ya siempre podremos convertirlas a la unidad deseada mediante la funci\u00f3n <code>calc()</code>. Sin embargo, la conversi\u00f3n al contrario NO es posible, es decir no podemos quitarle la unidad a una variable y quedarnos s\u00f3lo con la magnitud, ya que la funci\u00f3n <code>calc()</code> no permite dividir entre valores con unidades.</p> </li> <li>Animar directamente el valor de una variable NO funciona.</li> </ul>"},{"location":"tema_1/page_5/","title":"5 Elementos sem\u00e1nticos de HTML5","text":""},{"location":"tema_1/page_5/#introduccion","title":"Introducci\u00f3n","text":"<p>Las etiquetas sem\u00e1nticas ayudan a definir la estructura del documento y permiten que las p\u00e1ginas web sean mejor indexadas por los buscadores. Una etiqueta se califica como sem\u00e1ntica si tiene que ver el significado, es decir, si nos informa sobre lo que trata su contenido. Por ejemplo, la etiqueta <code>&lt;img&gt;</code> indica que su contenido ser\u00e1 una imagen.</p> <p>Antes de HTML 5, el contenido de la p\u00e1gina web se estructuraba con etiquetas <code>&lt;div&gt;</code>, que desgraciadamente no aportan ninguna informaci\u00f3n sobre el contenido que albergan, salvo quiz\u00e1s por el significado de los valores asignados al atributo id o al atributo class, que podr\u00eda proporcionarnos alguna clave sobre cu\u00e1l era el contenido de dicha etiqueta <code>&lt;div&gt;</code>.</p> <p>Para solucionar este problema, HTML 5 introdujo una serie de etiquetas sem\u00e1nticas, que permiten determinar la naturaleza del contenido de las mismas. Por ejemplo, la etiqueta <code>&lt;section&gt;</code> nos hace pensar que su contenido corresponde a una secci\u00f3n o cap\u00edtulo dentro de la p\u00e1gina. Otros ejemplos de etiquetas sem\u00e1nticas son <code>&lt;article&gt;</code> <code>&lt;header&gt;</code>, <code>&lt;nav&gt;</code> o <code>&lt;footer&gt;</code>, que veremos a continuaci\u00f3n.</p> <p>Aunque el uso de estas etiquetas sem\u00e1nticas es bastante simple e intuitivo, debemos tener en cuenta que se pueden usar de distintas formas, como veremos a continuaci\u00f3n, atendiendo al significado que queremos que comuniquen. Realmente no existen normas fijas, cada dise\u00f1ador puede darles el uso que considere m\u00e1s apropiado, siempre respetando el sentido com\u00fan, ya que los buscadores utilizar\u00e1n estas etiquetas para indexar la p\u00e1gina.</p> <p>Es importante aclarar que las etiquetas sem\u00e1nticas no a\u00f1aden de por s\u00ed ning\u00fan formato espec\u00edfico. Es decir, por usar <code>&lt;nav&gt;</code> no se crea un men\u00fa, ni el <code>&lt;header&gt;</code> tiene por defecto un tama\u00f1o de letra m\u00e1s grande. El formato debemos definirlo nosotros de la forma habitual, con CSS. El \u00fanico formato inicial que debemos tener en cuenta es que los navegadores incorporan la propiedad <code>display: block</code> a las etiquetas sem\u00e1nticas, por lo que inicialmente corresponden a elementos de bloque.</p>"},{"location":"tema_1/page_5/#estructurales","title":"Estructurales","text":"<p>Las etiquetas sem\u00e1nticas estructurales son las que definen la estructura general del sitio. Son las siguientes:</p> <ul> <li> <p><code>&lt;section&gt;</code>: Representa una secci\u00f3n, es decir una agrupaci\u00f3n de contenido con un tema com\u00fan, por ejemplo, las diferentes partes de un peri\u00f3dico: pol\u00edtica, sociedad, deportes, etc. Dentro de cada etiqueta <code>&lt;section&gt;</code> se suelen incluir etiquetas <code>&lt;article&gt;</code>, para representar los art\u00edculos de dicha secci\u00f3n. Cada secci\u00f3n suele estar encabezada por una etiqueta <code>&lt;h2&gt;</code> o <code>&lt;h3&gt;</code>. Por ejemplo:</p> <pre><code>&lt;section&gt;\n&lt;h2&gt;T\u00edtulo de la secci\u00f3n&lt;/h2&gt;\n&lt;article&gt;Un art\u00edculo de la secci\u00f3n&lt;/article&gt;\n&lt;article&gt;Otro art\u00edculo de la secci\u00f3n&lt;/article&gt;\n&lt;/section&gt;\n</code></pre> </li> <li> <p><code>&lt;article&gt;</code>: Representa una unidad de contenido, es decir, contenido que responde a un tema concreto, que por ejemplo pueda ser a\u00f1adido a un servicio de sindicaci\u00f3n de contenidos sin afectar a su entendimiento. Por ejemplo un art\u00edculo dentro de una revista, una receta en una p\u00e1gina de cocina, un post en un foro, etc. Aunque no es habitual, se pueden anidar un <code>&lt;article&gt;</code> dentro de otro <code>&lt;article&gt;</code>. Tambi\u00e9n est\u00e1 permitido poner dentro de un <code>&lt;article&gt;</code> una <code>&lt;section&gt;</code>, siempre que el art\u00edculo sea largo y tenga diferentes secciones. Cada art\u00edculo suele estar encabezado por una etiqueta <code>&lt;h2&gt;</code> o <code>&lt;h3&gt;</code>. Por ejemplo:</p> <pre><code>&lt;article&gt;\n&lt;h3&gt;T\u00edtulo del art\u00edculo&lt;/h3&gt;\n&lt;section&gt;Primera secci\u00f3n del art\u00edculo largo&lt;/section&gt;\n&lt;section&gt;Segunda secci\u00f3n del art\u00edculo largo&lt;/section&gt;\n&lt;/article&gt;\n</code></pre> </li> <li> <p><code>&lt;header&gt;</code>: Se utiliza como una introducci\u00f3n del elemento que la contiene (en espa\u00f1ol, cabecera). Normalmente se coloca una etiqueta <code>&lt;header&gt;</code> como hija directa del <code>&lt;body&gt;</code>, para representar la cabecera de toda la p\u00e1gina. Dentro del <code>&lt;header&gt;</code> se suelen incluir el t\u00edtulo, normalmente en forma de etiqueta <code>&lt;h1&gt;</code>, la descripci\u00f3n corta, normalmente en forma de etiqueta <code>&lt;h2&gt;</code> y el logo de la p\u00e1gina, mediante una etiqueta <code>&lt;img&gt;</code>. Por ejemplo:</p> <pre><code>&lt;body&gt;\n&lt;header&gt;\n&lt;h1&gt;Cabecera de la p\u00e1gina&lt;/h1&gt;\n&lt;/header&gt;\n&lt;/body&gt;\n</code></pre> <p>Aunque no es habitual, podemos colocar la etiqueta <code>&lt;header&gt;</code> dentro de una etiqueta <code>&lt;section&gt;</code>, para representar la cabecera de dicha secci\u00f3n, o incluso dentro de una etiqueta <code>&lt;article&gt;</code> para representar la cabecera de dicho art\u00edculo.</p> </li> <li> <p><code>&lt;nav&gt;</code>: Esta etiqueta est\u00e1 pensada para contener el men\u00fa de navegaci\u00f3n con los enlaces a las p\u00e1ginas del sitio web. Normalmente va en la parte superior de la p\u00e1gina o en un lateral. Aunque hay multitud de dise\u00f1os diferentes de men\u00fas de navegaci\u00f3n, normalmente contendr\u00e1 en su interior una lista desordenada <code>&lt;ul&gt;</code> que a su vez contiene un elemento <code>&lt;li&gt;</code> por cada \u00edtem del men\u00fa. Adem\u00e1s, cada elemento <code>&lt;li&gt;</code> contendr\u00e1 una etiqueta <code>&lt;a&gt;</code> que permite enlazar con una determinada p\u00e1gina o ancla cuando el usuario pulse sobre el mismo. Por ejemplo:</p> <pre><code>&lt;nav&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"#\"&gt;Item 3&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre> </li> <li> <p><code>&lt;aside&gt;</code>: Esta etiqueta est\u00e1 dise\u00f1ada para contenido tangencial, es decir, menos importante que el cuerpo de la p\u00e1gina, y que suele ser de un tema relacionado indirectamente (o no relacionado) con el tema principal. Se suele colocar en los laterales de la p\u00e1gina. Pero no todo lo que va en los laterales debe ser obligatoriamente una etiqueta <code>&lt;aside&gt;</code>.</p> </li> <li> <p><code>&lt;main&gt;</code>: Representa el contenido principal de la p\u00e1gina. Suele contener en su interior secciones y/o art\u00edculos. Es el complemento a <code>&lt;aside&gt;</code>.</p> </li> <li> <p><code>&lt;footer&gt;</code>: Normalmente va al final de la p\u00e1gina y contiene informaci\u00f3n del tipo: autor, copyright, contacto, mapa del sitio, etc. Corresponde a lo que se conoce como pie de p\u00e1gina. Se pueden poner <code>&lt;header&gt;</code> y <code>&lt;footer&gt;</code> dentro de <code>&lt;section&gt;</code> y <code>&lt;article&gt;</code>, aunque no es lo m\u00e1s habitual. Por ejemplo:</p> <pre><code>&lt;body&gt;\n&lt;!-- ... --&gt;\n&lt;footer&gt;\n&lt;h4&gt;Pie de la p\u00e1gina&lt;/h1&gt;\n&lt;/footer&gt;\n&lt;/body&gt;\n</code></pre> </li> </ul>"},{"location":"tema_1/page_5/#estructura-habitual-de-una-pagina-web","title":"Estructura habitual de una p\u00e1gina web","text":"<p>Vistos las distintas etiquetas sem\u00e1nticas estructurales, podemos comentar que indicar una p\u00e1gina web tiene una estructura general parecida a la siguiente:</p> <pre><code>&lt;body&gt;\n&lt;header&gt;...&lt;/header&gt;\n&lt;nav&gt;...&lt;/nav&gt;\n&lt;main&gt;\n&lt;section&gt;\n&lt;article&gt;...&lt;/article&gt;\n&lt;/section&gt;\n&lt;/main&gt;\n&lt;aside&gt;...&lt;/aside&gt;\n&lt;footer&gt;...&lt;/footer&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"tema_1/page_5/#no-estructurales","title":"No estructurales","text":"<p>HTML 5 define otras etiquetas sem\u00e1nticas que NO sirven para establecer la estructura general del sitio, entre los que destacamos:</p> <ul> <li> <p><code>&lt;details&gt;</code> y <code>&lt;summary&gt;</code>: El elemento <code>&lt;details&gt;</code> representa un bloque de texto que por defecto aparece contra\u00eddo pero que puede ser expandido (detalle). Como primer hijo de la etiqueta <code>&lt;details&gt;</code> se usa una etiqueta <code>&lt;summary&gt;</code> para indicar el texto que debe mostrarse cuando el bloque est\u00e9 contra\u00eddo (en espa\u00f1ol, resumen). Por defecto aparecer\u00e1 contra\u00eddo. Si queremos que nuestro bloque de texto aparezca inicialmente expandido usaremos el atributo open=\"open\" en la etiqueta <code>&lt;details&gt;</code>. Veamos un ejemplo:</p> <pre><code>&lt;details open=\"open\"&gt;\n&lt;summary&gt;Leer m\u00e1s&lt;/summary&gt;\n&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Commodi quos ratione itaque facilis aspernatur quia quas, iure quisquam nobis, deleniti voluptates sint asperiores debitis quaerat harum iste. Nam, magni, quam!&lt;/p&gt;\n&lt;/details&gt;\n</code></pre> </li> <li> <p><code>&lt;figure&gt;</code> y <code>&lt;figcaption&gt;</code>: El elemento HTML <code>&lt;figure&gt;</code> representa contenido independiente, a menudo con un t\u00edtulo. Por lo general, dicho contenido se trata de una imagen, una ilustraci\u00f3n, un diagrama, un fragmento de c\u00f3digo, o un esquema al que se hace referencia en el texto principal, pero que se puede mover a otra p\u00e1gina o a un ap\u00e9ndice sin que afecte al flujo principal. Se trata de un elemento en bloque. Por su parte, el elemento <code>&lt;figcaption&gt;</code> representa un subt\u00edtulo o leyenda asociado con una imagen o ilustraci\u00f3n descrita por el resto de los datos asociados con el elemento <code>&lt;figure&gt;</code> padre de <code>&lt;figcaption&gt;</code>. Este elemento es opcional; y si no se especifica, el elemento padre <code>&lt;figure&gt;</code> no tendr\u00e1 leyenda asociada. Veamos un ejemplo de uso de estos dos elementos asociados a una imagen de contenido:</p> <pre><code>&lt;figure&gt;\n&lt;img src=\"/imagenes/foto1.jpg\" alt=\"Vista nocturna de la Alhambra\" /&gt;\n&lt;figcaption&gt;Fig 1. - Vista nocturna de la Alhambra&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre> </li> <li> <p><code>&lt;time&gt;</code> y <code>&lt;address&gt;</code>: Representan, respectivamente, una fecha / hora y una direcci\u00f3n f\u00edsica</p> </li> </ul>"},{"location":"tema_2/page_1/","title":"1 Selectores b\u00e1sicos","text":""},{"location":"tema_2/page_1/#introduccion","title":"Introducci\u00f3n","text":"<p>Como hemos visto, una regla de CSS est\u00e1 formada por una parte llamada selector y otra parte llamada declaraci\u00f3n. La declaraci\u00f3n indica \"qu\u00e9 hay que hacer\" y el selector indica \"a qui\u00e9n hay que aplic\u00e1rselo\". Por lo tanto, los selectores son imprescindibles para aplicar de forma correcta los estilos CSS en una p\u00e1gina.</p> <p>A un mismo elemento HTML se le pueden aplicar varias reglas CSS y cada regla CSS puede aplicarse a un n\u00famero ilimitado de elementos. Adem\u00e1s, una misma regla puede aplicarse sobre varios selectores y un mismo selector se puede utilizar en varias reglas.</p> <p>Podemos consultar la especificaci\u00f3n oficial de CSS3 sobre selectores.</p>"},{"location":"tema_2/page_1/#selector-universal","title":"Selector universal","text":"<p>Se utiliza para seleccionar todos los elementos de la p\u00e1gina. Se indica mediante el car\u00e1cter asterisco <code>*</code>. El siguiente ejemplo elimina el margen y el relleno de todas los elementos:</p> <pre><code>* {\nmargin: 0;\npadding: 0;\n}\n</code></pre> <p>Normalmente se utiliza para sobrescribir los estilos que aplica por defecto el navegador. Tambi\u00e9n se puede combinar con otros selectores, como veremos m\u00e1s adelante.</p>"},{"location":"tema_2/page_1/#selector-de-tipo-o-etiqueta","title":"Selector de tipo o etiqueta","text":"<p>Selecciona todos los elementos de la p\u00e1gina cuya etiqueta HTML coincide con el valor del selector. El siguiente ejemplo selecciona todos los p\u00e1rrafos de la p\u00e1gina y les aplica un margen izquierdo:</p> <pre><code>p { margin-left: 15px; }\n</code></pre> <p>Para utilizar este selector, solamente es necesario indicar el nombre de una etiqueta HTML (sin los caracteres <code>&lt;</code> y <code>&gt;</code>) correspondiente a los elementos que se quieren seleccionar.</p>"},{"location":"tema_2/page_1/#encadenado-de-selectores","title":"Encadenado de selectores","text":"<p>Si se quieren aplicar los mismos estilos a dos etiquetas diferentes, se pueden encadenar los selectores, indicando en la regla varios selectores separados por el car\u00e1cter coma <code>,</code>. En el siguiente ejemplo, los t\u00edtulos de secci\u00f3n <code>h1</code>, <code>h2</code> y <code>h3</code> comparten los mismos estilos:</p> <pre><code>h1, h2, h3 {\ncolor: #8A8E27;\nfont-weight: normal;\nfont-family: Arial, Helvetica, sans-serif;\n}\n</code></pre> <p>En las hojas de estilo complejas, es habitual agrupar las propiedades comunes de varios elementos en una \u00fanica regla CSS y posteriormente definir las propiedades espec\u00edficas de esos mismos elementos. El siguiente ejemplo establece en primer lugar las propiedades comunes de los t\u00edtulos de secci\u00f3n (color y tipo de letra) y a continuaci\u00f3n, establece el tama\u00f1o de letra de cada uno de ellos:</p> <pre><code>h1, h2, h3 {\ncolor: #8A8E27;\nfont-weight: normal;\nfont-family: Arial, Helvetica, sans-serif;\n}\nh1 { font-size: 2em; }\nh2 { font-size: 1.5em; }\nh3 { font-size: 1.2em; }\n</code></pre>"},{"location":"tema_2/page_1/#selector-descendente","title":"Selector descendente","text":"<p>Selecciona los elementos que se encuentran dentro de otros elementos. Un elemento es descendiente de otro cuando se encuentra entre las etiquetas de apertura y de cierre del otro elemento (es hijo, nieto, bisnieto, etc). Este selector se representa mediante el car\u00e1cter espacio en blanco, por lo que debemos ser muy cuidadosos con no aplicarlo por error al incluir espacios en blanco en otros selectores.</p> <p>Por ejemplo, el selector la siguiente regla selecciona todos los elementos de la p\u00e1gina que se encuentren dentro de un elemento <code>&lt;p&gt;</code>:</p> <pre><code>p { color: red; }\n</code></pre> <p>Si el c\u00f3digo HTML de la p\u00e1gina es el siguiente:</p> <pre><code>&lt;p&gt;\n&lt;!-- ... --&gt;\n&lt;span&gt;texto1&lt;/span&gt;\n&lt;!-- ... --&gt;\n&lt;a href=\"\"&gt;...&lt;span&gt;texto2&lt;/span&gt;&lt;/a&gt;\n&lt;!-- ... --&gt;\n&lt;/p&gt;\n</code></pre> <p>El selector <code>p span</code> selecciona tanto texto1 como texto2. El motivo es que en el selector descendente, un elemento no tiene que ser descendiente directo del otro. La \u00fanica condici\u00f3n es que un elemento debe estar dentro de otro elemento, sin importar el nivel de profundidad en el que se encuentre.</p> <p>Al resto de elementos de la p\u00e1gina que no est\u00e1n dentro de un elemento <code>&lt;p&gt;</code>, no se les aplica la regla CSS anterior.</p> <p>Los selectores descendentes permiten aumentar la precisi\u00f3n del selector de tipo o etiqueta. As\u00ed, utilizando el selector descendente es posible aplicar diferentes estilos a los elementos del mismo tipo. El siguiente ejemplo ampl\u00eda el anterior y muestra de color azul todo el texto de los contenidos dentro de un <code>&lt;h1&gt;</code>:</p> <pre><code>h1 span { color: blue; }\n</code></pre> <p>Con las reglas CSS anteriores:</p> <ul> <li>Los elementos que se encuentran dentro de un elemento <code>&lt;p&gt;</code> se muestran de color rojo.</li> <li>Los elementos que se encuentran dentro de un elemento <code>&lt;h1&gt;</code> se muestran de color azul.</li> <li>El resto de elementos de la p\u00e1gina, se muestran con el color por defecto aplicado por el navegador. En realidad podemos aplicar el selector descendiente varias veces en la misma regla. Los selectores descendentes siempre est\u00e1n formados por dos o m\u00e1s selectores separados entre s\u00ed por espacios en blanco. El \u00faltimo selector indica el elemento sobre el que se aplican los estilos y todos los selectores anteriores indican el lugar en el que se debe encontrar ese elemento. En el siguiente ejemplo, el selector descendente se compone de cuatro selectores:</li> </ul> <pre><code>p a span em { text-decoration: underline; }\n</code></pre> <p>Los estilos de la regla anterior se aplican a los elementos de tipo <code>&lt;em&gt;</code> que se encuentren dentro de elementos de tipo <code>&lt;span&gt;</code>, que a su vez se encuentren dentro de elementos de tipo <code>&lt;a&gt;</code> que se encuentren dentro de elementos de tipo <code>&lt;p&gt;</code>.</p> <p>Warning</p> <p>Es muy importante NO confundir el selector descendente con la combinaci\u00f3n de selectores:</p> <pre><code>/*El estilo se aplica a todos los elementos \"p\", \"a\", \"span\" y \"em\"*/\np, a, span, em { text-decoration: underline; }\n/*El estilo se aplica solo a los elementos \"em\" que se\nencuentran dentro de \"p a span\"*/\np a span em { text-decoration: underline; }\n</code></pre> <p>Se puede restringir el alcance del selector descendente combin\u00e1ndolo con el selector universal. El siguiente ejemplo, muestra de color rojo todos los enlaces que sean hijos, nietos, bisnietos, etc de una etiqueta <code>&lt;p&gt;</code>:</p> <pre><code>p a { color: red; }\n</code></pre> <p>Sin embargo, en el siguiente ejemplo solamente los enlaces que sean nietos, bisnietos, etc. se muestran de color rojo, si son hijos directos no:</p> <pre><code>p * a { color: red; }\n</code></pre> <p>La raz\u00f3n es que el selector <code>p * a</code> se interpreta como todos los elementos de tipo <code>&lt;a&gt;</code> que se encuentren dentro de cualquier elemento que, a su vez, se encuentre dentro de un elemento de tipo <code>&lt;p&gt;</code>. Si un elemento <code>&lt;a&gt;</code> es hijo directo de <code>&lt;p&gt;</code>, no cumple dicha condici\u00f3n.</p> <p>Info</p> <p>CSS4 permite usar para este selector el car\u00e1cter &gt;&gt; en vez del espacio en blanco, aunque a\u00fan no es soportado por la mayor\u00eda de los navegadores.</p>"},{"location":"tema_2/page_1/#selector-de-clase","title":"Selector de clase","text":"<p>La manera m\u00e1s sencilla de aplicar estilos a un elemento o a un grupo de elementos consiste en establecer en el HTML de dichos elementos un nombre de clase com\u00fan a trav\u00e9s del atributo <code>class</code>. Por ejemplo:</p> <pre><code>&lt;body&gt;\n&lt;p class=\"destacado\"&gt;Lorem ipsum dolor sit amet...&lt;/p&gt;\n&lt;p&gt;Nunc sed lacus et est adipiscing accumsan...&lt;/p&gt;\n&lt;p&gt;Class aptent taciti sociosqu ad litora...&lt;/p&gt;\n&lt;/body&gt;\n</code></pre> <p>Entonces, en nuestra hoja de estilos CSS creamos una regla en la que usamos el selector de clase, representado por el car\u00e1cter punto <code>.</code> seguido del nombre de la clase. As\u00ed, siguiendo el ejemplo anterior, har\u00edamos:</p> <pre><code>.destacado { color: red; }\n</code></pre> <p>El selector <code>.destacado</code> se interpreta como cualquier elemento de la p\u00e1gina cuyo atributo class sea igual a destacado, por lo que solamente el primer p\u00e1rrafo cumple esa condici\u00f3n. Podemos combinar el selector de clase con el selector de etiqueta. Por ejemplo:</p> <pre><code>p.destacado { color: red }\n</code></pre> <p>El selector <code>p.destacado</code> se interpreta como aquellos elementos de tipo <code>&lt;p&gt;</code> que dispongan de un atributo class con valor destacado. De lo anterior se deduce que el atributo <code>.destacado</code> es equivalente a <code>*.destacado</code>, por lo que todos los dise\u00f1adores obvian el selector <code>*</code> al escribir un selector de clase normal. No debe confundirse el selector de clase con los selectores anteriores:</p> <pre><code>/* Todos los elementos de tipo \"p\" con atributo class=\"aviso\" */\np.aviso { ... }\n/* Todos los elementos con atributo class=\"aviso\" que est\u00e9n dentro\nde cualquier elemento de tipo \"p\" */\np .aviso { ... }\n/* Todos los elementos \"p\" de la p\u00e1gina y todos los elementos con\natributo class=\"aviso\" de la p\u00e1gina */\np, .aviso { ... }\n</code></pre> <p>Como sabemos, es posible indicar que un elemento HTML pertenece a varias clases. Por ejemplo:</p> <pre><code>&lt;p class=\"especial destacado error\"&gt;P\u00e1rrafo de texto...&lt;/p&gt;\n</code></pre> <p>Al p\u00e1rrafo anterior se le aplican los estilos definidos en las reglas <code>.especial</code>, <code>.destacado</code> y <code>.error</code>. Por ejemplo:</p> <pre><code>.error { color: red; }\n.destacado { font-size: 15px; }\n.especial { font-weight: bold; }\n</code></pre> <p>Si un elemento dispone de un atributo <code>class</code> con m\u00e1s de un valor, es posible utilizar un selector m\u00e1s avanzado:</p> <pre><code>.error.destacado { color: blue; }\n</code></pre> <p>En el ejemplo anterior se ha utilizado un selector de clase m\u00faltiple <code>.error.destacado</code>, que se interpreta como \"aquellos elementos de la p\u00e1gina que dispongan de un atributo class con al menos los valores <code>error</code> y <code>destacado</code>.</p>"},{"location":"tema_2/page_1/#selector-de-id","title":"Selector de id","text":"<p>El selector de id permite seleccionar un elemento de la p\u00e1gina a trav\u00e9s del valor de su atributo id. Este tipo de selectores s\u00f3lo seleccionan un elemento de la p\u00e1gina porque el valor del atributo id no se puede repetir en dos elementos diferentes de una misma p\u00e1gina.</p> <p>La sintaxis de los selectores de id es muy parecida a la de los selectores de clase, salvo que se utiliza el s\u00edmbolo de la almohadilla <code>#</code> en vez del punto <code>.</code> como prefijo del nombre de la regla CSS. Por ejemplo:</p> <pre><code>#destacado { color: red; }\n</code></pre> <p>Al igual que los selectores de clase, en este caso tambi\u00e9n se puede restringir el alcance del selector de id mediante la combinaci\u00f3n con otros selectores. El siguiente ejemplo aplica la regla CSS solamente al elemento de tipo <code>&lt;p&gt;</code> que tenga un atributo id igual al indicado:</p> <pre><code>p#aviso { color: blue; }\n</code></pre> <p>A primera vista, restringir el alcance de un selector de id puede parecer absurdo. En realidad, un selector de tipo <code>p#aviso</code> s\u00f3lo tiene sentido cuando el archivo CSS se aplica sobre muchas p\u00e1ginas HTML diferentes, y el id aviso se utilice en otra p\u00e1gina a otra etiqueta distinta que no sea una etiqueta <code>&lt;p&gt;</code>.</p>"},{"location":"tema_2/page_1/#combinacion-de-selectores","title":"Combinaci\u00f3n de selectores","text":"<p>CSS permite la combinaci\u00f3n de uno o m\u00e1s tipos de selectores para restringir el alcance de las reglas CSS. La combinaci\u00f3n de selectores puede llegar a ser todo lo compleja que sea necesario. A continuaci\u00f3n se muestran algunos ejemplos habituales de combinaci\u00f3n de selectores:</p> <pre><code>/* Elementos de clase \"especial\" que se encuentre dentro de un elemento de la clase \"aviso\". */\n.aviso .especial { color: red; }\n/* Elementos &lt;span&gt; de la clase \"especial\" que se encuentren dentro de un elemento &lt;div&gt; de la clase \"aviso\". */\ndiv.aviso span.especial { color: red; }\n/* Elemento &lt;a&gt; cuyo id es \"inicio\" que est\u00e9 dentro de un elemento &lt;li&gt; de la clase \"destacado\" que a su vez est\u00e9 dentro de un elemento &lt;ul&gt; cuyo id sea \"menuPrincipal\". */\nul#menuPrincipal li.destacado a#inicio { color: red; }\n</code></pre> Ejercicio <p>Crea un p\u00e1gina web cuyo contenido este formado por dos div.</p> <p>El primer div contendr\u00e1, tres p\u00e1rrafos y una imagen (cuyo contenido debe ser una imagen de internet). El segundo de los p\u00e1rrafos en volver\u00e1 tres palabras aleatorias en un span y el primer y tercer p\u00e1rrafo contendr\u00e1 un enlace cada uno. </p> <p>El segundo div contendr\u00e1 otro div, con un texto que no ocupe m\u00e1s de una l\u00ednea, y un p\u00e1rrafo.</p> <p>Aplicando TODO lo que hemos visto anteriormente aplica diferentes estilos a cada uno de los elementos, teniendo en cuenta que algunos deben tener estilos comunes.</p>"},{"location":"tema_2/page_2/","title":"2 Selectores avanzados","text":""},{"location":"tema_2/page_2/#introduccion","title":"Introducci\u00f3n","text":"<p>CSS 3 trajo consigo una serie de selectores avanzados, mucho m\u00e1s espec\u00edficos que los selectores b\u00e1sicos que hemos visto anteriormente.</p>"},{"location":"tema_2/page_2/#selector-de-hijos","title":"Selector de hijos","text":"<p>Se trata de un selector similar al selector descendente, pero muy diferente en su funcionamiento. Se utiliza para seleccionar un elemento que es hijo directo de otro elemento y se indica mediante el signo de mayor que <code>&gt;</code>. Veamos un ejemplo:</p> HTMLCSS <pre><code>&lt;p&gt;Texto1&lt;/p&gt;\n&lt;p&gt;\n&lt;a href=\"#\"&gt;Texto2&lt;/a&gt;\n&lt;/p&gt;\n</code></pre> <pre><code>p &gt; span { color: blue; }\n</code></pre> <p>El selector <code>p &gt; span</code> se interpreta como cualquier elemento que sea hijo directo de un elemento <code>&lt;p&gt;</code>, por lo que el primer elemento cumple la condici\u00f3n del selector. Sin embargo, el segundo elemento no la cumple porque es descendiente pero no es hijo directo de un elemento <code>&lt;p&gt;</code>.</p> <p>Sin embargo, si la regla CSS hubiera sido <code>p span { color: blue; }</code> se hubieran seleccionada ambos, ya que ambos son descendientes de un elemento <code>p</code>.</p>"},{"location":"tema_2/page_2/#selector-de-hermano-posterior","title":"Selector de hermano posterior","text":"<p>Algunas veces necesitamos seleccionar une elemento que sea un hermano posterior de otro. Para ello utilizaremos el car\u00e1cter <code>~</code> con el formato <code>elemento1 ~ elemento2</code>. No importa que en el html haya otros elementos hermanos interpuestos entre elemento1 y elemento2. Por ejemplo:</p> HTMLCSS <pre><code>&lt;article&gt;\n&lt;h2&gt;t\u00edtulo&lt;/h2&gt;\n&lt;p&gt;texto del primer p\u00e1rrafo&lt;/p&gt;\n&lt;img src='...' /&gt;\n&lt;p&gt;texto de otro p\u00e1rrafo&lt;/p&gt;\n&lt;/article&gt;\n</code></pre> <pre><code>h2 ~ p { color: red; }\n</code></pre> <p>Se seleccionaran los dos elementos <code>p</code>, ya que ambos son hermanos posteriores de un elemento <code>h2</code>, es decir, tienen el mismo padre que el <code>h2</code> y est\u00e1n definidos despu\u00e9s de \u00e9l.</p>"},{"location":"tema_2/page_2/#selector-de-hermano-adyacente","title":"Selector de hermano adyacente","text":"<p>El selector adyacente se emplea para seleccionar elementos que en el c\u00f3digo HTML de la p\u00e1gina se encuentran justo a continuaci\u00f3n de otros elementos. Su sintaxis emplea el signo <code>+</code> para separar los dos elementos. Si se considera el siguiente c\u00f3digo HTML:</p> HTMLCSS <pre><code>&lt;body&gt;\n&lt;h1&gt;Titulo1&lt;/h1&gt;\n&lt;h2&gt;Subt\u00edtulo&lt;/h2&gt;\n&lt;!-- ... --&gt;\n&lt;h2&gt;Otro subt\u00edtulo&lt;/h2&gt;\n&lt;!-- ... --&gt;\n&lt;/body&gt;\n</code></pre> <pre><code>h1 + h2 { color: red; }\n</code></pre> <p>El selector de esta regla se lee como los elementos <code>h2</code> adyacentes a un elemento <code>h1</code>. T\u00e9cnicamente, un elemento, elemento2, es adyacente a otro elemento, elemento1, cuando se cumplen las dos siguientes condiciones:</p> <ul> <li>elemento1 y elemento2 deben ser elementos hermanos, por lo que su elemento padre debe ser el mismo.</li> <li> <p>elemento2 debe aparecer inmediatamente despu\u00e9s de elemento1 en el c\u00f3digo HTML de la p\u00e1gina. Un ejemplo muy habitual es hacer que la primera l\u00ednea de todos los p\u00e1rrafos est\u00e9 indentada, salvo la primera l\u00ednea del primer p\u00e1rrafo. Para ello, usaremos el selector de hermano adyacente de la siguiente manera:</p> <pre><code>p + p { text-indent: 1.5em; }\n</code></pre> <p>De esta manera todos los p\u00e1rrafos que sigan a otro p\u00e1rrafo ser\u00e1n seleccionados, pero el primero no, ya que no sigue a otro p\u00e1rrafo.</p> </li> </ul>"},{"location":"tema_2/page_2/#selectores-de-atributos","title":"Selectores de atributos","text":"<p>Otro grupo de selectores avanzados lo forman los selectores de atributos, que permiten seleccionar elementos HTML en funci\u00f3n de sus atributos y/o valores de esos atributos. Tenemos disponibles los siguientes selectores:</p> <ul> <li><code>[nombre_atributo]</code>: selecciona los elementos que tienen establecido el atributo llamado nombre_atributo, independientemente de su valor.</li> <li><code>[nombre_atributo=valor]</code>: selecciona los elementos que tienen establecido un atributo llamado nombre_atributo con un valor igual a valor.</li> <li><code>[nombre_atributo~=valor]</code>: selecciona los elementos que tienen establecido un atributo llamado nombre_atributo y al menos uno de los valores del atributo es valor.</li> <li><code>[nombre_atributo|=valor]</code>: selecciona los elementos que tienen establecido un atributo llamado nombre_atributo y cuyo valor es una serie de palabras separadas con guiones, pero que comienza con valor.</li> <li><code>[nombre_atributo^=cadena]</code>: selecciona los elementos que tienen establecido un atributo llamado nombre_atributo y cuyo valor comienza exactamente por la cadena de texto cadena.</li> <li><code>[nombre_atributo$=cadena]</code>: selecciona los elementos que tienen establecido un atributo llamado nombre_atributo y cuyo valor finaliza con la cadena de texto cadena.</li> <li><code>[nombre_atributo*=cadena]</code>: selecciona los elementos que tienen establecido un atributo llamado nombre_atributo y cuyo valor contiene al menos una vez la cadena de texto cadena. A continuaci\u00f3n se muestran algunos ejemplos de estos selectores:</li> </ul> <pre><code>/*Enlaces que tengan un atributo \"class\", independientemente de su valor*/\na[class] { color: blue; }\n/*Enlaces que tengan class=\"externo\"*/\na[class=\"externo\"] { color: blue; }\n/*Enlaces que apunten a \"&lt;http://www.ejemplo.com\"*/&gt;\na[href=\"http://www.ejemplo.com\"] { color: blue; }\n/*Enlaces que tengan el atributo \"class\" que contenga al menos el valor \"externo\"*/\na[class~=\"externo\"] { color: blue; }\n/*Elementos que tengan lang=\"en\" (idiomas ingl\u00e9s)*/\n*[lang=en] { ... }\n/* Elementos cuyo atributo lang sea \"es\" o \"es-loquesea\", como \"es-ES\", \"es-AR\", etc. */\n*[lang|=\"es\"] { color : red; }\n/*Enlaces cuyo valor del atributo class empiece por \"button\"*/\na[class^=\"button\"] { color: blue; }\n/*Enlaces cuyo valor del atributo class termine por \"rojo\"*/\na[class$=\"roja\"] { color: red; }\n/*Enlaces cuyo valor del atributo class contenga la cadena \"button\"*/\na[class*=\"button\"] { color: blue; }\n</code></pre> Ejercicio <p>Realiza el ejercicio del apartado anterior, pero est\u00e1 vez haciendo uso de los selectores avanzados</p>"},{"location":"tema_2/page_3/","title":"3 Pseudoelementos","text":""},{"location":"tema_2/page_3/#introduccion","title":"Introducci\u00f3n","text":"<p>Podr\u00eda decirse que los selectores de pseudoelementos son una extensi\u00f3n del selector de tipo o etiqueta. Este tipo de selectores nos permiten seleccionar elementos de nuestro documento HTML que est\u00e9n marcados como tal mediante una etiqueta. Son, por tanto, una abstracci\u00f3n, no existen como tal en el documento HTML. \u00bfPero si no existen, para que nos proporciona CSS un selector? La respuesta es simple, para poder seleccionarlos y aplicarles un estilo. En la mayor\u00eda de los casos, si no existieran estos selectores de pseudoelementos, no podr\u00edamos darle un estilo espec\u00edfico de ninguna de las maneras.</p> <p>El ejemplo m\u00e1s caracter\u00edstico de pseudoelemento es la primera letra del contenido de un elemento. Esta primera letra NO es un elemento en s\u00ed mismo, no est\u00e1 marcada con una etiqueta especial, sino que simplemente forma parte del contenido. Sin embargo, ser\u00eda adecuado poder seleccionar dicha letra dentro de un elemento para poder aplicarle un estilo distinto al del resto de letras (a esta letra se le conoce como letra capitular). Otro ejemplo similar es el pseudoelemento la primera l\u00ednea del contenido del elemento.</p> <p>Tradicionalmente los selectores de pseudoelemento comenzaban con el car\u00e1cter dos puntos <code>:</code> seguidos del nombre del pseudoelemento. Sin embargo, a partir de CSS3 el formato recomendado, es un doble car\u00e1cter dos puntos <code>::</code> seguido del nombre del pseudoelemento, aunque ambas formas son reconocidas por los navegadores en sus versiones m\u00e1s actuales.</p>"},{"location":"tema_2/page_3/#fist-letter-y-first-line","title":"::fist-letter y ::first-line","text":"<p>En algunas ocasiones queremos aplicar un estilo concreto a la primera letra de un p\u00e1rrafo, por ejemplo para ponerla m\u00e1s grande. Es lo que conoce como \"letra capitular\". Aunque podr\u00edamos simplemente incluir dicha letra dentro de una etiqueta para poder seleccionarla posteriormente, hay una manera m\u00e1s elegante de hacerlo.</p> <p>El pseudoelemento <code>::first-letter</code> selecciona la primera letra del contenido del elemento, por lo que podemos usarlo para estilizar dicha letra. Por ejemplo:</p> <pre><code>/* La primera letra de todos los p\u00e1rrafos ser\u00e1 m\u00e1s grande. */\np::first-letter { font-size: 2rem; }\n</code></pre> <p>Debemos tener en cuenta que el pseudoelemento <code>::first-letter</code> se trata de un elemento del tipo <code>inline-block</code> a la vez que textual. As\u00ed que de entrada tiende a alinear su base inferior con la primera l\u00ednea de texto en la que se encuentra, sobresaliendo por la parte superior y forzando un espacio (tipo margen) de su p\u00e1rrafo con el elemento precedente. Para solucionarlo, haremos flotar la letra capitular, lo veremos m\u00e1s adelante, y estableceremos una altura de l\u00ednea similar a tama\u00f1o.</p>"},{"location":"tema_2/page_3/#selection","title":"::selection","text":"<p>Cuando seleccionamos texto en una p\u00e1gina web \u00e9ste se muestra con un color de fondo predeterminado por el navegador. Sin embargo podemos personalizar el estilo con el que debe mostrarse el texto seleccionado, haciendo uso del pseudoelemento <code>::selection</code>, que es soportado por pr\u00e1cticamente todo los navegadores. Por ejemplo:</p> <p> See the Pen    Untitled by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_2/page_3/#placeholder","title":"::placeholder","text":"<p>Uno de los elementos caracter\u00edsticos de los campos de formulario es el conocido como placeholder, que corresponde al texto que se muestra en el campo como una especie de consejo para indicar al usuario qu\u00e9 dato debe introducir en el mismo. Dicho placeholder desaparece autom\u00e1ticamente cuando el usuario introduce un dato y s\u00f3lo es visible cuando el campo est\u00e1 vac\u00edo. Para poder estilizar el placeholder haremos uso del pseudoelemento <code>::placeholder</code>. La mayor\u00eda de los navegadores actuales soportan este selector, algunos mediante prefijos. Por ejemplo:</p> <p> See the Pen    ::placeholder by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_2/page_3/#before-y-after","title":"::before y ::after","text":"<p>Sirven para generar contenido en css. Veremos su uso m\u00e1s adelante.</p>"},{"location":"tema_2/page_3/#otros-pseudoelementos","title":"Otros pseudoelementos","text":"<p>CSS3 y CSS4 definen otros selectores de pseudoelementos que a\u00fan no est\u00e1n soportados en la mayor\u00eda de los navegadores: <code>::attr()</code>, <code>::backdrop</code>, <code>::choices</code>, <code>::footnote-call</code>, <code>::footnote-marker</code>, <code>::marker</code>, <code>::nth-fragment()</code>, <code>::read-only</code>, <code>::repeat-index</code>, <code>::repeat-item</code>, <code>::value</code>.</p>"},{"location":"tema_2/page_4/","title":"4 Pseudoclases","text":""},{"location":"tema_2/page_4/#introduccion","title":"Introducci\u00f3n","text":"<p>CSS introdujo el concepto de pseudoclase para permitir la selecci\u00f3n de elementos bas\u00e1ndose en informaci\u00f3n que reside fuera del \u00e1rbol de etiquetas del documento HTML y que no puede ser expresada usando otro tipo de selector. Por ejemplo, si queremos aplicar un estilo diferencial a los enlaces cuando el puntero del rat\u00f3n se sit\u00faa sobre \u00e9l, la informaci\u00f3n necesaria la selecci\u00f3n es cambiante y dependiente del usuario.</p> <p>Un selector de pseudoclase est\u00e1 formado por el car\u00e1cter dos puntos : seguido del nombre de la pseudoclase y, opcionalmente, un valor entre par\u00e9ntesis. Estos selectores se pueden combinar con cualquier otro selector complejo.</p> <p>Veamos los selectores de pseudoclases m\u00e1s importantes, organizados por funcionalidad.</p>"},{"location":"tema_2/page_4/#pseudoclases-para-enlaces","title":"Pseudoclases para enlaces","text":"<p>Los selectores de pseudoclases relacionados con los enlaces son:</p> <ul> <li><code>:link</code>: Selecciona enlaces que no hayan sido visitados a\u00fan.</li> <li><code>:visited</code>: Selecciona enlaces que ya han sido visitados con anterioridad. Por ejemplo:</li> </ul> <pre><code>a:link {\ncolor: green;\n}\na:visited {\ncolor: red;\n}\n</code></pre> <p>En este ejemplo los enlaces no se hayan visitado se ver\u00e1n de color verde y los ya visitados de color rojo.</p>"},{"location":"tema_2/page_4/#pseudoclases-de-interaccion-del-usuario","title":"Pseudoclases de interacci\u00f3n del usuario","text":"<p>Los selectores de pseudoclases relacionados con la interacci\u00f3n del usuario son:</p> <ul> <li><code>:hover</code>: Selecciona elementos que est\u00e9n siendo apuntados por el usuario mediante un dispositivo apuntador, por ejemplo el puntero del rat\u00f3n, pero a\u00fan no lo ha activado. El ejemplo m\u00e1s caracter\u00edstico es cuando el usuario sit\u00faa el puntero del rat\u00f3n encima de la caja de un elemento.</li> <li><code>:active</code>: Selecciona elementos que est\u00e1n siendo activados en ese momento por el usuario. El ejemplo m\u00e1s caracter\u00edstico es mientras el usuario est\u00e1 haciendo click por el puntero del rat\u00f3n sobre la caja de un elemento.</li> <li><code>:focus</code>: Selecciona elementos que en ese momento tengan el foco.</li> </ul> <p>Por ejemplo:</p> <pre><code>a:link {\ncolor: green;\n}\na:visited {\ncolor: red;\n}\na:hover {\nbackground-color: black;\ncolor: white;\n}\na:active {\ntext-decoration: none;\ncolor: brown;\nfont-weight: bold;\n}\ninput[type=\"text\"]:focus {\nbackground-color: yellow;\n}\n</code></pre> <p>En este ejemplo,los enlaces que no se hayan visitado se ver\u00e1n de color verde y los ya visitados de color rojo. Por otra parte, cuando situemos el puntero del rat\u00f3n por encima de un enlace, su fondo se pondr\u00e1 de color negro y el texto de color blanco. Adem\u00e1s, mientras el usuario est\u00e9 haciendo click sobre un enlace (y no haya soltado el bot\u00f3n del rat\u00f3n) el enlace se ver\u00e1 sin subrayado, de color marr\u00f3n y en negrita. Finalmente, las etiquetas <code>&lt;input&gt;</code> cuyo atributo type tenga el valor text cuando tengan el foco se ver\u00e1n con el fondo de color amarillo.</p> <p>Warning</p> <p>Si vamos a especificar varios selectores de pseudoclases para los enlaces, se recomienda respetar el orden del ejemplo anterior respecto a <code>:link</code>, <code>:visited</code>, <code>:hover</code> y <code>:active</code>.</p>"},{"location":"tema_2/page_4/#pseudoclases-de-estado-de-elementos-de-la-iu","title":"Pseudoclases de estado de elementos de la IU","text":"<p>Veremos estas pseudoclases cuando hablemos de los formularios.</p>"},{"location":"tema_2/page_4/#pseudoclases-estructurales","title":"Pseudoclases estructurales","text":"<p>Los selectores de pseudoclases estructurales permiten seleccionar elementos bas\u00e1ndonos en su relaci\u00f3n con el contenido del padre o de los hermanos:</p> <ul> <li><code>elemento:nth-child(numero)</code>: selecciona el elemento indicado pero con la condici\u00f3n de que sea el hijo en\u00e9simo de su padre. Este selector es \u00fatil para seleccionar el segundo p\u00e1rrafo de un elemento, el quinto elemento de una lista, etc.</li> <li><code>elemento:nth-last-child(numero)</code>: id\u00e9ntico al anterior pero el n\u00famero indicado se empieza a contar desde el \u00faltimo hijo.</li> <li><code>elemento:empty</code>: selecciona el elemento indicado pero con la condici\u00f3n de que no tenga ning\u00fan hijo. La condici\u00f3n implica que tampoco puede tener ning\u00fan contenido de texto.</li> <li><code>elemento:first-child</code> y <code>elemento:last-child</code>: seleccionan los elementos indicados pero con la condici\u00f3n de que sean respectivamente los primeros o \u00faltimos hijos de su elemento padre.</li> <li><code>elemento:nth-of-type(numero)</code>: selecciona el elemento indicado pero con la condici\u00f3n de que sea el en\u00e9simo elemento hermano de ese tipo.</li> <li><code>elemento:nth-last-of-type(numero)</code>, id\u00e9ntico al anterior pero el n\u00famero indicado se empieza a contar desde el \u00faltimo hijo.</li> <li><code>:root</code>: selecciona el elemento ra\u00edz del documento. En el caso de HTML, dicho elemento siempre ser\u00e1 el elemento <code>&lt;html&gt;</code>.</li> <li><code>elemento:first-of-type</code>: selecciona el elemento indicado pero con la condici\u00f3n de que sea el primer hijo de ese tipo dentro de su padre. Es similar a <code>elemento:nth-of-type(1)</code>.</li> <li><code>elemento:last-of-type</code>: selecciona el elemento indicado pero con la condici\u00f3n de que sea el \u00faltimo hijo de ese tipo dentro de su padre. Es similar a <code>elemento:nth-last-of-type(1)</code>.</li> <li><code>:only-child</code>: selecciona los elementos que sean hijos \u00fanicos, es decir, aquellos que no tienen ning\u00fan hermano.</li> <li><code>elemento:only-of-type</code>: selecciona los elementos que no tengan ning\u00fan hermano de dicho tipo.</li> </ul> <p>Todas los selectores de pseudoclases que reciben un n\u00famero, como :nth-child(numero) permiten el uso de expresiones complejas para realizar selecciones avanzadas. Por ejemplo:</p> <p>Info</p> <p>En el siguiente enlaces tenemos un ejemplo interactivo muy esclarecedor sobre estas pseudoclases:</p> <p>Demo de nth-child</p>"},{"location":"tema_2/page_4/#pseudoclases-logicas","title":"Pseudoclases l\u00f3gicas","text":"<p>La pseudoclase de negaci\u00f3n <code>:not()</code> recibe como argumento un selector, y selecciona aquellos elementos que no ser\u00edan seleccionados por dicho selector. Veamos algunos ejemplos:</p> <pre><code>/* Selecciona los li que no sean de la clase diferente */\nli:not(.diferente) { color: red; }\n/* Selecciona los a que no tengan el foco */\na:not(:focus) { color: red; }\n</code></pre> <p>Note</p> <p>La versi\u00f3n CSS4 de esta pseudoclase permite recibir varias condiciones como argumento, de manera que se seleccione aquellos elementos que no cumplan ninguna de las condiciones recibidas. La versi\u00f3n de CSS4 no est\u00e1 soportada por la mayor\u00eda de los navegadores.</p> <p>CSS4 define otros dos pseudoclases l\u00f3gicas, cuyo soporte actual por parte de los navegadores es nulo:</p> <ul> <li><code>:matches()</code>: Selecciona los elementos que cumplan alguna de las condiciones pasadas como argumento.</li> <li><code>:has()</code>: Selecciona los elementos que cumplan con alguno de los selectores pasados como argumento.</li> </ul>"},{"location":"tema_2/page_4/#otras-pseudoclases","title":"Otras pseudoclases","text":"<p>Otros selectores de pseudoclases son:</p> <ul> <li><code>:lang(idioma)</code>: Selecciona los elementos cuyo idioma sea el indicado, sin tener en cuenta el m\u00e9todo empleado por el navegador para averiguar el idioma de cada elemento. NO es exactamente igual al selector <code>[lang|=idioma]</code>, ya que \u00e9ste s\u00f3lo selecciona los elementos para los que expl\u00edcitamente se ha establecido el atributo lang y su valor contiene el idioma indicado. Por ejemplo, si aplicamos la siguiente regla CSS: <code>p:lang(es) { color: red; }</code></li> <li> <p><code>:target</code>: Selecciona el elemento cuyo id corresponde al nombre de secci\u00f3n incluido en la URL que se est\u00e1 visualizando en el navegador. Por ejemplo si se est\u00e1 visualizando la URL <code>http://www.wikipedia.com/index.html#referencias&gt;</code>, el selector de pseudoclase <code>:target()</code> selecciona el elemento cuyo id sea referencias. Se usa, sobre todo, para crear ventanas popup, que se muestran unicamente cuando se pulsa sobre un determinado enlace. Veamos una demostraci\u00f3n:</p> <p><p> See the Pen    Popup only css by irubenboy (@irubenboy)   on CodePen.</p> <p></p> </p> </li> </ul> <p>Tambi\u00e9n existen selectores de pseudoclases relacionados con el CSS para p\u00e1ginas impresas: <code>:blank</code>, <code>:first</code>, <code>:left</code>, <code>:right</code>.</p> <p>CSS4 define otra serie de selectores de pseudoclases cuyo soporte actual por parte de los navegadores es pr\u00e1cticamente nulo: <code>:valid-drop</code>, <code>:invalid-drop</code>, <code>:active-drop</code>, <code>:local-link()</code>, <code>:any-link</code>, <code>:past</code>, <code>:current()</code>, <code>:future</code>, <code>:nth-column</code>, <code>:nth-last-column</code>, <code>:nth-match</code>, <code>:nth-last-match</code>, <code>:placeholder-shown</code>, <code>:scope</code>, <code>:blank</code>, <code>:dir()</code>, <code>:fullscreen</code>, <code>:ancestor()</code>, <code>:host</code>, <code>:top</code>.</p> Ejercicio <p>Crea una p\u00e1gina web que contenga 10 enlaces dentro de un div. A dos de ellos le vas a indicar como clase enlace. Aplica los siguientes estilos:</p> <ul> <li>A los dos primeros enlaces deben aparecer de normal, sin estar subrayados.</li> <li>Los tres \u00faltimos enlaces deben aparecer de color rojo.</li> <li>Los enlaces que sean pares deben tener una fuente distinta.</li> <li>Los enlaces que sean m\u00faltiplos de 4 deben aparecer en negrita.</li> <li>Al hacer hover en los enlaces debe aparecer de color rosa.</li> <li>Al activar el enlace debe salir en cursiva.</li> <li>Si el enlace ha sido visitado debe aparecer en naranja.</li> <li>Al hacer hover en el div, cambiar\u00e1 el fondo a cualquier color pero con transparencias.</li> <li>Al hacer hover en los enlaces pares deber\u00e1 cambiar a color verde.</li> <li>Al activar los enlaces que no tengan la clase enlace deber\u00e1 aparecer en amarillo.</li> </ul>"},{"location":"tema_2/page_5/","title":"5 Cascada y colisi\u00f3n","text":""},{"location":"tema_2/page_5/#introduccion","title":"Introducci\u00f3n","text":"<p>En las hojas de estilos complejas, es habitual que varias reglas CSS se apliquen a un mismo elemento HTML. El problema radica en que puede que varias reglas asignen un valor distinto a la misma propiedad a un determinado elemento, es decir, que contengan declaraciones contradictorias. A este hecho se le conoce como colisi\u00f3n de estilos.</p> <p>Veamos el siguiente ejemplo, en el que hay dos reglas que incluyen declaraciones contradictorias que producen una colisi\u00f3n de estilos en todos los elementos <code>&lt;p&gt;</code>:</p> <pre><code>p {\ncolor: red;\n}\np {\ncolor: blue;\n}\n</code></pre> <p>\u00bfDe qu\u00e9 color se muestra cada uno de los p\u00e1rrafos del documento HTML? \u00bfQu\u00e9 declaraci\u00f3n prevalece sobre cu\u00e1l?</p> <p>Debemos tener en cuenta que la resoluci\u00f3n de los conflictos se tiene que realizar individualmente para cada etiqueta del documento HTML, atendiendo a las declaraciones que se le deben aplicar. Por ejemplo si ampliamos el ejemplo anterior de la siguiente manera:</p> <pre><code>p {\ncolor: red;\n}\np {\ncolor: blue;\n}\np.code {\ncolor: green;\n}\n</code></pre> <p>\u00bfDe qu\u00e9 color se muestra un p\u00e1rrafo de la clase code? \u00bfY un p\u00e1rrafo que NO sea de la clase code? La resoluci\u00f3n de las colisiones ser\u00e1 distinta en cada caso.</p> <p>CSS tiene un mecanismo de resoluci\u00f3n de colisiones muy complejo, conocido como cascada, y que tiene en cuenta varios factores o conceptos:</p> <ul> <li>Importancia de las declaraciones.</li> <li>Especificidad de los selectores de las reglas que contienen las declaraciones.</li> <li>Orden de los archivos CSS y de las declaraciones dentro de ellos.</li> </ul> <p>Si dos declaraciones tienen la misma importancia, la especificidad de las reglas decidir\u00e1 cu\u00e1l se debe aplicar. Si las reglas tienen la misma especificidad, el orden de las fuentes controla el resultado.</p>"},{"location":"tema_2/page_5/#importancia-de-las-declaraciones","title":"Importancia de las declaraciones","text":"<p>La importancia de una declaraci\u00f3n CSS depende de d\u00f3nde se ha especificado. Las declaraciones contradictorias se aplicar\u00e1n en el orden siguiente (de menor a mayor importancia), de manera que las \u00faltimas prevalecer\u00e1n sobre las anteriores:</p> <ol> <li>Hoja de estilos de agente de usuario.</li> <li>Declaraciones normales en hojas de estilo de usuario.</li> <li>Declaraciones normales en hojas de estilo de autor.</li> <li>Declaraciones importantes en hojas de estilo de autor (dise\u00f1ador).</li> <li>Declaraciones importantes en hojas de estilo de usuario.</li> </ol> <p>Una hoja de estilos de agente de usuario es la hoja de estilo integrada del navegador. Cada navegador tiene sus propias reglas sobre c\u00f3mo mostrar varios elementos de HTML si el usuario o dise\u00f1ador de la p\u00e1gina no especifica ning\u00fan estilo. Por ejemplo, los enlaces no visitados suelen ser azules y estar subrayados.</p> <p>Una hoja de estilos de usuario es una hoja de estilo que ha especificado el usuario. No todos los navegadores son compatibles con las hojas de estilo de usuario, pero pueden ser muy pr\u00e1cticas, sobre todo para los usuarios con problemas de accesibilidad. Por ejemplo, una persona disl\u00e9xica puede tener una hoja de estilo de usuario que especifique determinadas fuentes y colores que le faciliten la lectura.</p> <p>Cuando hablamos de \"hojas de estilo\", normalmente hacemos referencia a una hoja de estilo de autor. Es la hoja de estilos que ha creado o enlazado el autor (dise\u00f1ador) del documento.</p> <p>Las declaraciones importantes son aquellas que van seguidas de una directiva <code>!important</code>. Por ejemplo:</p> <pre><code>div{\ncolor: red !important;\n}\ndiv{\ncolor: blue;\n}\n</code></pre> <p>Como se puede observar, las declaraciones importantes de una hoja de estilo de usuario tienen prioridad sobre todas las dem\u00e1s, lo cual es l\u00f3gico.</p> <p>NO se recomienda usar <code>!important</code> habitualmente, de hecho se considera una mala pr\u00e1ctica, y s\u00f3lo deberemos recurrir a ella cuando no tengamos otra opci\u00f3n.</p>"},{"location":"tema_2/page_5/#especificidad","title":"Especificidad","text":"<p>La especificidad se considerarse una medida de c\u00f3mo de espec\u00edfico es el selector de una regla. La especificidad de un selector se calcula obteniendo el valor de especificidad mediante los siguientes elementos:</p> <ul> <li>n\u00famero de estilos aplicados directamente mediante un atributo <code>style</code>. Corresponder\u00e1 a las unidades de millar del valor de especificidad.</li> <li>n\u00famero de selectores de id <code>#</code>. Corresponder\u00e1 a las centenas del valor de especificidad.</li> <li>n\u00famero de selectores de clase <code>.</code>. Corresponder\u00e1 a las decenas del valor de especificidad.</li> <li>n\u00famero de selectores de tipo y de pseudoelementos. Corresponder\u00e1 a las unidades del valor de especificidad.</li> <li>El selector universal <code>*</code> es ignorado.</li> </ul> <p>Veamos unos ejemplos:</p> <pre><code>div { ... }                     /* Especificidad: 0001 */\ndiv div { ... }                 /* Especificidad: 0002 */\n#pagina div { ... }             /* Especificidad: 0101 */\n#pagina div:hover { ... }       /* Especificidad: 0111 */\n#pagina div:hover a { ... }     /* Especificidad: 0112 */\n#pagina .sel:hover &gt; a { ...}   /* Especificidad: 0121 */\n</code></pre> <p>Si se produce una colisi\u00f3n de estilos entre dos o m\u00e1s declaraciones que deben aplicarse a un determinado elemento, y todas las declaraciones tienen la misma importancia, prevalecer\u00e1 la declaraci\u00f3n contenida en la regla con el selector con valor de especificidad m\u00e1s alto. Por ejemplo en:</p> <pre><code>p {\ncolor: blue;  /* Especificidad 0001 */\n}\np.code {\ncolor: green; /* Especificidad 0011 */\n}\n</code></pre> <p>se producir\u00e1 una colisi\u00f3n de estilos en cada p\u00e1rrafo de la clase <code>code</code>. Ambas declaraciones tienen la misma importancia, ya que ambas son declaraciones normales en hojas de estilo de autor. Sin embargo, la segunda declaraci\u00f3n posee un valor de especificidad mayor que la primera, por lo que prevalecer\u00e1 frente a \u00e9sta, de manera que los p\u00e1rrafos de la clase <code>code</code> se mostrar\u00e1n en verde.</p> <p>Info</p> <p>Tambi\u00e9n tenemos disponible una herramienta online para el c\u00e1lculo de la especificidad de un selector.</p>"},{"location":"tema_2/page_5/#orden-de-inclusion","title":"Orden de inclusi\u00f3n","text":"<p>Si dos declaraciones afectan al mismo elemento, tienen la misma importancia y la misma especificidad, la colisi\u00f3n de estilos se resolver\u00e1 atendiendo al orden de inclusi\u00f3n de las declaraciones en el documento. A continuaci\u00f3n se muestran las distintas opciones ordenadas de menor a mayor precedencia:</p> <ul> <li>Archivos CSS externos vinculados a trav\u00e9s de la etiqueta <code>&lt;link&gt;</code>. Si vinculamos varios archivos CSS, las declaraciones definidas en los archivos vinculados posteriormente tiene mayor precedencia que los vinculados anteriormente.</li> <li>Reglas CSS internas definidas a trav\u00e9s de la etiqueta <code>&lt;style&gt;</code>.</li> <li>Declaraciones CSS embebido en el elemento HTML mediante el atributo <code>style</code>.</li> </ul> <p>Dentro de cada uno de estos apartados, las declaraciones posteriores prevalecer\u00e1n frente a las definidas con anterioridad.</p> <p>En el siguiente ejemplo:</p> <pre><code>p {\ncolor: red;\n}\np {\ncolor: blue;\n}\n</code></pre> <p>se genera una colisi\u00f3n de estilos en todas los p\u00e1rrafos, ya que se le deben aplicar dos declaraciones contradictorias. Ambas declaraciones tienen la misma importancia, ya que ambas son declaraciones normales en hojas de estilos de autor. Tambi\u00e9n tienen la misma especificidad, en concreto 0001, por lo que el sistema debe usar el orden de inclusi\u00f3n para resolverlo. Dado que ambas declaraciones est\u00e1n definidas en el mismo archivo CSS, la colisi\u00f3n se resuelve simplemente haciendo prevalecer la definida en \u00faltimo lugar, por lo que los p\u00e1rrafos se mostrar\u00e1n de color azul.</p> <p>Por todo lo indicado anteriormente, es muy importante el orden en el que se vinculan en el documento mediante la etiqueta <code>&lt;link&gt;</code> los archivos externos CSS. Por ejemplo, si vinculamos el archivos CSS correspondiente a alg\u00fan framework CSS, como Bootstrap, y despu\u00e9s queremos sobrescribir alg\u00fan estilo concerto, deberemos vincular nuestro propio archivos CSS despu\u00e9s de vincular el de Bootstrap. Por ejemplo:</p> <pre><code>&lt;head&gt;\n&lt;!-- ... --&gt;\n&lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" /&gt;\n&lt;link rel=\"stylesheet\" href=\"css/estilos.css\" /&gt;\n&lt;!-- ... --&gt;\n&lt;/head&gt;\n</code></pre> <p>\u200b Por otra parte, tambi\u00e9n es muy importante el orden en el que se definen las reglas dentro de un archivo CSS. De hecho, dentro de un archivo CSS, se recomienda definir primero las reglas m\u00e1s generales y despu\u00e9s las m\u00e1s espec\u00edficas, para que \u00e9stas sobrescriban los estilos definidos con anterioridad.</p>"},{"location":"tema_2/page_5/#resumen","title":"Resumen","text":"<p>El m\u00e9todo seguido por CSS para resolver las colisiones de estilos se muestra a continuaci\u00f3n:</p> <ol> <li>Determinar todas las declaraciones que se aplican al elemento para el medio CSS seleccionado.</li> <li>Ordenar las declaraciones seg\u00fan su importancia, atendiendo a su origen (hoja de estilo del navegador, de usuario o de autor) y si se ha marcado con la palabra clave <code>!important</code>.</li> <li>En caso de igual importancia, ordenar las declaraciones seg\u00fan la especificidad del selector de la regla en la que se encuentre. Cuanto mayor sea dicho valor mayor prioridad tendr\u00e1.</li> <li>Si despu\u00e9s de aplicar las normas anteriores existen dos o m\u00e1s declaraciones con la misma prioridad, se comprueba si la declaraci\u00f3n ha sido definida mediante una etiqueta <code>&lt;style&gt;</code>, que prevalecer\u00e1 frente a las definidas en archivos externos CSS vinculados.</li> <li>Si despu\u00e9s de aplicar las normas anteriores no se ha resuelto la colisi\u00f3n, se aplica la que se defini\u00f3 en \u00faltimo lugar, teniendo en cuenta en orden en el que se han vinculado los archivos CSS externos y la posici\u00f3n de la declaraci\u00f3n dentro de su archivos CSS.</li> </ol>"},{"location":"tema_3/page-1/","title":"1 Introducci\u00f3n al modelo de cajas","text":""},{"location":"tema_3/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>El modelo de cajas (box model) es seguramente la caracter\u00edstica m\u00e1s importante del lenguaje de hojas de estilos CSS, ya que condiciona el dise\u00f1o de todas las p\u00e1ginas web. El modelo de cajas es el comportamiento de CSS que hace que todos los elementos de las p\u00e1ginas se representen mediante cajas rectangulares.</p> <p>Las cajas de una p\u00e1gina se crean autom\u00e1ticamente. Cada vez que se inserta una etiqueta HTML, se crea una nueva caja rectangular que encierra los contenidos de ese elemento. La siguiente imagen muestra las tres cajas rectangulares que crean las tres etiquetas HTML que incluye la p\u00e1gina:</p> <p> Figura 1 - Modelo de Cajas</p> <p>Las cajas de las p\u00e1ginas no son visibles a simple vista porque inicialmente no muestran ning\u00fan color de fondo ni ning\u00fan borde.</p> <p>Los navegadores crean y colocan las cajas de forma autom\u00e1tica, pero CSS permite modificar todas sus caracter\u00edsticas. Cada una de las cajas est\u00e1 formada por seis partes, tal y como muestra la siguiente imagen:</p> <p> Figura 2 - Parte de una caja</p> <p>Las partes que componen cada caja y su orden de visualizaci\u00f3n desde el punto de vista del usuario son las siguientes:</p> <ul> <li>Contenido (content): se trata del contenido HTML del elemento (las palabras de un p\u00e1rrafo, una imagen, el texto de una lista de elementos, etc.)</li> <li>Relleno (padding): espacio libre opcional existente entre el contenido y el borde.</li> <li>Borde (border): l\u00ednea que encierra completamente el contenido y su relleno.</li> <li>Imagen de fondo (background image): imagen que se muestra por detr\u00e1s del contenido y el espacio de relleno.</li> <li>Color de fondo (background color): color que se muestra por detr\u00e1s del contenido y el espacio de relleno.</li> <li>Margen (margin): separaci\u00f3n opcional existente entre la caja y el resto de cajas adyacentes. El relleno y el margen son transparentes, por lo que en el espacio ocupado por el relleno se muestra el color o imagen de fondo (si est\u00e1n definidos) y en el espacio ocupado por el margen se muestra el color o imagen de fondo de su elemento padre (si est\u00e1n definidos). Si ning\u00fan elemento padre tiene definido un color o imagen de fondo, se muestra el color o imagen de fondo de la propia p\u00e1gina (si est\u00e1n definidos).</li> </ul> <p>Si una caja define tanto un color como una imagen de fondo, la imagen tiene m\u00e1s prioridad y es la que se visualiza. No obstante, si la imagen de fondo no cubre totalmente la caja del elemento o si la imagen tiene zonas transparentes, tambi\u00e9n se visualiza el color de fondo. Combinando im\u00e1genes transparentes y colores de fondo se pueden lograr efectos gr\u00e1ficos muy interesantes.</p> Ejercicio <p>Realiza una p\u00e1gina web que muestre una etiqueta padre <code>div</code> que contenga en su interior otra etiqueta <code>div</code>. Haz que tanto el padre como el hijo tengan una anchura de 200px. El <code>div</code> hijo debe mostrar el texto Pulsa. El color de fondo del <code>div</code> padre debe ser distinto del <code>div</code> hijo. Agrega un relleno de 10px al <code>div</code> padre. Centra horizontalmente el texto en el <code>div</code> hijo.</p> <p>Hazte las siguientes preguntas:</p> <p>\u00bfPor qu\u00e9 el espacio entre el borde y el contenido del <code>div</code> hijo se ve del color de fondo de dicha caja? \u00bfQu\u00e9 anchura real tiene el <code>div</code> hijo? \u00bfQu\u00e9 anchura real tiene el <code>div</code> padre? \u00bfQu\u00e9 altura tiene el <code>div</code> hijo? \u00bfQu\u00e9 altura tiene el <code>div</code> padre?</p> Ejercicio <p>Realiza el mismo ejercicio anterior, pero asegurando que la anchura real del div padre sea 200px</p>"},{"location":"tema_3/page-1/#modelo-de-calculo-de-anchura-y-altura","title":"Modelo de c\u00e1lculo de anchura y altura","text":"<p>La propiedad <code>box-sizing</code> se usa para establecer la forma de calcular la anchura y la altura de la caja que representa a un elemento.</p> Propiedad box-sizing Valores content-box | border-box | inherit Se aplica a Todos los elementos Valor inicial content-box Descripci\u00f3n Establece la forma de calcular el alto y el ancho de los elementos <p>Podemos especificar uno de los siguientes valores:</p> <ul> <li> <p><code>content-box</code>: Determina que las propiedades <code>width</code> y <code>height</code>, ancho y alto respectivamente, corresponden a la anchura y altura solo del contenido de la caja, pero no incluyen el relleno (padding), el borde (border) o el margen (margin). Por tanto la anchura real de la caja ser\u00e1 <code>width + padding + borde</code> y su altura real ser\u00e1 <code>height + padding + borde</code>. Por ejemplo, si especificamos la siguiente regla CSS:</p> <pre><code>.box{\nwidth: 300px;\nheight: 200px;\nborder: 2px solid black;\npadding: 10px;\n}\n</code></pre> <p>cualquier elemento de la clase <code>box</code> tendr\u00e1:</p> <ul> <li>una anchura de caja de 324px, calculada mediante la siguiente operaci\u00f3n: <code>2px (border-left) + 10px (padding-left) + 300px (width) + 10px (padding-right) + 2px (border-right)</code></li> <li>una altura de caja de 224px, calculada mediante la siguiente operaci\u00f3n: <code>2px (border-top) + 10px (padding-top) + 200px (height) + 10px (padding-bottom) + 2px (border-bottom)</code>.</li> </ul> </li> <li> <p><code>border-box</code>: Los valores especificados para las propiedades <code>width</code> y <code>height</code> corresponden al tama\u00f1o de la propia caja, no al tama\u00f1o del contenido, y por tanto incluyen el relleno (padding) y el borde (border), pero no el margen (margin). As\u00ed, si especificamos la siguiente regla CSS:</p> <pre><code>.box {\nbox-sizing: border-box;\nwidth: 300px;\nheight: 200px;\nborder: 2px solid black;\npadding: 10px;\n}\n</code></pre> <p>cualquier elemento de la clase <code>box</code> tendr\u00e1:</p> <ul> <li>Una anchura de caja de 300px, de manera que la anchura del contenido ser\u00e1 de 276px, calculada mediante la siguiente operaci\u00f3n:<code>300px - 2px (border-left) - 10px (padding-left) - 10px (padding-right) - 2px (border-right)</code></li> <li>Una altura de caja de 200px, de manera que la altura del contenido ser\u00e1 de 176px, calculada mediante la siguiente operaci\u00f3n: <code>200px - 2px (border-top) - 10px (padding-top) - 10px (padding-bottom) - 2px (border-bottom)</code>.</li> </ul> </li> </ul> <p>El problema del valor <code>content-box</code> es que el dise\u00f1ador tendr\u00e1 que hacer c\u00e1lculos matem\u00e1ticos para asegurarse de que las cajas caben en la posici\u00f3n deseada, dado que el tama\u00f1o real de la caja es mayor que el especificado en la propiedades <code>width</code> y <code>height</code>. Entonces \u00bfpor qu\u00e9 es el valor por defecto? El motivo es la compatibilidad con versiones anteriores de CSS. La propiedad <code>box-sizing</code> fue a\u00f1adida posteriormente en la especificaci\u00f3n CSS 3 y en CSS 2 todas las cajas utilizaban la forma de c\u00e1lculo descrita en el valor content-box.</p> <p>Si queremos resetear el comportamiento por defecto para todas las cajas, usaremos las siguientes reglas para hacer que el elemento ra\u00edz use el valor border-box y el resto de elementos hereden este comportamiento:</p> <pre><code>html {\nbox-sizing: border-box;\n}\n*, *:before, *:after {\nbox-sizing: inherit;\n}\n</code></pre> Ejercicio <p>Realiza el mismo ejercicio anterior, pero sin tener que hacer ning\u00fan c\u00e1lculo matem\u00e1tico</p>"},{"location":"tema_3/page-1/#anchura","title":"Anchura","text":"<p>La propiedad <code>width</code> establece la anchura del elemento. Si el valor de la propiedad <code>box-sizing</code> tiene el valor <code>content-box</code>, el valor indicado para <code>width</code> hace referencia a la anchura del contenido, no de la caja en s\u00ed. Si, por el contrario, la propiedad <code>box-sizing</code> tiene el valor <code>border-box</code>, el valor indicado para <code>width</code> hace referencia a la anchura de la caja, incluyendo el contenido, el relleno (padding) y el borde.</p> Propiedad width Valores unidad de medida | porcentaje | auto Se aplica a Todos los elementos, salvo los elementos que no sean im\u00e1genes, las filas de las tablas y los grupos de filas de tablas Valor inicial auto Descripci\u00f3n Estable la anchura de un elemento <p>La propiedad <code>width</code> no admite valores negativos y los valores en porcentaje se calculan a partir de la anchura de su elemento padre. El valor inherit indica que la anchura del elemento se hereda de su elemento padre. El valor <code>auto</code>, que es el que se utiliza si no se establece de forma expl\u00edcita un valor a esta propiedad, indica que el navegador debe calcular autom\u00e1ticamente la anchura del elemento, teniendo en cuenta sus contenidos, si se trata de un elemento en bloque o en l\u00ednea y el sitio disponible en la p\u00e1gina.</p> <p>Es muy importante resaltar que la propiedad width NO tendr\u00e1 efecto sobre los elementos en l\u00ednea, excepto la etiqueta <code>&lt;img&gt;</code>, as\u00ed como las filas de las tablas.</p> <p>Algunas veces querremos establecer que la anchura de un elemento sea variable y se adapte a la anchura de la ventana de visualizaci\u00f3n pero respetando ciertos l\u00edmites, es decir, que no sea tan estrecho como para que no se puedan mostrar correctamente su contenido y tampoco sea tan ancho como para que el contenido quede mal est\u00e9ticamente. Para estos casos, podemos establecer un valor relativo para la propiedad <code>width</code>, por ejemplo un porcentaje o un valor expresado en <code>vw</code>, en conjunci\u00f3n con las propiedades <code>min-width</code> y/o <code>max-width</code>, que permiten establecer, respectivamente, la anchura m\u00ednima y m\u00e1xima del elemento. El valor asignado a la propiedad <code>box-sizing</code> afecta a estas propiedades de manera similar a como afecta a <code>width</code>.</p> min-widthmax-width Propiedad min-width Valores unidad de medida | porcentaje Se aplica a Todos los elementos salvo filas y grupos de filas de tablas Valor inicial 0 Descripci\u00f3n Permite definir la anchura m\u00ednima de un elemento Propiedad max-width Valores unidad de medida | porcentaje | inherit Se aplica a Todos los elementos salvo filas y grupos de filas de tablas Valor inicial none Descripci\u00f3n Permite definir la anchura m\u00e1xima de un elemento <p>Si especificamos para la propiedad <code>width</code> un valor absoluto, por ejemplo en <code>px</code>, el valor establecido para las propiedades <code>min-width</code> o <code>max-width</code> no tendr\u00e1 ning\u00fan efecto, ya que se ha establecido una anchura fija para el elemento. De igual forma, si especificamos el valor de <code>width</code> en porcentaje y el de <code>min-width</code> o <code>max-width</code> tambi\u00e9n en porcentaje, NO se producir\u00e1 el resultado esperado. Lo adecuado es definir el valor de <code>width</code> como un porcentaje y el de <code>min-width</code> y/o <code>max-width</code> como un valor absoluto, por ejemplo en <code>px</code>.</p> <p>No debemos olvidar que las propiedades <code>min-width</code> y <code>max-width</code> no son heredadas por defecto, ya que sus valores iniciales no son inherit.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    width by irubenboy (@irubenboy)   on CodePen. </p> Ejercicio <p>Realiza una web que muestre un <code>div</code> padre cuya anchura sea el 50% de la anchura del viewport, variando entre 200px y 300px. Adem\u00e1s este <code>div</code> padre deber\u00e1 contener otro <code>div</code> hijo cuyo anchura sea el 50% del div padre y debe mostrar el texto 'H'</p> <p>Ambos <code>div</code> deben tener un relleno de 10px. Usa colores de fondo distintos para los dos <code>div</code></p>"},{"location":"tema_3/page-1/#altura","title":"Altura","text":"<p>La propiedad <code>height</code> establece la altura del elemento. Si el valor de la propiedad <code>box-sizing</code> tiene el valor <code>content-box</code>, el valor indicado para <code>height</code> hace referencia a la altura del contenido, no de la caja en s\u00ed. Si, por el contrario, la propiedad <code>box-sizing</code> tiene el valor <code>border-box</code>, el valor indicado para <code>height</code> hace referencia a la altura de la caja, incluyendo el contenido, el relleno (padding) y el borde.</p> Propiedad height Valores unidad de medida | porcentaje | auto Se aplica a Todos los elementos, salvo los elementos que no sean im\u00e1genes, las filas de las tablas y los grupos de filas de tablas Valor inicial auto Descripci\u00f3n Estable la altura de un elemento <p>Al igual que sucede con <code>width</code>, la propiedad <code>height</code> no admite valores negativos. Si se indica un porcentaje, se toma como referencia la altura del elemento padre. Si el elemento padre no tiene una altura definida expl\u00edcitamente, se asigna el valor auto a la altura.</p> <p>El valor <code>inherit</code> indica que la altura del elemento se hereda de su elemento padre. El valor <code>auto</code>, que es el que se utiliza si no se establece de forma expl\u00edcita un valor a esta propiedad, indica que el navegador debe calcular autom\u00e1ticamente la altura del elemento, teniendo en cuenta sus contenidos y el sitio disponible en la p\u00e1gina.</p> <p>Es muy importante resaltar que la propiedad <code>height</code> NO tendr\u00e1 efecto sobre los elementos en l\u00ednea, excepto la etiqueta <code>&lt;img&gt;</code>, as\u00ed como las columnas de las tablas.</p> <p>Algunas veces querremos establecer que la altura de un elemento sea variable pero respetando ciertos l\u00edmites. Para estos casos, podemos establecer un valor relativo para la propiedad <code>height</code>, por ejemplo un porcentaje o un valor expresado en <code>vw</code>, en conjunci\u00f3n con las propiedades <code>min-height</code> y/o <code>max-height</code>, que permiten establecer, respectivamente, la altura m\u00ednima y m\u00e1xima del elemento. El valor asignado a la propiedad box-sizing afecta a estas propiedades de manera similar a como afecta a height.</p> min-heightmax-height Propiedad min-height Valores unidad de medida | porcentaje Se aplica a Todos los elementos salvo filas y grupos de filas de tablas Valor inicial 0 Descripci\u00f3n Permite definir la altura m\u00ednima de un elemento Propiedad max-height Valores unidad de medida | porcentaje | inherit Se aplica a Todos los elementos salvo filas y grupos de filas de tablas Valor inicial none Descripci\u00f3n Permite definir la altura m\u00e1xima de un elemento <p>Si especificamos para la propiedad <code>height</code> un valor absoluto, por ejemplo en px, el valor establecido para las propiedades <code>min-height</code> o <code>max-height</code> no tendr\u00e1 ning\u00fan efecto, ya que se ha establecido una altura fija para el elemento. De igual forma, si especificamos el valor de <code>height</code> en porcentaje y el de <code>min-height</code> o <code>max-height</code> tambi\u00e9n en porcentaje, NO se producir\u00e1 el resultado esperado. Lo adecuado es definir el valor de <code>height</code> como un porcentaje y el de <code>min-height</code> y/o <code>max-height</code> como un valor absoluto, por ejemplo en px.</p> <p>No debemos olvidar que las propiedades <code>min-height</code> y <code>max-height</code> no son heredadas por defecto, ya que sus valores iniciales no son <code>inherit</code>.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    height by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-1/#desbordamiento-del-contenido","title":"Desbordamiento del contenido","text":"<p>Normalmente, los contenidos de un elemento se pueden mostrar en el espacio reservado para ese elemento. Sin embargo, en algunas ocasiones el contenido de un elemento no cabe en el espacio reservado para ese elemento, en cuyo caso se dice que el contenido se desborda.</p> <p>La situaci\u00f3n m\u00e1s habitual en la que el contenido sobresale de su espacio reservado es cuando se establece la anchura y/o altura de un elemento mediante la propiedad <code>width</code> y/o <code>height</code>. , aunque existen otras situaciones en las que tambi\u00e9n se produce, como por ejemplo con l\u00edneas de texto muy largas contenidas dentro de un elemento <code>&lt;pre&gt;</code>, que hacen que la p\u00e1gina entera sea demasiado ancha.</p> <p>No debemos olvidar que por defecto el texto se mover\u00e1 a una nueva l\u00ednea de forma natural cuando se llegue al final del elemento, por lo que en raras ocasiones el texto producir\u00e1 desbordamiento de anchura. Sin embargo, si hemos cambiado el valor de la propiedad <code>white-space</code>, como ocurre con las etiquetas <code>&lt;pre&gt;</code>, el texto si podr\u00e1 producir desbordamiento de anchura.</p> <p>Respecto a la altura, si no hemos especificado la altura de la caja mediante <code>height</code> o <code>max-height</code>, el fluir del texto haga que la caja sea simplemente m\u00e1s alta, ya que el valor por defecto para la propiedad height es auto, de manera que la altura de la caja es calculada en base su contenido, imposibilitando el desbordamiento de altura. Sin embargo, si hemos establecido una altura fija para la caja es perfectamente posible que si el texto es extenso se produzca un desbordamiento en altura.</p> <p>CSS define las propiedades <code>overflow-x</code>, <code>overflow-y</code> y <code>overflow</code> para controlar la forma en la que se visualizan los contenidos que sobresalen de sus elementos, respectivamente de forma horizontal, vertical y en ambos sentidos.</p> Propiedades <code>overflow</code>, <code>overflow-x</code>, <code>overflow-y</code> Valores visible | hidden | scroll | | auto | inherit Se aplica a Todos los elementos Valor inicial visible Descripci\u00f3n Define la forma en que se visualiza el contenido que sobresale de un elemento, debido a que no cabe en \u00e9l (en el eje x, en el eje y o en cualquiera de sus ejes) <p>Analicemos los posibles valores:</p> <ul> <li><code>visible</code>: el contenido no se corta y se muestra sobresaliendo de la zona reservada para visualizar el elemento. Este es el comportamiento por defecto.</li> <li><code>hidden</code>: el contenido sobrante se oculta y s\u00f3lo se visualiza la parte del contenido que cabe dentro de la zona reservada para el elemento.</li> <li><code>scroll</code>: solamente se visualiza el contenido que cabe dentro de la zona reservada para el elemento, pero tambi\u00e9n se muestran barras de scroll que permiten visualizar el resto del contenido.</li> <li><code>auto</code>: el comportamiento depende del navegador, aunque normalmente es el mismo que el valor scroll.</li> </ul> <p> See the Pen    overflow by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-2/","title":"2 Margen y Relleno","text":""},{"location":"tema_3/page-2/#margen","title":"Margen","text":"<p>CSS define cuatro propiedades para controlar cada uno de los m\u00e1rgenes horizontales y verticales de un elemento.</p> Propiedades <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, <code>margin-left</code> Valores unidad de medida | porcentaje | auto | inherit Se aplica a Todos los elementos, salvo margin-top y margin-bottom que s\u00f3lo se aplican a los elementos de bloque y a las im\u00e1genes Valor inicial 0 Descripci\u00f3n Establece cada uno de los m\u00e1rgenes horizontales y verticales de un elemento <p>Cada una de las propiedades establece la separaci\u00f3n entre el borde lateral de la caja y el resto de cajas adyacentes:</p> <p> Figura 3 - Margen</p> <p>Las unidades m\u00e1s utilizadas para indicar los m\u00e1rgenes de un elemento son los px (cuando se requiere una precisi\u00f3n total), los em y rem (para hacer dise\u00f1os que mantengan las proporciones) y los porcentajes, vw, vh (para hacer dise\u00f1os l\u00edquidos o fluidos).</p> <p>Los m\u00e1rgenes verticales (<code>margin-top</code> y <code>margin-bottom</code>) s\u00f3lo se pueden aplicar a los elementos de bloque y las im\u00e1genes, pero no a otros elementos en l\u00ednea, mientras que los m\u00e1rgenes laterales (<code>margin-left</code> y <code>margin-right</code>) se pueden aplicar a cualquier elemento.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    margin by irubenboy (@irubenboy)   on CodePen. </p> <p>Adem\u00e1s de las cuatro propiedades que controlan cada uno de los m\u00e1rgenes del elemento, CSS define una propiedad atajo (shorthand) que permite establecer los cuatro m\u00e1rgenes de forma simult\u00e1nea:</p> Propiedades <code>margin</code> Valores (unidad de medida | porcentaje | auto){1, 4} | inherit Se aplica a Todos los elementos salvo algunos casos especiales de elementos mostrados como tablas Valor inicial 0 Descripci\u00f3n Establece de forma directa todos los m\u00e1rgenes de un elemento <p>La notaci\u00f3n <code>{1, 4}</code> de la definici\u00f3n anterior significa que la propiedad margin admite entre uno y cuatro valores, con el siguiente significado:</p> <ul> <li>Si solo se indica un valor, todos los m\u00e1rgenes tienen ese valor.</li> <li>Si se indican dos valores, el primero se asigna al margen superior e inferior (margen vertical) y el segundo se asigna a los m\u00e1rgenes izquierdo y derecho (margen horizontal).</li> <li>Si se indican tres valores, el primero se asigna al margen superior, el tercero se asigna al margen inferior y el segundo valor se asigna los m\u00e1rgenes izquierdo y derecho.</li> <li>Si se indican los cuatro valores, el orden de asignaci\u00f3n es: margen superior, margen derecho, margen inferior y margen izquierdo. Por ejemplo, las siguientes reglas CSS son equivalentes:</li> </ul> <pre><code>p {\nmargin-top: .5em;\nmargin-bottom: .5em;\nmargin-left: 1em;\nmargin-right: .5em;\n}\np {\nmargin: .5em .5em .5em 1em;\n}\np {\nmargin: .5em;\nmargin-left: 1em;\n}\n</code></pre>"},{"location":"tema_3/page-2/#comportamiento-de-margenes","title":"Comportamiento de m\u00e1rgenes","text":"<p>Un aspecto curioso es que los m\u00e1rgenes pueden tomar valores negativos, acercando, e incluso, solapando elementos adyacentes.</p> <p>El valor <code>auto</code> indica al navegador a que sea \u00e9l el que establezca el margen. La mayor\u00eda de las veces el navegador asignar\u00e1 autom\u00e1ticamente al margen el valor 0. Sin embargo, si hay espacio disponible sin ocupar al lado del elemento, podr\u00e1 asignarle otro valor. Gracias a esta \u00faltima caracter\u00edstica podemos usar la propiedad <code>margin</code> para centrar horizontalmente un elemento, siempre y cuando le establezcamos una anchura determinada y asignemos el valor auto a <code>margin-left</code> y <code>margin-right</code>. Por ejemplo:</p> <p> See the Pen    center with margin by irubenboy (@irubenboy)   on CodePen. </p> <p>Si no hubi\u00e9ramos especificado la anchura del elemento, el valor auto de los m\u00e1rgenes izquierdo y derecho no hubiera causado ning\u00fan efecto, ya que el elemento ocupar\u00eda todo el ancho disponible del padre, al ser un elemento en bloque y el navegador haberle asignado autom\u00e1ticamente el valor 0 a los m\u00e1rgenes izquierdo y derecho.</p> <p>Un aspecto muy importante es que este uso del valor auto s\u00f3lo es \u00fatil para el centrado horizontal, NO sirve para centrar verticalmente un elemento.</p> <p>El comportamiento de los m\u00e1rgenes verticales es m\u00e1s complejo de lo que se puede imaginar. Cuando se juntan dos o m\u00e1s m\u00e1rgenes verticales, se fusionan de forma autom\u00e1tica y la altura del nuevo margen ser\u00e1 igual a la altura del margen m\u00e1s alto de los que se han fusionado.</p> <p> Figura 4 - Colapso vertical</p> <p>Cuando dos m\u00e1rgenes verticales entran en contacto se fusionan, con las siguientes reglas:</p> <ul> <li>Si ambos m\u00e1rgenes de positivos, s\u00f3lo se mantendr\u00e1 el de mayor tama\u00f1o.</li> <li>Si uno es positivo y el otro negativo, ambos m\u00e1rgenes se suman, produciendo un \u00fanico margen inferior al positivo.</li> <li>Si ambos m\u00e1rgenes son negativos, s\u00f3lo se mantendr\u00e1 el negativo de mayor magnitud.</li> </ul> <p>Veamos un ejemplo:</p> <p> See the Pen    margin collapse by irubenboy (@irubenboy)   on CodePen. </p> <p>De la misma forma, si un elemento est\u00e1 contenido dentro de otro elemento, sus m\u00e1rgenes verticales se fusionan y resultan en un nuevo margen de la misma altura que el mayor margen de los que se han fusionado:</p> <p> Figura 5 - Colapso vertical padre e hijo</p> <p>Aunque en principio puede parecer un comportamiento extra\u00f1o, la raz\u00f3n por la que se propuso este mecanismo de fusi\u00f3n autom\u00e1tica de m\u00e1rgenes verticales es el de dar uniformidad a las p\u00e1ginas web habituales.</p> <p>Si queremos evitar este comportamiento de fusi\u00f3n autom\u00e1tica de m\u00e1rgenes entre padres e hijos, bastar\u00e1 con a\u00f1adir un peque\u00f1o relleno (<code>padding: 1px</code>) o borde (<code>border: 1px solid transparent</code>) al elemento contenedor.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    avoid margin collapse by irubenboy (@irubenboy)   on CodePen. </p> <p>Dada la fusi\u00f3n que se puede dar entre m\u00e1rgenes verticales, se recomienda establecer la estrategia de usar siempre <code>margin-bottom</code> para separar los elementos, en vez de usar tanto <code>margin-top</code> como <code>margin-bottom</code>.</p> Ejercicio <p>Realiza una p\u00e1gina web que muestre dos etiquetas div hermanas de 200px de ancho y de 100px de alto, con color de fondo distinto, de manera que la primera se separe del borde izquierdo del body 20px, y la segunda se separe del borde izquierdo del body 40px. Adem\u00e1s la segunda caja debe aparecer encima de la mitad inferior de la primera.</p> <p>Hazte las siguientes preguntas:</p> <ol> <li>\u00bfC\u00f3mo conseguimos que el segundo div se dibuje encima del primero?</li> <li>\u00bfPor qu\u00e9 el primer div est\u00e1 separado del borde superior del body?</li> </ol>"},{"location":"tema_3/page-2/#relleno","title":"Relleno","text":"<p>CSS define cuatro propiedades para controlar cada uno de los espacios de relleno horizontales y verticales de un elemento.</p> Propiedades <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, <code>padding-left</code> Valores unidad de medida | porcentaje | inherit Se aplica a Todos los elementos excepto algunos elementos de tablas como grupos de cabeceras y grupos de pies de tabla Valor inicial 0 Descripci\u00f3n Establece cada uno de los rellenos horizontales y verticales de un elemento <p>Cada una de estas propiedades establece la separaci\u00f3n entre el contenido y los bordes laterales de la caja del elemento:</p> <p> Figura 5 - Padding</p> <p>Como sucede con los m\u00e1rgenes, CSS tambi\u00e9n define una propiedad de tipo \"shorthand\" llamada padding para establecer los cuatro rellenos de un elemento de forma simult\u00e1nea.</p> Propiedades <code>padding</code> Valores (unidad de medida | porcentaje |){1, 4} | inherit Se aplica a Todos los elementos excepto algunos elementos de tablas como grupos de cabeceras y grupos de pies de tabla Valor inicial 0 Descripci\u00f3n Establece de forma directa todos los rellenos de un elemento <p>La notaci\u00f3n <code>{1, 4}</code> de la definici\u00f3n anterior significa que la propiedad padding admite entre uno y cuatro valores, con el mismo significado que el de la propiedad <code>margin</code>.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    padding by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-3/","title":"3 Fondos","text":""},{"location":"tema_3/page-3/#introduccion","title":"Introducci\u00f3n","text":"<p>Otro de los elementos del modelo de cajas es el fondo de la caja, que puede ser desde un simple color a una (o m\u00e1s) im\u00e1genes.</p> <p>El valor por defecto para el fondo de una caja es el color transparente, por lo que si establecemos un color o imagen de fondo en al elemento <code>&lt;body&gt;</code>, todos los elementos de la p\u00e1gina se visualizan con el mismo fondo a menos que alg\u00fan elemento especifique su propio fondo.</p> <p>CSS define una serie de propiedades para establecer el fondo de cada elemento y su comportamiento.</p>"},{"location":"tema_3/page-3/#color","title":"Color","text":"<p>La propiedad <code>background-color</code> permite mostrar un color de fondo s\u00f3lido en la caja de un elemento. Esta propiedad no permite crear degradados ni ning\u00fan otro efecto avanzado.</p> Propiedad <code>background-color</code> Valores color | transparent | inherit Se aplica a Todos los elementos Valor inicial transparent Descripci\u00f3n Establece un color de fondo para los elementos <pre><code>body {\nbackground-color: #F5F5F5;\n}\n</code></pre>"},{"location":"tema_3/page-3/#imagen-de-fondo","title":"Imagen de fondo","text":"<p>La propiedad <code>background-image</code> permite mostrar una imagen como fondo de la caja de cualquier elemento.</p> Propiedad <code>background-imagen</code> Valores url# | none | inherit Se aplica a Todos los elementos Valor inicial none Descripci\u00f3n Establece una imagen de fondo para los elementos <pre><code>body {\nbackground-image: url(\"imagenes/fondo.png\");\n}\n</code></pre> <p>CSS permite establecer de forma simult\u00e1nea un color y una imagen de fondo. En este caso, la imagen se muestra delante del color, por lo que solamente si la imagen contiene zonas transparentes es posible ver el color de fondo.</p> <p>De igual forma, si especificamos varias im\u00e1genes de fondo (ya veremos como), se mostrar\u00e1n unas encima de otras, y estas incluyen zonas transparente, ser\u00e1 posible ver partes de una imagen inferior a trav\u00e9s de una superior.</p> <p>Las im\u00e1genes de fondo se indican a trav\u00e9s de su URL, que puede ser absoluta o relativa. Suele ser recomendable crear una carpeta de im\u00e1genes que se encuentre en el mismo directorio que los archivos CSS y que almacene todas las im\u00e1genes utilizadas en el dise\u00f1o de las p\u00e1ginas.</p> <p>As\u00ed, las im\u00e1genes correspondientes al dise\u00f1o de la p\u00e1gina se mantienen separadas del resto de im\u00e1genes del sitio y el c\u00f3digo CSS es m\u00e1s sencillo (por utilizar URL relativas) y m\u00e1s f\u00e1cil de mantener (por no tener que actualizar URL absolutas en caso de que se cambie la estructura del sitio web).</p> <p>Por otra parte, suele ser habitual indicar un color de fondo siempre que se muestra una imagen de fondo. En caso de que la imagen no se pueda mostrar o contenga errores, el navegador mostrar\u00e1 el color indicado (que deber\u00eda ser, en lo posible, similar a la imagen) y la p\u00e1gina no parecer\u00e1 que contiene errores.</p> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    Untitled by irubenboy (@irubenboy)   on CodePen. </p> <p>Si la imagen que se quiere mostrar es demasiado grande para el fondo del elemento, solamente se muestra la parte de imagen comprendida en el tama\u00f1o del elemento. Si la imagen que se establece como fondo de un elemento es m\u00e1s peque\u00f1a que el elemento en si, por defecto CSS la repite horizontal y verticalmente hasta llenar el fondo del elemento, aunque este comportamiento puede cambiar, como veremos a continuaci\u00f3n. Este comportamiento es \u00fatil para establecer un fondo complejo a una p\u00e1gina web entera. De esta forma, la imagen puede ser muy peque\u00f1a, y por tanto r\u00e1pida de descargar, y corresponder a un patr\u00f3n que se repita horizontal y verticalmente para cubrir el fondo de la caja, independientemente de su tama\u00f1o.</p>"},{"location":"tema_3/page-3/#modo-de-repeticion","title":"Modo de repetici\u00f3n","text":"<p>Como acabamos de comentar, si la imagen que se establece como fondo de un elemento es m\u00e1s peque\u00f1a que el elemento en si, por defecto CSS la repite horizontal y verticalmente hasta llenar el fondo del elemento. De esta manera, con una imagen tan sencilla como la siguiente, podemos establecer el fondo de cualquier caja, por muy grande que sea, y su visualizaci\u00f3n ser\u00e1 correcta:</p> <p> Figura 7 - Patr\u00f3n</p> <p>En ocasiones, no es conveniente que la imagen de fondo se repita horizontal y verticalmente. Para ello, CSS introduce la propiedad background-repeat que permite controlar la forma de repetici\u00f3n de las im\u00e1genes de fondo.</p> Propiedad <code>background-repeat</code> Valores repeat | repeat-x |repeat-y | no-repeat | space | round | inherit Se aplica a Todos los elementos Valor inicial repeat Descripci\u00f3n Controla la forma en la que se repiten las im\u00e1genes de fondo <p>Analicemos los posibles valores:</p> <ul> <li><code>repeat</code>: Indica que la imagen se debe repetir en todas direcciones y por tanto, es el comportamiento por defecto.</li> <li><code>no-repeat</code>: Muestra una sola vez la imagen y no se repite en ninguna direcci\u00f3n.</li> <li><code>repeat-x</code>: Repite la imagen s\u00f3lo horizontalmente.</li> <li><code>repeat-y</code>: Repite la imagen solamente de forma vertical.</li> <li><code>space</code>: No se recorta la \u00faltima repetici\u00f3n de la imagen de fondo, sino que no se muestra y el espacio sobrante el repartido como hueco entre el resto de las repeticiones de la imagen de la fila o columna.</li> <li><code>round</code>: La imagen se agranda lo suficiente como para que la no haya que recortar la \u00faltima repetici\u00f3n de la fila o columna.</li> </ul> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    background-repeat by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-3/#posicion","title":"Posici\u00f3n","text":"<p>Adem\u00e1s de seleccionar el tipo de repetici\u00f3n de las im\u00e1genes de fondo, CSS permite controlar la posici\u00f3n de la imagen dentro del fondo del elemento mediante la propiedad <code>background-position</code>.</p> Propiedad <code>background-position</code> Valores ((porcentaje | unidad de medida | left Se aplica a Todos los elementos Valor inicial 0% 0% Descripci\u00f3n Controla la posici\u00f3n en la que se muestra la imagen en el fondo del elemento <p>La propiedad <code>background-position</code> permite indicar la distancia que se desplaza la imagen de fondo respecto de su posici\u00f3n original situada en la esquina superior izquierda. S\u00f3lo tiene sentido cuando hayamos establecido la propiedad <code>background-repeat</code> al valor <code>no-repeat</code>.</p> <p>Si se indican dos porcentajes o dos medidas, el primero indica el desplazamiento horizontal y el segundo el desplazamiento vertical respecto del origen (situado en la esquina superior izquierda). Si solamente se indica un porcentaje o una medida, se considera que es el desplazamiento horizontal y al desplazamiento vertical se le asigna autom\u00e1ticamente el valor de 50%.</p> <p>Cuando se utilizan porcentajes, su interpretaci\u00f3n no es intuitiva. Si el valor de la propiedad <code>background-position</code> se indica mediante dos porcentajes <code>x% y%</code>, el navegador coloca el punto <code>(x%, y%)</code> de la imagen de fondo en el punto <code>(x%, y%)</code> del elemento.</p> <p>Las palabras clave permitidas son equivalentes a algunos porcentajes significativos: <code>top = 0%</code>, <code>left = 0%</code>, <code>center = 50%</code>, <code>bottom = 100%</code>, <code>right = 100%</code>.</p> <p>CSS permite mezclar porcentajes y palabras clave, como por ejemplo <code>50% 2cm</code>, <code>center 2cm</code>, <code>center 10%</code>.</p> <p>Si se utilizan solamente palabras clave, el orden es indiferente y por tanto, es equivalente indicar <code>top left</code> y <code>left top</code>.</p> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    background-position by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-3/#tamano","title":"Tama\u00f1o","text":"<p>La propiedad <code>background-size</code> especifica el tama\u00f1o de la imagen usada como fondo.</p> Propiedad <code>background-size</code> Valores [  || auto ]{1,2} | cover | contain Se aplica a Todos los elementos Valor inicial auto Descripci\u00f3n Especifica el tama\u00f1o de la imagen usada como fondo <p>El primer valor da la anchura de la imagen correspondiente, el segundo valor su altura. Si s\u00f3lo se define un valor el segundo se supone que es auto.</p> <p>Los valores pueden ser definidos en unidades de porcentaje (%) que ser\u00e1n relativas al tama\u00f1o de la superficie o en cualquier unidad de tama\u00f1o permitidas en CSS (em, rem, px, etc.).</p> <p>Adem\u00e1s disponemos de las siguientes valores:</p> <ul> <li><code>contain</code>: Escala la imagen, sin deformarla (sin alterar su relaci\u00f3n ancho/alto), para cubrir al menos un eje de la caja (X o Y) con una sola copia de la imagen. Esto es, muestra una copia completa de la imagen sin deformarla ni recortarla, cubriendo en la totalidad una de las dos dimensiones de la caja, dejando espacio sin cubrir si no coinciden las relaciones alto/ancho de ambos, imagen y caja.</li> <li> </li> </ul> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    background-size by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-3/#cover-escala-la-imagen-sin-deformarla-para-cubrir-la-totalidad-de-la-caja-recortando-si-es-necesario-la-parte-sobrante-para-mostrar-la-parte-de-la-imagen-que-interese-se-utiliza-con-background-position-este-es-el-valor-indicado-para-cubrir-todo-el-elemento-con-una-sola-imagen-sin-importar-la-relacion-de-tamanos-entre-caja-y-fondo","title":"<code>cover</code>: Escala la imagen sin deformarla para cubrir la totalidad de la caja, recortando si es necesario la parte sobrante. Para mostrar la parte de la imagen que interese se utiliza con background-position. Este es el valor indicado para cubrir todo el elemento con una sola imagen sin importar la relaci\u00f3n de tama\u00f1os entre caja y fondo.","text":""},{"location":"tema_3/page-3/#attachment","title":"Attachment","text":"<p>La propiedad <code>background-attachment</code> controla el comportamiento de la imagen de fondo al desplazar el elemento que lo contiene mediante scroll.</p> Propiedad <code>background-attachment</code> Valores scroll | fixed | local | inherit Se aplica a Todos los elementos Valor inicial scroll Descripci\u00f3n Controla el comportamiento de la imagen de fondo al desplazar el elemento que lo contiene mediante scroll <p>Los valores tienen el siguiente significado:</p> <ul> <li><code>scroll</code>: El fondo est\u00e1 fijado respecto al borde del elemento, por lo que al desplazar el elemento, el fondo sigue en la misma posici\u00f3n relativa. El \u00e1rea de dibujado y de posicionamiento del fondo es relativo al al borde.</li> <li><code>fixed</code>: El fondo est\u00e1 fijado respecto al viewport, por lo que al desplazar el elemento y cambiar \u00e9ste de posici\u00f3n su fondo cambia, ya que la imagen de fondo no se ha movido con \u00e9l. El \u00e1rea de dibujado y de posicionamiento del fondo es relativo al viewport, NO al borde del elemento.</li> <li><code>local</code>: El fondo est\u00e1 fijado respecto al contenido del elemento, por lo que si el elemento tiene alg\u00fan mecanismo de scroll interno, el fondo tambi\u00e9n se desplazar\u00e1 cuando se realiza un scroll del contenido. El \u00e1rea de dibujado y de posicionamiento del fondo es relativo al \u00e1rea desplazable del elemento, NO relativo al borde.</li> </ul> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    background-attachment by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-3/#area","title":"\u00c1rea","text":"<p>La propiedad <code>background-clip</code> determina qu\u00e9 \u00e1rea de la caja del elemento se utiliza para pintar el fondo. Si el fondo corresponde a una imagen, \u00e9sta se recorta para no incluir las zonas excluidas.</p> Propiedad <code>background-clip</code> Valores border-box | padding-box | content-box | inherit Se aplica a Todos los elementos Valor inicial border-box Descripci\u00f3n Determina qu\u00e9 \u00e1rea de la caja del elemento se utiliza para pintar el fondo <p>Los valores tienen el siguiente significado:</p> <ul> <li><code>border-box</code>: El \u00e1rea cubierta por el fondo ocupa al contenido, el padding y el borde.</li> <li><code>padding-box</code>: El \u00e1rea cubierta por el fondo ocupa el contenido y el padding, pero NO el borde.</li> <li><code>content-box</code>: El \u00e1rea cubierta por el fondo ocupa s\u00f3lo el contenido.</li> </ul> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    background-clip by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-3/#origen","title":"Origen","text":"<p>La propiedad <code>background-origin</code> indica qu\u00e9 elemento de la caja (borde, padding o contenido) act\u00faa como referente para el posicionamiento del fondo dentro de la caja, especificado por el valor de <code>background-position</code>.</p> <p>Si el valor de la propiedad <code>background-attachment</code> es fixed, entonces la propiedad <code>background-origin</code> no tiene efecto ninguno, ya que el posicionamiento es relativo al viewport.</p> Propiedad <code>background-origin</code> Valores border-box | padding-box | content-box | inherit Se aplica a Todos los elementos Valor inicial padding-box Descripci\u00f3n Indica qu\u00e9 elemento de la caja act\u00faa como referente para el posicionamiento del fondo <p>Los valores tienen el significado siguiente:</p> <ul> <li><code>border-box</code>: Posicionamiento relativo al borde.</li> <li><code>padding-box</code>: Posicionamiento relativo al padding.</li> <li><code>content-box</code>: Posicionamiento relativo al contenido.</li> </ul> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    background-origin by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-3/#propiedad-shorthand","title":"Propiedad shorthand","text":"<p>CSS define una propiedad de tipo shorthand <code>background</code> para indicar todas las propiedades del fondo de forma directa.</p> Propiedad <code>background</code> Valores ( background-image | background-position / background-size | background-repeat | background-attachment | background-origin | background-clip | background-color ) | inherit Se aplica a Todos los elementos Valor inicial - Descripci\u00f3n Establece todas las propiedades del fondo de un elemento <p>Podemos usar cualquier combinaci\u00f3n de las propiedades descritas anteriormente, en cualquier orden, aunque el orden recomendado es el que se muestra en el siguiente ejemplo:</p> <pre><code>body {\nbackground:\nurl(\"sweettexture.jpg\") /* image */\ntop center / 200px 200px /* position / size */\nno-repeat /* repeat */\nfixed /* attachment */\npadding-box /* origin */\ncontent-box /* clip */\nred; /* color */\n}\n</code></pre>"},{"location":"tema_3/page-3/#varias-imagenes","title":"Varias im\u00e1genes","text":"<p>Como hemos comentado anteriormente, CSS permite establecer varias im\u00e1genes de fondo, que se apilar\u00e1n una encima de otra, de manera que si una imagen contiene zonas transparentes podr\u00e1 visualizarse a trav\u00e9s de ellas im\u00e1genes inferiores de la pila.</p> <p>Para poder establecer varias im\u00e1genes de fondo utilizaremos las mismas propiedades que acabamos de ver, separando con coma <code>,</code> los valores correspondientes a la distintas im\u00e1genes, indic\u00e1ndolos en el mismo orden en todas las propiedades, para que hagan efecto a la imagen adecuada. Si para una propiedad se indica un \u00fanico valor, \u00e9ste se aplicar\u00e1 a todas las im\u00e1genes del fondo.</p> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    many images by irubenboy (@irubenboy)   on CodePen. </p> <p>Info</p> <p>Veamos unas demos interactivas sobre las propiedades para el fondo:</p> <ul> <li>Demo interactiva 1 de las propiedades para el fondo</li> <li>Demo interactiva 2 de las propiedades para el fondo</li> </ul>"},{"location":"tema_3/page-3/#background-blend-mode","title":"background-blend-mode","text":"<p>Cuando usamos varias im\u00e1genes de fondo podemos especificar tambi\u00e9n como se deben mezclar las distintas capas formadas por las im\u00e1genes correspondientes, para lo que usaremos la propiedad background-blend-mode.</p> Propiedad <code>background-blend-mode</code> Valores normal | multiply | screen | overlay | darken | lighten | color-dodge | color-burn | hard-light | soft-light | difference | exclusion | hue | saturation | color | luminosity | inherit Se aplica a Todos los elementos Valor inicial normal Descripci\u00f3n Describe c\u00f3mo las im\u00e1genes de fondo y el color de fondo del elemento deben mezclarse entre s\u00ed. <p>Los posibles valores tienen el siguiente significado:</p> <ul> <li><code>normal</code>: El color final es el de la capa superior, sin importar el color de fondo. El efecto es similar a dos trozos de papel sobrepuestos.</li> <li><code>multiply</code>: El color final es el resultado de multiplicar el color superior y el inferior. Una capa negra conduce a una capa final negra, y una capa blanca lleva a que no haya cambios. El efecto ese similar a dos im\u00e1genes impresas en papel transparente sobrepuestas.</li> <li><code>screen</code>: El color final ees el resultado de invertir los colores, multiplic\u00e1ndolos e invirtiendo el valor resultante. Una capa negra no produce cambio alguno, y una capa blanca conduce a una capa blanca final. El efecto es similar a dos im\u00e1genes mostr\u00e1ndose desde un proyector.</li> <li><code>overlay</code>: El color final es el resultado de multiply si el color inferior es m\u00e1s oscuro, o screen si el color inferior es m\u00e1s claro. Este modo de mezcla es equivalente a hard-light, pero si las capas son intercambiadas.</li> <li><code>darken</code>: El resultado final es un color compuesto de los valores m\u00e1s oscuros por cada canal de color.</li> <li><code>lighten</code>: El resultado final es un color compuesto de los valores m\u00e1s claros por cada canal de color.</li> <li><code>color-dodge</code>: El color final es el resultado de dividir el color inferior por el inverso del color superior. Un fondo negro no produce cambio alguno. Un color de primer plano con el color invertido del fondo produce un color completamente iluminado. Este modo de mezcla es similar a screen, pero basta con que el color de primer plano sea tan claro como el inverso del color de fondo para alcanzar un color completamente iluminado.</li> <li><code>color-burn</code>: El color final es el resultado de invertir el color de fondo, divide el valor por el color superior, e invertir ese valor. Un fondo blanco no produce cambio alguno. Un color de primer plano con el color invertido del fondo produce una imagen negra. Este modo de mezcla es similar a multiply, pero basta con que el color de primer plano sea tan oscuro como el inverso del color de fondo para dar como resultado una imagen negra.</li> <li><code>hard-light</code>: El color final es el resultado de multiply si el color superior es m\u00e1s oscuro, o screen si el color superior es m\u00e1s oscuro. Este modo de mezcla es equivalente a overlay, pero con las capas intercambiadas. El efecto es similar a encender un foco con mucha intensidad en el fondo.</li> <li><code>soft-light</code>: El color final es similar a hard-light, pero m\u00e1s suave. Este modo de mezcla se comporta similar a hard-light. El efecto es similar a encender un foco difuso en el fondo.</li> <li><code>difference</code>: El color final es el resultado de restar el color m\u00e1s oscuro de las dos capas, del m\u00e1s claro. Una capa negra no produce efecto alguno, mientras una capa blanca invierte el color de la otra capa.</li> <li><code>exclusion</code>: El color final es similar a difference, pero con menor contraste. As\u00ed como con difference, una capa negra no produce efecto alguno, mientras una capa blanca invierte el color de la otra capa.</li> <li><code>hue</code>: El color final tiene el matiz del color superior, mientras usa la saturaci\u00f3n y luminosidad del color inferior. saturation: El color final tiene la saturaci\u00f3n del color superior, mientras usa el matiz y luminosidad del color inferior. Un fondo gris puro, que no tenga saturaci\u00f3n, no producir\u00e1 efecto alguno.</li> <li><code>color</code>: El color final tiene el matiz y saturaci\u00f3n del color superior, mientras usa la luminosidad del color inferior. El efecto preserva los niveles de grid y puede ser usado para colorear el primer plano.</li> <li><code>luminosity</code>: El color final tiene la luminosidad del color superior, mientras usa el matiz y saturaci\u00f3n del color inferior. Este modo de mezcla es equivalente a color, pero con las capas intercambiadas.</li> </ul> <p>Los modos hue, saturation, color y luminosity no son soportados por Safari.</p> <p>Info</p> <p>Veamos una demo interactiva sobre los distintos valores de mezcla de capas de fondo:</p> <p>Demo interactiva de background-blend-mode</p>"},{"location":"tema_3/page-4/","title":"4 Bordes","text":""},{"location":"tema_3/page-4/#introduccion","title":"Introducci\u00f3n","text":"<p>CSS permite modificar el aspecto de cada uno de los cuatro bordes de la caja de un elemento. Para cada borde se puede establecer su anchura o grosor, su color, su estilo, el radio de las esquinas e incluso una imagen para dibujarlo. por lo que en total CSS define 31 propiedades relacionadas con los bordes.</p>"},{"location":"tema_3/page-4/#anchura","title":"Anchura","text":"<p>La anchura de los bordes se controla con las cuatro propiedades siguientes:</p> Propiedades <code>border-top-width</code>, <code>border-right-width</code>, <code>border-left-width</code>, <code>border-bottom-width</code> Valores (unidad de medida | thin | medium | thick ) | inherit Se aplica a Todos los elementos Valor inicial medium Descripci\u00f3n Establece la anchura de cada uno de los cuatros bordes de los elementos <p>La anchura de los bordes se indica mediante una medida (en cualquier unidad de medida absoluta o relativa) o mediante las palabras clave <code>thin</code> (delgado), <code>medium</code> (normal) y <code>thick</code> (ancho).</p> <p>La unidad de medida m\u00e1s habitual para establecer el grosor de los bordes es el px, ya que es la que permite un control m\u00e1s preciso sobre el grosor. Las palabras clave apenas se utilizan, ya que el est\u00e1ndar CSS no indica expl\u00edcitamente el grosor al que equivale cada palabra clave, por lo que pueden producirse diferencias visuales entre navegadores.</p> <p>Si se quiere establecer de forma simult\u00e1nea la anchura de todos los bordes de una caja, es necesario utilizar una propiedad shorthand llamada <code>border-width</code>:</p> Propiedades <code>border-width</code> Valores (unidad de medida | thin | medium | thick ) {1,4} | inherit Se aplica a Todos los elementos Valor inicial medium Descripci\u00f3n Establece la anchura de todos los bordes del elemento <p>La propiedad <code>border-width</code> permite indicar entre uno y cuatro valores. El significado de cada caso es el habitual de las propiedades shorthand:</p> <ul> <li>Si se indica un solo valor, se aplica a los cuatro bordes.</li> <li>Si se indican dos valores, el primero se aplica al borde superior e inferior y el segundo valor se aplica al borde izquierdo y derecho.</li> <li>Si se indican tres valores, el primero se aplica al borde superior, el segundo se aplica al borde izquierdo y derecho y el tercer valor se aplica al borde inferior. Si se indican los cuatro valores, el orden de aplicaci\u00f3n es superior, derecho, inferior e izquierdo.</li> </ul>"},{"location":"tema_3/page-4/#color","title":"Color","text":"<p>El color de los bordes se controla con las cuatro propiedades siguientes:</p> Propiedades <code>border-top-color</code>, <code>border-right-color</code>, <code>border-left-color</code>, <code>border-bottom-color</code> Valores color | transparent | inherit Se aplica a Todos los elementos Valor inicial - Descripci\u00f3n Establece el color de cada uno de los cuatro bordes de los elementos <p>CSS incluye una propiedad shorthand llamada <code>border-color</code> para establecer de forma simult\u00e1nea el color de todos los bordes de una caja:</p> Propiedades <code>border-color</code> Valores (color | transparent ) {1,4} | inherit Se aplica a Todos los elementos Valor inicial - Descripci\u00f3n Establece el color de todos los bordes del elemento <p>En este caso, al igual que sucede con la propiedad <code>border-width</code>, es posible indicar de uno a cuatro valores y las reglas de aplicaci\u00f3n son id\u00e9nticas a las de la propiedad <code>border-width</code>.</p>"},{"location":"tema_3/page-4/#estilo","title":"Estilo","text":"<p>CSS tambi\u00e9n permite establecer el estilo de cada uno de los bordes mediante las siguientes propiedades:</p> Propiedades <code>border-top-style</code>, <code>border-right-style</code>, <code>border-left-style</code>, <code>border-bottom-style</code> Valores none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset | inherit Se aplica a Todos los elementos Valor inicial none Descripci\u00f3n Establece el estilo de cada uno de los cuatro bordes de los elementos <p>El estilo de los bordes s\u00f3lo se puede indicar mediante alguna de las palabras reservadas definidas por CSS, como <code>hidden</code> (oculto), <code>dotted</code> (punteado), <code>dashed</code> (con guiones), <code>solid</code> (l\u00ednea contin\u00faa), <code>double</code> (l\u00ednea doble), <code>groove</code> (ranura 3D), <code>ridge</code> (marco 3D), <code>inset</code> (hundido hacia dentro), <code>outset</code> (resaltado hacia fuera).</p> <p>Como el valor por defecto de esta propiedad es <code>none</code>, los elementos no muestran ning\u00fan borde visible a menos que se establezca expl\u00edcitamente un estilo de borde</p> <p>Para establecer de forma simult\u00e1nea los estilos de todos los bordes de una caja, es necesario utilizar la propiedad shorthand llamada <code>border-style</code>:</p> Propiedades <code>border-style</code> Valores (none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset) {1, 4} | inherit Se aplica a Todos los elementos Valor inicial - Descripci\u00f3n Establece el estilo de todos los bordes del elemento <p>Como es habitual, la propiedad permite indicar de uno a cuatro valores diferentes y las reglas de aplicaci\u00f3n son las habituales de las propiedades shorthand.</p>"},{"location":"tema_3/page-4/#bordes-laterales","title":"Bordes laterales","text":"<p>Como sucede con los m\u00e1rgenes y los rellenos, CSS define una serie de propiedades de tipo shorthand que permiten establecer los atributos descritos anteriormente a los bordes de forma simult\u00e1nea. CSS incluye una propiedad shorthand para cada uno de los cuatro bordes y una propiedad shorthand global.</p> Propiedades <code>border-top</code>, <code>border-right</code>, <code>border-left</code>,<code>border-bottom</code> Valores (grosor | color | estilo) | inherit Se aplica a Todos los elementos Valor inicial - Descripci\u00f3n Establece el estilo completo de cada uno de los cuatro bordes de los elementos <p>Veamos un ejemplo:</p> <pre><code>h1 {\nborder-bottom: solid red;\n}\n</code></pre> <p>En el ejemplo anterior, la anchura del borde ser\u00e1 la correspondiente al valor por defecto (<code>medium</code>). Este otro ejemplo muestra la forma habitual utilizada para establecer el estilo de cada borde:</p> <pre><code>div {\nborder-top: 1px solid #369;\nborder-bottom: 3px double #369;\n}\n</code></pre>"},{"location":"tema_3/page-4/#borde-global","title":"Borde global","text":"<p>Por ultimo, CSS define una propiedad de tipo shorthand global para establecer el valor de todos los atributos de todos los bordes de forma directa:</p> Propiedades <code>border</code> Valores (grosor | color | estilo) | inherit Se aplica a Todos los elementos Valor inicial - Descripci\u00f3n Establece el estilo completo de todos los bordes de los elementos <p>Las siguientes reglas CSS son equivalentes:</p> <pre><code>div {\nborder-top: 1px solid red;\nborder-right: 1px solid red;\nborder-bottom: 1px solid red;\nborder-left: 1px solid red;\n}\ndiv { border: 1px solid red; }\n</code></pre> <p>Como el valor por defecto de la propiedad <code>border-style</code> es <code>none</code>, si una propiedad shorthand no establece expl\u00edcitamente el estilo de un borde, el elemento no muestra ese borde. Por ejemplo:</p> <pre><code>/* S\u00f3lo se establece el color, por lo que el estilo es\n    \"none\" y el borde no se muestra */\ndiv { border: red; }\n</code></pre> <p>Cuando los cuatro bordes no son id\u00e9nticos pero s\u00ed muy parecidos, se puede utilizar la propiedad <code>border</code> para establecer de forma directa los atributos comunes de todos los bordes y posteriormente especificar para cada uno de los cuatro bordes sus propiedades particulares. Por ejemplo:</p> <pre><code>h1 {\nborder: solid #000;\nborder-top-width: 6px;\nborder-left-width: 8px;\n}\n</code></pre> <p>Demo interactiva para los bordes</p> <p>http://informaticasaladillo.es/aplweb/cssinteractivedemos/border_demo.html</p> Ejercicio <p>Realiza una p\u00e1gina web que muestre el mismo resultado del ejemplo (cajas de colores cada una dentro de la otra), pero usando bordes. La caja m\u00e1s interna si tendr\u00e1 color de fondo, pero el resto no.</p>"},{"location":"tema_3/page-4/#esquinas-redondeas","title":"Esquinas redondeas","text":"<p>Para hacer que las esquinas de los bordes tengan aspecto redondeado podemos usar las cuatro propiedades siguientes:</p> Propiedades <code>border-top-left-radius</code>, <code>border-top-right-radius</code>, <code>border-bottom-left-radius</code>, <code>border-bottom-right-radius</code> Valores [|]{1,2} Se aplica a Todos los elementos Valor inicial 0 Descripci\u00f3n Establece el radio de curvatura de uno de los cuatro bordes de los elementos <p>Para especificar el radio, podemos usar como valor:</p> <ul> <li>Una longitud expresada en px, por ejemplo 10px.</li> <li>Un porcentaje, por ejemplo 10%.</li> </ul> <p>En realidad podemos proporcionar hasta dos valores:</p> <ul> <li>Si proporcionamos un \u00fanico valor, \u00e9ste corresponder\u00e1 al radio horizontal y al vertical.</li> <li>Si proporcionamos dos valores, el primero corresponder\u00e1 al radio horizontal y el segundo al vertical.</li> </ul> <p>Si queremos especificar de una vez el radio de las cuatro esquinas, podemos usar la propiedad shorthand <code>border-radius</code>:</p> Propiedades <code>border-radius</code> Valores [ | ]{1,4} [ / [ | ]{1,4} ]? Se aplica a Todos los elementos Valor inicial 0 Descripci\u00f3n Establece el radio de curvatura de los bordes de los elementos <p>Podemos especificar entre 1 y 8 valores:</p> <ul> <li>Si especificamos un \u00fanico valor, \u00e9ste corresponder\u00e1 al radio horizontal y vertical de las cuatro esquinas.</li> <li>Si especificamos m\u00e1s de uno, deben indicarse en el siguiente orden: superior izquierda, superior derecha, inferior derecha e inferior izquierda (siguiendo las agujas del reloj).</li> <li>Si se omite el valor para la inferior izquierda, se le asignar\u00e1 el valor de la superior derecha (el opuesto en la diagonal). Si se omite la inferior derecha, se le asignar\u00e1 el valor de la superior izquierda.t</li> <li>Para establecer diferentes valores para el radio horizontal y el radio vertical de una esquina, usaremos el formato radio_horizontal / radio_vertical.</li> <li>Una aplicaci\u00f3n curiosa de esta propiedad es hacer que un elemento sea totalmente redondo. Bastar\u00e1 con que tenga la misma anchura que altura y establezcamos el radio de los cuatro bordes al valor 50%.</li> </ul> <p>Tambi\u00e9n podemos hacer que el borde sea semitransparente, en cuyo caso se mezclar\u00e1, por defecto, con el color/imagen de fondo del elemento. Si no queremos que se fusione con el color de fondo del elemento sino con el padre, podemos usar la propiedad <code>background-clip: padding-box</code> para indicar que el fondo del elemento se dibuje detr\u00e1s del contenido y del padding, pero no del borde.</p> <p>Otro efecto curioso es simular que los bordes redondeados son interiores. Para ello, simplemente introduciremos una caja en otra, y haremos que los bordes de la interior queden redondeados.</p> <p>Podemos usar tambi\u00e9n el siguiente generador online para crear visualmente las esquinas redondeadas,</p> <p>Demos interactivas</p> <p>Demo interactiva 1 de border-radius</p> <p>Demo interactiva 2 de border-radius</p> <p>Demo interactiva 3 de border-radius</p> <p>Demo interactiva 4 de border-radius</p> <p>Finalmente, veamos unos ejemplos de elementos con distintos tipos de borde:</p> <p> See the Pen    border by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-4/#borde-formado-por-imagen","title":"Borde formado por imagen","text":"<p>La propiedad <code>border-image</code> permite usar im\u00e1genes en los bordes. Es dependiente de la existencia de un \u00e1rea de borde, es decir, que si <code>border-width</code> es 0 la propiedad <code>border-image</code> no se aplicar\u00e1.</p> <p>El \u00e1rea de la imagen del borde, a diferencia del \u00e1rea del borde, se extiende a trav\u00e9s de todo el elemento, incluyendo las otras \u00e1reas del modelo de caja (border area, padding area, content area). Esto permite utilizar la imagen del borde (a pesar de su nombre) no s\u00f3lo como fondo del elemento, sino que tambi\u00e9n permite extender la imagen del borde fuera de la zona del borde.</p> <p>La propiedad <code>border-image</code> es la forma acortada de otras propiedades que controlan el uso de im\u00e1genes en los bordes:<code>border-image-source</code>, <code>border-image-slice</code>, <code>border-image-outset</code>, <code>border-image-repeat</code> y <code>border-image-width</code>.</p> <p>La propiedad <code>border-image-source</code> define la ruta a la imagen que se utilizar\u00e1 como borde. La imagen se mostrar\u00e1 en lugar de cualquier otro valor que tenga border-style declarado. La forma en que se aplica la imagen depender\u00e1 de los valores de las otras cuatro propiedades de <code>border-image</code>.</p> Propiedades <code>border-image-source</code> Valores url | none Se aplica a Todos los elementos Valor inicial none Descripci\u00f3n Establece la imagen a utilizar como borde <p>Por ejemplo:</p> <pre><code>.module {\nborder-image-source: url(\"border.png\");\n}\n</code></pre> <p>La propiedad <code>border-image-slice</code> define cu\u00e1nto se recorta la imagen para crear el borde. Los valores especifican la cantidad de p\u00edxeles desde el borde exterior hacia adentro de la imagen que se preservar\u00e1n al recortar. Debemos tener en cuenta que la cantidad indicada NO controla la anchura del borde, sino tan s\u00f3lo define la zona a preservar al recortar.</p> Propiedades <code>border-image-slice</code> Valores [ | ]{1,4}   | fill Se aplica a Todos los elementos Valor inicial none Descripci\u00f3n Establece la imagen a utilizar como borde <p>El valor <code>fill</code> indica que la imagen NO debe recortarse. En vez del valor <code>fill</code>, puede recibir de 1 a 4 valores:</p> <ul> <li>De 1 a 4 valores num\u00e9ricos: Indican la cantidad en p\u00edxeles (NO hay que incluir la unidad px) desde cada borde de la imagen hacia dentro que hay que preservar de la imagen al recortarla (indicados como arriba, derecha, abajo e izquierda).</li> <li>De 1 a 4 porcentajes: Indican el porcentaje del alto/ancho de la imagen desde cada borde hacia adentro que hay que preservar al recortar. En el siguiente ejemplo se preservar\u00e1n 20 p\u00edxeles desde cada borde de la imagen hacia adentro para conformar el borde de la caja:</li> </ul> <p> Figura 8 - border-image-slice</p> <p>Al aplicar una zona de recorte, se crea internamente una cuadr\u00edcula de 9 celdas, donde la celda central es recortada y el resto se usar\u00e1 para dibujar las diferentes zonas del borde.</p> <p> Figura 9 - Cuadr\u00edcula border-image-slice</p> <p>La propiedad <code>border-image-outset</code> define cu\u00e1nto se extiende la imagen del borde fuera del \u00e1rea del borde. Puede recibir un valor n\u00famero, que representa m\u00faltiplos del valor de <code>border-width</code>, o un valor en px (incluyendo la unidad px)</p> Propiedades <code>border-image-outset</code> Valores [  |  ]{1,4} Se aplica a Todos los elementos Valor inicial 0 Descripci\u00f3n Establece cu\u00e1nto se extiende la imagen del borden fuera del \u00e1rea de borde <p>La propiedad <code>border-image-repeat</code> define c\u00f3mo se trata la imagen del borde una vez recorta, escal\u00e1ndose o repiti\u00e9ndola, si no es lo suficientemente grande para cubrir todo el \u00e1rea del borde.</p> Propiedades <code>border-image-repeat</code> Valores [stretch | repeat | round | space]{1,2} Se aplica a Todos los elementos Valor inicial stretch Descripci\u00f3n Establece el modo de repetici\u00f3n de la imagen de borde dentro del \u00e1rea de borde <p>Puede tomar los siguientes valores para los bordes horizontales y verticales (en este orden):</p> <ul> <li><code>stretch</code>: La imagen se estira para rellenar la anchura de borde</li> <li><code>repeat</code>: La imagen se repite para rellenar la anchura de borde</li> <li><code>round</code>: La imagen forma un mosaico. Si no se rellena el \u00e1rea con un n\u00famero entero de repeticiones, cada imagen se reescala.</li> <li><code>space</code>: La imagen forma un mosaico. Si no se rellena el \u00e1rea con un n\u00famero entero de repeticiones el espacio sobrante se redistribuye entre cada imagen. No soportado a\u00fan por Chrome.</li> </ul> <p>Note</p> <p>NO debemos pensar que a partir de una \u00fanica imagen completa podemos crear un borde en forma de mosaico repiti\u00e9ndola por todo el borde. Es necesario crear una nueva imagen que incluya la imagen original en cada una de las 9 celdas de la cuadr\u00edcula y despu\u00e9s recortarla haciendo uso de <code>border-image-slice</code>.</p> <p>La propiedad <code>border-image-width</code> define el ancho real de la imagen del borde. Aunque, por defecto, el ancho es el mismo que el <code>border-width</code>, la imagen del borde puede cubrir m\u00e1s o menos de \u00e9l.</p> Propiedades <code>border-image-width</code> Valores [  ||  | auto ]{1,4} Se aplica a Todos los elementos Valor inicial 1 Descripci\u00f3n Define el ancho real de la imagen de borde <p>Podemos especificar un valor para los cuatro lados o especificar el valor de cada lado, con las siguientes posibilidades:</p> <ul> <li>Un n\u00famero, que representa m\u00faltiplos del valor de <code>border-width</code></li> <li>Un porcentaje respecto del del \u00e1rea de borde</li> <li>Un valor en p\u00edxeles (incluyendo la unidad px)</li> </ul> <p>Podemos especificar todas las propiedades anterior de una sola vez haciendo uso de la propiedad shorthand <code>border-image</code>.</p> Propiedades <code>border-image</code> Valores [] Se aplica a Todos los elementos Valor inicial - Descripci\u00f3n Establece una imagen de borde <p>S\u00f3lo los dos primeros valores son obligatorios.</p> <p>Demos interactivas</p> <p>Demo interactiva 1 de border-image</p> <p>Demo interactiva 2 de border-image</p> <p>Demo interactiva 3 de border-image</p> <p>Demo interactiva 4 de border-image</p> <p>Finalmente veamos varios ejemplos:</p> <p> See the Pen    border.image by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-5/","title":"5 Contorno y sombra","text":""},{"location":"tema_3/page-5/#contorno","title":"Contorno","text":"<p>CSS permite dibujar un contorno alrededor de la caja de un elemento. A dicho contorno se le conoce como <code>outline</code>, y se usa normalmente para indicar visualmente al usuario qu\u00e9 elemento es el que tiene el foco.</p> <p>La propiedad <code>outline-color</code> define el color del trazo dibujado como contorno.</p> Propiedad <code>outline-color</code> Valores color | invert | inherit Se aplica Todos los elementos Valor inicial invert Descripci\u00f3n Establece el color de todos los bordes del elemento <p>El valor <code>invert</code> indica que se utilice como color el inverso al que haya en el fondo, de manera que nos aseguremos de que el contorno es visible. No es soportado por todos los navegadores.</p> <p>La propiedad <code>outline-style</code> define el estilo del trazo dibujado como contorno.</p> Propiedad <code>outline-style</code> Valores none | auto | dotted | solid | double | groove | ridge | inset | outset | inherit Se aplica Todos los elementos Valor inicial none Descripci\u00f3n Establece el estilo del trazo dibujado como contorno <p>El significado cada uno de los valores es similar al de la propiedad <code>border-style</code>. Sin embargo, no se puede usar el valor <code>hidden</code>. Adem\u00e1s tenemos el valor <code>auto</code>, que indica que sea el navegador el que elija el estilo.</p> <p>La propiedad <code>outline-width</code> define la anchura del trazo dibujado como contorno.</p> Propiedad <code>outline-width</code> Valores unidad de medida | thin | medium | thick | inherit Se aplica Todos los elementos Valor inicial medium Descripci\u00f3n Define al anchura del trazo dibujado como contorno <p>El significado cada uno de los valores es similar al de la propiedad <code>border-width</code>.</p> <p>La propiedad <code>outline</code> es una propiedad shorthand de las tres anteriores, que permite establecer el color, el estilo y la anchura del contorno de una vez.</p> Propiedad <code>outline</code> Valores Se aplica Todos los elementos Valor inicial - Descripci\u00f3n Define el color, el estilo y la anchura del contorno <p>No debemos confundir el contorno de la caja con su borde, ya que presentan una serie de diferencias.</p> <p>El contorno se dibuja a partir del l\u00edmite exterior del borde (por fuera del borde). El contorno es id\u00e9ntico en los cuatro lados, NO se puede especificar que el contorno derecho sea por ejemplo diferente del contorno izquierdo.</p> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    outline by irubenboy (@irubenboy)   on CodePen. </p> <p>El contorno NO se tiene en cuenta a la hora de establecer el tama\u00f1o de la caja, por lo que la aparici\u00f3n u ocultaci\u00f3n del contorno no provoca el redibujado de las cajas adyacentes. Es decir NO pertenece al modelo de caja. Dado que no forma parte del tama\u00f1o de la caja, el contorno puede aparecer solapado respecto a otros elementos (o \u00e9l mismo).</p> <p>Veamos un ejemplo:</p> <p> See the Pen    outline2 by irubenboy (@irubenboy)   on CodePen. </p> <p>Si el elemento se distribuye en varias l\u00edneas, el contorno no forma un rect\u00e1ngulo para encerrar a todo el elemento, sino que se muestra en ambas l\u00edneas all\u00e1 donde est\u00e9 presente el elemento.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    outline3 by irubenboy (@irubenboy)   on CodePen. </p> <p>El contorno no se ve\u00eda afectado por la propiedad <code>border-radius</code>, por lo que aunque las esquinas del bordes est\u00e9n redondeadas, el contorno segu\u00eda usando esquinas rectas. Este comportamiento estaba considerado un bug de los navegadores pero se ha corregido en versiones recientes.</p> <p> See the Pen    Untitled by irubenboy (@irubenboy)   on CodePen. </p> <p>El uso m\u00e1s habitual de esta propiedad es el marcado del campo de formulario que tiene el foco en un momento dado.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    outline5 by irubenboy (@irubenboy)   on CodePen. </p> <p>Por defecto, el contorno se dibuja justo desde borde de la caja hacia fuera. Sin embargo, con la propiedad <code>outline-offset</code> podemos establecer la distancia desde el borde a la que pintar el contorno. Si establecemos un valor negativo esto puede significar que el contorno se dibujo dentro de la propia caja.</p> Propiedad <code>outline-offset</code> Valores Se aplica a Todos los elementos Valor inicial 0 Descripci\u00f3n Establece la distancia desde el borde a la que pintar el contorno <p>Veamos un ejemplo:</p> <p> See the Pen    outline6 by irubenboy (@irubenboy)   on CodePen. </p> <p>Si establecemos un valor negativo esto puede significar que el contorno se dibujo dentro de la propia caja.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    outline7 by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-5/#sombra","title":"Sombra","text":"<p>La propiedad <code>box-shadow</code> permite agregar una o m\u00e1s sombras a la caja de un elemento. La sombra puede ser de cualquier color e incluso poseer un efecto de desenfoque, conocido como gaussian blur. Tambi\u00e9n podremos especificar la distancia respecto al borde en el que hay que dibujar la sombra e incluso si se trata de una sombra interior.</p> <p>|Propiedad      |<code>box-shadow</code>                                                   | |---------------| | none   | |Se aplica      |Todos los elementos                                            | |Valor inicial  |none                                                           | |Descripci\u00f3n    |Establece la sombra de la caja                                 | <p>Los valores tienen el siguiente significado:</p> <ul> <li>Desplazamiento horizontal de la sombra: Desplazamiento horizontal de la sombra de la caja respecto de la propia caja del elemento. Si el valor es positivo la sombra ser\u00e1 hacia la derecha y si es negativo hacia la izquierda.</li> <li>Desplazamiento vertical: Desplazamiento vertical de la sombra de la caja respecto de la propia caja del elemento. Si el valor es positivo la sombra ser\u00e1 hacia abajo y si es negativo hacia arriba.</li> <li>Radio de desenfoque: Es opcional. Define la dureza o suavidad de la sombra. Cuanto menor sea el valor, m\u00e1s n\u00edtida la sombra. Un valor alto crear\u00e1 un desenfoque grande. Los negativos se consideran 0.</li> <li>Distancia de propagaci\u00f3n: Es opcional. Define el tama\u00f1o de la sombra respecto al del elemento. Un valor negativo har\u00e1 que la sombra sea m\u00e1s peque\u00f1a que el elemento que la genera y un valor positivo, que sea mayor.</li> <li>Color: Es opcional. Si no se especifica se usar\u00e1 el color de la fuente.</li> <li>Sentido: Es opcional. Indica si la sombra debe dibujarse desde el borde hacia fuera (externa), correspondiente al valor <code>outset</code> (valor por defecto), o del borde hacia dentro (interna), correspondiente al valor <code>inset</code>. Se puede usar como primer o \u00faltimo par\u00e1metro, pero si se intercala entre otros no se tiene en cuenta.</li> </ul> <p>Veamos un ejemplo:</p> <p> See the Pen    box-shadow by irubenboy (@irubenboy)   on CodePen. </p> <p>Al igual que el contorno, la sombra de la caja NO se tiene en cuenta a la hora de establecer el tama\u00f1o de la caja, por lo que la aparici\u00f3n u ocultaci\u00f3n de la sombra no provoca el redibujado de las cajas adyacentes. Es decir NO pertenece al modelo de caja. Dado que no forma parte del tama\u00f1o de la caja, la sombra puede aparecer solapada respecto a otros elementos (o \u00e9l mismo).</p> <p>Veamos un ejemplo:</p> <p> See the Pen    box-shadow2 by irubenboy (@irubenboy)   on CodePen. </p> <p>La sombra se ve afectada por el hecho de que las esquinas de los bordes de la caja est\u00e9n redondeadas, mostr\u00e1ndose la sombra tambi\u00e9n con las esquinas redondeadas.</p> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    box-shadow3 by irubenboy (@irubenboy)   on CodePen. </p> <p>Por este \u00faltimo motivo, adem\u00e1s de por el hecho de que la propiedad <code>outline</code> no permite establecer efecto de desenfoque, normalmente se prefiere el uso de la propiedad <code>box-shadow</code> frente al de <code>outline</code> para crear el mismo efecto de contorno.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    box-shadow4 by irubenboy (@irubenboy)   on CodePen. </p> <p>Como hemos comentado, la sombra puede corresponder a una caja m\u00e1s grande o m\u00e1s peque\u00f1a que la del elemento original.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    box-shadow5 by irubenboy (@irubenboy)   on CodePen. </p> <p>Al igual que en el caso del contorno, si el elemento se distribuye en varias l\u00edneas, la sombra no forma un rect\u00e1ngulo para encerrar a todo el elemento, sino que se muestra en ambas l\u00edneas all\u00e1 donde est\u00e9 presente el elemento.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    box-shadow6 by irubenboy (@irubenboy)   on CodePen. </p> <p>Tambi\u00e9n podemos crear sombras internas gracias al valor <code>inset</code>.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    inset by irubenboy (@irubenboy)   on CodePen. </p> <p>En realidad la propiedad <code>box-shadow</code> admite varias sombras, para ello s\u00f3lo es necesario separar cada grupo por una coma <code>,</code>. Cuando se definen varias sombras, la primera declarada se dibuja sobre (eje Z) la segunda, y \u00e9sta sobre la tercera y as\u00ed sucesivamente.</p> <p>Otros de los usos habituales de <code>box-shadow</code> es la creaci\u00f3n de varios bordes para la caja. Como hemos visto cuando hablamos de la propiedad border, CSS NO permite especificar varios bordes para una caja, a diferencia de los fondos, que si podemos especificar varios. Para solucionar este inconveniente podemos crear el resto de bordes usando la propiedad <code>box-shadow</code>, especificando como distancia de propagaci\u00f3n del borde el grosor que queramos para el mismo.</p> <p>Incluso podemos a\u00f1adir una sombra tradicional despu\u00e9s de agregar sombras que act\u00faan como bordes. Sin embargo, debemos tener en cuenta que las sombras externas no forman parte de la caja por lo que cuando simulan bordes NO son consideradas como pertenecientes a la misma a efectos de, por ejemplo, detectar que estamos situados sobre la caja (<code>:hover</code>). La \u00fanica manera de solucionar esto es hacer que las sombras que simulan bordes sean <code>inset</code> y especificar una padding adicional para compensar el espacio interior que estos ocupan. De esta manera el espacio ocupado por los falsos bordes corresponder\u00e1 a espacio interno de la caja.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    box-shadow7 by irubenboy (@irubenboy)   on CodePen. </p> <p>Demo interactiva de box-shadow</p> <p>http://informaticasaladillo.es/aplweb/cssinteractivedemos/box_demo.html</p>"},{"location":"tema_3/page-6/","title":"6 Patrones de recorte","text":""},{"location":"tema_3/page-6/#introduccion","title":"Introducci\u00f3n","text":"<p>Tradicionalmente todos los elementos han sido mostrados con forma rectangular, es decir, en cajas con cuatro esquinas con un \u00e1ngulo de 90 grados. Con el uso de <code>border-radius</code> se \"enmascaran\" las esquinas para que aparezcan redondeadas.</p> <p>Para poder solucionar este problemas, CSS3 incluye la propiedad<code>clip-path</code>, que permite aplicar patrones de recorte a los elementos, de manera que estos luzcan con formas distintas a la rectangular. Es importante resaltar que esta propiedad puede usarse sobre cualquier caja, no solo sobre im\u00e1genes.</p> Propiedad <code>clip-path</code> Valores none |  | [] Se aplica Todos los elementos Valor inicial none Descripci\u00f3n Establece el modo de recorte del elemento <p>Expliquemos los valores posibles:</p> <ul> <li><code>&lt;url_origen_recorte&gt;</code>: Hace referencia a la URL del elemento que va a ser usado para recortar la imagen. Dicho elemento debe ser un contenido dentro de un elemento <code>&lt;clipPath&gt;</code> correspondiente para que podamos indicar su URL relativa haciendo uso de <code>#id</code>. Esta posibilidad es compatible actualmente tanto en Firefox como en Chrome.</li> <li> <p><code>&lt;forma_basica&gt;</code>: Como alternativa a especificar la URL, podemos usar una forma b\u00e1sica para indicar el elemento que debe ser usado para recortar la imagen. Esta posibilidad s\u00f3lo est\u00e1 presente por ahora en Chrome. Para definir la forma b\u00e1sica se puede usar una de las siguientes funciones:</p> <ul> <li><code>circle(&lt;radio&gt; at &lt;position&gt;)</code>: El recorte se realizar\u00e1 con un c\u00edrculo del radio indicado situado en la posici\u00f3n indicada. Por ejemplo:</li> </ul> <p><pre><code>/* Recorte con circulo con radio del 50% situado en el centro */\nimg{\nclip-path: circle(50% at 50% 50%);  }\n</code></pre>   - <code>ellipse(&lt;radio1&gt; &lt;radio2&gt; at &lt;posici\u00f3n&gt;)</code>: El recorte se realizar\u00e1 con una elipse de los radios indicados en la posici\u00f3n indicada.. Por ejemplo:</p> <p><pre><code>/*Recorte en forma de elipse*/\nimg{\nclip-path: ellipse(50% 35% at 50% 50%);\n}\n</code></pre>   - <code>inset(&lt;long1&gt; &lt;long2&gt; &lt;long3&gt; &lt;long4&gt; round &lt;radio_esquinas&gt;)</code>: El recorte se realizar\u00e1 mediante un rect\u00e1ngulo interior situado a la longitud indicada respecto a cada lado y con las esquinas redondeadas con el radio indicado. Por ejemplo:</p> <pre><code>/*Recorte mediante un rect\u00e1ngulo interior con una distancia del 10% respecto al borde de la caja y las esquinas redondeadas con un radio de 10px*/\nimg{\nclip-path: inset(10% round 10px);\n}\n</code></pre> </li> </ul> <p>Veamos una demostraci\u00f3n en la que realizamos distintas formas de recorte de imagenes:</p> <p> See the Pen    clip-path by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-6/#patrones-de-recorte-y-sombras-de-contornos","title":"Patrones de recorte y sombras de contornos","text":"<p>Debemos tener en cuenta que al recortar una caja, por ejemplo usando la funci\u00f3n <code>polygon()</code>, al indicar el valor 100% en alguna de sus coordenadas nos estamos refiriendo al borde de la caja, por lo que todo lo dibujado fuera de la caja, como la sombras y el contorno, no ser\u00e1 mostrado. En algunos casos podemos tratar de usar valores mayores que 100% o menores de 0% para incluir estos elementos en el \u00e1rea de recorte, pero por lo general el efecto no ser\u00e1 el deseado.</p> <p>Por tanto, debemos tener en cuenta que las propiedades <code>box-shadow</code> y <code>outline</code> NO tienen en cuenta el recorte realizado con la propiedad <code>clip-path</code> a la hora de dibujarse, algo que ser\u00eda deseable, pero desgraciadamente no es as\u00ed.</p> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    clip-path2 by irubenboy (@irubenboy)   on CodePen. </p> <p>Un posible apa\u00f1o es simular la sombra con otra caja, como vemos en la siguiente demo:</p> <p> See the Pen    clip-path3 by irubenboy (@irubenboy)   on CodePen. </p> <p>Generadores online</p> <p>Tenemos disponibles online algunos generadores para obtener de forma visual los valores para la propiedad <code>clip-path</code>:</p> <p>http://cssplant.com/clip-path-generator</p> <p>http://bennettfeely.com/clippy/</p>"},{"location":"tema_3/page-7/","title":"7 Transformaciones","text":""},{"location":"tema_3/page-7/#introduccion","title":"Introducci\u00f3n","text":"<p>CSS 3 permite realizar diferentes tipos de transformaciones visuales 2D y 3D sobre las cajas, a trav\u00e9s de una serie de funciones de transformaci\u00f3n y de propiedades. As\u00ed, podremos trasladar, escalar, rotar y deformar una caja, tanto en dos dimensiones (ejes x e y), como en tres dimensiones (eje z).</p> <p> Figura 10 - Eje X-Y-Z</p> <p>Las transformaciones NO afectan al flujo normal de posicionamiento de cajas, ya que se llevan a cabo una vez ha concluido el posicionamiento. Tan s\u00f3lo hacen que los elementos luzcan de forma diferente.</p>"},{"location":"tema_3/page-7/#propiedades","title":"Propiedades","text":"<p>La propiedad <code>transform</code> permite especificar las transformaciones que deben realizarse sobre un elemento. Recibe como valor una lista de funciones de transformaci\u00f3n que deben aplicarse, separadas por espacios en blanco. Las funciones de transformaci\u00f3n se realizan en el orden en el que aparecen.</p> Propiedad <code>transform</code> Valores none |  Se aplica a Elementos transformables Valor inicial none Descripci\u00f3n Establece las funciones de transformaci\u00f3n que se deben aplicar al elemento <p>Veamos unos ejemplos:</p> <pre><code>.rotada {\ntransform: rotate(-15deg);\n}\n.rotada-deformada {\ntransform: rotate(90deg) skewx(60deg);\n}\n</code></pre> <p>Por su parte, la propiedad <code>transform-origin</code> permite modificar las coordenadas del punto de referencia usado como origen de las transformaciones a aplicar a un elemento. Por defecto dicho punto de referencia es el centro del elemento.</p> Propiedad <code>transform-origin</code> Valores Se aplica a Elementos transformables Valor inicial 50% 50% 0 Descripci\u00f3n Establece las coordenadas del punto de referencia origen de las transformaciones en el elemento <p>El desplazamiento en cada eje se puede expresar mediante:</p> <ul> <li>Una longitud, indicada en alguna de las unidades conocidas.</li> <li>Un porcentaje respecto de la anchura / altura de la caja del elemento.</li> <li>Valores <code>left</code>, <code>right</code>, <code>center</code>, <code>top</code>, <code>bottom</code>.</li> </ul> <p>Veamos un ejemplo:</p> <pre><code>.rotada-left-top {\ntransform-origin: left top;\ntransform: rotate(90deg);\n}\n</code></pre>"},{"location":"tema_3/page-7/#funciones-de-transformacion-2d","title":"Funciones de transformaci\u00f3n 2D","text":"<p> Figura 11 - Transformaciones 2D</p>"},{"location":"tema_3/page-7/#traslacion","title":"Traslaci\u00f3n","text":"<p>Las funciones de traslaci\u00f3n son aquellas que desplazan el elemento en alguno de los ejes X o Y. Los valores positivos desplazan hacia la derecha en el eje X y hacia abajo en el eje Y, mientras que los valores negativos desplazan hacia la izquierda en el eje X y hacia arriba en el eje Y. Si se indican porcentajes, \u00e9stos se calculan respecto a la anchura/altura del elemento.</p> <ul> <li><code>translate(x, y)</code>: Traslada el elemento una distancia x horizontalmente y una distancia y verticalmente.</li> <li><code>translateX(x)</code>: Traslada el elemento una distancia x horizontalmente.</li> <li><code>translateY(y)</code>: Traslada el elemento una distancia y verticalmente.</li> </ul> <p>Por ejemplo, <code>transform: translate(10px, -20px)</code> traslada el elemento 10 p\u00edxeles a la derecha y 20 p\u00edxeles hacia arriba. Es equivalente a transform: <code>translateX(10px)</code> <code>translateY(-20px)</code></p>"},{"location":"tema_3/page-7/#escalado","title":"Escalado","text":"<p>Las funciones de escalado permiten aumentar o reducir el tama\u00f1o del elemento. Reciben el factor de escalado, de manera que si es positivo el elemento se agranda y si es negativa se empeque\u00f1ece.</p> <ul> <li><code>scale(fx, fy)</code>: Escala el elemento horizontalmente en un factor fx y verticalmente en un factor fy. Si fx y fy corresponden al mismo valor, se mantendr\u00e1 la proporci\u00f3n original del elemento al escalarlo.</li> <li><code>scaleX(fx)</code>: Escala el elemento horizontalmente en un factor fx.</li> <li><code>scaleY(fy)</code>: Escala el elemento verticalmente en un factor fy.</li> </ul> <p>Por ejemplo, <code>transform: scale(3, 2)</code> hace que el elemento tenga el triple de ancho y el doble de alto que originalmente.</p>"},{"location":"tema_3/page-7/#rotaciones","title":"Rotaciones","text":"<p>as funciones de rotaci\u00f3n giran el elemento el n\u00famero de grados especificado, en el sentido de las agujas del reloj.</p> <ul> <li><code>rotate(deg)</code>: Rota el elemento respecto al eje Z el n\u00famero de grados indicados.</li> <li><code>rotateX(deg)</code>: Rota el elemento respecto al eje X el n\u00famero de grados indicados.</li> <li><code>rotateY(deg)</code>: Rota el elemento respecto al eje Y el n\u00famero de grados indicados.</li> </ul> <p>Por ejemplo, <code>transform: rotate(15deg)</code> rota el elemento 15 grados en el eje Z.</p>"},{"location":"tema_3/page-7/#deformaciones","title":"Deformaciones","text":"<p>Las funciones de deformaci\u00f3n inclinan el elemento el n\u00famero de grados indicados.</p> <ul> <li><code>skew(xdeg, ydeg)</code>: Inclina el elemento el n\u00famero de grados indicados en el eje X y el n\u00famero de grados indicados en el eje Y.</li> <li><code>skewX(deg)</code>: Inclina el elemento en el eje X el n\u00famero de grados indicados.</li> <li><code>skewY(ydeg)</code>: Inclina el elemento en el eje Y el n\u00famero de grados indicados.</li> </ul> <p>Por ejemplo, <code>transform: skew(20deg, 15deg)</code> inclina el elemento 20 grados en el eje X y 15 grados en el eje Y.</p> <p>Transformaciones complejas</p> <p>La funci\u00f3n <code>matrix</code> permite realizar transformaciones complejas en 2D. Recibe 6 valores que conforman la matriz de transformaci\u00f3n. Se usa en transformaciones mucho m\u00e1s complejas que las anteriores En el siguiente enlace puede saber m\u00e1s sobre las matrices de transformaci\u00f3n en 2D.</p> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    transform by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-7/#funciones-de-transformacion-3d","title":"Funciones de transformaci\u00f3n 3D","text":"<p>CSS proporciona funciones de transformaci\u00f3n similares a las anteriores pero sobre el eje Z, que corresponde al eje de profundidad, lo que nos permitir\u00e1 modificar el elemento en tres dimensiones. Cada elemento con <code>z &gt; 0</code> se hace m\u00e1s grande y con <code>z &lt; 0</code> se vuelve m\u00e1s peque\u00f1o.</p> <p>Pero para que podamos visualizar correctamente los efectos 3D y determinar su intensidad, es necesario establecer la distancia entre el plano z= 0 y el usuario, es decir, determinar el punto de perspectiva del usuario. Las partes del elemento cuyo valor en el eje Z sean mayores que el valor de perspectiva no ser\u00e1n visibles, ya que quedan \"detr\u00e1s del usuario\".</p> <p>Para ello tenemos dos opciones:</p> <ul> <li>Establecer la propiedad <code>perspective</code> en el elemento padre del elemento al que queremos transformar, asign\u00e1ndole como valor la distancia deseada.</li> <li>Usar la funci\u00f3n <code>perspective(distancia)</code> dentro de la propiedad <code>transform</code> del elemento a transformar.</li> </ul> <p>Un valor bastante adecuado como distancia de perspectiva es <code>1000px</code>.</p> <p>La posici\u00f3n del elemento desde el que se mide la distancia indicada para la propiedad <code>perspective</code> corresponde, por defecto, al centro del elemento, pero podemos modificar dicho punto de referencia mediante la propiedad<code>perspective-origin</code> del elemento padre del elemento a transformar.</p> <p>Veamos las funciones de transformaci\u00f3n en 3D disponibles:_</p> <ul> <li><code>translateZ(z)</code>: Traslada el elemento una distancia z en el eje de profundidad. Los valores positivos acercan el elemento al usuario y los negativos lo alejan.</li> <li><code>translate3d(x, y, z)</code>: Traslada el elemento una distancia x en el eje X, una distancia y en el eje Y y una distancia z en el eje Z.</li> <li><code>scaleZ(fz)</code>: Escala el elemento en el eje Z en un factor de profundidad fz. scale3d(fx, fy, fz): Escala el elemento en el eje X en un factor fx, en el eje Y en un factor fy y en el eje Z en un factor fz.</li> <li><code>rotateZ(deg)</code>: Rota el elemento respecto al eje Z el n\u00famero de grados indicados. Similar a <code>rotate(deg)</code>.</li> <li><code>rotate3d(x, y, z, deg)</code>: Rota el elemento el n\u00famero de grados indicados, tomando como punto de referencia el denotado por x, y, z.</li> <li><code>matrix3d(n, n, ...)</code>: Establece una matriz de transformaci\u00f3n 3D de 16 valores. Se usa en transformaciones mucho m\u00e1s complejas que las anteriores. Visite el siguiente enlace para saber m\u00e1s sobre las matrices de transformaci\u00f3n en 3D.</li> </ul> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    transform 3d by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-8/","title":"8 Visibilidad y opacidad","text":""},{"location":"tema_3/page-8/#introduccion","title":"Introducci\u00f3n","text":"<p>CSS nos ofrece distintas formas de hacer desaparecer una caja, de manera que \u00e9sta no sea visible para el usuario en un momento dado. Veamos algunas de ellas.</p>"},{"location":"tema_3/page-8/#visibilidad","title":"Visibilidad","text":"<p>La propiedad <code>visibility</code> permite ocultar o mostrar un elemento una vez \u00e9ste ha sido posicionado, sin afectar por tanto al posicionamiento del resto de elementos.</p> Propiedad <code>visibility</code> Valores visible | hidden | collapse | inherit Se aplica a Todos los elementos Valor inicial visible Descripci\u00f3n Define la visibilidad de un elemento <p>Inicialmente todas las cajas que componen la p\u00e1gina son visibles. Empleando el valor hidden es posible convertir una caja en invisible para que no muestre sus contenidos. El resto de elementos de la p\u00e1gina se muestran como si la caja todav\u00eda fuera visible, por lo que en el lugar donde originalmente se mostraba la caja invisible, ahora se muestra un hueco vac\u00edo.</p> <p>Por otra parte, el valor <code>collapse</code> de la propiedad visibility tiene un funcionamiento distinto. S\u00f3lo se puede utilizar en las filas, grupos de filas, columnas y grupos de columnas de una tabla. Su efecto es ocultar completamente la fila y/o columna y se pueden mostrar otros contenidos en ese lugar (similar a si hici\u00e9ramos <code>display: none</code>, como veremos m\u00e1s adelante). Si se utiliza el valor <code>collapse</code> sobre cualquier otro tipo de elemento, su efecto es id\u00e9ntico al valor <code>hidden</code>.</p> <p>Esta propiedad NO se puede animar, por lo que no podremos hacer que la caja aparezca o desparezca poco a poco.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    visibility by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-8/#opacidad","title":"Opacidad","text":"<p>La propiedad <code>opacity</code> define el nivel de opacidad (no transparencia) de un elemento, esto es, en que grado se superpone respecto a lo que haya detr\u00e1s del elemento.</p> Propiedad <code>opacity</code> Valores Se aplica a Todos los elementos Valor inicial 1 Descripci\u00f3n Define el nivel de opacidad de un elemento <p>Recibe un valor entre 0.0 y 1.0, ambos incluidos, donde el valor 0.0 indica que el elemento es totalmente transparente (invisible) y el 1.0 indica que es totalmente opaco (s\u00f3lido, nada transparente). Los valores intermedios indican c\u00f3mo de transl\u00facido es el elemento. Si el valor proporcionado se sale de la escala indicada, ser\u00e1 ajustado al valor v\u00e1lido m\u00e1s cercano.</p> <p>Esta propiedad s\u00ed se puede animar, por lo que podremos hacer que la caja aparezca y desaparezca poco a poco.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    Untitled by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-8/#otras-formas-de-hacer-desaparecer-un-elemento","title":"Otras formas de hacer desaparecer un elemento","text":"<p>En realidad disponemos en CSS de m\u00faltiples formas para hacer desaparecer un elemento:</p> <ul> <li> <p><code>display: none</code>: Hace que la caja correspondiente no sea pintada, saliendo del flujo normal, por lo que s\u00ed afecta al resto de elementos, que pueden ocupar el espacio que inicialmente le correspondiera a la caja desparecida. A efectos pr\u00e1cticas es como si hici\u00e9ramos <code>visibility: hidden</code> y <code>position: absolute</code>. Un problema adicional es que la propiedad <code>display</code> no se puede animar, por lo que no podremos hacer que la caja aparezca o desaparezca poco a poco. Veamos un ejemplo:     <p> See the Pen        display: none by irubenboy (@irubenboy)       on CodePen.</p> <p></p> </p> </li> <li> <p><code>width: 0</code> o <code>height: 0</code>: Deberemos adem\u00e1s evitar el desbordamiento de su contenido con <code>overflow: hidden</code>, y si es un elemento inline-block hacer <code>line-height: 0</code>. Tradicionalmente se usa esta opci\u00f3n para hacer aparecer men\u00fas de opciones ocultas y men\u00fas de tipo acorde\u00f3n. Veamos un ejemplo:     <p> See the Pen        hidden by width and height by irubenboy (@irubenboy)       on CodePen.</p> <p></p> </p> </li> <li> <p><code>position: absolute + desplazamiento</code>: Si el desplazamiento con <code>top</code>, <code>left</code>, <code>right</code> o <code>bottom</code> es lo suficientemente grande, el elemento ser\u00e1 sacado del viewport. Aunque la propiedad <code>position</code> no es animable, las propiedades de desplazamiento s\u00ed, por lo que podemos hacer que el elemento aparezca o desaparezca poco a poco por desplazamiento. Veamos un ejemplo:     <p> See the Pen    hidden by position by irubenboy (@irubenboy)   on CodePen.</p> <p></p> </p> </li> <li> <p><code>transform: scale(0)</code>: Al aplicarle una escala de 0 el elemento desaparece. No afecta al resto de elementos y es animable, lo que permite hacer que aparezca o desparezca poco a poco. Veamos un ejemplo:     <p> See the Pen        hidden by transform by irubenboy (@irubenboy)       on CodePen.</p> <p></p> </p> </li> <li> <p><code>transform: translate()</code>: Si la traslaci\u00f3n es suficientemente grande el elemento ser\u00e1 sacado del viewport. No afecta al resto de elementos y es animable, lo que permite hacer que aparezca o desparezca poco a poco por traslaci\u00f3n. Veamos un ejemplo:     <p> See the Pen        hidden by transform scale by irubenboy (@irubenboy)       on CodePen.</p> <p></p> </p> </li> <li> <p><code>clip-path: polygon()</code>: Si el pol\u00edgono de recorte de la caja ocupa toda la caja, \u00e9sta no sera visible. Esta propiedad es animable siempre y cuando el pol\u00edgono de recorte tenga exactamente el mismo n\u00famero de puntos. Veamos un ejemplo:     <p> See the Pen        hidden by clip-path by irubenboy (@irubenboy)       on CodePen.</p> <p></p> </p> </li> <li> <p><code>filter: opacity(0)</code>: Similar a opacity: 0, aunque supone una mayor carga de renderizado para el navegador.</p> </li> <li><code>filter: blur()</code>: Si desenfocamos suficientemente la caja, \u00e9sta se vuelve invisible, aunque su renderizado es muy costoso para el navegador. En el siguiente enlace puede aprender m\u00e1s sobre c\u00f3mo hacer desaparecer un elemento.</li> </ul>"},{"location":"tema_4/page-1/","title":"1 Texto","text":""},{"location":"tema_4/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>La mayor parte del contenido de las p\u00e1ginas HTML habituales est\u00e1 formado por texto, llegando a ser m\u00e1s del 90% del c\u00f3digo de la p\u00e1gina. Por este motivo, es muy importante conocer los elementos y etiquetas que define HTML para el manejo del texto.</p> <p>El lenguaje HTML incorpora al tratamiento del texto muchas de las ideas y normas establecidas en otros entornos de publicaci\u00f3n de contenidos. De esta forma, HTML define etiquetas para estructurar el contenido en secciones, art\u00edculos y p\u00e1rrafos y define otras etiquetas para marcar elementos importantes dentro del texto.</p> <p>El proceso de estructurar un texto simple consiste en indicar las diferentes secciones y art\u00edculos que componen el texto, y dentro de ellos, las subsecciones y p\u00e1rrafos que lo componen, para lo que utilizaremos distintas etiquetas.</p> <p> Figura 1 - Estructurar texto</p> <p>Una vez definida la estructura b\u00e1sica de los contenidos de la p\u00e1gina, el siguiente paso consiste en marcar los diferentes elementos dentro del propio texto: definiciones, abreviaturas, textos importantes, textos modificados, citas a otras referencias, etc, para lo que usaremos otro conjunto de etiquetas.</p> <p> Figura 2 - Marcar texto</p>"},{"location":"tema_4/page-1/#encabezados-de-seccion","title":"Encabezados de secci\u00f3n","text":"<p>Los encabezados de secci\u00f3n (headings en ingl\u00e9s) se utilizan para establecer un texto que act\u00faa como t\u00edtulo de dicha secci\u00f3n. Normalmente se insertan dentro de una etiqueta <code>&lt;section&gt;</code>, aunque no es estrictamente necesario.</p> <p>HTML define seis niveles jer\u00e1rquicos de encabezados de secci\u00f3n, mediante las etiquetas <code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code>, <code>&lt;h3&gt;</code>, <code>&lt;h4&gt;</code>, <code>&lt;h5&gt;</code> y <code>&lt;h6&gt;</code>, que son elementos en bloque, donde <code>&lt;h1&gt;</code> es la de mayor nivel jer\u00e1rquico. Debe quedar claro que <code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code>, etc. NO indican el orden en el que aparecen, sino el nivel de importancia (jerarqu\u00eda) del t\u00edtulo.</p> <p>Es importante resaltar tambi\u00e9n que las etiquetas <code>&lt;h1&gt;, ..., &lt;h6&gt;</code> definen t\u00edtulos de secci\u00f3n, no secciones completas. Por este motivo, no es necesario encerrar los contenidos de una secci\u00f3n dentro de ellas, sino solamente el t\u00edtulo.</p> <p>Veamos un ejemplo:</p> <pre><code>&lt;h1&gt;Mi p\u00e1gina web&lt;/h1&gt;\n&lt;section&gt;\n&lt;h2&gt;Novedades&lt;/h2&gt;\n&lt;article&gt;\n&lt;h3&gt;La inform\u00e1tica mola&lt;/h3&gt;\n    ...\n  &lt;/article&gt;\n&lt;article&gt;\n&lt;h3&gt;HTML es guay&lt;/h3&gt;\n&lt;section&gt;\n      ...\n    &lt;/section&gt;\n&lt;/article&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;h2&gt;Para saber m\u00e1s&lt;/h2&gt;\n&lt;!-- ... --&gt;\n&lt;/section&gt;\n</code></pre>"},{"location":"tema_4/page-1/#parrafos","title":"P\u00e1rrafos","text":"<p>Una de las etiquetas m\u00e1s utilizadas de HTML es la etiqueta <code>&lt;p&gt;</code> (del ingl\u00e9s paragraph), que permite definir los p\u00e1rrafos que forman el texto de una p\u00e1gina. Para delimitar el texto de un p\u00e1rrafo, se encierra ese texto con la etiqueta <code>&lt;p&gt;p\u00e1rrafo&lt;/p&gt;</code>. Los p\u00e1rrafos creados con HTML son elementos de bloque, por lo que por defecto ocupan toda la anchura de la ventana del navegador.</p>"},{"location":"tema_4/page-1/#marcado-basico-del-texto","title":"Marcado b\u00e1sico del texto","text":"<p>Una vez estructurado el texto en p\u00e1rrafos y secciones, el siguiente paso es el marcado de los elementos que componen el texto. Los textos habituales est\u00e1n formados por elementos como palabras en negrita o cursiva, anotaciones y correcciones, citas a otros documentos externos, etc. HTML proporciona varias etiquetas para marcar cada uno de los diferentes tipos de texto:</p> <ul> <li><code>&lt;em&gt;</code>: Sirve para enfatizar (resaltar) un texto (del ingl\u00e9s emphasized). Es un elemento en l\u00ednea. Por defecto el navegador lo muestra en cursiva.</li> <li><code>&lt;strong&gt;</code>: Sirve para indicar que un texto es muy importante (m\u00e1s que enfatizado, fuerte). Es un elemento en l\u00ednea. Por defecto el navegador lo muestra en negrita.</li> <li><code>&lt;mark&gt;</code>: Representa un texto resaltado (resaltado) debido a su relevancia en un contexto particular, por ejemplo las apariciones de un texto buscado. Los navegadores por defecto lo muestran con un fondo en amarillo intenso.</li> <li><code>&lt;abbr&gt;</code>: Indica que un determinado texto corresponde a una abreviatura o un acr\u00f3nimo (siglas). Deberemos usar el atributo title para proporcionar el significado de la abreviatura o del acr\u00f3nimo. Es un elemento en l\u00ednea. La mayor\u00eda de los navegadores muestran por defecto el texto subrayado con una l\u00ednea de puntos.</li> <li><code>&lt;dfn&gt;</code>: Sirve para proporcionar la definici\u00f3n del t\u00e9rmino encerrado por la etiqueta (del ingl\u00e9s definition). Se usa su atributo title para establecer la definici\u00f3n. Es un elemento en en l\u00ednea.</li> <li><code>&lt;q&gt;</code>: Sirve para indicar que un determinado texto es una cita (algo que ha dicho o escrito otra persona, del ingl\u00e9s quote). Gracias a su atributo cite podemos especificar la URL d\u00f3nde encontrar la fuente de la cita. Es un elemento en l\u00ednea.</li> <li><code>&lt;cite&gt;</code>: Representa una referencia a un trabajo creativo, como el t\u00edtulo de un libro, de un disco, un cuadro, etc. Es un elemento en l\u00ednea.</li> <li><code>&lt;time&gt;</code>: Indica que un determinado texto hace referencia a una fecha y/o una hora. En el caso de que el texto no corresponda expl\u00edcitamente a una fecha y/o una hora, como por ejemplo \"d\u00eda de San Valent\u00edn\", usaremos el atributo datetime para indicar la fecha y/o la hora real a la que hace referencia. Es un elemento en l\u00ednea.</li> <li><code>&lt;del&gt;</code>: Sirve para indicar que un determinado texto ya no es v\u00e1lido o no est\u00e1 actualizado (del ingl\u00e9s deleted). Por defecto el navegador muestra el texto tachado. El atributo espec\u00edfico cite recibe como valor la URL donde se explica el motivo por el que el texto ya no es v\u00e1lido, y con el atributo datetime se indica la fecha en la que el texto ha dejado de ser v\u00e1lido.</li> <li><code>&lt;ins&gt;</code>: Indica que un determinado texto ha sido a\u00f1adido posteriormente al documento (del ingl\u00e9s inserted). Se suele usar en conjunci\u00f3n con la etiqueta <code>&lt;del&gt;</code> para indicar el nuevo texto que sustituye al que ya no es v\u00e1lido. Posee los mismos atributos espec\u00edficos que dicha etiqueta.</li> <li><code>&lt;blockquote&gt;</code>: Sirve para indicar que un determinado texto (p\u00e1rrafo) es una cita (algo que ha dicho o escrito otra persona, en espa\u00f1ol bloque de cita). Gracias a su atributo cite podemos especificar la URL d\u00f3nde encontrar la fuente de la cita. Se diferencia de la etiqueta <code>&lt;q&gt;</code> en que <code>&lt;blockquote&gt;</code> es un elemento en bloque y se usa para citas mostradas en su propio \"p\u00e1rrafo\". Los navegadores por defecto aplican un sangrado adicional al elemento.</li> <li><code>&lt;detail&gt;</code> y <code>&lt;summary&gt;</code>: El elemento <code>&lt;detail&gt;</code> representa un bloque de texto que por defecto aparece contra\u00eddo pero que puede ser expandido (detalle). Como primer hijo de la etiqueta <code>&lt;detail&gt;</code> se usa una etiqueta <code>&lt;summary&gt;</code> para indicar el texto que debe mostrarse cuando el bloque est\u00e9 contra\u00eddo (en espa\u00f1ol, resumen). Por defecto aparecer\u00e1 contra\u00eddo. Si queremos que nuestro bloque de texto aparezca inicialmente expandido usaremos el atributo <code>open=\"open\"</code> en la etiqueta <code>&lt;detail&gt;</code>.</li> </ul> <p>Tambi\u00e9n tenemos disponibles una serie de etiquetas a usar cuando el texto corresponde a c\u00f3digo de programaci\u00f3n o a f\u00f3rmulas matem\u00e1ticas:</p> <ul> <li><code>&lt;var&gt;</code>: El texto corresponde a una variable de una f\u00f3rmula o c\u00f3digo de programaci\u00f3n.</li> <li><code>&lt;sub&gt;</code>: Indica que el texto es un sub\u00edndice.</li> <li><code>&lt;sup&gt;</code>: El texto es un super\u00edndice.</li> <li><code>&lt;kdb&gt;</code>: Indica que el texto corresponde a una tecla o combinaci\u00f3n de teclas.</li> <li><code>&lt;samp&gt;</code>: El texto corresponde a un mensaje de salida de un programa.</li> <li><code>&lt;code&gt;</code>: El texto corresponde a c\u00f3digo de programaci\u00f3n.</li> </ul> <p>Veamos un ejemplo de uso de varias de estas etiquetas:</p> <p> See the Pen    Untitled by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-1/#microdatos","title":"Microdatos","text":"<p>Los microdatos son una especificaci\u00f3n HTML que se emplea para anidar metadatos en el contenido existente de las p\u00e1ginas web, de manera que buscadores, bots y navegadores pueden extraer y procesar los microdatos a partir de una p\u00e1gina y utilizarlos para proveer una experiencia m\u00e1s enriquecida para los usuarios. Los buscadores se benefician considerablemente del acceso directo a estos datos estructurados, ya que les permite entender la informaci\u00f3n contenida en las p\u00e1ginas y ofrecer mejores resultados a sus usuarios.</p> <p>Los microdatos utilizan una serie de atributos en las etiquetas para describir tanto los elementos de datos como pares <code>nombre-valor</code> y as\u00ed establecer propiedades de los elementos de datos. Asi, dispondremos de atributos como itemscope para indicar un elemento de datos, itemprop para indicar una de sus propiedades o itemtype para indicar su tipo.</p> <p>En definitiva, los microdatos representan un intento de brindar una manera m\u00e1s sencilla de anotar elementos HTML con etiquetas legibles por m\u00e1quinas. Veamos un ejemplo:</p> <pre><code>&lt;div itemscope itemtype=\"http://schema.org/SoftwareApplication\"&gt;\n&lt;span itemprop=\"name\"&gt;Angry Birds&lt;/span&gt; -\n  REQUIRES &lt;span itemprop=\"operatingSystem\"&gt;ANDROID&lt;/span&gt;&lt;br&gt;\n&lt;link itemprop=\"applicationCategory\" href=\"http://schema.org/GameApplication\"/&gt;\n&lt;div itemprop=\"aggregateRating\" itemscope itemtype=\"http://schema.org/AggregateRating\"&gt;\n    RATING:\n    &lt;span itemprop=\"ratingValue\"&gt;4.6&lt;/span&gt; (\n    &lt;span itemprop=\"ratingCount\"&gt;8864&lt;/span&gt; ratings )\n  &lt;/div&gt;\n&lt;div itemprop=\"offers\" itemscope itemtype=\"http://schema.org/Offer\"&gt;\n    Price: $&lt;span itemprop=\"price\"&gt;1.00&lt;/span&gt;\n&lt;meta itemprop=\"priceCurrency\" content=\"USD\" /&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"tema_4/page-1/#propiedades-css-relacionadas-con-el-tipo-de-letra","title":"Propiedades CSS relacionadas con el tipo de letra","text":""},{"location":"tema_4/page-1/#font-family","title":"font-family","text":"<p>La propiedad b\u00e1sica que define CSS relacionada con la tipograf\u00eda se denomina <code>font-family</code> y se utiliza para indicar el tipo de letra con el que se muestra el texto.</p> Propiedad <code>font-family</code> Valores ((nombre_familia | familia_gen\u00e9rica) (,nombre_familia Se aplica a Todos los elementos Valor inicial Depende del navegador Heredada S\u00ed Descripci\u00f3n Establece el tipo de letra utilizado para el texto <p>El tipo de letra del texto se indica mediante una lista de fuentes separadas por coma, ordenadas por orden de preferencia, donde cada elemento de la lista puede ser:</p> <ul> <li>El nombre de una familia tipogr\u00e1fica, como por ejemplo \"Arial\", \"Verdana\", \"Garamond\", etc.</li> <li>El nombre gen\u00e9rico de una familia tipogr\u00e1fica segura para la web (web-safe fonts), que no se refieren a ninguna fuente en concreto, sino que informan al navegador que busque una tipograf\u00eda instalada en el sistema que pertenezca a dicha familia. Se utiliza normalmente como \u00faltimo elemento de la lista de fuentes, para que use como \u00faltimo caso.</li> </ul> <p>Las familias gen\u00e9ricas seguras para la web son:</p> <ul> <li><code>serif</code>: Tipograf\u00eda con \"serifa\". Por ejemplo Times New Roman.</li> <li><code>sans-serif</code>: Tipograf\u00eda sin \"serifa\" (tambi\u00e9n llamada palo seco). Por ejemplo Arial.</li> <li><code>cursive</code>: Tipograf\u00eda cursiva. Por ejemplo Comic Sans.</li> <li><code>fantasy</code>: Tipograf\u00eda decorativa. Por ejemplo Impact.</li> <li><code>monospace</code>: Tipograf\u00eda monoespaciada (todas los caracteres tienen el mismo ancho). Por ejemplo Courier New. Los navegadores muestran el texto de las p\u00e1ginas web utilizando los tipos de letra instalados en el ordenador o dispositivo del propio usuario. De esta forma, si el dise\u00f1ador indica en la propiedad <code>font-family</code> que el texto debe mostrarse con un tipo de letra especialmente raro o rebuscado, casi ning\u00fan usuario dispondr\u00e1 de ese tipo de letra.</li> </ul> <p>Para evitar el problema com\u00fan de que el usuario no tenga instalada la fuente que quiere utilizar el dise\u00f1ador, CSS permite indicar en la propiedad <code>font-family</code> m\u00e1s de un tipo de letra. El navegador probar\u00e1 en primer lugar con el primer tipo de letra indicado. Si el usuario la tiene instalada, el texto se muestra con ese tipo de letra. Si el usuario no dispone del primer tipo de letra indicado, el navegador ir\u00e1 probando con el resto de tipos de letra hasta que encuentre alguna fuente que est\u00e9 instalada en el ordenador del usuario.</p> <p>Evidentemente, el dise\u00f1ador no puede indicar para cada propiedad <code>font-family</code> tantos tipos de letra como posibles fuentes parecidas existan. Para solucionar este problema se utilizan las familias tipogr\u00e1ficas gen\u00e9ricas. Cuando la propiedad <code>font-family</code> toma un valor igual a sans-serif, el dise\u00f1ador no indica al navegador que debe utilizar la fuente Arial, sino que debe utilizar \"la fuente que m\u00e1s se parezca a Arial de todas las que tiene instaladas el usuario\".</p> <p>Por todo ello, el valor de <code>font-family</code> suele definirse como una lista de tipos de letra alternativos separados por comas. El \u00faltimo valor de la lista es el nombre de la familia tipogr\u00e1fica gen\u00e9rica que m\u00e1s se parece al tipo de letra que se quiere utilizar.</p> <p> </p> Figura 3 - Serif <p>Veamos unos ejemplos:</p> <pre><code>/* Si el nombre de la fuente contiene espacios en blanco,\n   debe encerrarse entre comillas */\nbody { font-family: Arial, Helvetica, sans-serif; }\nbody { font-family: \"Times New Roman\", Times, serif; }\nbody { font-family: \"Courier New\", Courier, monospace; }\nbody { font-family: Georgia, \"Times New Roman\", Times, serif; }\nbody { font-family: Verdana, Arial, Helvetica, sans-serif; }\n</code></pre> <p>Ya que las fuentes que se utilizan en la p\u00e1gina deben estar instaladas en el ordenador del usuario, cuando se quiere disponer de un dise\u00f1o complejo con fuentes muy especiales, se debe recurrir a soluciones alternativas. Una de las m\u00e1s usadas es utilizar Google Fonts, que corresponde a un repositorio de tipos de letras, en el que una vez seleccionada la fuente y la variante deseada se nos muestra informaci\u00f3n sobre los pasos necesarios para usarla en nuestra p\u00e1gina.</p> <p>Por ejemplo, si hemos seleccionado la fuente <code>Lato</code> en su variante <code>regular 400</code> en nuestro archivo HTML tendremos que introducir la siguiente etiqueta <code>&lt;link&gt;</code> dentro de <code>&lt;head&gt;</code>, y antes de la etiqueta <code>&lt;link&gt;</code> correspondiente a nuestro propio archivo CSS, para que sea importada cuando se muestre nuestra p\u00e1gina:</p> <pre><code>&lt;link href=\"https://fonts.googleapis.com/css?family=Lato\" rel=\"stylesheet\"&gt;\n</code></pre> <p>A partir de ese momento podremos hacer uso de dicha fuente en nuestro CSS de la misma forma que el resto de fuentes:</p> <pre><code>body { font-family: 'Lato', sans-serif; }\n</code></pre>"},{"location":"tema_4/page-1/#font-size","title":"font-size","text":"<p>La propiedad <code>font-size</code> nos permite establecer el tama\u00f1o de la letra.</p> Propiedad <code>font-size</code> Valores cte_tama\u00f1o_absoluto | cte_tama\u00f1o_relativo | unidad de medida | porcentaje | inherit Se aplica a Todos los elementos Valor inicial medium Heredada S\u00ed Descripci\u00f3n Establece el tama\u00f1o de la letra utilizado para el texto <p>CSS permite utilizar una serie de constantes para indicar el tama\u00f1o en esta propiedad:</p> <ul> <li>De tama\u00f1o absoluto: <code>xx-small</code>, <code>x-small</code>, <code>small</code>, <code>medium</code>, <code>large</code>, <code>x-large</code>, <code>xx-large</code>.</li> <li>De tama\u00f1o relativo: Toman como referencia el tama\u00f1o de letra del padre: <code>larger</code>, <code>smaller</code>.</li> </ul> <p>Veamos un ejemplo:</p> <pre><code>body { font-size: 1.2em; }\n</code></pre> <p>Por defecto, los navegadores establecen <code>16px</code> como tama\u00f1o de fuente base y asignan los siguientes tama\u00f1os a los t\u00edtulos de secci\u00f3n: <code>&lt;h1&gt;</code>: <code>xx-large</code>, <code>&lt;h2&gt;</code>: <code>x-large</code>, <code>&lt;h3&gt;</code>: <code>large</code>, <code>&lt;h4&gt;</code>: <code>medium</code>, <code>&lt;h5&gt;</code>: <code>small</code> y <code>&lt;h6&gt;</code>: <code>xx-small</code>.</p> <p>Tradicionalmente se ha indicado el tama\u00f1o del texto en la unidad <code>px</code> en el caso de p\u00e1ginas web y en la unidad <code>pt</code> (puntos) en el caso de documentos dise\u00f1ados para ser impresos.</p> <p>Tambi\u00e9n podemos usar unidades relativas, como <code>em</code> o en porcentaje (<code>%</code>). En ambos casos el tama\u00f1o se calcula respecto al tama\u00f1o de fuente del elemento padre de al que se le est\u00e1 aplicando.</p> <p>Una mejor alternativa es definir el tama\u00f1o de fuente del elemento ra\u00edz <code>&lt;html&gt;</code> y definir el tama\u00f1o fuente del resto de elemento respecto a \u00e9ste, usando para ello la unidad rem. En el siguiente ejemplo se define el tama\u00f1o base a <code>10px</code>, porque despu\u00e9s nos va a ser muy f\u00e1cil calcular mentalmente el resto de tama\u00f1os en <code>rem</code>. Por ejemplo:</p> <pre><code>html {\nfont-size: 10px;\n}\nh1 {\nfont-size: 3rem;\n}\n</code></pre> <p>En el ejemplo anterior los <code>&lt;h1&gt;</code> se mostrar\u00e1n con un tama\u00f1o de <code>30px</code>. Esta alternativa es mejor porque si despu\u00e9s queremos cambiar el tama\u00f1o de todos los textos tan s\u00f3lo tendremos que cambiar el tama\u00f1o de fuente del elemento <code>&lt;html&gt;</code>, ya que el resto es calculado relativo a \u00e9ste. Por ejemplo, si queremos que en dispositivos grandes el texto se vea m\u00e1s grande, tan s\u00f3lo tendremos que incluir una <code>media query</code> que modifique el tama\u00f1o de fuente de la etiqueta <code>&lt;html&gt;</code> para estos dispositivos.</p> <p>Sin embargo, el ejemplo anterior tiene un peque\u00f1o inconveniente: el tama\u00f1o de fuente no se ver\u00e1 modificado si el usuario cambia las preferencias de tama\u00f1o de texto en el navegador, ya que hemos establecido a una cantidad fija de p\u00edxeles el tama\u00f1o base. Por este motivo, se suele establecer el tama\u00f1o de fuente base del elemento <code>&lt;html&gt;</code> al valor <code>62.5%</code>, proveniente de dividir el tama\u00f1o base deseado, <code>10px</code>, entre el tama\u00f1o base asignado por los navegadores <code>16px</code> y multiplicarlo por <code>100</code>, esto es <code>100 * 10px/16px = 62.5</code>. De esta manera los c\u00e1lculos para el resto de elemento seguir\u00e1n haci\u00e9ndose en base a <code>10px</code>, pero cuando el usuario cambie el tama\u00f1o base en el navegador, el tama\u00f1o de fuente de la etiqueta <code>&lt;html&gt;</code> se ver\u00e1n afectado y como consecuencia el del resto de elementos. As\u00ed el ejemplo anterior quedar\u00eda como:</p> <pre><code>html {\nfont-size: 62.5%;\n}\nh1 {\nfont-size: 3rem;\n}\n</code></pre> <p>Otra alternativa es la conocida como tipograf\u00eda fluida, consistente en usar alguna unidad relativa al viewport, como <code>vw</code>, para definir el tama\u00f1o de fuente del elemento html y definir el tama\u00f1o de fuente del resto de elementos usando <code>rem</code>. De esta manera, el tama\u00f1o de letra de todos los elementos depender\u00e1n del tama\u00f1o de la anchura del viewport del dispositivo. El ejemplo anterior quedar\u00eda de la siguiente manera:</p> <pre><code>html {\nfont-size: 2vw;\n}\nh1 {\nfont-size: 3rem;\n}\n</code></pre> <p>Debemos fijarnos en que NO existen (a\u00fan) las propiedades <code>min-font-size</code> y <code>max-font-size</code> por lo que trabajar con tama\u00f1os de fuentes especificadas en <code>vh</code> o <code>vw</code> puede hacer que la letra quede demasiado peque\u00f1a o demasiado grande en determinados tama\u00f1os de pantalla. En ese caso deberemos usar <code>media queries</code> para cambiar el tama\u00f1o base de la etiqueta <code>&lt;html&gt;</code> en determinados tama\u00f1os de viewport de dispositivo. Para saber sobre este aspecto se recomienda leer el siguiente art\u00edculo sobre tipograf\u00eda fluida.</p>"},{"location":"tema_4/page-1/#font-weight","title":"font-weight","text":"<p>La propiedad <code>font-weight</code> nos permite especificar el grosor de la letra.</p> Propiedad <code>font-weight</code> Valores normal | bold | bolder |lighter | 100 | 200 | 300 | 400 | 500 | 600 |700 | 800 | 900 | inherit Se aplica a Todos los elementos Valor inicial normal Heredada S\u00ed Descripci\u00f3n Establece la anchura de la letra utilizada para el texto <p>Veamos un ejemplo:</p> <pre><code>h1 { font-weight: bold; }\n</code></pre> <p>Los valores que normalmente se utilizan son <code>normal</code> (el valor por defecto) y <code>bold</code> para los textos en negrita. El valor normal equivale al valor num\u00e9rico 400 y el valor bold al valor num\u00e9rico 700.</p>"},{"location":"tema_4/page-1/#font-style","title":"font-style","text":"<p>La propiedad <code>font-style</code> nos permite especificar el estilo de la letra.</p> Propiedad <code>font-style</code> Valores normal | italic | oblique |  inherit Se aplica a Todos los elementos Valor inicial normal Heredada S\u00ed Descripci\u00f3n Establece el estilo de la letra utilizada para el texto <p>Veamos un ejemplo:</p> <pre><code>h2 { font-style: italic; }\n</code></pre> <p>Normalmente la propiedad <code>font-style</code> se emplea para mostrar un texto en cursiva mediante el valor <code>italic</code>. El valor <code>oblique</code> hace que la letra quede a\u00fan m\u00e1s tumbada que con <code>italic</code>.</p>"},{"location":"tema_4/page-1/#font-variant","title":"font-variant","text":"<p>La propiedad <code>font-variant</code> permite establecer que la letra se muestre con la variante de letra versal (may\u00fasculas peque\u00f1as).</p> Propiedad <code>font-variant</code> Valores normal | small-caps | inherit Se aplica a Todos los elementos Valor inicial normal Heredada S\u00ed Descripci\u00f3n Establece el estilo alternativo de la letra utilizada para el texto <p>Veamos un ejemplo:</p> <pre><code>h3 { font-variant: small-caps; }\n</code></pre> <p>La propiedad <code>font-variant</code> no se suele emplear habitualmente.</p>"},{"location":"tema_4/page-1/#font-stretch","title":"font-stretch","text":"<p>Si hemos establecido como tipo de letra una fuente que tenga varios estilos, en ingl\u00e9s faces (delgada, normal, condensada, gruesa, etc.) podemos usar la propiedad <code>font-stretch</code> para indicar si la letra debe aparecer expandida, condensada, etc. Atendiendo al valor especificado el navegador usar\u00e1 el mejor estilo disponible.</p> Propiedad <code>font-stretch</code> Valores normal | wider | narrower | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded | inherit Se aplica a Todos los elementos Valor inicial normal Heredada S\u00ed Descripci\u00f3n Establece el estilo (face) de la letra utilizada para el texto <p>Veamos un ejemplo:</p> <pre><code>p { font-stretch: ultra-expanded; }\n</code></pre>"},{"location":"tema_4/page-1/#font-size-adjust","title":"font-size-adjust","text":"<p>La propiedad <code>font-size-adjust</code> permite ajustar la altura (x-height) de la letra para hacerla m\u00e1s legible, ya que para un determinado tama\u00f1o de letra, algunas fuentes son m\u00e1s dif\u00edciles de leer que otras. Esto es especialmente importante si el tipo de letra no est\u00e1 disponible y se usa el siguiente tipo de letra especificado en <code>font-family</code> y \u00e9ste tiene un ratio de aspecto diferente que hace que se lea peor.</p> Propiedad <code>font-size-adjust</code> Valores none | inherit Se aplica a Todos los elementos Valor inicial none Heredada S\u00ed Descripci\u00f3n Ajusta la proporci\u00f3n de altura de la fuente <p>Veamos un ejemplo:</p> <pre><code>p {\nfont: 12px Verdana, Helvetica, sans-serif;\nfont-size-adjust: 0.58;\n}\n</code></pre> <p>Esta propiedad no es soportada a\u00fan por la mayor\u00eda de los navegadores actuales.</p>"},{"location":"tema_4/page-1/#font","title":"font","text":"<p>CSS proporciona una propiedad tipo atajo (shorthand) denominada <code>font</code> que permite indicar de una sola vez los valores de algunas de las propiedades relacionadas con la letra.</p> Propiedad <code>font</code> Valores (( font-style | font-variant | font-weight)? font-size (/line-height)? font-family) | caption | icon | menu | message-box | small-caption | status-bar | inherit Se aplica a Todos los elementos Valor inicial - Heredada S\u00ed Descripci\u00f3n Establece de una vez los valores de algunas de las propiedades para el tipo de letra <p>El orden en el que se deben indicar las propiedades del texto es el siguiente:</p> <ul> <li>En primer lugar y de forma opcional se indican el <code>font-style</code>, <code>font-variant</code> y <code>font-weight</code> en cualquier orden.</li> <li>A continuaci\u00f3n, se indica obligatoriamente el valor de <code>font-size</code> seguido opcionalmente por el valor de <code>line-height</code> (no lo hemos visto a\u00fan).</li> <li>Por \u00faltimo, se indica obligatoriamente el <code>font-family</code> a utilizar.</li> </ul> <p> See the Pen    font by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-1/#propiedad-css-relacionadas-con-el-texto","title":"Propiedad CSS relacionadas con el texto","text":""},{"location":"tema_4/page-1/#color","title":"color","text":"<p>El atributo <code>color</code> se usa para establecer el color de la letra.</p> Propiedad <code>color</code> Valores color | inherit Se aplica a Todos los elementos Valor inicial Depende del navegador Heredada S\u00ed Descripci\u00f3n Establece el color de la letra utilizado para el texto <p>Veamos algunos ejemplos:</p> <pre><code>p { color: black; }\np { color: #B1251E; }\np { color: rgba(255, 0, 0, 0.3); }\n</code></pre>"},{"location":"tema_4/page-1/#line-height","title":"line-height","text":"<p>La propiedad <code>line-height</code> permite controlar la altura ocupada por las l\u00edneas de texto de un elemento. La diferencia entre la altura de l\u00ednea y la altura correspondiente al tama\u00f1o de la fuente determinar\u00e1 por tanto el interlineado entre l\u00edneas.</p> Propiedad <code>line-height</code> Valores medida Se aplica a Todos los elementos Valor inicial normal Heredada S\u00ed Descripci\u00f3n Permite establecer la altura de l\u00ednea de los elementos <p>Adem\u00e1s de todas las unidades de medida y el uso de porcentajes, la propiedad <code>line-height</code> permite indicar un n\u00famero sin unidades que se interpreta como el m\u00faltiplo del tama\u00f1o de letra del elemento. Por tanto, estas tres reglas CSS son equivalentes:</p> <pre><code>p { line-height: 1.2; font-size: 1em; }\np { line-height: 1.2em; font-size: 1em; }\np { line-height: 120%; font-size: 1em; }\n</code></pre> <p>Siempre que se utilice de forma moderada, el interlineado mejora notablemente la legibilidad de un texto.</p> <p> See the Pen    line-height by irubenboy (@irubenboy)   on CodePen. </p> <p>Un aspecto importante que debemos tener en cuenta es que el texto de la l\u00ednea siempre se centra verticalmente respecto a la altura de l\u00ednea especificada con <code>line-height</code>. Esto hace que una de las t\u00e9cnicas para central verticalmente una \u00fanica l\u00ednea de texto dentro de una caja sea simplemente hacer que el valor de <code>line-height</code> sea el mismo que el de la altura de la caja. Por ejemplo:</p> <p> See the Pen    center w/ line-height by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-1/#text-align","title":"text-align","text":"<p>La propiedad <code>text-align</code> permite alinear el texto, dentro de un elemento, a su izquierda o derecha, centrada o justificado (ocupando todo el ancho posible).</p> Propiedad <code>text-align</code> Valores left | right | center | justify | inherit Se aplica a Elementos de bloque y celdas de tabla Valor inicial left Heredada S\u00ed Descripci\u00f3n Establece la alineaci\u00f3n del contenido del elemento <p>La propiedad <code>text-align</code> no s\u00f3lo alinea el texto que contiene un elemento, sino que tambi\u00e9n alinea todos sus contenidos, como por ejemplo las im\u00e1genes.</p> <p>Muy relacionada con esta propiedad tenemos <code>text-align-last</code>, que indica la alineaci\u00f3n de la \u00faltima l\u00ednea cuando <code>text-align</code> tiene el valor <code>justify</code>.</p> Propiedad <code>text-align-last</code> Valores auto | start | end | left | right | center | justify Se aplica a Elementos de bloque Valor inicial auto Heredada S\u00ed Descripci\u00f3n Establece la alineaci\u00f3n de la \u00faltima l\u00ednea de un contenido justificado <p>Veamos un ejemplo:</p> <p> See the Pen    text-align by irubenboy (@irubenboy)   on CodePen. </p> <p>CSS3 tambi\u00e9n define la propiedad <code>text-justify</code> que permite indicar el m\u00e9todo que debe seguirse para justificar el texto cuando <code>text-align</code> tiene el valor <code>justify</code>. Esta propiedad a\u00fan no es soportada por casi ning\u00fan navegador.</p> Propiedad <code>text-justify</code> Valores auto | none | inter-word | inter-character Se aplica a Elementos de bloque Valor inicial auto Heredada S\u00ed Descripci\u00f3n Establece el m\u00e9todo de justificaci\u00f3n a usar cuando text-align se ha establecido al valor <code>justify</code>"},{"location":"tema_4/page-1/#text-indent","title":"text-indent","text":"<p>En muchas publicaciones impresas suele ser habitual tabular la primera l\u00ednea de cada p\u00e1rrafo para facilitar su lectura. CSS permite controlar esta tabulaci\u00f3n mediante la propiedad <code>text-indent</code>.</p> Propiedad <code>text-indent</code> Valores unidad de medida | porcentaje | inherit Se aplica a Elementos de bloque y celdas de tabla Valor inicial 0 Heredada S\u00ed Descripci\u00f3n Establece una sangr\u00eda francesa (desde la izquierda a la primera l\u00ednea) del texto original <p>Veamos un ejemplo:</p> <p> See the Pen    text-indent by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-1/#text-decoration","title":"text-decoration","text":"<p>La propiedad <code>text-decoration</code> decora el texto con una l\u00ednea.</p> Propiedad <code>text-decoration</code> Valores none | ( underline | overline | line-through ) | inherit Se aplica a Todos los elementos Valor inicial none Heredada NO Descripci\u00f3n Establece la decoraci\u00f3n del texto (subrayado, tachado, etc.) <p>Veamos un ejemplo:</p> <p> See the Pen    text-decoration by irubenboy (@irubenboy)   on CodePen. </p> <p>CSS3 ha convertido la propiedad <code>text-decoration</code> en una propiedad atajo (shorthand) de una serie de propiedades que permiten detallar la decoraci\u00f3n que se realiza sobre el texto:</p> <ul> <li><code>text-decoration-color</code>: Color de la l\u00ednea de decoraci\u00f3n.</li> <li><code>text-decoration-line</code>: Posici\u00f3n de la l\u00ednea de decoraci\u00f3n: <code>underline</code> (por debajo), <code>line-through</code> (atravesando el texto), <code>overline</code> (por encima).</li> <li><code>text-decoration-style</code>: Estilo de la l\u00ednea de decoraci\u00f3n: <code>solid</code> (continua), <code>double</code> (continua doble), <code>dotted</code> (punteada), <code>dashed</code> (con guiones), <code>wavy</code> (ondulada).</li> <li><code>text-decoration-skip</code>: Qu\u00e9 partes del texto NO deben verse afectadas por la l\u00ednea de decoraci\u00f3n.</li> <li><code>text-underline-position</code>: Separaci\u00f3n de la l\u00ednea de decoraci\u00f3n. Actualmente estas propiedades no son soportadas por la mayor\u00eda de los navegadores.</li> </ul>"},{"location":"tema_4/page-1/#text-transform","title":"text-transform","text":"<p>La propiedad <code>text-transform</code> permite mostrar el texto original transformado en un texto completamente en may\u00fasculas (uppercase), en min\u00fasculas (lowercase) o con la primera letra de cada palabra en may\u00fascula (capitalize).</p> Propiedad <code>text-transform</code> Valores capitalize | uppercase | lowercase | none | inherit Se aplica a Todos los elementos Valor inicial none Heredada S\u00ed Descripci\u00f3n Transforma el texto original (lo transforma en may\u00fascula, a min\u00fascula, etc.) <p> See the Pen    text-transform by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-1/#direction-y-unicode-bidi","title":"direction y unicode-bidi","text":"<p>La propiedad <code>direction</code> permite especificar la direcci\u00f3n en la que se debe escribir el texto: <code>ltr</code> (de izquierda a derecha, left to right) o <code>rtl</code> (de derecha a izquierda, right to left).</p> Propiedad <code>direction</code> Valores ltr | rtl | inherit Se aplica a Todos los elementos Valor inicial ltr Heredada S\u00ed Descripci\u00f3n Espec\u00edfica la direcci\u00f3n del texto <p>Esta propiedad se utiliza a menudo en conjunci\u00f3n con la propiedad <code>unicode-bidi</code>, que permite que la letras se muestren en espejo de derecha a izquierda. Su valor m\u00e1s importante es <code>bidi-override</code>. Es una propiedad que no se hereda por defecto.</p> <p> See the Pen    direction by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-1/#letter-spacing-y-word-spacing","title":"letter-spacing y word-spacing","text":"<p>CSS tambi\u00e9n permite controlar la separaci\u00f3n entre las letras que forman las palabras y la separaci\u00f3n entre las palabras que forman los textos.</p> <p>La propiedad que controla la separaci\u00f3n entre letras se llama <code>letter-spacing</code>.</p> Propiedad <code>letter-spacing</code> Valores normal | unidad de medida | inherit Se aplica a Todos los elementos Valor inicial normal Heredada S\u00ed Descripci\u00f3n Permite establecer el espacio entre las letras que forman las palabras del texto <p>La separaci\u00f3n entre palabras se controla mediante <code>word-spacing</code></p> Propiedad <code>word-spacing</code> Valores normal | unidad de medida | inherit Se aplica a Todos los elementos Valor inicial normal Heredada S\u00ed Descripci\u00f3n Permite establecer el espacio entre las palabras que forman el texto <p>Veamos un ejemplo:</p> <p> See the Pen    letter-spacing vs word-spacing by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-1/#text-shadow","title":"text-shadow","text":"<p>La propiedad <code>text-shadow</code> se usa para aplicar sombras, sombras descendientes, brillo externo y otros efectos de sombra al texto.</p> Propiedad <code>text-shadow</code> Valores (despl_eje_x despl_eje_y radio_desenfoque color) |none | inherit Se aplica a Todos los elementos Valor inicial none Heredada S\u00ed Descripci\u00f3n Permite establecer la sombra del texto <p>Los dos primeros par\u00e1metros, desplazamiento en el eje x y desplazamiento en el eje y, son obligatorios. Si no se especifica color se usa el valor de la propiedad <code>color</code> (incluso aunque sea heredada).</p> <p>Para establecer la sombra hacia la izquierda y/o hacia arriba se usar\u00e1n valores negativos para el desplazamiento en el eje x y en el eje y respectivamente.</p> <p>Podemos establecer varias sombras para el texto, separ\u00e1ndolas con el car\u00e1cter <code>,</code> (coma).</p> <p>Usando varias sombras podemos crear efectos muy interesantes, como texto con contorno, texto que resplandece, texto borroso o texto que simula estar en tres dimensiones.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    text-shadow by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-1/#espacios-en-blanco-saltos-de-linea-tabuladores-y-wrapping","title":"Espacios en blanco, saltos de l\u00ednea, tabuladores y wrapping","text":"<p>El aspecto m\u00e1s sorprendente del lenguaje HTML cuando se desarrollan los primeros documentos es el tratamiento especial de los \"espacios en blanco\" del texto. HTML considera espacio en blanco a los espacios en blanco, los tabuladores, los retornos de carro y el car\u00e1cter de nueva l\u00ednea (++ENTER++ o ++Intro++).</p> <p> See the Pen    HTML spaces by irubenboy (@irubenboy)   on CodePen. </p> <p>Los dos p\u00e1rrafos del ejemplo anterior se ven id\u00e9nticos, aunque el segundo p\u00e1rrafo incluye varios espacios en blanco y est\u00e1 escrito en varias l\u00edneas diferentes. La raz\u00f3n de este comportamiento es que HTML ignora todos los espacios en blanco sobrantes, es decir, todos los espacios en blanco que no son el espacio en blanco que separa las palabras.</p> <p>No obstante, HTML proporciona varias alternativas para poder incluir tantos espacios en blanco y tantas nuevas l\u00edneas como sean necesarias dentro del contenido textual de las p\u00e1ginas.</p>"},{"location":"tema_4/page-1/#etiqueta-br","title":"Etiqueta br","text":"<p>Para incluir una nueva l\u00ednea en un punto y forzar a que el texto que sigue se muestre en la l\u00ednea inferior, se utiliza la etiqueta <code>&lt;br/&gt;</code>. En cierta manera, insertar la etiqueta <code>&lt;br/&gt;</code> en un determinado punto del texto equivale a presionar la tecla ++ENTER++ (o ++Intro++) en ese mismo punto. Se trata de un elemento en l\u00ednea que no posee etiqueta de cierre.</p> <p>Utilizando la etiqueta <code>&lt;br/&gt;</code> se puede rehacer el ejemplo anterior para que respete las l\u00edneas que forman el segundo p\u00e1rrafo. Por ejemplo:</p> <p> See the Pen    br by irubenboy (@irubenboy)   on CodePen. </p> <p>Un aspecto importante del elemento <code>&lt;br/&gt;</code> es que pr\u00e1cticamente no podemos darle un estilo concreto desde CSS, corresponde a un simple salto de l\u00ednea.</p>"},{"location":"tema_4/page-1/#caracter-nbsp","title":"Car\u00e1cter <code>&amp;nbsp;</code>","text":"<p>Para incluir espacios en blanco adicionales, se debe sustituir cada nuevo espacio en blanco por el texto <code>&amp;nbsp;</code> (de non-breaking space). No debemos olvidar incluir el s\u00edmbolo &amp; del principio y el s\u00edmbolo <code>;</code> del final.</p> <p>As\u00ed, el c\u00f3digo HTML del ejemplo anterior se debe rehacer para incluir los espacios en blanco adicionales:</p> <pre><code>&lt;p&gt;Este primer p\u00e1rrafo no contiene saltos de l\u00ednea ni otro tipo de espaciado.&lt;/p&gt; \n&lt;p&gt;Este segundo p\u00e1rrafo s\u00ed que contiene saltos&lt;br /&gt;\n  de&lt;br /&gt;\n  l\u00ednea&lt;br /&gt;\n  y &amp;nbsp;&amp;nbsp; otro &amp;nbsp; tipo &amp;nbsp; de &amp;nbsp; espaciado.&lt;/p&gt;\n</code></pre>"},{"location":"tema_4/page-1/#etiqueta-brw","title":"Etiqueta brw","text":"<p>Cuando debemos escribir un texto y tenemos disponible un \u00e1rea de visualizaci\u00f3n con un ancho determinado es muy posible que dicho texto no quepa en una \u00fanica l\u00ednea. Se conoce como line wrap o word wrap a la t\u00e9cnica de continuar el texto en una nueva l\u00ednea cuando la anterior est\u00e1 completa, de manera que cada l\u00ednea quepa en el \u00e1rea de visualizaci\u00f3n, permitiendo que el texto pueda leerse de arriba a abajo si tener que hacer scroll horizontal.</p> <p>El comportamiento por defecto de esta t\u00e9cnica es intentar no romper ninguna palabra por la mitad, sino usar los espacios en blanco y otros caracteres de puntuaci\u00f3n para para determinar donde termina una palabra, de manera que si la siguiente palabra del texto no entra en la l\u00ednea actual, se crea una nueva l\u00ednea y se escribe en ella dicha palabra.</p> <p>Sin embargo, cuando tenemos palabras muy largas o largas cadenas de texto sin espacios en blanco, el efecto visual de esta t\u00e9cnica puede no ser el adecuado, ya que puede ocurrir que al no caber la palabra muy larga se cree una nueva l\u00ednea y la l\u00ednea anterior quede muy vac\u00eda.</p> <p>Para estos casos HTML proporciona la etiqueta <code>&lt;wbr/&gt;</code> (de word break), que se inserta entre los caracteres de la palabra larga para indicar un posici\u00f3n que puede usarse si es necesario para partir la palabra en dos l\u00edneas.</p> <p>A diferencia de <code>&lt;br/&gt;</code>, la etiqueta <code>&lt;wbr/&gt;</code> no obliga a hacer un salto de l\u00ednea, s\u00f3lo sugiere una posici\u00f3n id\u00f3nea para hacerlo si es necesario.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    wbr by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-1/#etiqueta-pre","title":"Etiqueta pre","text":"<p>En ocasiones, es necesario mostrar los espacios en blanco, tabuladores y saltos de l\u00ednea de un texto tal y como aparecen en \u00e9l. Se trata de un caso habitual cuando una p\u00e1gina web debe mostrar directamente el texto generado por alguna aplicaci\u00f3n.</p> <p>En estos casos, se puede utiliza la etiqueta <code>&lt;pre&gt;</code>, que muestra el texto tal y como se ha escrito, respetando todos los espacios en blanco y todas las nuevas l\u00edneas. Se trata de un elemento en bloque. Veamos un ejemplo:</p> <pre><code>&lt;pre&gt;\n        La etiqueta pre\n   respeta los espacios en blanco,                    no hace word wrapping\n      y\n muestra el texto\n     tal y como\n   est\u00e1 escrito\n&lt;/pre&gt;\n&lt;p&gt;\n        La etiqueta pre\n   respeta los espacios en blanco,                    no hace word wrapping\n      y\n muestra el texto\n     tal y como\n   est\u00e1 escrito\n&lt;/p&gt;\n</code></pre> <p>El primer texto se ve en pantalla tal y como se ha escrito, respetando todos los espacios en blanco y todas las nuevas l\u00edneas. El segundo texto se ve como un p\u00e1rrafo normal, ya que HTML ha eliminado todos los espacios en blanco sobrantes.</p> <p>Los elementos <code>&lt;pre&gt;</code> son especiales, ya que los navegadores les aplican las siguientes reglas:</p> <ul> <li>Mantienen todos los espacios en blanco (tabuladores, espacios y nuevas l\u00edneas)</li> <li>Por defecto, el navegador muestra el texto con un tipo de letra especial, denominado \"de ancho fijo\", ya que todas sus letras son de la misma anchura</li> <li>No se ajusta la longitud de las l\u00edneas, es decir, se hace word wrapping, por lo que las l\u00edneas largas producen un scroll horizontal en la ventana del navegador.</li> </ul>"},{"location":"tema_4/page-1/#propiedades-css-relacionadas-con-espacios-en-blanco-tabulaciones-saltos-de-linea-y-wrapping","title":"Propiedades CSS relacionadas con espacios en blanco, tabulaciones, saltos de l\u00ednea y wrapping","text":""},{"location":"tema_4/page-1/#white-space","title":"white-space","text":"<p>CSS permite controlar el tratamiento de los espacios en blanco de los textos mediante la propiedad <code>white-space</code>.</p> Propiedad <code>white-space</code> Valores normal | pre | nowrap | pre-wrap | pre-line | inherit Se aplica a Todos los elementos Valor inicial normal Heredada S\u00ed Descripci\u00f3n Establece el tratamiento de los espacios en blanco del texto <p>El significado de cada uno de los valores es el siguiente:</p> <ul> <li><code>normal</code>: comportamiento por defecto de HTML.</li> <li><code>pre</code>: se respetan los espacios en blanco y las nuevas l\u00edneas (exactamente igual que la etiqueta <code>&lt;pre&gt;</code>). Si la l\u00ednea es muy larga, se sale del espacio asignado para ese contenido.</li> <li><code>nowrap</code>: elimina los espacios en blanco y las nuevas l\u00edneas. Si la l\u00ednea es muy larga, se sale del espacio asignado para ese contenido.</li> <li><code>pre-wrap</code>: se respetan los espacios en blanco y las nuevas l\u00edneas, pero ajustando cada l\u00ednea al espacio asignado para ese contenido.</li> <li><code>pre-line</code>: elimina los espacios en blanco y respeta las nuevas l\u00edneas, pero ajustando cada l\u00ednea al espacio asignado para ese contenido.</li> </ul> <p>En la siguiente tabla se resumen las caracter\u00edsticas de cada valor:</p> Valor Respeta los espacios en blanco Respeta saltos de l\u00ednea Ajusta las l\u00ednea normal no no s\u00ed pre s\u00ed s\u00ed no nowrap no no no pre-wrap s\u00ed s\u00ed s\u00ed pre-line no s\u00ed s\u00ed <p>Veamos un ejemplo:</p> <p> See the Pen    white-space by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-1/#tab-size","title":"tab-size","text":"<p>La propiedad <code>tab-size</code> permite especificar el espacio que ocupa el car\u00e1cter tabulador (unicode <code>U+0020</code>). S\u00f3lo tiene efecto cuando se debe mostrar en un elemento cuya propiedad <code>white-space</code> tiene el valor <code>pre</code> o <code>pre-wrap</code>. El valor recibido corresponde al n\u00famero de caracteres espacio en blanco con lo que va a representarse el tabulador.</p> Propiedad <code>tab-size</code> Valores Se aplica a Todos los elementos Valor inicial 8 Heredada S\u00ed Descripci\u00f3n Establece el n\u00famero de caracteres con tratamiento de los espacios en blanco del texto <p>Veamos un ejemplo:</p> <p> See the Pen    tab-size by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-1/#word-wrap-overflow-wrap-y-word-break","title":"word-wrap, overflow-wrap y word-break","text":"<p>Las propiedades <code>word-wrap</code> y <code>overflow-wrap</code> son en realidad dos nombres distintos para la misma propiedad.Se usa para especificar si para prevenir el overflow (cuando una palabra no cabe en su caja) se desea forzar la ruptura en un punto arbitrario de palabras que no se pueden romper naturalmente.</p> <p>Estas propiedades solo tienen efecto cuando la propiedad <code>white-space</code> tiene un valor que permite el wrapping.</p> Propiedad <code>word-wrap</code> / <code>overflow-wrap</code> Valores normal | break-word Se aplica a Elementos en bloque Valor inicial normal Heredada S\u00ed Descripci\u00f3n Establece si se debe forzar la ruptura de palabras en puntos arbitrarios <p>La propiedad <code>word-break</code> permite, por su parte, establecer la estrategia a seguir para la ruptura de palabras por el wrapping.</p> Propiedad <code>word-break</code> Valores normal | break-all | keep-all Se aplica a Todos los elementos Valor inicial normal Heredada S\u00ed Descripci\u00f3n Establece la estrategia de ruptura de palabras por el wrapping <p>Los valores posibles son:</p> <ul> <li><code>normal</code>: Usa las reglas por defecto para la ruptura de palabras.</li> <li><code>break-all</code>: Se puede romper la palabra en cualquier letra.</li> <li><code>keep-all</code>: En los idiomas chino, japon\u00e9s y coreano no se pueden romper las palabras. Para otros idiomas, el valor es igual que <code>normal</code>. El empleo de esta propiedad puede producir rupturas en posiciones no adecuadas.</li> </ul>"},{"location":"tema_4/page-1/#hyphens","title":"hyphens","text":"<p>La propiedad <code>hyphens</code> se usa para que al hacer wrapping se rompa autom\u00e1ticamente la palabra en una posici\u00f3n adecuada, atendiendo a las reglas del idioma correspondiente.</p> Propiedad <code>hyphens</code> Valores none Se aplica a Todos los elementos Valor inicial normal Descripci\u00f3n Establece la estrategia de ruptura de palabras por el wrapping <p>Los valores posibles son:</p> <ul> <li><code>none</code>: La palabras nunca son rotas, incluso aunque contengan caracteres que sugieran que es esa es una posici\u00f3n adecuada para partir la palabra.</li> <li><code>manual</code>: Las palabras s\u00f3lo pueden romperse (y a\u00f1adir el guion) en las posiciones marcadas con caracteres especiales de posibilidad de ruptura:<ul> <li><code>U+2010</code> (hyphen): que es visible con un -.</li> <li><code>U+00AD</code> (shy, soft hyphen): que es invisible. En HTML se usa el car\u00e1cter <code>&amp;shy;</code></li> </ul> </li> <li><code>auto</code>: Las palabras se podr\u00e1n romper s\u00f3lo en posiciones adecuadas, atendiendo a las reglas del idioma correspondiente, que debe ser soportado por el navegador. Para que funcione correctamente es necesarios que especifiquemos el idioma en la p\u00e1gina mediante el atributo <code>lang</code> de la etiqueta <code>&lt;html&gt;</code>. Actualmente, esta propiedad NO es soportada por Chrome, aunque s\u00ed por Firefox y por Safari (usando el prefijo <code>-webkit-</code>).</li> </ul>"},{"location":"tema_4/page-1/#text-overflow","title":"text-overflow","text":"<p>La propiedad <code>text-overflow</code> especifica c\u00f3mo debe tratarse el texto cuando es recortado debido a que es m\u00e1s largo que el bloque que lo contiene, de manera que se muestre una elipsis (<code>...</code>). S\u00f3lo funciona cuando el texto tiene una \u00fanica l\u00ednea.</p> Propiedad <code>text-overflow</code> Valores clip | ellipsis Se aplica a Todos los elementos Valor inicial clip Descripci\u00f3n Establece c\u00f3mo se recorta el texto cuando no cabe en la l\u00ednea <p>El valor <code>clip</code> simplemente recorta el texto, mientras que el valor <code>ellipsis</code> a\u00f1ade puntos suspensivos.</p> <p> See the Pen    text-overflow by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-1/#pseudoelementos-first-letter-y-first-line","title":"Pseudoelementos :first-letter y :first-line","text":"<p>El pseudoelemento <code>:first-letter</code> permite seleccionar la primera letra del elemento para aplicarle el estilo deseado. El pseudoelemento <code>:fist-line</code> permite selecciona la primera l\u00ednea de texto del elemento.</p> <p> See the Pen    :first-letter and :first-line by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-2/","title":"2 Enlaces","text":""},{"location":"tema_4/page-2/#introduccion","title":"Introducci\u00f3n","text":"<p>La incorporaci\u00f3n del hipertexto fue una de las claves del \u00e9xito del lenguaje HTML, ya que permiti\u00f3 crear documentos interactivos que proporcionan informaci\u00f3n adicional cuando se solicita. El elemento principal del hipertexto es el hiperenlace, tambi\u00e9n llamado enlace web o simplemente enlace.</p> <p>Los enlaces se utilizan para establecer relaciones entre dos recursos. Aunque la mayor\u00eda de enlaces relacionan p\u00e1ginas web, tambi\u00e9n es posible enlazar otros recursos como im\u00e1genes, documentos y archivos.</p>"},{"location":"tema_4/page-2/#url","title":"URL","text":"<p>El acr\u00f3nimo URL (del ingl\u00e9s Uniform Resource Locator) hace referencia al identificador \u00fanico de cada recurso disponible en Internet. Las URL son esenciales para crear los enlaces, pero tambi\u00e9n se utilizan en otros elementos HTML como las im\u00e1genes y los formularios.</p> <p>La URL de un recurso tiene dos objetivos principales:</p> <ul> <li>Identificar de forma \u00fanica a ese recurso.</li> <li>Permitir localizar de forma eficiente ese recurso.</li> </ul> <p>Una URL sencilla siempre est\u00e1 formada por las mismas partes. Por ejemplo, la <code>http://www.alistapart.com/comments/webstandards2008?page=5#42</code> tiene las siguientes partes:</p> <ul> <li>Protocolo (<code>http://</code>)</li> <li>Servidor (<code>www.alistapart.com</code>)</li> <li>Ruta (<code>/comments/webstandards2008</code>)</li> <li>Consulta (<code>?page=5</code>): informaci\u00f3n adicional necesaria para que el servidor localice correctamente el recurso que se quiere acceder. Siempre comienza con el car\u00e1cter <code>?</code> y contiene una sucesi\u00f3n de palabras separadas por <code>=</code> y <code>&amp;</code></li> <li>Ancla (<code>#42</code>): permite que el navegador se posicione autom\u00e1ticamente en una determinada posici\u00f3n de la p\u00e1gina web. Siempre comienza con el car\u00e1cter <code>#</code>. Como las URL utilizan los caracteres <code>:</code>, <code>=</code>, <code>&amp;</code> y <code>/</code> para separar sus partes, estos caracteres est\u00e1n reservados y no se pueden utilizar libremente. Adem\u00e1s, algunos caracteres no est\u00e1n reservados pero pueden ser problem\u00e1ticos si se utilizan en la propia URL.</li> </ul> <p>Si es necesario incluir estos caracteres reservados y especiales en una URL, se sustituyen por combinaciones de caracteres seguros. Esta sustituci\u00f3n se denomina codificaci\u00f3n de caracteres y el servidor realiza el proceso inverso (decodificaci\u00f3n) cuando le llega una URL con los caracteres codificados.</p> <p>A continuaci\u00f3n se muestra la tabla para codificar los caracteres m\u00e1s comunes:</p> Car\u00e1cter original Car\u00e1cter codificado Car\u00e1cter original Car\u00e1cter codificado / %2F ? %3F : %3A @ %40 = %3D &amp; %26 \" %22 \\ %5C ' %60 ~ %7E (espacio en blanco) %20 # %23 <p>Por otra parte, aunque desde hace tiempo ya es posible incluir en las URL caracteres de otros idiomas que no sean el ingl\u00e9s, a\u00fan no es completamente seguro utilizar estos caracteres en las URL. Si se utilizan letras como \u00f1, \u00e1, \u00e9 o \u00e7, es posible que algunos navegadores no las interpreten de forma correcta.</p> <p>La soluci\u00f3n consiste en codificar todos los caracteres que no existen en ingl\u00e9s. La siguiente tabla muestra la codificaci\u00f3n de los caracteres m\u00e1s utilizados:</p> Car\u00e1cter original Car\u00e1cter codificado Car\u00e1cter original Car\u00e1cter codificado \u00f1 %F1 \u00d1 %D1 \u00e1 %E1 \u00c1 %C1 \u00e9 %E9 \u00c9 %C9 \u00ed %ED \u00cd %CD \u00f3 %F3 \u00d3 %D3 \u00fa %FA \u00da %DA \u00e7 %E7 \u00c7 %C7"},{"location":"tema_4/page-2/#enlaces-absolutos-y-relativos","title":"Enlaces absolutos y relativos","text":"<p>Una de las caracter\u00edsticas que diferencian a los enlaces (y por tanto, tambi\u00e9n a las URL) es si el enlace es absoluto o relativo:</p> <ul> <li>URL absolutas: incluyen todas las partes de la URL (protocolo, servidor y ruta) por lo que no se necesita m\u00e1s informaci\u00f3n para obtener el recurso enlazado.</li> <li> <p>URL relativas: prescinden de algunas partes de las URL para hacerlas m\u00e1s breves. Como se trata de URL incompletas, es necesario disponer de informaci\u00f3n adicional para obtener el recurso enlazado. En concreto, para que una URL relativa sea \u00fatil es imprescindible conocer la URL del origen del enlace. Las URL relativas se construyen a partir de las URL absolutas y prescinden de la parte del protocolo, del nombre del servidor e incluso de parte o toda la ruta del recurso enlazado. Veamos los casos m\u00e1s t\u00edpicos de URL relativas:</p> <ol> <li> <p>El origen y el destino del enlace se encuentran en el mismo directorio:</p> P\u00e1gina de origen http://www.ejemplo.com/ruta1/ruta2/ruta3/pagina1.html P\u00e1gina enlazada P\u00e1gina web llamada pagina2.html y que se encuentra en el mismo directorio URL absoluta http://www.ejemplo.com/ruta1/ruta2/ruta3/pagina2.html URL relativa pagina2.html <p>Cuando el navegador encuentra una URL relativa que s\u00f3lo consiste en el nombre de un recurso, supone que el protocolo, servidor y directorio del recurso enlazado son los mismos que los del origen del enlace.</p> </li> <li> <p>El destino del enlace se encuentra cerca de su origen y en un nivel superior</p> P\u00e1gina de origen http://www.ejemplo.com/ruta1/ruta2/ruta3/pagina1.html P\u00e1gina enlazada P\u00e1gina web llamada pagina2.html y que se encuentra en el directorio superior llamado ruta2 URL absoluta http://www.ejemplo.com/ruta1/ruta2/pagina2.html URL relativa ../pagina2.html <p>Cuando el navegador encuentra la URL relativa <code>../pagina2.html</code>, sabe que para encontrar el recurso enlazado (pagina2.html) tiene que subir un nivel desde el lugar en el que se encuentra esa URL relativa. La p\u00e1gina que incluye esa URL se encuentra en el directorio ruta1/ruta2/ruta3, por lo que subir un nivel equivale entrar en el directorio ruta1/ruta2.</p> <p>De la misma forma, si el destino se encuentra un par de niveles por encima, se debe incluir ../ dos veces seguidas:</p> P\u00e1gina de origen http://www.ejemplo.com/ruta1/ruta2/ruta3/pagina1.html P\u00e1gina enlazada P\u00e1gina web llamada pagina2.html y que se encuentra en el directorio superior llamado ruta1 URL absoluta http://www.ejemplo.com/ruta1/pagina2.html URL relativa ../../pagina2.html <p>Adem\u00e1s de subir niveles, tambi\u00e9n se puede entrar en otros directorios para obtener los recursos:</p> P\u00e1gina de origen http://www.ejemplo.com/ruta1/ruta2/ruta3/pagina1.html P\u00e1gina enlazada P\u00e1gina web llamada pagina2.html y que se encuentra en un directorio llamado ruta4 que se encuentra en la ra\u00edz del servidor URL absoluta http://www.ejemplo.com/ruta4/pagina2.html URL relativa ../../../ruta4/pagina2.html </li> <li> <p>El destino del enlace se encuentra cerca de su origen y en un nivel inferior</p> P\u00e1gina de origen http://www.ejemplo.com/ruta1/ruta2/ruta3/pagina1.html P\u00e1gina enlazada P\u00e1gina web llamada pagina2.html y que se encuentra en un directorio inferior llamado ruta4 URL absoluta http://www.ejemplo.com/ruta1/ruta2/ruta3/ruta4/pagina2.html URL relativa ruta4/pagina2.html <p>Si el recurso enlazado se encuentra en alg\u00fan directorio inferior al que se encuentra el origen, s\u00f3lo es necesario indicar el nombre de los directorios a los que debe entrar el navegador.</p> </li> <li> <p>El origen y el destino del enlace se encuentran muy alejados</p> <p>En estos casos, lo m\u00e1s sencillo es indicar la ruta completa hasta el recurso enlazado comenzando desde la ra\u00edz del servidor web. Por lo tanto, estas URL relativas s\u00f3lo omiten el protocolo y el nombre del servidor.</p> P\u00e1gina de origen http://www.ejemplo.com/ruta1/ruta2/ruta3/pagina1.html P\u00e1gina enlazada P\u00e1gina web llamada pagina2.html y que se guarda en un directorio llamado ruta7 que se encuentra en la ra\u00edz del servidor URL absoluta http://www.ejemplo.com/ruta7/pagina2.html URL relativa /ruta7/pagina2.html <p>Cuando la URL relativa comienza por <code>/</code>, el navegador considera que es la ruta completa comenzando desde la ra\u00edz del servidor, por lo que s\u00f3lo le a\u00f1ade el protocolo y el nombre del servidor origen.</p> </li> </ol> </li> </ul>"},{"location":"tema_4/page-2/#etiqueta-anchor","title":"Etiqueta anchor","text":"<p>Los enlaces en HTML se crean mediante la etiqueta <code>&lt;a&gt;</code> (su nombre viene del ingl\u00e9s anchor, literalmente traducido como ancla).</p> <p>Se trata de un elemento en l\u00ednea, y su atributo m\u00e1s importante es <code>href</code>, que se utiliza para indicar la URL a la que apunta el enlace. Cuando el usuario pincha sobre un enlace, el navegador se dirige a la URL del recurso indicado mediante <code>href</code>. Las URL de los enlaces pueden ser absolutas o relativas. Veamos algunos ejemplos:</p> <pre><code>&lt;a href=\"http://www.google.com\"&gt;P\u00e1gina principal de Google&lt;/a&gt;\n&lt;a href=\"http://www.ejemplo.com/informe.pdf\"&gt;Descargar informe completo [PDF]&lt;/a&gt;\n&lt;a href=\"/\"&gt;Volver al inicio&lt;/a&gt;\n</code></pre> <p>Por otra parte, el atributo <code>download</code> permite indicar al navegador que al pulsarse en enlace deseamos que se descargue el recurso enlazado, no que se visualice. El valor del atributo corresponde al nombre con el que queremos que se descargue el archivo. Si no se le da valor al tributo <code>download</code>, el archivo se guardar\u00e1 con el nombre real del recurso. Veamos un ejemplo:</p> <pre><code>&lt;a href=\"http://www.ejemplo.com/informe.pdf\" download=\"informe 2017.pdf\"&gt;Descargar informe completo [PDF]&lt;/a&gt;\n</code></pre> <p>Con el atributo <code>target</code> podemos indicar d\u00f3nde debe mostrarse el recurso enlazado. Por defecto este atributo toma el valor <code>_self</code> que hace que el recurso enlazado se muestre en el mismo contexto de navegaci\u00f3n (pesta\u00f1a o ventana) que el origen. Sin embargo, si especificamos el valor <code>_blank</code>, cuando el usuario pulse sobre el enlace el navegador crear\u00e1 una nueva pesta\u00f1a o ventana para mostrar el recurso correspondiente. Esta caracter\u00edstica se usa sobre todo con enlaces externos a nuestro sitio web. Por ejemplo:</p> <pre><code>&lt;a href=\"http://www.google.com\" target=\"_blank\"&gt;P\u00e1gina principal de Google&lt;/a&gt;\n</code></pre>"},{"location":"tema_4/page-2/#enlaces-a-anclas","title":"Enlaces a anclas","text":"<p>En un apartado anterior comentamos que una de las partes de una URL es la denominada ancla o marcador, que indica la posici\u00f3n dentro de la p\u00e1gina a la que queremos enlazar, es decir a donde queremos saltar. As\u00ed, si por ejemplo en el documento <code>http://www.ejemplo.com/pagina1.html</code> incluimos el siguiente enlace</p> <pre><code>&lt;a href=\"pagina2.html#referencias\"&gt;Referencias&lt;/a&gt;\n</code></pre> <p>estamos indicando que al pulsar dicho enlace el navegador nos muestre el documento <code>pagina2.html</code> y dentro de \u00e9l se posicione en la posici\u00f3n ocupada por la etiqueta cuyo atributo <code>id</code> sea referencias, haciendo scroll en el \u00e1rea de visualizaci\u00f3n si es necesario.</p> <p>Podemos usar esta caracter\u00edstica para crear en un documento enlaces a otras posiciones del mismo documento. Por ejemplo si el documento <code>http://www.ejemplo.com/pagina2.html</code> creamos el enlace</p> <pre><code>&lt;a href=\"#referencias\"&gt;Referencias&lt;/a&gt;\n</code></pre> <p>al pulsar dicho enlace se saltar\u00e1 a la posici\u00f3n ocupada por la etiqueta cuyo atributo <code>id</code> sea referencias.</p> <p>Finalmente, si queremos crear un enlace al inicio del documento, bastar\u00e1 con establecer como valor del atributo <code>href</code> del enlace la URL <code>#</code>, como en</p> <pre><code>&lt;a href=\"#\"&gt;Inicio&lt;/a&gt;\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    a # by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-2/#estilizando-enlaces","title":"Estilizando enlaces","text":"<p>En una entrada anterior vimos las distintas pseudoclases relacionadas con los enlaces y con la interacci\u00f3n de usuario, <code>:link</code>, :<code>visited</code>, <code>:hover</code> y <code>:active</code>. Estas representan el estilizado m\u00e1s habitual de los enlaces en las p\u00e1ginas web. Recordemos la demostraci\u00f3n realizada:</p> <p> See the Pen    CSS a by irubenboy (@irubenboy)   on CodePen. </p> <p>En el ejemplo anterior se muestra otro de las estilizaciones m\u00e1s habituales de los enlaces: la desaparici\u00f3n del subrayado de los enlaces asign\u00e1ndole al mismo <code>text-decoration: none</code>. Si queremos cambiar el estilo o color del subrayado del enlace podemos usar las nuevas propiedades de CSS3, como <code>text-decoration-color</code> o <code>text-decoration-style</code>. El problema es que estas propiedades no son soportadas a\u00fan por todos los navegadores, por lo que tradicionalmente se ha optado en este caso por establecer para en enlace un borde inferior del color, grosor y estilo deseado y anular la decoraci\u00f3n por defecto del enlace con <code>text-decoration: none</code>. El efecto no es exactamente igual, pero muy parecido. Por ejemplo:</p> <pre><code>a.color {\ntext-decoration: none;\nborder-bottom: medium solid red;\n}\n</code></pre> <p>En ocasiones, puede resultar \u00fatil incluir un peque\u00f1o icono al lado de un enlace para indicar el tipo de contenido que enlaza, como por ejemplo un archivo comprimido o un documento con formato PDF. Este tipo de im\u00e1genes son puramente decorativas en vez de im\u00e1genes de contenido, por lo que se deber\u00edan a\u00f1adir con CSS y no con elementos de tipo <code>&lt;img&gt;</code>. Utilizando las propiedades <code>background-image</code>, <code>background-repeat</code>, <code>background-position</code> y <code>background-size</code> se puede personalizar el aspecto de los enlaces para que incluyan un peque\u00f1o icono a su lado.</p> <p>Por otro lado, con objeto de mejorar la accesibilidad del enlace, se recomienda establecer un determinado <code>padding</code> al mismo, de manera que se amplie el \u00e1rea clickable del mismo.</p> <p>Finalmente, otro estilizado muy habitual es hacer que el enlace luzca como si de un bot\u00f3n se tratase. Veamos una demostraci\u00f3n de ambos</p> <p> See the Pen    a as button by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-3/","title":"3 Listas","text":""},{"location":"tema_4/page-3/#introduccion","title":"Introducci\u00f3n","text":"<p>En ocasiones, es posible agrupar determinadas palabras o frases en un conjunto de elementos que tienen m\u00e1s significado de forma conjunta. El men\u00fa de navegaci\u00f3n de un sitio web por ejemplo est\u00e1 formado por un grupo de palabras. Aunque cada palabra por separado tiene sentido, de forma conjunta constituyen el men\u00fa de navegaci\u00f3n de la p\u00e1gina, por lo que su significado conjunto es mayor que por separado.</p> <p>El lenguaje HTML define tres tipos diferentes de listas para agrupar los elementos: listas no ordenadas (se trata de una colecci\u00f3n simple de elementos en la que no importa su orden), listas ordenadas (similar a la anterior, pero los elementos est\u00e1n numerados y por tanto, importa su orden) y listas de definici\u00f3n (un conjunto de t\u00e9rminos y definiciones similar a un diccionario).</p>"},{"location":"tema_4/page-3/#etiquetas-ul","title":"Etiquetas ul","text":"<p>Las listas no ordenadas son las m\u00e1s sencillas y las que m\u00e1s se utilizan. Una lista no ordenada es un conjunto de elementos relacionados entre s\u00ed pero para los que no se indica un orden o secuencia determinados. La etiqueta <code>&lt;ul&gt;</code>, de ***u***nordered ***l***ist, encierra todos los elementos de la lista y la etiqueta <code>&lt;li&gt;</code>, de ***l***ist ***i**tem cada uno de sus elementos. Veamos un ejemplo:</p> <pre><code>&lt;ul&gt;\n&lt;li&gt;Inicio&lt;/li&gt;\n&lt;li&gt;Noticias&lt;/li&gt;\n&lt;li&gt;Art\u00edculos&lt;/li&gt;\n&lt;li&gt;Contacto&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>El navegador por defecto muestra los elementos de la lista tabulados y con una peque\u00f1a vi\u00f1eta formada por un c\u00edrculo negro. Como ya se sabe, el aspecto con el que se muestran los elementos de las listas se puede modificar mediante las hojas de estilos CSS.</p> <p>Las etiquetas <code>&lt;ul&gt;</code> corresponden a elementos en bloque.</p>"},{"location":"tema_4/page-3/#etiqueta-ol","title":"Etiqueta ol","text":"<p>Las listas ordenadas son casi id\u00e9nticas a las listas no ordenadas, salvo que en este caso los elementos relacionados se muestran siguiendo un orden determinado. Cuando se crea por ejemplo una lista con las instrucciones de un producto, es importante el orden en el que se realiza cada paso. Cuando se muestra un \u00edndice o tabla de contenidos en un libro, es importante el orden de cada elemento del \u00edndice.</p> <p>En todos estos casos, la lista m\u00e1s adecuada es la lista ordenada, que se define mediante la etiqueta <code>&lt;ol&gt;</code>. Los elementos de la lista se definen mediante la etiqueta <code>&lt;li&gt;</code>, la misma que se utiliza en las listas no ordenadas. Veamos un ejemplo:</p> <pre><code>&lt;ol&gt;\n&lt;li&gt;Enchufar correctamente&lt;/li&gt;\n&lt;li&gt;Comprobar conexiones&lt;/li&gt;\n&lt;li&gt;Encender el aparato&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre> <p>El navegador muestra la lista de forma muy parecida a las listas no ordenadas, salvo que en este caso no se emplean vi\u00f1etas gr\u00e1ficas en los elementos, sino que se numeran de forma consecutiva. El tipo de numeraci\u00f3n empleada tambi\u00e9n se puede modificar aplicando hojas de estilos CSS a los elementos de la lista.</p> <p>En la etiqueta <code>&lt;ol&gt;</code> podemos usar los siguientes atributos:</p> <ul> <li><code>reversed</code>: Para que se numeren en orden de mayor a menor.</li> <li><code>start=\"numero\"</code>: Para indicar el valor inicial.</li> <li><code>type=\"tipo_numeracion\"</code>: Para el indicar el tipo de numeraci\u00f3n (decimal, latin, greek, etc.). Sus valores son similares a los del atributo CSS <code>list-style-type</code> que veremos a continuaci\u00f3n. Por su parte, cuando usamos la etiqueta <code>&lt;li&gt;</code> dentro de un elemento <code>&lt;ol&gt;</code> podemos establecer para las etiqueta <code>&lt;li&gt;</code> el atributo <code>value=\"valor\"</code> para indicar el valor de orden que debe mostrar el <code>&lt;ol&gt;</code> para dicho elemento.</li> </ul> <p>Los elementos <code>&lt;ol&gt;</code> son bastante menos usados que los elementos <code>&lt;ul&gt;</code> dado que mediante CSS es posible hacer que un <code>&lt;ul&gt;</code> luzca como un <code>&lt;ol&gt;</code>. Adem\u00e1s la etiqueta <code>&lt;ul&gt;</code> es usada normalmente para representar los men\u00fas.</p> <p>Las etiquetas <code>&lt;ol&gt;</code> y <code>&lt;li&gt;</code> corresponden a elementos en bloque.</p>"},{"location":"tema_4/page-3/#etiquetas-dl-dt-y-dd","title":"Etiquetas dl, dt y dd","text":"<p>La etiqueta <code>&lt;dl&gt;</code> permite crear listas de definici\u00f3n (definition list, dl), que no es m\u00e1s que una lista de pares t\u00e9rmino-definici\u00f3n. As\u00ed, una etiqueta <code>&lt;dl&gt;</code> contendr\u00e1 una serie de pares de etiquetas <code>&lt;dt&gt;</code> , que sirve para indicar el t\u00e9rmino (definition term, dt), y <code>&lt;dd&gt;</code> , que sirve para indicar el significado o definici\u00f3n (definition definition, dd).</p> <p>Veamos un ejemplo:</p> <pre><code>&lt;h3&gt;Siglas de partidos pol\u00edticos&lt;/h3&gt;\n&lt;dl&gt;\n&lt;dt&gt;PSOE&lt;/dt&gt;\n&lt;dd&gt;Partido Socialista Obrero Espa\u00f1ol&lt;/dd&gt;\n&lt;dt&gt;PP&lt;/dt&gt;\n&lt;dd&gt;Partido Popular&lt;/dd&gt;\n&lt;dt&gt;IU&lt;/dt&gt;\n&lt;dd&gt;Izquierda Unida&lt;/dd&gt;\n&lt;/dl&gt;\n</code></pre>"},{"location":"tema_4/page-3/#estilizado-basico-de-listas","title":"Estilizado b\u00e1sico de listas","text":""},{"location":"tema_4/page-3/#list-style-type","title":"list-style-type","text":"<p>CSS define varias propiedades para controlar el tipo de vi\u00f1eta que muestran las listas, adem\u00e1s de poder controlar la posici\u00f3n de la propia vi\u00f1eta. La propiedad b\u00e1sica es la que controla el tipo de vi\u00f1eta que se muestra y que se denomina <code>list-style-type</code>.</p> Propiedad <code>list-style-type</code> Valores disc | circle | square | decimal | decimal-leading-zero | lower-roman | upper-roman | lower-greek | lower-latin | upper-latin | armenian | georgian | lower-alpha | upper-alpha | none | inherit Se aplica a Elementos de una lista Valor inicial disc Heredada S\u00ed Descripci\u00f3n Permite establecer el tipo de vi\u00f1eta mostrada para una lista <p>En primer lugar, el valor <code>none</code> permite mostrar una lista en la que sus elementos no contienen vi\u00f1etas, n\u00fameros o letras. Se trata de un valor muy utilizado, ya que es imprescindible para los men\u00fas de navegaci\u00f3n creados con listas, como se ver\u00e1 m\u00e1s adelante.</p> <p>El resto de valores de la propiedad <code>list-style-type</code> se dividen en tres tipos: gr\u00e1ficos, num\u00e9ricos y alfab\u00e9ticos. Veamos los m\u00e1s habituales:</p> <ul> <li>Gr\u00e1ficos: <code>disc</code> (disco relleno), <code>circle</code> (c\u00edrculo) y <code>square</code> (cuadrado).</li> <li>Num\u00e9ricos: <code>decimal</code> (num\u00e9rico decimal), <code>decimal-leading-zero</code> (num\u00e9rico decimal con 0 inicial para conservar el mismo n\u00famero de d\u00edgitos), <code>lower-roman</code> (n\u00fameros romanos en min\u00fascula), <code>upper-roman</code> (n\u00fameros romanos en may\u00fascula).</li> <li>Alfanum\u00e9ricos: <code>lower-latin</code> (letras en min\u00fascula), <code>upper-latin</code> (letras en may\u00fascula). Por ejemplo:</li> </ul> <pre><code>ul {\nlist-style-type: square;\n}\nol {\nlist-style-type: decimal-leading-zero;\n}\n</code></pre>"},{"location":"tema_4/page-3/#list-item-position","title":"list-item-position","text":"<p>Por otra parte, la propiedad <code>list-item-position</code> permite controlar la colocaci\u00f3n de las vi\u00f1etas.</p> Propiedad <code>list-item-position</code> Valores inside | outside | inherit Se aplica a Elementos de una lista Valor inicial outside Heredada S\u00ed Descripci\u00f3n Permite establecer la posici\u00f3n de la vi\u00f1eta de cada elemento de una lista <p>Por defecto, la vi\u00f1eta se encuentra fuera del margen en el que se muestra cada elemento de la lista, correspondiente a valor <code>outside</code>. Si establecemos para la lista esta propiedad al valor <code>inside</code> la vi\u00f1eta se encuentra dentro de la primera l\u00ednea de cada elemento. Veamos una demostraci\u00f3n:</p> <p> See the Pen    list-item-position by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-3/#list-style-image","title":"list-style-image","text":"<p>Cuando se requiere personalizar el aspecto de las vi\u00f1etas, se debe emplear la propiedad <code>list-style-image</code>, que permite mostrar una imagen propia en vez de una vi\u00f1eta autom\u00e1tica.</p> Propiedad <code>list-style-image</code> Valores url | none | inherit Se aplica a Elementos de una lista Valor inicial none Heredada S\u00ed Descripci\u00f3n Permite reemplazar las vi\u00f1etas autom\u00e1ticas por una imagen personalizada <p>Las im\u00e1genes personalizadas se indican mediante la URL de la imagen. Si no se encuentra la imagen o no se puede cargar, se muestra la vi\u00f1eta autom\u00e1tica correspondiente (salvo que expl\u00edcitamente se haya eliminado mediante la propiedad <code>list-style-type</code>). Por ejemplo:</p> <p> See the Pen    list-style-image by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-3/#list-style","title":"list-style","text":"<p>Como es habitual, CSS define una propiedad de tipo shorthand que permite establecer todas las propiedades de una lista de forma directa. La propiedad se denomina <code>list-style</code>.</p> Propiedad <code>list-style</code> Valores (list-style-type list-style-position list-style-image) | inherit Se aplica a Elementos de una lista Valor inicial - Heredada S\u00ed Descripci\u00f3n Propiedad que permite establecer de forma simult\u00e1nea todas las opciones de una lista <p>El orden en el que se indican los valores de la propiedad es indiferente. Por ejemplo:</p> <pre><code>ul {\nlist-style: url(\"imagenes/cuadrado_rojo.gif\") square;\n}\n</code></pre>"},{"location":"tema_4/page-3/#estilizando-menu-de-navegacion","title":"Estilizando men\u00fa de navegaci\u00f3n","text":"<p>Como ya hemos visto anteriormente, los men\u00fas de navegaci\u00f3n se suelen crear con las etiquetas <code>&lt;nav&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;li&gt;</code> y <code>&lt;a&gt;</code> con una estructura parecida a la siguiente:</p> <pre><code>&lt;nav&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"#\"&gt;Item 3&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre> <p>Para aplicar un estilo de men\u00fa a esta lista desordenada debemos tener en cuenta una serie de aspectos:</p> <ul> <li> <p>La lista desordenada <code>&lt;ul&gt;</code> no debe mostrar ninguna vi\u00f1eta, por lo que le estableceremos <code>list-style-type: none;</code>. Adem\u00e1s, debemos tener en cuenta que el navegador por defecto aplica un determinado y margen a las listas, por lo que deberemos resetear dicho comportamiento. Por ejemplo:</p> <pre><code>nav ul {\nmargin: 0; /* reset styles */\npadding: 0; /* reset styles */\nlist-style-type: none;\n...\n}\n</code></pre> </li> <li> <p>Las etiqueta <code>&lt;a&gt;</code> (enlaces) dentro de la lista no deben tener ninguna l\u00ednea decorativa y deben ocupar todo el elemento &lt;<code>li&gt;</code>, por lo que deberemos convertirlos en bloque (ya que por defecto los <code>&lt;a&gt;</code> son elementos en l\u00ednea). Por ejemplo:</p> <p><code>css nav ul li a {   display: block;   text-decoration: none;   ... }</code></p> </li> </ul> <p>Veamos una demostraci\u00f3n de un men\u00fa vertical:</p> <p> See the Pen    vertical nav by irubenboy (@irubenboy)   on CodePen. </p> <p>Si queremos crear un men\u00fa horizontal, la cosa se complica algo m\u00e1s, ya que tendremos que hacer que los elementos <code>&lt;li&gt;</code> se visualicen uno al lado del otro. Hay distintas t\u00e9cnicas para conseguirlo, como veremos m\u00e1s adelante, pero en el siguiente ejemplo se ha optado por aplicarles el modo de visualizaci\u00f3n <code>inline-block</code> mediante:</p> <p> See the Pen    horizontal nav by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-4/","title":"4 Generador de contenido con CSS","text":""},{"location":"tema_4/page-4/#introduccion","title":"Introducci\u00f3n","text":"<p>En algunas ocasiones, el desarrollador quiere que el navegador muestre contenido que en realidad no se encuentra en el documento HTML. Por ejemplo, supongamos que queremos que el navegador inserte la palabra \"Figura \" delante del contenido del pie de cada imagen del documento HTML, o que a\u00f1ada la palabra \"Tema \" antes de cada elemento <code>&lt;h1&gt;</code>.</p> <p>Otro ejemplo caracter\u00edstico es el caso de las listas numeradas, es decir, de los elementos <code>&lt;li&gt;</code> contenidos dentro de un elemento <code>&lt;ol&gt;</code>. El navegador a\u00f1adir\u00e1 el n\u00famero ordinal correspondiente a cada \u00edtem de la lista, aunque en realidad dicho n\u00famero no se encuentre dentro del documento HTML. En este caso, dicho comportamiento est\u00e1 definido por el valor list-item de la propiedad <code>display</code>, que es asignado a los elementos <code>&lt;li&gt;</code> en la hoja de estilos por defecto del navegador.</p> <p>Para el resto de los ejemplos planteados, CSS nos proporciona la propiedad <code>content</code>, que permite establecer el contenido que se quiere a\u00f1adir. El problema es que no queremos modificar el contenido de elemento, por lo que no nos basta con seleccionar dicho elemento y aplicarle un valor determinado a su propiedad <code>content</code>, sino que lo queremos es poder a\u00f1adir un contenido antes o despu\u00e9s del elemento. Y ah\u00ed es donde entran en juego los pseudoelementos <code>::before</code> y <code>::after</code>.</p>"},{"location":"tema_4/page-4/#pseudoelementos-before-y-after","title":"Pseudoelementos ::before y ::after","text":"<p>Los pseudo-elementos <code>:before</code> y <code>:after</code> permiten seleccionar, respectivamente, la \"posici\u00f3n\" anterior y posterior de un elemento. Una vez seleccionada la \"posici\u00f3n\", normalmente se usa la propiedad <code>content</code> para establecer el contenido de dicha \"posici\u00f3n\", de manera que dicho contenido se a\u00f1ade antes o despu\u00e9s del elemento. De esta forma, desde CSS podemos generar contenido en nuestra p\u00e1gina que no se encuentra realmente en el documento HTML.</p> <p>Los pseudo-elementos <code>::before</code> y <code>::after</code> se utilizan en combinaci\u00f3n con la propiedad <code>content</code> de CSS para a\u00f1adir contenidos antes o despu\u00e9s del contenido original de un elemento. Por ejemplo, las siguientes reglas CSS a\u00f1aden el texto \"Nota: \" delante de los p\u00e1rrafos de la clase nota y el car\u00e1cter . detr\u00e1s de cada p\u00e1rrafo de la p\u00e1gina:</p> <pre><code>p.nota::before { content: \"Nota: \"; }\np::after   { content: \".\"; }\n</code></pre> <p>Los pseudoelementos <code>::before</code> y <code>::after</code> heredan todas las propiedades heredables desde el elemento al que est\u00e1n asociados. Las propiedades que no son heredables, reciben el valor por defecto correspondiente. En otras palabras, los contenidos insertados din\u00e1micamente en un elemento son a todos los efectos parte de ese mismo elemento, por lo que heredan el valor de todas sus propiedades CSS heredables.</p> <p>Por otra parte, estos pseudoelementos afectan a las elementos de su entorno exactamente igual que si fueran elementos reales insertados dentro del elemento asociado, teniendo en cuenta que, por defecto, son considerados elementos en l\u00ednea.</p>"},{"location":"tema_4/page-4/#content","title":"content","text":"<p>La propiedad <code>content</code> se emplea para generar nuevo contenido de forma din\u00e1mica e insertarlo en la p\u00e1gina HTML. El est\u00e1ndar CSS indica que la propiedad content s\u00f3lo puede utilizarse en los pseudo-elementos <code>::before</code> y <code>::after</code>.</p> Propiedad <code>content</code> Valores Combinaci\u00f3n de counter() counters() attr() open-quote close-quote no-open-quote no-close-quote | normal | none | inherit Se aplica a Solamente a los pseudo-elementos <code>::before</code> y <code>::after</code> Valor inicial normal Descripci\u00f3n Establece el contenido before y after de un elemento <p>Los valores <code>normal</code> y <code>none</code> tienen el mismo efecto, hacen que el pseudoelemento no se genere, por lo que si queremos que se genere aunque no muestre ning\u00fan texto tendremos que establecerle como valor una cadena vac\u00eda <code>\"\"</code>.</p> <p>Si establecemos como valor una cadena de texto, \u00e9ste tiene que ir entre comillas simples o dobles y s\u00f3lo permite incluir texto b\u00e1sico. Si se incluye alguna etiqueta HTML en la cadena de texto, el navegador muestra la etiqueta tal y como est\u00e1 escrita, ya que no la interpreta. Para incluir un salto de l\u00ednea en el contenido generado, se utiliza el car\u00e1cter especial <code>\\A</code>. Para incluir una comilla doble o simple usar \\\" o \\'. Veamos un ejemplo:</p> <p> See the Pen    content by irubenboy (@irubenboy)   on CodePen. </p> <p>Tambi\u00e9n podemos establecer como valor una URI, que normalmente suele corresponder a la URL de una imagen que se quiere a\u00f1adir de forma din\u00e1mica al contenido. Por ejemplo:</p> <p> See the Pen    content with URI by irubenboy (@irubenboy)   on CodePen. </p> <p>En otras ocasiones, lo que queremos a\u00f1adir antes o despu\u00e9s del contenido del elemento es el valor de alguno de sus atributos, para lo que podemos usar como valor de la propiedad <code>content</code> la funci\u00f3n especial <code>attr(nombre_atributo)</code>, que retornar\u00e1 el valor de dicho atributo en el elemento. Desgraciadamente esta funci\u00f3n especial s\u00f3lo se puede utilizar dentro de la propiedad <code>content</code>.</p> <p>Por ejemplo, con la siguiente regla hacemos que se a\u00f1ada autom\u00e1ticamente a los elementos <code>&lt;abbr&gt;</code> el valor del atributo <code>title</code> (en el que se indica el significado de la abreviatura o siglas correspondientes).</p> <pre><code>abbr::after {\ncontent: \" (\" attr(title) \")\"\n}\n</code></pre> <p>Veamos una demostraci\u00f3n en la que se a\u00f1ade al contenido el valor del atributo href de los enlaces:</p> <p> See the Pen    attr method by irubenboy (@irubenboy)   on CodePen. </p> <p>Otros valores posibles est\u00e1n relacionados con las comillas y la propiedad quotes que veremos m\u00e1s adelante. Por ejemplo, <code>open-quote</code> y <code>close-quote</code> indican que se debe mostrar, respectivamente, una comilla de apertura o una de cierre. El tipo de comillas a mostrar en cada caso se establece mediante la propiedad <code>quotes</code>. El siguiente ejemplo a\u00f1ade autom\u00e1ticamente las comillas de apertura y cierre a los elementos <code>&lt;blockquote&gt;</code>:</p> <pre><code>blockquote::before {\ncontent: open-quote;\n}\nblockquote::after {\ncontent: close-quote;\n}\n</code></pre> <p>Por su parte, los valores <code>no-open-quote</code> y <code>no-close-quote</code> no escriben contenido, sino que incrementan o decrementan, respectivamente, el nivel de comillas anidadas. Lo entenderemos mejor que veamos la propiedad <code>quotes</code>.</p> <p>Tambi\u00e9n tenemos otros valores relacionados con los contadores, como <code>counter(contador)</code> y <code>counters(contador, separador)</code>. El primero representa el valor de un contador en el elemento, y el segundo, la concatenaci\u00f3n del valor de un determinado contador para todos los antepasados del elemento y el propio elemento, separados por la cadena indicada como separador. Por ejemplo:</p> <pre><code>h1::before {\ncontent: \"Cap\u00edtulo \" counter(numero_capitulo);\n}\n</code></pre> <p>Veremos m\u00e1s ejemplos de estas funciones cuando hablemos de las propiedades <code>counter-reset</code> y <code>counter-increment</code>.</p>"},{"location":"tema_4/page-4/#quotes","title":"quotes","text":"<p>La propiedad <code>quotes</code> permite establecer de forma expl\u00edcita los caracteres que se utilizan al a\u00f1adir comillas en la propiedad <code>content</code>. S\u00f3lo tiene sentido cuando se utiliza junto con la propiedad <code>content</code> y los pseudoelementos <code>::after</code> y <code>::before</code>.</p> Propiedad <code>quotes</code> Valores  | none | inherit Se aplica a Solamente a los pseudo-elementos <code>::before</code> y <code>::after</code> Valor inicial Depende de cada navegador Heredada S\u00ed Descripci\u00f3n Establece los caracteres utilizados para mostrar las comillas dentro de la propiedad <code>content</code> <p>La propiedad <code>quotes</code> permite indicar un n\u00famero ilimitado de pares de comillas. Cuando s\u00f3lo se define un par, se muestran siempre que se utilice <code>open-quote</code> y <code>close-quote</code> dentro del valor de la propiedad <code>content</code>. Cuando se definen varios pares, se van alternando cada vez que se muestran unas comillas dentro de otro elemento que ya tiene comillas. Cada comilla se separa de las dem\u00e1s mediante un espacio en blanco. Por ejemplo:</p> <p> See the Pen    quote by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-4/#contadores","title":"Contadores","text":"<p>Los contadores son variables num\u00e9ricas que podemos definir en nuestro CSS para posteriormente incluir su valor en la propiedad content de alg\u00fan pseudoelemento que hayamos seleccionado con <code>::before</code> o <code>::after</code>.</p> <p>Para definir un contador se usa la propiedad <code>counter-reset</code></p> Propiedad <code>counter-reset</code> Valores none | inherit Se aplica a Todos los elementos Valor inicial none Descripci\u00f3n Crea e inicializa el valor de una variable contador <p>En el caso m\u00e1s sencillo, la propiedad <code>counter-reset</code> recibe el nombre de un contador seguido, opcionalmente, por un n\u00famero entero que indica el valor al que se inicializa el contador. Si no se indica el valor, se asume el valor 0. Si el contador no exist\u00eda ya en nuestro CSS, se crea. Si ya exist\u00eda se reinicializa. Por ejemplo:</p> <pre><code>body {\ncounter-reset: numero_capitulo 0;\n}\n</code></pre> <p>La regla CSS anterior hace que se inicialice a 0 un contador llamado numero_capitulo cuando el navegador encuentre el elemento <code>&lt;body&gt;</code>. Si dicho contador no exist\u00eda, se crea.</p> <p>El contador creado ser\u00e1 utilizado posteriormente en las propiedades <code>content</code> y <code>counter-increment</code>.</p> <p>Como comentamos anteriormente, para usar el valor de un contador dentro de la propiedad <code>content</code> se usa la funci\u00f3n <code>counter(nombre_contador, estilo)</code>. Adem\u00e1s el contador a mostrar, podemos indicar, opcionalmente, el estilo con el que se muestra el valor del contador. La lista de estilos permitidos son los mismos que los de la propiedad <code>list-style-type</code>. El estilo por defecto es <code>decimal</code>.</p> <pre><code>body {\ncounter-reset: numero_capitulo 0;\n}\nh1::before {\ncontent: \"Cap\u00edtulo \" counter(numero_capitulo);\ncounter-increment: numero_capitulo 1;\n}\n</code></pre> <p>La propiedad <code>counter-increment</code> sirve para incrementar el valor de un contador la cantidad indicada. Un aspecto a tener en cuenta es que cuando se inicializa y se actualiza el valor de un contador en un mismo elemento, primero se inicializa su valor y despu\u00e9s se actualiza seg\u00fan la propiedad <code>counter-increment</code>.</p> Propiedad <code>counter-increment</code> Valores  |none | inherit Se aplica a Todos los elementos Valor inicial none Descripci\u00f3n Incrementa el valor de una variable contador <p>Si no se indica el incremento, los navegadores suponen que vale <code>1</code>.</p> <p>Las propiedades <code>counter-reset</code> y <code>counter-increment</code> tambi\u00e9n permiten indicar varios contadores para inicializarlos o incrementarlos de forma simult\u00e1nea. Por ejemplo:</p> <pre><code>h1 {\ncounter-reset: numero_seccion 0 numero_tabla -1 numero_imagen -1;\n}\n</code></pre> <p>La regla CSS anterior inicializa a 0 el contador numero_seccion y a -1 los contadores numero_tabla y numero_imagen cada vez que se encuentra un elemento <code>&lt;h1&gt;</code> en la p\u00e1gina.</p> <p>Uno de los aspectos m\u00e1s complejos de los contadores es que \u00e9stos tienen en cuenta el anidamiento de los elementos HTML. Por ejemplo, si tenemos las siguientes reglas CSS:</p> <pre><code>ol {\ncounter-reset: elemento;\nlist-style-type: none;\n}\nli::before {\ncontent: counter(elemento) \". \";\ncounter-increment: elemento;\n}\n</code></pre> <p>y el siguiente c\u00f3digo HTML en el que se anidan elementos <code>&lt;ol&gt;</code> dentro de los elementos <code>&lt;li&gt;</code>:</p> <pre><code>&lt;ol&gt;\n&lt;li&gt;Elemento&lt;/li&gt;\n&lt;li&gt;Elemento&lt;/li&gt;\n&lt;li&gt;Elemento\n    &lt;ol&gt;\n&lt;li&gt;Elemento&lt;/li&gt;\n&lt;li&gt;Elemento\n          &lt;ol&gt;\n&lt;li&gt;Elemento&lt;/li&gt;\n&lt;li&gt;Elemento&lt;/li&gt;\n&lt;li&gt;Elemento&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/li&gt;\n&lt;li&gt;Elemento&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/li&gt;\n&lt;li&gt;Elemento&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre> <p>el navegador crea tres contadores diferentes con el mismo nombre (<code>elemento</code>), uno por cada vez que se encuentra un elemento <code>&lt;ul&gt;</code>. La funci\u00f3n <code>counter()</code> s\u00f3lo mostrar\u00e1 el valor del contador correspondiente a dicho nivel de anidaci\u00f3n, por lo que dentro de cada <code>&lt;ul&gt;</code> se muestra la numeraci\u00f3n normal (<code>1, 2 y 3</code>).</p> <p>Pero \u00bfY si en el ejemplo anterior queremos mostrar la concatenaci\u00f3n de los valores de los tres contadores anidados con el mismo nombre, por ejemplo 1.1.1 , 1.1.2, etc.? No podremos utilizar la funci\u00f3n <code>counter()</code>, sino que utilizaremos la funci\u00f3n <code>counters(nombre_contador, cadena_separacion, estilo)</code>, que recibe el nombre del contador, y la cadena que se debe emplear como separador entre los distintos valores a la hora de realizar la concatenaci\u00f3n y, opcionalmente, el estilo con el que deben mostrarse los contadores. <code>counters()</code> obtendr\u00e1 los distintos contadores anidados con dicho nombre los mostrar\u00e1 en orden, con el estilo que se le haya indicado, escribiendo entre ellos la cadena de separaci\u00f3n indicada.</p> <p>As\u00ed si variamos la regla CSS en el ejemplo anterior:</p> <pre><code>ol {\ncounter-reset: elemento;\nlist-style-type: none;\n}\nli::before {\ncontent: counters(elemento, '.') \".- \";\ncounter-increment: elemento;\n}\n</code></pre> <p>los elementos <code>&lt;li&gt;</code> se mostrar\u00e1n con la numeraci\u00f3n 1.1.1., 1.1.2. y as\u00ed sucesivamente.</p> <p>El motivo para este comportamiento es que los elementos <code>&lt;li&gt;</code> anidados se ven afectados por varios contadores llamados elemento. La funci\u00f3n <code>counter()</code> s\u00f3lo muestra el valor del contador que afecta m\u00e1s directamente al elemento, mientras que la funci\u00f3n <code>counters()</code> muestra todos los contadores empezando desde el m\u00e1s externo hasta llegar al m\u00e1s interno.</p> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    index w/ counters by irubenboy (@irubenboy)   on CodePen. </p> <p>Esta funcionalidad s\u00f3lo es posible cuando se produce anidaci\u00f3n, por lo que NO podremos usarla con elementos <code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code>, etc., ya que \u00e9stos no se anidan. En la siguiente demostraci\u00f3n vemos una soluci\u00f3n muy inteligente para conseguir la numeraci\u00f3n autom\u00e1tica de los encabezados de secci\u00f3n:</p> <p> See the Pen    counterrs heading by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-4/#otros-usos-de-before-y-after","title":"Otros usos de ::before y ::after","text":"<p>Cuando queremos a\u00f1adir un icono desde CSS a un elemento una de las alternativas m\u00e1s usadas en el empleo de una fuente ic\u00f3nica, como por ejemplo Font Awesome, y los pseudoelementos <code>::before</code> y <code>::after</code>, como en el siguiente ejemplo:</p> <p> See the Pen    before &amp; after icon by irubenboy (@irubenboy)   on CodePen. </p> <p>Otro uso curioso de estos pseudoelementos es la traducci\u00f3n de texto que apareciera en el documento original. Por ejemplo:</p> <p> See the Pen    before &amp; after translate by irubenboy (@irubenboy)   on CodePen. </p> <p>Tambi\u00e9n podemos aplicar un filtro de de color a una determinada imagen. Por ejemplo:</p> <p> See the Pen    before &amp; after filter image by irubenboy (@irubenboy)   on CodePen. </p> <p>Finalmente, podemos hacer incluso que un texto que muestre con una forma no rectangular, como en el siguiente ejemplo:</p> <p> See the Pen    before &amp; after curve text by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-5/","title":"5 Tablas","text":""},{"location":"tema_4/page-5/#introduccion","title":"Introducci\u00f3n","text":"<p>Desde sus primeras versiones, HTML incluy\u00f3 el soporte para crear tablas de datos en las p\u00e1ginas web. Adem\u00e1s de ser sencillo, el modelo definido por HTML es muy flexible y bastante completo. Las tablas en HTML utilizan los mismos conceptos de filas, columnas, cabeceras y t\u00edtulos que los que se utilizan en cualquier otro entorno de publicaci\u00f3n de documentos:</p> <p> Figura 4 - Tablas</p> <p>Las tablas de HTML puede contener elementos simples, agrupaciones de filas y de columnas, cabeceras y pies de tabla, subdivisiones, cabeceras m\u00faltiples y otros elementos complejos.</p>"},{"location":"tema_4/page-5/#tablas-basicas","title":"Tablas b\u00e1sicas","text":"<p>Las tablas m\u00e1s sencillas de HTML se definen con las etiquetas: <code>&lt;table&gt;</code>, <code>&lt;tr&gt;</code>, <code>&lt;td&gt;</code> y <code>&lt;th&gt;</code>. La etiqueta <code>&lt;table&gt;</code> contiene todas las filas de la tabla. Cada fila es representa por una etiqueta <code>&lt;tr&gt;</code> (table row). Cada fila contiene una serie de celdas, representadas por la etiqueta <code>&lt;td&gt;</code> (del ingl\u00e9s table data cell) o <code>&lt;th&gt;</code> (del ingl\u00e9s table header cell) si se trata de una celda que act\u00faa como cabecera. Por ejemplo:</p> <pre><code>&lt;table&gt;\n&lt;tr&gt;\n&lt;th&gt;Curso&lt;/th&gt;\n&lt;th&gt;Horas&lt;/th&gt;\n&lt;th&gt;Horario&lt;/th&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;CSS&lt;/td&gt;\n&lt;td&gt;20&lt;/td&gt;\n&lt;td&gt;16:00 - 20:00&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;HTML&lt;/td&gt;\n&lt;td&gt;20&lt;/td&gt;\n&lt;td&gt;16:00 - 20:00&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Dreamweaver&lt;/td&gt;\n&lt;td&gt;60&lt;/td&gt;\n&lt;td&gt;16:00 - 20:00&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> <p>El atributo m\u00e1s utilizado de la etiqueta <code>&lt;th&gt;</code> es <code>scope</code>, que permite indicar si la celda es cabecera de la fila (<code>&lt;th scope=\"row\"&gt;</code>) o de la columna <code>&lt;th scope=\"col\"&gt;</code>.</p> <p>Uno de los aspectos m\u00e1s curiosos de los tablas en HTML es que NO se define el concepto de columna, sino que el n\u00famero de columnas de la tabla es calculado como el n\u00famero m\u00e1ximo de celdas contenido por alguna fila de la tabla. As\u00ed, si una tabla contiene 2 filas, la primera fila contiene 2 celdas y la segunda 3 celdas, la tabla se mostrar\u00e1 con 3 columnas, ya que es el m\u00e1ximo de n\u00ba de celdas. Pero \u00bfc\u00f3mo se pintan las celdas de la primera fila si s\u00f3lo hay 2? Pues de izquierda a derecha, es decir, que la primera celda ocupar\u00e1 la columna 1 y la segunda celda la columna 2.</p> <p>Pero, \u00bfy si en una fila quiero dejar la primera columna sin ocupar y ocupar la segunda y la tercera? La respuestas es que NO puede hacerse, tendremos que definir para dicha columna una celda vac\u00eda. Posteriormente, mediante CSS podremos hacer que dicha celda vac\u00eda no sea visible.</p> <p>Por otra parte, HTML define la etiqueta <code>&lt;caption&gt;</code> para establecer la leyenda o t\u00edtulo de una tabla. La etiqueta debe colocarse inmediatamente despu\u00e9s de la etiqueta <code>&lt;table&gt;</code> y cada tabla s\u00f3lo puede incluir una etiqueta <code>&lt;caption&gt;</code>.</p> <p>Si la tabla est\u00e1 contenida dentro de una etiqueta <code>&lt;figure&gt;</code>, que veremos cuando hablemos de las im\u00e1genes, se recomienda usar <code>&lt;figcaption&gt;</code> en vez de <code>S</code>.</p> <p>Veamos una demostraci\u00f3n de una tabla b\u00e1sica:</p> <p> See the Pen    Untitled by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-5/#fusion-de-filas-y-columnas","title":"Fusi\u00f3n de filas y columnas","text":"<p>Las tablas complejas suelen disponer de una estructura irregular que junta varias columnas para formar una columna ancha o une varias filas para formar una fila m\u00e1s alta que las dem\u00e1s. Para fusionar filas o columnas, se utilizan en los elementos <code>&lt;td&gt;</code> y <code>&lt;th&gt;</code> los siguientes atributos:</p> <ul> <li><code>rowspan=\"num_filas\"</code>: Hace que el elemento ocupe el n\u00famero de filas especificado, extendi\u00e9ndose hacia abajo, ocupando las celdas correspondientes.</li> <li><code>colspan=\"num_columnas\"</code>: Hace que el elemento ocupe el n\u00famero de columnas especificado, extendi\u00e9ndose hacia la derecha, ocupando las celdas correspondientes. A la hora de determinar en qu\u00e9 fila o \"columna\" definir un elemento <code>&lt;td&gt;</code> o <code>&lt;th&gt;</code> que vaya a ocupar m\u00e1s de una celda gracias a rowspan o colspan, la recomendaci\u00f3n es siempre hacerlo donde deber\u00eda estar situada la celda de m\u00e1s arriba a la izquierda de las que vaya a ocupar el <code>&lt;td&gt;</code> o <code>&lt;th&gt;</code>.</li> </ul> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    merge table by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-5/#tablas-avanzadas","title":"Tablas avanzadas","text":"<p>Algunas tablas complejas est\u00e1n formadas por m\u00e1s elementos que filas y celdas de datos. As\u00ed, es com\u00fan que las tablas m\u00e1s avanzadas dispongan de una secci\u00f3n de cabecera, una secci\u00f3n de pie y varias secciones de datos. Adem\u00e1s, tambi\u00e9n es posible agrupar varias columnas de forma l\u00f3gica para poder aplicar estilos similares a un determinado grupo de columnas.</p> <p>Las partes que componen las tablas complejas se definen mediante las etiquetas <code>&lt;thead&gt;</code>, correspondiente a la cabecera de tabla, <code>&lt;tbody&gt;</code>, correspondiente a cada secci\u00f3n de datos de la tabla, y <code>&lt;tfoot&gt;</code>, correspondiente al pie de la tabla.</p> <p>Cada tabla puede contener solamente una cabecera y un pie, pero puede incluir un n\u00famero ilimitado de secciones de datos, siempre y cuando est\u00e9n situados consecutivamente. Si se define una cabecera y/o un pie, las etiquetas <code>&lt;tbody&gt;</code> y <code>&lt;tfoot&gt;</code> deben colocarse despu\u00e9s de la etiqueta <code>&lt;thead&gt;</code>. Por su parte, la etiqueta <code>&lt;thead&gt;</code> debe situarse despu\u00e9s de la etiqueta <code>&lt;caption&gt;</code>.</p> <p>La etiqueta <code>&lt;tbody&gt;</code> permite realizar agrupaciones de filas, pero en ocasiones se necesitan agrupar columnas. Aunque su uso no es muy com\u00fan, HTML define dos etiquetas similares para marcar columnas: <code>&lt;col&gt;</code> y <code>&lt;colgroup&gt;</code>. La etiqueta <code>&lt;colgroup&gt;</code> (de column group) se emplea para agrupar de forma estructural varias columnas de la tabla. La forma habitual de indicar el n\u00famero de columnas que abarca la agrupaci\u00f3n es utilizar el atributo <code>span</code>, que establece el n\u00famero de columnas de cada agrupaci\u00f3n. Otra opci\u00f3n es en vez de usar el atributo span, incluir una o m\u00e1s etiquetas <code>&lt;col&gt;</code> que representen las columnas incluidas en dicho grupo de columnas. La etiqueta <code>&lt;colgroup&gt;</code> debe estar situada despu\u00e9s de la etiqueta <code>&lt;caption&gt;</code> pero antes de <code>&lt;thead&gt;</code>.</p> <p>Veamos una demostraci\u00f3n que incluye las etiquetas anteriores:</p> <p> See the Pen    Untitled by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-5/#estilizando-tablas","title":"Estilizando tablas","text":"<p>Las tablas tienen una serie de caracter\u00edsticas muy concretas en lo relativo a su estilo:</p> <ul> <li>Todas las celdas de la misma fila tienen la misma altura, independientemente de la altura de su contenido individual</li> <li>Todas la celdas que pertenecen a la misma columna tienen la misma anchura, tambi\u00e9n independientemente de su contenido individual.</li> <li>Las celdas adyacentes pueden compartir un borde, incluso si ambas poseen border con un estilo muy diferente.</li> <li>NO es posible establecer m\u00e1rgenes en los elementos internos de una tabla, como <code>&lt;tr&gt;</code>, <code>&lt;td&gt;</code> o <code>&lt;th&gt;</code>, aunque s\u00ed en el <code>&lt;caption&gt;</code>.</li> <li>Los \u00fanicos atributos CSS que tienen efecto sobre las columnas de una tabla son:<ul> <li><code>border</code>: (S\u00f3lo si border-collapse tiene el valor collapse).</li> <li><code>background</code>: S\u00f3lo afectar\u00e1 a celdas transparentes cuya fila tambi\u00e9n sea transparente.</li> <li><code>width</code>: Corresponder\u00e1 a la anchura m\u00ednima de las celdas de la columna, pero que podr\u00e1 ser mayor si el contenido de alguna celda lo fuerza.</li> <li>visibility: S\u00f3lo ser\u00e1n v\u00e1lidos el valor collapse, para que la columna se colapse y no se tenga en cuenta para la anchura de la tabla, y el valor hidden, para que no se muestre.</li> </ul> </li> <li>CSS define un mecanismo para insertar objetos an\u00f3nimos que suplan los que falten en la tabla. Por ejemplo, si no definimos una fila con <code>&lt;tr&gt;</code> pero s\u00ed incluimos etiquetas <code>&lt;td&gt;</code>, CSS incluir\u00e1 por nosotros la fila faltante.</li> <li>CSS define seis capas en las que es dibujada la tabla correspondientes a los siguientes elementos indicados desde el inferior hasta el superior: tabla, grupo de columnas, columnas, grupo de filas, filas y celdas. As\u00ed por ejemplo, el background de una fila se mostrar\u00e1 encima del background de una columna.</li> <li>El elemento correspondiente a la etiqueta <code>&lt;caption&gt;</code> hereda las propiedades heredables de la etiqueta <code>&lt;table&gt;</code>, como por ejemplo la propiedad <code>color</code>. Su anchura tambi\u00e9n corresponde a la de la tabla.</li> <li>Cuando se define una altura para la tabla, \u00e9sta es tratada como altura m\u00ednima, porque si el contenido de las celdas as\u00ed lo fuerza la altura de la tabla puede llegar a ser mayor. En realidad NO se recomienda definir la altura de las tablas, sino que \u00e9sta se calcule autom\u00e1ticamente.</li> </ul>"},{"location":"tema_4/page-5/#table-layout","title":"table-layout","text":"<p>Si queremos especificar c\u00f3mo se debe calcular el ancho de las columnas de la tabla podemos usar la propiedad CSS <code>table-layout</code>:</p> Propiedad <code>table-layout</code> Valores auto | fixed Se aplica a Tablas Valor inicial auto Heredada No Descripci\u00f3n Define el mecanismo de fusi\u00f3n de los bordes de las celdas adyacentes de una tabla <p>Valores posibles:</p> <ul> <li><code>auto</code>: La anchura de la tabla y de sus celdas es la necesaria para mostrar su contenido, por lo que unas columnas pueden ser mucho m\u00e1s anchas que otras, dependiendo del contenido que tengan. Adem\u00e1s, la tabla puede no llegar a ocupar el 100% del espacio disponible.</li> <li><code>fixed</code>: La anchura de la tabla y de sus columnas se establecen en base a la anchura expl\u00edcitamente especificada para la tabla (es necesario indicar la propiedad <code>width</code> para la tabla) y al reparto de dicho espacio realizado entre las celdas de la primera fila de la tabla. Si no se especifica expl\u00edcitamente la anchura en ninguna de dichas celdas, se reparte proporcionalmente la anchura de la tabla entre las celdas. Si para alguna celda se indica una determinada anchura, \u00e9sta es respectada, y la anchura restante en la tabla es repartida propocionalmente entre las celdas para las que no se ha especificado anchura alguna.</li> </ul> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    table-layout by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-5/#border-collapse-y-border-spacing","title":"border-collapse y border-spacing","text":"<p>CSS define dos modelos diferentes para el tratamiento de los bordes de las celdas. La propiedad que permite seleccionar el modelo de bordes es <code>border-collapse</code>:</p> Propiedad <code>border-collapse</code> Valores collapse | separated | inherit Se aplica a Tablas Valor inicial separate Heredada S\u00ed Descripci\u00f3n Define el mecanismo de fusi\u00f3n de los bordes de las celdas adyacentes de una tabla <p>El modelo <code>collapse</code> fusiona de forma autom\u00e1tica los bordes de las celdas adyacentes, mientras que el modelo <code>separate</code> fuerza a que cada celda muestre sus cuatro bordes. Por defecto, los navegadores utilizan el modelo <code>separate</code>, aunque en general los dise\u00f1adores prefieren el modelo <code>collapse</code> porque est\u00e9ticamente resulta m\u00e1s atractivo. Veamos un ejemplo:</p> <pre><code>table {\nborder-collapse: collapse;\n}\n</code></pre> <p>Si se opta por el modelo <code>separate</code> (que es el que se aplica si no se indica lo contrario) se puede utilizar la propiedad <code>border-spacing</code> para controlar la separaci\u00f3n entre los bordes de cada celda.</p> Propiedad <code>border-spacing</code> Valores unidad_medida unidad_medida? Se aplica a Tablas Valor inicial 0 Heredada S\u00ed Descripci\u00f3n Establece la separaci\u00f3n entre los bordes de las celdas adyacentes de una tabla <p>Si solamente se indica como valor una medida, se asigna ese valor como separaci\u00f3n horizontal y vertical. Si se indican dos medidas, la primera es la separaci\u00f3n horizontal y la segunda es la separaci\u00f3n vertical entre celdas.</p> <p>NO debemos pensar que establecer <code>border-spacing:0</code> produce el mismo efecto visual que <code>border-collapse: collapse</code>, ya que lo que ocurrir\u00e1 es que se mostrar\u00e1n los bordes con una anchura doble (correspondiente a los dos bordes pegados sin separaci\u00f3n).</p> <p>Si optamos por el modo <code>collapse</code>, debemos tener en cuenta lo siguiente:</p> <p>Si se especifica un <code>padding</code> para la tabla \u00e9ste NO se aplica. Lo que s\u00ed pueden tener es <code>margin</code>. De cada dos bordes adyacentes siempre prevalece el m\u00e1s interesante. Para determinarlo se siguen una serie de reglas de precedencia, indicadas a continuaci\u00f3n de m\u00e1s a menos prioridad: <code>border-style: hidden, m\u00e1s ancho, double, solid, dashed, dotted, etc, color celda, color fila, etc.</code>, el m\u00e1s alejado a la esquina superior izquierda.</p>"},{"location":"tema_4/page-5/#caption-side","title":"caption-side","text":"<p>Como hemos visto, el t\u00edtulo de las tablas se establece mediante el elemento <code>&lt;caption&gt;</code>, que por defecto se muestra encima de los contenidos de la tabla. La propiedad <code>caption-side</code> permite controlar la posici\u00f3n del t\u00edtulo de la tabla.</p> Propiedad <code>caption-side</code> Valores top | bottom | inherit Se aplica a Tablas Valor inicial top Heredada S\u00ed Descripci\u00f3n Establece la posici\u00f3n del t\u00edtulo de la tabla <p>El valor <code>bottom</code> indica que el t\u00edtulo de la tabla se debe mostrar debajo de los contenidos de la tabla. Si tambi\u00e9n se quiere modificar la alineaci\u00f3n horizontal del t\u00edtulo, debe utilizarse la propiedad <code>text-align</code>. Por ejemplo:</p> <pre><code>caption {\ncaption-side: bottom;\ntext-align: center;\n}\n</code></pre>"},{"location":"tema_4/page-5/#empty-cells","title":"empty-cells","text":"<p>La propiedad <code>empty-cells</code> permite establecer el tratamiento que deben recibir las celdas vac\u00edas de una tabla. Una celda vac\u00eda es aquella que no tiene ning\u00fan contenido, ni siquiera un espacio en blanco o un <code>&amp;nbsp</code>.</p> Propiedad <code>empty-cells</code> Valores show | hide | inherit Se aplica a Celdas de una tabla Valor inicial show Heredada S\u00ed Descripci\u00f3n Define el mecanismo utilizado para el tratamiento de las celdas vac\u00edas de una tabla <p>El valor <code>hide</code> indica que las celdas vac\u00edas no debe mostrar ni borde ni fondo. Por ejemplo:</p> <pre><code>table {\nempty-cells: hide;\n}\n</code></pre> <p>Un aspecto muy importante de esta propiedad es que s\u00f3lo se aplica cuando el modelo de bordes de la tabla es de tipo <code>separate</code>. Si queremos conseguir el mismo efecto en tablas donde hayamos establecido <code>border-collapse: collapse</code>, tendremos que hacerlo expl\u00edcitamente haciendo uso de la pseudoclase <code>:empty</code> (que selecciona un elemento vac\u00edo), de la siguiente forma:</p> <pre><code>th:empty, td:empty {\nborder: none;\nbackground-color: transparent;\n}\n</code></pre>"},{"location":"tema_4/page-5/#alineacion-vertical-del-contenido-de-las-celdas","title":"Alineaci\u00f3n vertical del contenido de las celdas","text":"<p>Por defecto, el contenido de las celdas est\u00e1 centrado vertical atendiendo a la altura de la misma, que a su vez es calculada por defecto con la altura correspondiente a la celda m\u00e1s alta de la fila. Si queremos variar este comportamiento podemos usar la propiedad <code>vertical-align</code> (que estudiaremos m\u00e1s en profundidad cuando hablemos del posicionamiento est\u00e1tico o normal) y asignarle el valor <code>top</code>, <code>middle</code> (valor por defecto) o <code>bottom</code>. Por ejemplo:</p> <pre><code>tbody td {\nvertical-align: top;\n}\n</code></pre>"},{"location":"tema_4/page-5/#tabla-rayada","title":"Tabla rayada","text":"<p>Un efecto visual muy extendido en las tablas es hacer que las filas pares tengan un color de fondo distinto que las filas impares. Para conseguir este efecto se hace uso de el selector de pseudoclase estructural <code>tr:nth-child(2n)</code>, que seleccionar\u00e1 s\u00f3lo las filas pares, y/o <code>tr:nth-child(2n+1)</code>, que seleccionar\u00e1 s\u00f3lo las filas impares. Por ejemplo:</p> <pre><code>tbody tr:nth-child(2n) {\nbackground-color: #CCC;\n}\n</code></pre>"},{"location":"tema_4/page-5/#scroll-horizontal","title":"Scroll horizontal","text":"<p>Las tablas de datos son, por su naturaleza, uno de los elementos que peor se adaptan a los distintos tama\u00f1os de pantalla. Por ese motivo, si se visualiza nuestra tabla en un viewport estrecho es muy probable que la tabla no puede ser visualizada en toda su anchura. La soluci\u00f3n m\u00e1s simple consiste en hacer que en ese caso se muestre una barra de scroll que permita al usuario desplazarse hacia los datos de la tabla que hayan quedado ocultos. Para conseguir este efecto, tendremos que incluir nuestro elemento <code>&lt;table&gt;</code> dentro de una etiqueta <code>&lt;div&gt;</code> que act\u00fae como contenedor de la tabla, y establecer la propiedad <code>overflow-x: auto</code> para dicho contenedor. As\u00ed el marcado HTML seguir\u00eda el siguiente esquema:</p> HTMLCSS <pre><code>&lt;div class=\"contenedor-tabla\"&gt;\n&lt;table&gt;\n  ...\n  &lt;/table&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>.contenedor-tabla {\noverflow-x: auto;\n}\n</code></pre>"},{"location":"tema_4/page-5/#hover-sobre-la-tabla","title":"Hover sobre la tabla","text":"<p>Otro de los efectos visuales m\u00e1s habituales en las tablas es hacer que conforme se pasa el rat\u00f3n por una fila, \u00e9sta cambie de color de fondo (y puede que de color del texto). Para conseguirlo basta con usar la pseudoclase <code>:hover</code> sobre el elemento adecuado. Por ejemplo:</p> <pre><code>tbody tr:hover {\nbackground-color: purple;\ncolor: white;\n}\n</code></pre> <p>Cuando usamos esta t\u00e9cnica con tablas donde hay celdas que tiene definido rowspan se nos presenta un problema, y es que cuando nos situamos sobre una celda que est\u00e1 contenida en la fila siguiente a una fila que contiene celdas con rowspan, dichas celdas no cambiar\u00e1n su fondo, ya que no se encuentran en la misma fila que la celda sobre la que nos encontramos, y sin embargo, visualmente parece que dichas celdas pertenecen a ambas filas.</p> <p>Para solucionar este inconveniente, agruparemos dichas filas en un elemento <code>&lt;tbody&gt;</code> y aplicaremos, por ejemplo, la siguiente regla CSS:</p> <pre><code>/* Selecciona las celdas que tienen atributo rowspan\ndentro de un tbody sobre el que estamos situados, y\nlas filas sobre las que nos encontramos */\ntbody:hover td[rowspan], tbody tr:hover {\nbackground-color: purple;\ncolor: white;\n}\n</code></pre>"},{"location":"tema_4/page-5/#ejemplo-avanzado","title":"Ejemplo avanzado","text":"<p>Veamos un ejemplo en el que se aplican varias de las t\u00e9cnicas descritas anteriormente:</p> <p> See the Pen    table css by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_4/page-5/#tabla-responsive","title":"Tabla responsive","text":"<p>Hacer que una tabla sea responsive es algo realmente complejo teniendo en cuenta la naturaleza de las mismas. La alternativa m\u00e1s habitual es, como hemos visto anteriormente, contener la tabla dentro de un elemento <code>div</code> contenedor y aplicarle a dicho contenedor el estilo <code>overflow: auto</code>.</p> <p>Sin embargo, podemos intentar que la tabla sea realmente responsive modificando su estructura atendiendo al espacio existente. En el siguiente enlace se muestra un ejemplo ilustrativo.</p>"},{"location":"tema_5/page-1/","title":"1 Modelo de formato visual","text":""},{"location":"tema_5/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>Uno de los aspectos m\u00e1s importantes y complejos de CSS es el conocido como modelo de formato visual, que determina qu\u00e9 tipo de caja genera cada elemento de nuestro documentos HTML. Como ya hemos comentado, CSS asigna a cada tipo de etiqueta (como <code>&lt;p&gt;</code>, <code>&lt;a&gt;</code>, etc.) un determinado modelo de formato visual. Por ejemplo, como ya comentamos, a las etiquetas <code>&lt;p&gt;</code> se les asigna por defecto el modelo de formato visual conocido como elemento en bloque o block, mientras que a las etiquetas <code>&lt;a&gt;</code> se les asigna por defecto el modelo de formato visual conocido como elemento en l\u00ednea o inline.</p>"},{"location":"tema_5/page-1/#display","title":"display","text":"<p>El modelo de formato visual est\u00e1 representado en CSS por la propiedad <code>display</code>, que nos permite asignar a un elemento un modelo distinto al que tiene por defecto. El valor de la propiedad <code>display</code> influye o condiciona al elemento en varios aspectos, tanto exteriormente como interiormente:</p> <ul> <li>Respecto a s\u00ed mismo: Establece si el elemento admite o no una serie de propiedades como tama\u00f1os, m\u00e1rgenes, etc., y define c\u00f3mo ser\u00e1 calculado el valor de dichas propiedades si no son admitidas.</li> <li>Respecto a sus hermanos: Determina el comportamiento y la relaci\u00f3n del elemento con sus elementos hermanos, tanto los que le preceden como los que le sucede. Por ejemplo, si debe forzar un salto de l\u00ednea en su dibujado o no.</li> <li>Respecto a sus hijos: Establece determinadas caracter\u00edsticas y comportamientos en sus elementos hijos, y habilita poder declarar una serie de propiedades en los hijos para controlarlos satisfactoriamente.</li> </ul> <p>En CSS 2.1 la propiedad display est\u00e1 definida de la siguiente manera:</p> Propiedad <code>display</code> Valores inline |block | list-item | run-in | inline-block | table | inline-table | table-row-group | table-header-group | table-footer-group | table-row | table-column-group | table-column | table-cell | table-caption | none | inherit Valor inicial inline Se aplica a Todos los elementos Definici\u00f3n Establece el tipo de caja generada por un elemento <p>Analicemos los valores m\u00e1s habituales:</p> <ul> <li><code>none</code>: hace que el elemento no genere ninguna caja para s\u00ed mismo ni para sus descendientes. El resultado es que el elemento desaparece por completo de la p\u00e1gina y no ocupa sitio, por lo que los elementos adyacentes ocupan su lugar.</li> <li><code>block</code>: Hace que el elemento sea de bloque.</li> <li><code>inline</code>: Hace que el elemento sea en l\u00ednea.</li> <li><code>inline-block</code>: Hace que el elemento se comporte como un elemento en bloque en su interior, pero de cara al exterior se comporte como un elemento en l\u00ednea.</li> </ul> <p>Tambi\u00e9n hay una serie de valores relacionados con el formato de tabla:</p> <ul> <li><code>table</code>: El elemento se comporta como una tabla. Es el valor asignado por el navegador a los elementos <code>&lt;tr&gt;</code>.</li> <li><code>table-header-group</code>: El elemento se comporta como un grupo de filas de encabezado de tabla. Es el valor asignado por el navegador a los elementos <code>&lt;thead&gt;</code>.</li> <li><code>table-footer-group</code>: El elemento se comporta como un grupo de filas de pie de tabla. Es el valor asignado por el navegador a los elementos <code>&lt;tfoot&gt;</code>.</li> <li><code>table-row-group</code>: El elemento se comporta como un grupo de filas de tabla. Es el valor asignado por el navegador a los elementos <code>&lt;tbody&gt;</code>.</li> <li><code>table-column-group</code>: El elemento se comporta como un grupo de columnas de tabla. Es el valor asignado por el navegador a los elementos <code>&lt;colgroup&gt;</code>.</li> <li><code>table-row</code>: El elemento se comporta como una fila de una tabla. Es el valor asignado por el navegador a los elementos <code>&lt;tr&gt;</code>.</li> <li><code>table-column</code>: El elemento se comporta como una columna de tabla. Es el valor asignado por el navegador a los elementos <code>&lt;col&gt;</code>.</li> <li><code>table-caption</code>: El elemento se comporta como un t\u00edtulo de tabla. Es el valor asignado por el navegador a los elementos <code>&lt;caption&gt;</code>.</li> <li><code>table-cell</code>: El elemento se comporta como una celda de tabla. Es el valor asignado por el navegador a los elementos <code>&lt;td&gt;</code> y <code>&lt;th&gt;</code>.</li> </ul> <p>CSS 3 ha a\u00f1adido dos nuevos valores muy interesantes que estudiaremos posteriormente:</p> <ul> <li><code>flex</code>: El elemento permite organizar sus hijos de forma flexible.</li> <li><code>grid</code>: El elemento permite organizar sus hijos en forma de cuadr\u00edcula.</li> </ul> <p>Finalmente disponemos de una serie de valores con poco uso:</p> <ul> <li><code>list-item</code>: El elemento se muestra como si fuera un elemento <code>&lt;li&gt;</code>. Se pueden utilizar con ellos las propiedades de listas, como <code>list-style-type</code>, <code>list-style-image</code>, <code>list-style-position</code> y <code>list-style</code>.</li> <li><code>run-in</code>: La caja generada por el elemento no pertenece al flujo del padre, sino que pasa a ser una caja en l\u00ednea dentro de su hermano sucesor. Este valor no es soportado por todos los navegadores.</li> </ul>"},{"location":"tema_5/page-1/#elementos-con-display-block","title":"Elementos con display: block","text":"<p>El navegador asigna por defecto a los elementos correspondientes a una serie de etiquetas la propiedad <code>display: block</code>. Como ya hemos visto, estos elementos reciben el nombre de elementos en bloque.</p> <p>Las siguientes etiquetas crean por defecto elementos en bloque: <code>&lt;address&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;aside&gt;</code>, <code>&lt;audio&gt;</code>, <code>&lt;blockquote&gt;</code>, <code>&lt;canvas&gt;</code>, <code>&lt;dd&gt;</code>, <code>&lt;div&gt;</code>, <code>&lt;dl&gt;</code>, <code>&lt;fieldset&gt;</code>, <code>&lt;figcaption&gt;</code>, <code>&lt;figure&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;form&gt;</code>, <code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code>, <code>&lt;h3&gt;</code>, <code>&lt;h4&gt;</code>, <code>&lt;h5&gt;</code>, <code>&lt;h6&gt;</code>, <code>&lt;header&gt;</code>, <code>&lt;hgroup&gt;</code>, <code>&lt;hr&gt;</code>, <code>&lt;li&gt;</code>, <code>&lt;main&gt;</code>, <code>&lt;nav&gt;</code>, <code>&lt;noscript&gt;</code>, <code>&lt;ol&gt;</code>, <code>&lt;output&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;pre&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;table&gt;</code>, <code>&lt;tfoot&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;video&gt;</code>.</p> <p>Cualquier otra etiqueta distinta a las anteriores puede producir un elemento en bloque si establecemos para \u00e9l la propiedad <code>display: block</code>.</p> <p>Los elementos con <code>display:block</code> tienen una serie de caracter\u00edsticas:</p> <ul> <li>Ocupan todo el espacio de su elemento padre (contenedor), creando as\u00ed un bloque.</li> <li>De forma predeterminada, comienzan en una nueva l\u00ednea.</li> <li>Pueden contener en su interior elementos en l\u00ednea y otros elementos en bloque.\u200b</li> </ul>"},{"location":"tema_5/page-1/#elementos-con-display-inline","title":"Elementos con display: inline","text":"<p>El navegador asigna por defecto a los elementos correspondientes a una serie de etiquetas la propiedad <code>display: inline</code>. Como ya hemos visto, estos elementos reciben el nombre de elementos en l\u00ednea.</p> <p>Las siguiente etiquetas crean por defecto elemento en l\u00ednea: <code>b</code>, <code>big</code>, <code>i</code>, <code>small</code>, <code>tt</code>, <code>abbr</code>, <code>acronym</code>, <code>cite</code>, <code>code</code>, <code>dfn</code>, <code>em</code>, <code>kbd</code>, <code>strong</code>, <code>samp</code>, <code>time</code>, <code>var</code>, <code>a</code>, <code>bdo</code>, <code>br</code>, <code>img</code>, <code>map</code>, <code>object</code>, <code>q</code>, <code>script</code>, <code>span</code>, <code>sub</code>, <code>sup</code>, <code>button</code>, <code>input</code>, <code>label</code>, <code>select</code>, <code>textarea</code>.</p> <p>Los elementos con <code>display: inline</code> tienen una serie de caracter\u00edsticas:</p> <p>Ocupan por defecto s\u00f3lo el espacio necesario para mostrar sus contenidos, por lo que no son afectados por las propiedades <code>width</code> y <code>height</code>.</p> <p>De forma predeterminada, NO es obligatorio que comiencen en una nueva l\u00ednea, sino que se sit\u00faan al lado del elemento anterior el la l\u00ednea actual.</p> <p>Si le especificamos margen vertical mediante las propiedades <code>margin-top</code>, <code>margin-bottom</code> o <code>margin</code>, este NO tiene efecto sobre la posici\u00f3n del elemento. Sin embargo, el margen horizontal, especificado mediante <code>margin-left</code>, <code>margin-right</code> o <code>margin</code> SI afecta al posicionamiento del elemento dentro de la l\u00ednea en la que se sit\u00fae.</p> <p>Si le especificamos relleno vertical mediante las propiedades <code>padding-top</code>, <code>padding-bottom</code> o <code>padding</code>, \u00e9ste NO altera la posici\u00f3n del elemento en la l\u00ednea en la que se sit\u00fae, aunque s\u00ed qu exista, como puede comprobarse si cambiamos el color de fondo del elemento. Sin embargo, el relleno horizontal, especificado mediante <code>padding-left</code>, <code>padding-right</code> o <code>padding</code> SI afecta al posicionamiento del elemento dentro de la l\u00ednea en la que se sit\u00fae.</p> <p>La etiqueta <code>&lt;img&gt;</code> es una excepci\u00f3n a este respecto, ya que aunque se trata de un elemento en l\u00ednea SI le afecta el relleno y el margen vertical a la hora de situarlo verticalmente.</p> <p>Pueden contener \u00fanicamente los datos y otros elementos en l\u00ednea, pero NO elementos en bloque.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    display inline by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-1/#elemento-con-display-inline-block","title":"Elemento con display: inline-block","text":"<p>Un elemento con <code>display: inline-block</code> es similar a un elemento en l\u00ednea, en el sentido de que se situar\u00e1 en la posici\u00f3n que le corresponde en la l\u00ednea continuando el flujo natural del texto (en la l\u00ednea base), pero a diferencia de \u00e9stos, podremos especificar para ellos una determinada anchura y altura, ya que las propiedades <code>width</code> y <code>height</code> SI les afectan.</p> <p>Si necesitamos ajustar la posici\u00f3n vertical respecto a otros elementos <code>inline</code> o <code>inline-block</code> podemos usar la propiedad <code>vertical-align</code>.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    display inline-block by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-1/#elemento-con-display-table","title":"Elemento con display: table","text":"<p>Un elemento con <code>display: table</code> hace que dicho elemento se comporte como si correspondiera a una etiqueta <code>&lt;table&gt;</code>. Es parecido a un elemento en bloque, pero por defecto ocupa s\u00f3lo en ancho que se necesite para mostrar el contenido.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    display table by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-1/#vertical-align","title":"vertical-align","text":"<p>En los elementos con <code>display: inline</code> o <code>display: inline-block</code> podemos especificar c\u00f3mo queremos que se alineen verticalmente dentro de la propia l\u00ednea. Para controlar este aspecto CSS nos proporciona la propiedad <code>vertical-align</code>.</p> Propiedad vertical-align Valores baseline | sub | super | top | text-top | middle | bottom | text-bottom | porcentaje | unidad de medida | inherit Se aplica a Elementos en l\u00ednea y celdas de tabla Valor inicial baseline Descripci\u00f3n Determina la alineaci\u00f3n vertical del elemento en l\u00ednea respecto a \"l\u00ednea\" en la que se encuentra <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    vertical-align by irubenboy (@irubenboy)   on CodePen. </p> <p>Adem\u00e1s esta propiedad tambi\u00e9n puede ser usada en las celdas de las tablas para controlar la alineaci\u00f3n vertical de su contenido, como podemos comprobar en el apartado sobre tablas.</p> <p>Aunque pueda parecer que esta propiedad podr\u00e1 resolver todos nuestros problemas sobre alineaci\u00f3n vertical, la realidad es que su funcionalidad est\u00e1 limitada a elementos en linea o <code>inline-block</code>, por lo que no es tan \u00fatil como podr\u00eda parecer. En realidad existen distintas t\u00e9cnicas para alinear verticalmente los elementos hijos dentro de un elemento padre, de entre las que destacamos el uso de <code>display: flex</code>, como veremos dentro de poco.</p> <p>Para saber todas las t\u00e9cnicas de centrado, tanto horizontal como vertical, se recomienda encarecidamente visitar la siguiente gu\u00eda de centrado horizontal y vertical.</p>"},{"location":"tema_5/page-2/","title":"2 Multicolumnas","text":""},{"location":"tema_5/page-2/#numero-y-ancho-de-columnas","title":"N\u00famero y ancho de columnas","text":"<p>Si queremos mejorar la legibilidad del texto de nuestra p\u00e1gina web podemos hacer que \u00e9ste se muestre en varias columnas.</p> <p>La propiedad <code>column-count</code> permite especificar el n\u00famero de columnas en la que debe mostrarse el contenido de un elemento en bloque, asign\u00e1ndole un valor entero positivo o el valor auto.</p> Propiedad <code>column-count</code> Valores  | auto | inherit Se aplica a Elementos en bloque, inline-block o celdas de tablas Valor inicial auto Descripci\u00f3n Define el n\u00famero de columnas en las que se muestra el contenido de un elemento <p>Si se especifica el valor <code>auto</code> el n\u00famero de columnas se calcula autom\u00e1ticamente atendiendo al valor de la propiedad <code>column-width</code>.</p> <p>Por su parte, la propiedad <code>column-width</code> permite especificar la anchura m\u00e1xima de cada una de la columnas. La anchura puede ser menor a la especificada si no hay suficiente anchura en el elemento.</p> Propiedad <code>column-width</code> Valores auto Se aplica a Elementos en bloque, inline-block o celdas de tablas Valor inicial auto Descripci\u00f3n Define la anchura m\u00e1xima de las columnas en las que se muestra el contenido de un elemento <p>Si se especifica el valor <code>auto</code> la anchura de las columnas corresponder\u00e1 al reparto equitativo de la anchura del elemento entre el n\u00famero de columnas especificadas mediante <code>column-count</code>, que deber\u00e1 recibir un n\u00famero entero positivo.</p> <p>Finalmente, disponemos de la propiedad shorthand <code>columns</code> que permite especificar las dos propiedades anteriores de una vez.</p> Propiedad <code>columns</code> Valores Se aplica a Elementos en bloque, inline-block o celdas de tablas Valor inicial auto auto Descripci\u00f3n Define la anchura m\u00e1xima de las columnas y el n\u00famero de columnas en las que se muestra el contenido de un elemento <p>Si se especifica <code>column: auto auto</code> el contenido del elemento se mostrar\u00e1 en una \u00fanica columna con toda la anchura disponible, es decir, lo habitual en elementos en bloque.</p> <p>Si ninguno de los dos valores es <code>auto</code>, el valor especificado para <code>column-count</code> act\u00faa como l\u00edmite m\u00e1ximo de n\u00famero de columnas, de manera que se ajusta la anchura de las columnas de manera que sea lo m\u00e1s cercano a al valor de <code>column-width</code> sin crear nunca m\u00e1s columnas de lo indicado para <code>column-count</code>.</p>"},{"location":"tema_5/page-2/#espacio-entre-columnas","title":"Espacio entre columnas","text":"<p>La propiedad <code>column-gap</code> nos permite especificar la cantidad de espacio de separaci\u00f3n que se debe dejar entre columnas, que NO puede ser negativo.</p> Propiedad <code>column-gap</code> Valores  | normal Se aplica a Elementos multicolumnas Valor inicial normal Descripci\u00f3n Define la anchura del espacio en blanco entre columnas de un elemento multicolumna <p>Cuando se indica el valor <code>normal</code>, se usa la anchura entre columnas por defecto definida por el navegador.</p> <p>En algunas ocasiones se quiere mostrar una l\u00ednea vertical separadora entre las columnas. Para ello podemos usar la propiedad <code>column-rule</code>, que no deja de ser una propiedad shorthand de <code>column-rule-width</code>, <code>column-rule-style</code> y <code>column-rule-color</code>. Todas estas propiedades reciben los mismos valores que reciben respectivamente <code>border-right</code>, <code>border-right-width</code>, <code>border-right-style</code> y <code>border-right-color</code>. As\u00ed que mediante la propiedad <code>column-rule</code> podemos indicar el grosor, el estilo y el color de la l\u00ednea vertical de separaci\u00f3n que se debe mostrar entre columnas.</p> Propiedad <code>column-rule-width</code> Valores thin | medium | thick Se aplica a Elementos multicolumnas Valor inicial medium Descripci\u00f3n Define la anchura de la l\u00ednea vertical de separaci\u00f3n entre columnas de un elemento multicolumna Propiedad <code>column-rule-style</code> Valores none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset Se aplica a Elementos multicolumnas Valor inicial none Descripci\u00f3n Define el estilo de la l\u00ednea vertical de separaci\u00f3n entre columnas de un elemento multicolumna <p>Por defecto tiene el valor none, por lo que NO se muestra.</p> Propiedad <code>column-rule-color</code> Valores  | transparent Se aplica a Elementos multicolumnas Valor inicial current color Descripci\u00f3n Define el color de la l\u00ednea vertical de separaci\u00f3n entre columnas de un elemento multicolumna <p>Y la propiedad shorthand:</p> Propiedad <code>column-rule</code> Valores Se aplica a Elementos multicolumnas Valor inicial normal Descripci\u00f3n Define la anchura, el estilo y el color de la l\u00ednea vertical de separaci\u00f3n entre columnas de un elemento multicolumna"},{"location":"tema_5/page-2/#llenado-de-columnas","title":"Llenado de columnas","text":"<p>Cuando especificamos expl\u00edcitamente la altura del elemento multicolumna mediante la propiedad <code>height</code>, podemos controlar c\u00f3mo deben rellenarse las columnas con el contenido del elemento. Para ello haremos uso de las propiedad <code>column-fill</code>, que s\u00f3lo est\u00e1 disponible en Firefox. Por defecto su valor es <code>balance</code>, que indica que el contenido se divide equitativamente en las columnas. Si queremos que el comportamiento en Firefox sea similar al del resto de navegadores (que no disponen de esta propiedad), deberemos especificar el valor <code>auto</code>, que har\u00e1 que las columnas se rellenen secuencialmente hasta completar la altura del elemento.</p> Propiedad <code>column-fill</code> Valores balance | auto Se aplica a Elementos multicolumnas Valor inicial balance Descripci\u00f3n Indica la forma de relleno de las columnas <p> See the Pen    column-fill by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-2/#expansion-de-un-elemento-en-todas-las-columnas","title":"Expansi\u00f3n de un elemento en todas las columnas","text":"<p>Algunas veces queremos que un elemento en bloque hijo del contenedor multicolumna ocupe todas las columnas, para mostrarse como si de un titular se tratase. Para ello podemos usar la propiedad <code>column-span</code> y asignarle el valor <code>all</code>. Su valor por defecto es <code>none</code>, que hace que NO se expanda, sino que aparezca s\u00f3lo dentro de la columna que le corresponda.</p> Propiedad <code>column-span</code> Valores all | none Se aplica a Elementos multicolumnas Valor inicial none Descripci\u00f3n Indica si el elemento hijo en bloque debe ocupar o no todas las columnas de un elemento padre multicolumna"},{"location":"tema_5/page-2/#adaptacion-de-columnas-al-tamano-del-viewport","title":"Adaptaci\u00f3n de columnas al tama\u00f1o del viewport","text":"<p>Como hemos comentado, si especificamos una anchura para <code>column-width</code> y el valor <code>auto</code> para <code>column-count</code>, el n\u00famero de columnas se va adaptando a la anchura disponible, de manera que la anchura de las columnas se asemeje lo mayor posible a la anchura indicada mediante <code>column-width</code>. De esta manera nos aseguramos de que las columnas no quedan muy estrechas en anchuras de pantalla peque\u00f1as, pero, como contrapartida, puede hacer que se creen demasiadas columnas cuando el ancho de pantalla sea muy grande.</p> <p>En el extremo contrario tenemos el caso en el que se especifica el valor auto para <code>column-width</code> y un entero positivo para <code>column-count</code>. En ese caso no se crear\u00e1n m\u00e1s columnas del n\u00famero especificado en <code>column-count</code>, con lo cu\u00e1l no tendremos problemas en dispositivos con una anchura de pantalla muy grande. Sin embargo si se tratan de dispositivos con muy poca anchura de pantalla, las columnas resultantes pueden llegar a ser demasiado estrechas.</p> <p>Por tanto, ninguno de los dos sistemas \"autom\u00e1ticos\" son aceptables en todos los casos. Por este motivo, si queremos tenemos un control m\u00e1s exhaustivo sobre el n\u00famero y la anchura de las columnas para todos las anchuras distintas de dispositivos, lo m\u00e1s habitual es especificar un valor distinto de auto tanto en <code>column-count</code> como en <code>column-width</code>, y usar media queries para modificar los valores de dichas propiedades atendiendo a la anchura del dispositivo. Por ejemplo:</p> <pre><code>@media (min-width: 800px) {\n.long-columns {\ncolumns: 3 200px;\n}\n}\n</code></pre> <p>Por otra parte, si no se especifica expl\u00edcitamente la altura del elemento multicolumna, \u00e9sta se calcula autom\u00e1ticamente atendiendo a su contenido y al n\u00famero y anchura de las columnas en las que se muestre. Es decir, la altura por defecto del elemento multicolumna crece conforme se reduce el n\u00famero de columnas.</p> <p>Si expl\u00edcitamente se especifica una determinada altura para el elemento multicolumna, al hacer m\u00e1s estrecho el viewport se mostrar\u00e1 una barra de scroll horizontal para mostrar el resto de columnas, porque al no poder crecer verticalmente dado que se le ha indicado una altura fija se ve obligado a crecer horizontalmente. Normalmente este comportamiento no es el deseado, por lo que se suele usar una media query para volver a establecer la altura del elemento multicolumna al valor auto cuando la anchura del viewport sea peque\u00f1a. Por ejemplo:</p> <pre><code>.responsive-height {\nheight: 250px;\n}\n\u200b\n@media (max-width: 1040px) {\n.responsive-height {\nheight: auto;\n}\n}\n</code></pre> <p>En el extremo contrario tenemos el caso en el que la altura autom\u00e1tica del elemento multicolumna se hace tan grande que el usuario debe estar haciendo scroll vertical para leer las columnas. En ese caso, es una buena idea dejar de emplear columnas cuando la altura del elemento sea mayor que la altura del viewport. Por ejemplo:</p> <pre><code>@media (min-width: 800px) {\n.long-columns {\ncolumns: 3 200px;\n}\n}\n</code></pre> <p>En este caso, s\u00f3lo ses emplean columnas cuando la anchura del viewport es tal que el usuario no tendr\u00e1 que hacer scroll vertical para leer el contenido multicolumna.</p>"},{"location":"tema_5/page-2/#demo","title":"Demo","text":"<p>Veamos una demostraci\u00f3n</p> <p> See the Pen    Untitled by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-3/","title":"3 Posicionamiento","text":""},{"location":"tema_5/page-3/#introduccion","title":"Introducci\u00f3n","text":"<p>Cuando los navegadores descargan el contenido HTML y CSS de las p\u00e1ginas web, aplican un procesamiento muy complejo antes de mostrar las p\u00e1ginas en la pantalla del usuario (renderizado). Para cumplir con el modelo de cajas, los navegadores crean una caja para representar a cada elemento de la p\u00e1gina HTML.</p> <p>Al conjunto de algoritmos que definen c\u00f3mo se muestra cada elemento en pantalla se le conoce como layout model, y dichos algoritmos tienen en cuenta distintos factores a la hora de dibujar la caja correspondiente a un elemento:</p> <ul> <li>Todas las propiedades de la caja relacionadas con el modelo de caja: <code>width</code> (anchura), <code>height</code> (altura), <code>box-sizing</code>, <code>padding</code> (relleno), <code>border</code> (borde). El modo de visualizaci\u00f3n del elemento, es decir, si es un elemento en bloque, en l\u00ednea, etc., representado por la propiedad <code>display</code>.</li> <li>El modo de posicionamiento de la caja, representado por las propiedades <code>position</code> y <code>float</code>.</li> <li>Las relaciones entre elementos atendiendo a d\u00f3nde aparecen en el archivo HTML (quienes son su padre, sus hermanos y sus hijos). Al \u00e1rbol de nodos especificados en el archivo HTML se le conoce como DOM (Document Object Model, modelo de objetos del documento).</li> <li>Otro tipo de informaci\u00f3n, como por ejemplo el tama\u00f1o de las im\u00e1genes y el tama\u00f1o de la ventana del navegador. Los navegadores crean y posicionan de forma autom\u00e1tica todas las cajas que forman cada p\u00e1gina HTML, atendiendo al conocido como flujo normal, que consiste en que \u00e9stos aparezcan de arriba a abajo y de izquierda a derecha atendiendo al orden en que aparecen en el documento HTML. Adem\u00e1s, los elementos que aparecen despu\u00e9s en el DOM se muestran en capas superiores a los anteriores y los hijos en capas por encima de las de los padres.</li> </ul> <p>No obstante, CSS permite al dise\u00f1ador modificar la posici\u00f3n en la que se muestra cada caja. Utilizando las propiedades que proporciona CSS para alterar la posici\u00f3n de las cajas es posible realizar efectos muy avanzados y dise\u00f1ar estructuras de p\u00e1ginas que de otra forma no ser\u00edan posibles.</p>"},{"location":"tema_5/page-3/#posicionamiento","title":"Posicionamiento","text":"<p>El est\u00e1ndar de CSS define los siguientes modos diferentes para posicionar una caja:</p> <ul> <li>Est\u00e1tico o normal (static): se trata del posicionamiento que utilizan los navegadores por defecto si no se indica lo contrario.</li> <li>Relativo (relative): variante del posicionamiento normal que consiste en posicionar una caja seg\u00fan el posicionamiento normal y despu\u00e9s desplazarla respecto de su posici\u00f3n original.</li> <li>Absoluto (absolute): la posici\u00f3n de una caja se establece de forma absoluta respecto de su elemento contenedor y el resto de elementos de la p\u00e1gina ignoran la nueva posici\u00f3n del elemento.</li> <li>Fijo (fixed): variante del posicionamiento absoluto que convierte una caja en un elemento inamovible, de forma que su posici\u00f3n en la pantalla siempre es la misma independientemente del resto de elementos e independientemente de si el usuario hace scroll en la ventana del navegador.</li> </ul>"},{"location":"tema_5/page-3/#reglas-css-sobre-el-posicionamiento","title":"Reglas CSS sobre el posicionamiento","text":"<p>La propiedad CSS m\u00e1s importante para determinar el posicionamiento de las cajas es <code>position</code>, que permite establecer el modo de posicionamiento para la misma, excepto de en el caso del posicionamiento flotante, que se realiza mediante la propiedad <code>float</code>, que veremos m\u00e1s adelante.</p> Propiedad <code>position</code> Valores static | relative | absolute | fixed | sticky | inherit Se aplica a Todos los elementos Valor inicial static Descripci\u00f3n Selecciona el posicionamiento con el que se mostrar\u00e1 el elemento <p>Normalmente, cuando se posiciona una caja con el modo relativo, absoluto, fijo o pegajoso, tambi\u00e9n es necesario desplazarla respecto de su posici\u00f3n original o respecto de otro origen de coordenadas. CSS define cuatro propiedades llamadas <code>top</code>, <code>right</code>, <code>bottom</code> y <code>left</code> para controlar el desplazamiento de las cajas posicionadas.</p> Propiedad <code>top</code>, <code>right</code>. <code>bottom</code>, <code>left</code> Valores unidad_medida | porcentaje | auto | inherit Se aplica a Todos los elementos posicionados Valor inicial auto Descripci\u00f3n Indican el desplazamiento horizontal y vertical del elemento respecto de su posici\u00f3n original <p>Si el desplazamiento se indica en forma de porcentaje, en las propiedades <code>right</code> y <code>left</code> se refiere al porcentaje sobre la anchura,del elemento, y en las propiedades <code>top</code> y <code>bottom</code> al porcentaje sobre la altura del elemento.</p> <p>La interpretaci\u00f3n de sus valores depende del tipo de posicionamiento establecido para el elemento:</p> <ul> <li>En los posicionamientos est\u00e1tico (normal) y flotante, estas propiedades son ignoradas.</li> <li>En el posicionamiento relativo cada una de estas propiedades indica el desplazamiento del elemento desde la posici\u00f3n original de su borde superior/derecho/inferior/izquierdo.</li> <li>En los posicionamientos absoluto y fijo estas propiedades indican el desplazamiento del elemento respecto del borde superior/derecho/inferior/izquierdo de su primer elemento antecesor no posicionado de forma est\u00e1tica (normal), o el viewport si todos sus antecesores usan posicionamiento est\u00e1tico.</li> </ul>"},{"location":"tema_5/page-3/#posicionamiento-estatico-o-normal","title":"Posicionamiento est\u00e1tico o normal","text":"<p>El posicionamiento normal o est\u00e1tico es el modelo que utilizan por defecto los navegadores para mostrar los elementos de las p\u00e1ginas. En este modelo, s\u00f3lo se tiene en cuenta si el elemento es de bloque o en l\u00ednea, las propiedades del modelo de caja, como <code>width</code>, <code>height</code>, <code>box-sizing</code>, etc. y su contenido.</p> <p>Los elementos de bloque forman lo que CSS denomina contextos de formato de bloque. En este tipo de contextos, las cajas se muestran una debajo de otra comenzando desde el principio del elemento contenedor. La distancia entre las cajas se controla mediante los m\u00e1rgenes verticales.</p> <p> Figura 1 - Elemento de bloque</p> <p>Si un elemento se encuentra dentro de otro, el elemento padre se llama elemento contenedor y determina tanto la posici\u00f3n como el tama\u00f1o de todas sus cajas interiores.</p> <p>Si un elemento no se encuentra dentro de un elemento contenedor, entonces su elemento contenedor es el elemento <code>&lt;body&gt;</code> de la p\u00e1gina. Normalmente, la anchura de los elementos de bloque est\u00e1 limitada a la anchura de su elemento contenedor, aunque en algunos casos sus contenidos pueden desbordar el espacio disponible.</p> <p>Por su parte, los elementos en l\u00ednea forman los contextos de formato en l\u00ednea. En este tipo de contextos, las cajas se muestran una detr\u00e1s de otra de forma horizontal comenzando desde la posici\u00f3n m\u00e1s a la izquierda de su elemento contenedor. La distancia entre las cajas se controla mediante los m\u00e1rgenes laterales.</p> <p> Figura 2 - Elementos en l\u00ednea</p> <p>Si las cajas en l\u00ednea ocupan m\u00e1s espacio del disponible en su propia l\u00ednea, el resto de cajas se muestran en las l\u00edneas inferiores.</p> <p>Veamos una demostraci\u00f3n de posicionamiento est\u00e1tico o normal:</p> <p> See the Pen    position: static by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-3/#posicionamiento-relativo","title":"Posicionamiento relativo","text":"<p>El posicionamiento relativo desplaza una caja respecto de su posici\u00f3n original establecida mediante el posicionamiento normal. El desplazamiento de la caja se controla con las propiedades <code>top</code>, <code>right</code>, <code>bottom</code> y <code>left</code>.</p> <p>El valor de la propiedad <code>top</code> se interpreta como el desplazamiento entre el borde superior de la caja en su posici\u00f3n final y el borde superior de la misma caja en su posici\u00f3n original. De la misma forma, el valor de las propiedades <code>left</code>, <code>right</code> y <code>bottom</code> indican respectivamente el desplazamiento entre el borde izquierdo/derecho/inferior de la caja en su posici\u00f3n final y el borde izquierdo/derecho/inferior de la caja original.</p> <p>Por tanto, la propiedad <code>top</code> se emplea para mover las cajas de forma descendente, la propiedad <code>bottom</code> mueve las cajas de forma ascendente, la propiedad <code>left</code> se utiliza para desplazar las cajas hacia la derecha y la propiedad <code>right</code> mueve las cajas hacia la izquierda. Este comportamiento parece poco intuitivo y es causa de errores cuando se empiezan a dise\u00f1ar p\u00e1ginas con CSS. Tambi\u00e9n se puede decir, que cuando usamos algunas de esas propiedad, es la distancia que hay desde dicha perspectiva al elemento, por ejemplo, si usamos <code>top</code> el elemento se posiciona donde la distancia sea la indica con respecto la perspectiva <code>top</code>. Si se utilizan valores negativos en las propiedades <code>top</code>, <code>right</code>, <code>bottom</code> y <code>left</code>, su efecto es justamente el inverso.</p> <p>Si tanto <code>left</code> como <code>right</code> tienen valores distintos de auto, que es el valor por defecto, uno de los dos valores se tiene que ignorar porque son mutuamente excluyentes. Para determinar la propiedad que se tiene en cuenta, se considera el valor de la propiedad <code>direction</code>, que vimos en un apartado anterior, de manera que si <code>direction</code> tiene el valor <code>ltr</code> (valor por defecto) prevalecer\u00e1 el valor de la propiedad <code>left</code>, y si direction tiene el valor <code>rtl</code>, prevalecer\u00e1 el valor de <code>right</code>.</p> <p>El desplazamiento relativo de una caja NO afecta al resto de cajas adyacentes, que se muestran en la misma posici\u00f3n que si la caja desplazada no se hubiera movido de su posici\u00f3n original. El principal problema de posicionar elementos de forma relativa es que se pueden producir solapamientos con otros elementos de la p\u00e1gina.</p> <p> Figura 3 - Posicionamiento relativo</p> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    position: relative by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-3/#z-index","title":"z-index","text":"<p>Cuando posicionamos elementos con un tipo de posicionamiento distinto del normal se pueden producir solapamientos con otros elementos de la p\u00e1gina. CSS nos proporciona la propiedad <code>z-index</code> para controlar la posici\u00f3n de un elemento sobre el eje Z (profundidad). Esta aplicaci\u00f3n s\u00f3lo afecta a elementos cuyo posicionamiento sea distinto al posicionamiento est\u00e1tico o normal.</p> Propiedad <code>z-index</code> Valores auto | n\u00famero | inherit Se aplica a Elementos que han sido posicionados expl\u00edcitamente Valor inicial auto Descripci\u00f3n Establece el nivel tridimensional en el que se muestra el elemento <p>El valor m\u00e1s com\u00fan de la propiedad <code>z-index</code> es un n\u00famero entero, que puede ser positivo o negativo. Cuanto m\u00e1s alto sea el valor num\u00e9rico, m\u00e1s cerca del usuario se muestra la caja.</p> <p>Si no especificamos la propiedad <code>z-index</code> para ning\u00fan elemento, \u00e9stos se apilan en el orden en el que aparecen definidos en el documento. Los elementos con posicionamiento distinto al posicionamiento est\u00e1tico siempre aparec\u00edan por encima de los elementos con posicionamiento est\u00e1tico. Si asignamos un valor negativo a la propiedad <code>z-index</code> conseguiremos que aparezca detr\u00e1s.</p> <p>Un hijo puede estar detr\u00e1s de su padre s\u00f3lo si el padre no tiene un <code>z-index</code> declarado.</p> <p>Otro aspecto importante es que esta propiedad respeta la jerarqu\u00eda de elementos. Esto es, si un elemento B se sit\u00faa por encima de un elemento A, un elemento hijo de A, nunca podr\u00e1 situarse por encima del elemento B, aunque establezcamos un valor mayor a su propiedad <code>z-index</code>. Sirva de ejemplo la siguiente imagen:</p> <p> Figura 4 - z-index</p>"},{"location":"tema_5/page-3/#posicionamiento-absoluto","title":"Posicionamiento absoluto","text":"<p>El posicionamiento absoluto se emplea para establecer de forma exacta la posici\u00f3n en la que se muestra la caja de un elemento. Su posici\u00f3n inicial es igual a su posici\u00f3n seg\u00fan su posicionamiento est\u00e1tico, pero podemos indicar la nueva posici\u00f3n de la caja mediante las propiedades <code>top</code>, <code>right</code>, <code>bottom</code> y <code>left</code>.</p> <p>Cuando una caja se posiciona de forma absoluta, el resto de elementos de la p\u00e1gina S**\u00cd se ven afectados y modifican su posici\u00f3n**. Al igual que en el posicionamiento relativo, cuando se posiciona de forma absoluta una caja es probable que se produzcan solapamientos con otras cajas.</p> <p> Figura 5 - Posicionamiento absoluto</p> <p>En la imagen anterior, la caja 2 est\u00e1 posicionada de forma absoluta, lo que provoca que el resto de elementos de la p\u00e1gina modifiquen su posici\u00f3n. En concreto, la caja 3 deja su lugar original y pasa a ocupar el hueco dejado por la caja 2.</p> <p>La interpretaci\u00f3n de los valores de estas propiedades es mucho m\u00e1s compleja que en el posicionamiento relativo, ya que en este caso depende del elemento que se tome como referencia. Para identificar dicho elemento:</p> <ul> <li>Se recorren todos los elementos contenedores (antepasados) empezando por el m\u00e1s cercano a la caja, subiendo por la jerarqu\u00eda de elementos.</li> <li>El primer elemento contenedor que est\u00e9 posicionado de cualquier forma diferente a <code>position: static</code> se elige como elemento de referencia.</li> <li>Si ning\u00fan elemento contenedor se ha posicionado con un modo diferente a <code>position: static</code>, se elige como elemento de referencia el viewport (no confundir con el elemento <code>&lt;body&gt;</code>). Una vez determinada el elemento de referencia del posicionamiento absoluto, los valores de las propiedades <code>top</code>, <code>right</code>, <code>bottom</code> y <code>left</code> se interpretan como el desplazamiento desde el borde superior/derecho/inferior/izquierdo de la caja hasta el borde superior/derecho/inferior/izquierdo del elemento de referencia.</li> </ul> <p>Por tanto, si se quiere posicionar un elemento de forma absoluta respecto de su elemento contenedor, es imprescindible posicionar este \u00faltimo. Lo m\u00e1s habitual, en este caso, es posicionar el elemento contenedor con <code>position: relative</code> y no asignarle ning\u00fan valor a <code>top</code>, <code>right</code>, <code>bottom</code> y <code>left</code>, para que el contenedor no se vea desplazado.</p> <p>De esta manera cuando posicionemos un elemento hijo de este contenedor con posicionamiento absoluto se tomar\u00e1 como elemento de referencia su elemento contenedor (su padre).</p> <p>Veamos una demostraci\u00f3n en el que se posiciona la caja2 de forma absoluta sin que ninguno de sus antepasados tenga un posicionamiento diferente al posicionamiento est\u00e1tico o normal, por lo que se elegir\u00e1 como elemento de referencia el viewport del navegador, mientras que el t\u00edtulo de la caja4 se posiciona de forma absoluta respecto a su elemento padre que es la caja4, a la que se establece un posicionamiento relativo:</p> <p> See the Pen    position: absolute by irubenboy (@irubenboy)   on CodePen. </p> <p>De esta forma el posicionamiento absoluto permite hacer que un elemento se visualice fuera de los l\u00edmites de su padre, en unas coordenadas relativas a \u00e9l, siempre y cuando establezcamos un posicionamiento distinto a est\u00e1tico para el padre.</p> <p>Otro aspecto muy interesante de los elementos posicionados de manera absoluta es que si NO se especifica expl\u00edcitamente su tama\u00f1o mediante width y height, al establecerla un posicionamiento absoluto, su tama\u00f1o pasar\u00e1 a ser el estrictamente necesario para cubrir el contenido, incluso aunque la etiqueta corresponda a un elemento de bloque. Veamos un ejemplo:</p> <p> See the Pen    position:absolute without width by irubenboy (@irubenboy)   on CodePen. </p> <p>A\u00fan as\u00ed no debemos olvidar que el posicionamiento absoluto puede crear solapamiento de los elementos, ya que el elemento posicionado de forma absoluta puede invadir el espacio visual de otros.</p>"},{"location":"tema_5/page-3/#posicionamiento-fijo","title":"Posicionamiento fijo","text":"<p>El est\u00e1ndar CSS considera que el posicionamiento fijo es un caso particular del posicionamiento absoluto, ya que s\u00f3lo se diferencian en el comportamiento de las cajas posicionadas.</p> <p>Su posici\u00f3n inicial es igual a su posici\u00f3n seg\u00fan su posicionamiento est\u00e1tico, pero podemos indicar la nueva posici\u00f3n de la caja mediante las propiedades <code>top</code>, <code>right</code>, <code>bottom</code> y <code>left</code>.</p> <p>Cuando una caja se posiciona de forma fija, la forma de obtener el origen de coordenadas para interpretar su desplazamiento es id\u00e9ntica al posicionamiento absoluto. De hecho, si el usuario no mueve la p\u00e1gina HTML en la ventana del navegador, no existe ninguna diferencia entre estos dos modelos de posicionamiento.</p> <p>La principal caracter\u00edstica de una caja posicionada de forma fija es que su posici\u00f3n es inamovible dentro de la ventana del navegador. El posicionamiento fijo hace que las cajas no modifiquen su posici\u00f3n ni aunque el usuario haga scroll en la p\u00e1gina dentro del navegador. Casi siempre el elemento de referencia es el viewport. El significado de los valores de las propiedades <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> y <code>z-index</code> es similar que en el caso del posicionamiento absoluto.</p> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    position: fixed by irubenboy (@irubenboy)   on CodePen. </p> <p>Este tipo de posicionamiento se suele emplear para crear encabezados o pies de p\u00e1gina fijos. Veamos una demostraci\u00f3n:</p> <p> See the Pen    header with position:fixed by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-3/#posicionamiento-pegajosos","title":"Posicionamiento pegajosos","text":"<p>Este tipo de posicionamiento, hace que la caja se comporte como si tuviera el posicionamiento relativo dentro de su padre, hasta que se llega a un determinado umbral de desplazamiento dentro del viewport, superado el cual se comporta como si su posicionamiento fuera fijo. No se trata de un modo est\u00e1ndar, pero es soportado por la mayor\u00eda de los navegadores. Veamos una demostraci\u00f3n:</p> <p> See the Pen    position:sticky by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-4/","title":"4 Cajas Flotantes","text":""},{"location":"tema_5/page-4/#introduccion","title":"Introducci\u00f3n","text":"<p>Con objeto de permitir al texto flotar alrededor de una imagen, tal y como ocurre en los peri\u00f3dicos, CSS incluy\u00f3 la posibilidad de establecer que una caja tuviera un posicionamiento flotante. Cuando una caja se posiciona con el modelo de posicionamiento flotante, autom\u00e1ticamente se convierte en una caja flotante, lo que significa que se desplaza hasta la zona m\u00e1s a la izquierda o m\u00e1s a la derecha de la posici\u00f3n en la que originalmente se encontraba, saliendo del flujo habitual.</p> <p>La siguiente imagen muestra el resultado de posicionar de forma flotante hacia la derecha la caja 1:</p> <p> Figura 6 - Posicionamiento flotantes</p> <p>Cuando se posiciona una caja de forma flotante:</p> <ul> <li>La caja deja de pertenecer al flujo normal de la p\u00e1gina, lo que significa que el resto de cajas ocupan el lugar dejado por la caja flotante.</li> <li>La caja flotante se posiciona lo m\u00e1s a la izquierda o lo m\u00e1s a la derecha posible de la posici\u00f3n en la que se encontraba originalmente, dependiendo que le asignemos a la propiedad <code>float</code>, que veremos enseguida.</li> </ul> <p>Si en el anterior ejemplo la caja 1 se posiciona de forma flotante hacia la izquierda, el resultado es el que muestra la siguiente imagen:</p> <p> Figura 7 - Flotante izquierda</p> <p>La caja 1 es de tipo flotante, por lo que desaparece del flujo normal de la p\u00e1gina y el resto de cajas ocupan su lugar. El resultado es que la caja 2 ahora se muestra donde estaba la caja 1 y la caja 3 se muestra donde estaba la caja 2.</p> <p>Al mismo tiempo, la caja 1 se desplaza todo lo posible hacia la izquierda de la posici\u00f3n en la que se encontraba. El resultado es que la caja 1 se muestra encima de la nueva posici\u00f3n de la caja 2 y tapa todos sus contenidos.</p> <p>Si existen otras cajas flotantes, al posicionar de forma flotante otra caja, se tiene en cuenta el sitio disponible. En el siguiente ejemplo se posicionan de forma flotante hacia la izquierda las tres cajas:</p> <p> Figura 8 - Posicionamiento flotante izquierda 3 cajas</p> <p>En el ejemplo anterior, las cajas no se superponen entre s\u00ed porque las cajas flotantes tienen en cuenta las otras cajas flotantes existentes. Como la caja 1 ya estaba posicionada lo m\u00e1s a la izquierda posible, la caja 2 s\u00f3lo puede colocarse al lado del borde derecho de la caja 1, que es el sitio m\u00e1s a la izquierda posible respecto de la zona en la que se encontraba.</p> <p>Si no existe sitio en la l\u00ednea actual, la caja flotante baja a la l\u00ednea inferior hasta que encuentra el sitio necesario para mostrarse lo m\u00e1s a la izquierda o lo m\u00e1s a la derecha posible en esa nueva l\u00ednea:</p> <p> Figura 9 - Flotante izquierda nueva l\u00ednea</p> <p>Las cajas flotantes influyen en la disposici\u00f3n de todas las dem\u00e1s cajas:</p> <ul> <li>Los elementos en l\u00ednea hacen sitio a las cajas flotantes adaptando su anchura al espacio libre dejado por la caja desplazada.</li> <li>Los elementos de bloque no les hacen sitio, pero s\u00ed que adaptan sus contenidos (por ejemplo su texto) para que no se solapen con las cajas flotantes.</li> </ul> <p> Figura 10 - Adaptaci\u00f3n</p>"},{"location":"tema_5/page-4/#float","title":"Float","text":"<p>La propiedad CSS que permite posicionar de forma flotante una caja se denomina <code>float</code>:</p> Propiedad <code>float</code> Valores left | right | none | inherit Se aplica a Todos los elementos Valor inicial none Descripci\u00f3n Establece el tipo de posicionamiento flotante del elemento <p>Si se indica un valor <code>left</code>, la caja se desplaza hasta el punto m\u00e1s a la izquierda posible en esa misma l\u00ednea (si no existe sitio en esa l\u00ednea, la caja baja una l\u00ednea y se muestra lo m\u00e1s a la izquierda posible en esa nueva l\u00ednea). El resto de elementos adyacentes se adaptan y su contenido fluye alrededor de la caja flotante. Si se indica el valor <code>right</code>, se desplaza hacia la derecha, con similares consecuencias.</p> <p>Veamos una demostraci\u00f3n de todo lo anterior, probando con distintos valores:</p> <p> See the Pen    flaot by irubenboy (@irubenboy)   on CodePen. </p> <p>El posicionamiento flotante tiene una serie de peculiaridades:</p> <ul> <li>Los m\u00e1rgenes alrededor de elementos flotantes NO se colapsan, tanto los horizontales como los verticales, sino que se suman a los que hayan establecido en los elementos adyacentes.</li> <li>Normalmente los elementos flotantes deben tener una anchura intr\u00ednseca, como en el caso de una imagen, o una anchura especificada mediante la propiedad <code>width</code>, o de lo contrario ocupar\u00e1n el menor ancho posible.</li> <li>Al flotar un elemento \u00e9ste se convierte en un elemento en bloque, independientemente de la etiqueta HTML de la que se trate.</li> <li>Por defecto, los elementos flotantes respetan los bordes izquierdo, derecho y superior del contenido del primer ancestro en bloque. Esto es, respetan, por ejemplo, el padding definido por \u00e9ste.</li> <li>Por defecto, los elementos flotantes flotan en \"la l\u00ednea\" en la que se encuentran dentro de su padre.</li> <li>Un elemento flotante puede sobrepasar el borde inferior de su padre, dibuj\u00e1ndose por encima, y afectando al contenido del resto de elementos.</li> <li>Se pueden especificar m\u00e1rgenes negativos para un elemento flotante, en cuyo caso se puede dibujar sobrepasando los bordes izquierdo, derecho y superior del contenido de su padre. Sin embargo, dependiendo del navegador del que se trate, este cambio de posici\u00f3n debido al margen negativo afectar\u00e1 o no al resto de elementos, por lo que NO se recomienda su uso.</li> <li>Si un elemento flotante es m\u00e1s ancho que su padre sobrepasar\u00e1 el borde derecho o izquierdo del contenido de su padre, dependiendo de si flota a la izquierda o la derecha, respectivamente.</li> </ul> <p>Uno de los principales motivos para la creaci\u00f3n del posicionamiento <code>float</code> fue precisamente la posibilidad de colocar im\u00e1genes alrededor de las cuales fluye el texto. Veamos una demostraci\u00f3n:</p> <p> See the Pen    image float by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-4/#clear","title":"Clear","text":"<p>En muchas ocasiones queremos que algunos contenidos fluyan alrededor de una imagen pero el resto de contenidos se muestren en su totalidad sin fluir alrededor de la imagen, tal y como se describe a continuaci\u00f3n:</p> <p> Figura 11 - Clear</p> <p>La propiedad <code>clear</code> permite modificar el comportamiento por defecto del posicionamiento flotante para forzar a un elemento a mostrarse debajo de cualquier caja flotante.</p> Propiedad <code>clear</code> Valores none | left | right | both | inherit Se aplica a Todos los elementos de bloque Valor inicial none Descripci\u00f3n Indica el lado del elemento que no debe ser adyacente a ninguna caja flotante <p>El valor recibido indica el lado del elemento HTML que no debe ser adyacente a ninguna caja posicionada de forma flotante, ya sea el lado izquierdo (<code>left</code>), derecho (<code>right</code>) o ambos lados (<code>both</code>). El elemento se desplaza de forma descendente hasta que pueda colocarse en una l\u00ednea en la que no haya ninguna caja flotante en el o los lados especificados. Es importante resaltar que este desplazamiento es un espacio adicional independiente del margen del elemento. Si modificamos el ejemplo anterior aplicando la propiedad <code>clear</code> al segundo p\u00e1rrafo el resultado es el siguiente:</p> <p> See the Pen    image float by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-4/#clearfix","title":"Clearfix","text":"<p>Un caso de uso de posicionamiento flotante que causa un comportamiento visual extra\u00f1o es cuando tenemos un elemento contenedor cuyos hijos son todos posicionados usando posicionamiento flotante. El problema consiste en que dado que los hijos son flotante, salen del flujo normal de la p\u00e1gina, y por tanto no es posible calcular correctamente la altura del elemento contenedor padre de \u00e9stos. As\u00ed, si dicho padre posee un color fondo, \u00e9ste no se mostrar\u00e1 correctamente en toda la altura deseada. Veamos un ejemplo:</p> <p> See the Pen    Clearfit by irubenboy (@irubenboy)   on CodePen. </p> <p>Para solucionar este problema, conocido entre los desarrolladores como clearfilx, podemos usar distintos trucos que fuerzan al elemento padre a calcular su altura incluyendo sus elementos flotantes. Estos trucos tienen \"efectos secundarios\", as\u00ed que usar uno u otro depender\u00e1 de las circunstancias particulares de nuestro dise\u00f1o:</p> <ul> <li>Un truco consiste en establecer para el elemento contenedor <code>overflow: hidden</code>. Para poder ocultar el contenido que sobresalga de la altura del elemento, el navegador no tendr\u00e1 m\u00e1s remedio que calcular la altura del mismo, incluso aunque todos sus hijos hayan sido posicionados de forma flotante. Algunas veces no podemos usar este truco, porque se dejar\u00edan de mostrar los contenidos que sobresalieran del elemento.</li> <li>Otro truco consiste en establece para el elemento contenedor <code>display: table</code>. En este modo de visualizaci\u00f3n se tiene forzosamente que calcular la altura del elemento para mostrarlo en forma de tabla, incluyendo los hijos posicionados de forma flotante. Como efecto colateral la anchura del contenedor se calcula autom\u00e1ticamente como la suma de la anchura de sus hijos, por lo que tendremos que establecer expl\u00edcitamente la anchura del contenedor mediante <code>width: 100%</code>.</li> <li>Otra alternativa es a\u00f1adir una etiqueta <code>&lt;div class=\"clearfix\"&gt;</code> adicional debajo y crear en el CSS una regla <code>.clearfix {clear:both;}</code>. Esta soluci\u00f3n no est\u00e1 recomendada porque estamos a\u00f1adiendo elementos a nuestro HTML que no son en realidad contenido de la p\u00e1gina web.</li> <li>Una \u00faltima alternativa muy similar es usar los pseudoelementos <code>::before</code> y <code>::after</code> para generar un elemento desde CSS y aplicar a dicho elemento generado la propiedad <code>clear:both</code>. Estas es la soluci\u00f3n que genera menos efectos colaterales.</li> </ul> <p>Note</p> <p>Como veremos m\u00e1s adelante, este tipo de disposici\u00f3n de elementos es m\u00e1s f\u00e1cil de conseguir usando otros modelos de formato visual, como el modelo de cajas flexibles (flexbox) o, especialmente, el modelo de cuadr\u00edcula (grid), que ofrecen muchas m\u00e1s ventajas, por lo que se recomienda encarecidamente respecto al uso de la propiedad <code>float</code>.</p>"},{"location":"tema_5/page-4/#relacion-entre-display-float-y-position","title":"Relaci\u00f3n entre display, float y position","text":"<p>Cuando se establecen las propiedades display, float y position sobre una misma caja, su interpretaci\u00f3n es la siguiente:</p> <ul> <li>Si se establece <code>display: none</code>, se ignoran las propiedades <code>float</code> y <code>position</code> y la caja no se muestra en la p\u00e1gina ni se posiciona.</li> <li>Si se establece <code>position: absolute</code> o <code>position: fixed</code>, la caja se posiciona de forma absoluta y se establece autom\u00e1ticamente <code>float: none</code> y <code>display:block</code>, tanto para los etiquetas son por defecto elementos en l\u00ednea como para las que por defecto son elementos de bloque. La posici\u00f3n de la caja se determina mediante el valor de las propiedades <code>top</code>, <code>right</code>, <code>bottom</code> y <code>left</code>.</li> <li>En cualquier otro caso, si <code>float</code> tiene un valor distinto de <code>none</code>, la caja se posiciona de forma flotante y la se establece autom\u00e1ticamente <code>display: block</code> tanto para los etiquetas son por defecto elementos en l\u00ednea como para las que por defecto son elementos de bloque.</li> </ul>"},{"location":"tema_5/page-4/#recorte-exterior-de-elementos-float","title":"Recorte exterior de elementos float","text":"<p>Con la propiedad CSS <code>shape-outside</code> se puede conseguir que los laterales de una caja, en vez de ser rectos, sigan un determinada forma geom\u00e9trica, como por ejemplo circular. Para que la propiedad CSS <code>shape-outside</code> surta efecto el elemento al que se declara se tienen que cumplir dos condiciones:</p> <ul> <li>Que el elemento est\u00e9 flotando, es decir que su propiedad <code>float</code> tenga un valor distinto de <code>none</code>.</li> <li>Que el elemento tenga unas dimensiones (anchura y altura) definidas, ya sea expl\u00edcitamente mediante las propiedades <code>width</code> y <code>height</code>, o impl\u00edcitamente, por ejemplo porque sea una etiqueta <code>&lt;img&gt;</code> a la que su imagen contenida le de las dimensiones.</li> </ul> <p>Se trata adem\u00e1s de una propiedad animable, siempre y cuando la forma geom\u00e9trica descrita para el recorte exterior del elemento mantenga el mismo n\u00famero de puntos durante la animaci\u00f3n.</p> <p>Debemos tener claro que la propiedad <code>shape-outside</code> permite indicar el recorte exterior del elemento flotante respecto a lo que lo rodeo, pero no recorta internamente al propio elemento. Para evitar esto, es conveniente recortar tambi\u00e9n el elemento flotado al que se declara <code>shape-outside</code>. Si la forma geom\u00e9trica asignada a <code>shape-outside</code> se trata de un c\u00edrculo, podemos usar en elemento la propiedad <code>border-radius</code> para realizar el recorte interior. Si se trata de otra forma geom\u00e9trica deberemos usar la propiedad <code>clip-path</code>. Otra alternativa es que la imagen en cuesti\u00f3n posea transparencias en los bordes, dando la impresi\u00f3n de que est\u00e1 recortada internamente.</p> <p>Si queremos que el contenido que rodea al elemento flotante se separe un determinado margen del \u00e1rea de recorte exterior del elemento, podemos usar la propiedad <code>shape-margin</code>. Si aplicamos demasiado margen, entonces el contenido que rodea al elemento que flota no se ver\u00e1 afectado por la forma geom\u00e9trica establecida para el recorte exterior.</p> <p>Veamos una demostraci\u00f3n en la que la primera imagen posee transparencias en los bordes y a la segunda se le realiza un recorte interior (ver en Chrome):</p> <p> See the Pen    shape-outside by irubenboy (@irubenboy)   on CodePen. </p> <p>En realidad podemos realizar tanto el recortado interno como el externo con el mismo pol\u00edgono, por ejemplo (ver en Chrome):</p> <p> See the Pen    shape-outsice no circle by irubenboy (@irubenboy)   on CodePen. </p> <p>Un aspecto muy importante es que el recorte exterior s\u00f3lo se realiza en el borde opuesto al lado sobre el que flota el elemento, en el ejemplo anterior el derecho, por lo que el texto nunca rellenar\u00e1 el espacio disponible en el lado izquierdo creado al hacer el recorte interno del elemento.</p>"},{"location":"tema_5/page-5/","title":"5 Flexbox","text":""},{"location":"tema_5/page-5/#introduccion","title":"Introducci\u00f3n","text":"<p>La propiedad flexible box, o flexbox (caja flexible), es un nuevo modelo de formato visual de CSS3 que permite colocar los elementos de una p\u00e1gina para que se comporten de forma predecible cuando el dise\u00f1o de la p\u00e1gina debe acomodarse a diferentes tama\u00f1os de pantalla y diferentes dispositivos.</p> <p>Los elementos hijos de una caja flexible pueden colocarse en cualquier direcci\u00f3n y pueden tener dimensiones flexibles para adaptarse al espacio visible. Adem\u00e1s, el orden de visualizaci\u00f3n de los elementos es independiente del orden que estos tengan en el c\u00f3digo fuente.</p> <p>Lo que caracteriza un dise\u00f1o flexible es su habilidad para alterar el ancho y alto de sus elementos para ajustarse lo mejor posible al espacio disponible en cualquier dispositivo. Un contenedor flexible expande sus elementos para rellenar el espacio libre, o los comprime para evitar que rebasen el \u00e1rea prevista.</p> <p>El algoritmo del modelo de dise\u00f1o de cajas flexibles no parte de ninguna direcci\u00f3n predeterminada, al contrario de lo que ocurre con el modelo de bloque, que asume una disposici\u00f3n vertical de los elementos, o lo que pasa con el modelo en l\u00ednea, que asume una disposici\u00f3n horizontal.</p> <p>El modelo de cajas flexibles es m\u00e1s apropiado para dise\u00f1os de peque\u00f1a escala, mientras que el modelo de rejilla (grid), que a\u00fan no es soportado por la mayor\u00eda de los navegadores, es adecuado para dise\u00f1os de gran escala.</p>"},{"location":"tema_5/page-5/#conceptos-basicos","title":"Conceptos b\u00e1sicos","text":"<p>En el modelo en bloque, los elementos hijos se organizan en un \u00fanico eje vertical, mientras que en el modelo en l\u00ednea lo hacen en un \u00fanico eje horizontal. Sin embargo, el modelo de caja flexible trabaja con ambos ejes, el vertical y el horizontal, y nos permite especificar cu\u00e1l de ellos es el principal (main axis) y cu\u00e1l el secundario (cross axis). La elecci\u00f3n de cu\u00e1l es el eje principal es importante, ya que afectar\u00e1 al significado del resto de propiedades.</p> <p>Por ejemplo, en el siguiente diagrama se muestra un contenedor flexible cuyo eje principal es el eje horizontal, lo que implica que las cajas hijas de la caja flexible se muestren una a continuaci\u00f3n de la otra horizontalmente. En este caso la direcci\u00f3n dentro del eje principal es de izquierda a derecha.</p> <p> Figura 12 - Diagrama Flexbox CSS</p> <p>Para comprender bien el modelo de cajas flexibles es necesario definir una serie de conceptos b\u00e1sicos:</p> <ul> <li>Contenedor flexible (flex container): Elemento padre al que se le establece el modelo de cajas flexibles mediante <code>display: flex</code> o <code>display: inline-flex</code>.</li> <li>Elemento flexible (flex item): Cada elemento hijo de un contenedor flexible. Si el contenedor flexible incluye texto sin marcar, \u00e9ste se envuelve autom\u00e1ticamente en un elemento flexible an\u00f3nimo.</li> <li>Ejes (axis): El dise\u00f1o de caja flexible sigue dos ejes:<ul> <li>El eje principal (main axis) es el eje a lo largo del cual los elementos flexibles se suceden unos a otros. Se establece mediante la propiedad <code>flex-direction</code>. Por su parte, la propiedad <code>justify-content</code> define c\u00f3mo los elementos flexibles se disponen a lo largo del eje principal en la l\u00ednea en curso.</li> <li>El eje secundario (cross axis) es el eje perpendicular al eje principal. La propiedad <code>align-items</code> define c\u00f3mo los elementos flexibles se disponen a lo largo del eje secundario de la l\u00ednea en curso. Por su parte, la propiedad <code>align-self</code> define c\u00f3mo cada elemento flexible se alinea respecto al eje secundario, y sustituye al valor por defecto establecido por <code>align-items</code>.</li> </ul> </li> <li>Direcciones (directions): Dentro de cada eje se debe conocer la direcci\u00f3n en la que deben disponerse los elementos flexibles, indicando cual es el punto inicial en el eje principal (main start y main end, respectivamente) y en el eje secundario (cross start y cross end). Por otro lado, la propiedad order asigna elementos a grupos ordinales y determina qu\u00e9 elementos aparecen primero dentro del eje principal, independientemente de su posici\u00f3n en el documento HTML.</li> <li>L\u00edneas (lines): Los elementos flexibles pueden disponerse en una sola o varias l\u00edneas de acuerdo con la propiedad flex-wrap, que controla la direcci\u00f3n del eje secundario y la direcci\u00f3n en la que las nuevas l\u00edneas se apilan en dicho eje.</li> <li>Dimensiones (dimensions): El tama\u00f1o (anchura / altura) de los elementos flexibles se denomina tama\u00f1o principal (main size), relativo al eje principal, y tama\u00f1o secundario (cross size), relativo al eje secundario. As\u00ed, las propiedades <code>min-height</code> y <code>min-width</code> incorporan un nuevo valor, denominado auto, que establece el tama\u00f1o m\u00ednimo de un elemento flexible. Por su parte, las propiedades <code>flex-basis</code>, <code>flex-grow</code>, y <code>flex-shrink</code> para establecer el grado de flexibilidad en el tama\u00f1o de los elementos flexibles, de manera que \u00e9stos puedan crecer o encogerse.</li> </ul>"},{"location":"tema_5/page-5/#propiedades-del-contenedor-flex","title":"Propiedades del contenedor flex","text":""},{"location":"tema_5/page-5/#flex-direction","title":"flex-direction","text":"<p>La propiedad <code>flex-direction</code> define cu\u00e1l es el eje principal del contenedor flexible y la direcci\u00f3n de dicho eje.</p> Propiedad <code>flex-direction</code> Valores row | row-reverse | column | column-reverse Se aplica a Contenedores flexibles Valor inicial row Descripci\u00f3n Define cu\u00e1l es el eje principal del contenedor flexible y la direcci\u00f3n de dicho eje. <p>El significado de los valores es el siguiente:</p> <ul> <li><code>row</code>: El eje principal del contenedor flexible es el eje horizontal y su direcci\u00f3n es de izquierda a derecha.</li> <li><code>row-reverse</code>: El eje principal del contenedor flexible es el eje horizontal y su direcci\u00f3n es de derecha a izquierda.</li> <li><code>column</code>: El eje principal del contenedor flexible es el eje vertical y su direcci\u00f3n es de arriba a abajo.</li> <li><code>column-reverse</code>: El eje principal del contenedor flexible es el eje vertical y su direcci\u00f3n es de abajo a arriba</li> </ul> <p> Figura 13 - flex-direction</p>"},{"location":"tema_5/page-5/#justify-content","title":"justify-content","text":"<p>La propiedad <code>justify-content</code> define c\u00f3mo el navegador distribuye el espacio sobrante en las l\u00edneas del eje principal en la que se muestran los elementos flexibles. El espacio sobrante es calculado despu\u00e9s de aplicar el tama\u00f1o y los m\u00e1rgenes de los elementos flexibles, y siempre y cuando NO se haya establecido que alguna caja crezca para ocupar dicho espacio sobrante mediante la propiedad <code>flex-grow</code>.</p> Propiedad <code>justify-content</code> Valores flex-start | flex-end | center | space-between | space-around | space-evenly Se aplica a Contenedores flexibles Valor inicial flex-start Descripci\u00f3n Define c\u00f3mo el navegador distribuye el espacio sobrante en las l\u00edneas del eje principal. <p>El significado de los valores es el siguiente:</p> <ul> <li><code>flex-start</code>: Los elementos flexibles se sit\u00faan en la l\u00ednea comenzando desde el punto inicial del eje principal (main start), uno seguido del otro sin espacio intermedio adicional, por lo que todo el espacio sobrante se sit\u00faa en el otro extremo del eje principal (al lado del main end).</li> <li><code>flex-end</code>: Los elementos flexibles se sit\u00faan en la l\u00ednea comenzando desde el punto final del eje principal (main end), uno seguido del otro sin espacio intermedio adicional, por lo que todo el espacio sobrante se sit\u00faa en el otro extremo del eje principal (al lado del main start).</li> <li><code>center</code>: Los elementos flexibles se sit\u00faan centrados en la l\u00ednea del eje principal, uno seguido del otro sin espacio intermedio adicional, por lo que todo la mitad del espacio sobrante se sit\u00faa en cada extremo del eje principal (al lado del main start y al lado del main end).</li> <li><code>space-between</code>: Los elementos flexibles se distribuyen uniformemente sobre la l\u00ednea del eje principal. El espaciamiento se hace de tal manera que el espacio adyacente entre dos elementos es el mismo. Los puntos inicial principal y final principal se alinean, respectivamente, con el borde del primer y \u00faltimo elemento flexible.</li> <li><code>space-around</code>: Los elementos flexibles se alinean uniformemente de tal manera que el espacio entre dos elementos adyacentes es el mismo. El espacio vac\u00edo anterior al primer elemento y posterior al \u00faltimo elemento equivale a la mitad del espacio entre dos elementos adyacentes.</li> <li><code>space-evenly</code>: Los elementos flexibles se alinean uniformemente de tal manera que el espacio entre los elementos sea el mismo. El espacio vac\u00edo anterior al primer elemento y posterior al \u00faltimo elemento es el mismo espacio que hay entre los elementos.</li> </ul> <p> Figura 14 - justify-content</p> <p>En lugar de <code>flex-start</code> tambi\u00e9n se puede usar los valores <code>start</code> y <code>left</code>, pero se debe tener en cuenta la diferencia entre ellas. Al usar <code>left</code> siempre quedar\u00e1 alineado a la izquierda independientemente del valor de <code>direction</code> y de <code>flex-direction</code>. Mientras que, si <code>direction</code> es <code>rtl</code> y se indica <code>flex-start</code> o <code>start</code> se alinear\u00e1 a la derecha, que es su alineaci\u00f3n principal. Por el contrario, si el valor de <code>flex-direction</code> es <code>row-reverse</code> y se indica <code>flex-start</code>, se mantendr\u00e1 alineado en la posici\u00f3n principal inversa, es decir si <code>direction</code> esta definida a la derecha, se mantendr\u00e1 a la izquierda (la contraria), mientras que si est\u00e1 definido como izquierda se mantiene a la derecha. Al usar <code>start</code>, sin embargo, se mantiene al principio de la direcci\u00f3n sin tener en cuenta el valor de <code>flex-direction</code>, por lo que si el valor <code>direction</code> indica izquierda, se mantiene a la izquierda a pesar de que <code>flex-direction</code> indique <code>row-reverse</code>, y si indica derecha, se mantiene a la derecha. Algo similar ocurre con los valores <code>top</code> y <code>bottom</code> cuando <code>flex-direction</code> es <code>column</code> o <code>column-reverse</code>. Veamos un ejemplo.</p> <p> See the Pen    flex-start vs start vs left by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-5/#align-items","title":"align-items","text":"<p>La propiedad <code>align-items</code> define c\u00f3mo el navegador distribuye el espacio sobrante dentro de las l\u00edneas del eje secundario en las que se muestran los elementos flexibles. El espacio sobrante es calculado despu\u00e9s de aplicar el tama\u00f1o y los m\u00e1rgenes de los elementos flexibles.</p> Propiedad <code>align-items</code> Valores flex-start | flex-end | center | baseline | stretch Se aplica a Contenedores flexibles Valor inicial stretch Descripci\u00f3n Define c\u00f3mo el navegador distribuye el espacio sobrante en las l\u00edneas del eje secundario. <p>El significado de los valores es el siguiente:</p> <ul> <li><code>flex-start</code>: Los elementos flexibles se alinean con el punto inicial del eje secundario (cross start) dentro de la l\u00ednea.</li> <li><code>flex-end</code>: Los elementos flexibles se alinean con el punto final del eje secundario (cross end) dentro de la l\u00ednea.</li> <li><code>center</code>: Los elementos flexibles son centrados dentro de la l\u00ednea sobre su eje secundario (cross axis) . Si el tama\u00f1o transversal (cross size) del elemento es mayor al del contenedor, se exceder\u00e1 por igual hacia ambas direcciones.</li> <li>baseline: Los elementos flexibles son situados de modo que sus bases queden alienadas dentro de la l\u00ednea sobre su eje secundario (cross axis). El elemento con la distancia mayor entre su l\u00edmite transversal inicial y su base es alineado con el punto final de la l\u00ednea del eje secundario (cross end), y el resto de elementos se sit\u00faan de manera para que sus bases queden alineadas con la base de dicho elemento.</li> <li><code>stretch</code>: Las elementos flexibles son estirados de modo que su tama\u00f1o transversal (cross size) sea el mismo de la l\u00ednea, manteniendo sus restricciones de anchura y altura.</li> </ul> <p> Figura 15 - align-items</p>"},{"location":"tema_5/page-5/#flex-wrap","title":"flex-wrap","text":"<p>La propiedad <code>flex-wrap</code> especifica si los elementos flexibles son obligados a permanecer en una misma l\u00ednea o pueden fluir en varias l\u00edneas (wrap) en el eje principal. En este \u00faltimo caso tambi\u00e9n podremos especificar la direcci\u00f3n en la cual ser\u00e1n apilados las l\u00edneas dentro del eje secundario.</p> Propiedad <code>flex-wrap</code> Valores nowrap | wrap | wrap-reverse Se aplica a Contenedores flexibles Valor inicial nowrap Descripci\u00f3n Define si los elementos flexibles pueden fluir en varias l\u00edneas dentro del eje principal, y la direcci\u00f3n de las mismas dentro del eje secundario. <p>El significado de los valores es el siguiente:</p> <ul> <li><code>nowrap</code>: Los elementos flexibles son distribuidos en una sola l\u00ednea, lo cual puede llevar a que se desborde el contenedor flexible.</li> <li><code>wrap</code>: Los elementos flexibles son colocados en varias l\u00edneas. Las l\u00edneas se apilan desde el punto inicial hasta el punto final del eje secundario.</li> <li><code>wrap-reverse</code>: Los elementos flexibles son colocados en varias l\u00edneas. Las l\u00edneas se apilan desde el punto final hasta el punto inicial del eje secundario.</li> </ul> <p> Figura 16 - flex-wrap</p>"},{"location":"tema_5/page-5/#flex-flow","title":"flex-flow","text":"<p>La propiedad <code>flex-flow</code> es una propiedad shorthand de las propiedades individuales <code>flex-direction</code> y <code>flex-wrap</code>.</p> Propiedad <code>flex-flow</code> Valores Se aplica a Contenedores flexibles Valor inicial row nowrap Descripci\u00f3n -"},{"location":"tema_5/page-5/#align-content","title":"align-content","text":"<p>La propiedad <code>align-content</code> define c\u00f3mo el navegador distribuye el espacio sobrante en el eje secundario no utilizado por las l\u00edneas en las que se muestran los elementos flexibles. El espacio sobrante es calculado despu\u00e9s de aplicar el tama\u00f1o y los m\u00e1rgenes de los elementos flexibles, y disponerlos en una o varias l\u00edneas a lo largo del eje principal.</p> Propiedad <code>align-content</code> Valores flex-start | flex-end | center | space-between | space-around | space-evenly | stretch Se aplica a Contenedores flexibles Valor inicial stretch Descripci\u00f3n Define c\u00f3mo el navegador distribuye el espacio sobrante en eje secundario. <p>El significado de los valores es el siguiente:</p> <ul> <li><code>flex-start</code>: Las l\u00edneas son ajustadas a partir del punto de inicio del eje secundario. El borde transversal de inicio de la primera l\u00ednea y el del contenedor flexible quedan unidos. Cada l\u00ednea siguiente es unida a su predecesora.</li> <li><code>flex-end</code>: Las l\u00edneas son ajustadas a partir del punto final del eje transversal. El borde transversal final de la \u00faltima l\u00ednea y el del contenedor flexible quedan unidos. Cada l\u00ednea que precede es unida a la l\u00ednea siguiente.</li> <li><code>center</code>: Las l\u00edneas son ajustadas hacia el centro del contenedor flexible. Las l\u00edneas son unidas entre s\u00ed, y centradas dentro del contenedor. El espacio entre el borde transversal de inicio y la primera l\u00ednea, y el que hay entre el borde transversal final y la \u00faltima l\u00ednea es el mismo.</li> <li><code>space-between</code>: Las l\u00edneas son distribuidas de manera uniforma en el contenedor flexible. El espaciado se hace de modo que la separaci\u00f3n entre cualquier par de elementos adyacentes sea el mismo. Los bordes transversales de inicio y de fin del contenedor son unidos a los bordes de la primera y \u00faltima l\u00ednea, respectivamente.</li> <li><code>space-around</code>: Las l\u00edneas son distribuidas uniformemente de modo que el espacio entre cualquier par de elementos adyacentes sea el mismo. El espacio vac\u00edo antes de la primera l\u00ednea y el espacio despu\u00e9s de la \u00faltima es igual a la mitad del espacio entre cualquier par de l\u00edneas adyacentes.</li> <li><code>space-evenly</code>: Las l\u00edneas son distribuidas uniformemente de modo que el espacio entre cualquier par de elementos adyacentes sea el mismo. El espacio vac\u00edo antes de la primera l\u00ednea y el espacio despu\u00e9s de la \u00faltima es igual a espacio entre cualquier elemento.</li> <li><code>stretch</code>: Las l\u00edneas son estiradas para usar el espacio sobrante. El espacio libre en el contenedor es dividido por igual entre todas las l\u00edneas.</li> </ul>"},{"location":"tema_5/page-5/#row-gap-column-gap-y-gap","title":"row-gap, column-gap y gap","text":"<p>La propiedad <code>row-gap</code> define un espacio entre los elementos de una fila haciendo uso de flexbox.</p> Propiedad <code>row-gap</code> Valores Se aplica a Elementos flexibles Valor inicial 0 Descripci\u00f3n Define espacio entre elementos de una fila <p>La propiedad <code>column-gap</code> define un espacio entre elementos de una columna haciendo uso de flexbox.</p> Propiedad <code>column-gap</code> Valores Se aplica a Elementos flexibles Valor inicial 0 Descripci\u00f3n Define espacio entre elementos de una columna <p>La propiedad <code>gap</code> es una propiedad shorthand para definir el espacio entre elementos, entre filas y columnas. Puede indicar dos unidades, la primera para las filas y la segunda para las columnas. En caso de que se indique una se define el mismo espacio para filas y columnas.</p> Propiedad <code>gap</code> Valores  [] Se aplica a Elementos flexibles Valor inicial 0 Descripci\u00f3n Define espacio entre elementos"},{"location":"tema_5/page-5/#propiedades-de-los-elementos-flexibles","title":"Propiedades de los elementos flexibles","text":""},{"location":"tema_5/page-5/#order","title":"order","text":"<p>La propiedad <code>order</code> especifica el orden utilizado para disponer los elementos en su contenedor flexible. Los elementos estar\u00e1n dispuestos en orden ascendente seg\u00fan el valor de esta propiedad. Los elementos con el mismo valor se dispondr\u00e1n en el orden en el cual aparecen en el documento HTML.</p> Propiedad <code>order</code> Valores Se aplica a Elementos flexibles Valor inicial 0 Descripci\u00f3n Especifica el orden de un elemento dentro de su contenedor flexible. <p> Figura 17 - order</p>"},{"location":"tema_5/page-5/#flex-grow","title":"flex-grow","text":"<p>La propiedad <code>flex-grow</code> define la habilidad de un elemento flexible de poder crecer en el eje principal si hay espacio disponible en la l\u00ednea en la que est\u00e1 situado. Acepta un valor num\u00e9rico sin unidad que act\u00faa como proporci\u00f3n respecto a la suma de los valores de esta propiedad de todos los elementos flexibles situados en la misma l\u00ednea del contenedor flexible. El espacio disponible dentro de la l\u00ednea se repartir\u00e1 entre los elementos flexibles que contenga, atendiendo a la proporci\u00f3n especificada por cada uno de ellos.</p> <p>Vemos un ejemplo: supongamos que tenemos cuatro elementos flexibles en una l\u00ednea del eje principal del contenedor flexible, y dos de ellos tienen <code>flex-grow: 0</code> (valor por defecto) y otros dos <code>flex-grow: 1</code>, entonces los dos primeros no recibir\u00e1n nada del espacio sobrante del eje principal dentro de la l\u00ednea, mientras que los otros dos recibir\u00e1n cada uno la mitad de dicho espacio sobrante, debido a la proporci\u00f3n 1 / 1 + 1. Si al cuarto elemento se le asigna <code>flex-grow: 2</code>, entonces el tercer elemento recibir\u00e1 un tercio del espacio sobrante, 1 / 1 + 2 y el cuarto elemento dos tercios 2 / 1 + 2.</p> Propiedad <code>flex-grow</code> Valores Se aplica a Elementos flexibles Valor inicial 0 Descripci\u00f3n Define la proporci\u00f3n de espacio sobrante dentro del eje principal en la que crecer\u00e1 el elemento. <p> Figura 18 - flex-grow</p>"},{"location":"tema_5/page-5/#flex-shrink","title":"flex-shrink","text":"<p>La propiedad <code>flex-shrink</code> determina el factor de decrecimiento de un elemento flexible si el conjunto de elementos flexibles no cabe en la l\u00ednea del eje principal del contenedor flexible. Acepta un valor num\u00e9rico sin unidad que act\u00faa como proporci\u00f3n respecto a los valores de esta propiedad de todos los elementos flexibles situados en la misma l\u00ednea del contenedor flexible. El valor por defecto para esta propiedad es 1, por lo que los elementos se encoger\u00e1n en la misma proporci\u00f3n. Sin embargo, si para un elemento establecemos <code>flex-shrink: 0</code>, dicho elemento no se encoger\u00e1.</p> Propiedad <code>flex-shrink</code> Valores Se aplica a Elementos flexibles Valor inicial 1 Descripci\u00f3n Define el factor de decrecimiento de un elemento flexible dentro de la l\u00ednea del eje principal del contenedor flexible cuando todos sus elemento no caben en ella."},{"location":"tema_5/page-5/#flex-basis","title":"flex-basis","text":"<p>La propiedad <code>flex-basis</code> espec\u00edfica el tama\u00f1o inicial de un elemento flexible en el eje principal, antes de que se reparta el espacio sobrante de la l\u00ednea en la que se encuentre.</p> Propiedad <code>flex-basis</code> Valores  | auto Se aplica a Elementos flexibles Valor inicial auto Descripci\u00f3n Define el tama\u00f1o inicial de un elemento flexible en el eje principal, antes de que se reparta el espacio sobrante de la l\u00ednea en la que se encuentre. <p>Analicemos los posibles valores:</p> <ul> <li>La longitud corresponder\u00e1 a un n\u00famero seguido de una unidad, o a un porcentaje del tama\u00f1o principal del contenedor flexible padre. Los valores negativos no son v\u00e1lidos.</li> <li>El valor <code>auto</code> significa el valor de la propiedad width o height, dependiendo de cu\u00e1l sea el eje principal.</li> </ul>"},{"location":"tema_5/page-5/#flex","title":"flex","text":"<p>La propiedad CSS <code>flex</code> es una propiedad shorthand que especifica la capacidad de un elemento flexible para alterar sus dimensiones para llenar el espacio disponible. Los elementos flexibles pueden ser estirados para utilizar el espacio disponible proporcional a su factor de crecimiento flexible o su factor de contracci\u00f3n flexible para evitar desbordamiento.</p> Propiedad <code>flex</code> Valores [] | auto Se aplica a Elementos flexibles Valor inicial 0 1 auto Descripci\u00f3n Especifica la capacidad de un elemento flexible para alterar sus dimensiones para llenar el espacio disponible en la l\u00ednea del eje principal <p>Los valores para <code>flex-shrink</code> y <code>flex-basis</code> son opcionales. El valor <code>none</code> se traduce a <code>0 0 auto</code>.</p> <p>Tips</p> <p>Se recomienda el uso de esta propiedad \"shorthand\" en vez de usar las propiedades individuales.</p>"},{"location":"tema_5/page-5/#align-self","title":"align-self","text":"<p>La propiedad <code>align-self</code> permite alinear un elemento flexible dentro de la l\u00ednea respecto al eje secundario, sobrescribiendo el comportamiento definido por la propiedad <code>align-items</code> del contenedor flexible.</p> Propiedad <code>align-self</code> Valores flex-start | flex-end | center | baseline | stretch | auto Se aplica a Contenedores flexibles Valor inicial 0 Descripci\u00f3n Alinea un elemento flexible dentro de la l\u00ednea respecto al eje secundario, sobrescribiendo el comportamiento definido por la propiedad <code>align-items</code> del contenedor flexible <p>El valor <code>auto</code> indica que se use lo especificado por la propiedad <code>align-items</code> del contenedor flexible. El resto de valores tienen el mismo significado que en dicha propiedad.</p> <p>Warning</p> <p>Debemos tener en cuenta que las propiedades <code>float</code>, <code>clear</code> y <code>vertical-align</code> NO tienen efecto sobre los elementos flexibles.</p> <p> Figura 19 - align-self</p>"},{"location":"tema_5/page-5/#usos-frecuentes-de-flexbox","title":"Usos frecuentes de flexbox","text":""},{"location":"tema_5/page-5/#centrado-vertical-del-texto-de-un-elemento","title":"Centrado vertical del texto de un elemento","text":"<p>La t\u00e9cnica consiste en establecer el elemento con contenedor flexible y usar <code>align-items: center</code> para centrar el texto. Esta t\u00e9cnica funciona porque el texto contenido en un contenedor flexible es considerado un elemento flexible como cualquier otro a la hora de posicionarlo.</p> <p>La ventaja de esta t\u00e9cnica frente a la de establecer <code>line-height</code> a la misma altura de la caja es que funciona incluso si el texto tiene varias l\u00edneas.</p> <pre><code>.con-texto-centrado-verticalmente {\ndisplay: flex;\nalign-items: center;\n}\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    flex: align text by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-5/#centrado-horizontal-y-vertical-de-un-elemento-hijo-dentro-de-su-padre","title":"Centrado horizontal y vertical de un elemento hijo dentro de su padre","text":"<p>La t\u00e9cnica consiste en establecer en el elemento padre las siguientes propiedades:</p> <pre><code>.centrados {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\n}\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    flex: center child by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-5/#alineacion-de-titulo-y-subtitulo","title":"Alineaci\u00f3n de t\u00edtulo y subt\u00edtulo","text":"<p>La t\u00e9cnica consiste en establecer en un elemento padre de t\u00edtulo y subt\u00edtulo las siguientes propiedades:</p> <pre><code>.titulo {\ndisplay: flex;\nflex-wrap: wrap;\njustify-content: space-between;\nalign-items: flex-end;\n}\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    flex: align title and subtitle by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-5/#columnas-de-igual-altura","title":"Columnas de igual altura","text":"<p>Por defecto, los elementos flexibles dentro de la misma l\u00ednea del eje principal del contenedor flexible se estiran para ocupar todos el mismo tama\u00f1o en el eje secundario, debido a que, por defecto, la propiedad <code>align-items</code> del contenedor flexible tiene el valor <code>stretch</code>. Podemos aprovechar este valor para crear dentro de un elemento contenedor columnas de la misma altura, independientemente de la altura real del contenido de cada columna. Veamos una demostraci\u00f3n:</p> <p> See the Pen    flex: columns with same height by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-5/#menu-de-navegacion-con-un-numero-indeterminado-de-opciones","title":"Men\u00fa de navegaci\u00f3n con un n\u00famero indeterminado de opciones","text":"<p>Como vimos en un apartado anterior, para crear un men\u00fa horizontal exist\u00edan varias t\u00e9cnicas, como por ejemplo hacer uso de la propiedad <code>display: inline-block</code> en el elemento <code>&lt;ul&gt;</code> o hacer que los elementos <code>&lt;li&gt;</code> flotaran dentro del <code>&lt;ul&gt;</code> gracias a la propiedad <code>float:left</code>. En ambas t\u00e9cnicas, si quer\u00edamos que todos las opciones se mostraran con el mismo ancho era necesario conocer de antemano el n\u00famero de opciones de las que iba a disponer el men\u00fa, para hacer el c\u00e1lculo del porcentaje a asignar como valor de la propiedad width de los elementos <code>&lt;li&gt;</code>.</p> <p>Gracias a flexbox ya no es necesario conocer este dato, ya que podremos disponer el <code>&lt;ul&gt;</code> como un contenedor flexible cuyos elementos flexibles <code>&lt;li&gt;</code> adaptan su anchura dependiendo del n\u00famero de opci\u00f3n correspondientes. El secreto est\u00e1 en establecer para los elementos flexibles que la anchura de referencia sea 0, mediante <code>flex-basis: 0</code>, y luego hacer que crezcan proporcionalmente en base al espacio sobrante, mediante <code>flex-grow: 1</code>. Veamos una demostraci\u00f3n:</p> <p> See the Pen    flex: menu nav by irubenboy (@irubenboy)   on CodePen. </p> <p>Si lo que queremos es que cada opci\u00f3n tenga una anchura proporcional a su texto, haremos que los elementos flexibles tomen como referencia de anchura la correspondiente a su contenido, con <code>flex-basis: auto</code>, y luego haremos que crezcan proporcionadamente en base al espacio sobrante, mediante <code>flex-grow: 1</code>. Veamos una demostraci\u00f3n:</p> <p> See the Pen    flex: menu nav 2 by irubenboy (@irubenboy)   on CodePen. </p> <p>Finalmente, si queremos que cada opci\u00f3n tenga la anchura natural correspondiente a su texto y que los elementos flexibles no crezcan, sino que aparezcan centrados dejando todo el espacio sobrante a los lados, tendremos que especificar para el contenedor flexible este tipo de justificaci\u00f3n, mediante <code>justify-content: center</code> e indicar en los elementos flexibles que no deben de crecer, mediante <code>flex-grow: 0</code>. Veamos una demostraci\u00f3n:</p> <p> See the Pen    flex: menu nav 3 by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-5/#menu-en-acordeon","title":"Men\u00fa en acorde\u00f3n","text":"<p>Otro uso muy curioso de flexbox es crear men\u00fas de tipo acorde\u00f3n, haciendo que el elemento sobre el que nos situemos crezca mientras que el resto de elementos del men\u00fa decrezcan. Veamos una demostraci\u00f3n (basada en el siguiente enlace):</p> <p> See the Pen    flex: menu accordion by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-5/#galeria-de-imagenes","title":"Galer\u00eda de im\u00e1genes","text":"<p>La dificultad real de esta t\u00e9cnica es conseguir establecer el ancho de los elementos atendiendo al n\u00famero de columnas deseadas. Veamos una demostraci\u00f3n:</p> <p> See the Pen    flex: image gallery by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-5/#pie-pegajoso","title":"Pie pegajoso","text":"<p>Otro de los aspectos algo costosos era conseguir que el pie de la p\u00e1gina estuviera situado siempre en la zona inferior si el contenido de la p\u00e1gina ten\u00eda una altura peque\u00f1a. Gracias a flexbox, ahora es mucho m\u00e1s sencillo, bastar\u00e1 con convertir el <code>&lt;body&gt;</code> en un contenedor flexible que disponga sus hijos en forma de columna. Para conseguir que el pie est\u00e9 situado en la zona inferior haremos que el body tenga una altura m\u00ednima de 100vh (100% de la altura del viewport) y que el cuerpo pueda ocupe todo el espacio sobrante en el contenedor flexible. Veamos una demostraci\u00f3n:</p> <p> See the Pen    flex: footer by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-5/#el-santo-grial","title":"El Santo Grial","text":"<p>En dise\u00f1o web se conoce como \"Santo Grial\" (en ingl\u00e9s Holy Grail) al dise\u00f1o caracter\u00edstico de la web que muestra un encabezado en la zona superior, un pie en la zona inferior, y la zona central muestra tres columnas: el men\u00fa de navegaci\u00f3n, el contenido principal y el contenido adicional (por ejemplo publicidad). Gracias a flexbox podemos hacer este dise\u00f1o de forma sencilla y adem\u00e1s conseguir que se adapte a distintos tama\u00f1os de pantalla. Veamos una demostraci\u00f3n:</p> <p> See the Pen    flex: holy grail by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-5/#huecos-entre-elementos","title":"Huecos entre elementos","text":"<p>Un caso de alineaci\u00f3n curiosa con los elementos flexibles es cuando aplicamos a uno de ellos un margen autom\u00e1tico. Con ejemplo supongamos que tenemos un contenedor flexible que sit\u00faa sus elementos en forma de fila, posicionados de izquierda a derecha, entonces si a uno de los hijos le damos la propiedad <code>margin-right: auto</code>, se dejar\u00e1 todo el espacio sobrante entre dicho elemento y el siguiente. Si, por el contrario le establecemos <code>margin-left: auto</code>, se dejar\u00e1 todo el espacio sobrante entre el anterior y dicho elemento. Veamos una demostraci\u00f3n:</p> <p> See the Pen    flex: space between elements by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-5/#barra-de-navegacion","title":"Barra de navegaci\u00f3n","text":"<p>En la siguiente demostraci\u00f3n podemos ver c\u00f3mo crear una barra de navegaci\u00f3n t\u00edpica de twitter haciendo uso de flexbox y del truco de los huecos entre elementos (basado en este ejemplo):</p> <p> See the Pen    flex: menu bar by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-6/","title":"6 Grid layout","text":""},{"location":"tema_5/page-6/#introduccion","title":"Introducci\u00f3n","text":"<p>Una de las principales tareas del dise\u00f1o web es la organizaci\u00f3n de la disposici\u00f3n (posicionamiento) de los distintos elementos dentro de la p\u00e1gina web, a lo que se conoce como dise\u00f1o del layout. El problema es que CSS no fue dise\u00f1ado inicialmente pensando en el dise\u00f1o de layouts, por lo que los desarrolladores han tenido que emplear para tal fin distintas t\u00e9cnicas generales no creadas espec\u00edficamente para tal fin. Primero se usaron elementos <code>&lt;table&gt;</code>, despu\u00e9s elementos flotantes con la propiedad CSS <code>float</code>, luego el valor <code>inline-block</code> de la propiedad <code>display</code> y \u00faltimamente <code>flexbox</code>. Todas ellas cumplen su funci\u00f3n siempre y cuando son empleadas correctamente, pero complican bastante la tarea al desarrollador, dado que no fueron creadas espec\u00edficamente para el dise\u00f1o de layouts.</p> <p>Sin embargo, recientemente se ha estandarizado un nuevo m\u00f3dulo de CSS, creado espec\u00edficamente para el dise\u00f1o de layouts, conocido como CSS Grid Layout, que permite dise\u00f1ar interfaces de usuario CSS basadas en el posicionamiento de elementos dentro en una rejilla (grid) bidimensional.</p> <p>Despu\u00e9s, para colocar un elemento hijo directo del contenedor en una determinada celda de la cuadr\u00edcula usaremos en dicho hijo las propiedades <code>grid-column</code> y <code>grid-row</code>. En este sentido, al igual que en el caso de flexbox, el orden en el que aparezcan los hijos en el documento HTML es totalmente indiferente, lo que nos permitir\u00e1 cambiar de manera sencilla la disposici\u00f3n de los elementos dependiendo del tama\u00f1o disponible para visualizaci\u00f3n.</p>"},{"location":"tema_5/page-6/#conceptos-basicos","title":"Conceptos b\u00e1sicos","text":"<p>Para poder usar correctamente este m\u00f3dulo CSS es necesario conocer antes los t\u00e9rminos que emplearemos:</p> <ul> <li>Contenedor de la cuadr\u00edcula (grid container): Elemento en cuyo interior se crea la cuadr\u00edcula. Para hacer que un elemento act\u00fae como contenedor de cuadr\u00edcula debemos establecer en \u00e9l la propiedad <code>display: grid</code> (elemento en bloque que en su interior act\u00faa como contenedor de cuadr\u00edcula), <code>display: inline-grid</code> (elemento en l\u00ednea que en su interior act\u00faa como contenedor de cuadr\u00edcula).</li> <li>Elementos de cuadr\u00edcula (grid items): Cada uno de los hijos directos del contenedor de la cuadr\u00edcula, que podr\u00e1n ser posicionados en una celda concreta de la misma.</li> <li>L\u00edneas de cuadr\u00edcula (grid lines): Cada una de las lineas de division que componen la estructura de la cuadr\u00edcula. Pueden ser verticales u horizontales, dependiendo de si separan, respectivamente, columnas o filas.</li> <li>Columnas o filas de cuadr\u00edcula (grid tracks): Cada uno de los espacios entre dos l\u00edneas de cuadr\u00edcula adyacentes.</li> <li>Celdas de cuadr\u00edcula (grid cell): Cada uno de los espacios entre dos l\u00edneas de cuadr\u00edcula de filas adyacentes y dos l\u00edneas de cuadr\u00edcula de columnas adyacentes. Es la unidad principal de posicionamiento de elementos dentro de la cuadr\u00edcula.</li> <li>\u00c1rea de cuadr\u00edcula (grid area): Espacio total rodeado por cuatro l\u00edneas de cuadr\u00edcula, de forma rectangular y que puede comprender m\u00e1s de una celda.</li> </ul>"},{"location":"tema_5/page-6/#creacion-de-cuadricula","title":"Creaci\u00f3n de cuadr\u00edcula","text":""},{"location":"tema_5/page-6/#definicion-de-un-elemento-como-contenedor-de-cuadricula","title":"Definici\u00f3n de un elemento como contenedor de cuadr\u00edcula","text":"<p>La creaci\u00f3n de una cuadr\u00edcula (rejilla) es bastante sencilla, consiste b\u00e1sicamente en designar un determinado elemento como contenedor de la cuadr\u00edcula, para lo que establecemos su propiedad <code>display: grid</code>. Por ejemplo:</p> <p> See the Pen    grid container by irubenboy (@irubenboy)   on CodePen. </p> <p>Por defecto, el elemento se convierte en una cuadr\u00edcula con una \u00fanica columna. Luego se trata de posicionar cada hijo, creando las filas que sean necesarias. En el ejemplo anterior se ha a\u00f1adido la propiedad grid-gap para a\u00f1adir una separaci\u00f3n (gutter) de 10px entre cada dos filas o entre cada dos columnas, s\u00f3lo con el prop\u00f3sito de que veamos m\u00e1s claramente qu\u00e9 filas y columnas se han creado.</p>"},{"location":"tema_5/page-6/#definicion-de-columnas-y-filas","title":"Definici\u00f3n de columnas y filas","text":"<p>Los normal, sin embargo, es que queremos indicar, al menos, el tama\u00f1o de las columnas. La propiedad <code>grid-template-columns</code> permite definir en el contenedor de la cuadr\u00edcula la anchura de cada una de las columnas de la misma, mientras que la propiedad <code>grid-template-rows</code> permite definir la altura de cada una de las filas.</p> Propiedad <code>grid-template-columns</code>, <code>grid-template-rows</code> Valores [nombre_l\u00ednea]tama\u00f1o-trazo | none Se aplica a Contenedores de cuadr\u00edcula Valor inicial none Descripci\u00f3n Define el nombre de las l\u00edneas de cuadr\u00edcula y el tama\u00f1o de las columnas / filas de la cuadr\u00edcula. <p>Los valores se especifican como una lista de tama\u00f1os separados por espacio en blanco. Para especificar el tama\u00f1o de cada columna / fila tenemos distintas opciones.</p> <p>Una primera opciones es definir una columna o fila de un tama\u00f1o fijo, como por ejemplo 50px, expresado en cualquier unidad v\u00e1lida de las que ya conocemos. En el siguiente ejemplo indicamos que la cuadr\u00edcula debe tener dos columnas de 200px cada una:</p> <p> See the Pen    grid: grid-template-column with fixed width by irubenboy (@irubenboy)   on CodePen. </p> <p>En el ejemplo anterior, a la hora de colocar el primer hijo se ha creado una primera fila con las dos columnas especificadas, de manera que el primer hijo se ha colocado en la primera celda y el segundo hijo en la segunda celda de dicha fila. A la hora de colocar el tercer hijo se ha creado una nueva fila y as\u00ed sucesivamente.</p> <p>En dicho ejemplo, la cuadr\u00edcula siempre medir\u00e1 410px de ancho, independientemente de la anchura del elemento padre, por lo que si \u00e9ste tiene una anchura mayor, el espacio sobrante no es utilizado por la cuadr\u00edcula, mientras que si el elemento padre tiene una anchura menor, la cuadr\u00edcula sobresaldr\u00e1 del elemento (a no ser que modifiquemos el valor de la propiedad overflow).</p> <p>Para indicar el ancho de las columnas o la altura de las filas tambi\u00e9n podemos usar un tama\u00f1o especificado en <code>%</code>, que se calcula en relaci\u00f3n a la anchura o altura del contenedor. Por ejemplo:</p> <p> See the Pen    grid: grid-template-column with relative witdth by irubenboy (@irubenboy)   on CodePen. </p> <p>En el ejemplo anterior, cada columnas tiene una anchura correspondiente al 40% de la anchura del padre, de manera que el espacio sobrante en el padre (20% de anchura del padre - 10px del gutter) no es usado.</p> <p>Algunas veces, lo que queremos es que una columna ocupe todo el ancho que pueda, de manera que la cuadr\u00edcula ocupe toda la anchura del padre. Para ello podemos usar el valor <code>auto</code>. Por ejemplo:</p> <p> See the Pen    grid: grid-column-template with auto width by irubenboy (@irubenboy)   on CodePen. </p> <p>En el ejemplo anterior toda la anchura del contenedor se reparte proporcionalmente entre las dos columnas, ya que ambas han especificado el valor <code>auto</code>. Dicho espacio sobrante es calculado una vez se han tenido en cuenta el resto de tama\u00f1os fijos de columnas o filas especificadas y la separaci\u00f3n especificada entre columnas o filas.</p> <p>Si no queremos que se reparta equitativamente la anchura sobrante del contenedor, sino que queremos que una columna reciba m\u00e1s que la otra, podemos especificar el tama\u00f1o usando la unidad <code>fr</code>, como por ejemplo <code>1fr</code>, donde fr hace referencia a una fracci\u00f3n de espacio libre restante disponible en el contenedor. La magnitud que acompa\u00f1a a la unidad <code>fr</code> indica la proporci\u00f3n de dicho espacio restante que se le debe dar a esa columna, en relaci\u00f3n a la suma de todas las magnitudes de las columnas que usan la unidad <code>fr</code>. Por ejemplo:</p> <p> See the Pen    Untitled by irubenboy (@irubenboy)   on CodePen. </p> <p>Si en la definici\u00f3n de la anchura de las columnas mezclamos el uso de la unidad <code>fr</code> con el valor <code>auto</code>, \u00e9ste \u00faltimo adquiere el significado de la anchura necesaria para mostrar los elementos correspondientes a celdas de dicha columnas. Por ejemplo:</p> <p> See the Pen    grid: fr auto by irubenboy (@irubenboy)   on CodePen. </p> <p>En el ejemplo anterior, para calcular la anchura de la primera columna de la cuadr\u00edcula se tiene en cuenta la anchura de los elementos que se van a colocar en las celdas de dicha columna. Como la anchura m\u00e1xima de dichos elementos es la del primer hijo, que tiene una anchura de 200px, la columna se crea con dicha anchura, dejando para la otra columna el resto de anchura del contenedor.</p> <p>En otras ocasiones queremos que la anchura de una columna debe ser variable dentro de un determinado rango, dependiendo de la anchura del contenedor. Para ello usaremos la funci\u00f3n <code>minmax(tama\u00f1o_minimo, tama\u00f1o_maximo)</code>. Por ejemplo:</p> <p> See the Pen    grid: minmax by irubenboy (@irubenboy)   on CodePen. </p> <p>En el ejemplo anterior, dependiendo de la anchura del contenedor, la primera columna tomar\u00e1 una anchura diferente, pero \u00e9sta siempre ser\u00e1 como m\u00ednimo de <code>200px</code> y como m\u00e1ximo de <code>400px</code>.</p> <p>Para especificar el valor m\u00ednimo NO se puede usar la unidad <code>fr</code>, aunque para especificar el tama\u00f1o m\u00e1ximo s\u00ed. Por ejemplo:</p> <p> See the Pen    grid: minmax fr by irubenboy (@irubenboy)   on CodePen. </p> <p>En el ejemplo anterior, dependiendo de la anchura del contenedor, la primera columna tomar\u00e1 un anchura diferente, pero \u00e9sta siempre ser\u00e1 como m\u00ednimo de <code>200px</code> y como m\u00e1ximo de \u2154 de la anchura sobrante en el contenedor.</p> <p>Si vamos a crear varias columnas o filas adyacentes del mismo tama\u00f1o podemos usar la funci\u00f3n <code>repeat(n\u00famero, tama\u00f1o)</code> para acortar la especificaci\u00f3n. Por ejemplo:</p> <p> See the Pen    grid: repeat by irubenboy (@irubenboy)   on CodePen. </p> <p>La funci\u00f3n anterior proporciona tambi\u00e9n un valor muy interesante para el primer par\u00e1metro, llamado <code>auto-fill</code>, que permite que se calcule autom\u00e1ticamente el n\u00famero de columnas de una determinada anchura que caben en el contenedor de la cuadr\u00edcula. En el siguiente ejemplo se crear\u00e1n tantas columnas de <code>200px</code> de ancho como quepan en el contenedor, y la anchura sobrante no ser\u00e1 utilizado:</p> <p> See the Pen    grid: repeat auto-fill by irubenboy (@irubenboy)   on CodePen. </p> <p>Debemos tener en cuenta que si especificamos <code>grid-template-columns: repeat(auto-fill, 1fr);</code> se crear\u00e1 una \u00fanica columna con todo el ancho del contenedor.</p> <p>Si combinamos el uso de <code>repeat(auto-fill, tama\u00f1o)</code> con la funci\u00f3n <code>minmax(tama\u00f1o_minimo, 1fr)</code>, con el formato <code>repeat(auto-fill, minmax(tama\u00f1o_minimo, 1fr))</code>, podemos hacer que se creen tantas columnas como sea necesario, atendiendo al n\u00famero de elementos, de como m\u00ednimo el tama\u00f1o especificado. Si, dado el n\u00famero de elementos, no es necesario crear m\u00e1s columnas, el espacio sobrante NO es repartido entre ellas, pero si, dado el n\u00famero de elementos, se han creado todas las columnas posibles en la fila, el espacio sobrante se reparte entre ellas. En el siguiente ejemplo, se crear\u00e1n tantas columnas como para posicionar el n\u00famero de elementos existente, de como m\u00ednimo 100px de ancho, de manera que si el n\u00famero de elementos es peque\u00f1o podr\u00e1 quedar espacio sobrante:</p> <p> See the Pen    grid: repeat / minmax by irubenboy (@irubenboy)   on CodePen. </p> <p>Otra posibilidad muy parecida es usar el valor <code>auto-fit</code> en vez de <code>auto-fill</code>. La diferencia radica, en que con <code>auto-fit</code> se crean tantas columnas como sea posible, independientemente del n\u00famero de elementos que haya que posicionar en la cuadr\u00edcula. As\u00ed si usamos <code>repeat(auto-fit, minmax(tama\u00f1o_minimo, 1fr))</code>, se crear\u00e1n tantas columnas como sea posible, atendiendo a la anchura del contenedor de la cuadr\u00edcula y del tama\u00f1o m\u00ednimo indicado, de manera que NO queden ning\u00fan espacio sobrante, que ser\u00e1 repartido entre las columnas creadas. Por ejemplo al especificar:</p> <pre><code>grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n</code></pre> <p>se coge todo el ancho del contenedor de la cuadr\u00edcula y se divide entre 200px y se crean tantas columnas como el cociente de dicha divisi\u00f3n. Posteriormente se coge el espacio sobrante y se reparte proporcionalmente entre dichas columnas. Todo ello independientemente del n\u00famero de elementos que haya que posicionar en la cuadr\u00edcula. Veamos una demostraci\u00f3n:</p> <p> See the Pen    grid: auto.fit by irubenboy (@irubenboy)   on CodePen. </p> <p>En todos los ejemplos anteriores hemos especificado solamente la anchura de las columnas de la cuadr\u00edcula, de manera que las filas se han creado autom\u00e1ticamente cuando era necesario con la altura necesaria para mostrar los elementos. En el siguiente ejemplo, el tercer hijo es m\u00e1s alto que el resto, de manera que la fila que contenga dicho elemento es el que tendr\u00e1 dicha altura:</p> <p> See the Pen    grid: auto-fit 2 by irubenboy (@irubenboy)   on CodePen. </p> <p>Mediante la propiedad <code>grid-template-rows</code> podemos indicar expl\u00edcitamente la altura de las filas, usando valores similares a los usados con <code>grid-template-columns</code>. Veamos un ejemplo sencillo:</p> <pre><code>.container {\ngrid-template-columns: 40px 50px auto 50px 40px;\ngrid-template-rows: 25% 100px auto;\n}\n</code></pre> <p>En el ejemplo anterior los elementos de la clase container crear\u00e1n en su interior la siguiente cuadr\u00edcula:</p> <p> </p> Figura 20 - Grid numbers"},{"location":"tema_5/page-6/#nombre-de-las-lineas-de-la-cuadricula","title":"Nombre de las l\u00edneas de la cuadr\u00edcula","text":"<p>Al especificar cada columna o cada fila, se crean tambi\u00e9n las correspondientes l\u00edneas de cuadr\u00edcula, que por defecto tomar\u00e1n identificadores num\u00e9ricos secuenciales (<code>1</code>, <code>2</code>, ...). Sin embargo al crear las columnas o las filas podemos tambi\u00e9n especificar el nombre que queremos dar a una determinada l\u00ednea de cuadr\u00edcula, usando el formato <code>[nombre_linea]</code>, indic\u00e1ndolo delante o despu\u00e9s del tama\u00f1o de la columna (dependiendo de si es la l\u00ednea de cuadr\u00edcula anterior o posterior). Por ejemplo:</p> <pre><code>.container {\ngrid-template-columns: [first line1] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];\ngrid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];\n}\n</code></pre> <p> </p> Figura 21 - Grid names <p>Una l\u00ednea de cuadr\u00edcula puede recibir varios nombres. Como vemos en el ejemplo anterior, la primera l\u00ednea de cuadr\u00edcula tiene dos nombres first y line1 (este \u00faltimo no aparece en la imagen).</p> <p>Otra opci\u00f3n es nombrar las l\u00edneas usando un determinado nombre de \u00e1rea seguido del sufijo -start o del sufijo -end, para delimitar las l\u00edneas entre las que est\u00e1 contenido un determinado \u00e1rea. De esta manera, posteriormente podremos usar simplemente el nombre de \u00e1rea para posicionar un determinado elemento de cuadr\u00edcula. As\u00ed, si por ejemplo definimos el contenedor de la siguiente manera:</p> <pre><code>.container {\ngrid-template-columns: [header-start nav-start footer-start] 1fr [nav-end content-start] 3fr [content-end header-end footer-end];\ngrid-template-rows: [header-start] 200px [header-end nav-start content-start] auto [nav-end content-end footer-start] 100px [footer-end];\n}\n</code></pre> <p>a la hora de posicionar los elementos de cuadr\u00edcula podremos usar los nombres de \u00e1rea header, nav, content y footer para indicar el \u00e1rea en el que debe colocarse, como veremos cuando hablemos de las \u00e1reas de cuadr\u00edcula.</p>"},{"location":"tema_5/page-6/#separacion-entre-columnas-o-filas","title":"Separaci\u00f3n entre columnas o filas","text":"<p>La propiedad <code>grid-column-gap</code> (o simplemente <code>column-gap</code>) permite especificar la anchura del espacio entre columnas y <code>grid-row-gap</code> (o simplemente <code>row-gap</code>) la altura del espacio entre filas. Dicho espacio es tenido en cuenta a la hora de hacer los c\u00e1lculos con los tama\u00f1os especificados en la unidad <code>fr</code> para columnas o filas.</p> <p>En ingl\u00e9s dicha separaci\u00f3n se conoce tradicionalmente como gutter.</p> <p>No debemos olvidar que la separaci\u00f3n es siempre entre dos columnas o entre dos filas, por lo que NO se aplica en los lados de la cuadr\u00edcula, es decir, a la izquierda de la primera columna, a la derecha de la \u00faltima columna, arriba de la primera fila ni debajo de la \u00faltima fila.</p> <p>Otro aspecto importante es que NO es posible colocar ning\u00fan elemento dentro de dicha separaci\u00f3n, sino que en dicha zona se mostrar\u00e1 simplemente el fondo del contenedor.</p> Propiedad <code>grid-column-gap</code>, <code>grid-row-gap</code> Valores tama\u00f1o Se aplica a Contenedores de cuadr\u00edcula Valor inicial 0 Descripci\u00f3n Define el espacio entre columnas / filas. <p>Por ejemplo:</p> <pre><code>.container {\ngrid-template-columns: 100px 50px 100px;\ngrid-template-rows: 80px auto 80px;\ngrid-column-gap: 10px;\ngrid-row-gap: 15px;\n}\n</code></pre> <p>En el ejemplo anterior se crea una cuadr\u00edcula donde las columnas se separan por <code>10px</code> y las filas por <code>15px</code>, tal y como se aprecia en la siguiente imagen:</p> <p> </p> Figura 21 - Grid-column(row)-gap <p>Por su parte, la propiedad grid-gap (o simplemente gap) es una propiedad shorthand de las dos anteriores. Recibe, en este orden, la separaci\u00f3n entre filas y, opcionalmente, la separaci\u00f3n entre columnas. Si no se especifica la separaci\u00f3n entre columnas, \u00e9sta tomar\u00e1 tambi\u00e9n el valor de separaci\u00f3n especificados para las filas.</p> Propiedad <code>grid-gap</code> Valores ? Se aplica a Contenedores de cuadr\u00edcula Valor inicial 0 Descripci\u00f3n Define el espacio entre filas y columnas. <p>Por ejemplo:</p> <pre><code>.container {\ngrid-template-columns: 100px 50px 100px;\ngrid-template-rows: 80px auto 80px;\ngrid-gap: 15px 10px;\n}\n</code></pre>"},{"location":"tema_5/page-6/#cuadricula-implicita","title":"Cuadr\u00edcula impl\u00edcita","text":"<p>Como hemos visto en ejemplos anteriores, con s\u00f3lo definir la cuadr\u00edcula en el contenedor los distintos elementos son posicionados autom\u00e1ticamente en ella aunque no hayamos especificado expl\u00edcitamente d\u00f3nde queremos colocar cada elemento. A este posicionamiento autom\u00e1tico se le conoce como algoritmo de posicionamiento autom\u00e1tico (auto-placement algorithm).</p>"},{"location":"tema_5/page-6/#algoritmo-de-posicionamiento-automatico","title":"Algoritmo de posicionamiento autom\u00e1tico","text":"<p>CSS nos permite incluso controlar c\u00f3mo debe funcionar dicho algoritmo de posicionamiento autom\u00e1tico, a trav\u00e9s de la propiedad <code>grid-auto-flow</code>.</p> Propiedad <code>grid-auto-flow</code> Valores row | column | row dense | column dense Se aplica a Contenedores de cuadr\u00edcula Valor inicial row Descripci\u00f3n Define c\u00f3mo debe funcionar el algoritmo de posicionamiento autom\u00e1tico de elementos en la cuadr\u00edcula. <p>El primer valor que podemos asignarle a esta propiedad es <code>row</code>, que hace que los elementos no colocados expl\u00edcitamente se vayan posicionando autom\u00e1ticamente fila a fila, y dentro de cada fila, columna a columna (a la derecha y abajo), a\u00f1adiendo columnas y filas conforme sea necesario. Se trata del valor por defecto, por lo que es el valor que ha sido usado en todos los ejemplos anteriores.</p> <p>Al posicionar los elementos no colocados expl\u00edcitamente, se respeta el orden en el que aparece en el archivo HTML, por lo que si un elemento anterior ha sido posicionado expl\u00edcitamente respecto a la columna, se pueden producir huecos, es decir, celdas que no se rellenen. Es el valor por defecto. Por ejemplo:</p> <p> See the Pen    grid: grid-auto-flow by irubenboy (@irubenboy)   on CodePen. </p> <p>En el ejemplo anterior, el primer elemento se coloca expl\u00edcitamente en la tercera fila, por lo que el segundo elemento, que no es colocado expl\u00edcitamente, se coloca en la primera fila primera columna. El tercer elemento se coloca expl\u00edcitamente en la primera columna, por lo que no se puede situar en la segunda columna de la primera fila, que es donde le corresponder\u00eda. El cuarto elemento no es colocado expl\u00edcitamente, pero como debe seguirse el orden indicado en el documento HTML, el cuarto elemento debe colocarse despu\u00e9s del tercer elemento, por lo que se coloca en la siguiente columna a \u00e9ste.</p> <p>Alternativamente, podemos usar el valor <code>column</code>, de manera que los elementos no colocados expl\u00edcitamente se vayan posicionando autom\u00e1ticamente columna a columna, y dentro de cada columna, fila a fila (abajo y a la derecha), a\u00f1adiendo filas y columnas conforme sea necesario. Al posicionar cada elemento se respeta el orden en el que aparece en el archivo HTML, por lo que si un elemento anterior ha sido posicionado expl\u00edcitamente respecto a la fila se pueden producir huecos, es decir, celdas que no se rellenen. Por ejemplo:</p> <p> See the Pen    grid: grid-auto-flow 2 by irubenboy (@irubenboy)   on CodePen. </p> <p>En el ejemplo anterior, el primer elemento se coloca expl\u00edcitamente en la tercera fila, por lo que el segundo elemento, que no es colocado expl\u00edcitamente, se coloca en la primera fila primera columna. El tercer elemento se coloca expl\u00edcitamente en la primera columna, por lo que no se puede situar en la segunda columna de la primera fila, que es donde le corresponder\u00eda. El cuarto elemento no es colocado expl\u00edcitamente, pero como debe seguirse el orden indicado en el documento HTML, el cuarto elemento debe colocarse despu\u00e9s del tercer elemento, por lo que se coloca en la siguiente columna a \u00e9ste.</p> <p>Alternativamente, podemos usar el valor <code>column</code>, de manera que los elementos no colocados expl\u00edcitamente se vayan posicionando autom\u00e1ticamente columna a columna, y dentro de cada columna, fila a fila (abajo y a la derecha), a\u00f1adiendo filas y columnas conforme sea necesario. Al posicionar cada elemento se respeta el orden en el que aparece en el archivo HTML, por lo que si un elemento anterior ha sido posicionado expl\u00edcitamente respecto a la fila se pueden producir huecos, es decir, celdas que no se rellenen. Por ejemplo:</p> <p> See the Pen    grid: grid-auto-flow 3 by irubenboy (@irubenboy)   on CodePen. </p> <p>Si queremos evitar que se produzcan huecos en la cuadr\u00edcula podemos usar el valor <code>row dense</code>, en el que los elementos se vayan posicionando autom\u00e1ticamente fila a fila, y dentro de cada fila, columna a columna (a la derecha y abajo), a\u00f1adiendo columnas y filas conforme sea necesario. Al posicionar cada elemento se rellenan los posibles huecos que existan en la cuadr\u00edcula, por lo que puede que NO se respete el orden en el que aparecen los elementos en el archivo HTML si hemos posicionado expl\u00edcitamente la columna de un elemento anterior. Por ejemplo:</p> <p> See the Pen    grid: grid-auto-flow 4 by irubenboy (@irubenboy)   on CodePen. </p> <p>Finalmente, tambi\u00e9n podemos usar <code>column dense</code>, de manera que los elementos se vayan posicionando autom\u00e1ticamente columna a columna, y dentro de cada columna, fila a fila (abajo y a la derecha), a\u00f1adiendo filas y columnas conforme sea necesario. Al posicionar cada elemento se rellenan los posibles huecos que existan en la cuadr\u00edcula, por lo que puede que NO se respete el orden en el que aparecen los elementos en el archivo HTML si hemos posicionado expl\u00edcitamente la fila de un elemento anterior. Por ejemplo:</p> <p> See the Pen    grid: grid-auto-flow 5 by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-6/#tamano-de-las-filas-y-columnas-creadas-automaticamente","title":"Tama\u00f1o de las filas y columnas creadas autom\u00e1ticamente","text":"<p>Como acabamos de ver, el algoritmo de posicionamiento autom\u00e1tico puede crear autom\u00e1ticamente filas o columnas conforme sean necesarias. Igualmente, si posicionamos expl\u00edcitamente un elemento en una celda que no existe, CSS modificar\u00e1 la cuadr\u00edcula para adaptarse a tal circunstancia, creando la filas y columnas que sean necesarias.</p> <p>Por defecto las filas creadas autom\u00e1ticamente tendr\u00e1n una altura <code>auto</code>, es decir, la necesaria para mostrar los elementos de dichas fila, atendiendo a la altura de dichos elementos. De forma similar ocurre con la anchura de las columnas creadas autom\u00e1ticamente.</p> <p>Sin embargo, mediante la propiedad <code>grid-auto-rows</code>, podemos especificar la altura con la que deben crearse dichas filas, y mediante la propiedad <code>grid-auto-columns</code>, la anchura con la que deben crearse dichas columnas.</p> Propiedad <code>grid-auto-rows</code>, <code>grid-auto-column</code> Valores  | auto Se aplica a Contenedores de cuadr\u00edcula Valor inicial auto Descripci\u00f3n Define la altura / anchura con la que deben definirse las filas / columnas creadas autom\u00e1ticamente en la cuadr\u00edcula. <p>La longitud se puede expresar en <code>px</code>, en <code>%</code> respecto al tama\u00f1o del contenedor o usando la unidad <code>fr</code>. Por ejemplo:</p> <p> See the Pen    grid: grid-auto-row by irubenboy (@irubenboy)   on CodePen. </p> <p>En el ejemplo anterior las filas creadas autom\u00e1ticamente tienen una altura de 300px. Por defecto los elementos se estiran para ocupar la altura de la fila, pero el tercer elemento no, ya que se le ha indicado expl\u00edcitamente una altura de 200px.</p>"},{"location":"tema_5/page-6/#posicionamiento-de-elementos-de-cuadricula","title":"Posicionamiento de elementos de cuadr\u00edcula","text":"<p>Por defecto los elementos de cuadr\u00edcula se colocan ocupando una celda de la cuadr\u00edcula atendiendo al orden en el que aparecen en el documento HTML. De hecho, en los ejemplos anteriores NO hemos especificado expl\u00edcitamente en que celda/s deb\u00eda colocarse cada elemento hijo directo del contenedor, por lo que se ha usado el posicionamiento por defecto.</p> <p>Sin embargo, para cada elemento de cuadr\u00edcula podremos especificar expl\u00edcitamente entre qu\u00e9 l\u00edneas de cuadr\u00edcula debe posicionarse dicho elemento.</p> <p>Las propiedades <code>grid-column-start</code>, <code>grid-column-end</code>,<code>grid-row-start</code> y <code>grid-row-end</code> nos permiten indicar, respectivamente, la l\u00ednea de columna inicial, la l\u00ednea de columna final, la l\u00ednea de fila inicial y la l\u00ednea de fila final. El elemento de cuadr\u00edcula se situar\u00e1 en las celdas contenidas entre dichas cuatro l\u00edneas, que puede corresponder a 1 o m\u00e1s celdas.</p> Propiedad <code>grid-column-start</code>, <code>grid-column-end</code> Valores &lt;entero&gt; |&lt;nombre_l\u00ednea&gt; |auto Se aplica a Elemento de cuadr\u00edcula Valor inicial auto Descripci\u00f3n Define la columna/fila inicial del elemento dentro de la cuadr\u00edcula. Propiedad <code>grid-row-start</code>, <code>grid-row-end</code> Valores &lt;entero&gt; |&lt;nombre_l\u00ednea&gt; |auto | span |span &lt;nombre_l\u00ednea&gt; Se aplica a Elemento de cuadr\u00edcula Valor inicial auto Descripci\u00f3n Define la columna/fila final del elemento dentro de la cuadr\u00edcula. <p>CSS tambi\u00e9n nos proporciona las propiedades short-hand <code>grid-column</code> y <code>grid-row</code>, que usando la sintaxis inicio / fin permiten posicionar los elementos en la rejilla de una manera algo m\u00e1s abreviada.</p> Propiedad <code>grid-column</code>, <code>grid-row</code> Valores &lt;entero&gt; |&lt;nombre_l\u00ednea&gt; |auto / &lt;entero&gt; |&lt;nombre_l\u00ednea&gt; |auto Se aplica a Elemento de cuadr\u00edcula Valor inicial auto / auto Descripci\u00f3n Define las columnas/filas inicial y final del elemento dentro de la cuadr\u00edcula. <p>Como valor para estas propiedades podemos especificar:</p> <ul> <li>Un entero, correspondiente al identificador num\u00e9rico de la l\u00ednea. La primera l\u00ednea tiene el identificador 1. Por ejemplo <code>grid-column-start: 2</code>.</li> <li>Un nombre de l\u00ednea. Por ejemplo <code>grid-column-start: fist</code></li> <li><code>span &lt;n\u00famero de columnas o filas&gt;</code> o <code>span &lt;nombre_linea&gt;</code>: Se usa en las propiedades <code>grid-column-end</code>/<code>grid-row-end</code> para indicar cu\u00e1ntas columnas/filas o hasta que l\u00ednea final debe expandirse el posicionamiento del elemento respecto a la l\u00ednea inicial. Por ejemplo <code>grid-column-end: span 3</code> indica que el elemento debe ocupar tres columnas a partir de la l\u00ednea inicial establecida mediante <code>grid-column-start</code>.</li> <li><code>auto</code>: Posicionamiento autom\u00e1tico con <code>span 1</code>.</li> </ul> <p>Siguiendo la cuadr\u00edcula establecida en un ejemplo anterior, si establecemos:</p> <pre><code>.item-a {\ngrid-column-start: 2;\ngrid-column-end: five;\ngrid-row-start: row1-start\ngrid-row-end: 3\n}\n</code></pre> <p>el elemento de la clase <code>item-a</code> se posicionar\u00e1 de la siguiente manera:</p> <p> </p> Figura 22 - Posicionamiento de item A <p>Por otra parte, si establecemos:</p> <pre><code>.item-b {\ngrid-column-start: 1;\ngrid-column-end: span col4-start;\ngrid-row-start: 2\ngrid-row-end: span 2\n}\n</code></pre> <p>el elemento de la clase <code>item-b</code> se posicionar\u00e1 de la siguiente manera:</p> <p> </p> Figura 23 - Posicionamiento de item B <p>Finalmente, si posicionamos el elemento de la clase item-c usando las propiedades short-hand:</p> <pre><code>.item-c {\ngrid-column: 3 / span 2;\ngrid-row: third-line / 4;\n}\n</code></pre> <p>se situar\u00e1 de la siguiente manera:</p> <p> </p> Figura 24 - Posicionamiento de item C"},{"location":"tema_5/page-6/#areas-de-cuadricula","title":"\u00c1reas de cuadr\u00edcula","text":"<p>Trabajar con l\u00edneas de cuadr\u00edcula es algo engorroso, como podemos apreciar en los ejemplos anteriores. Sin embargo, CSS nos brinda una nueva posibilidad, consistente definir en la cuadr\u00edcula las \u00e1reas que la conforman (y qu\u00e9 celdas ocupan) e indicar para cada elemento en qu\u00e9 \u00e1rea debe posicionarse.</p>"},{"location":"tema_5/page-6/#definicion-de-areas","title":"Definici\u00f3n de \u00e1reas","text":"<p>La propiedad <code>grid-template-areas</code> permite indicar a qu\u00e9 \u00e1rea de cuadr\u00edcula pertenece cada celda de la misma.</p> Propiedad <code>grid-template-area</code> Valores &lt;grid-area-name&gt; | . | none | ... Se aplica a Contenedores de cuadr\u00edcula Valor inicial none Descripci\u00f3n Define a qu\u00e9 \u00e1rea pertenece cada celda de la cuadr\u00edcula. <p>Como valor recibir\u00e1 una cadena de caracteres (entre comillas dobles) por cada fila de la cuadr\u00edcula, donde cada palabra de la cadena corresponder\u00e1 al nombre del \u00e1rea a la que pertenece la celda correspondiente de dicha fila. Si para una celda no se quiere especificar el \u00e1rea a la que pertenece se usa el nombre .. Todas las filas deben especificar el mismo n\u00famero de nombres de \u00e1rea, igual al n\u00famero de columnas especificadas. Por ejemplo:</p> <pre><code>.container {\ngrid-template-columns: 50px 50px 50px 50px;\ngrid-template-rows: auto;\ngrid-template-areas:\n\"header header header header\"\n\"main main . sidebar\"\n\"footer footer footer footer\";\n}\n</code></pre> <p>En el ejemplo anterior se define un contenedor de cuadr\u00edcula que posee cuatro columnas y tres filas. Para cada celda se indica a qu\u00e9 \u00e1rea pertenece: header, main sidebar, footer o ninguna. La cuadr\u00edcula resultante tiene las siguientes \u00e1reas:</p> <p> </p> Figura 25 - grid-template-areas <p>Las l\u00edneas de cuadr\u00edcula de comienzo y de final de cada \u00e1rea son nombradas autom\u00e1ticamente como <code>area-start</code> y <code>area-end</code>, lo que implica que una l\u00ednea de cuadr\u00edcula puede tener varios nombres, como al l\u00ednea situada m\u00e1s a la izquierda de la cuadr\u00edcula anterior, que tendr\u00e1 los nombres <code>header-start</code>, <code>main-start</code>, y <code>footer-start</code>.</p>"},{"location":"tema_5/page-6/#posicionamiento-de-un-elemento-en-un-area","title":"Posicionamiento de un elemento en un \u00e1rea","text":"<p>La propiedad <code>grid-area</code> permite especificar el \u00e1rea de la cuadr\u00edcula en la que debe posicionarse un elemento, ya sea indicando el nombre del \u00e1rea o la fila / columna inicial y la fila / columna final.</p> Propiedad <code>grid-area</code> Valores &lt;area_name&gt; | &lt;columna_inicial&gt; |&lt;fila_inicial&gt; | &lt;columna_final&gt; | &lt;fila_final&gt; Se aplica a Elementos de cuadr\u00edcula Valor inicial auto / auto /auto / auto Descripci\u00f3n Posiciona el elemento en el \u00e1rea indicada. <p>Como valor de la propiedad podemos indicar:</p> <ul> <li>El nombre del \u00e1rea en el que se quiere posicionar el elemento.</li> <li>Cuatro valores correspondientes (por este orden) a la fila inicial, la columna inicial, la fila final y la columna final, actuando como propiedad short-hand de <code>grid-row-start</code>, <code>grid-column-start</code>, <code>grid-row-end</code> y <code>grid-column-end</code>, respectivamente.</li> </ul> <p>As\u00ed si establecemos:</p> <pre><code>.item-d {\ngrid-area: header;\n}\n</code></pre> <p>que ser\u00eda similar a establecer:</p> <pre><code>.item-d {\ngrid-area: 1 / col4-start / last-line / 6;\n}\n</code></pre> <p> </p> Figura 26 - Posicionamiento item D"},{"location":"tema_5/page-6/#propiedades-de-alineacion-de-elementos-en-las-celdas","title":"Propiedades de alineaci\u00f3n de elementos en las celdas","text":"<p>Como hemos visto en los ejemplos anteriores, por defecto los elementos ocupar\u00e1n todo el ancho y todo el alto de la celda en la que se coloca. Sin embargo podemos modificar dicho comportamiento estableciendo la alineaci\u00f3n horizontal y vertical del elemento respecto a la celda que lo contiene.</p>"},{"location":"tema_5/page-6/#alineacion-horizontal","title":"Alineaci\u00f3n horizontal","text":"<p>La propiedad <code>justify-items</code> permite establecer para el contenedor c\u00f3mo se deben alinear horizontalmente todos los elementos dentro de cada celda.</p> Propiedad <code>justify-items</code> Valores start | end | center | stretch Se aplica a Contenedores de cuadr\u00edcula Valor inicial stretch Descripci\u00f3n Alinea horizontalmente los elementos dentro de cada celda. <p>Los valores posibles son: <code>start</code> (a la izquierda), <code>end</code> (a la derecha), <code>center</code> (centrado) y <code>stretch</code> (el elemento se estira para ocupar todo el ancho de la celda, es el valor por defecto). Por ejemplo:</p> <p> See the Pen    grid: justify.items by irubenboy (@irubenboy)   on CodePen. </p> <p>En el ejemplo anterior hemos indicado una anchura concreta a los elementos, por lo que dependiendo del tama\u00f1o del contenedor puede que las celdas sean m\u00e1s anchas que los elementos. Hemos indicado que en ese caso los elementos se muestran centrados horizontalmente respecto a la celda en la que est\u00e1n contenidos.</p> <p>Si queremos que un determinado elemento se alinee horizontalmente de una forma diferente podemos usar en dicho elemento la propiedad <code>justify-self</code>, que recibe los mismos valores que <code>justify-items</code>:</p> Propiedad <code>justify-self</code> Valores start | end | center | stretch Se aplica a Elementos de cuadr\u00edcula Valor inicial stretch Descripci\u00f3n Alinea horizontalmente dicho elemento dentro de su celda, sobrescribiendo lo especificado por la propiedad justify-items del contenedor. <p>En el siguiente ejemplo hacemos que uno de los elementos se alinee de una forma distintos a la establecida para todo los elementos en el contenedor:</p> <p> See the Pen    grid: justify-self by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-6/#alineacion-vertical","title":"Alineaci\u00f3n vertical","text":"<p>La propiedad <code>align-items</code> permite establecer para el contenedor c\u00f3mo se deben alinear verticalmente todos los elementos dentro de cada celda.</p> Propiedad <code>align-items</code> Valores start | end | center | stretch Se aplica a Contenedores de cuadr\u00edcula Valor inicial stretch Descripci\u00f3n Alinea verticalmente los elementos dentro de cada celda. <p>Los valores posibles son: <code>start</code> (arriba), <code>end</code> (abajo), <code>center</code> (centrado) y <code>stretch</code> (el elemento se estira para ocupar todo el alto de la celda, es el valor por defecto).</p> <p>Si queremos que un determinado elemento se alinee verticalmente de una forma diferente podemos usar en dicho elemento la propiedad <code>align-self</code>, que recibe los mismos valores que <code>align-items</code>:</p> Propiedad <code>align-self</code> Valores start | end | center | stretch Se aplica a Elementos de cuadr\u00edcula Valor inicial stretch Descripci\u00f3n Alinea verticalmente dicho elemento dentro de su celda, sobrescribiendo lo especificado por la propiedad align-items del contenedor."},{"location":"tema_5/page-6/#propiedades-de-alineacion-de-la-cuadricula-respecto-al-contenedor","title":"Propiedades de alineaci\u00f3n de la cuadr\u00edcula respecto al contenedor","text":"<p>Algunas veces el tama\u00f1o total de la cuadr\u00edcula especificada en el contenedor es menor que el tama\u00f1o del propio contenedor, al NO haber utilizado unidades flexibles como <code>fr</code>, <code>auto-fill</code>, o <code>auto-fit</code>, sino unidades fijas como <code>px</code> a la hora especificar los tama\u00f1os de columnas o filas. En ese caso es posible indicar c\u00f3mo debe alinearse la cuadr\u00edcula dentro del contenedor, tanto horizontal como verticalmente.</p>"},{"location":"tema_5/page-6/#alineacion-horizontal_1","title":"Alineaci\u00f3n horizontal","text":"<p>La propiedad <code>justify-content</code> permite establecer para el contenedor c\u00f3mo se debe alinear horizontalmente la cuadr\u00edcula dentro de \u00e9l.</p> Propiedad <code>justify-content</code> Valores start | end | center | stretch | space-around | space-evenly | space-between Se aplica a Contenedores de cuadr\u00edcula Valor inicial start Descripci\u00f3n Alinea horizontalmente la cuadr\u00edcula dentro del contenedor <p>Los valores posibles son:</p> <ul> <li><code>start</code> (a la izquierda), <code>end</code> (a la derecha), <code>center</code> (centrada),</li> <li><code>stretch</code>: Redimensiona proporcionalmente las columnas para que la cuadr\u00edcula ocupe toda la anchura del contenedor.</li> <li><code>space-around</code>: Reparte el espacio sobrante como separaci\u00f3n entre columnas, de manera que la primera columna tiene a su izquierda la mitad de separaci\u00f3n y la \u00faltima columna tiene a su derecha la mitad de separaci\u00f3n.</li> <li><code>space-between</code>: Reparte el espacio sobrante como separaci\u00f3n entre columnas, de manera que la primera columna est\u00e9 lo m\u00e1s a la izquierda posible y la \u00faltima columna lo m\u00e1s a la derecha posible.</li> <li><code>space-evenly</code>: Reparte el espacio sobrante como separaci\u00f3n entre columnas, de manera que todas las columnas tienen entre s\u00ed la misma separaci\u00f3n, incluyendo la separaci\u00f3n a la izquierda de la primera columna y la separaci\u00f3n a la derecha de la \u00faltima columna.</li> </ul> <p>Veamos un ejemplo:</p> <p> See the Pen    grid: justify-content by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_5/page-6/#alineacion-vertical_1","title":"Alineaci\u00f3n vertical","text":"<p>La propiedad <code>align-content</code> permite establecer para el contenedor c\u00f3mo se debe alinear verticalmente la cuadr\u00edcula dentro de \u00e9l.</p> Propiedad <code>align-content</code> Valores start | end | center | stretch | space-around | space-evenly | space-between Se aplica a Contenedores de cuadr\u00edcula Valor inicial start Descripci\u00f3n Alinea verticalmente la cuadr\u00edcula dentro del contenedor <p>Los valores posibles son:</p> <ul> <li><code>start</code> (a la izquierda), <code>end</code> (a la derecha), <code>center</code> (centrada),</li> <li><code>stretch</code>: Redimensiona proporcionalmente las filas para que la cuadr\u00edcula ocupe toda la anchura del contenedor.</li> <li><code>space-around</code>: Reparte el espacio sobrante como separaci\u00f3n entre filas, de manera que la primera fila tiene a su izquierda la mitad de separaci\u00f3n y la \u00faltima fila tiene a su derecha la mitad de separaci\u00f3n.</li> <li><code>space-between</code>: Reparte el espacio sobrante como separaci\u00f3n entre filas, de manera que la primera fila est\u00e9 lo m\u00e1s a la izquierda posible y la \u00faltima fila lo m\u00e1s a la derecha posible.</li> <li><code>space-evenly</code>: Reparte el espacio sobrante como separaci\u00f3n entre filas, de manera que todas las filas tienen entre s\u00ed la misma separaci\u00f3n, incluyendo la separaci\u00f3n a la izquierda de la primera fila y la separaci\u00f3n a la derecha de la \u00faltima fila.</li> </ul>"},{"location":"tema_5/page-6/#demo-de-cuadricula-implicita-y-alineacion","title":"Demo de cuadr\u00edcula impl\u00edcita y alineaci\u00f3n","text":"<p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    grid: demo by irubenboy (@irubenboy)   on CodePen. </p> <p>Generadores de cuadr\u00edculas</p> <p>Existen diversas p\u00e1ginas, para generar contenido CSS y HTML haciendo uso de grid. Recomiendo la siguiente:</p> <p>https://grid.layoutit.com/</p>"},{"location":"tema_6/page-1/","title":"1 Im\u00e1genes","text":""},{"location":"tema_6/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>Las im\u00e1genes son uno de los elementos m\u00e1s importantes de las p\u00e1ginas web. De hecho, pr\u00e1cticamente todas las p\u00e1ginas web contienen alguna imagen y la mayor\u00eda incluyen decenas de im\u00e1genes. Dentro de las im\u00e1genes que se pueden incluir en una p\u00e1gina HTML se deben distinguir dos tipos: las im\u00e1genes de contenido y las im\u00e1genes de adorno.</p> <p>Las im\u00e1genes de contenido son las que proporcionan informaci\u00f3n y complementan la informaci\u00f3n textual. Las im\u00e1genes de adorno son las que se utilizan para hacer bordes redondeados, para mostrar peque\u00f1os iconos en las listas de elementos, para mostrar fondos de p\u00e1gina, etc. Las im\u00e1genes de contenido se incluyen directamente en el c\u00f3digo HTML mediante la etiqueta <code>&lt;img&gt;</code> y las im\u00e1genes de adorno no se deber\u00edan incluir en el c\u00f3digo HTML, sino que deber\u00edan emplearse hojas de estilos CSS para mostrarlas.</p>"},{"location":"tema_6/page-1/#etiqueta-img","title":"Etiqueta img","text":"<p>La etiqueta <code>&lt;img&gt;</code> puede contener los siguientes atributos b\u00e1sicos:</p> <ul> <li><code>src=\"url\"</code>: Indica la URL de la imagen que se desea mostrar. Puede ser absoluta o relativa. Es un atributo obligatorio.</li> <li><code>alt=\"texto\"</code>: Descripci\u00f3n textual corta de la imagen. Necesario para personas con discapacidad visual. Es obligatorio.</li> <li><code>longdesc=\"url\"</code>: Indica una URL en la que puede encontrarse una descripci\u00f3n m\u00e1s detallada de la imagen. S\u00f3lo se usa cuando la descripci\u00f3n textual es de m\u00e1s de 1024 caracteres.</li> <li><code>height=\"unidad_de_medida\"</code>: Indica la altura con la que se debe mostrar la imagen (no es obligatorio que coincida con la altura original de la imagen). Se puede indicar tambi\u00e9n en porcentaje respecto a la anchura del padre. Si el valor no tiene unidad se sobrentendiende <code>px</code>.</li> <li><code>width=\"unidad_de_medida\"</code>: Indica la anchura con la que se debe mostrar la imagen (no es obligatorio que coincida con la anchura original de la imagen).</li> </ul> <p>Veamos un ejemplo:</p> <pre><code>&lt;img src=\"/imagenes/foto1.jpg\" alt=\"Fotograf\u00eda de un paisaje\" /&gt;\n</code></pre> <p>Se puede indicar tambi\u00e9n en porcentaje respecto a al altura del padre. Si el valor no tiene unidad se sobreentendiende px.</p> <p>El est\u00e1ndar de HTML no ofrece una lista de formatos de imagen soportados, de modo que cada navegador soporta diferentes conjuntos de formatos, aunque los m\u00e1s habituales son soportados por todos los navegadores: JPEG, GIF, GIF animado, PNG, APNG, SVG, BMP, BMP ICO, PNG ICO.</p> <p>En principio, la anchura y la altura con la que se muestra una imagen es parte de su aspecto gr\u00e1fico, por lo que deber\u00eda ser propio de CSS y no de HTML. Sin embargo, en algunas ocasiones no es pr\u00e1ctico establecer la anchura y altura de todas las im\u00e1genes de contenidos mediante CSS debido a la sobrecarga de estilos diferentes que producir\u00eda. En estos casos puede suele ser m\u00e1s sencillo establecer la anchura y/o altura en la etiqueta <code>&lt;img&gt;</code> correspondiente.</p> <p>La anchura/altura con la que se muestra una imagen no tiene que coincidir obligatoriamente con la anchura/altura real de la imagen. Sin embargo, cuando estos valores no coinciden, las im\u00e1genes se muestran deformadas y el aspecto final es muy desagradable. Si solamente se establece el valor de una de las dos propiedades (altura o anchura), el valor de la otra propiedad es calculado autom\u00e1ticamente manteniendo la proporci\u00f3n de la imagen, haciendo que la imagen no se deforme.</p>"},{"location":"tema_6/page-1/#estilizado-basico-de-imagenes","title":"Estilizado b\u00e1sico de im\u00e1genes","text":"<p>Si queremos que una imagen se adec\u00fae al tama\u00f1o de su contenedor, deberemos indicar para ella que ocupe todo el ancho de su contenedor y que su altura se calcule autom\u00e1ticamente. En algunas ocasiones, si el contenedor es demasiado grande y la imagen no tiene mucho resoluci\u00f3n es mejor indicar que la anchura m\u00e1xima de la imagen sea del <code>100%</code>, de esta manera la imagen nunca sobresaldr\u00e1 de su contenedor, pero cuando el contenedor sea muy grande la imagen no se agrandar\u00e1 tanto como para que se pixeles:</p> <pre><code>img {\nwidth: 100%; /* max-width: 100% */\nheight: auto;\n}\n</code></pre> <p>Otro aspecto que debemos tener en cuenta es que, dado que la etiqueta <code>&lt;img&gt;</code> crea por defecto un elemento en l\u00ednea, al incluirlo dentro de un contenedor se deja un peque\u00f1o margen inferior. Existen dos soluciones posibles:</p> <ul> <li>Establecer el <code>line-height</code> del contenedor a 0.</li> <li>Convertir la imagen en un elemento en bloque con <code>display: block</code>.</li> </ul> <p>Veamos un ejemplo:</p> <p> See the Pen    img by irubenboy (@irubenboy)   on CodePen. </p> <p>Por \u00faltimo, veamos un ejemplo con algunas opciones a la hora de mostrar texto junto a una imagen, como si de una tarjeta se tratase (sin flotar):</p> <p> See the Pen    img 2 by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-1/#etiquetas-figure-y-fig-caption","title":"Etiquetas figure y fig-caption","text":"<p>El elemento HTML <code>&lt;figure&gt;</code> representa contenido independiente, a menudo con un t\u00edtulo. Por lo general, dicho contenido se trata de una imagen, una ilustraci\u00f3n, un diagrama, un fragmento de c\u00f3digo, o un esquema al que se hace referencia en el texto principal, pero que se puede mover a otra p\u00e1gina o a un ap\u00e9ndice sin que afecte al flujo principal.</p> <p>La etiqueta <code>&lt;figure&gt;</code> es una de las etiquetas sem\u00e1nticas a\u00f1adidas por HTML 5, al igual que por ejemplo <code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>, etc, y al igual que \u00e9stas se trata de un elemento en bloque (como si de una etiqueta <code>&lt;div&gt;</code> se tratara).</p> <p>Por su parte, el elemento HTML <code>&lt;figcaption&gt;</code> representa un subt\u00edtulo o leyenda asociado con una imagen o ilustraci\u00f3n descrita por el resto de los datos asociados con el elemento <code>&lt;figure&gt;</code> padre de <code>&lt;figcaption&gt;</code>. Este elemento es opcional; y si no se especifica, el elemento padre <code>&lt;figure&gt;</code> no tendr\u00e1 leyenda asociada. Veamos un ejemplo de uso de estos dos elementos asociados a una imagen de contenido:</p> <pre><code>&lt;figure&gt;\n&lt;img src=\"/imagenes/foto1.jpg\" alt=\"Vista nocturna de la Alhambra\" /&gt;\n&lt;figcaption&gt;Fig 1. - Vista nocturna de la Alhambra&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre>"},{"location":"tema_6/page-1/#adecuacion-del-objeto-en-el-elemento","title":"Adecuaci\u00f3n del objeto en el elemento","text":"<p>Cuando usamos etiquetas que contendr\u00e1n objetos, como por ejemplo <code>&lt;img&gt;</code>, que incluir\u00e1 un objeto imagen, debemos tener en cuenta que puede que el tama\u00f1o del objeto imagen no coincida con el tama\u00f1o asignado mediante HTML o CSS al elemento que lo contendr\u00e1.</p> <p>De hecho el objeto tendr\u00e1 unas dimensiones intr\u00ednsecas: su altura intr\u00ednseca, su anchura intr\u00ednseca y su relaci\u00f3n de aspecto intr\u00ednseca (la relaci\u00f3n entre la anchura y la altura). Estas dimensiones intr\u00ednsecas representan al tama\u00f1o preferido o natural del objeto en s\u00ed mismo, es decir, no son funci\u00f3n del contexto en el que se utiliza el objeto. Algunos objetos pueden que no tengan definidas algunas de estas dimensiones intr\u00ednsecas, por ejemplo las im\u00e1genes SVG dise\u00f1adas a escala, que s\u00f3lo proporcionan su relaci\u00f3n de aspecto.</p> <p>Por otra parte, las dimensiones del elemento donde se mostrar\u00e1 el objeto son dependientes del contexto en donde se encuentre, por ejemplo el tama\u00f1o de su elemento padre, y tambi\u00e9n del valor de determinadas propiedades CSS que hayamos especificado, como por ejemplo <code>width</code>, <code>height</code>, <code>min-width</code>. etc.</p>"},{"location":"tema_6/page-1/#object-fit","title":"object-fit","text":"<p>Por tanto el navegador debe mostrar el objeto dentro de la caja correspondiente a dicho elemento, lo que puede conllevar el redimensionado del objeto. Para controlar este proceso, podemos hacer uso de la <code>object-fit</code>, que establece como se debe mostrar el objeto dentro de su caja.</p> Propiedad <code>object-fit</code> Valores fill | contain | cover | none | scale-down Se aplica a Elementos que contienen objetos Valor inicial fill Descripci\u00f3n Establece c\u00f3mo se adec\u00faa el objeto dentro del elemento <p>El significado de los valores es el siguiente:</p> <ul> <li><code>fill</code>: El objeto se redimensiona para llenar la caja del elemento. Las dimensiones del objeto se ajustan al valor correspondiente del elemento , si es que han sido especificados, incluso perdiendo su relaci\u00f3n de aspecto. El objeto ocupar\u00e1 siempre todo el elemento, pero puede quedar deformado. Es el valor por defecto.</li> <li><code>contain</code>: El objeto se redimensiona manteniendo su relaci\u00f3n de aspecto de manera que entre entero dentro del elemento sin deformarlo. Puede no ocupar todo el ancho o alto del elemento.</li> <li><code>cover</code>: El objeto se redimensiona manteniendo su relaci\u00f3n de aspecto para cubrir toda la superficie de la caja contenedora, realizando un recorte en el objeto de la parte sobrante que no entra en el elemento. El elemento se cubre por completo, pero el objeto puede no mostrarse entero.</li> <li><code>none</code>: El objeto NO se redimensiona. El tama\u00f1o con el que se mostrar\u00e1 el objeto depender\u00e1 del tipo de objeto del que se trate (y del algoritmo usado por \u00e9l).</li> <li><code>scale-down</code>: El objeto se dimensiona al tama\u00f1o m\u00e1s peque\u00f1o entre el tama\u00f1o original y el tama\u00f1o resultante de redimensionarlo manteniendo su relaci\u00f3n de aspecto para colocarlo dentro de su caja, es decir el de menor tama\u00f1o entre aplicar los valores <code>none</code> o <code>contain</code>.</li> </ul> <p> Figura 1 - object-fit</p> <p>Si queremos forzar a que el elemento tome las dimensiones del objeto debemos usar para el elemento las propiedades <code>max-width</code> y <code>max-height</code> en vez de <code>width</code> y <code>height</code>.</p>"},{"location":"tema_6/page-1/#object-position","title":"object-position","text":"<p>Si aplicamos a la propiedad <code>object-fit</code> un valor distinto a <code>fill</code>, el objeto se muestra por defecto centrado en el elemento, aunque podemos variar este comportamiento con la propiedad <code>object-position</code>, que determina la posici\u00f3n del objeto dentro del elemento.</p> Propiedad <code>object-position</code> Valores (unidad_medida | porcentaje) Se aplica a Elementos que contienen objetos Valor inicial 50% 50% Descripci\u00f3n Establece la posici\u00f3n del objeto dentro del elemento <p>Recibe de uno a cuatro valores que representan la posici\u00f3n de objeto respecto a los bordes de la caja del elemento. Los valores porcentuales se refieren respecto a la anchura y altura de la caja.</p> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    object-position by irubenboy (@irubenboy)   on CodePen. </p> <p>Info</p> <p>En la siguiente web tiene una demostraci\u00f3n interactiva: http://demo.tutorialzine.com/2016/04/quick-tip-get-to-know-css-object-fit-position/</p>"},{"location":"tema_6/page-1/#image-orientation","title":"image-orientation","text":"<p>CSS tambi\u00e9n define la propiedad <code>image-orientation</code>, que permite girar el objeto una serie de grados al situarlo dentro del elemento. Sin embargo esta propiedad s\u00f3lo es soportada actualmente por Firefox.</p>"},{"location":"tema_6/page-1/#filtros","title":"Filtros","text":"<p>La propiedad <code>filter</code> dota de efectos como el desenfoque o cambio de color en la representaci\u00f3n de un elemento antes de que se muestre el elemento. Los filtros se utilizan com\u00fanmente para ajustar la representaci\u00f3n de una imagen.</p> Propiedad <code>filter</code> Valores none | uno o m\u00e1s Se aplica a Todos los elementos Valor inicial none Descripci\u00f3n Aplica uno o m\u00e1s filtros de visualizaci\u00f3n al elemento <p>Veamos los filtros disponibles:</p> <ul> <li><code>blur(radio_desenfoque)</code>: Aplica un desenfoque Gaussiano a la imagen. El valor de radio define el valor de la desviaci\u00f3n est\u00e1ndar de la funci\u00f3n de desenfoque Gaussiano o el n\u00famero de p\u00edxeles que se mezclan entre s\u00ed, por lo que un valor mayor crear\u00e1 un mayor desenfoque.</li> <li><code>brightness(%brillo)</code>: Se aplica una multiplicaci\u00f3n lineal a la imagen, haciendo que parezca m\u00e1s o menos brillante. El valor del brillo de la imagen original corresponde al valor 100%, que es el valor por defecto. As\u00ed, un valor de 0% convertir la imagen completamente a negro y un valor mayor que 100% aumentar\u00e1 el brillo de la imagen.</li> <li><code>contrast(%contraste)</code>: Ajusta el contraste de la imagen. El valor del contraste de la imagen original corresponde al valor 100%, que es el valor por defecto. As\u00ed, un valor de 0% hace que la imagen sea completamente negra y valor mayor de 100% proporcionan im\u00e1genes con mayor contraste.</li> <li><code>saturate(%saturaci\u00f3n)</code>: Ajusta la saturaci\u00f3n de la imagen. El valor de la saturaci\u00f3n de la imagen original corresponde al valor 100%, que es el valor por defecto. As\u00ed, un valor de 0% hace que la imagen aparezca totalmente insaturada y valor mayor de 100% proporcionan im\u00e1genes con mayor saturaci\u00f3n.</li> <li><code>grayscale(%conversion)</code>: Convierte la imagen a escala de grises. Un valor de 100% es mostrada completamente en escala de grises. Un valor de 0% no modifica la imagen (valor por defecto).</li> <li><code>sepia(%conversion)</code>: Convierte la imagen a color sepia. Un valor de 100% es mostrada completamente en sepia. Un valor de 0% no modifica la imagen (valor por defecto).</li> <li><code>invert(%inversion)</code>: Invierte los colores de la imagen. Un valor de 100% invierte completamente los colores. Un valor de 0% no modifica la imagen (valor por defecto).</li> <li><code>hue-rotate(deg)</code>: Rota la tonalidad de los colores los grados indicados. Un valor de 0 grados no modifica la imagen (valor por defecto). Si valor proporcionado es mayor de 360, se sigue girando. <code>drop-shadow()</code>: Aplica una sombra a la imagen. Recibe los mismos valores que la propiedad <code>box-shadow</code>, excepto <code>inset</code>, que no est\u00e1 permitido. Esta funci\u00f3n es similar a utilizar la propiedad <code>box-shadow</code>, aunque algunos navegadores proporcionan aceleraci\u00f3n por hardware si usamos este filtro en vez de la propiedad <code>box-shadow</code>, mejorando el rendimiento.</li> <li><code>opacity(%opacidad)</code>: Establece la opacidad de la imagen. El valor 100% (valor por defecto) muestra la imagen sin transparencia. El valor 0% hace a la imagen completamente transparente.</li> </ul> <p>Podemos combinar las funciones anteriores dentro del valor de la propiedad filter, tan s\u00f3lo tendremos que separar las llamadas a las funciones mediante espacio en blanco.</p> <p>Aparte de los filtros disponibles a trav\u00e9s de funciones, podemos usar como valor de la propiedad filter la URL de un elemento <code>&lt;filter&gt;</code> contenido dentro de un elemento <code>&lt;svg&gt;</code> local. El trabajo con los filtros SVG es algo m\u00e1s complejo.</p> <p>Info</p> <p>Demo interactiva 1 de las propiedad filter Demo interactiva 2 de las propiedad filter</p> <p>A continuaci\u00f3n se muestra un ejemplo:</p> <p> See the Pen    image filter by irubenboy (@irubenboy)   on CodePen. </p> <p>Por su parte, la propiedad <code>backdrop-filter</code> permite aplicar filtros al \u00e1rea situada detr\u00e1s de un elemento. Para que vean estos efectos es necesario que el elemento sea parcialmente transparente.</p> Propiedad <code>backdrop-filter</code> Valores none | uno o m\u00e1s Se aplica a Todos los elementos Valor inicial none Descripci\u00f3n Aplica uno o m\u00e1s filtros de visualizaci\u00f3n al elemento a lo que haya detr\u00e1s de un elemento <p>Los posibles filtros son: <code>blur()</code>, <code>brightness()</code>, <code>contrast()</code>, <code>drop-shadow()</code>, <code>grayscale()</code>, <code>hue-rotate()</code>, <code>invert()</code>, <code>opacity()</code>, <code>saturate()</code>, o <code>sepia(),</code> con los mismo significados que en la propiedad <code>filter</code>.</p> <p> See the Pen    backdrop filter by irubenboy (@irubenboy)   on CodePen. </p> <p>Aqu\u00ed un ejemplo para ver la diferencia entre <code>backdrop-filter</code> y <code>filter</code>:</p> <p> See the Pen    Untitled by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-1/#recortando-cajas","title":"Recortando cajas","text":"<p>Tradicionalmente todos los elementos han sido mostrados con forma rectangular, es decir, en cajas con cuatro esquinas con un \u00e1ngulo de 90 grados. Con el uso de <code>border-radius</code> se enmascaran las esquinas para que aparezcan redondeadas.</p> <p>Para poder solucionar este problemas, CSS3 incluye la propiedad <code>clip-path</code>, que permite aplicar patrones de recorte a los elementos, de manera que estos luzcan con formas distintas a la rectangular.</p> Propiedad <code>clip-path</code> Valores none | &lt;url_origen_recorte&gt; | [ &lt;forma-b\u00e1sica&gt; | &lt;caja_referencia&gt; ] Se aplica a Todos los elementos Valor inicial none Descripci\u00f3n Establece el modo de recorte del elemento <p>Veamos los valores posibles:</p> <ul> <li><code>&lt;url_origen_recorte&gt;</code>: Hace referencia a la URL del elemento que va a ser usado para recortar la imagen. Dicho elemento debe ser un contenido dentro de un elemento <code>&lt;clipPath&gt;</code> correspondiente para que podamos indicar su URL relativa haciendo uso de #id. Esta posibilidad es compatible actualmente tanto en Firefox como en Chrome.</li> <li><code>&lt;forma_b\u00e1sica&gt;</code>: Como alternativa a especificar la URL, podemos usar una forma b\u00e1sica para indicar el elemento que debe ser usado para recortar la imagen. Esta posibilidad s\u00f3lo est\u00e1 presente por ahora en Chrome. Para definir la forma b\u00e1sica se puede usar una de las siguientes funciones:<ul> <li><code>circle(&lt;radio&gt; at &lt;posici\u00f3n&gt;)</code>: El recorte se realizar\u00e1 con un c\u00edrculo del radio indicado situado en la posici\u00f3n indicada. Por ejemplo:   <pre><code>/*Recorte con c\u00edrculo con radio del 50% situado en el centro*/\nimg {\nclip-path: circle(50% at 50% 50%);\n}\n</code></pre></li> <li><code>ellipse(&lt;radio1&gt; &lt;radio2&gt; at &lt;posici\u00f3n&gt;)</code>: El recorte se realizar\u00e1 con una elipse de los radios indicados en la posici\u00f3n indicada.. Por ejemplo:   <pre><code>/*Recorte en forma de elipse*/\nimg {\nclip-path: ellipse(50% 35% at 50% 50%);\n}\n</code></pre></li> <li><code>inset(&lt;long1&gt; &lt;long2&gt; &lt;long3&gt; &lt;long4&gt; round &lt;radio_esquinas&gt;)</code>: El recorte se realizar\u00e1 mediante un rect\u00e1ngulo interior situado a la longitud indicada respecto a cada lado y con las esquinas redondeadas con el radio indicado. Por ejemplo:   <pre><code>/*Recorte mediante un rect\u00e1ngulo interior con una distancia del 10% respecto al borde de la caja y las esquinas redondeadas con un radio de 10px*/\nimg {\nclip-path: inset(10% round 10px);\n}\n</code></pre></li> <li><code>polygon(puntos)</code>: El recorte se realizar\u00e1 siguiente el pol\u00edgono indicado por los puntos. Por ejemplo:   <pre><code>/*Recorte mediante el pol\u00edgono indicado (un tri\u00e1ngulo en este caso)*/\nimg {\nclip-path: polygon(50% 0%, 0% 100%, 100% 100%);\n}\n</code></pre></li> </ul> </li> </ul> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    image clipPath by irubenboy (@irubenboy)   on CodePen. </p> <p>Info</p> <p>Afortunadamente, tenemos disponibles online algunos generadores para obtener de forma visual los valores para la propiedad clip-path:</p> <p>http://cssplant.com/clip-path-generator</p> <p>http://bennettfeely.com/clippy/</p>"},{"location":"tema_6/page-1/#aspect-ratio","title":"aspect-ratio","text":"<p>La propiedad <code>aspect-ratio</code> permite definir la relaci\u00f3n de aspecto entre la altura y la anchura de un elemento. Si est\u00e1 definida la relaci\u00f3n de aspecto y la anchura, la altura seguir\u00e1 la definici\u00f3n de <code>aspect-radio</code> indicada.</p> <p>Tip</p> <p>Usa la propiedad <code>aspect-ratio</code> en responsive layouts donde los elementos a menudo var\u00edan en el tama\u00f1o y se desea preservar la relaci\u00f3n entre la altura y la anchura.</p> <p>El <code>aspect-ratio</code> recibe una fracci\u00f3n cuyo numerador hace referencia a la anchura y el denominador a la altura.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    aspect-ratio by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-1/#imagenes-responsive","title":"Im\u00e1genes responsive","text":"<p>Como hemos visto, es relativamente sencillo hacer que una elemento <code>&lt;img&gt;</code> se adapte al tama\u00f1o de pantalla, bastar\u00e1 con establecer para dicho elemento la propiedad <code>width</code> a un valor porcentual y, opcionalmente, las propiedades <code>min-width</code> y/o <code>max-width</code> a un valor fijo.</p> <p>Incluso hemos visto c\u00f3mo controlar la adaptaci\u00f3n del objeto imagen dentro del elemento <code>&lt;img&gt;</code> gracias a las propiedades <code>object-fit</code> y <code>object-position</code>, con las que podemos establecer, respectivamente, el tipo de escalado de la imagen y su posici\u00f3n dentro del elemento.</p> <p>Sin embargo estas t\u00e9cnicas distan de ser ideales en la realidad, porque si queremos que la imagen se visualice bien en tama\u00f1os y resoluciones de pantalla muy dispares, como por ejemplo un dispositivo m\u00f3vil de baja resoluci\u00f3n y una pantalla de escritorio de alta resoluci\u00f3n, nuestra mejor opci\u00f3n ser\u00eda proporcionar el objeto imagen en el tama\u00f1o m\u00e1s grande y en la mayor resoluci\u00f3n que vaya a necesitar, y que sea escalado hacia un tama\u00f1o inferior cuando sea necesario. De esta forma la imagen se mostrar\u00e1 siempre con buena calidad independientemente del dispositivo. No obstante, dicha calidad tiene un precio: el peso de la imagen, es decir, el n\u00famero de MB que tendr\u00e1n que descargarse para mostrar la imagen, incluso aunque la imagen vaya a mostrarse finalmente en un tama\u00f1o mucho menor y con una resoluci\u00f3n mucho menor.</p> <p>Para solucionar este problema HTML5 incorpor\u00f3 el atributo <code>srcset</code> a la etiqueta <code>&lt;img&gt;</code>, que permite al desarrollador especificar distintas versiones de la imagen, indicando su ancho y otros factores, como la resoluci\u00f3n, la orientaci\u00f3n, etc., de manera que el navegador sea capaz de elegir la versi\u00f3n m\u00e1s \u00f3ptima en cada momento.</p> <p>El atributo <code>srcset</code> es una extensi\u00f3n del atributo <code>src</code>. Su valor corresponde a una lista de una o m\u00e1s cadenas separadas por comas indicando las distintas \"versiones\" de la imagen. Cada cadena describe las caracter\u00edsticas de dicha \"versi\u00f3n\", haciendo uso de la sintaxis <code>url [ancho] [radio_densidad]</code>, donde:</p> <ul> <li><code>url</code>: Indica la url del objeto imagen.</li> <li><code>ancho</code>: Indica la anchura del objeto imagen. Se especifica con un n\u00famero positivo seguido de la letra w. Es opcional.</li> <li><code>ratio_densidad</code>: Indica el n\u00famero de p\u00edxeles del dispositivo respecto al del CSS. Se especifica por un n\u00famero positivo decimal seguido de la letra x. Se usa con pantallas retina como las del mac, que tienen un valor 2x. Es opcional y su valor por defecto es 1x. No es v\u00e1lido mezclar ancho y ratio_densidad en el mismo atributo <code>srcset</code>, ni repetir descriptores en varias cadenas.</li> </ul> <p>Veamos un ejemplo:</p> <pre><code>&lt;img\nsrcset=\"imagenes/foto.jpg 200w, imagenes/foto-grande.jpg 400w, imagenes/foto-enorme.jpg 600w, imagenes/foto-2x.jpg 2x\"\nsrc=\"imagenes/foto.jpg\"/&gt;\n</code></pre> <p>El navegador seleccionar\u00e1 autom\u00e1ticamente la versi\u00f3n m\u00e1s adecuada de la imagen atendiendo al tama\u00f1o del elemento y al ratio de densidad del dispositivo. Se recomienda siempre incluir tambi\u00e9n el atributo <code>src</code> con el valor tradicional, por si el navegador no soportara el atributo <code>srcset</code>.</p> <p>Veamos una demostraci\u00f3n (ver en Firefox, porque en Chrome hay un fallo de refresco, ya que una vez obtenida una versi\u00f3n de mayor tama\u00f1o no se actualizar\u00e1 a una de tama\u00f1o menor, aunque en el sentido inverso si funciona):</p> <p> See the Pen    image srcset by irubenboy (@irubenboy)   on CodePen. </p> <p>Otro de los nuevos atributos introducidos por HTML5 para la etiqueta <code>&lt;img&gt;</code> es el atributo <code>sizes</code>, que permite indicar al navegador la anchura que va a tener la caja correspondiente a una etiqueta <code>&lt;img&gt;</code> dependiendo de la anchura del viewport., con objeto de que el navegador puede elegir la versi\u00f3n \u00f3ptima de la imagen. Este atributo recibe una lista de una o m\u00e1s cadenas separadas por comas, cada una de las cuales consiste en:</p> <ul> <li>Una condici\u00f3n de anchura de viewport similar a las de las media queries, que sirve para indicar cu\u00e1ndo debe usarse el tama\u00f1o que se proporcionar\u00e1 a continuaci\u00f3n. Esta condici\u00f3n debe omitirse en la \u00faltima cadena, ya que \u00e9sta s\u00f3lo incluir\u00e1 el tama\u00f1o por defecto de la caja para a la etiqueta <code>&lt;img&gt;</code></li> <li>Un valor de tama\u00f1o, correspondiente a la anchura de la caja para la etiqueta <code>&lt;img&gt;</code> cuando la anchura del viewport cumple con la condici\u00f3n especificada anteriormente.</li> </ul> <p>Veamos un ejemplo:</p> <pre><code>&lt;img\nsrcset=\"imagenes/foto.jpg 200w, imagenes/foto-grande.jpg 400w, imagenes/foto-enorme.jpg 600w\"\nsizes=\"(max-width: 300px) 100vw, (max-width: 600px) 66vw, 33vw\"\nsrc=\"images/foto.jpg\"/&gt;\n</code></pre> <p>En el ejemplo anterior estamos indicando que:</p> <ul> <li>cuando la anchura del viewport sea como m\u00e1ximo de 300px el elemento <code>&lt;img&gt;</code> ocupar\u00e1 el 100% de la anchura del viewport</li> <li>cuando la anchura del viewport sea como m\u00e1ximo de 600px el elemento <code>&lt;img&gt;</code> ocupar\u00e1 el 66% de la anchura del viewport</li> <li>En el resto de casos el elemento <code>&lt;img&gt;</code> ocupar\u00e1 el 33% de la anchura del viewport</li> </ul> <p>El navegador usar\u00e1 el valor de este atributo para determinar la imagen adecuada de entre las especificadas en el atributo <code>srcset</code>, siempre y cuando se haya indicado el ancho de las im\u00e1genes en dicho atributo. Si no ha especificado el atributo <code>srcset</code>, o no contiene imagenes para las que se haya definido un ancho, entonces el atributo <code>sizes</code> no tiene efecto.</p> <p>Veamos una demostraci\u00f3n (ver en Firefox, porque en Chrome hay un fallo de refresco, ya que una vez obtenida una versi\u00f3n de mayor tama\u00f1o no se actualizar\u00e1 a una de tama\u00f1o menor, aunque en el sentido inverso s\u00ed funciona):</p> <p> See the Pen    images sizes by irubenboy (@irubenboy)   on CodePen. </p> <p>El elemento <code>&lt;picture&gt;</code> es un contenedor que permite al desarrollador proporcionar m\u00faltiples versiones (or\u00edgenes) de una imagen, para que el navegador elija qu\u00e9 versi\u00f3n es la m\u00e1s id\u00f3nea para mostrar en el elemento en base a una serie de criterios. Se trata pues de una extensi\u00f3n de los conceptos introducidos por los atributos <code>srcset</code> y <code>sizes</code>. Un elemento <code>&lt;picture&gt;</code> debe tener obligatoriamente los siguientes hijos:</p> <ul> <li>Al menos un elemento <code>&lt;source&gt;</code>, en el que se especifique al menos una versi\u00f3n (origen) de la imagen.</li> <li>Un elemento <code>&lt;img&gt;</code>, en el que se defina el atributo src.</li> </ul> <p>Veamos un ejemplo:</p> <pre><code>&lt;picture&gt;\n&lt;source srcset=\"imagenes/foto.jpg 200w, imagenes/foto-grande.jpg 400w, imagenes/foto-enorme.jpg 600w\" /&gt;\n&lt;img src=\"imagenes/foto.jpg\" alt=\"Foto\" /&gt;\n&lt;/picture&gt;\n</code></pre> <p>El elemento <code>&lt;source&gt;</code> representa, por su parte, un origen o fuente para la obtenci\u00f3n de una o varias versiones de la imagen que se desea mostrar. Sus atributos principales son:</p> <ul> <li><code>srcset</code>: Mismo significado que en el elemento <code>&lt;img&gt;</code>. Es obligatorio.</li> <li><code>sizes</code>: Mismo significado que en el elemento <code>&lt;img&gt;</code>. Es opcional.</li> <li> <p><code>media</code>: Indica una condici\u00f3n de media query para la que se sugiere al navegador usar el scrset indicado. Es opcional. Por ejemplo:</p> <pre><code>&lt;picture&gt;\n&lt;source media=\"(min-width: 45rem)\" srcset=\"imagenes/foto-grande.jpg\"&gt;\n&lt;source media=\"(min-width: 18rem)\" srcset=\"imagenes/foto-mediana.jpg\"&gt;\n&lt;img src=\"imagenes/foto-peque\u00f1a.jpg\" alt=\"Foto\" /&gt;\n&lt;/picture&gt;\n</code></pre> <p>En el ejemplo anterior, se sugiere al navegador que se use la foto mediana si el viewport tiene una anchura mayor de 18rem, la foto grande si es mayor de 45rem y la foto peque\u00f1a en otro caso.</p> <p>Otro ejemplo caracter\u00edstico es hacer que la versi\u00f3n de la imagen sea distinta dependiendo de si el dispositivo est\u00e1 en modo retrato o en modo apaisado. Por ejemplo:</p> <pre><code>&lt;picture&gt;\n&lt;source media=\"(orientation: landscape)\" srcset=\"imagenes/foto-apaisada.jpg\"&gt;\n&lt;source media=\"(orientation: portrait)\" srcset=\"imagenes/foto-retrato.jpg\"&gt;\n&lt;img src=\"imagenes/foto.jpg\" alt=\"Foto\" /&gt;\n&lt;/picture&gt;\n</code></pre> </li> <li> <p><code>type</code>: Formato de archivo para el que se sugiere al navegador usar el <code>srcset</code> indicado. Es opcional. Por ejemplo:</p> <pre><code>&lt;picture&gt;\n&lt;source type=\"image/webp\" srcset=\"imagenes/foto.webp\"&gt;\n&lt;/picture&gt;\n</code></pre> <p>En el ejemplo anterior, los navegadores que soporten el formato de imagen webp mostrar\u00e1n dicho archivo, el resto mostrar\u00e1n el archivo jpg. Por otra parte tenemos disponibles algunos generadores online:</p> </li> </ul>"},{"location":"tema_6/page-1/#fuentes-iconicas","title":"Fuentes ic\u00f3nicas","text":"<p>Cuando tenemos que mostrar iconos una de las opciones habituales es usar las conocidas como fuentes ic\u00f3nicas, que fuentes (tipos de letras) que, en lugar de incluir letras, incluyen iconos como si de letras se tratase. La ventajas principales es que estas fuentes son:</p> <ul> <li>Se tratan de grafismos vectoriales, por lo que no se deforman o pixelan al cambiarlas de tama\u00f1o.</li> <li>Podemos aplicar un color al icono con tan s\u00f3lo cambiar el color de la fuente.</li> <li>Pesan mucho menos que las im\u00e1genes por lo que el cliente tendr\u00e1 que descargar menos datos. Algunas de las fuentes ic\u00f3nicas m\u00e1s conocidas son FontAwesome, Themify, Octicons, Fontastic, o Material Icons. A modo de ejemplo, veamos como a\u00f1adir una serie de iconos de FontAwesome a una web:</li> </ul> <p>Veamos una demostraci\u00f3n de FontAwesome:</p> <p> See the Pen    font-awesome by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-1/#iconos-svg","title":"Iconos SVG","text":"<p>Debemos tener en cuenta que las fuentes ic\u00f3nicas no dejan de ser un truco (hack) para tratar los iconos como si se tratasen de caracteres de un tipo de letra espec\u00edfico. De hecho, su empleo presenta algunos problemas, como por ejemplo el hecho de que si, por el motivo que sea, no se puede mostrar el icono correspondiente el navegador simplemente mostrar\u00e1 un cuadrado negro. Adem\u00e1s, debemos tener en cuenta que los lectores web para personas con discapacidad visual tratar\u00e1n de leer los iconos de estas fuentes ic\u00f3nicas como si de texto de tratara, con el consiguiente fallo de lectura.</p> <p>Actualmente se considera una mejor pr\u00e1ctica el empleo de los llamados iconos SVG. El est\u00e1ndar de formato SVG significa Scalable Vector Graphics, es decir, gr\u00e1ficos vectoriales escalables, y como su nombre indica, corresponde a un formato de especificaci\u00f3n textual en XML de gr\u00e1ficos vectoriales bidimensionales, esto es, un formato para describir mediante etiquetas, atributos y valores los vectores bidimensionales que conforman un determinado gr\u00e1fico. Al tratarse de vectores, el gr\u00e1fico resultante puede escalarse sin perder absolutamente nada de calidad, a diferencia de otros formatos gr\u00e1ficos NO vectoriales, como JPG, PNG, etc., que s\u00ed producen p\u00e9rdida de calidad. Todos los navegadores modernos est\u00e1n preparados para mostrar este tipo de gr\u00e1ficos, por lo que se recomienda su uso frente a las fuentes ic\u00f3nicas.</p> <p>Cuando trabajamos con iconos SVG lo habitual es crear un sprite con los distintos iconos, de manera que tan s\u00f3lo sea necesario llevar a cabo una \u00fanica petici\u00f3n al servicio para obtener todos los iconos deseados de una vez. Luego, cuando van a usarse tan s\u00f3lo tenemos que indicar exactamente que icono queremos dentro del sprite. De esta manera se reducen el n\u00famero de peticiones al servidor y la cantidad de memoria usada, ya que al ser una descripci\u00f3n textual XML no ocupar\u00e1 mucho espacio.</p> <p>Para facilitarnos la creaci\u00f3n de estos sprite podemos usar herramientas online como http://icomoon.io, que permite seleccionar los iconos deseados y posteriormente descargar un sprite que crea para nosotros con dichos iconos, indic\u00e1ndonos adem\u00e1s los nombres que debemos para obtener cada icono desde el sprite. Del fichero .zip descargado debemos incluir el archivo symbol-defs.svg en nuestro proyecto, renombr\u00e1ndolo normalmente a sprite.svg. Adem\u00e1s deberemos hechas un vistazo tambi\u00e9n al archivo demo.html porque nos mostrar\u00e1 el nombre que debemos usar para seleccionar cada icono dentro del sprite.</p> <p>Para incluir un icono SVG en nuestro HTML usaremos la etiqueta <code>&lt;svg&gt;</code>, y dentro de ella una etiqueta <code>&lt;use xlink:href=\"ruta_sprite#nombre_icono\"&gt;.</code> Por ejemplo:</p> <pre><code>&lt;svg class=\"search__icon\"&gt;\n&lt;use xlink:href=\"img/sprite.svg#icon-magnifying-glass\"&gt;&lt;/use&gt;\n&lt;/svg&gt;\n</code></pre> <p>En el ejemplo anterior se mostrar\u00e1 el icono llamado icon-magnifying-glass situado dentro del sprite que se encuentra en el archivo img/sprite.svg indicado como path relativo al archivo HTML en el que nos encontremos.</p> <p>Por otro lado podemos estilizar nuestro icono mediante CSS de una manera bastante sencilla. Por ejemplo, podemos usar <code>width</code> y <code>height</code> para especificar la anchura y altura del icono, y la propiedad <code>fill</code> para indicar el color en el que se debe mostrar el mismo (por defecto se muestran en negro). Por ejemplo:</p> <pre><code>.search__icon {\nwidth: 2rem;\nheight: 2rem;\nfill: red;\n}\n</code></pre> <p>No solo eso, al tratarse de etiquetas HTML, podemos manipularlas, estilizarlas o animarlas desde CSS o Javascript.</p> <p>El formato svg tambi\u00e9n se puede usar como si de cualquier otro formato se tratase, es decir, por ejemplo en el atributo <code>src</code> de la etiqueta <code>&lt;img&gt;</code>. En ese caso no se puede modificar internamente desde CSS o Javascript.</p> <p>Para estilar el borde desde CSS se usa <code>stroke</code> para el color y <code>stroke-width</code> para el ancho del borde.</p> <p>La \u00faltima versi\u00f3n de FontAwesome tambi\u00e9n nos permite usar este tipo de iconos vectoriales SVG.</p>"},{"location":"tema_6/page-1/#mascaras","title":"M\u00e1scaras","text":"<p>Podemos hacer que el color negro de una imagen act\u00fae como m\u00e1scara, de manera que dichas partes de la imagen se muestren con el color que haya en el fondo.</p> <p>La propiedad <code>mask-image</code> permite indicar la imagen que actuar\u00e1 como m\u00e1scara. Con <code>mask-size: cover</code> decimos que la m\u00e1scara ocupe todo el elemento (los valores son similares a los de <code>background-size</code>).</p>"},{"location":"tema_6/page-2/","title":"2 Audio y video","text":""},{"location":"tema_6/page-2/#introduccion","title":"Introducci\u00f3n","text":"<p>HTML5 introduce soporte integrado para el contenido multimedia gracias a los elementos <code>&lt;audio&gt;</code> y <code>&lt;video&gt;</code>, ofreciendo la posibilidad de insertar contenido multimedia en documentos HTML.</p>"},{"location":"tema_6/page-2/#etiqueta-audio","title":"Etiqueta audio","text":"<p>La etiqueta <code>&lt;audio&gt;</code> nos permite insertar audio en tu documento HTML. Veamos un ejemplo:</p> <pre><code>&lt;audio src=\"cancion.mp3\" preload=\"auto\" controls autoplay loop&gt;\n&lt;p&gt;Tu navegador no soporta el elemento audio. Puedes descargar el archivo (&lt;a href=\"cancion.mp3\" download&gt;cancion.mp3&lt;/a&gt;)&lt;/p&gt;\n&lt;/audio&gt;\n</code></pre> <p>Sus atributos principales son:</p> <ul> <li><code>src</code>: URL del archivo de audio que debe reproducirse. Es obligatorio.</li> <li><code>controls</code>: Muestra los controles est\u00e1ndar de HTML5 para reproducci\u00f3n de audio.</li> <li><code>autoplay</code>: Hace que el audio se reproduzca autom\u00e1ticamente en cuanto est\u00e9 cargado. No recomendado para dispositivos m\u00f3viles.</li> <li><code>loop</code>: Hace que el audio se repita autom\u00e1ticamente una vez concluido. No recomendado para dispositivos m\u00f3viles.</li> <li><code>preload</code>: Aconseja al navegador de que almacene temporalmente el archivo (buffering). Sus valores son: <code>none</code> (no almacena), <code>auto</code> (almacena el archivo) o <code>metadata</code> (almacena s\u00f3lo los metadatos del archivo). El contenido de la etiqueta <code>&lt;audio&gt;</code> corresponder\u00e1 al elemento que hay que mostrar cuando el navegador no soporte la etiqueta <code>&lt;audio&gt;</code>.</li> </ul> <p>Puede ocurrir que el navegador del usuario no soporte el formato de archivo de audio especificado, pero s\u00ed admita otros formatos. Por tanto es muy habitual indicar varios or\u00edgenes, es decir varias versiones del archivo de audio en distintos formatos.</p> <p>Cada versi\u00f3n est\u00e1 representada por una etiqueta <code>&lt;source&gt;</code>. En su atributo <code>src</code> indicaremos la URL del archivo y en el atributo <code>type</code> el tipo MIME del archivo. El navegador usar\u00e1 esta informaci\u00f3n para cargar la versi\u00f3n del archivo m\u00e1s adecuada a ese navegador. Veamos un ejemplo:</p> <pre><code>&lt;audio controls autoplay preload=\"auto\"&gt;\n&lt;source src=\"cancion.ogg\" type=\"audio/ogg\" /&gt;\n&lt;source src=\"cancion.mp3\" type=\"audio/mpeg\" /&gt;\n&lt;source src=\"cancion.wav\" type=\"audio/wav\" /&gt;\n  El navegador no soporta la etiqueta de audio.  Puedes descargar el archivo (&lt;a href=\"cancion.ogg\" download&gt;cancion.ogg&lt;/a&gt; | &lt;a href=\"cancion.mp3\" download&gt;cancion.mp3&lt;/a&gt; | &lt;a href=\"cancion.wav\" download&gt;cancion.wav&lt;/a&gt;)&lt;/p&gt;\n&lt;/audio&gt;\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    audio by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-2/#etiqueta-video","title":"Etiqueta video","text":"<p>La etiqueta <code>&lt;video&gt;</code> nos permite insertar video en tu documento HTML. Veamos un ejemplo:</p> <pre><code>&lt;video src=\"video.mp4\" preload=\"auto\" poster=\"posterimage.jpg\" controls autoplay loop&gt;\n&lt;p&gt;Tu navegador no soporta el elemento video. Puedes descargarlo &lt;a href=\"video.mp4\" download&gt;video.mp4&lt;/a&gt;&lt;/p&gt;\n&lt;/video&gt;\n</code></pre> <p>Sus atributos principales son:</p> <ul> <li><code>src</code>: URL del archivo de audio que debe reproducirse. Es obligatorio.</li> <li><code>controls</code>: Muestra los controles est\u00e1ndar de HTML5 para reproducci\u00f3n de v\u00eddeo.</li> <li><code>autoplay</code>: Hace que el v\u00eddeo se reproduzca autom\u00e1ticamente en cuanto est\u00e9 cargado. No recomendado para dispositivos m\u00f3viles.</li> <li><code>loop</code>: Hace que el v\u00eddeo se repita autom\u00e1ticamente una vez concluido. No recomendado para dispositivos m\u00f3viles.</li> <li><code>preload</code>: Aconseja al navegador de que almacene temporalmente el archivo (buffering). Sus valores son: <code>none</code> (no almacena), <code>auto</code> (almacena el archivo) o <code>metadata</code> (almacena s\u00f3lo los metadatos del archivo).</li> <li><code>poster</code>: URL de la imagen que deben usarse como p\u00f3ster del v\u00eddeo hasta que el usuario comience la reproducci\u00f3n o realice una b\u00fasqueda. Si no se especifica se usar\u00e1 el primer frame del v\u00eddeo cuando est\u00e9 disponible. Desgraciadamente, NO podemos usar la etiqueta <code>&lt;video&gt;</code> para incluir v\u00eddeos alojados en sitios web como Youtube, Vimeo, etc. El motivo es que estas web usan distintas t\u00e9cnicas para que no sea posible, con el objetivo de controlar ellos mismos la reproducci\u00f3n, colocaci\u00f3n de publicidad en los v\u00eddeos, etc. A cambio nos ofrecen la posibilidad de embeber el v\u00eddeo normalmente a trav\u00e9s de una etiqueta <code>&lt;iframe&gt;</code>.</li> </ul> <p>Aunque el formato de v\u00eddeo m\u00e1s adecuado para la web y soportado por todos los navegadores es el codec H264/mp4, podemos especificar distintas versiones del v\u00eddeo con distintos formatos, a trav\u00e9s de la etiqueta <code>&lt;source&gt;</code> al igual que ocurr\u00eda con al etiqueta <code>&lt;audio&gt;</code>. Por ejemplo:</p> <pre><code>&lt;video poster=\"postervideo.jpg\" controls autoplay preload=\"auto\"&gt;\n&lt;source src=\"video.mp4\" type=\"video/mp4\" /&gt;\n&lt;source src=\"video.ogv\" type=\"video/ogv\" /&gt;\n&lt;p&gt;Tu navegador no soporta la etiqueta de video. Puedes descargar el archivo (&lt;a href=\"video.mp4\" download&gt;video.mp4&lt;/a&gt; | &lt;a href=\"video.ogv\" download&gt;video.ogv&lt;/a&gt;)&lt;/p&gt;\n&lt;/video&gt;\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    video by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-3/","title":"3 Formularios","text":""},{"location":"tema_6/page-3/#introduccion","title":"Introducci\u00f3n","text":"<p>HTML es un lenguaje de marcado cuyo prop\u00f3sito principal consiste en estructurar los contenidos de los documentos y p\u00e1ginas web. Sin embargo, HTML tambi\u00e9n permite crear formularios para que los usuarios interact\u00faen con las aplicaciones web.</p>"},{"location":"tema_6/page-3/#etiqueta-form","title":"Etiqueta form","text":"<p>Para crear un formulario en HTML debemos crear una etiqueta <code>&lt;form&gt;</code>, que tendr\u00e1 como hijos todos los controles del formulario (cuadros de texto, botones, etc.).</p> <p>La etiqueta <code>&lt;form&gt;</code> se trata de un elemento en bloque, que puede recibir los siguientes atributos:</p> <ul> <li><code>action</code>: URL del destinatario de los datos que se van a enviar desde el formulario, y que se encargar\u00e1 de procesarlos.</li> <li><code>method</code>: M\u00e9todo HTTP empleado al enviar el formulario, Puede ser GET o POST.</li> <li><code>enctype</code>: Tipo de codificaci\u00f3n empleada al enviar el formulario al destinatario. S\u00f3lo se usa este atributo cuando se pretende enviar al destinatario un archivo desde el formulario. Los valores posibles son: application/x-www-form-urlencoded (valor por defecto), multipart/form-data (para env\u00edo de ficheros) y text/plain.</li> <li><code>autocomplete</code>: Indica que el navegador puede autocompletar el campos del formulario. Puede tomar el valor <code>on</code> (activado) u <code>off</code> (desactivado).</li> <li><code>novalidate</code>: Indica que el navegador NO debe validar los datos del formulario antes de enviarlos. Por defecto si son validados (cuando este atributo no est\u00e1 presente).</li> </ul> <p>La mayor\u00eda de formularios utilizan s\u00f3lo los atributos <code>action</code> y <code>method</code>. El atributo <code>action</code> indica la URL de la aplicaci\u00f3n del servidor que se encarga de procesar los datos introducidos por los usuarios. Esta aplicaci\u00f3n tambi\u00e9n se encarga de generar la respuesta que muestra el navegador.</p> <p>El atributo <code>method</code> establece la forma en la que se env\u00edan los datos del formulario al servidor. Este atributo hace referencia al m\u00e9todo HTTP, por lo que no es algo propio de HTML. Los dos valores que se utilizan en los formularios son GET y POST.</p> <p>Al margen de otras diferencias t\u00e9cnicas, el m\u00e9todo POST permite el env\u00edo de mucha m\u00e1s informaci\u00f3n que el m\u00e9todo GET. En general, el m\u00e9todo GET admite como m\u00e1ximo el env\u00edo de unos 500 bytes de informaci\u00f3n. La otra gran limitaci\u00f3n del m\u00e9todo GET es que no permite el env\u00edo de archivos adjuntos con el formulario. Adem\u00e1s, los datos enviados mediante GET se ven en la barra de direcciones del navegador (se a\u00f1aden al final de la URL de la p\u00e1gina), mientras que los datos enviados mediante POST no se pueden ver tan f\u00e1cilmente.</p> <p>Si no sabes que m\u00e9todo elegir para un formulario, existe una regla general que dice que el m\u00e9todo GET se debe utilizar en los formularios que no modifican la informaci\u00f3n (por ejemplo en un formulario de b\u00fasqueda). Por su parte, el m\u00e9todo POST se deber\u00eda utilizar cuando el formulario modifica la informaci\u00f3n original (insertar, modificar o borrar alguna informaci\u00f3n).</p> <p>El ejemplo m\u00e1s com\u00fan de formulario con m\u00e9todo GET es el de los buscadores. Si realizas una b\u00fasqueda con tu buscador favorito, ver\u00e1s que las palabras que has introducido en tu b\u00fasqueda aparecen como parte de la URL de la p\u00e1gina de resultados.</p> <p>Veamos un ejemplo:</p> <pre><code>&lt;form action=\"http://www.informaticasaladillo.es/mostrar.php\" method=\"post\" id=\"formulario\"&gt;\n&lt;label for=\"nombre\"&gt;Escriba su nombre completo:&lt;/label&gt;\n&lt;input type=\"text\" id=\"nombre\" name=\"fullname\" value=\"Baldomero\" /&gt;\n&lt;input type=\"submit\" value=\"Enviar\" /&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"tema_6/page-3/#etiqueta-label","title":"Etiqueta label","text":"<p>HTML incluye una etiqueta denominada <code>&lt;label&gt;</code> que se utiliza para establecer el t\u00edtulo de cada campo del formulario. El \u00fanico atributo que suele utilizarse con la etiqueta es <code>for</code>, que indica el identificador (atributo <code>id</code>) del campo de formulario del que sirve como t\u00edtulo. As\u00ed, en el ejemplo anterior, el label sirve como t\u00edtulo del campo de formulario con <code>id=\"nombre\"</code>.</p> <p>Las principales ventajas de utilizar <code>&lt;label&gt;</code> frente a texto simple son:</p> <ul> <li>El c\u00f3digo HTML est\u00e1 mejor estructurado y se mejora su accesibilidad.</li> <li>Al pinchar sobre el texto del <code>&lt;label&gt;</code>, es como si hici\u00e9ramos click sobre el campo asociado al que sirve de t\u00edtulo, recibiendo autom\u00e1ticamente el foco. Debemos tener en cuenta que se trata de un elemento en l\u00ednea.</li> </ul> <p>A la hora de modificarlo con CSS, puede ser usado con las propiedades de textos y de elementos en l\u00ednea.</p>"},{"location":"tema_6/page-3/#etiqueta-input","title":"Etiqueta input","text":"<p>Los elementos de formulario como botones y cuadros de texto tambi\u00e9n se denominan campos de formulario y controles de formulario. La mayor\u00eda de controles se crean con la etiqueta <code>&lt;input&gt;</code>, por lo que su definici\u00f3n formal y su lista de atributos es muy extensa.</p> <p>El atributo m\u00e1s importante es <code>type</code>, que indica el tipo de control de formulario del que se trata el elemento. Analicemos en los siguientes sub-apartados los distintos valores que puede tomar este atributo.</p> <p>Adem\u00e1s, todo campo de formulario debe tener un nombre, representado por el atributo <code>name</code>. El valor de dicho atributo ser\u00e1 enviado al destinatario del formulario, como identificador del valor introducido en el campo, de manera que el destinatario pueda referenciarlo para procesarlo. De hecho, si un campo no incluye el atributo <code>name</code>, sus datos no se env\u00edan al servidor.</p> <p>El atributo que representa el valor inicial del campo de formulario es <code>value</code>, que usaremos cuando queramos que aunque el usuario no haya introducido a\u00fan nada el campo muestre de inicio un valor.</p> <p>Otros atributos que podemos usar con todos los tipos de campos de formulario son:</p> <ul> <li><code>alt</code>: Texto descriptivo del campo (para el uso de personas con discapacidad).</li> <li><code>form</code>: Recibe el id del elemento <code>&lt;form&gt;</code> al que pertenece el campo. Este atributo permite situar los elementos <code>&lt;input&gt;</code> en cualquier parte del documento, incluso no siendo hijo de ning\u00fan <code>&lt;form&gt;</code> y luego indicar cu\u00e1l a qu\u00e9 formulario pertenece.</li> <li><code>tabindex</code>: Permite indicar el orden de tabulaci\u00f3n del elemento de formulario. Por defecto el orden de tabulaci\u00f3n corresponde al orden en el que aparecen en el documento HTML.</li> </ul> <p>Debemos tener en cuenta que la etiqueta <code>&lt;input&gt;</code> es autonconclusa, es decir, que no lleva etiqueta de cierre, por lo que la escribiremos como <code>&lt;input /&gt;</code>. Por otra parte, no debemos olvidar que la etiqueta <code>&lt;input&gt;</code> es un elemento en l\u00ednea.</p>"},{"location":"tema_6/page-3/#campos-de-texto","title":"Campos de texto","text":"<p>HTML nos proporciona una serie de valores para el atributo <code>type</code> que nos permiten crear campos de formulario para introducir texto:</p> <ul> <li><code>text</code>: Para introducir un texto gen\u00e9rico, por ejemplo un nombre.</li> <li><code>password</code>: Para introducir una contrase\u00f1a.</li> <li><code>email</code>: Para introducir un email.</li> <li><code>tel</code>: Para introducir una tel\u00e9fono.</li> <li><code>url</code>: Para introducir una URL.</li> <li><code>search</code>: Para introducir una cadena de b\u00fasqueda.</li> </ul> <p>Dependiendo del tipo de campo de texto del que se trate el navegador realizar\u00e1 por defecto unas determinada comprobaciones de validaci\u00f3n sobre el valor introducido. Por ejemplo, si se trata de un <code>&lt;input type=\"email\"/&gt;</code>, el navegador antes de enviar el formulario comprobar\u00e1 que el valor introducido en dicho campo contiene al menos una <code>@</code> y un <code>.</code>. Otra de las funcionalidad de los tipos, es que en dispositivos m\u00f3viles adec\u00faan el teclado virtual al valor posiblemente introducido. Por ejemplo, si el tipo es email, en el teclado aparecer\u00e1 de forma m\u00e1s accesible los caracteres de email (<code>@</code>, <code>.</code>).</p> <p>Hay varios atributos de la etiqueta <code>&lt;input&gt;</code> que podemos usar exclusivamente con los campos de formulario textuales:</p> <ul> <li><code>minlength</code>: N\u00famero m\u00ednimo de caracteres que se pueden introducir en el campo.</li> <li><code>maxlength</code>: N\u00famero m\u00e1ximo de caracteres que se pueden introducir en el campo.</li> <li><code>pattern</code>: Expresi\u00f3n regular con la que se va a comparar el valor introducido para comprobar si es v\u00e1lido.</li> <li><code>size</code>: Indica la anchura del campo de formulario en n\u00famero de caracteres. Si no se especifica, el navegador muestra el cuadro de texto con un tama\u00f1o predeterminado.</li> <li><code>placeholder</code>: Indica el texto que aparece en el campo de formulario como consejo (hint) para que el usuario sepa qu\u00e9 dato debe introducir en dicho campo, y que s\u00f3lo est\u00e1 visible cuando el campo est\u00e1 vac\u00edo. Veamos ejemplos de campos de formulario textuales</li> </ul> <pre><code>&lt;input type=\"text\" id=\"nombre\" name=\"fullname\"\nmaxlength=\"50\" size=\"30\" placeholder=\"(nombre)\" /&gt;\n&lt;input type=\"tel\" id=\"telefono\" name=\"phonenumber\"\nmaxlength=\"9\" size=\"11\" placeholder=\"(tel\u00e9fono)\" pattern=\"[0-9]{9}\" /&gt;\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    form: field texts by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-3/#campos-de-fecha-y-hora","title":"Campos de fecha y hora","text":"<p>HTML nos proporciona una serie de valores para el atributo type que nos permiten crear campos de formulario para introducir datos relacionados con las fechas:</p> <ul> <li><code>date</code>: Para introducir una fecha. Formato <code>YYYY-MM-DD</code>, por ejemplo 2016-06-23.</li> <li><code>time</code>: Para introducir una hora. Formato <code>HH:MM</code>, por ejemplo 21:45.</li> <li><code>month</code>: Para introducir un mes de un a\u00f1o. Formato <code>YYYY-MM</code>, por ejemplo 2011-11.</li> <li><code>week</code>: Para introducir un n\u00famero de semana de un a\u00f1o. Formato Y<code>YYY-Wnum_semana</code>, por ejemplo 2014-W43.</li> </ul> <p>A este tipo de campos podemos aplicarles una serie de atributos espec\u00edficos:</p> <ul> <li><code>min</code>: Valor m\u00ednimo que se puede introducir en el campo.</li> <li><code>max</code>: Valor m\u00e1ximo que se puede introducir en el campo. Veamos ejemplos de campos de formulario para fecha y hora:</li> </ul> <pre><code>&lt;input type=\"date\" id=\"fecha\" name=\"birthdate\" value=\"2011-11-24\" pattern=\"[0-9]{4}-[0-9]{2}-[0-9]{2}\" title=\"YYYY-MM-DD\" placeholder=\"YYYY-MM-DD\" /&gt;\n&lt;input type=\"time\" id=\"hora\" name=\"time\" value=\"21:52\" min=\"20:00\" max=\"22:00\" pattern=\"[0-9]{2}:[0-9]{2}\" title=\"HH:MM\" placeholder=\"HH:MM\" /&gt;\n&lt;input type=\"month\" id=\"mes\" name=\"month\" value=\"2011-11\" pattern=\"[0-9]{4}-[0-9]{2}\" title=\"YYYY-MM\" placeholder=\"YYYY-MM\" /&gt;\n&lt;input type=\"week\" id=\"semana\" name=\"week\" value=\"2011-W36\" pattern=\"[0-9]{4}-W[0-9]{2}\" title=\"YYYY-Wnumero_semana\" placeholder=\"YYYY-Wnumero_semana\" /&gt;\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    form: field date and time by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-3/#campos-numericos","title":"Campos num\u00e9ricos","text":"<p>HTML nos proporciona una serie de valores para el atributo type que nos permiten crear campos de formulario para introducir valores num\u00e9ricos:</p> <ul> <li><code>number</code>: Para introducir un valor num\u00e9rico.</li> <li><code>range</code>: Para seleccionar un valor num\u00e9rico dentro de un rango con un slider.</li> </ul> <p>Los siguientes atributos son caracter\u00edsticos de este tipo de campos de formulario:</p> <ul> <li><code>min</code>: Valor m\u00ednimo que se puede introducir en el campo.</li> <li><code>max:</code> Valor m\u00e1ximo que se puede introducir en el campo.</li> <li><code>step</code>: Cantidad que se debe incrementar / decrementar el valor del campo cuando el usuario pulse los botones de incremento / decrementos mostrados dentro del campo de tipo number o mueva el slider del campo tipo <code>range</code>. Su valor por defecto es 1. Podemos asignarle el valor <code>step=\"any\"</code> para indicar que el incremento/decremento puede ser cualquier valor, incluso aunque no sea entero.</li> </ul> <p>Si el usuario introduce manualmente un valor que no es v\u00e1lido en relaci\u00f3n al atributo <code>step</code>, al pulsar sobre alguno de los botones de incremento o decremento se realizar\u00e1 un redondeo al siguiente / anterior valor v\u00e1lido.</p> <p>En los campos <code>range</code> si no se proporciona un valor inicial, se usar\u00e1 el valor correspondiente a <code>(min+max)/2</code>.</p> <p>Veamos ejemplos de campos de formulario num\u00e9ricos:</p> <pre><code>&lt;input type=\"number\" id=\"hermanos\" name=\"siblings\" min=\"1\" max=\"50\" value=\"1\" /&gt;\n&lt;input type=\"range\" id=\"salario\" name=\"earnings\" min=\"600\" max=\"2000\" step=\"200\" value=\"1000\"&gt;\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    form: fields number by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-3/#campos-checkbox","title":"Campos checkbox","text":"<p>El valor checkbox del atributo type nos permite crear un campos checkbox o casillas de verificaci\u00f3n. Este tipo de controles permite al usuario seleccionar y deseleccionar opciones individualmente. Aunque en ocasiones se muestran varios checkbox juntos, cada uno de ellos es completamente independiente del resto. Por este motivo, se utilizan cuando el usuario puede activar y desactivar varias opciones relacionadas pero no excluyentes.</p> <p>Cuando un checkbox es seleccionado y se env\u00eda el formulario al destinatario el valor enviado para dicho campo corresponde al valor que hayamos establecido para su atributo value. Si no especifica valor para dicho atributo se enviar\u00e1 el valor <code>on</code>.</p> <p>Si se quiere mostrar un checkbox seleccionado por defecto, se utiliza el atributo <code>checked</code>.</p> <p>Veamos un ejemplo:</p> <pre><code>&lt;input type=\"checkbox\" id=\"ejecutivo\" name=\"executive\" value=\"ejecutivo\" checked=\"checked\" /&gt; Ejecutivo\n&lt;input type=\"checkbox\" id=\"ingeniero\" name=\"engineer\" type=\"checkbox\" value=\"ingeniero\" /&gt; Ingeniero\n&lt;input type=\"checkbox\" id=\"operador\" name=\"operator\" type=\"checkbox\" value=\"operador\" /&gt; Operador\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    form: chechbox by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-3/#campos-radiobutton","title":"Campos radiobutton","text":"<p>Los controles de tipo radiobutton son similares a los controles de tipo checkbox, pero presentan una diferencia muy importante: son mutuamente excluyentes. Los radiobutton se utilizan cuando el usuario solamente puede escoger una opci\u00f3n de entre varias que se le presentan. Cada vez que se selecciona una opci\u00f3n, autom\u00e1ticamente se deselecciona la opci\u00f3n que estuviera seleccionaba anteriormente.</p> <p>El valor del atributo <code>type</code> para estos controles de formulario es radio. El atributo <code>name</code> se emplea para indicar los radiobutton que est\u00e1n relacionados. Por lo tanto, cuando varios radiobutton tienen el mismo valor en su atributo <code>name</code>, el navegador sabe que est\u00e1n relacionados (agrupados), de manera que s\u00f3lo permite tener seleccionado uno de ellos, as\u00ed que cuando se selecciona un radiobutton con un determinado valor de <code>name</code>, el navegador deselecciona autom\u00e1ticamente el resto de radiobuttons que tengan el mismo valor en el atributo <code>name</code>.</p> <p>Cuando se env\u00eda el formulario al destinatario, para cada grupo de radiobuttons (aquellas que comparten el valor del atributo name) se env\u00eda un \u00fanico valor, el correspondiente al atributo <code>value</code> del radiobutton seleccionado. Si no especifica valor para dicho atributo en el radiobutton seleccionado, se enviar\u00e1 el valor on, que NO nos permitir\u00e1 distinguir realmente qu\u00e9 opci\u00f3n ha sido la seleccionado, por lo que deber\u00edamos de especificar siempre el valor <code>value</code> para todos los radiobuttons.</p> <p>Si se quiere mostrar como seleccionado por defecto un determinado radiobutton (dentro de un grupo), estableceremos para dicho campo el atributo checked.</p> <p>Veamos un ejemplo:</p> <pre><code>&lt;input type=\"radio\" id=\"hombre\" name=\"sexo\" value=\"hombre\" /&gt;\n&lt;input type=\"radio\" id=\"mujer\" name=\"sexo\" value=\"mujer\" checked=\"checked\" /&gt;\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    form: radiobuttons by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-3/#botones","title":"Botones","text":"<p>HTML nos proporciona una serie de valores para el atributo <code>type</code> que nos permiten crear botones en nuestro formulario con distintas funcionalidades:</p> <ul> <li><code>submit</code>: Crea un bot\u00f3n de env\u00edo, es decir, aquel que al pulsarlo hace que los datos introducidos en el formulario sean enviados al destinatario.</li> <li><code>reset</code>: Crea un bot\u00f3n que al pulsarlo borra todos los datos introducidos por el usuario dejando a los campos en su estado inicial.</li> <li><code>button</code>: Crea un bot\u00f3n gen\u00e9rico que no tiene una funcionalidad espec\u00edfica, sino que debe ser indicada mediante programaci\u00f3n.</li> <li><code>image</code>: Crea un bot\u00f3n de env\u00edo (similar al valor <code>submit</code>), pero con la apariencia de una imagen. Para indicar la imagen a mostrar se usa el atributo <code>src</code> que recibir\u00e1 la URL de la imagen.</li> </ul> <p>En este tipo de controles, excepto en el tipo <code>image</code>, el valor del atributo <code>value</code> es el texto que muestra el bot\u00f3n. Si no se establece el atributo <code>value</code>, el navegador muestra un texto predefinido. Veamos unos ejemplos</p> <pre><code>&lt;input type=\"submit\" value=\"Enviar al destinatario\" /&gt;\n&lt;input type=\"reset\" value=\"Limpiar\" /&gt;\n&lt;input type=\"image\" src=\"imagenes/aceptar.png\" /&gt;\n&lt;input type=\"button\" value=\"Avisar\" onclick=\"alert('Ha pulsado el bot\u00f3n');\"/&gt;\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    form: buttons by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-3/#campos-de-seleccion-de-color","title":"Campos de selecci\u00f3n de color","text":"<p>El valor color del atributo <code>type</code> permite crear campos de formulario para que el usuario seleccione un color. Normalmente el navegador se encargar\u00e1 de mostrar un bot\u00f3n que al ser pulsado abra una ventana de selecci\u00f3n de color.</p> <p>Si queremos especificar un valor inicial para el campo asignaremos al atributo value un valor que represente un color en formato RGB hexadecimal de 6 d\u00edgitos, por ejemplo #FF0000, es el \u00fanico formato soportado. El valor por defecto es #000000.</p> <p>Veamos un ejemplo:</p> <pre><code>&lt;input type=\"color\" id=\"color-letra\" name=\"font-color\" value=\"#FF0000\" \npattern=\"#[a-f0-9]{6}\" title=\"Color RGB hexadecimal\" placeholder=\"#000000\"/&gt;\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    form: color by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-3/#campos-de-seleccion-de-archivos","title":"Campos de selecci\u00f3n de archivos","text":"<p>Los formularios tambi\u00e9n permiten adjuntar archivos para ser enviados al destinatario. El valor del atributo <code>type</code> para este control de formulario es file. El navegador se encarga de mostrar un cuadro de texto donde aparece el nombre del archivo seleccionado y un bot\u00f3n que permite navegar por los directorios y archivos del ordenador del usuario. Dicha visualizaci\u00f3n depende del navegador y del sistema operativo del cliente, y pr\u00e1cticamente NO se puede estilizar (aunque existen diferentes t\u00e9cnicas).</p> <p>Si se incluye un control para adjuntar archivos, es obligatorio a\u00f1adir el atributo <code>enctype</code> en la etiqueta <code>&lt;form&gt;</code> del formulario con el valor multipart/form-data, as\u00ed como establecer el m\u00e9todo de env\u00edo <code>method=\"POST\"</code>. Por tanto al definir el formulario usaremos la siguiente estructura:</p> <pre><code>&lt;form action=\"...\" method=\"POST\" enctype=\"multipart/form-data\"&gt;\n  ...\n&lt;/form&gt;\n</code></pre> <p>HTML nos proporciona una serie de atributos espec\u00edficos para este tipo de campo de formulario:</p> <ul> <li><code>multiple</code>: Permite seleccionar m\u00e1s de un archivo para ser enviados al destinatario.</li> <li><code>accept</code>: Indica los tipos de fichero que es destinatario puede recibir. Corresponde una lista de extensiones o tipos MIME separados por ,. Por ejemplo: .jpg, .png, .doc, audio/*.</li> <li><code>capture</code>: Indica si se prefiere en vez de la selecci\u00f3n del archivo la captura directa, por ejemplo la captura en ese momento de una foto, un video, u un audio. Veamos un ejemplo</li> </ul> <pre><code>&lt;form action=\"http://www.informaticasaladillo.es/mostrar.php\" method=\"post\" id=\"formulario\" enctype=\"multipart/form-data\"&gt;\n&lt;input type=\"file\" id=\"fotos\" name=\"photos\" multiple=\"multiple\" accept=\"image/*\" capture=\"capture\" /&gt;\n  ...\n&lt;/form&gt;\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    form: file by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-3/#campos-ocultos","title":"Campos ocultos","text":"<p>Los campos ocultos se emplean para a\u00f1adir informaci\u00f3n oculta en el formulario. El valor del atributo <code>type</code> para este control de formulario es hidden. Los campos ocultos NO se muestran por pantalla, de forma que el usuario desconoce que el formulario los incluye. Normalmente los campos ocultos se utilizan para incluir informaci\u00f3n que necesita el destinatario pero que no es necesario o no es posible que la establezca el usuario, como por ejemplo el n\u00famero de cliente del cliente cuyos datos quieren ser actualizados a trav\u00e9s del formulario.</p> <p>Veamos un ejemplo:</p> <pre><code>&lt;input type=\"hidden\" name=\"id_clilente\" value=\"45678\" /&gt;\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    form: hidden by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-3/#etiqueta-textarea","title":"Etiqueta textarea","text":"<p>La etiqueta <code>&lt;textarea&gt;</code> permite crear muchos tipos diferentes de campos de formulario. Sin embargo, existen otros tipos de campos que se crean con etiquetas diferentes. Un ejemplo de ello es la etiqueta <code>&lt;textarea&gt;</code>, que permite crear un campo de texto en el que introducir una gran cantidad de texto.</p> <p>A diferencia de <code>&lt;input&gt;</code>, la etiqueta <code>&lt;textarea&gt;</code> necesita NO es autoconclusiva, por lo que tendremos que usar la etiqueta de cierre <code>&lt;/textarea&gt;</code>. El valor inicial del campo corresponder\u00e1 al texto contenido entre la etiqueta de apertura y cierre.</p> <p>La etiqueta <code>&lt;textarea&gt;</code> crea por defecto un elemento en l\u00ednea, al igual que <code>&lt;input&gt;</code>.</p> <p>Los atributos m\u00e1s utilizados en las etiquetas <code>&lt;textarea&gt;</code> son los que controlan su anchura y altura visual:</p> <ul> <li><code>cols</code>: Establece el n\u00famero de caracteres que se podr\u00e1n escribir como m\u00e1ximo en cada fila.</li> <li><code>rows</code>: Establece el n\u00famero de filas de texto que ser\u00e1n visibles. No debemos olvidar que estos atributos sirven para indicar al navegador c\u00f3mo debe dibujar el campo <code>&lt;textarea&gt;</code>, pero NO limitan el n\u00famero de caracteres que se pueden introducir en \u00e9l, algo que deberemos hacer con el atributo <code>maxlength</code>.</li> </ul> <p>Los siguientes atributos que explicamos cuando hablamos de la etiqueta <code>&lt;input&gt;</code> tambi\u00e9n son aplicables a la etiqueta <code>&lt;textarea&gt;</code>: <code>minlength</code>, <code>maxlength</code> y <code>placeholder</code>.</p> <p>Veamos un ejemplo:</p> <pre><code>&lt;textarea cols=\"80\" rows=\"8\" maxlength=\"200\" placeholder=\"Indica cualquier observaci\u00f3n digna de menci\u00f3n\"&gt;&lt;/textarea&gt;\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    form: textarea by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-3/#etiquetas-select-option-y-optgroup","title":"Etiquetas select, option y optgroup","text":"<p>HTML nos proporciona la etiqueta <code>&lt;select&gt;</code> (selecci\u00f3n) para crear campos de formulario correspondientes a listas de valores de entre los que el usuario puede seleccionar uno (o varios). Cada uno de los valores est\u00e1 representado por una etiqueta <code>&lt;option&gt;</code> (opci\u00f3n).</p> <p>La etiqueta <code>&lt;select&gt;</code> tiene una serie de atributos espec\u00edficos que determinan su estilo visual y su funcionamiento:</p> <ul> <li><code>size</code>: N\u00famero de opciones que son visibles en la lista en un momento dado. Determina la altura del campo. Su valor por defecto es 0, en cuyo caso la lista como un cuadro combinado (combo box).</li> <li><code>multiple</code>: Indica si es posible o no seleccionar m\u00e1s de una opci\u00f3n dentro de la lista. Es decir hace que la lista sea multiselecci\u00f3n.</li> </ul> <p>Por su parte, la etiqueta <code>&lt;option&gt;</code> tiene los siguientes atributos:</p> <ul> <li><code>value</code>: Corresponde al valor que se env\u00eda al destinatario cuando se selecciona dicha opci\u00f3n en el campo. Es un atributo obligatorio.</li> <li><code>selected</code>: Indica si dicha opci\u00f3n aparece seleccionada inicialmente en el campo. Si no se ha especificado el atributo multiple en la etiqueta <code>&lt;select&gt;</code> en la que se encuentra la opci\u00f3n, s\u00f3lo debemos establecer el atributo selected como m\u00e1ximo a una opci\u00f3n. Cuando la lista se muestra como un cuadro combinado (combo box) es muy habitual que la primera opci\u00f3n sea simplemente informativa de que se debe seleccionar un elemento. A dicha opci\u00f3n deberemos asignarle value=\"\" para que si se selecciona no se env\u00ede ning\u00fan valor al destinatario y para que si el campo es obligatorio no sea v\u00e1lido mientras est\u00e9 seleccionada dicha opci\u00f3n.</li> </ul> <p>Adem\u00e1s HTML nos permite agrupar las opciones en diferentes grupos y mostrar un texto que describa el grupo. Para ello usaremos la etiqueta <code>&lt;optgroup&gt;</code>, que contendr\u00e1 en su interior la distintas etiquetas <code>&lt;option&gt;</code> correspondientes a las opciones incluidas en dicho grupo. NO debemos anidar <code>&lt;optgroup&gt;</code>.</p> <p>Para indicar el texto descriptivo del grupo se usa el atributo label de la etiqueta <code>&lt;optgroup&gt;</code>. Este texto descriptivo permite a los usuarios detectar m\u00e1s r\u00e1pidamente la opci\u00f3n a seleccionar dentro de la lista. No debemos olvidar que el atributo label simplemente es un texto descriptivo del grupo, por lo que NO es una opci\u00f3n seleccionable de la lista.</p> <p>Veamos unos ejemplos:</p> <pre><code>&lt;select name=\"system\" id=\"sistema\" required=\"required\"&gt;\n&lt;option value=\"\"&gt;- seleccione -&lt;/option&gt;\n&lt;option value=\"windows\"&gt;Windows&lt;/option&gt;\n&lt;option value=\"linux\"&gt;Linux&lt;/option&gt;\n&lt;option value=\"mac\"&gt;MacOS&lt;/option&gt;\n&lt;/select&gt;\n\u200b\n&lt;select name=\"chip\" id=\"procesador\" size=\"3\"&gt;\n&lt;option value=\"pentium\"&gt;Intel Pentium&lt;/option&gt;\n&lt;option value=\"celeron\"&gt;Intel Celeron&lt;/option&gt;\n&lt;option value=\"amd\"&gt;AMD&lt;/option&gt;\n&lt;/select&gt;\n\u200b\n&lt;select name=\"software\" id=\"programas\" size=\"10\" multiple=\"multiple\" &gt;\n&lt;optgroup label=\"Ofim\u00e1tica\"&gt;\n&lt;option value=\"office\"&gt;Microsoft Office&lt;/option&gt;\n&lt;option value=\"openoffice\"&gt;Open Office&lt;/option&gt;\n&lt;option value=\"libreoffice\"&gt;Libre Office&lt;/option&gt;\n&lt;/optgroup&gt;\n&lt;optgroup label=\"Otros\"&gt;\n&lt;option value=\"acrobatreader\"&gt;PDF Acrobat Reader&lt;/option&gt;\n&lt;option value=\"vlc\"&gt;VLC&lt;/option&gt;\n&lt;/optgroup&gt;\n&lt;/select&gt;\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    form: select by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-3/#etiqueta-button","title":"Etiqueta button","text":"<p>Como ya hemos visto, para crear botones HTML nos proporciona los valores <code>submit</code>, <code>reset</code>, <code>button</code> e <code>image</code> para el atributo type de la etiqueta <code>&lt;input&gt;</code>. Sin embargo, tenemos una opci\u00f3n adicional m\u00e1s flexible. Se trata de la etiqueta <code>&lt;button&gt;</code>, que permite crear un bot\u00f3n sobre el que se puede hacer click. A diferencia de la etiqueta <code>&lt;input&gt;</code>, la etiqueta <code>&lt;button&gt;</code> NO es autoconclusa, por lo que tendremos que usar la estructura: <code>&lt;button&gt;Pulsa aqu\u00ed&lt;/button&gt;</code> \u200b Como vemos, el bot\u00f3n mostrar\u00e1 el contenido situado entre la etiqueta de apertura y la de cierre. Y este hecho es precisamente lo que hace que la etiqueta <code>&lt;button&gt;</code> sea m\u00e1s flexible que <code>&lt;input&gt;</code>, ya que podremos usar otras etiquetas dentro del contenido del bot\u00f3n, como por ejemplo <code>&lt;em&gt;</code>, <code>&lt;strong&gt;</code> o incluso <code>&lt;img&gt;</code>, y hacer uso de los pseudoelementos <code>:after</code> y <code>:before</code>, algo que no podemos hacer con <code>&lt;input&gt;</code>.</p> <p>Para indicar la funcionalidad del bot\u00f3n podemos usar el atributo <code>type</code> con los valores <code>submit</code>, <code>reset</code> y <code>button</code> (con el mismo significado que en <code>&lt;input&gt;</code>). Adem\u00e1s tambi\u00e9n podemos usar los atributos <code>name</code>, <code>value</code> y otros m\u00e1s.</p> <p>Veamos unos ejemplos:</p> <pre><code>&lt;button type=\"submit\"&gt;Enviar al &lt;strong&gt;destinatario&lt;/strong&gt;&lt;/button&gt;\n&lt;button type=\"reset\"&gt;Reinicializar&lt;/button&gt;\n&lt;button type=\"submit\"&gt;&lt;img src=\"http://www.myiconfinder.com/uploads/iconsets/24-24-f2e15c4b9e21e0d16045c1c982786a2f-accept.png\" /&gt;&lt;/button&gt;\n&lt;button type=\"button\" onclick=\"alert('Ha pulsado el bot\u00f3n');\"&gt;Avisar&lt;/button&gt;\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    form: buttons 2 by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-3/#etiqueta-datalist","title":"Etiqueta datalist","text":"<p>La etiqueta <code>&lt;datalist&gt;</code> permite agrupar valores predefinidos que faciliten el autocompletado de un campo <code>&lt;input&gt;</code>, de manera que conforme el usuario va escribiendo en el campo el navegador muestre una lista desplegable con los valores predefinidos.</p> <p>Cada valor predefinido est\u00e1 representado por una etiqueta <code>&lt;option&gt;</code> cuyo atributo <code>value</code> corresponder\u00e1 al valor que ser\u00e1 asignado al <code>&lt;input&gt;</code> si se selecciona dicha opci\u00f3n. El contenido de la etiqueta <code>&lt;option&gt;</code> ser\u00e1 el valor predefinido propuesto.</p> <p>Para indicar al <code>&lt;input&gt;</code> la lista de valores predefinidos que debe usar asignaremos su propiedad list el id de la etiqueta <code>&lt;datalist&gt;</code> correspondientes.</p> <p>Veamos un ejemplo:</p> <pre><code>&lt;input type=\"text\" id=\"poblacion\" name=\"city\" maxlength=\"50\" size=\"30\" placeholder=\"(poblaci\u00f3n)\" list=\"poblaciones\" /&gt;&lt;br /&gt;\n&lt;datalist id=\"poblaciones\"&gt;\n&lt;option value=\"Algeciras\"&gt;Algeciras&lt;/option&gt;\n&lt;option value=\"La L\u00ednea\"&gt;La L\u00ednea de la Concepci\u00f3n&lt;/option&gt;\n&lt;option value=\"San Roque\"&gt;San Roque&lt;/option&gt;\n&lt;option value=\"Los Barrios\"&gt;Los Barrios&lt;/option&gt;\n&lt;option value=\"Tarifa\"&gt;Tarifa&lt;/option&gt;\n&lt;/datalist&gt;\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    form: data-list by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-3/#campos-de-salida","title":"Campos de salida","text":"<p>La etiqueta <code>&lt;output&gt;</code> representa el resultado de un c\u00e1lculo o de acci\u00f3n de usuario. No es por tanto un campo para introducir ning\u00fan dato, sino un campo de salida que muestra un resultado o dato. Su valor es establecido mediante c\u00f3digo de programaci\u00f3n.</p> <p>Se emplea, por ejemplo, acompa\u00f1ando un campo de tipo range para mostrar la representaci\u00f3n num\u00e9rica del valor seleccionado por el usuario.</p> <p>Veamos un ejemplo:</p> <pre><code>&lt;label for=\"salario\"&gt;Salario&lt;/label&gt;\n&lt;input type=\"range\" id=\"salario\" name=\"earnings\" min=\"600\" max=\"2000\" step=\"200\" value=\"1000\"\nonchange=\"document.querySelector('#salario-output').value = value;\"&gt;\n&lt;output for=\"salario\" id=\"salario-output\"&gt;1000&lt;/output&gt;\n</code></pre> <p>Igualmente, la etiqueta <code>&lt;progress&gt;</code> permite mostrar un valor num\u00e9rico correspondiente al nivel de progreso dentro de un rango. Se trata de una etiqueta <code>inline-block</code>. Usaremos los atributos <code>value</code>, <code>min</code> y <code>max</code> que ya conocemos. Si no especificamos el atributo value se mostrar\u00e1 un progreso indeterminado.</p> <p>Finalmente, la etiqueta <code>meter</code> permite mostrar un valor num\u00e9rico correspondiente al nivel de grado dentro de un rango. Se trata de una etiqueta <code>inline-block</code>. Usaremos los atributos <code>value</code>, <code>min</code> y <code>max</code> que ya conocemos. Por defecto <code>value</code> vale 0, <code>min</code> vale 0 y <code>max</code> vale 1. Tambi\u00e9n podemos definir las siguientes propiedades:</p> <ul> <li><code>low</code>: Valor l\u00edmite superior de lo que considera un nivel bajo. Si el valor est\u00e1 entre el <code>min</code> y <code>low</code> la barra se muestra de color amarillo.</li> <li><code>high</code>: Valor l\u00edmite inferior de de los que se considera un nivel alto. Si el valor est\u00e1 entre <code>high</code> y <code>max</code> la barra se muestra de color rojo. Si el valor est\u00e1 comprendido entre <code>low</code> y <code>high</code> la barra se muestra de color verde.</li> </ul> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    form: output by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-3/#etiquetas-fieldset-y-legend","title":"Etiquetas fieldset y legend","text":"<p>La etiqueta <code>&lt;fieldset&gt;</code> permite crear un grupo de campos de formulario. Se trata de un elemento en bloque. El navegador muestra por defecto un borde resaltado para cada agrupaci\u00f3n. Por su parte, la etiqueta <code>&lt;legend&gt;</code> se incluye dentro de cada etiqueta <code>&lt;fieldset&gt;</code> y establece el t\u00edtulo que muestra el navegador para cada agrupaci\u00f3n de elementos. Se trata de un elemento en l\u00ednea.</p> <p>Veamos un ejemplo:</p> <pre><code>&lt;fieldset&gt;\n&lt;legend&gt;Sexo&lt;/legend&gt;\n&lt;label for=\"hombre\"&gt;Hombre&lt;/label&gt;&lt;br /&gt;\n&lt;input type=\"radio\" id=\"hombre\" name=\"sexo\" value=\"hombre\" /&gt;\n&lt;label for=\"mujer\"&gt;Mujer&lt;/label&gt;&lt;br /&gt;\n&lt;input type=\"radio\" id=\"mujer\" name=\"sexo\" value=\"mujer\" checked=\"checked\" /&gt;\n&lt;/fieldset&gt;\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    form: fieldset by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-3/#atributos-relacionados-con-el-estado-de-los-campos-de-formulario","title":"Atributos relacionados con el estado de los campos de formulario","text":"<p>Las etiquetas <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code> y <code>&lt;select&gt;</code> nos proporcionan una serie de atributos relacionados con el estado del campo de formulario:</p> <ul> <li><code>disabled</code>: El control aparece deshabilitado y su valor no se env\u00eda al destinatario.</li> <li><code>readonly</code>: El contenido del control no se puede modificar. S\u00f3lo v\u00e1lido en campos de formulario de tipo texto, fecha o number.</li> <li><code>required</code>: El usuario debe introducir alg\u00fan dato en el campo antes de poder enviar el formulario al destinatario. Indica, por tanto, que el campo es obligatorio. NO se puede usar en campos de botones, de imagen o hidden.</li> <li><code>autofocus</code>: Indica que dicho campo debe recibir el foco cuando cargue la p\u00e1gina. S\u00f3lo un campo del formulario debe usar este atributo. NO se puede usar como campos hidden. Veamos un ejemplo:</li> </ul> <p> See the Pen    form: common attributes by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-3/#pseudoelementos-html-relacionados-con-los-campos-de-formulario","title":"Pseudoelementos HTML relacionados con los campos de formulario","text":"<p>Tambi\u00e9n tenemos disponibles los siguientes pseudoelementos relacionados con los campos de formulario, para que puedan ser seleccionados y estilizados:</p> <ul> <li><code>::placeholder</code>: Corresponde al texto establecido como valor del atributo <code>placeholder</code>. La mayor\u00eda de los navegadores actuales soportan este selector mediante prefijos.</li> <li><code>::selection</code>: Corresponde al texto seleccionado en un elemento. La mayor\u00eda de los navegadores actuales lo soportan.</li> </ul> <p>Veamos un ejemplo:</p> <p> See the Pen    form: pseudo elements by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-3/#pseudoclases-css","title":"Pseudoclases CSS","text":"<p>CSS define una serie de selectores de pseudoclases espec\u00edficos para seleccionar los campos de formulario que se encuentren en un determinado estado:</p> <ul> <li><code>:enabled</code>, <code>:disabled</code>: Selecciona los elementos que est\u00e9n habilitados / deshabilitados. Est\u00e1n relacionados con el atributo <code>disabled</code>.</li> <li><code>:checked</code>, <code>:indeterminate</code>: Selecciona los elementos que est\u00e9n chequeados / en estado indeterminado (ni chequeado ni no chequeado). Est\u00e1n relacionados con el atributo <code>checked</code> de los checkbox y los radiobutton.</li> <li><code>:valid</code>, <code>:invalid</code>: Selecciona los elementos con dato v\u00e1lido / inv\u00e1lido. Est\u00e1n relacionados con el proceso de validaci\u00f3n.</li> <li><code>:required</code>, <code>:optional</code>: Selecciona los elementos obligatorios de rellenar / opcionales. Est\u00e1n relacionados con el atributo <code>required</code>.</li> <li><code>:in-range</code>, <code>:out-of-range</code>: Selecciona los elementos cuyo dato est\u00e1 dentro / fuera del rango especificado. Est\u00e1n relacionados con los atributo <code>min</code> y <code>max</code>.</li> <li><code>:read-only</code>, <code>:read-write</code>: Selecciona los elementos de s\u00f3lo lectura no editables / editables. Est\u00e1n relacionados con el atributo readonly.</li> <li><code>:placeholder-shown</code>: Selecciona los elementos en los que est\u00e1 siendo mostrado el <code>placeholder</code>, es decir, aquellos para los que no se ha introducido valor y se ha especificado un placeholder. Est\u00e1 relacionado con el atributo <code>placeholder</code>. No es soportado a\u00fan por algunos navegadores.</li> <li><code>:default</code>: Selecciona el elemento por defecto del formulario (normalmente el bot\u00f3n de env\u00edo).</li> </ul> <p>Otras pseudoclases no son espec\u00edficas de los campos de formulario, pero son muy usadas con ellos:</p> <ul> <li><code>:focus</code>: Selecciona el elemento que tiene el foco.</li> <li><code>:active</code>: Selecciona el elemento sobre el que se est\u00e1 actuando (por ejemplo un bot\u00f3n).</li> </ul> <p>Estas pseudoclases se puede concatenarse en la regla CSS para realizar una selecci\u00f3n muy precisa. Por ejemplo <code>:focus:invalid</code> significa \"el campo que tenga el foco y cuyo valor no sea v\u00e1lido\".</p>"},{"location":"tema_6/page-3/#estilizado-de-formularios","title":"Estilizado de formularios","text":"<p>Como hemos podido comprobar en los ejemplos anteriores, los formularios no son precisamente f\u00e1ciles de estilizar, por varios motivos:</p> <p>En primer lugar, las etiquetas disponibles para crear campos de formulario son en su mayor\u00eda etiquetas en l\u00ednea, de manera que, por ejemplo una etiqueta <code>&lt;input&gt;</code> se sit\u00fae sin complicaci\u00f3n detr\u00e1s de la etiqueta <code>&lt;label&gt;</code> que la describe. El problema aparece cuando queremos mostrar s\u00f3lo un par label-input por \"fila\". En dicho caso, tendremos que a\u00f1adir alguna etiqueta que act\u00fae como padre del par y que haga las veces de \"fila\", para lo que podremos recurrir a la etiqueta <code>&lt;fieldset&gt;</code>, a una etiqueta <code>&lt;div&gt;</code> o incluso a una etiqueta <code>&lt;li&gt;</code> (dentro una etiqueta <code>&lt;ul&gt;</code> que agrupe todas la filas).</p> <p>En segundo lugar, estilizar un <code>&lt;label&gt;</code> bas\u00e1ndonos en el estado del correspondiente <code>&lt;input&gt;</code> es complicado. El motivo es que dado que el <code>&lt;label&gt;</code> est\u00e1 situado antes del <code>&lt;input&gt;</code> en el documento HTML, no podemos usar ninguno de los selectores de hermanos, por ejemplo el de hermano adyacente <code>+</code> o hermano posterior <code>~</code>, ya que ambos hacen referencia a hermanos posteriores. No hay ning\u00fan selector para un hermano anterior. La soluci\u00f3n a este problema pasa por situar en el documento HTML el <code>&lt;label&gt;</code> despu\u00e9s del correspondiente <code>&lt;input&gt;</code>, para que podamos seleccionarlo usando alguno de los selectores mencionados anteriormente, y usar el atributo <code>order</code> de las cajas flexibles para hacer que el <code>&lt;label&gt;</code> se muestre antes del <code>&lt;input&gt;</code> (aunque en el documento se encuentre despu\u00e9s). Pero para que esto sea posible, el par label-input debe estar contenido en una etiqueta padre que act\u00fae como fila y a la que se le establezca el modo de formato visual <code>display: flex;</code> que disponga los hijos en forma de fila con <code>flex-direction: row;</code>.</p> <p>Veamos un ejemplo completo de formulario donde se utilizan estas t\u00e9cnicas y otras avanzadas para estilizar un formulario:</p> <p> See the Pen    form style by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-4/","title":"4 MediaQueries","text":""},{"location":"tema_6/page-4/#introduccion","title":"Introducci\u00f3n","text":"<p>CSS 3 a\u00f1adi\u00f3 la posibilidad de crear reglas CSS que s\u00f3lo se aplicaran en determinadas condiciones, como por ejemplo que la p\u00e1gina web se vaya a imprimir, que el dispositivo en el que se vaya a ver tenga una determinada orientaci\u00f3n, o que pantalla tenga como m\u00ednimo una determinada anchura, etc. De esta manera CSS 3 permite adaptar la representaci\u00f3n del contenido a las caracter\u00edsticas del dispositivo en el que se va a visualizar, sin tener que cambiar el contenido en s\u00ed.</p> <p>Para conseguir esta adaptaci\u00f3n, tendremos que usar las llamadas media queries (consultas de medios), que corresponden a la agrupaci\u00f3n de una serie de reglas CSS que s\u00f3lo se usar\u00e1n cuando nos encontremos en el tipo de dispositivo especificado en la media query y se cumplan las condiciones establecidas en la misma.</p> <pre><code>@media &lt;consulta1&gt;, &lt;consulta2&gt; {\n\u200b\n/* Reglas CSS a aplicar si se cumple la expresi\u00f3n booleana\n  ...\n\u200b    */\n}\n</code></pre> <p>Cada <code>&lt;consulta&gt;</code> estar\u00e1 formada por:</p> <ul> <li>Un media type (tipo de medio): Indica el tipo de dispositivo para el que queremos que se apliquen las reglas CSS contenidas en la media query. Los valores m\u00e1s habituales son: <code>screen</code>, <code>print</code> o <code>tv</code>. Podemos usar el valor <code>all</code> para indicar todos los tipos de medios.</li> <li>Una o m\u00e1s condiciones de caracter\u00edsticas del dispositivo, unidas mediante el operador l\u00f3gico <code>and</code>. Cada condici\u00f3n tiene el formato <code>(funci\u00f3n: valor)</code>. Por ejemplo <code>(min-width: 700px)</code> especifica la condici\u00f3n de que el ancho m\u00ednimo debe ser de 700px.</li> <li>Podemos usar el operador l\u00f3gico <code>not</code> para negar toda la consulta. El resultado de la consulta es verdadera si la condici\u00f3n se eval\u00faa a verdadera, atendiendo al tipo de medio especificado, al valor de verdadero o falso retornados por las condiciones y a los operadores l\u00f3gicos indicados.</li> </ul> <p>Si especificamos en la media query varias condiciones separadas por , es c\u00f3mo si aplic\u00e1ramos un operador <code>or</code>, es decir que las reglas CSS incluidas dentro de la media query se aplicar\u00e1n si la consulta1 se eval\u00faa a verdadero o si la consulta2 se eval\u00faa a verdadero.</p> <p>Veamos ejemplos:</p> <pre><code>/* Cualquier tipo de medio cuya anchura sea como m\u00ednimo 700px. */\n@media (min-width: 700px) {\n/* Reglas CSS.\n  ...\n    */\n}\n\u200b\n/* Cualquier tipo de medio cuya anchura sea como m\u00ednimo 700px y tenga orientaci\u00f3n apaisada */\n@media (min-width: 700px) and (orientation: landscape) {\n/* Reglas CSS.\n  ...\n    */\n}\n\u200b\n/* Cualquier medio que no sea una pantalla a color o un medio impreso con color. El not se aplica a not(screen and (color)) */\n@media not screen and (color), print and (color) {\n/* Reglas CSS.\n  ...\n    */\n}\n\u200b\n/* Pantallas con un ancho entre 500px y 800px */\n@media screen and (min-width: 500px) and (max-width: 800px) {\n/* Reglas CSS.\n  ...\n    */\n}\n</code></pre>"},{"location":"tema_6/page-4/#funciones-multimedia","title":"Funciones multimedia","text":"<p>Para especificar las condiciones de las media queries tenemos disponibles distintas funciones multimedia, entre las que destacamos:</p> <ul> <li><code>min-width</code>, <code>max-width</code>: Describe el ancho m\u00ednimo / m\u00e1ximo de la superficie a renderizar en el dispositivo de salida. Por ejemplo <code>(min-width: 700px)</code> establece la condici\u00f3n de que el ancho m\u00ednimo de renderizado en el dispositivo de salida sea de 700px.</li> <li><code>orientation</code>: Indica cuando el dispositivo esta en modo apaisado (valor landscape) en el que el ancho de la pantalla es mayor al alto, o modo retrato (valor portrait), en el que el alto de la pantalla es mayor al ancho. Un aspecto que debemos tener en cuenta cuando usamos media queries es que si tenemos varias se aplicar\u00e1n todas las reglas de todas las media queries que se eval\u00faen a verdadero. Por este motivo debemos elegir bien el orden en el que se establecen las media queries, para hacer que las reglas de las posteriores sobrescriban los comportamientos establecidos por las reglas de las anteriores.</li> </ul> <p>En el siguiente enlace puede obtener las media queries correspondientes a los dispositivos y a los tama\u00f1os m\u00e1s habituales.</p>"},{"location":"tema_6/page-4/#tecnicas-de-diseno-y-media-queries","title":"T\u00e9cnicas de dise\u00f1o y media queries","text":"<p>A la hora de dise\u00f1ar una p\u00e1gina responsive podemos seguir dos t\u00e9cnicas de dise\u00f1o distintas relacionadas con los distintos tipos de dispositivos donde se visualizar\u00e1 nuestra p\u00e1gina web: mobile-first (primero el m\u00f3vil) o desktop-first (primero la pantalla de escritorio).</p> <p>La t\u00e9cnica mobile-first consiste en dise\u00f1ar la web pensando en su apariencia en un dispositivo m\u00f3vil, tom\u00e1ndolo como dise\u00f1o base, y posteriormente modificar su apariencia cuando nos encontremos en una tablet o en una pantalla de escritorio, haciendo uso de media queries espec\u00edficas para la anchura m\u00ednima de estos dispositivos.</p> <p>As\u00ed el c\u00f3digo CSS quedar\u00eda algo parecido a:</p> <pre><code>/* Estilos normales (para m\u00f3viles en vertical) */\nbody { /*..*/. }\np    { /*..*/. }\n/*..*/.\n\u200b\n/* M\u00f3viles en horizontal o tablets en vertical */\n@media (min-width: 768px) {\n/* Reglas CSS que sobrescriben determinados comportamientos anteriores */\np {\n/*..*/.\n}\n/*..*/.\n}\n\u200b\n/* Tablets en horizontal y pantallas de escritorio normales */\n@media (min-width: 1024px) {\n/* Reglas CSS que sobrescriben determinados comportamientos anteriores */\np {\n/*..*/.\n}\n/*..*/.\n}\n\u200b\n/* Pantallas de escritorios muy anchas */\n@media (min-width: 1200px) {\n/* Reglas CSS que sobrescriben determinados comportamientos anteriores */\np {\n/*..*/.\n}\n/*..*/.\n}\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    mobile-first by irubenboy (@irubenboy)   on CodePen. </p> <p>En la demo anterior las cajas se visualizan dentro de su contenedor flex en 1, 2 o 3 columnas dependiendo de la anchura de pantalla, para lo que variamos su anchura. Adem\u00e1s en las pantallas de escritorio la caja 5 se visualiza la primera.</p> <p>Por su parte la t\u00e9cnica desktop-first consiste en dise\u00f1ar la web pensando en su apariencia en una pantalla de escritorio, tom\u00e1ndolo como dise\u00f1o base, y posteriormente modificar su apariencia cuando nos encontremos en una tablet o en un dispositivo m\u00f3vil, haciendo uso de media queries espec\u00edficas para la anchura m\u00e1xima de estos dispositivos.</p> <p>As\u00ed el c\u00f3digo CSS quedar\u00eda algo parecido a:</p> <pre><code>/* Estilos normales (para pantallas de escritorio muy anchas) */\nbody { /*...*/ }\np    { /*...*/ }\n/*...*/\n\u200b\n/* Tablets en horizontal y escritorios normales */\n@media (min-width: 768px) and (max-width: 1199px) {\n/* Reglas CSS que sobrescriben determinados comportamientos anteriores */\np {\n/*...*/\n}\n/*...*/\n}\n\u200b\n/* M\u00f3viles en horizontal o tablets en vertical */\n@media (max-width: 767px) {\n/* Reglas CSS que sobrescriben determinados comportamientos anteriores */\np {\n/*...*/\n}\n/*...*/\n}\n\u200b\n/* M\u00f3viles en vertical */\n@media (max-width: 480px) {\n/* Reglas CSS que sobrescriben determinados comportamientos anteriores */\np {\n/*...*/\n}\n/*...*/\n}\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    desktop-first by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-4/#mobile-first-vs-desktop-first","title":"Mobile-first vs Desktop-first","text":"<p>El uso de la t\u00e9cnica mobile-first tiene una serie de ventajas:</p> <ul> <li>Est\u00e1 100% optimizado para la experiencia en m\u00f3viles.</li> <li>Reduce la web a lo absolutamente esencial.</li> <li>Prioriza el contenido frente a los aspectos est\u00e9ticos, que puede ser lo deseado.</li> </ul> <p>Sin embargo, tambi\u00e9n tiene una serie de inconvenientes:</p> <ul> <li>La versi\u00f3n para dispositivos de escritorio puede resultar demasiado simple o vac\u00eda.</li> <li>Puede ser m\u00e1s complicado su dise\u00f1o y desarrollo.</li> <li>Hay menos libertad creativa, por lo que puede ser m\u00e1s complicado crear webs que se distingan del resto.</li> <li>Los clientes est\u00e1n acostumbrados a ver como prototipo una versi\u00f3n de escritorio.</li> <li>Puede que los usuarios no visiten habitualmente tu web desde el m\u00f3vil.</li> </ul> <p>Entonces \u00bfqu\u00e9 opci\u00f3n tomamos? Pues depende del proyecto en cuesti\u00f3n, pero independientemente de la opci\u00f3n seleccionada, a la hora de hacer nuestro dise\u00f1o siempre deberemos tener en cuenta que deber\u00e1 adaptarse a distintos tama\u00f1os de pantalla.</p>"},{"location":"tema_6/page-4/#breakpoints","title":"Breakpoints","text":"<p>Un breakpoint (punto de ruptura) es una cantidad, correspondiente a un ancho concreto, en el que cambiamos el dise\u00f1o de nuestra web mediante unas reglas CSS espec\u00edficas que deben aplicarse s\u00f3lo cuando el viewport tenga al menos esa anchura, en el caso de mobile-first, o hasta dicha anchura, en el caso de desktop-first.</p> <p>Un aspecto muy importante del dise\u00f1o responsive es saber elegir bien nuestros breakpoints. En principio tenemos tres opciones:</p> <ul> <li>Elegir como breakpoints anchuras de viewport de los modelos de dispositivos m\u00e1s habituales, como los del iPhone, iPad, etc.</li> <li>Elegir como breakpoints anchuras de viewport en los que se agrupen los tama\u00f1os m\u00e1s habituales, para lo que es necesario conocer las estad\u00edsticas de tama\u00f1o de pantalla. Se recomienda leer el siguiente art\u00edculo .</li> <li>Elegir como breakpoints anchuras de viewport para las que nuestro dise\u00f1o no se muestre adecuado. Este es el enfoque que se recomienda, aunque no siempre es el m\u00e1s usado.</li> </ul>"},{"location":"tema_6/page-5/","title":"5 Gradientes","text":""},{"location":"tema_6/page-5/#introduccion","title":"Introducci\u00f3n","text":"<p>CSS3 introdujo una serie de funciones que permiten crear im\u00e1genes correspondientes a un gradiente de color, que pueden ser usados, por ejemplo, como imagen de fondo de una caja (como valor de la propiedad <code>background-image</code>). Un gradiente de color (o degradado) es un rango de colores ordenados linealmente con la intenci\u00f3n de dar visualmente una transici\u00f3n suave y progresiva entre dos o m\u00e1s colores.</p>"},{"location":"tema_6/page-5/#gradientes-lineales","title":"Gradientes lineales","text":"<p>Los gradientes lineales son aquellos en los la que la transici\u00f3n entre un color y otro se realiza en l\u00ednea recta, con una direcci\u00f3n y un sentido concreto.</p> <p>Para crear degradados de este tipo usaremos la funci\u00f3n <code>linear-gradient(&lt;direcci\u00f3n&gt;, &lt;color1&gt;, &lt;color2&gt;, ...)</code>, donde:</p> <ul> <li>direcci\u00f3n: Corresponde a la orientaci\u00f3n (direcci\u00f3n y sentido) de la l\u00ednea recta que conforma el degradado. Puede tomar valores del tipo:</li> <li><code>to right</code> (de izquierda a derecha), <code>to left</code> (de derecha a izquierda), <code>to bottom</code> (de arriba a abajo), <code>to top</code> (de abajo a arriba)</li> <li><code>to bottom right</code> (de la esquina superior izquierda a la inferior derecha), <code>to bottom left</code> (de la esquina superior derecha a la inferior izquierda), <code>to top right</code> (de la esquina inferior izquierda a la superior derecha), <code>to top left</code> (de la esquina inferior derecha a la superior izquierda).</li> <li><code>35deg</code> (35 grados, equivalente a <code>to top right</code>), <code>-35deg</code> (-35 grados, equivalente a <code>to top left</code>), <code>145deg</code> (145 grados, equivalente a <code>to bottom right</code>), etc.</li> <li> <p>color: Corresponde a los colores que deben ser usados en el gradiente, en el orden en el que deben ser usados. Veamos un ejemplo:</p> <pre><code>.caja {\nbackground-image: linear-gradient(to right, red, blue);\n}\n</code></pre> <p>Por defecto, las distancias entre colores se ajustan autom\u00e1ticamente con proporciones equivalentes, salvo que especifiquemos un tama\u00f1o (porcentaje, por ejemplo) justo despu\u00e9s del color en cuesti\u00f3n. Por ejemplo:</p> <pre><code>.caja {\nbackground-image: linear-gradient(to right, red, blue 50%);\n}\n</code></pre> <p>En el ejemplo anterior, el degradado se realizar\u00e1 desde el rojo hasta el azul de manera que el azul quede situado en el 50% de la anchura de la caja. Por defecto el resto de la caja se ver\u00e1 azul.</p> </li> </ul> <p>Si queremos que en vez de rellenar el resto de la caja con dicho color final, simplemente se repita de nuevo el degradado, tendremos que usar la funci\u00f3n <code>repeating-linear-gradient(direcci\u00f3n, color1, color2, ...)</code>, que recibe los mismos par\u00e1metros que la anterior, pero que repite el degradado si es necesario. Por ejemplo:</p> <pre><code>.caja {\nbackground-image: repeating-linear-gradient(to right, red, blue 50%);\n}\n</code></pre> <p>Veamos ahora una demostraci\u00f3n de varios casos:</p> <p> See the Pen    linear-gradient by irubenboy (@irubenboy)   on CodePen. </p> <p>Info</p> <p>El siguiente web se recogen varios gradientes lineales atractivos: https://webkul.github.io/coolhue/</p>"},{"location":"tema_6/page-5/#gradientes-radiales","title":"Gradientes radiales","text":"<p>Tambi\u00e9n podemos crear gradientes con formas circulares. Para ello, usaremos la funci\u00f3n <code>radial-gradient(&lt;forma&gt; &lt;tama\u00f1o&gt; at &lt;ubicaci\u00f3n&gt;, &lt;color1&gt;, &lt;color2&gt;, ...)</code>, donde:</p> <ul> <li>forma: Indica la forma del gradiente. Puede ser: <code>ellipse</code> (elipse), <code>circle</code> (c\u00edrculo).</li> <li>tama\u00f1o: Indica el tama\u00f1o del gradiente. Puede ser:</li> <li><code>farthest-corner</code>: Intenta cubrir hasta la esquina m\u00e1s lejana (expande hacia ambos lados).</li> <li><code>farthest-side</code>: Intenta cubrir hasta el lado m\u00e1s lejano (expande hacia un s\u00f3lo lado).</li> <li><code>closest-corner</code>: Intenta cubrir hasta la esquina m\u00e1s cercana.</li> <li><code>closest-side</code>: Intenta cubrir hasta el lado m\u00e1s cercano.</li> <li>ubicaci\u00f3n: Define el punto de referencia desde el que se inicia el gradiente. Puede ser: <code>center</code>, <code>top</code>, <code>left</code>, <code>right</code>, <code>bottom</code>, <code>top left</code>, <code>top right</code>, <code>bottom left</code>, <code>bottom right</code></li> <li> <p>color: Corresponde a los colores que deben ser usados en el gradiente, en el orden en el que deben ser usados. Veamos unos ejemplos ejemplo:</p> <pre><code>.circular {\nbackground-image: radial-gradient(circle, red, blue);\n}\n.elipse {\nbackground-image: radial-gradient(elipse, red, blue);\n}\n.esquina {\nbackground-image: radial-gradient(circle at top left, red, blue);\n}\n.mas-cercano {\nbackground-image: radial-gradient(circle closest-side, red, blue);\n}\n</code></pre> <p>Por defecto, las distancias entre colores se ajustan autom\u00e1ticamente con proporciones equivalentes, salvo que especifiquemos un tama\u00f1o (porcentaje, por ejemplo) justo despu\u00e9s del color en cuesti\u00f3n. Por ejemplo:</p> <pre><code>.caja {\nbackground-image: linear-gradient(circle, red, blue 50%);\n}\n</code></pre> <p>En el ejemplo anterior, el degradado se realizar\u00e1 desde el rojo hasta el azul de manera que el azul quede situado en el 50% de la anchura de la caja. Por defecto el resto de la caja se ver\u00e1 azul.</p> </li> </ul> <p>Si queremos que en vez de rellenar el resto de la caja con dicho color final, simplemente se repita de nuevo el degradado, tendremos que usar la funci\u00f3n <code>repeating-radial-gradient()</code>, que recibe los mismos par\u00e1metros que la anterior, pero que repite el degradado si es necesario. Por ejemplo:</p> <pre><code>.caja {\nbackground-image: repeating-radial-gradient(circle at bottom right, red, blue 50%);\n}\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    radial-gradient by irubenboy (@irubenboy)   on CodePen. </p> <p>Ejemplos avanzados</p> <p>Uno de los usos m\u00e1s habituales de los gradientes es la creaci\u00f3n de fondos de pantalla con patrones repetitivos. En las siguientes webs podemos ver ejemplos impresionantes de:</p> <ul> <li>patrones para fondos haciendo uso de gradientes repetitivos</li> <li>patrones para fondos haciendo udo de im\u00e1genes SVG</li> </ul>"},{"location":"tema_6/page-6/","title":"6 Animaciones","text":""},{"location":"tema_6/page-6/#transiciones","title":"Transiciones","text":"<p>CSS3 incorpora uno de los aspectos m\u00e1s interesantes en la web interactiva: las transiciones. Por defecto cuando se cambian las propiedades de un elemento atendiendo a una determinada interacci\u00f3n del usuario, por ejemplo a trav\u00e9s de las <code>:hover</code> o <code>:focus</code>, el cambio de los valores de dichas propiedades se realiza \"de golpe\", sin ning\u00fan tipo de transici\u00f3n. Por ejemplo, si cambiamos el color de fondo de una caja cuando el usuario sit\u00faa el puntero del rat\u00f3n sobre ella, el cambio del color se realiza directamente de manera instant\u00e1nea. Sin embargo, lo ideal es que dicho cambio se produzca de forma gradual, en una transici\u00f3n en la que se pasen por distintos valores intermedios entre el valor inicial y el valor final. De esta forma el efecto visual ser\u00e1 mucho m\u00e1s atractivo.</p> <p>Las transiciones CSS se basan en un principio muy b\u00e1sico: conseguir un efecto suavizado entre un estado inicial y un estado final. Veamos las propiedades que hacen posible realizar transiciones.</p>"},{"location":"tema_6/page-6/#transition-property","title":"transition-property","text":"<p>La propiedad <code>transition-property</code> se utiliza para especificar la propiedad a la que que afectar\u00e1 la transici\u00f3n. Podemos especificar la propiedad concreta (por ejemplo <code>width</code> o <code>color</code>) o simplemente especificar <code>all</code> para que se aplique la transici\u00f3n a todas las propiedades que hayan cambiado su valor. Por otro lado, si especificamos el valor <code>none</code>, no se aplicar\u00e1 ninguna transici\u00f3n.</p> Propiedad <code>transition-property</code> Valores all | none |  Se aplica a Todos los elementos Valor inicial all Descripci\u00f3n Establece la propiedad a la que afectar\u00e1 la transici\u00f3n <p>No todas las propiedades pueden formar parte de una transici\u00f3n, debido a su complejidad. Por ejemplo, los <code>background-image</code> correspondiente a gradientes no se pueden animar en una transici\u00f3n.</p> <p>En el siguiente enlace puede ver una lista de todas las propiedades que se puede animar: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties</p>"},{"location":"tema_6/page-6/#transition-duration","title":"transition-duration","text":"<p>Con la propiedad <code>transition-duration</code> especificaremos la duraci\u00f3n de la transici\u00f3n, desde el inicio de la transici\u00f3n, hasta su finalizaci\u00f3n. Se recomienda siempre comenzar con valores cortos, para que las transiciones sean r\u00e1pidas y elegantes.</p> Propiedad <code>transition-duration</code> Valores Se aplica a Todos los elementos Valor inicial 0s Descripci\u00f3n Establece la duraci\u00f3n de la transici\u00f3n de cada propiedad especificada en <code>transition-property</code> <p>Puede recibir uno o m\u00e1s valores en segundos (por ejemplo 1s) o en milisegundos (por ejemplo 100ms). Si recibe m\u00e1s de un valor, \u00e9stos se emparejan en orden con los nombres de propiedad listados en <code>transition-property</code>. Si se especifican menos valores que nombres de propiedad, el \u00faltimo valor indicado se usa para el resto de nombres de propiedad.</p>"},{"location":"tema_6/page-6/#transition-timing-function","title":"transition-timing-function","text":"<p>Por su parte, la propiedad <code>transition-timing-function</code> permite establecer la curva de aceleraci\u00f3n en la aplicaci\u00f3n de la transici\u00f3n de cada una de las propiedades indicadas en <code>transition-property</code>.</p> Propiedad <code>transition-timing-function</code> Valores (uno o m\u00e1s separados por coma) ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(, , , ) Se aplica a Todos los elementos Valor inicial ease Descripci\u00f3n Establece la funci\u00f3n de aceleraci\u00f3n de la transici\u00f3n de las propiedades indicadas en <code>transition-property</code> <p>Si recibe m\u00e1s de un valor, \u00e9stos se emparejan en orden con los nombres de propiedad listados en <code>transition-property</code>. Si se especifican menos valores que nombres de propiedad, el \u00faltimo valor indicado se usa para el resto de nombres de propiedad.</p> <p>El valor linear establece que se realice una transici\u00f3n lineal, a velocidad constante. Sin embargo, podemos variar dicha velocidad para que sea m\u00e1s r\u00e1pida al principio y m\u00e1s lenta al final, o viceversa, entre otras posibilidades:</p> <ul> <li>ease: Inicio lento, transcurso r\u00e1pido y final lento. Equivalente a <code>cubic-bezier(0.25, 0.1, 0.25, 1)</code>.</li> <li>linear: Inicio normal, transcurso normal y final normal. Equivalente a <code>cubic-bezier(0, 0, 1, 1)</code>.</li> <li>ease-in: Inicio lento, transcurso normal y final normal. Equivalente a <code>cubic-bezier(0.42, 0, 1, 1)</code>.</li> <li>ease-out: Inicio normal, transcurso normal y final lento. Equivalente a <code>cubic-bezier(0, 0, 0.58, 1)</code>.</li> <li>ease-in-out: Inicio lento, transcurso normal y final lento. Equivalente a <code>cubic-bezier(0.42, 0, 0.58, 1)</code>.</li> <li>cubic-bezier(A, B, C, D): Transici\u00f3n personalizada, representada por una curva bezier, donde A, B, C, D corresponden, respectivamente, a las coordenadas x e y de los dos puntos de referencia para la curso bezier. La siguiente herramienta online permite generar la curva bezier de manera visual: http://cubic-bezier.com/#.17,.67,.83,.67</li> </ul>"},{"location":"tema_6/page-6/#transition-delay","title":"transition-delay","text":"<p>La propiedad <code>transition-delay</code> permite definir cuanto se debe esperar (retraso inicial) para comenzar la transici\u00f3n de cada una de las propiedades indicadas en <code>transition-property</code>. Puede recibir uno o m\u00e1s valores en segundos (por ejemplo 1s) o en milisegundos (por ejemplo 100ms).</p> Propiedad <code>transition-delay</code> Valores (uno o m\u00e1s separados por coma) Se aplica a Todos los elementos Valor inicial 0s Descripci\u00f3n Establece el tiempo que se debe esperar hasta comenzar la transici\u00f3n de las propiedades indicadas en <code>transition-property</code> <p>Si recibe m\u00e1s de un valor, \u00e9stos se emparejan en orden con los nombres de propiedad listados en <code>transition-property</code>. Si se especifican menos valores que nombres de propiedad, el \u00faltimo valor indicado se usa para el resto de nombres de propiedad.</p>"},{"location":"tema_6/page-6/#transition","title":"transition","text":"<p>Finalmente, la propiedad <code>transition</code> es la propiedad shorthand (atajo) de las cuatro anteriores.</p> Propiedad <code>transition</code> Valores &lt;transition-property&gt; &lt;transition-duration&gt; &lt;transition-timing-function&gt; &lt;transition-delay&gt; Se aplica a Todos los elementos Valor inicial - Descripci\u00f3n Establece la propiedad, duraci\u00f3n, funci\u00f3n de aceleraci\u00f3n y retraso inicial de la transici\u00f3n <p>Se pueden indicar varios conjuntos de valores separados por coma.</p> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    transition by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-6/#animaciones","title":"Animaciones","text":"<p>Adem\u00e1s de las transiciones, CSS proporciona una funcionalidad m\u00e1s gen\u00e9rica para la creaci\u00f3n de animaciones, que permite realizar un control m\u00e1s exhaustivo de c\u00f3mo se realiza la animaci\u00f3n.</p> <p>Para usar esta funcionalidad debemos llevar a cabo dos tareas distintas:</p> <ul> <li>Definir la animaci\u00f3n a trav\u00e9s de una regla <code>@keyframes</code>.</li> <li>Aplicar la animaci\u00f3n a un elemento a trav\u00e9s de las propiedades de animaci\u00f3n, que determinan qu\u00e9 animaci\u00f3n usar, con qu\u00e9 duraci\u00f3n, con qu\u00e9 curva de aceleraci\u00f3n, etc.</li> </ul>"},{"location":"tema_6/page-6/#keyframes","title":"@keyframes","text":"<p>La regla <code>@keyframes</code> nos permite definir una animaci\u00f3n y sus fotogramas (keyframes). Su sintaxis es:</p> <pre><code>@keyframes &lt;nombre-animacion&gt; {\n/* 1 o m\u00e1s fotogramas */\nselector_fotograma {\n/* Propiedades que deben cambiar en este fotograma */\npropiedad: valor;\n/* ... */\n}\n/* ... */\n}\n</code></pre> <p>El selector de un fotograma puede ser:</p> <ul> <li>Un porcentaje entre 0% y 100%, que indica el momento de la animaci\u00f3n en el que debe mostrarse dicho fotograma.</li> <li>from: Fotograma inicial. Es equivalente a 0%.</li> <li>to: Fotograma final. Es equivalente a 100%. El navegador crear\u00e1 la animaci\u00f3n teniendo en cuenta los fotogramas especificados e inventar\u00e1 autom\u00e1ticamente los pasos intermedios entre ellos, realizando una interpolaci\u00f3n de los valores de las propiedades cambiantes en dichos fotogramas.</li> </ul> <p>Veamos un ejemplo:</p> <pre><code>@keyframes cambio-color {\nfrom {\nbackground-color: red;\n}\nto {\nbackground-color: blue;\n}\n}\n</code></pre> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    animations: keyframes by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-6/#animation-name","title":"animation-name","text":"<p>La propiedad <code>animation-name</code> permite establecer el nombre de la animaci\u00f3n que queremos aplicar sobre el elemento.</p> Propiedad <code>animation-name</code> Valores &lt;nombre-animaci\u00f3n&gt; Se aplica a Todos los elementos Valor inicial none Descripci\u00f3n Establece el nombre de la animaci\u00f3n a aplicar sobre el elemento <p>Siguiendo el ejemplo de la propiedad anterior:</p> <pre><code>.boton {\nanimation-name: cambio-color;\n/* ... */\n}\n</code></pre>"},{"location":"tema_6/page-6/#animation-duration","title":"animation-duration","text":"<p>La propiedad <code>animation-duration</code> establece la duraci\u00f3n de la animaci\u00f3n.</p> Propiedad <code>animation-duration</code> Valores en <code>s</code> (Segundos) o <code>ms</code> (milisegundos) Se aplica a Todos los elementos Valor inicial 0s Descripci\u00f3n Establece la duraci\u00f3n de la animaci\u00f3n a aplicar al elemento <p>Siguiendo el ejemplo anterior:</p> <pre><code>.boton {\nanimation-name: cambio-color;\nanimation-duration: 6s;\n/* ... */\n}\n</code></pre>"},{"location":"tema_6/page-6/#animation-timing-function","title":"animation-timing-function","text":"<p>La propiedad <code>animation-timing-function</code> permite establecer la curva de aceleraci\u00f3n en la aplicaci\u00f3n de la animaci\u00f3n sobre el elemento.</p> Propiedad <code>animation-timing.function</code> Valores ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(, , , ) Se aplica a Todos los elementos Valor inicial ease Descripci\u00f3n Estable la curva de aceleraci\u00f3n en la aplicaci\u00f3n de la animaci\u00f3n sobre el elemento <p>Sus valores son similares a los de la propiedad <code>transition-timing-function</code>:</p> <ul> <li>ease: Inicio lento, transcurso r\u00e1pido y final lento. Equivalente a <code>cubic-bezier(0.25, 0.1, 0.25, 1)</code>.</li> <li>linear: Inicio normal, transcurso normal y final normal. Equivalente a <code>cubic-bezier(0, 0, 1, 1)</code>.</li> <li>ease-in: Inicio lento, transcurso normal y final normal. Equivalente a <code>cubic-bezier(0.42, 0, 1, 1)</code>.</li> <li>ease-out: Inicio normal, transcurso normal y final lento. Equivalente a <code>cubic-bezier(0, 0, 0.58, 1)</code>.</li> <li>ease-in-out: Inicio lento, transcurso normal y final lento. Equivalente a <code>cubic-bezier(0.42, 0, 0.58, 1)</code>.</li> <li>cubic-bezier(A, B, C, D): Transici\u00f3n personalizada, representada por una curva bezier, donde A, B, C, D corresponden, respectivamente, a las coordenadas x e y de los dos puntos de referencia para la curso bezier.</li> </ul> <p>Siguiendo el ejemplo anterior:</p> <pre><code>.boton {\nanimation-name: cambio-color;\nanimation-duration: 6s;\nanimation-timing-function: ease-in;\n/* ... */\n}\n</code></pre>"},{"location":"tema_6/page-6/#animation-delay","title":"animation-delay","text":"<p>La propiedad <code>animation-delay</code> permite definir cuanto se debe esperar (retraso inicial) para comenzar la animaci\u00f3n. Recibe un valor en segundos (por ejemplo 1s) o en milisegundos (por ejemplo 100ms).</p> Propiedad <code>animation-delay</code> Valores &lt;tiempo&gt; Se aplica a Todos los elementos Valor inicial 0s Descripci\u00f3n Establece el tiempo que se debe esperar hasta comenzar la animaci\u00f3n <p>Siguiendo el ejemplo anterior:</p> <pre><code>.boton {\nanimation-name: cambio-color;\nanimation-duration: 6s;\nanimation-timing-function: ease-in;\nanimation-delay: 1s;\n/* ... */\n}\n</code></pre>"},{"location":"tema_6/page-6/#animation-iteration-count","title":"animation-iteration-count","text":"<p>La propiedad <code>animation-iteration-count</code> permite indicar el n\u00famero de veces que se repite la animaci\u00f3n. Puede recibir un n\u00famero concreto o el valor infinite para indicar que se debe repetir indefinidamente.</p> Propiedad <code>animation-iteration-count</code> Valores &lt;numero&gt; @ infinite Se aplica a Todos los elementos Valor inicial 1 Descripci\u00f3n Establece el n\u00famero de veces que debe ejecutarse la animaci\u00f3n <p>Siguiendo el ejemplo anterior:</p> <pre><code>.boton {\nanimation-name: cambio-color;\nanimation-duration: 6s;\nanimation-timing-function: ease-in;\nanimation-delay: 1s;\nanimation-iteration-count: infinite;\n/* ... */\n}\n</code></pre>"},{"location":"tema_6/page-6/#animation-direction","title":"animation-direction","text":"<p>La propiedad <code>animation-direction</code> permite indicar el orden en el que se deben reproducir los fotogramas de la animaci\u00f3n:</p> Propiedad <code>animation-direction</code> Valores normal | reverse | alternate | alternate-reverse Se aplica a Todos los elementos Valor inicial normal Descripci\u00f3n Establece el orden de ejecuci\u00f3n de los fotogramas de la animaci\u00f3n <p>Puede tomar los siguientes valores:</p> <ul> <li><code>normal</code>: Los fotogramas se reproducen desde el principio al final.</li> <li><code>reverse</code>: Los fotogramas se reproducen desde el final al principio.</li> <li><code>alternate</code>: En iteraciones impares los fotogramas se reproducen desde el principio al final. En iteraciones impares, desde el final al principio. S\u00f3lo tiene sentido si el <code>animation-iteration-count</code> es mayor que 1 o infinite.</li> <li><code>alternate-reverse</code>: En iteraciones impares, los fotogramas se reproducen desde el final hasta el principio. En iteraciones impares, desde el principio al final. S\u00f3lo tiene sentido si el <code>animation-iteration-count</code> es mayor que 1 o infinite.</li> </ul> <p>Siguiendo el ejemplo anterior:</p> <pre><code>.boton {\nanimation-name: cambio-color;\nanimation-duration: 6s;\nanimation-timing-function: ease-in;\nanimation-delay: 1s;\nanimation-iteration-count: infinite;\nanimation-direction: alternate;\n/* ... */\n}\n</code></pre>"},{"location":"tema_6/page-6/#animation-fill-mode","title":"animation-fill-mode","text":"<p>La propiedad <code>animation-fill-mode</code> permite indicar el estado en el que debe mostrarse el elemento antes de iniciar la animaci\u00f3n y/o despu\u00e9s de finalizarla.</p> Propiedad <code>animation-fill-mode</code> Valores backwards | forwards | both | none Se aplica a Todos los elementos Valor inicial none Descripci\u00f3n Establece el estado en el que debe mostrarse el elemento antes de iniciar la animaci\u00f3n y/o despu\u00e9s de finalizarla <p>Puede tomar los siguientes valores:</p> <ul> <li><code>backwards</code>: Antes de iniciar la animaci\u00f3n el elemento se sit\u00faa en el estado descrito por el primer fotograma de la animaci\u00f3n. Cuando finaliza la animaci\u00f3n, el elemento vuelve otra vez a dicho estado inicial.</li> <li><code>forwards</code>: Antes de iniciar la animaci\u00f3n el elemento se muestra tal y como si no se le aplicara ninguna animaci\u00f3n. Una vez finalizada la animaci\u00f3n, el elemento queda en el estado descrito por el \u00faltimo fotograma de la animaci\u00f3n.</li> <li><code>both</code>: Antes de iniciar la animaci\u00f3n el elemento se sit\u00faa en el estado descrito por el primer fotograma de la animaci\u00f3n. Cuando finaliza la animaci\u00f3n, el elemento queda en el estado descrito por el \u00faltimo fotograma de la animaci\u00f3n.</li> <li><code>none</code>: Antes de iniciar y despu\u00e9s de finalizar la animaci\u00f3n el elemento se muestra tal y como si no se le aplicara ninguna animaci\u00f3n.</li> </ul> <p>Veamos un ejemplo:</p> <pre><code>.boton {\nanimation-name: cambio-color;\nanimation-duration: 6s;\nanimation-timing-function: ease-in;\nanimation-fill-mode: both;\n}\n</code></pre>"},{"location":"tema_6/page-6/#animation-play-state","title":"animation-play-state","text":"<p>La propiedad <code>animation-play-state</code> establecer si la animaci\u00f3n debe comenzar a ejecutarse autom\u00e1ticamente o no.</p> Propiedad <code>animation-play-state</code> Valores running | paused Se aplica a Todos los elementos Valor inicial running Descripci\u00f3n Establece el estado de reproducci\u00f3n de la animaci\u00f3n <p>Puede tomar los siguientes valores:</p> <ul> <li><code>running</code>: La animaci\u00f3n inicia su ejecuci\u00f3n autom\u00e1ticamente, siempre y cuando se haya establecido <code>animation-name</code> y <code>animation-duration</code>.</li> <li><code>paused</code>: La animaci\u00f3n est\u00e1 pausada en el primer fotograma, en espera de que sea iniciada expl\u00edcitamente desde c\u00f3digo Javascript.</li> </ul>"},{"location":"tema_6/page-6/#animation","title":"animation","text":"<p>La propiedad animation es una propiedad shorthand de todas las anteriores.</p> Propiedad <code>animation</code> Valores &lt;animation-name&gt; &lt;animation-duration&gt; &lt;animation-timing-function&gt; &lt;animation-delay&gt; &lt;animation-iteration-count&gt; &lt;animation-direction&gt; &lt;animation-fill-mode&gt; &lt;animation-play-state&gt; Se aplica a Todos los elementos Valor inicial none Descripci\u00f3n Establece el estado en el que debe mostrarse el elemento antes de iniciar la animaci\u00f3n y/o despu\u00e9s de finalizarla <p>En la siguiente demostraci\u00f3n creamos un slider de im\u00e1genes:</p> <p> See the Pen    animations by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_6/page-6/#libreria-animaciones","title":"Librer\u00eda Animaciones","text":"<p>Animate.css es una magn\u00edfica librer\u00eda CSS que proporciona gran cantidad de animaciones en forma de clases CSS que podemos usar las etiquetas que deseemos de nuestro documento. Evidente, deberemos consultar la documentaci\u00f3n para ver el nombre de la clase correspondiente a la animaci\u00f3n que deseemos aplicar.</p> <p>Para usar la librer\u00eda podemos descargarla de su web oficial https://daneden.github.io/animate.css/ y enlazarla localmente, o enlazar directamente con la librer\u00eda a trav\u00e9s del CDN (content delivery network) mediante</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.5.2/animate.min.css\"&gt;\n</code></pre> <p>Para asignar una animaci\u00f3n a un determinado documento HTML tan s\u00f3lo tendremos que asignarle las clases animated, el nombre de la clase correspondiente a la animaci\u00f3n deseada y, si queremos que se repita indefinidamente, la clase infinite.</p> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    animations library by irubenboy (@irubenboy)   on CodePen. </p>"}]}