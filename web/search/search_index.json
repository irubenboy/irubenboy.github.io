{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"tema_1/page_1/","title":"1 Introducci\u00f3n a HTML","text":""},{"location":"tema_1/page_1/#que-es-html","title":"\u00bfQu\u00e9 es HTML?","text":"<p>Defini\u00e9ndolo de forma sencilla, \"HTML es lo que se utiliza para crear todas las p\u00e1ginas web de Internet\". M\u00e1s concretamente, HTML es el lenguaje con el que se \"escriben\" la mayor\u00eda de p\u00e1ginas web.</p> <p>Los dise\u00f1adores utilizan el lenguaje HTML para crear sus p\u00e1ginas web, los programas que utilizan los dise\u00f1adores generan p\u00e1ginas escritas en HTML y los navegadores que utilizamos los usuarios muestran las p\u00e1ginas web despu\u00e9s de leer su contenido HTML.</p> <p>Aunque HTML es un lenguaje que utilizan los ordenadores y los programas de dise\u00f1o, es muy f\u00e1cil de aprender y escribir por parte de las personas. En realidad, HTML son las siglas de HyperText Markup Language y m\u00e1s adelante se ver\u00e1 el significado de cada una de estas palabras.</p> <p>El lenguaje HTML es un est\u00e1ndar reconocido en todo el mundo y cuyas normas define un organismo sin \u00e1nimo de lucro llamado World Wide Web Consortium, m\u00e1s conocido como W3C. Como se trata de un est\u00e1ndar reconocido por todas las empresas relacionadas con el mundo de Internet, una misma p\u00e1gina HTML se visualiza de forma muy similar en cualquier navegador de cualquier sistema operativo.</p> <p>El propio W3C define el lenguaje HTML como \"un lenguaje reconocido universalmente y que permite publicar informaci\u00f3n de forma global\". Desde su creaci\u00f3n, el lenguaje HTML ha pasado de ser un lenguaje utilizado exclusivamente para crear documentos electr\u00f3nicos a ser un lenguaje que se utiliza en muchas aplicaciones electr\u00f3nicas como buscadores, tiendas online y banca electr\u00f3nica.</p>"},{"location":"tema_1/page_1/#historia-de-html","title":"Historia de HTML","text":"<p>El origen de HTML se remonta a 1980, cuando el f\u00edsico Tim Berners-Lee, trabajador del CERN (Organizaci\u00f3n Europea para la Investigaci\u00f3n Nuclear) propuso un nuevo sistema de \"hipertexto\" para compartir documentos. Los sistemas de \"hipertexto\" hab\u00edan sido desarrollados a\u00f1os antes. En el \u00e1mbito de la inform\u00e1tica, el \"hipertexto\" permit\u00eda que los usuarios accedieran a la informaci\u00f3n relacionada con los documentos electr\u00f3nicos que estaban visualizando. De cierta manera, los primitivos sistemas de \"hipertexto\" podr\u00edan asimilarse a los enlaces de las p\u00e1ginas web actuales. Tras finalizar el desarrollo de su sistema de \"hipertexto\", Tim Berners-Lee lo present\u00f3 a una convocatoria organizada para desarrollar un sistema de \"hipertexto\" para Internet. Despu\u00e9s de unir sus fuerzas con el ingeniero de sistemas Robert Cailliau, presentaron la propuesta ganadora llamada WorldWideWeb (W3).</p> <p>El primer documento formal con la descripci\u00f3n de HTML se public\u00f3 en 1991 bajo el nombre HTML Tags (Etiquetas HTML) y todav\u00eda hoy puede ser consultado online a modo de reliquia inform\u00e1tica.</p> <p>La primera propuesta oficial para convertir HTML en un est\u00e1ndar se realiz\u00f3 en 1993 por parte del organismo IETF (Internet Engineering Task Force). Aunque se consiguieron avances significativos (en esta \u00e9poca se definieron las etiquetas para im\u00e1genes, tablas y formularios) ninguna de las dos propuestas de est\u00e1ndar, llamadas HTML y HTML+ consiguieron convertirse en est\u00e1ndar oficial.</p> <p>En 1995, el organismo IETF organiza un grupo de trabajo de HTML y consigue publicar, el 22 de septiembre de ese mismo a\u00f1o, el est\u00e1ndar HTML 2.0. A pesar de su nombre, HTML 2.0 es el primer est\u00e1ndar oficial de HTML. los est\u00e1ndares de HTML los publica otro organismo de estandarizaci\u00f3n llamado W3C (World Wide Web Consortium)</p> <p>La versi\u00f3n HTML 3.2 se public\u00f3 el 14 de Enero de 1997 y es la primera recomendaci\u00f3n de HTML publicada por el W3C. Esta revisi\u00f3n incorpora los \u00faltimos avances de las p\u00e1ginas web desarrolladas hasta 1996, como applets de Java y texto que fluye alrededor de las im\u00e1genes.</p> <p>A principios de 1997, el W3C decide separar los trabajos del grupo de HTML en tres secciones: el grupo de trabajo de HTML, el grupo de trabajo de DOM y el grupo de trabajo de CSS.</p> <p>HTML 4.0 se public\u00f3 el 24 de Abril de 1998 (siendo una versi\u00f3n corregida de la publicaci\u00f3n original del 18 de Diciembre de 1997) y supone un gran salto desde las versiones anteriores. Entre sus novedades m\u00e1s destacadas se encuentran las hojas de estilos CSS, la posibilidad de incluir peque\u00f1os programas o scripts en las p\u00e1ginas web, mejora de la accesibilidad de las p\u00e1ginas dise\u00f1adas, tablas complejas y mejoras en los formularios.</p> <p>El 24 de diciembre de 1999 se publica HTML 4.01. Se trata de una revisi\u00f3n y actualizaci\u00f3n de la versi\u00f3n HTML 4.0, por lo que no incluye novedades significativas.</p> <p>Desde la publicaci\u00f3n de HTML 4.01, la actividad de estandarizaci\u00f3n de HTML se detuvo y el W3C se centr\u00f3 en el desarrollo del est\u00e1ndar XHTML. Por este motivo, en el a\u00f1o 2004, las empresas Apple, Mozilla y Opera mostraron su preocupaci\u00f3n por la falta de inter\u00e9s del W3C en HTML y decidieron organizarse en una nueva asociaci\u00f3n llamada WHATWG (Web Hypertext Application Technology Working Group). La actividad del WHATWG se centr\u00f3 en el futuro est\u00e1ndar HTML 5, cuyo primer borrador oficial se public\u00f3 el 22 de enero de 2008.</p> <p>De forma paralela a su actividad con HTML, W3C continu\u00f3 con la estandarizaci\u00f3n de XHTML, una versi\u00f3n avanzada de HTML y basada en XML. La primera versi\u00f3n de XHTML se denomin\u00f3 XHTML 1.0 y se public\u00f3 el 26 de Enero de 2000 (y posteriormente se revis\u00f3 el 1 de Agosto de 2002). XHTML 1.0 era una adaptaci\u00f3n de HTML 4.01 al lenguaje XML, por lo que manten\u00eda casi todas sus etiquetas y caracter\u00edsticas, pero a\u00f1ad\u00eda algunas restricciones y elementos propios de XML.</p> <p>Debido a la fuerza de las empresas que formaban el grupo WHATWG y a la publicaci\u00f3n de los borradores de HTML 5.0, en marzo de 2007 el W3C decidi\u00f3 retomar la actividad estandarizadora de HTML, de manera que se unificaron los esfuerzos del grupo WHATWG y de W3C.</p> <p>En octubre de 2014 se present\u00f3 el est\u00e1ndar HTML 5.0.</p> <p>En noviembre de 2016 se public\u00f3 la recomendaci\u00f3n HTML 5.1, y en octubre de 2017 HTML 5.1 2nd Edition.</p>"},{"location":"tema_1/page_1/#lenguajes-de-etiquetas","title":"Lenguajes de etiquetas","text":"<p>Uno de los retos iniciales a los que se tuvo que enfrentar la inform\u00e1tica fue el de c\u00f3mo almacenar la informaci\u00f3n en los archivos digitales. Como los primeros archivos s\u00f3lo conten\u00edan texto sin formato, la soluci\u00f3n utilizada era muy sencilla: se codificaban las letras del alfabeto y se transformaban en n\u00fameros.</p> <p>De esta forma, para almacenar un contenido de texto en un archivo electr\u00f3nico, se utiliza una tabla de conversi\u00f3n que transforma cada car\u00e1cter en un n\u00famero. Una vez almacenada la secuencia de n\u00fameros, el contenido del archivo se puede recuperar realizando el proceso inverso.</p> <p> Figura 1 - Esquema codificaci\u00f3n de caracteres</p> <p>El proceso de transformaci\u00f3n de caracteres en secuencias de n\u00fameros se denomina codificaci\u00f3n de caracteres y cada una de las tablas que se han definido para realizar la transformaci\u00f3n se conocen con el nombre de p\u00e1ginas de c\u00f3digo. Una de las codificaciones m\u00e1s conocidas (y una de las primeras que se publicaron) es la codificaci\u00f3n ASCII. La importancia de las codificaciones en HTML se ver\u00e1 m\u00e1s adelante.</p> <p>Una vez resuelto el problema de almacenar el texto simple, se presenta el reto de almacenar los contenidos de texto con formato. En otras palabras, \u00bfc\u00f3mo se almacena un texto en negrita? \u00bfy un texto de color rojo? \u00bfy otro texto azul, en negrita y subrayado?</p> <p>Utilizar una tabla de conversi\u00f3n similar a las que se utilizan para textos sin formato no es posible, ya que existen infinitos posibles estilos para aplicar al texto. Una soluci\u00f3n t\u00e9cnicamente viable consiste en almacenar la informaci\u00f3n sobre el formato del texto en una zona especial reservada dentro del propio archivo. En esta zona se podr\u00eda indicar d\u00f3nde comienza y d\u00f3nde termina cada formato.</p> <p>No obstante, la soluci\u00f3n que realmente se emplea para guardar la informaci\u00f3n con formato es mucho m\u00e1s sencilla: el archivo electr\u00f3nico almacena tanto los contenidos como la informaci\u00f3n sobre el formato de esos contenidos. Si por ejemplo se quiere dividir el texto en p\u00e1rrafos y se desea dar especial importancia a algunas palabras, se podr\u00eda indicar de la siguiente manera:</p> <pre><code>&lt;parrafo&gt;\n    Contenido del texto con &lt;importante&gt;algunas palabras&lt;/importante&gt; resaltadas\n&lt;/parrafo&gt;\n</code></pre> <p>El principio de un p\u00e1rrafo se indica mediante la palabra <code>&lt;parrafo&gt;</code> y el final de un p\u00e1rrafo se indica mediante la palabra <code>&lt;/parrafo&gt;</code>. De la misma manera, para asignar m\u00e1s importancia a ciertas palabras del texto, se encierran entre <code>&lt;importante&gt;</code> y <code>&lt;/importante&gt;</code>.</p> <p>El proceso de indicar las diferentes partes que componen la informaci\u00f3n se denomina marcar (markup). Cada una de las palabras que se emplean para marcar el inicio y el final de una secci\u00f3n se denominan etiquetas (tags).</p> <p>Aunque existen algunas excepciones, en general las etiquetas se indican por pares y se forman de la siguiente manera:</p> <ul> <li>Etiqueta de apertura: car\u00e1cter <code>&lt;</code>, seguido del nombre de la etiqueta (sin espacios en blanco) y terminado con el car\u00e1cter <code>&gt;</code></li> <li>Etiqueta de cierre: car\u00e1cter <code>&lt;</code>, seguido del car\u00e1cter <code>/</code>, seguido del nombre de la etiqueta (sin espacios en blanco) y terminado con el car\u00e1cter <code>&gt;</code>. As\u00ed, la estructura t\u00edpica de las etiquetas HTML es: <code>&lt;nombre_etiqueta&gt; ... &lt;/nombre_etiqueta&gt;</code>.</li> </ul> <p>HTML es un lenguaje de etiquetas (tambi\u00e9n llamado lenguaje de marcado) y las p\u00e1ginas web habituales est\u00e1n formadas por cientos o miles de pares de etiquetas. De hecho, las letras \"ML\" de la sigla HTML significan markup language, que es como se denominan en ingl\u00e9s a los lenguajes de marcado. Adem\u00e1s de HTML, existen muchos otros lenguajes de etiquetas como XML, SGML, DocBook y MathML.</p> <p>La principal ventaja de los lenguajes de etiquetas es que son muy sencillos de leer y escribir por parte de las personas y de los sistemas electr\u00f3nicos. La principal desventaja es que pueden aumentar mucho el tama\u00f1o del documento, por lo que en general se utilizan etiquetas con nombres muy cortos.</p>"},{"location":"tema_1/page_1/#el-primer-documento-html","title":"El primer documento HTML","text":"<p>Las p\u00e1ginas HTML se dividen en dos partes: la cabecera y el cuerpo. La cabecera incluye informaci\u00f3n sobre la propia p\u00e1gina, como por ejemplo su t\u00edtulo y su idioma. El cuerpo de la p\u00e1gina incluye todos sus contenidos, como p\u00e1rrafos de texto e im\u00e1genes.</p> <p> Figura 2 - Esquema partes de un documento HTML</p> <p>El cuerpo (body) contiene todo lo que el usuario ve en su pantalla y la cabecera (head) contiene todo lo que no se ve, con la \u00fanica excepci\u00f3n del t\u00edtulo de la p\u00e1gina, que los navegadores muestran como t\u00edtulo de sus ventanas.</p> <p> See the Pen    Untitled by irubenboy (@irubenboy)   on CodePen. </p> <p>Para escribir el ejemplo anterior debes utilizar un editor de texto sin formato, como Brackets, Visual Studio Code, Atom, Notepad++ o el propio Bloc de notas. NO se debe utilizar un procesador de textos, como Word u Libre Office Writer, ya que \u00e9stos a\u00f1aden sus propios c\u00f3digos al texto.</p> <p>Otra alternativa inicial para \"jugar\" con el HTML, CSS y JavaScript es usar un editor online, como por ejemplo Codepen, Plunker o JS Bin.</p> <p>Volviendo al c\u00f3digo HTML del primer ejemplo, es importante conocer los elementos principales de un documento HTML:</p> <ul> <li><code>&lt;!DOCTYPE html&gt;</code>: Debe estar situado en la primera l\u00ednea del archivo y no le puede preceder ning\u00fan espacio en blanco. Se usa para indicar que el lenguaje en el que est\u00e1 escrito el resto del documento es HTML y debe ser interpretado como tal.</li> <li><code>&lt;html&gt;</code>: indica el comienzo y el final de un documento HTML. Ninguna etiqueta o contenido puede colocarse antes o despu\u00e9s de la etiqueta <code>&lt;html&gt;</code> (con una sola excepci\u00f3n que se ver\u00e1 m\u00e1s adelante). En el interior de la etiqueta <code>&lt;html&gt;</code> se definen la cabecera y el cuerpo del documento HTML y todo lo que se coloque fuera de la etiqueta <code>&lt;html&gt;</code> se ignora. Su atributo m\u00e1s importante es <code>lang=\"c\u00f3digo_idioma\"</code>, que se emplea para indicar el idioma en el que est\u00e1 escrito el contenido de la p\u00e1gina web, por ejemplo <code>lang=\"es\"</code> para el espa\u00f1ol.</li> <li><code>&lt;head&gt;</code>: delimita la parte de la cabecera del documento. La cabecera contiene informaci\u00f3n sobre el propio documento HTML, como por ejemplo su t\u00edtulo y el idioma de la p\u00e1gina. Los contenidos indicados en la cabecera no son visibles para el usuario, con la excepci\u00f3n de la etiqueta <code>&lt;title&gt;</code>, que se utiliza para indicar el t\u00edtulo del documento y que los navegadores lo visualizan en la parte superior izquierda de la ventana del navegador (si no te has fijado anteriormente, vuelve a abrir el primer ejemplo en cualquier navegador y observa d\u00f3nde se muestra el t\u00edtulo de la p\u00e1gina).</li> <li><code>&lt;body&gt;</code>: delimita el cuerpo del documento HTML. El cuerpo encierra todos los contenidos que se muestran al usuario (p\u00e1rrafos de texto, im\u00e1genes, tablas). En general, el <code>&lt;body&gt;</code> de un documento contiene cientos de etiquetas HTML, mientras que el <code>&lt;head&gt;</code> no contiene m\u00e1s que unas pocas.</li> </ul>"},{"location":"tema_1/page_1/#elementos-html","title":"Elementos HTML","text":"<p>HTML define el t\u00e9rmino elemento para referirse a las partes que componen los documentos HTML. Aunque en ocasiones se habla de forma indistinta de \"elementos\" y \"etiquetas\", en realidad un elemento HTML es mucho m\u00e1s que una etiqueta, ya que est\u00e1 formado por:</p> <ul> <li>Una etiqueta de apertura.</li> <li>Cero o m\u00e1s pares atributo=\"valor\".</li> <li>Contenido encerrado por la etiqueta.</li> <li>Una etiqueta de cierre.</li> </ul> <p>El contenido encerrado por la etiqueta es opcional, ya que algunas etiquetas de HTML no pueden encerrar ning\u00fan contenido. El siguiente esquema muestra un elemento HTML, formado por una etiqueta <code>&lt;p&gt;</code>, atributos y contenidos de texto:</p> <p> Figura 3 - Elementos HTML</p> <p>La estructura mostrada en el esquema anterior es un elemento HTML ya que comienza con una etiqueta de apertura (<code>&lt;p&gt;</code>), contiene cero o m\u00e1s atributos (<code>class=\"normal\"</code>), dispone de un contenido de texto (<code>Esto es un p\u00e1rrafo</code>) y finaliza con una etiqueta de cierre (<code>&lt;/p&gt;</code>).</p> <p>No todos los atributos se pueden utilizar en todas las etiquetas. Por ello, cada etiqueta define su propia lista de atributos disponibles. Adem\u00e1s, cada atributo tambi\u00e9n indica el tipo de valor que se le puede asignar. Si el valor de un atributo no es v\u00e1lido, el navegador ignora ese atributo. Aunque cada una de las etiquetas HTML define sus propios atributos, algunos de los atributos son comunes a muchas o casi todas las etiquetas.</p> <p>Los elementos deben cumplir una serie de recomendaciones:</p> <ul> <li> <p>Los elementos deben cerrarse en orden inverso a como se abren. Por ejemplo:</p> <pre><code>&lt;p&gt;Este es un p\u00e1rrafo con &lt;a&gt;un enlace&lt;/a&gt;&lt;/p&gt;\n</code></pre> </li> <li> <p>Los nombres de las etiquetas y atributos siempre se escriben en min\u00fasculas:</p> </li> <li>El valor de los atributos siempre se encierra con comillas dobles <code>atributo=\"valor\"</code>.</li> <li> <p>Hay unos pocos atributos que se pueden comprimir, es decir, para los que no es necesario indicar el valor porque es el mismo que el nombre del atributo. Por ejemplo las dos formas siguientes son v\u00e1lidas:</p> <pre><code>&lt;dl compact=\"compact\"&gt;...&lt;/dl&gt;\n&lt;dl compact&gt;...&lt;/dl&gt;\n</code></pre> </li> <li> <p>La mayor\u00eda de elementos HTML encierran un contenido de texto entre la etiqueta de apertura y la etiqueta de cierre. Sin embargo, algunas etiquetas especiales llamadas \"etiquetas vac\u00edas\" no necesitan encerrar ning\u00fan texto. La etiqueta <code>&lt;br&gt;</code> por ejemplo, se utiliza para indicar el comienzo de una nueva l\u00ednea. Por sus caracter\u00edsticas, la etiqueta <code>&lt;br&gt;</code> nunca encierra ning\u00fan contenido de texto. En estos casos se puede, opcionalmente, modificar la etiqueta de apertura para que termine en <code>/&gt;</code> en vez de en <code>&gt;</code>, de manera que act\u00fae a la vez como etiqueta de apertura y etiqueta de cierre. As\u00ed nuestro elemento quedar\u00eda como <code>&lt;br/&gt;</code></p> </li> </ul> <p>Todas estas recomendaciones no son estrictamente necesarias en HTML 5, pero altamente recomendables.</p>"},{"location":"tema_1/page_1/#comentarios-html","title":"Comentarios HTML","text":"<p>Al igual que la mayor\u00eda de lenguajes de marcado, HTML permite incluir comentarios dentro de su c\u00f3digo para a\u00f1adir informaci\u00f3n que no se debe mostrar por pantalla. Normalmente, los dise\u00f1adores y programadores incluyen comentarios para marcar el comienzo y el final de las secciones de las p\u00e1ginas, para incluir avisos y notas para otros dise\u00f1adores o para incluir explicaciones sobre la forma en la que se ha creado el c\u00f3digo HTML.</p> <p>Aunque los comentarios no se muestran por pantalla y por tanto son invisibles para los usuarios, s\u00ed que se descargan con el c\u00f3digo HTML de la p\u00e1gina. Por este motivo, nunca debe incluirse informaci\u00f3n sensible o confidencial en los comentarios. La sintaxis de los comentarios es la siguiente:</p> <pre><code>&lt;!-- Esto es un comentario --&gt;\n&lt;p&gt;Soy un p\u00e1rrafo&lt;/p&gt;\n</code></pre> <p>Los comentarios de HTML pueden ocupar tantas l\u00edneas como sea necesario. Sin embargo, no se pueden anidar, es decir, no se puede incluir un comentario dentro de otro.</p> Ejercicio <p>Realiza una p\u00e1gina web que contenga:</p> <ul> <li>Un comentario explicando su contenido.</li> <li>Dos p\u00e1rrafos: uno que muestre tu nombre y otro que diga la nota que vas a sacar en la asignatura.</li> <li>Otro texto que no sea un p\u00e1rrafo.</li> </ul> <p>Responde, adem\u00e1s a las siguientes preguntas:</p> <ol> <li>\u00bfPara qu\u00e9 sirve un comentario?</li> <li>\u00bfQu\u00e9 diferencia hay entre marcar un texto como p\u00e1rrafo y no marcarlo con ninguna etiqueta.</li> </ol>"},{"location":"tema_1/page_1/#cabecera","title":"Cabecera","text":"<p>Las p\u00e1ginas y documentos HTML incluyen m\u00e1s informaci\u00f3n de la que los usuarios ven en sus pantallas. Estos datos adicionales siempre est\u00e1n relacionados con la propia p\u00e1gina, por lo que se denominan meta-informaci\u00f3n o metadatos (datos sobre los datos). La meta-informaci\u00f3n siempre se incluye en la secci\u00f3n de la cabecera, es decir, dentro de la etiqueta <code>&lt;head&gt;</code>.</p>"},{"location":"tema_1/page_1/#etiqueta-title","title":"Etiqueta title","text":"<p>La meta-informaci\u00f3n m\u00e1s conocida y utilizada es el t\u00edtulo de la propia p\u00e1gina, que, como hemos visto se indica usando la etiqueta <code>&lt;title&gt;</code>, de la siguiente manera:</p> <pre><code>&lt;title&gt;Ejemplo de elementos en l\u00ednea y elementos de bloque&lt;/title&gt;\n</code></pre> <p>La etiqueta <code>&lt;title&gt;</code> proporciona la siguiente funcionalidad:</p> <ul> <li>Define el t\u00edtulo que aparece en la pesta\u00f1a correspondiente del navegador.</li> <li>Proporciona el t\u00edtulo para la p\u00e1gina cuando se a\u00f1ade a los \"Favoritos\" del navegador</li> <li>Muestra el t\u00edtulo de la p\u00e1gina en los resultados de los motores de b\u00fasqueda.</li> </ul>"},{"location":"tema_1/page_1/#etiqueta-meta","title":"Etiqueta meta","text":"<p>Adem\u00e1s del t\u00edtulo, es posible incluir mucha otra informaci\u00f3n que sirva de utilidad a los navegadores, a los buscadores y a otros servicios web. Para ello usaremos la etiqueta <code>&lt;meta&gt;</code>, que tiene distintos casos de uso. Veamos algunos ejemplos:</p> <pre><code>&lt;!-- Define el juego de caracteres que debe usarse --&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;!-- Define una descripci\u00f3n de la p\u00e1gina web --&gt;\n&lt;meta name=\"description\" content=\"Free Web tutorials\" /&gt;\n&lt;!-- Define palabra clave para los motores de los b\u00fasqueda --&gt;\n&lt;meta name=\"keywords\" content=\"HTML, CSS, apuntes, inform\u00e1tica\" /&gt;\n&lt;!-- Define el autor de la p\u00e1gina --&gt;\n&lt;meta name=\"author\" content=\"Pedro Pica piedra\"&gt;\n&lt;!-- Refresca el documento cada 30 segundos --&gt;\n&lt;meta http-equiv=\"refresh\" content=\"30\" /&gt;\n&lt;!-- Activa los modos de compatibilidad de Internet Explorer --&gt;\n&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /&gt;\n&lt;!-- Establece que la ventana de renderizado del navegador (viewport) tenga el ancho del dispositivo en el que se ejecuta y no se haga zoom --&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;\n</code></pre> <p>Es importante que el meta charset se coloque justo despu\u00e9s de la apertura de la etiqueta <code>&lt;head&gt;</code>. De este modo nos aseguramos que el navegador conocer\u00e1 la codificaci\u00f3n de caracteres utilizada antes de que comience a procesar nada.</p>"},{"location":"tema_1/page_1/#etiqueta-base","title":"Etiqueta base","text":"<p>Otra etiqueta disponible para asignar meta-informaci\u00f3n es la etiqueta <code>&lt;base&gt;</code>, que permite definir una URL y un tipo de destinatario por defecto para todos los enlaces de una p\u00e1gina. Por ejemplo:</p> <pre><code>&lt;base href=\"http://www.w3schools.com/images/\" target=\"_blank\" /&gt;\n</code></pre> <p>De esta manera, cuando indiquemos un enlace, por defecto la URL base corresponder\u00e1 a la indicada anteriormente y por defecto el enlace se abrir\u00e1 en una nueva ventana o pesta\u00f1a, como aprenderemos m\u00e1s adelante.</p>"},{"location":"tema_1/page_1/#etiqueta-link","title":"Etiqueta Link","text":"<p>La etiqueta <code>&lt;link&gt;</code> define la relaci\u00f3n entre nuestro documento y un recurso externo a \u00e9l. Por ejemplo, como ya hemos visto, se usa la etiqueta <code>&lt;link&gt;</code> para establecer la relaci\u00f3n del documento HTML con un archivo de hojas de estilo CSS. El tipo de relaci\u00f3n se indica a trav\u00e9s del atributo <code>rel</code>. Para el caso de las hojas de estilo el valor de dicho atributo debe ser stylesheet. Por ejemplo:</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;\n</code></pre> <p>Tambi\u00e9n podemos usar la etiqueta link para a\u00f1adir el icono de favoritos (favicon) a nuestra p\u00e1gina. Un favicon es una peque\u00f1a imagen asociada con una p\u00e1gina o sitio web en particular. Los navegadores gr\u00e1ficos suelen mostrar el favicon de la p\u00e1gina visitada, si \u00e9sta lo posee, en la barra de direcciones y en el encabezado de la pesta\u00f1a correspondiente. Asimismo los utilizan para identificar m\u00e1s f\u00e1cilmente las p\u00e1ginas, present\u00e1ndolos junto a sus respectivos t\u00edtulos, en las listas de marcadores (navegadores web) o favoritos, en los historiales (navegador web) de p\u00e1ginas visitadas y de navegaci\u00f3n reciente, y toda vez que deban hacer referencia a ellas. Por ejemplo:</p> <pre><code>&lt;link rel=\"shortcut icon\" href=\"favicon.ico\" /&gt;\n</code></pre> <p>Info</p> <p>Existen varios generadores online que permite generar un favicon a partir de una imagen o icono:</p> <p>http://www.favicon-generator.org/</p> <p>http://www.genfavicon.com/es/</p>"},{"location":"tema_1/page_1/#etiqueta-script","title":"Etiqueta script","text":"<p>Para insertar c\u00f3digo JavaScript en nuestro documento, usaremos la etiqueta <code>&lt;script&gt;</code>. Se puede usar la etiqueta <code>&lt;script</code>&gt; tanto dentro del <code>&lt;body&gt;</code> como dentro del <code>&lt;head&gt;</code>. Nuestro c\u00f3digo JavaScript puede ser encerrado entre <code>&lt;script&gt;</code> y <code>&lt;/script&gt;</code>. Por ejemplo:</p> <pre><code>&lt;script src=\"js/codigo.js\"&gt;&lt;/script&gt;\n</code></pre> <p>En conjunci\u00f3n con la etiqueta <code>&lt;script&gt;</code> se debe usar la etiqueta <code>&lt;noscript&gt;</code> para indicar el c\u00f3digo HTML que debe mostrar el navegador si \u00e9ste no soporta JavaScript o el usuario ha deshabilitado dicha funcionalidad. Por ejemplo:</p> <pre><code>&lt;script&gt;\ndocument.write(\"Hola Mundo!\")\n&lt;/script&gt;\n&lt;noscript&gt;\n&lt;p&gt;Bienvenido a Mi Sitio&lt;/p&gt;\n&lt;p&gt;La p\u00e1gina que est\u00e1s viendo requiere para su funcionamiento el uso de JavaScript.\nSi lo has deshabilitado intencionadamente, por favor vuelve a activarlo.&lt;/p&gt;\n&lt;/noscript&gt;\n</code></pre>"},{"location":"tema_1/page_1/#elementos-en-bloque-y-elementos-en-linea","title":"Elementos en bloque y elementos en l\u00ednea","text":"<p>Para cada etiqueta HTML el motor de renderizado del navegador crea un elemento o caja. Dependiendo del tipo etiqueta del que se trate, el elemento creado tiene unas determinadas caracter\u00edsticas respecto a su modo de formato visual.</p> <p>La mayor\u00eda de las etiquetas HTML crean elementos denominados de bloque (block elements en ingl\u00e9s). Es el caso, por ejemplo, de las etiquetas <code>&lt;p&gt;</code>, <code>&lt;h1&gt;</code>, etc. Los elementos de bloque siempre empiezan en una nueva l\u00ednea y ocupan todo el espacio disponible hasta el final de la l\u00ednea, aunque sus contenidos no lleguen hasta el final de la l\u00ednea.</p> <p>Hay algunas etiquetas que crean elementos en l\u00ednea (inline elements en ingl\u00e9s). Es el caso, por ejemplo, de las etiquetas <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code>. Los elementos en l\u00ednea s\u00f3lo ocupan el espacio necesario para mostrar sus contenidos.</p> <p>Hay otras etiquetas espec\u00edficas que crean elementos con otros modelos de formato visual m\u00e1s espec\u00edficos, como <code>&lt;table&gt;</code>, <code>&lt;tr&gt;</code>, etc.</p> <p>Veamos un demostraci\u00f3n de la diferencia entre elementos en bloque y elementos en l\u00ednea:</p> <p> See the Pen    Elementos en bloque y elementos en l\u00ednea by irubenboy (@irubenboy)   on CodePen. </p> HTMLCSS <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;\n&lt;title&gt;Ejemplo de elementos en l\u00ednea y elementos de bloque&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;Los p\u00e1rrafos son elementos de bloque.&lt;/p&gt;\n&lt;a href=\"https://www.google.com\"&gt;Los enlaces son elementos en l\u00ednea&lt;/a&gt;\n&lt;p&gt;Dentro de un p\u00e1rrafo, &lt;a href=\"https://www.google.com\"&gt;los enlaces&lt;/a&gt; siguen siendo elementos en l\u00ednea.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>p {\nborder: solid 2px black;\n}\na {\nborder: dashed 1px red;\n}\n</code></pre> <p>En la demo anterior, el primer p\u00e1rrafo contiene un texto corto que s\u00f3lo ocupa la mitad de la anchura de la ventana del navegador. No obstante, el espacio reservado por el navegador para el primer p\u00e1rrafo llega hasta el final de esa l\u00ednea, por lo que resulta evidente que los elementos <code>&lt;p&gt;</code> son elementos de bloque.</p> <p>Por otra parte, el primer enlace del ejemplo anterior tambi\u00e9n tiene un texto corto que ocupa solamente la mitad de la anchura de la ventana del navegador. En este caso, el navegador s\u00f3lo reserva para el enlace el sitio necesario para mostrar sus contenidos. Si se a\u00f1ade otro enlace en esa misma l\u00ednea, se mostrar\u00eda a continuaci\u00f3n del primer enlace. Por tanto, los elementos <code>&lt;a&gt;</code> son elementos en l\u00ednea.</p> <p>Por \u00faltimo, el segundo p\u00e1rrafo sigue ocupando todo el espacio disponible hasta el final de cada l\u00ednea (por ser un elemento de bloque) y el enlace que se encuentra dentro del p\u00e1rrafo s\u00f3lo ocupa el sitio necesario para mostrar sus contenidos (por ser un elemento en l\u00ednea).</p> <p>La mayor\u00eda de elementos de bloque pueden contener en su interior elementos en l\u00ednea y otros elementos de bloque. Los elementos en l\u00ednea s\u00f3lo pueden contener texto u otros elementos en l\u00ednea. En otras palabras, un elemento de bloque no puede aparecer dentro de un elemento en l\u00ednea. En cambio, un elemento en l\u00ednea puede aparecer dentro de un elemento de bloque y dentro de otro elemento en l\u00ednea.</p> <p>M\u00e1s adelante veremos otros modelos de formato visual y c\u00f3mo desde CSS podremos cambiar el modelo de formato visual de cualquier elemento a trav\u00e9s de la propiedad <code>display</code>.</p>"},{"location":"tema_1/page_1/#etiquetas-div-y-span","title":"Etiquetas div y span","text":"<p>HTML define la etiqueta <code>&lt;div&gt;</code> para agrupar los elementos que forman cada zona o divisi\u00f3n de la p\u00e1gina. Se trata de un elemento en bloque gen\u00e9rico, sin ning\u00fan significado sem\u00e1ntico especial. El nombre de la etiqueta <code>&lt;div&gt;</code> tiene su origen en la palabra **div**isi\u00f3n (division), ya que esta etiqueta define zonas o divisiones dentro de una p\u00e1gina HTML.</p> <p>Por su parte tambi\u00e9n tendremos la posibilidad de marcar un determinado un texto dentro del contenido de un elemento con objeto de aplicar un estilo visual espec\u00edfico. Para ello utilizaremos la etiqueta <code>&lt;span&gt;</code>, que define un elemento en l\u00ednea gen\u00e9rico.</p> <p>Veamos una demostraci\u00f3n de las etiquetas gen\u00e9ricas <code>&lt;div&gt;</code> y <code>&lt;span&gt;</code> (se omiten el resto de etiquetas y se deja tan s\u00f3lo el contenido de la etiqueta <code>&lt;body&gt;</code>):</p> <p> See the Pen    Div vs span by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_1/page_1/#validacion-html","title":"Validaci\u00f3n HTML","text":"<p>Si queremos comprobar si hay errores en nuestro documento HTML, no nos basta con simplemente mostrarlo en un navegador. El motivo es que los navegadores son bastante permisivos, ya que en el caso de encontrar un error, intentan intuir lo que se quiso decir e incluso, prosiguiendo con la carga del documento en vez de mostrar un error.</p> <p>Para asegurarnos de que nuestro documento est\u00e1 escrito correctamente podemos utilizar una herramienta conocida como validador HTML, que no es m\u00e1s que un programa que analiza nuestro c\u00f3digo y nos dice el n\u00famero de errores que tenemos, junto a una breve descripci\u00f3n del mismo. El m\u00e1s conocido de ellos es el validador HTML de W3C.</p>"},{"location":"tema_1/page_1/#lorem-ipsum","title":"Lorem ipsum","text":"<p>Lorem ipsum es el texto que se usa habitualmente en dise\u00f1o gr\u00e1fico en demostraciones de tipograf\u00edas o de borradores de dise\u00f1o para probar el dise\u00f1o visual antes de insertar el texto final. Corresponde por tanto a simple texto de relleno.</p> <p>Aunque no posee actualmente fuentes para justificar sus hip\u00f3tesis, el profesor de filolog\u00eda cl\u00e1sica Richard McClintock asegura que su uso se remonta a los impresores de comienzos del siglo XVI. Su uso en algunos editores de texto muy conocidos en la actualidad ha dado al texto lorem ipsum nueva popularidad.</p> <p>El texto en s\u00ed no tiene sentido, aunque no es completamente aleatorio, sino que deriva de un texto de Cicer\u00f3n en lengua latina, a cuyas palabras se les han eliminado s\u00edlabas o letras. El significado del texto no tiene importancia, ya que solo es una demostraci\u00f3n o prueba, pero se inspira en la obra de Cicer\u00f3n De finibus bonorum et malorum (Sobre los l\u00edmites del bien y del mal).</p> <p>La mayor\u00eda de los editores de texto proporcionan la funcionalidad de generaci\u00f3n de lorem ipsum, algunos incluyendo un determinado plugin.</p> <p>Info</p> <p>Tambi\u00e9n tenemos varios generadores online (algunos de ellos c\u00f3micos):</p> <p>Lipsum</p> <p>Con frases de \"La hora Chanante\"</p> <p>Con frases de Hodor, de Juego de Tronos</p> <p>Con frases de Chiquito de la Calzada</p> Ejercicio <p>Realiza una p\u00e1gina web que use las siguientes etiquetas: html, head, meta, title, body, p, div y span.</p> <p>Adem\u00e1s deben usarse comentarios y el texto mostrado debe corresponder a p\u00e1rrafos del lorem ipsum.</p>"},{"location":"tema_1/page_2/","title":"2 Introducci\u00f3n al css","text":""},{"location":"tema_1/page_2/#que-es-css","title":"\u00bfQu\u00e9 es CSS?","text":"<p>Originalmente, las p\u00e1ginas HTML s\u00f3lo inclu\u00edan informaci\u00f3n sobre sus contenidos de texto e im\u00e1genes. Con el desarrollo del est\u00e1ndar HTML, las p\u00e1ginas empezaron a incluir tambi\u00e9n informaci\u00f3n sobre el aspecto de sus contenidos: tipos de letra, colores y m\u00e1rgenes.</p> <p>La posterior aparici\u00f3n de tecnolog\u00edas como JavaScript, provocaron que las p\u00e1ginas HTML tambi\u00e9n incluyeran el c\u00f3digo de las aplicaciones (llamadas scripts) que se utilizan para crear p\u00e1ginas web din\u00e1micas.</p> <p>Incluir en una misma p\u00e1gina HTML los contenidos, el dise\u00f1o y la programaci\u00f3n complica en exceso su mantenimiento. Normalmente, los contenidos y el dise\u00f1o de la p\u00e1gina web son responsabilidad de diferentes personas, por lo que es conveniente separarlos.</p> <p>CSS es el mecanismo que permite separar los contenidos definidos mediante HTML y el aspecto que deben presentar esos contenidos:</p> <p> Figura 1 - Separaci\u00f3n de contenidos</p> <p>Separar la definici\u00f3n de los contenidos y la definici\u00f3n de su aspecto presenta numerosas ventajas, ya que obliga a crear documentos HTML/XHTML bien definidos y con significado completo (tambi\u00e9n llamados \"documentos sem\u00e1nticos\"). Adem\u00e1s, mejora la accesibilidad del documento, reduce la complejidad de su mantenimiento y permite visualizar el mismo documento en infinidad de dispositivos diferentes. Una ventaja a\u00f1adida de la separaci\u00f3n de los contenidos y su presentaci\u00f3n es que los documentos HTML creados son m\u00e1s flexibles, ya que se adaptan mejor a las diferentes plataformas: pantallas de ordenador, pantallas de dispositivos m\u00f3viles, impresoras y dispositivos utilizados por personas discapacitadas.</p> <p>CSS es un lenguaje de hojas de estilos creado para controlar el aspecto o presentaci\u00f3n de los documentos electr\u00f3nicos definidos con HTML y XHTML. CSS es la mejor forma de separar los contenidos y su presentaci\u00f3n y es imprescindible para crear p\u00e1ginas web complejas.</p> <p>Al crear una p\u00e1gina web, se utiliza en primer lugar el lenguaje HTML/XHTML para marcar los contenidos, es decir, para designar la funci\u00f3n de cada elemento dentro de la p\u00e1gina: p\u00e1rrafo, titular, texto destacado, tabla, lista de elementos, etc.</p> <p>Una vez creados los contenidos, se utiliza el lenguaje CSS para definir el aspecto de cada elemento: color, tama\u00f1o y tipo de letra del texto, separaci\u00f3n horizontal y vertical entre elementos, posici\u00f3n de cada elemento dentro de la p\u00e1gina, etc.</p>"},{"location":"tema_1/page_2/#historia-de-css","title":"Historia de CSS","text":"<p>Entre finales de 1994 y 1995 H\u00e5kon Wium Lie y Bert Bos se unieron para definir un nuevo lenguaje para hojas de estilos al que llamaron CSS (Cascading Style Sheets).</p> <p>En 1995, el W3C decidi\u00f3 apostar por el desarrollo y estandarizaci\u00f3n de CSS y lo a\u00f1adi\u00f3 a su grupo de trabajo de HTML.</p> <p>A finales de 1996, el W3C public\u00f3 la primera recomendaci\u00f3n oficial, conocida como \"CSS nivel 1\".</p> <p>El 12 de Mayo de 1998, el grupo de trabajo de CSS publica su segunda recomendaci\u00f3n oficial, conocida como \"CSS nivel 2\".</p> <p>El 7 de junio de 2011 se aprueba como recomendaci\u00f3n oficial CSS 2.1.</p> <p>Los trabajos en el CSS3, comenzaron a la vez que se public\u00f3 la recomendaci\u00f3n oficial de CSS2, y los primeros borradores de CSS3 fueron liberados en junio de 1999. CSS3 est\u00e1 dividida en varios documentos separados, llamados \"m\u00f3dulos\". Cada m\u00f3dulo a\u00f1ade nuevas funcionalidades a las definidas en CSS2, de manera que se preservan las anteriores para mantener la compatibilidad.</p> <p>Debido a la modularizaci\u00f3n del CSS3, diferentes m\u00f3dulos pueden encontrarse en diferentes estados de su desarrollo, habiendo alrededor de cincuenta m\u00f3dulos publicados. Algunos de ellos est\u00e1n en el estado de recomendaciones oficiales, otros en el estado de \"candidatos\", y debemos considerados como razonablemente estables. Otros est\u00e1n a\u00fan en estado de borrador..</p> <p>CSS est\u00e1 en continuo desarrollo, subdividido en distintos m\u00f3dulos que avanzan en paralelo, a diferente velocidad, por lo que en el futuro no existir\u00e1 una \u00fanica especificaci\u00f3n CSS4.</p> <p>Info</p> <p>En el siguiente enlace puede verse el estado actual de los distintos m\u00f3dulos:</p> <p>Estado actual de CSS</p>"},{"location":"tema_1/page_2/#como-incluir-css-en-un-documento-html","title":"Como incluir CSS en un documento HTML","text":""},{"location":"tema_1/page_2/#incluir-css-en-el-mismo-documento-html","title":"Incluir CSS en el mismo documento HTML","text":"<p>Los estilos se definen en una zona espec\u00edfica del propio documento HTML. Se emplea la etiqueta <code>&lt;style&gt;</code> de HTML, que se incluye dentro de la etiqueta <code>&lt;head&gt;</code>. Por ejemplo:</p> <p> See the Pen    CSS &lt;style&gt; by irubenboy (@irubenboy)   on CodePen. </p> <p>Este m\u00e9todo se emplea cuando se define un n\u00famero peque\u00f1o de estilos o cuando se quieren incluir estilos espec\u00edficos en una determinada p\u00e1gina HTML que completen los estilos que se incluyen por defecto en todas las p\u00e1ginas del sitio web. El principal inconveniente es que si se quiere hacer una modificaci\u00f3n en los estilos definidos, es necesario modificar todas las p\u00e1ginas que incluyen el estilo que se va a modificar.</p>"},{"location":"tema_1/page_2/#definir-css-en-un-archivo-externo","title":"Definir CSS en un archivo externo","text":"<p>En este caso, todos los estilos CSS se incluyen en un archivo de tipo CSS que las p\u00e1ginas HTML enlazan mediante la etiqueta <code>&lt;link&gt;</code>. Un archivo de tipo CSS no es m\u00e1s que un archivo simple de texto cuya extensi\u00f3n es <code>.css</code>. Por ejemplo podemos crear un archivo <code>index.html</code> que enlace com un archivo <code>style.css</code>:</p> <p> See the Pen    CSS external file by irubenboy (@irubenboy)   on CodePen. </p> <p>Se pueden crear todos los archivos CSS que sean necesarios y cada p\u00e1gina HTML puede enlazar tantos archivos CSS como necesite.</p> <p>Cuando el navegador carga la p\u00e1gina HTML anterior, antes de mostrar sus contenidos tambi\u00e9n descarga los archivos CSS externos enlazados mediante la etiqueta <code>&lt;link&gt;</code> y aplica los estilos a los contenidos de la p\u00e1gina.</p> <p>Normalmente, la etiqueta  incluye los siguientes atributos cuando enlaza un archivo CSS:</p> <ul> <li><code>rel</code>: indica el tipo de relaci\u00f3n que existe entre el recurso enlazado (en este caso, el archivo CSS) y la p\u00e1gina HTML. Para los archivos CSS, siempre se utiliza el valor <code>stylesheet</code></li> <li><code>href</code>: indica la URL del archivo CSS que contiene los estilos. La URL indicada puede ser relativa o absoluta y puede apuntar a un recurso interno o externo al sitio web.</li> <li><code>media</code>: indica el medio en el que se van a aplicar los estilos del archivo CSS, por ejemplo pantalla o impresora. Lo veremos m\u00e1s adelante.</li> </ul> <p>De todas las formas de incluir CSS en las p\u00e1ginas HTML, \u00e9sta es la m\u00e1s utilizada con mucha diferencia. La principal ventaja es que se puede incluir un mismo archivo CSS en multitud de p\u00e1ginas HTML, por lo que se garantiza la aplicaci\u00f3n homog\u00e9nea de los mismos estilos a todas las p\u00e1ginas que forman un sitio web. Con este m\u00e9todo, el mantenimiento del sitio web se simplifica al m\u00e1ximo, ya que un solo cambio en un solo archivo CSS permite variar de forma instant\u00e1nea los estilos de todas las p\u00e1ginas HTML que enlazan ese archivo.</p>"},{"location":"tema_1/page_2/#incluir-css-en-los-elementos-html","title":"Incluir CSS en los elementos HTML","text":"<p>El \u00faltimo m\u00e9todo para incluir estilos CSS en documentos HTML es el peor y el menos utilizado.Consiste en incluir el contenido CSS como valor del atributo <code>style</code> de una determinada etiqueta. Por ejemplo:</p> <p> See the Pen    CSS inline by irubenboy (@irubenboy)   on CodePen. </p> <p>Esta forma de incluir CSS directamente en los elementos HTML solamente se utiliza en determinadas situaciones en las que se debe incluir un estilo muy espec\u00edfico para un solo elemento concreto.</p>"},{"location":"tema_1/page_2/#estilos-css","title":"Estilos CSS","text":"<p>CSS define una serie de t\u00e9rminos que permiten describir cada una de las partes que componen los estilos CSS. El siguiente esquema muestra las partes que forman un estilo CSS muy b\u00e1sico:</p> <p> Figura 2 - Estilos CSS</p> <p>Los diferentes t\u00e9rminos se definen a continuaci\u00f3n:</p> <ul> <li>Regla: cada uno de los estilos que componen una hoja de estilos CSS. Cada regla est\u00e1 compuesta de una parte de selectores, un s\u00edmbolo de llave de apertura (<code>{</code>), otra parte denominada declaraci\u00f3n y por \u00faltimo, un s\u00edmbolo de llave de cierre (<code>}</code>).</li> <li>Selector: indica el elemento o elementos HTML a los que se aplica la regla CSS.</li> <li>Declaraci\u00f3n: especifica los estilos que se aplican a los elementos. Est\u00e1 compuesta por una o m\u00e1s propiedades CSS.</li> <li>Propiedad: caracter\u00edstica que se modifica en el elemento seleccionado, como por ejemplo su tama\u00f1o de letra, su color de fondo, etc.</li> <li>Valor: establece el nuevo valor de la caracter\u00edstica modificada en el elemento.</li> </ul> <p>Un archivo CSS puede contener un n\u00famero ilimitado de reglas CSS, cada regla se puede aplicar a varios selectores diferentes y cada declaraci\u00f3n puede incluir tantos pares propiedad/valor como se desee.</p>"},{"location":"tema_1/page_2/#herencia-de-estilos","title":"Herencia de estilos","text":"<p>Una de las caracter\u00edsticas principales de CSS es la herencia autom\u00e1tica de propiedades desde elementos padres a elementos hijos, de manera que cuando se establece un valor para una propiedad en un elemento, sus elementos descendientes heredan de forma autom\u00e1tica el valor de esa propiedad. Veamos un ejemplo.</p> HTMLCSS <pre><code>&lt;body&gt;\n    Yo soy un texto\n    &lt;p&gt;Yo soy un p\u00e1rrafo&lt;/p&gt;\n&lt;/body&gt;\n</code></pre> <pre><code>body{\ncolor: blue; /* Color de texto azul */\nborder: 2px solid green;\n}\n</code></pre> <p>s\u00f3lo al texto contenido directamente dentro de dicha etiqueta <code>&lt;body&gt;</code>, es decir Yo soy texto deber\u00eda mostrarse de color azul. Sin embargo, el texto de la etiqueta <code>&lt;p&gt;</code>, es decir, Yo soy un p\u00e1rrafo tambi\u00e9n se muestra en azul. El motivo es que la propiedad color es una de las propiedades CSS que hereda autom\u00e1ticamente de padres a hijos.</p> <p>Debemos tener en cuenta que s\u00f3lo algunas propiedades son heredadas autom\u00e1ticamente. En general, son heredadas autom\u00e1ticamente las propiedades relacionadas con el texto, las listas y las tablas.</p> <p>Hay otras propiedades en las que no tiene sentido esta herencia autom\u00e1tica. Por ejemplo, si aplicamos un borde a un elemento, no tiene sentido que todas sus elementos descendientes muestren tambi\u00e9n el mismo borde. Este es el caso del ejemplo anterior, donde el p\u00e1rrafo NO se muestra con borde, porque la propiedad <code>border</code> NO ha sido heredada autom\u00e1ticamente.</p> <p>Otro aspecto importante es que aunque la herencia de estilos se aplica autom\u00e1ticamente, se puede anular su efecto estableciendo de forma expl\u00edcita en el elemento hijo otro valor para la propiedad que se hereda. Por ejemplo, si al siguiente c\u00f3digo HTML</p> HTMLCSS <pre><code>&lt;body&gt;\n    Yo soy un texto\n    &lt;p&gt;Yo soy un p\u00e1rrafo&lt;/p&gt;\n&lt;/body&gt;\n</code></pre> <pre><code>body{\ncolor: blue; /* Color de texto azul */\n}\np{\ncolor: red;\n}\n</code></pre> <p>El texto Yo soy texto se ver\u00e1 de color azul y el texto Yo soy un p\u00e1rrafo se mostrar\u00e1 de color rojo. El motivo es que aunque el p\u00e1rrafo ha heredado el valor de la propiedad color desde su padre, luego se ha sobrescrito estableci\u00e9ndolo a rojo.</p> <p>Por otro lado, CSS incluye un mecanismo para modificar el comportamiento preestablecido de la herencia, mediante la asignaci\u00f3n de un valor especial a dicha propiedad en el elemento hijo. Veamos dichos valores:</p> <ul> <li><code>inherit</code>: Fuerza a que el elemento herede el valor de la propiedad del elemento padre, incluso aunque se trate de una propiedad no heredable por defecto.</li> <li><code>initial</code>: Establece el valor por defecto de la propiedad, incluso aunque haya sido heredado desde el padre.</li> <li><code>unset</code>: Combinaci\u00f3n de las dos anteriores. Hereda el valor de la propiedad del elemento padre, y en caso de no se haya especificado un valor para dicha propiedad en el elemento padre, se asignar\u00e1 al elemento hijo el valor por defecto de la propiedad.</li> </ul>"},{"location":"tema_1/page_2/#comentarios-css","title":"Comentarios CSS","text":"<p>Igualmente, CSS permite incluir comentarios dentro de su c\u00f3digo, con la siguiente sintaxis:</p> <pre><code>/* Esto es un comentario */\np {\ncolor: blue;\n}\n</code></pre> <p>Los comentarios de CSS pueden ocupar tantas l\u00edneas como sea necesario.</p> Ejercicio <p>Realiza una p\u00e1gina web que muestre el nombre de tu equipo de f\u00fatbol favorito y su plantilla de jugadores, organizados por su posici\u00f3n en el campo (porteros, defensas, .etc.). Para el nombre del equipo utiliza la etiqueta h1, que deber\u00e1n aparecer con el color de fondo en rojo y el color de texto en blanco. Para las posiciones de juego usa la etiqueta h2, que deber\u00e1n aparecer con el color de fondo en azul y el color de texto en blanco. Para cada jugador la etiqueta p. Crea un fichero style.css donde incluyas las reglas CSS necesarias y vinculalo a tu archivo index.html</p> <p>Hazte las siguientes preguntas:</p> <ol> <li>\u00bfPor qu\u00e9 el nombre de cada jugador aparece debajo del anterior y no a su lado?</li> <li>\u00bfPor qu\u00e9 el nombre de cada jugador no aparece pegado justo debajo del anterior?</li> <li>\u00bfPor qu\u00e9 existe una separaci\u00f3n vertical entre el nombre del equipo y la primera posici\u00f3n (porteros)?</li> <li>\u00bfPor qu\u00e9 el color del texto del nombre de los jugadores es negro?</li> <li>\u00bfPor qu\u00e9 el color del texto del nombre de los jugadores es blanco?</li> </ol> <p>Algunas mejoras que deber\u00edamos a\u00f1adir a nuestra web:</p> <ol> <li>Que el nombre del equipo apareciera centrado horizontalmente</li> <li>Que el texto del nombre del equipo y el de las posiciones de juego no estuviera tan pegado al borde.</li> <li>Que hubiera un espacio de separaci\u00f3n m\u00e1s grande o m\u00e1s peque\u00f1o entre el nombre del equipo y la primera posici\u00f3n de juego</li> <li>Que el listado no ocupara todo el ancho de pantalla y tuviera el aspecto de una tarjeta</li> </ol>"},{"location":"tema_1/page_3/","title":"3 Unidades de medida CSS","text":""},{"location":"tema_1/page_3/#introduccion","title":"Introducci\u00f3n","text":"<p>Las medidas en CSS se emplean, entre otras, para definir la altura, anchura y m\u00e1rgenes de los elementos y para establecer el tama\u00f1o de letra del texto. Todas las medidas se indican como un valor num\u00e9rico entero o decimal seguido de una unidad de medida (sin ning\u00fan espacio en blanco entre el n\u00famero y la unidad de medida).</p> <p>CSS divide las unidades de medida en dos grupos: absolutas y relativas. Las medidas relativas definen su valor en relaci\u00f3n con otra medida, por lo que para obtener su valor real, se debe realizar alguna operaci\u00f3n con el valor indicado. Las unidades absolutas establecen de forma completa el valor de una medida, por lo que su valor real es directamente el valor indicado.</p> <p>Si el valor es 0, la unidad de medida es opcional. Si el valor es distinto a 0 y no se indica ninguna unidad, la medida se ignora completamente, lo que suele ser uno de los errores m\u00e1s habituales de los dise\u00f1adores que empiezan con CSS. Algunas propiedades permiten indicar medidas negativas, aunque habitualmente sus valores son positivos. Si el valor decimal de una medida es inferior a 1, se puede omitir el 0 de la izquierda (0.5em es equivalente a .5em).</p> <p>En general, se recomienda el uso de unidades relativas siempre que sea posible, ya que mejora la accesibilidad de la p\u00e1gina y permite que los documentos se adapten f\u00e1cilmente a cualquier medio y dispositivo.</p>"},{"location":"tema_1/page_3/#unidades-absolutas","title":"Unidades absolutas","text":"<p>Una medida indicada mediante unidades absolutas est\u00e1 completamente definida, ya que su valor no depende de otro valor de referencia. A continuaci\u00f3n se muestra la lista completa de unidades absolutas definidas por CSS y su significado:</p> <ul> <li><code>in</code>, pulgadas (inches). Una pulgada equivale a 2.54 cent\u00edmetros.</li> <li><code>cm</code>, cent\u00edmetros.</li> <li><code>mm</code>, mil\u00edmetros.</li> <li><code>pt</code>, puntos. Un punto equivale a 1 pulgada/72, es decir, unos 0.35 mil\u00edmetros.</li> <li><code>pc</code>, picas. Una pica equivale a 12 puntos, es decir, unos 4.23 mil\u00edmetros. A continuaci\u00f3n se muestran algunos ejemplos:</li> </ul> <pre><code>body { margin: 0.51 in; }\nh1 { line-height: 2cm; }\np { word-spacing: 4mm; }\na { font-size: 12pt; }\nspan { font-size: 1pc; }\n</code></pre> <p>La principal ventaja de las unidades absolutas es que su valor es directamente el valor que se debe utilizar, sin necesidad de realizar c\u00e1lculos intermedios. Su principal desventaja es que son muy poco flexibles y no se adaptan f\u00e1cilmente a los diferentes medios.</p> <p>De todas las unidades absolutas, la \u00fanica que suele utilizarse es el punto (<code>pt</code>). Se trata de la unidad de medida preferida para establecer el tama\u00f1o del texto en los documentos que se van a imprimir, es decir, para el medio print de CSS.</p>"},{"location":"tema_1/page_3/#unidades-relativas","title":"Unidades relativas","text":"<p>La unidades relativas, a diferencia de las absolutas, no est\u00e1n completamente definidas, ya que su valor siempre est\u00e1 referenciado respecto a otro valor. A pesar de su aparente dificultad, son las m\u00e1s utilizadas en el dise\u00f1o web por la flexibilidad con la que se adaptan a los diferentes medios.</p> <p>A continuaci\u00f3n se muestran las tres unidades de medida relativas definidas por CSS y la referencia que toma cada una para determinar su valor real:</p> <ul> <li><code>px</code> (p\u00edxeles): relativa respecto a la resoluci\u00f3n de la pantalla del dispositivo.</li> <li><code>ex</code>: relativa respecto a la altura de la letra x min\u00fascula en el tipo y tama\u00f1o de letra del elemento.</li> <li><code>em</code>: relativa respecto al tama\u00f1o de letra del elemento. Por ejemplo, si un div tiene un tama\u00f1o de fuente de 18px, 10em equivaldr\u00edan a 180px. Debemos tener en cuenta que el elemento puede haber heredado el tama\u00f1o de fuente de su elemento padre, que puede haberlo heredado a su vez de su elemento padre, y as\u00ed sucesivamente. Por tanto, es posible que los em especificados se vean afectados por por el tama\u00f1o de fuente de cualquiera de los elementos antepasados de dicho elemento. Por ejemplo, si se establece el tama\u00f1o de letra de un elemento a 1.25em, y \u00e9ste hab\u00eda heredado de su padre un tama\u00f1o de letra de 16px, entonces el tama\u00f1o final de letra con el que se mostrar\u00e1 ser\u00e1 16 x 1.25 = 20px.</li> <li><code>rem</code> (root em): relativa respecto al tama\u00f1o de letra del elemento ra\u00edz. El tama\u00f1o real en p\u00edxeles al que traducen a la hora de mostrar el elemento depende del tama\u00f1o de la fuente del elemento ra\u00edz de la p\u00e1gina, o sea el elemento <code>&lt;html&gt;</code>. Ese tama\u00f1o de fuente ra\u00edz es multiplicado por cualquier numero que est\u00e1 usando con tu unidad rem. Todos los navegadores por asignan por defecto al elemento ra\u00edz <code>&lt;html&gt;</code> un tama\u00f1o de letra de 16px. As\u00ed, con un tama\u00f1o fuente de elemento ra\u00edz de 16px, 10rem equivaldr\u00e1 a 160px.</li> <li>Relativas al viewport (ventana de visualizaci\u00f3n):<ul> <li><code>vw</code>: 1% del ancho del viewport</li> <li><code>vh</code>: 1% del alto del viewport</li> <li><code>vmin</code>: 1% del valor menor entre el ancho y el alto del viewport.</li> <li><code>vmax</code>: 1% del valor mayor entre el ancho y el alto del viewport.</li> </ul> </li> </ul> Ejercicio <p>Realiza una p\u00e1gina web que contenga 4 divs, donde cada uno de ellos muestra un nombre. Pon el color de fondo de cada uno de ellos distinto. Haz que los tres primeros tengan un tama\u00f1o de fuente de 2em y el \u00faltimo de ellos de 2rem. Adem\u00e1s establece el tama\u00f1o base de la p\u00e1gina web (etiqueta html) a 20px. Finalmente establece el tama\u00f1o del body a 30px</p> <p>Hazte las siguientes preguntas:</p> <ol> <li>\u00bfDe qu\u00e9 tama\u00f1o se muestran los tres primeros divs y por qu\u00e9?</li> <li>\u00bfDe qu\u00e9 tama\u00f1o se muestra el \u00faltimo div y por qu\u00e9?</li> </ol> Ejercicio <p>Realiza el ejercicio anterior pero haciendo que el segundo div sea hijo del primero, el tercero del segundo y el cuarto del tercero. Aplica los mismos estilos CSS del ejercicio anterior.</p> <p>Hazte las siguientes preguntas:</p> <ol> <li>\u00bfDe qu\u00e9 tama\u00f1o se muestran los tres primeros divs y por qu\u00e9?</li> <li>\u00bfDe qu\u00e9 tama\u00f1o se muestra el \u00faltimo div y por qu\u00e9?</li> </ol> Ejercicio <p>Realiza una p\u00e1gina web que contenga 2 divs, donde cada uno de ellos muestra un nombre. Pon el color de fondo de cada uno de ellos distinto. Haz que cada div tenga la misma altura del viewport</p> <p>\u00bfQu\u00e9 efecto produce en la p\u00e1gina web y por qu\u00e9?</p>"},{"location":"tema_1/page_3/#porcentajes","title":"Porcentajes","text":"<p>El porcentaje tambi\u00e9n es una unidad de medida relativa, aunque por su importancia CSS la trata de forma separada al resto. Un porcentaje est\u00e1 formado por un valor num\u00e9rico seguido del s\u00edmbolo <code>%</code> y siempre est\u00e1 referenciado a otra medida. Cada una de las propiedades de CSS que permiten indicar como valor un porcentaje, define el valor al que hace referencia ese porcentaje.</p> <p>Los porcentajes se pueden utilizar por ejemplo para establecer el valor del tama\u00f1o de letra de los elementos:</p> <pre><code>/* Tama\u00f1o de letra el doble de grande del tama\u00f1o heredado del padre */\nh1 {\nfont-size: 200%;\n}\n/* Tama\u00f1o de letra 1.5 veces el tama\u00f1o de letra heredado del padre */\nh2 {\nfont-size: 150%;\n}\n</code></pre> Ejercicio <p>Realiza una web que muestre un div padre que dentro contiene dos divs hijos. Haz que todos los divs tengan un color de fondo distinto. El div padre ocupa el 50% de ancho del body. El primer div hijo debe ocupar el 75% del ancho del div padre y el segundo div hijo el 75% del ancho del viewport.</p> <p>Info</p> <p>Tenemos disponibles una serie de conversores online entre distintas unidades:</p> <p>http://simplecss.eu/pxtoems.html</p> <p>http://emilolsson.com/tools/vw-unit-calc-an-online-responsive-css-font-size-calculator/</p>"},{"location":"tema_1/page_3/#calc","title":"calc()","text":"<p>Algunas veces necesitamos realizar determinados c\u00e1lculos matem\u00e1ticos para asignar un valor a una propiedad CSS, incluso usando medidas relativas como porcentajes. Por ejemplo, supongamos que queremos repartir proporcionalmente la anchura de una caja padre entre sus cajas hijas, por lo que deber\u00eda dividir el 100% de padre entre el n\u00famero de cajas hijas.</p> <p>Para poder realizar este tipo de operaciones CSS 3 proporciona la funci\u00f3n <code>calc()</code>, que permite realizar c\u00e1lculos con medidas, como sumas, restas, multiplicaciones y divisiones, mezclando porcentajes, p\u00edxeles o cualquier unidad.</p> <p>Veamos un ejemplo. Queremos hacer que las tres cajas hijas se repartan la anchura del padre y dejen entre ellas un margen izquierdo y derecho de 15px. Establecer\u00edamos para las cajas hijas la siguiente regla:</p> <pre><code>.hija{\nwidth: calc((100% / 3) - 30px)\n}\n</code></pre> <p>La gran ventaja de la funci\u00f3n <code>calc()</code> es que nos permite mezclar distintos tipos de unidades para realizar c\u00e1lculos complejos. Veamos algunos ejemplos:</p> <pre><code>div {\nfont-size: calc(3em + 5px);\npadding: calc(1vmax + -1vmin);\ntransform: rotate(calc(1turn - 32deg));\nbackground: hsl(180, calc(2*25%), 65%);\nline-height: calc(8/3);\nwidth: calc(23vmin - 2*3rem);\n}\n</code></pre>"},{"location":"tema_1/page_3/#colores-en-css","title":"Colores en CSS","text":"<p>Los colores en CSS se pueden indicar de distintas formas diferentes:</p> <ul> <li> <p>Palabras clave: CSS define una serie de palabras clave para referirse a los colores principales. Por ejemplo:</p> <pre><code>p { color: black;\n}\n</code></pre> </li> <li> <p>La variable <code>currentColor</code>, que hace referencia al color actual del elemento, ya sea porque haya sido establecido expl\u00edcitamente o porque haya sido heredado de su padre.</p> <pre><code>p{\ncolor: currentColor\n}\n</code></pre> </li> <li> <p>RGB decimal: Se indica el color en relaci\u00f3n a la cantidad de rojo (R), verde (G) y azul (B) de la que est\u00e1 compuesto el color. Cada componente se expresa con un valor entre 0 y 255. Por ejemplo:</p> <pre><code>p{\ncolor: rgb(71, 98, 176);\n}\n</code></pre> </li> <li> <p>RGB porcentual: Similar al anterior, pero la cantidad de cada componente se indica en porcentaje de mezcla. Por ejemplo:</p> <pre><code>p {\ncolor: rgb(27%, 38%, 69%);\n}\n</code></pre> </li> <li> <p>RGB hexadecimal: Se usa el car\u00e1cter <code>#</code> seguido de dos d\u00edgitos hexadecimales por cada componente para especificar la cantidad correspondiente. Por ejemplo:</p> <pre><code>p { color: #B1251E;\n}\n</code></pre> <p>Si los dos d\u00edgitos de cada componente son similares, se puedo usar el formato comprimido, donde se usa un \u00fanico car\u00e1cter hexadecimal por cada componente. Por ejemplo:</p> <pre><code>/* Similar a #336699 */\np {\ncolor: #369;\n}\n</code></pre> </li> <li> <p>RGB + canal alpha: Se indica la cantidad cada componente con valores entre 0 y 255, y el nivel de opacidad con un valor decimal entre 0.0 y 1.0. Por ejemplo:</p> <pre><code>p{\ncolor: rgba(255, 0, 0, 0.3);\n}\n</code></pre> </li> <li> <p>HSL: Se indica la tonalidad (hue) con un valor entre 0 y 255, la saturaci\u00f3n (saturation) con un valor porcentual y la luminosidad (luminosity) con un valor porcentual. Por ejemplo:</p> <pre><code>p{\ncolor: hsl(120, 60%, 70%);\n}\n</code></pre> </li> <li> <p>HSL + canal alpha: Se indica la tonalidad (hue) con un valor entre 0 y 255, la saturaci\u00f3n (saturation) con un valor porcentual, la luminosidad (luminosity) con un valor porcentual y el nivel de opacidad con un valor decimal entre 0.0 y 1.0. Por ejemplo:</p> <pre><code>p{\ncolor: hsla(120, 60%, 70%, 0.3);\n}\n</code></pre> </li> </ul> <p>Podemos usar las funciones <code>rgba</code> o <code>hsla</code> para que el color de algo sea un determinado tanto por ciento m\u00e1s claro o m\u00e1s oscuro que su fondo. Para aclarar usaremos la funci\u00f3n <code>rgba</code> con el color blanco y como nivel de opacidad el porcentaje que queremos que se aclare el color respecto al fondo, y para oscurece usaremos de forma similar el color negro. Por ejemplo <code>rgba(255, 255, 255, .1)</code> establecer\u00e1 un color un 10% m\u00e1s claro respecto al color <code>del fondo, mientras que</code>rgba(0, 0, 0, .1) establecer\u00e1 un color un 10% m\u00e1s oscuro respecto al color del fondo. Por ejemplo:</p> <p> See the Pen    CSS colors by irubenboy (@irubenboy)   on CodePen. </p> <p>Normalmente cuando de dise\u00f1a una web se usa una paleta de colores, que contiene la lista de colores que usar\u00e1n los distintos elementos. Para crear dicha paleta hay varios esquemas de selecci\u00f3n de colores manteniendo cierta harmon\u00eda. Para crear la paleta de colores se recomienda visitar la web http://paletton.com/ que nos va a permitir elegir entre distintos esquemas de selecci\u00f3n harm\u00f3nica de colores.</p>"},{"location":"tema_1/page_4/","title":"4 Variable CSS","text":""},{"location":"tema_1/page_4/#introduccion","title":"Introducci\u00f3n","text":"<p>Cuando se dise\u00f1a un sitio o aplicaci\u00f3n web es habitual reutilizar una serie de valores, por ejemplo colores, para dar consistencia al dise\u00f1o. El problema es que repetir los mismos valores una y otra vez no solo es tedioso sino adem\u00e1s propenso a cometer errores.</p> <p>Desde hace tiempo muchos dise\u00f1adores usan pre-procesadores CSS, como por ejemplo Sass, que nos facilitan mucho el trabajo a la hora de generar nuestros archivos CSS. Normalmente en los archivos fuentes que se crean con estos pre-procesadores se definen variables para guardar estos valores, y son usadas posteriormente en distintas reglas del CSS. Finalmente, cuando el pre-procesador genera el archivo CSS resultante, el nombre de la variable es sustituido por su valor, de manera que el resultado es CSS puro.</p> <p>Sin embargo, las variables definidas mediante pre-procesadores tienen una una limitaci\u00f3n muy importante: no se pueden modificar en tiempo real, ya que \"desaparecen\" cuando se genera el CSS final. Como consecuencia, dichas variables NO existen para el navegador, por lo que no se pueden modificar en tiempo de ejecuci\u00f3n mediante JavaScript.</p> <p>Para paliar este inconveniente, CSS nos permite definir las conocidas como \"propiedades CSS no est\u00e1ndar\", que no dejan de ser variables que pueden incluidas y usadas en nuestros archivos CSS est\u00e1ndar. Al tratarse de variables CSS puras, pueden ser modificadas en tiempo de ejecuci\u00f3n en nuestro navegador mediante JavaScript. Por ejemplo, si definimos los colores de nuestra p\u00e1gina web en forma de variables CSS, desde el navegador ser\u00edamos capaces de modificarlos mediante JavaScript, de manera que nuestra web podr\u00eda lucir distinto atendiendo a valores seleccionados por el usuario.</p>"},{"location":"tema_1/page_4/#definicion-de-variables-css","title":"Definici\u00f3n de variables CSS","text":"<p>Debemos tener en cuenta que una variable CSS en realidad es una propiedad no est\u00e1ndar, es decir, que estamos definiendo una propiedad con un nombre inventado a los elementos de nuestro HTML al que se le aplique la regla en la que se est\u00e1 definiendo la variable.</p> <p>Aunque podemos definir una variable CSS dentro de cualquier regla, se suele hacer en una regla cuyo selector sea <code>:root</code>, que corresponde al elemento ra\u00edz de nuestro HTML. El motivo es que las variables CSS son propiedades que son heredadas de padres a hijos, por lo que al definirlas en el elemento ra\u00edz ser\u00e1n heredadas por todos los elemento del HTML y por tanto podr\u00e1n ser usadas en cualquier regla del archivo CSS.</p> <p>Veamos un ejemplo:</p> <pre><code>:root {\n/* Definimos una variable llamada color-principal */\n--color-principal: #06c;\n}\n</code></pre> <p>Algunos aspectos que debemos tener en cuenta respecto a la definici\u00f3n de variables CSS:</p> <ul> <li>No dejan de ser como cualquier otra propiedad CSS, pero con un nombre no est\u00e1ndar.</li> <li> <p>Se heredan por defecto, aunque podemos cambiar este comportamiento definiendo la regla:</p> <pre><code>:root { --color-principal: blue;\n}\n# alert {\n--color-principal: red;\n}\n</code></pre> </li> <li> <p>El espacio en blanco es un valor v\u00e1lido para una variable CSS. Por ejemplo <code>--foo: ;</code> es v\u00e1lido.</p> </li> <li>Son case-sensitive, es decir, se distinguen entre may\u00fasculas y min\u00fasculas en su identificador.</li> <li> <p>Se pueden combinar las variables CSS con las media queries en tus dise\u00f1os \"responsive\". Por ejemplo:</p> <p>```css :root {   --separacion: 4px; }</p> <p>@media (min-width: 600px) {   :root {     --separacion: 16px;   } } ```</p> </li> <li> <p>El valor de la variable puede contener unidad o no, por ejemplo <code>--variable: 10</code> o <code>--variable: 10px</code></p> </li> </ul>"},{"location":"tema_1/page_4/#uso-de-la-variable-css","title":"Uso de la variable CSS","text":"<p>Para usar el valor de una variable CSS en una regla CSS usaremos la funci\u00f3n <code>var()</code>. Esta funci\u00f3n obtiene el valor de la propiedad indicada y su sintaxis completa es la siguiente:var(<code>&lt;nombre-propiedad&gt; [, &lt;valor-por-defecto&gt; ]?</code>).</p> <p>El primer argumento (<code>&lt;nombre-propiedad&gt;</code>) es el nombre completo de la propiedad cuyo valor se quiere obtener. El segundo argumento (<code>&lt;valor-por-defecto&gt;</code>) es opcional y es el valor que debe retornar la funci\u00f3n cuando la propiedad no existe. Veamos un ejemplo:</p> <pre><code>:root {\n--color-principal: #06c;\n}\n\u200b\n#foo h1 {\ncolor: var(--color-principal);\n}\n</code></pre> <p>El valor por defecto puede ser en realidad una lista de varios valores separados por comas. Por ejemplo, si utilizas <code>var(--font-stack, \"Roboto\", \"Helvetica\");</code> y la propiedad <code>--font-stack</code> no existe, el valor devuelto ser\u00e1 \"Roboto\", \"Helvetica\" todo junto.</p> <p>Cuidado con los atajos en las propiedades CSS como <code>margin</code> y <code>padding</code>. En este caso, como sus valores no est\u00e1n separados por comas, el valor por defecto tampoco debe contener comas. por ejemplo: <code>padding: var(--separacion, 10px 15px 20px);</code>.</p> <p>Aspectos a tener en cuenta:</p> <ul> <li>El resultado de <code>var()</code> NO se puede usar como nombre de una propiedad CSS. Por ejemplo: <code>var(--lado): 20px;</code> NO es v\u00e1lido.</li> <li>NO deben usarse variables dentro de la funci\u00f3n <code>url()</code></li> <li>Se pueden anidar <code>var()</code> como segundo par\u00e1metro de un <code>var()</code>. Ojo, esto NO funciona si el navegador no soporta las variables.</li> <li>Si el valor de la variable no es v\u00e1lido en el contexto en el que se usa, la propiedad no ser\u00e1 aplicada.</li> <li>No se puede definir una variable haciendo uso del valor de la propia variable (ciclo). Por ejemplo <code>--vari: calc(var(--vari) + 2px);</code> NO es v\u00e1lido. El resultado es como si no se hubiera definido la variable.</li> <li> <p>Para navegadores que no soporten variables se recomienda definir la propiedad normalmente con un valor literal y despu\u00e9s sobrescribir la propiedad usando variable. Por ejemplo:</p> <pre><code>:root {\n--color-principal: #06c;\n}\n# foo h1 {\ncolor: red;\ncolor: var(--color-principal);\n}\n</code></pre> </li> <li> <p>Si el valor de la variable no contiene unidad, NO podemos simplemente tratar de concatenar. Por ejemplo <code>var(--variable)px</code> NO es v\u00e1lido. Para conseguir el valor en px tendremos que usar la funci\u00f3n <code>calc()</code> de la siguiente manera: <code>calc(var(--variable) * 1px)</code>, que s\u00ed es v\u00e1lida. De hecho, se recomienda definirlas sin unidad, ya siempre podremos convertirlas a la unidad deseada mediante la funci\u00f3n <code>calc()</code>. Sin embargo, la conversi\u00f3n al contrario NO es posible, es decir no podemos quitarle la unidad a una variable y quedarnos s\u00f3lo con la magnitud, ya que la funci\u00f3n <code>calc()</code> no permite dividir entre valores con unidades.</p> </li> <li>Animar directamente el valor de una variable NO funciona.</li> </ul>"},{"location":"tema_1/page_5/","title":"5 Elementos sem\u00e1nticos de HTML5","text":""},{"location":"tema_1/page_5/#introduccion","title":"Introducci\u00f3n","text":"<p>Las etiquetas sem\u00e1nticas ayudan a definir la estructura del documento y permiten que las p\u00e1ginas web sean mejor indexadas por los buscadores. Una etiqueta se califica como sem\u00e1ntica si tiene que ver el significado, es decir, si nos informa sobre lo que trata su contenido. Por ejemplo, la etiqueta <code>&lt;img&gt;</code> indica que su contenido ser\u00e1 una imagen.</p> <p>Antes de HTML 5, el contenido de la p\u00e1gina web se estructuraba con etiquetas <code>&lt;div&gt;</code>, que desgraciadamente no aportan ninguna informaci\u00f3n sobre el contenido que albergan, salvo quiz\u00e1s por el significado de los valores asignados al atributo id o al atributo class, que podr\u00eda proporcionarnos alguna clave sobre cu\u00e1l era el contenido de dicha etiqueta <code>&lt;div&gt;</code>.</p> <p>Para solucionar este problema, HTML 5 introdujo una serie de etiquetas sem\u00e1nticas, que permiten determinar la naturaleza del contenido de las mismas. Por ejemplo, la etiqueta <code>&lt;section&gt;</code> nos hace pensar que su contenido corresponde a una secci\u00f3n o cap\u00edtulo dentro de la p\u00e1gina. Otros ejemplos de etiquetas sem\u00e1nticas son <code>&lt;article&gt;</code> <code>&lt;header&gt;</code>, <code>&lt;nav&gt;</code> o <code>&lt;footer&gt;</code>, que veremos a continuaci\u00f3n.</p> <p>Aunque el uso de estas etiquetas sem\u00e1nticas es bastante simple e intuitivo, debemos tener en cuenta que se pueden usar de distintas formas, como veremos a continuaci\u00f3n, atendiendo al significado que queremos que comuniquen. Realmente no existen normas fijas, cada dise\u00f1ador puede darles el uso que considere m\u00e1s apropiado, siempre respetando el sentido com\u00fan, ya que los buscadores utilizar\u00e1n estas etiquetas para indexar la p\u00e1gina.</p> <p>Es importante aclarar que las etiquetas sem\u00e1nticas no a\u00f1aden de por s\u00ed ning\u00fan formato espec\u00edfico. Es decir, por usar <code>&lt;nav&gt;</code> no se crea un men\u00fa, ni el <code>&lt;header&gt;</code> tiene por defecto un tama\u00f1o de letra m\u00e1s grande. El formato debemos definirlo nosotros de la forma habitual, con CSS. El \u00fanico formato inicial que debemos tener en cuenta es que los navegadores incorporan la propiedad <code>display: block</code> a las etiquetas sem\u00e1nticas, por lo que inicialmente corresponden a elementos de bloque.</p>"},{"location":"tema_1/page_5/#estructurales","title":"Estructurales","text":"<p>Las etiquetas sem\u00e1nticas estructurales son las que definen la estructura general del sitio. Son las siguientes:</p> <ul> <li> <p><code>&lt;section&gt;</code>: Representa una secci\u00f3n, es decir una agrupaci\u00f3n de contenido con un tema com\u00fan, por ejemplo, las diferentes partes de un peri\u00f3dico: pol\u00edtica, sociedad, deportes, etc. Dentro de cada etiqueta <code>&lt;section&gt;</code> se suelen incluir etiquetas <code>&lt;article&gt;</code>, para representar los art\u00edculos de dicha secci\u00f3n. Cada secci\u00f3n suele estar encabezada por una etiqueta <code>&lt;h2&gt;</code> o <code>&lt;h3&gt;</code>. Por ejemplo:</p> <pre><code>&lt;section&gt;\n&lt;h2&gt;T\u00edtulo de la secci\u00f3n&lt;/h2&gt;\n&lt;article&gt;Un art\u00edculo de la secci\u00f3n&lt;/article&gt;\n&lt;article&gt;Otro art\u00edculo de la secci\u00f3n&lt;/article&gt;\n&lt;/section&gt;\n</code></pre> </li> <li> <p><code>&lt;article&gt;</code>: Representa una unidad de contenido, es decir, contenido que responde a un tema concreto, que por ejemplo pueda ser a\u00f1adido a un servicio de sindicaci\u00f3n de contenidos sin afectar a su entendimiento. Por ejemplo un art\u00edculo dentro de una revista, una receta en una p\u00e1gina de cocina, un post en un foro, etc. Aunque no es habitual, se pueden anidar un <code>&lt;article&gt;</code> dentro de otro <code>&lt;article&gt;</code>. Tambi\u00e9n est\u00e1 permitido poner dentro de un <code>&lt;article&gt;</code> una <code>&lt;section&gt;</code>, siempre que el art\u00edculo sea largo y tenga diferentes secciones. Cada art\u00edculo suele estar encabezado por una etiqueta <code>&lt;h2&gt;</code> o <code>&lt;h3&gt;</code>. Por ejemplo:</p> <pre><code>&lt;article&gt;\n&lt;h3&gt;T\u00edtulo del art\u00edculo&lt;/h3&gt;\n&lt;section&gt;Primera secci\u00f3n del art\u00edculo largo&lt;/section&gt;\n&lt;section&gt;Segunda secci\u00f3n del art\u00edculo largo&lt;/section&gt;\n&lt;/article&gt;\n</code></pre> </li> <li> <p><code>&lt;header&gt;</code>: Se utiliza como una introducci\u00f3n del elemento que la contiene (en espa\u00f1ol, cabecera). Normalmente se coloca una etiqueta <code>&lt;header&gt;</code> como hija directa del <code>&lt;body&gt;</code>, para representar la cabecera de toda la p\u00e1gina. Dentro del <code>&lt;header&gt;</code> se suelen incluir el t\u00edtulo, normalmente en forma de etiqueta <code>&lt;h1&gt;</code>, la descripci\u00f3n corta, normalmente en forma de etiqueta <code>&lt;h2&gt;</code> y el logo de la p\u00e1gina, mediante una etiqueta <code>&lt;img&gt;</code>. Por ejemplo:</p> <pre><code>&lt;body&gt;\n&lt;header&gt;\n&lt;h1&gt;Cabecera de la p\u00e1gina&lt;/h1&gt;\n&lt;/header&gt;\n&lt;/body&gt;\n</code></pre> <p>Aunque no es habitual, podemos colocar la etiqueta <code>&lt;header&gt;</code> dentro de una etiqueta <code>&lt;section&gt;</code>, para representar la cabecera de dicha secci\u00f3n, o incluso dentro de una etiqueta <code>&lt;article&gt;</code> para representar la cabecera de dicho art\u00edculo.</p> </li> <li> <p><code>&lt;nav&gt;</code>: Esta etiqueta est\u00e1 pensada para contener el men\u00fa de navegaci\u00f3n con los enlaces a las p\u00e1ginas del sitio web. Normalmente va en la parte superior de la p\u00e1gina o en un lateral. Aunque hay multitud de dise\u00f1os diferentes de men\u00fas de navegaci\u00f3n, normalmente contendr\u00e1 en su interior una lista desordenada <code>&lt;ul&gt;</code> que a su vez contiene un elemento <code>&lt;li&gt;</code> por cada \u00edtem del men\u00fa. Adem\u00e1s, cada elemento <code>&lt;li&gt;</code> contendr\u00e1 una etiqueta <code>&lt;a&gt;</code> que permite enlazar con una determinada p\u00e1gina o ancla cuando el usuario pulse sobre el mismo. Por ejemplo:</p> <pre><code>&lt;nav&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"#\"&gt;Item 3&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre> </li> <li> <p><code>&lt;aside&gt;</code>: Esta etiqueta est\u00e1 dise\u00f1ada para contenido tangencial, es decir, menos importante que el cuerpo de la p\u00e1gina, y que suele ser de un tema relacionado indirectamente (o no relacionado) con el tema principal. Se suele colocar en los laterales de la p\u00e1gina. Pero no todo lo que va en los laterales debe ser obligatoriamente una etiqueta <code>&lt;aside&gt;</code>.</p> </li> <li> <p><code>&lt;main&gt;</code>: Representa el contenido principal de la p\u00e1gina. Suele contener en su interior secciones y/o art\u00edculos. Es el complemento a <code>&lt;aside&gt;</code>.</p> </li> <li> <p><code>&lt;footer&gt;</code>: Normalmente va al final de la p\u00e1gina y contiene informaci\u00f3n del tipo: autor, copyright, contacto, mapa del sitio, etc. Corresponde a lo que se conoce como pie de p\u00e1gina. Se pueden poner <code>&lt;header&gt;</code> y <code>&lt;footer&gt;</code> dentro de <code>&lt;section&gt;</code> y <code>&lt;article&gt;</code>, aunque no es lo m\u00e1s habitual. Por ejemplo:</p> <pre><code>&lt;body&gt;\n&lt;!-- ... --&gt;\n&lt;footer&gt;\n&lt;h4&gt;Pie de la p\u00e1gina&lt;/h1&gt;\n&lt;/footer&gt;\n&lt;/body&gt;\n</code></pre> </li> </ul>"},{"location":"tema_1/page_5/#estructura-habitual-de-una-pagina-web","title":"Estructura habitual de una p\u00e1gina web","text":"<p>Vistos las distintas etiquetas sem\u00e1nticas estructurales, podemos comentar que indicar una p\u00e1gina web tiene una estructura general parecida a la siguiente:</p> <pre><code>&lt;body&gt;\n&lt;header&gt;...&lt;/header&gt;\n&lt;nav&gt;...&lt;/nav&gt;\n&lt;main&gt;\n&lt;section&gt;\n&lt;article&gt;...&lt;/article&gt;\n&lt;/section&gt;\n&lt;/main&gt;\n&lt;aside&gt;...&lt;/aside&gt;\n&lt;footer&gt;...&lt;/footer&gt;\n&lt;/body&gt;\n</code></pre>"},{"location":"tema_1/page_5/#no-estructurales","title":"No estructurales","text":"<p>HTML 5 define otras etiquetas sem\u00e1nticas que NO sirven para establecer la estructura general del sitio, entre los que destacamos:</p> <ul> <li> <p><code>&lt;details&gt;</code> y <code>&lt;summary&gt;</code>: El elemento <code>&lt;details&gt;</code> representa un bloque de texto que por defecto aparece contra\u00eddo pero que puede ser expandido (detalle). Como primer hijo de la etiqueta <code>&lt;details&gt;</code> se usa una etiqueta <code>&lt;summary&gt;</code> para indicar el texto que debe mostrarse cuando el bloque est\u00e9 contra\u00eddo (en espa\u00f1ol, resumen). Por defecto aparecer\u00e1 contra\u00eddo. Si queremos que nuestro bloque de texto aparezca inicialmente expandido usaremos el atributo open=\"open\" en la etiqueta <code>&lt;details&gt;</code>. Veamos un ejemplo:</p> <pre><code>&lt;details open=\"open\"&gt;\n&lt;summary&gt;Leer m\u00e1s&lt;/summary&gt;\n&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Commodi quos ratione itaque facilis aspernatur quia quas, iure quisquam nobis, deleniti voluptates sint asperiores debitis quaerat harum iste. Nam, magni, quam!&lt;/p&gt;\n&lt;/details&gt;\n</code></pre> </li> <li> <p><code>&lt;figure&gt;</code> y <code>&lt;figcaption&gt;</code>: El elemento HTML <code>&lt;figure&gt;</code> representa contenido independiente, a menudo con un t\u00edtulo. Por lo general, dicho contenido se trata de una imagen, una ilustraci\u00f3n, un diagrama, un fragmento de c\u00f3digo, o un esquema al que se hace referencia en el texto principal, pero que se puede mover a otra p\u00e1gina o a un ap\u00e9ndice sin que afecte al flujo principal. Se trata de un elemento en bloque. Por su parte, el elemento <code>&lt;figcaption&gt;</code> representa un subt\u00edtulo o leyenda asociado con una imagen o ilustraci\u00f3n descrita por el resto de los datos asociados con el elemento <code>&lt;figure&gt;</code> padre de <code>&lt;figcaption&gt;</code>. Este elemento es opcional; y si no se especifica, el elemento padre <code>&lt;figure&gt;</code> no tendr\u00e1 leyenda asociada. Veamos un ejemplo de uso de estos dos elementos asociados a una imagen de contenido:</p> <pre><code>&lt;figure&gt;\n&lt;img src=\"/imagenes/foto1.jpg\" alt=\"Vista nocturna de la Alhambra\" /&gt;\n&lt;figcaption&gt;Fig 1. - Vista nocturna de la Alhambra&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre> </li> <li> <p><code>&lt;time&gt;</code> y <code>&lt;address&gt;</code>: Representan, respectivamente, una fecha / hora y una direcci\u00f3n f\u00edsica</p> </li> </ul>"},{"location":"tema_2/page_1/","title":"1 Selectores b\u00e1sicos","text":""},{"location":"tema_2/page_1/#introduccion","title":"Introducci\u00f3n","text":"<p>Como hemos visto, una regla de CSS est\u00e1 formada por una parte llamada selector y otra parte llamada declaraci\u00f3n. La declaraci\u00f3n indica \"qu\u00e9 hay que hacer\" y el selector indica \"a qui\u00e9n hay que aplic\u00e1rselo\". Por lo tanto, los selectores son imprescindibles para aplicar de forma correcta los estilos CSS en una p\u00e1gina.</p> <p>A un mismo elemento HTML se le pueden aplicar varias reglas CSS y cada regla CSS puede aplicarse a un n\u00famero ilimitado de elementos. Adem\u00e1s, una misma regla puede aplicarse sobre varios selectores y un mismo selector se puede utilizar en varias reglas.</p> <p>Podemos consultar la especificaci\u00f3n oficial de CSS3 sobre selectores.</p>"},{"location":"tema_2/page_1/#selector-universal","title":"Selector universal","text":"<p>Se utiliza para seleccionar todos los elementos de la p\u00e1gina. Se indica mediante el car\u00e1cter asterisco <code>*</code>. El siguiente ejemplo elimina el margen y el relleno de todas los elementos:</p> <pre><code>* {\nmargin: 0;\npadding: 0;\n}\n</code></pre> <p>Normalmente se utiliza para sobrescribir los estilos que aplica por defecto el navegador. Tambi\u00e9n se puede combinar con otros selectores, como veremos m\u00e1s adelante.</p>"},{"location":"tema_2/page_1/#selector-de-tipo-o-etiqueta","title":"Selector de tipo o etiqueta","text":"<p>Selecciona todos los elementos de la p\u00e1gina cuya etiqueta HTML coincide con el valor del selector. El siguiente ejemplo selecciona todos los p\u00e1rrafos de la p\u00e1gina y les aplica un margen izquierdo:</p> <pre><code>p { margin-left: 15px; }\n</code></pre> <p>Para utilizar este selector, solamente es necesario indicar el nombre de una etiqueta HTML (sin los caracteres <code>&lt;</code> y <code>&gt;</code>) correspondiente a los elementos que se quieren seleccionar.</p>"},{"location":"tema_2/page_1/#encadenado-de-selectores","title":"Encadenado de selectores","text":"<p>Si se quieren aplicar los mismos estilos a dos etiquetas diferentes, se pueden encadenar los selectores, indicando en la regla varios selectores separados por el car\u00e1cter coma <code>,</code>. En el siguiente ejemplo, los t\u00edtulos de secci\u00f3n <code>h1</code>, <code>h2</code> y <code>h3</code> comparten los mismos estilos:</p> <pre><code>h1, h2, h3 {\ncolor: #8A8E27;\nfont-weight: normal;\nfont-family: Arial, Helvetica, sans-serif;\n}\n</code></pre> <p>En las hojas de estilo complejas, es habitual agrupar las propiedades comunes de varios elementos en una \u00fanica regla CSS y posteriormente definir las propiedades espec\u00edficas de esos mismos elementos. El siguiente ejemplo establece en primer lugar las propiedades comunes de los t\u00edtulos de secci\u00f3n (color y tipo de letra) y a continuaci\u00f3n, establece el tama\u00f1o de letra de cada uno de ellos:</p> <pre><code>h1, h2, h3 {\ncolor: #8A8E27;\nfont-weight: normal;\nfont-family: Arial, Helvetica, sans-serif;\n}\nh1 { font-size: 2em; }\nh2 { font-size: 1.5em; }\nh3 { font-size: 1.2em; }\n</code></pre>"},{"location":"tema_2/page_1/#selector-descendente","title":"Selector descendente","text":"<p>Selecciona los elementos que se encuentran dentro de otros elementos. Un elemento es descendiente de otro cuando se encuentra entre las etiquetas de apertura y de cierre del otro elemento (es hijo, nieto, bisnieto, etc). Este selector se representa mediante el car\u00e1cter espacio en blanco, por lo que debemos ser muy cuidadosos con no aplicarlo por error al incluir espacios en blanco en otros selectores.</p> <p>Por ejemplo, el selector la siguiente regla selecciona todos los elementos de la p\u00e1gina que se encuentren dentro de un elemento <code>&lt;p&gt;</code>:</p> <pre><code>p { color: red; }\n</code></pre> <p>Si el c\u00f3digo HTML de la p\u00e1gina es el siguiente:</p> <pre><code>&lt;p&gt;\n&lt;!-- ... --&gt;\n&lt;span&gt;texto1&lt;/span&gt;\n&lt;!-- ... --&gt;\n&lt;a href=\"\"&gt;...&lt;span&gt;texto2&lt;/span&gt;&lt;/a&gt;\n&lt;!-- ... --&gt;\n&lt;/p&gt;\n</code></pre> <p>El selector <code>p span</code> selecciona tanto texto1 como texto2. El motivo es que en el selector descendente, un elemento no tiene que ser descendiente directo del otro. La \u00fanica condici\u00f3n es que un elemento debe estar dentro de otro elemento, sin importar el nivel de profundidad en el que se encuentre.</p> <p>Al resto de elementos de la p\u00e1gina que no est\u00e1n dentro de un elemento <code>&lt;p&gt;</code>, no se les aplica la regla CSS anterior.</p> <p>Los selectores descendentes permiten aumentar la precisi\u00f3n del selector de tipo o etiqueta. As\u00ed, utilizando el selector descendente es posible aplicar diferentes estilos a los elementos del mismo tipo. El siguiente ejemplo ampl\u00eda el anterior y muestra de color azul todo el texto de los contenidos dentro de un <code>&lt;h1&gt;</code>:</p> <pre><code>h1 span { color: blue; }\n</code></pre> <p>Con las reglas CSS anteriores:</p> <ul> <li>Los elementos que se encuentran dentro de un elemento <code>&lt;p&gt;</code> se muestran de color rojo.</li> <li>Los elementos que se encuentran dentro de un elemento <code>&lt;h1&gt;</code> se muestran de color azul.</li> <li>El resto de elementos de la p\u00e1gina, se muestran con el color por defecto aplicado por el navegador. En realidad podemos aplicar el selector descendiente varias veces en la misma regla. Los selectores descendentes siempre est\u00e1n formados por dos o m\u00e1s selectores separados entre s\u00ed por espacios en blanco. El \u00faltimo selector indica el elemento sobre el que se aplican los estilos y todos los selectores anteriores indican el lugar en el que se debe encontrar ese elemento. En el siguiente ejemplo, el selector descendente se compone de cuatro selectores:</li> </ul> <pre><code>p a span em { text-decoration: underline; }\n</code></pre> <p>Los estilos de la regla anterior se aplican a los elementos de tipo <code>&lt;em&gt;</code> que se encuentren dentro de elementos de tipo <code>&lt;span&gt;</code>, que a su vez se encuentren dentro de elementos de tipo <code>&lt;a&gt;</code> que se encuentren dentro de elementos de tipo <code>&lt;p&gt;</code>.</p> <p>Warning</p> <p>Es muy importante NO confundir el selector descendente con la combinaci\u00f3n de selectores:</p> <pre><code>/*El estilo se aplica a todos los elementos \"p\", \"a\", \"span\" y \"em\"*/\np, a, span, em { text-decoration: underline; }\n/*El estilo se aplica solo a los elementos \"em\" que se\nencuentran dentro de \"p a span\"*/\np a span em { text-decoration: underline; }\n</code></pre> <p>Se puede restringir el alcance del selector descendente combin\u00e1ndolo con el selector universal. El siguiente ejemplo, muestra de color rojo todos los enlaces que sean hijos, nietos, bisnietos, etc de una etiqueta <code>&lt;p&gt;</code>:</p> <pre><code>p a { color: red; }\n</code></pre> <p>Sin embargo, en el siguiente ejemplo solamente los enlaces que sean nietos, bisnietos, etc. se muestran de color rojo, si son hijos directos no:</p> <pre><code>p * a { color: red; }\n</code></pre> <p>La raz\u00f3n es que el selector <code>p * a</code> se interpreta como todos los elementos de tipo <code>&lt;a&gt;</code> que se encuentren dentro de cualquier elemento que, a su vez, se encuentre dentro de un elemento de tipo <code>&lt;p&gt;</code>. Si un elemento <code>&lt;a&gt;</code> es hijo directo de <code>&lt;p&gt;</code>, no cumple dicha condici\u00f3n.</p> <p>Info</p> <p>CSS4 permite usar para este selector el car\u00e1cter &gt;&gt; en vez del espacio en blanco, aunque a\u00fan no es soportado por la mayor\u00eda de los navegadores.</p>"},{"location":"tema_2/page_1/#selector-de-clase","title":"Selector de clase","text":"<p>La manera m\u00e1s sencilla de aplicar estilos a un elemento o a un grupo de elementos consiste en establecer en el HTML de dichos elementos un nombre de clase com\u00fan a trav\u00e9s del atributo <code>class</code>. Por ejemplo:</p> <pre><code>&lt;body&gt;\n&lt;p class=\"destacado\"&gt;Lorem ipsum dolor sit amet...&lt;/p&gt;\n&lt;p&gt;Nunc sed lacus et est adipiscing accumsan...&lt;/p&gt;\n&lt;p&gt;Class aptent taciti sociosqu ad litora...&lt;/p&gt;\n&lt;/body&gt;\n</code></pre> <p>Entonces, en nuestra hoja de estilos CSS creamos una regla en la que usamos el selector de clase, representado por el car\u00e1cter punto <code>.</code> seguido del nombre de la clase. As\u00ed, siguiendo el ejemplo anterior, har\u00edamos:</p> <pre><code>.destacado { color: red; }\n</code></pre> <p>El selector <code>.destacado</code> se interpreta como cualquier elemento de la p\u00e1gina cuyo atributo class sea igual a destacado, por lo que solamente el primer p\u00e1rrafo cumple esa condici\u00f3n. Podemos combinar el selector de clase con el selector de etiqueta. Por ejemplo:</p> <pre><code>p.destacado { color: red }\n</code></pre> <p>El selector <code>p.destacado</code> se interpreta como aquellos elementos de tipo <code>&lt;p&gt;</code> que dispongan de un atributo class con valor destacado. De lo anterior se deduce que el atributo <code>.destacado</code> es equivalente a <code>*.destacado</code>, por lo que todos los dise\u00f1adores obvian el selector <code>*</code> al escribir un selector de clase normal. No debe confundirse el selector de clase con los selectores anteriores:</p> <pre><code>/* Todos los elementos de tipo \"p\" con atributo class=\"aviso\" */\np.aviso { ... }\n/* Todos los elementos con atributo class=\"aviso\" que est\u00e9n dentro\nde cualquier elemento de tipo \"p\" */\np .aviso { ... }\n/* Todos los elementos \"p\" de la p\u00e1gina y todos los elementos con\natributo class=\"aviso\" de la p\u00e1gina */\np, .aviso { ... }\n</code></pre> <p>Como sabemos, es posible indicar que un elemento HTML pertenece a varias clases. Por ejemplo:</p> <pre><code>&lt;p class=\"especial destacado error\"&gt;P\u00e1rrafo de texto...&lt;/p&gt;\n</code></pre> <p>Al p\u00e1rrafo anterior se le aplican los estilos definidos en las reglas <code>.especial</code>, <code>.destacado</code> y <code>.error</code>. Por ejemplo:</p> <pre><code>.error { color: red; }\n.destacado { font-size: 15px; }\n.especial { font-weight: bold; }\n</code></pre> <p>Si un elemento dispone de un atributo <code>class</code> con m\u00e1s de un valor, es posible utilizar un selector m\u00e1s avanzado:</p> <pre><code>.error.destacado { color: blue; }\n</code></pre> <p>En el ejemplo anterior se ha utilizado un selector de clase m\u00faltiple <code>.error.destacado</code>, que se interpreta como \"aquellos elementos de la p\u00e1gina que dispongan de un atributo class con al menos los valores <code>error</code> y <code>destacado</code>.</p>"},{"location":"tema_2/page_1/#selector-de-id","title":"Selector de id","text":"<p>El selector de id permite seleccionar un elemento de la p\u00e1gina a trav\u00e9s del valor de su atributo id. Este tipo de selectores s\u00f3lo seleccionan un elemento de la p\u00e1gina porque el valor del atributo id no se puede repetir en dos elementos diferentes de una misma p\u00e1gina.</p> <p>La sintaxis de los selectores de id es muy parecida a la de los selectores de clase, salvo que se utiliza el s\u00edmbolo de la almohadilla <code>#</code> en vez del punto <code>.</code> como prefijo del nombre de la regla CSS. Por ejemplo:</p> <pre><code>#destacado { color: red; }\n</code></pre> <p>Al igual que los selectores de clase, en este caso tambi\u00e9n se puede restringir el alcance del selector de id mediante la combinaci\u00f3n con otros selectores. El siguiente ejemplo aplica la regla CSS solamente al elemento de tipo <code>&lt;p&gt;</code> que tenga un atributo id igual al indicado:</p> <pre><code>p#aviso { color: blue; }\n</code></pre> <p>A primera vista, restringir el alcance de un selector de id puede parecer absurdo. En realidad, un selector de tipo <code>p#aviso</code> s\u00f3lo tiene sentido cuando el archivo CSS se aplica sobre muchas p\u00e1ginas HTML diferentes, y el id aviso se utilice en otra p\u00e1gina a otra etiqueta distinta que no sea una etiqueta <code>&lt;p&gt;</code>.</p>"},{"location":"tema_2/page_1/#combinacion-de-selectores","title":"Combinaci\u00f3n de selectores","text":"<p>CSS permite la combinaci\u00f3n de uno o m\u00e1s tipos de selectores para restringir el alcance de las reglas CSS. La combinaci\u00f3n de selectores puede llegar a ser todo lo compleja que sea necesario. A continuaci\u00f3n se muestran algunos ejemplos habituales de combinaci\u00f3n de selectores:</p> <pre><code>/* Elementos de clase \"especial\" que se encuentre dentro de un elemento de la clase \"aviso\". */\n.aviso .especial { color: red; }\n/* Elementos &lt;span&gt; de la clase \"especial\" que se encuentren dentro de un elemento &lt;div&gt; de la clase \"aviso\". */\ndiv.aviso span.especial { color: red; }\n/* Elemento &lt;a&gt; cuyo id es \"inicio\" que est\u00e9 dentro de un elemento &lt;li&gt; de la clase \"destacado\" que a su vez est\u00e9 dentro de un elemento &lt;ul&gt; cuyo id sea \"menuPrincipal\". */\nul#menuPrincipal li.destacado a#inicio { color: red; }\n</code></pre> Ejercicio <p>Crea un p\u00e1gina web cuyo contenido este formado por dos div.</p> <p>El primer div contendr\u00e1, tres p\u00e1rrafos y una imagen (cuyo contenido debe ser una imagen de internet). El segundo de los p\u00e1rrafos en volver\u00e1 tres palabras aleatorias en un span y el primer y tercer p\u00e1rrafo contendr\u00e1 un enlace cada uno. </p> <p>El segundo div contendr\u00e1 otro div, con un texto que no ocupe m\u00e1s de una l\u00ednea, y un p\u00e1rrafo.</p> <p>Aplicando TODO lo que hemos visto anteriormente aplica diferentes estilos a cada uno de los elementos, teniendo en cuenta que algunos deben tener estilos comunes.</p>"},{"location":"tema_2/page_2/","title":"2 Selectores avanzados","text":""},{"location":"tema_2/page_2/#introduccion","title":"Introducci\u00f3n","text":"<p>CSS 3 trajo consigo una serie de selectores avanzados, mucho m\u00e1s espec\u00edficos que los selectores b\u00e1sicos que hemos visto anteriormente.</p>"},{"location":"tema_2/page_2/#selector-de-hijos","title":"Selector de hijos","text":"<p>Se trata de un selector similar al selector descendente, pero muy diferente en su funcionamiento. Se utiliza para seleccionar un elemento que es hijo directo de otro elemento y se indica mediante el signo de mayor que <code>&gt;</code>. Veamos un ejemplo:</p> HTMLCSS <pre><code>&lt;p&gt;Texto1&lt;/p&gt;\n&lt;p&gt;\n&lt;a href=\"#\"&gt;Texto2&lt;/a&gt;\n&lt;/p&gt;\n</code></pre> <pre><code>p &gt; span { color: blue; }\n</code></pre> <p>El selector <code>p &gt; span</code> se interpreta como cualquier elemento que sea hijo directo de un elemento <code>&lt;p&gt;</code>, por lo que el primer elemento cumple la condici\u00f3n del selector. Sin embargo, el segundo elemento no la cumple porque es descendiente pero no es hijo directo de un elemento <code>&lt;p&gt;</code>.</p> <p>Sin embargo, si la regla CSS hubiera sido <code>p span { color: blue; }</code> se hubieran seleccionada ambos, ya que ambos son descendientes de un elemento <code>p</code>.</p>"},{"location":"tema_2/page_2/#selector-de-hermano-posterior","title":"Selector de hermano posterior","text":"<p>Algunas veces necesitamos seleccionar une elemento que sea un hermano posterior de otro. Para ello utilizaremos el car\u00e1cter <code>~</code> con el formato <code>elemento1 ~ elemento2</code>. No importa que en el html haya otros elementos hermanos interpuestos entre elemento1 y elemento2. Por ejemplo:</p> HTMLCSS <pre><code>&lt;article&gt;\n&lt;h2&gt;t\u00edtulo&lt;/h2&gt;\n&lt;p&gt;texto del primer p\u00e1rrafo&lt;/p&gt;\n&lt;img src='...' /&gt;\n&lt;p&gt;texto de otro p\u00e1rrafo&lt;/p&gt;\n&lt;/article&gt;\n</code></pre> <pre><code>h2 ~ p { color: red; }\n</code></pre> <p>Se seleccionaran los dos elementos <code>p</code>, ya que ambos son hermanos posteriores de un elemento <code>h2</code>, es decir, tienen el mismo padre que el <code>h2</code> y est\u00e1n definidos despu\u00e9s de \u00e9l.</p>"},{"location":"tema_2/page_2/#selector-de-hermano-adyacente","title":"Selector de hermano adyacente","text":"<p>El selector adyacente se emplea para seleccionar elementos que en el c\u00f3digo HTML de la p\u00e1gina se encuentran justo a continuaci\u00f3n de otros elementos. Su sintaxis emplea el signo <code>+</code> para separar los dos elementos. Si se considera el siguiente c\u00f3digo HTML:</p> HTMLCSS <pre><code>&lt;body&gt;\n&lt;h1&gt;Titulo1&lt;/h1&gt;\n&lt;h2&gt;Subt\u00edtulo&lt;/h2&gt;\n&lt;!-- ... --&gt;\n&lt;h2&gt;Otro subt\u00edtulo&lt;/h2&gt;\n&lt;!-- ... --&gt;\n&lt;/body&gt;\n</code></pre> <pre><code>h1 + h2 { color: red; }\n</code></pre> <p>El selector de esta regla se lee como los elementos <code>h2</code> adyacentes a un elemento <code>h1</code>. T\u00e9cnicamente, un elemento, elemento2, es adyacente a otro elemento, elemento1, cuando se cumplen las dos siguientes condiciones:</p> <ul> <li>elemento1 y elemento2 deben ser elementos hermanos, por lo que su elemento padre debe ser el mismo.</li> <li> <p>elemento2 debe aparecer inmediatamente despu\u00e9s de elemento1 en el c\u00f3digo HTML de la p\u00e1gina. Un ejemplo muy habitual es hacer que la primera l\u00ednea de todos los p\u00e1rrafos est\u00e9 indentada, salvo la primera l\u00ednea del primer p\u00e1rrafo. Para ello, usaremos el selector de hermano adyacente de la siguiente manera:</p> <pre><code>p + p { text-indent: 1.5em; }\n</code></pre> <p>De esta manera todos los p\u00e1rrafos que sigan a otro p\u00e1rrafo ser\u00e1n seleccionados, pero el primero no, ya que no sigue a otro p\u00e1rrafo.</p> </li> </ul>"},{"location":"tema_2/page_2/#selectores-de-atributos","title":"Selectores de atributos","text":"<p>Otro grupo de selectores avanzados lo forman los selectores de atributos, que permiten seleccionar elementos HTML en funci\u00f3n de sus atributos y/o valores de esos atributos. Tenemos disponibles los siguientes selectores:</p> <ul> <li><code>[nombre_atributo]</code>: selecciona los elementos que tienen establecido el atributo llamado nombre_atributo, independientemente de su valor.</li> <li><code>[nombre_atributo=valor]</code>: selecciona los elementos que tienen establecido un atributo llamado nombre_atributo con un valor igual a valor.</li> <li><code>[nombre_atributo~=valor]</code>: selecciona los elementos que tienen establecido un atributo llamado nombre_atributo y al menos uno de los valores del atributo es valor.</li> <li><code>[nombre_atributo|=valor]</code>: selecciona los elementos que tienen establecido un atributo llamado nombre_atributo y cuyo valor es una serie de palabras separadas con guiones, pero que comienza con valor.</li> <li><code>[nombre_atributo^=cadena]</code>: selecciona los elementos que tienen establecido un atributo llamado nombre_atributo y cuyo valor comienza exactamente por la cadena de texto cadena.</li> <li><code>[nombre_atributo$=cadena]</code>: selecciona los elementos que tienen establecido un atributo llamado nombre_atributo y cuyo valor finaliza con la cadena de texto cadena.</li> <li><code>[nombre_atributo*=cadena]</code>: selecciona los elementos que tienen establecido un atributo llamado nombre_atributo y cuyo valor contiene al menos una vez la cadena de texto cadena. A continuaci\u00f3n se muestran algunos ejemplos de estos selectores:</li> </ul> <pre><code>/*Enlaces que tengan un atributo \"class\", independientemente de su valor*/\na[class] { color: blue; }\n/*Enlaces que tengan class=\"externo\"*/\na[class=\"externo\"] { color: blue; }\n/*Enlaces que apunten a \"&lt;http://www.ejemplo.com\"*/&gt;\na[href=\"http://www.ejemplo.com\"] { color: blue; }\n/*Enlaces que tengan el atributo \"class\" que contenga al menos el valor \"externo\"*/\na[class~=\"externo\"] { color: blue; }\n/*Elementos que tengan lang=\"en\" (idiomas ingl\u00e9s)*/\n*[lang=en] { ... }\n/* Elementos cuyo atributo lang sea \"es\" o \"es-loquesea\", como \"es-ES\", \"es-AR\", etc. */\n*[lang|=\"es\"] { color : red; }\n/*Enlaces cuyo valor del atributo class empiece por \"button\"*/\na[class^=\"button\"] { color: blue; }\n/*Enlaces cuyo valor del atributo class termine por \"rojo\"*/\na[class$=\"roja\"] { color: red; }\n/*Enlaces cuyo valor del atributo class contenga la cadena \"button\"*/\na[class*=\"button\"] { color: blue; }\n</code></pre> Ejercicio <p>Realiza el ejercicio del apartado anterior, pero est\u00e1 vez haciendo uso de los selectores avanzados</p>"},{"location":"tema_2/page_3/","title":"3 Pseudoelementos","text":""},{"location":"tema_2/page_3/#introduccion","title":"Introducci\u00f3n","text":"<p>Podr\u00eda decirse que los selectores de pseudoelementos son una extensi\u00f3n del selector de tipo o etiqueta. Este tipo de selectores nos permiten seleccionar elementos de nuestro documento HTML que est\u00e9n marcados como tal mediante una etiqueta. Son, por tanto, una abstracci\u00f3n, no existen como tal en el documento HTML. \u00bfPero si no existen, para que nos proporciona CSS un selector? La respuesta es simple, para poder seleccionarlos y aplicarles un estilo. En la mayor\u00eda de los casos, si no existieran estos selectores de pseudoelementos, no podr\u00edamos darle un estilo espec\u00edfico de ninguna de las maneras.</p> <p>El ejemplo m\u00e1s caracter\u00edstico de pseudoelemento es la primera letra del contenido de un elemento. Esta primera letra NO es un elemento en s\u00ed mismo, no est\u00e1 marcada con una etiqueta especial, sino que simplemente forma parte del contenido. Sin embargo, ser\u00eda adecuado poder seleccionar dicha letra dentro de un elemento para poder aplicarle un estilo distinto al del resto de letras (a esta letra se le conoce como letra capitular). Otro ejemplo similar es el pseudoelemento la primera l\u00ednea del contenido del elemento.</p> <p>Tradicionalmente los selectores de pseudoelemento comenzaban con el car\u00e1cter dos puntos <code>:</code> seguidos del nombre del pseudoelemento. Sin embargo, a partir de CSS3 el formato recomendado, es un doble car\u00e1cter dos puntos <code>::</code> seguido del nombre del pseudoelemento, aunque ambas formas son reconocidas por los navegadores en sus versiones m\u00e1s actuales.</p>"},{"location":"tema_2/page_3/#fist-letter-y-first-line","title":"::fist-letter y ::first-line","text":"<p>En algunas ocasiones queremos aplicar un estilo concreto a la primera letra de un p\u00e1rrafo, por ejemplo para ponerla m\u00e1s grande. Es lo que conoce como \"letra capitular\". Aunque podr\u00edamos simplemente incluir dicha letra dentro de una etiqueta para poder seleccionarla posteriormente, hay una manera m\u00e1s elegante de hacerlo.</p> <p>El pseudoelemento <code>::first-letter</code> selecciona la primera letra del contenido del elemento, por lo que podemos usarlo para estilizar dicha letra. Por ejemplo:</p> <pre><code>/* La primera letra de todos los p\u00e1rrafos ser\u00e1 m\u00e1s grande. */\np::first-letter { font-size: 2rem; }\n</code></pre> <p>Debemos tener en cuenta que el pseudoelemento <code>::first-letter</code> se trata de un elemento del tipo <code>inline-block</code> a la vez que textual. As\u00ed que de entrada tiende a alinear su base inferior con la primera l\u00ednea de texto en la que se encuentra, sobresaliendo por la parte superior y forzando un espacio (tipo margen) de su p\u00e1rrafo con el elemento precedente. Para solucionarlo, haremos flotar la letra capitular, lo veremos m\u00e1s adelante, y estableceremos una altura de l\u00ednea similar a tama\u00f1o.</p>"},{"location":"tema_2/page_3/#selection","title":"::selection","text":"<p>Cuando seleccionamos texto en una p\u00e1gina web \u00e9ste se muestra con un color de fondo predeterminado por el navegador. Sin embargo podemos personalizar el estilo con el que debe mostrarse el texto seleccionado, haciendo uso del pseudoelemento <code>::selection</code>, que es soportado por pr\u00e1cticamente todo los navegadores. Por ejemplo:</p> <p> See the Pen    Untitled by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_2/page_3/#placeholder","title":"::placeholder","text":"<p>Uno de los elementos caracter\u00edsticos de los campos de formulario es el conocido como placeholder, que corresponde al texto que se muestra en el campo como una especie de consejo para indicar al usuario qu\u00e9 dato debe introducir en el mismo. Dicho placeholder desaparece autom\u00e1ticamente cuando el usuario introduce un dato y s\u00f3lo es visible cuando el campo est\u00e1 vac\u00edo. Para poder estilizar el placeholder haremos uso del pseudoelemento <code>::placeholder</code>. La mayor\u00eda de los navegadores actuales soportan este selector, algunos mediante prefijos. Por ejemplo:</p> <p> See the Pen    ::placeholder by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_2/page_3/#before-y-after","title":"::before y ::after","text":"<p>Sirven para generar contenido en css. Veremos su uso m\u00e1s adelante.</p>"},{"location":"tema_2/page_3/#otros-pseudoelementos","title":"Otros pseudoelementos","text":"<p>CSS3 y CSS4 definen otros selectores de pseudoelementos que a\u00fan no est\u00e1n soportados en la mayor\u00eda de los navegadores: <code>::attr()</code>, <code>::backdrop</code>, <code>::choices</code>, <code>::footnote-call</code>, <code>::footnote-marker</code>, <code>::marker</code>, <code>::nth-fragment()</code>, <code>::read-only</code>, <code>::repeat-index</code>, <code>::repeat-item</code>, <code>::value</code>.</p>"},{"location":"tema_2/page_4/","title":"4 Pseudoclases","text":""},{"location":"tema_2/page_4/#introduccion","title":"Introducci\u00f3n","text":"<p>CSS introdujo el concepto de pseudoclase para permitir la selecci\u00f3n de elementos bas\u00e1ndose en informaci\u00f3n que reside fuera del \u00e1rbol de etiquetas del documento HTML y que no puede ser expresada usando otro tipo de selector. Por ejemplo, si queremos aplicar un estilo diferencial a los enlaces cuando el puntero del rat\u00f3n se sit\u00faa sobre \u00e9l, la informaci\u00f3n necesaria la selecci\u00f3n es cambiante y dependiente del usuario.</p> <p>Un selector de pseudoclase est\u00e1 formado por el car\u00e1cter dos puntos : seguido del nombre de la pseudoclase y, opcionalmente, un valor entre par\u00e9ntesis. Estos selectores se pueden combinar con cualquier otro selector complejo.</p> <p>Veamos los selectores de pseudoclases m\u00e1s importantes, organizados por funcionalidad.</p>"},{"location":"tema_2/page_4/#pseudoclases-para-enlaces","title":"Pseudoclases para enlaces","text":"<p>Los selectores de pseudoclases relacionados con los enlaces son:</p> <ul> <li><code>:link</code>: Selecciona enlaces que no hayan sido visitados a\u00fan.</li> <li><code>:visited</code>: Selecciona enlaces que ya han sido visitados con anterioridad. Por ejemplo:</li> </ul> <pre><code>a:link {\ncolor: green;\n}\na:visited {\ncolor: red;\n}\n</code></pre> <p>En este ejemplo los enlaces no se hayan visitado se ver\u00e1n de color verde y los ya visitados de color rojo.</p>"},{"location":"tema_2/page_4/#pseudoclases-de-interaccion-del-usuario","title":"Pseudoclases de interacci\u00f3n del usuario","text":"<p>Los selectores de pseudoclases relacionados con la interacci\u00f3n del usuario son:</p> <ul> <li><code>:hover</code>: Selecciona elementos que est\u00e9n siendo apuntados por el usuario mediante un dispositivo apuntador, por ejemplo el puntero del rat\u00f3n, pero a\u00fan no lo ha activado. El ejemplo m\u00e1s caracter\u00edstico es cuando el usuario sit\u00faa el puntero del rat\u00f3n encima de la caja de un elemento.</li> <li><code>:active</code>: Selecciona elementos que est\u00e1n siendo activados en ese momento por el usuario. El ejemplo m\u00e1s caracter\u00edstico es mientras el usuario est\u00e1 haciendo click por el puntero del rat\u00f3n sobre la caja de un elemento.</li> <li><code>:focus</code>: Selecciona elementos que en ese momento tengan el foco.</li> </ul> <p>Por ejemplo:</p> <pre><code>a:link {\ncolor: green;\n}\na:visited {\ncolor: red;\n}\na:hover {\nbackground-color: black;\ncolor: white;\n}\na:active {\ntext-decoration: none;\ncolor: brown;\nfont-weight: bold;\n}\ninput[type=\"text\"]:focus {\nbackground-color: yellow;\n}\n</code></pre> <p>En este ejemplo,los enlaces que no se hayan visitado se ver\u00e1n de color verde y los ya visitados de color rojo. Por otra parte, cuando situemos el puntero del rat\u00f3n por encima de un enlace, su fondo se pondr\u00e1 de color negro y el texto de color blanco. Adem\u00e1s, mientras el usuario est\u00e9 haciendo click sobre un enlace (y no haya soltado el bot\u00f3n del rat\u00f3n) el enlace se ver\u00e1 sin subrayado, de color marr\u00f3n y en negrita. Finalmente, las etiquetas <code>&lt;input&gt;</code> cuyo atributo type tenga el valor text cuando tengan el foco se ver\u00e1n con el fondo de color amarillo.</p> <p>Warning</p> <p>Si vamos a especificar varios selectores de pseudoclases para los enlaces, se recomienda respetar el orden del ejemplo anterior respecto a <code>:link</code>, <code>:visited</code>, <code>:hover</code> y <code>:active</code>.</p>"},{"location":"tema_2/page_4/#pseudoclases-de-estado-de-elementos-de-la-iu","title":"Pseudoclases de estado de elementos de la IU","text":"<p>Veremos estas pseudoclases cuando hablemos de los formularios.</p>"},{"location":"tema_2/page_4/#pseudoclases-estructurales","title":"Pseudoclases estructurales","text":"<p>Los selectores de pseudoclases estructurales permiten seleccionar elementos bas\u00e1ndonos en su relaci\u00f3n con el contenido del padre o de los hermanos:</p> <ul> <li><code>elemento:nth-child(numero)</code>: selecciona el elemento indicado pero con la condici\u00f3n de que sea el hijo en\u00e9simo de su padre. Este selector es \u00fatil para seleccionar el segundo p\u00e1rrafo de un elemento, el quinto elemento de una lista, etc.</li> <li><code>elemento:nth-last-child(numero)</code>: id\u00e9ntico al anterior pero el n\u00famero indicado se empieza a contar desde el \u00faltimo hijo.</li> <li><code>elemento:empty</code>: selecciona el elemento indicado pero con la condici\u00f3n de que no tenga ning\u00fan hijo. La condici\u00f3n implica que tampoco puede tener ning\u00fan contenido de texto.</li> <li><code>elemento:first-child</code> y <code>elemento:last-child</code>: seleccionan los elementos indicados pero con la condici\u00f3n de que sean respectivamente los primeros o \u00faltimos hijos de su elemento padre.</li> <li><code>elemento:nth-of-type(numero)</code>: selecciona el elemento indicado pero con la condici\u00f3n de que sea el en\u00e9simo elemento hermano de ese tipo.</li> <li><code>elemento:nth-last-of-type(numero)</code>, id\u00e9ntico al anterior pero el n\u00famero indicado se empieza a contar desde el \u00faltimo hijo.</li> <li><code>:root</code>: selecciona el elemento ra\u00edz del documento. En el caso de HTML, dicho elemento siempre ser\u00e1 el elemento <code>&lt;html&gt;</code>.</li> <li><code>elemento:first-of-type</code>: selecciona el elemento indicado pero con la condici\u00f3n de que sea el primer hijo de ese tipo dentro de su padre. Es similar a <code>elemento:nth-of-type(1)</code>.</li> <li><code>elemento:last-of-type</code>: selecciona el elemento indicado pero con la condici\u00f3n de que sea el \u00faltimo hijo de ese tipo dentro de su padre. Es similar a <code>elemento:nth-last-of-type(1)</code>.</li> <li><code>:only-child</code>: selecciona los elementos que sean hijos \u00fanicos, es decir, aquellos que no tienen ning\u00fan hermano.</li> <li><code>elemento:only-of-type</code>: selecciona los elementos que no tengan ning\u00fan hermano de dicho tipo.</li> </ul> <p>Todas los selectores de pseudoclases que reciben un n\u00famero, como :nth-child(numero) permiten el uso de expresiones complejas para realizar selecciones avanzadas. Por ejemplo:</p> <p>Info</p> <p>En el siguiente enlaces tenemos un ejemplo interactivo muy esclarecedor sobre estas pseudoclases:</p> <p>Demo de nth-child</p>"},{"location":"tema_2/page_4/#pseudoclases-logicas","title":"Pseudoclases l\u00f3gicas","text":"<p>La pseudoclase de negaci\u00f3n <code>:not()</code> recibe como argumento un selector, y selecciona aquellos elementos que no ser\u00edan seleccionados por dicho selector. Veamos algunos ejemplos:</p> <pre><code>/* Selecciona los li que no sean de la clase diferente */\nli:not(.diferente) { color: red; }\n/* Selecciona los a que no tengan el foco */\na:not(:focus) { color: red; }\n</code></pre> <p>Note</p> <p>La versi\u00f3n CSS4 de esta pseudoclase permite recibir varias condiciones como argumento, de manera que se seleccione aquellos elementos que no cumplan ninguna de las condiciones recibidas. La versi\u00f3n de CSS4 no est\u00e1 soportada por la mayor\u00eda de los navegadores.</p> <p>CSS4 define otros dos pseudoclases l\u00f3gicas, cuyo soporte actual por parte de los navegadores es nulo:</p> <ul> <li><code>:matches()</code>: Selecciona los elementos que cumplan alguna de las condiciones pasadas como argumento.</li> <li><code>:has()</code>: Selecciona los elementos que cumplan con alguno de los selectores pasados como argumento.</li> </ul>"},{"location":"tema_2/page_4/#otras-pseudoclases","title":"Otras pseudoclases","text":"<p>Otros selectores de pseudoclases son:</p> <ul> <li><code>:lang(idioma)</code>: Selecciona los elementos cuyo idioma sea el indicado, sin tener en cuenta el m\u00e9todo empleado por el navegador para averiguar el idioma de cada elemento. NO es exactamente igual al selector <code>[lang|=idioma]</code>, ya que \u00e9ste s\u00f3lo selecciona los elementos para los que expl\u00edcitamente se ha establecido el atributo lang y su valor contiene el idioma indicado. Por ejemplo, si aplicamos la siguiente regla CSS: <code>p:lang(es) { color: red; }</code></li> <li> <p><code>:target</code>: Selecciona el elemento cuyo id corresponde al nombre de secci\u00f3n incluido en la URL que se est\u00e1 visualizando en el navegador. Por ejemplo si se est\u00e1 visualizando la URL <code>http://www.wikipedia.com/index.html#referencias&gt;</code>, el selector de pseudoclase <code>:target()</code> selecciona el elemento cuyo id sea referencias. Se usa, sobre todo, para crear ventanas popup, que se muestran unicamente cuando se pulsa sobre un determinado enlace. Veamos una demostraci\u00f3n:</p> <p><p> See the Pen    Popup only css by irubenboy (@irubenboy)   on CodePen.</p> <p></p> </p> </li> </ul> <p>Tambi\u00e9n existen selectores de pseudoclases relacionados con el CSS para p\u00e1ginas impresas: <code>:blank</code>, <code>:first</code>, <code>:left</code>, <code>:right</code>.</p> <p>CSS4 define otra serie de selectores de pseudoclases cuyo soporte actual por parte de los navegadores es pr\u00e1cticamente nulo: <code>:valid-drop</code>, <code>:invalid-drop</code>, <code>:active-drop</code>, <code>:local-link()</code>, <code>:any-link</code>, <code>:past</code>, <code>:current()</code>, <code>:future</code>, <code>:nth-column</code>, <code>:nth-last-column</code>, <code>:nth-match</code>, <code>:nth-last-match</code>, <code>:placeholder-shown</code>, <code>:scope</code>, <code>:blank</code>, <code>:dir()</code>, <code>:fullscreen</code>, <code>:ancestor()</code>, <code>:host</code>, <code>:top</code>.</p> Ejercicio <p>Crea una p\u00e1gina web que contenga 10 enlaces dentro de un div. A dos de ellos le vas a indicar como clase enlace. Aplica los siguientes estilos:</p> <ul> <li>A los dos primeros enlaces deben aparecer de normal, sin estar subrayados.</li> <li>Los tres \u00faltimos enlaces deben aparecer de color rojo.</li> <li>Los enlaces que sean pares deben tener una fuente distinta.</li> <li>Los enlaces que sean m\u00faltiplos de 4 deben aparecer en negrita.</li> <li>Al hacer hover en los enlaces debe aparecer de color rosa.</li> <li>Al activar el enlace debe salir en cursiva.</li> <li>Si el enlace ha sido visitado debe aparecer en naranja.</li> <li>Al hacer hover en el div, cambiar\u00e1 el fondo a cualquier color pero con transparencias.</li> <li>Al hacer hover en los enlaces pares deber\u00e1 cambiar a color verde.</li> <li>Al activar los enlaces que no tengan la clase enlace deber\u00e1 aparecer en amarillo.</li> </ul>"},{"location":"tema_2/page_5/","title":"5 Cascada y colisi\u00f3n","text":""},{"location":"tema_2/page_5/#introduccion","title":"Introducci\u00f3n","text":"<p>En las hojas de estilos complejas, es habitual que varias reglas CSS se apliquen a un mismo elemento HTML. El problema radica en que puede que varias reglas asignen un valor distinto a la misma propiedad a un determinado elemento, es decir, que contengan declaraciones contradictorias. A este hecho se le conoce como colisi\u00f3n de estilos.</p> <p>Veamos el siguiente ejemplo, en el que hay dos reglas que incluyen declaraciones contradictorias que producen una colisi\u00f3n de estilos en todos los elementos <code>&lt;p&gt;</code>:</p> <pre><code>p {\ncolor: red;\n}\np {\ncolor: blue;\n}\n</code></pre> <p>\u00bfDe qu\u00e9 color se muestra cada uno de los p\u00e1rrafos del documento HTML? \u00bfQu\u00e9 declaraci\u00f3n prevalece sobre cu\u00e1l?</p> <p>Debemos tener en cuenta que la resoluci\u00f3n de los conflictos se tiene que realizar individualmente para cada etiqueta del documento HTML, atendiendo a las declaraciones que se le deben aplicar. Por ejemplo si ampliamos el ejemplo anterior de la siguiente manera:</p> <pre><code>p {\ncolor: red;\n}\np {\ncolor: blue;\n}\np.code {\ncolor: green;\n}\n</code></pre> <p>\u00bfDe qu\u00e9 color se muestra un p\u00e1rrafo de la clase code? \u00bfY un p\u00e1rrafo que NO sea de la clase code? La resoluci\u00f3n de las colisiones ser\u00e1 distinta en cada caso.</p> <p>CSS tiene un mecanismo de resoluci\u00f3n de colisiones muy complejo, conocido como cascada, y que tiene en cuenta varios factores o conceptos:</p> <ul> <li>Importancia de las declaraciones.</li> <li>Especificidad de los selectores de las reglas que contienen las declaraciones.</li> <li>Orden de los archivos CSS y de las declaraciones dentro de ellos.</li> </ul> <p>Si dos declaraciones tienen la misma importancia, la especificidad de las reglas decidir\u00e1 cu\u00e1l se debe aplicar. Si las reglas tienen la misma especificidad, el orden de las fuentes controla el resultado.</p>"},{"location":"tema_2/page_5/#importancia-de-las-declaraciones","title":"Importancia de las declaraciones","text":"<p>La importancia de una declaraci\u00f3n CSS depende de d\u00f3nde se ha especificado. Las declaraciones contradictorias se aplicar\u00e1n en el orden siguiente (de menor a mayor importancia), de manera que las \u00faltimas prevalecer\u00e1n sobre las anteriores:</p> <ol> <li>Hoja de estilos de agente de usuario.</li> <li>Declaraciones normales en hojas de estilo de usuario.</li> <li>Declaraciones normales en hojas de estilo de autor.</li> <li>Declaraciones importantes en hojas de estilo de autor (dise\u00f1ador).</li> <li>Declaraciones importantes en hojas de estilo de usuario.</li> </ol> <p>Una hoja de estilos de agente de usuario es la hoja de estilo integrada del navegador. Cada navegador tiene sus propias reglas sobre c\u00f3mo mostrar varios elementos de HTML si el usuario o dise\u00f1ador de la p\u00e1gina no especifica ning\u00fan estilo. Por ejemplo, los enlaces no visitados suelen ser azules y estar subrayados.</p> <p>Una hoja de estilos de usuario es una hoja de estilo que ha especificado el usuario. No todos los navegadores son compatibles con las hojas de estilo de usuario, pero pueden ser muy pr\u00e1cticas, sobre todo para los usuarios con problemas de accesibilidad. Por ejemplo, una persona disl\u00e9xica puede tener una hoja de estilo de usuario que especifique determinadas fuentes y colores que le faciliten la lectura.</p> <p>Cuando hablamos de \"hojas de estilo\", normalmente hacemos referencia a una hoja de estilo de autor. Es la hoja de estilos que ha creado o enlazado el autor (dise\u00f1ador) del documento.</p> <p>Las declaraciones importantes son aquellas que van seguidas de una directiva <code>!important</code>. Por ejemplo:</p> <pre><code>div{\ncolor: red !important;\n}\ndiv{\ncolor: blue;\n}\n</code></pre> <p>Como se puede observar, las declaraciones importantes de una hoja de estilo de usuario tienen prioridad sobre todas las dem\u00e1s, lo cual es l\u00f3gico.</p> <p>NO se recomienda usar <code>!important</code> habitualmente, de hecho se considera una mala pr\u00e1ctica, y s\u00f3lo deberemos recurrir a ella cuando no tengamos otra opci\u00f3n.</p>"},{"location":"tema_2/page_5/#especificidad","title":"Especificidad","text":"<p>La especificidad se considerarse una medida de c\u00f3mo de espec\u00edfico es el selector de una regla. La especificidad de un selector se calcula obteniendo el valor de especificidad mediante los siguientes elementos:</p> <ul> <li>n\u00famero de estilos aplicados directamente mediante un atributo <code>style</code>. Corresponder\u00e1 a las unidades de millar del valor de especificidad.</li> <li>n\u00famero de selectores de id <code>#</code>. Corresponder\u00e1 a las centenas del valor de especificidad.</li> <li>n\u00famero de selectores de clase <code>.</code>. Corresponder\u00e1 a las decenas del valor de especificidad.</li> <li>n\u00famero de selectores de tipo y de pseudoelementos. Corresponder\u00e1 a las unidades del valor de especificidad.</li> <li>El selector universal <code>*</code> es ignorado.</li> </ul> <p>Veamos unos ejemplos:</p> <pre><code>div { ... }                     /* Especificidad: 0001 */\ndiv div { ... }                 /* Especificidad: 0002 */\n#pagina div { ... }             /* Especificidad: 0101 */\n#pagina div:hover { ... }       /* Especificidad: 0111 */\n#pagina div:hover a { ... }     /* Especificidad: 0112 */\n#pagina .sel:hover &gt; a { ...}   /* Especificidad: 0121 */\n</code></pre> <p>Si se produce una colisi\u00f3n de estilos entre dos o m\u00e1s declaraciones que deben aplicarse a un determinado elemento, y todas las declaraciones tienen la misma importancia, prevalecer\u00e1 la declaraci\u00f3n contenida en la regla con el selector con valor de especificidad m\u00e1s alto. Por ejemplo en:</p> <pre><code>p {\ncolor: blue;  /* Especificidad 0001 */\n}\np.code {\ncolor: green; /* Especificidad 0011 */\n}\n</code></pre> <p>se producir\u00e1 una colisi\u00f3n de estilos en cada p\u00e1rrafo de la clase <code>code</code>. Ambas declaraciones tienen la misma importancia, ya que ambas son declaraciones normales en hojas de estilo de autor. Sin embargo, la segunda declaraci\u00f3n posee un valor de especificidad mayor que la primera, por lo que prevalecer\u00e1 frente a \u00e9sta, de manera que los p\u00e1rrafos de la clase <code>code</code> se mostrar\u00e1n en verde.</p> <p>Info</p> <p>Tambi\u00e9n tenemos disponible una herramienta online para el c\u00e1lculo de la especificidad de un selector.</p>"},{"location":"tema_2/page_5/#orden-de-inclusion","title":"Orden de inclusi\u00f3n","text":"<p>Si dos declaraciones afectan al mismo elemento, tienen la misma importancia y la misma especificidad, la colisi\u00f3n de estilos se resolver\u00e1 atendiendo al orden de inclusi\u00f3n de las declaraciones en el documento. A continuaci\u00f3n se muestran las distintas opciones ordenadas de menor a mayor precedencia:</p> <ul> <li>Archivos CSS externos vinculados a trav\u00e9s de la etiqueta <code>&lt;link&gt;</code>. Si vinculamos varios archivos CSS, las declaraciones definidas en los archivos vinculados posteriormente tiene mayor precedencia que los vinculados anteriormente.</li> <li>Reglas CSS internas definidas a trav\u00e9s de la etiqueta <code>&lt;style&gt;</code>.</li> <li>Declaraciones CSS embebido en el elemento HTML mediante el atributo <code>style</code>.</li> </ul> <p>Dentro de cada uno de estos apartados, las declaraciones posteriores prevalecer\u00e1n frente a las definidas con anterioridad.</p> <p>En el siguiente ejemplo:</p> <pre><code>p {\ncolor: red;\n}\np {\ncolor: blue;\n}\n</code></pre> <p>se genera una colisi\u00f3n de estilos en todas los p\u00e1rrafos, ya que se le deben aplicar dos declaraciones contradictorias. Ambas declaraciones tienen la misma importancia, ya que ambas son declaraciones normales en hojas de estilos de autor. Tambi\u00e9n tienen la misma especificidad, en concreto 0001, por lo que el sistema debe usar el orden de inclusi\u00f3n para resolverlo. Dado que ambas declaraciones est\u00e1n definidas en el mismo archivo CSS, la colisi\u00f3n se resuelve simplemente haciendo prevalecer la definida en \u00faltimo lugar, por lo que los p\u00e1rrafos se mostrar\u00e1n de color azul.</p> <p>Por todo lo indicado anteriormente, es muy importante el orden en el que se vinculan en el documento mediante la etiqueta <code>&lt;link&gt;</code> los archivos externos CSS. Por ejemplo, si vinculamos el archivos CSS correspondiente a alg\u00fan framework CSS, como Bootstrap, y despu\u00e9s queremos sobrescribir alg\u00fan estilo concerto, deberemos vincular nuestro propio archivos CSS despu\u00e9s de vincular el de Bootstrap. Por ejemplo:</p> <pre><code>&lt;head&gt;\n&lt;!-- ... --&gt;\n&lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" /&gt;\n&lt;link rel=\"stylesheet\" href=\"css/estilos.css\" /&gt;\n&lt;!-- ... --&gt;\n&lt;/head&gt;\n</code></pre> <p>\u200b Por otra parte, tambi\u00e9n es muy importante el orden en el que se definen las reglas dentro de un archivo CSS. De hecho, dentro de un archivo CSS, se recomienda definir primero las reglas m\u00e1s generales y despu\u00e9s las m\u00e1s espec\u00edficas, para que \u00e9stas sobrescriban los estilos definidos con anterioridad.</p>"},{"location":"tema_2/page_5/#resumen","title":"Resumen","text":"<p>El m\u00e9todo seguido por CSS para resolver las colisiones de estilos se muestra a continuaci\u00f3n:</p> <ol> <li>Determinar todas las declaraciones que se aplican al elemento para el medio CSS seleccionado.</li> <li>Ordenar las declaraciones seg\u00fan su importancia, atendiendo a su origen (hoja de estilo del navegador, de usuario o de autor) y si se ha marcado con la palabra clave <code>!important</code>.</li> <li>En caso de igual importancia, ordenar las declaraciones seg\u00fan la especificidad del selector de la regla en la que se encuentre. Cuanto mayor sea dicho valor mayor prioridad tendr\u00e1.</li> <li>Si despu\u00e9s de aplicar las normas anteriores existen dos o m\u00e1s declaraciones con la misma prioridad, se comprueba si la declaraci\u00f3n ha sido definida mediante una etiqueta <code>&lt;style&gt;</code>, que prevalecer\u00e1 frente a las definidas en archivos externos CSS vinculados.</li> <li>Si despu\u00e9s de aplicar las normas anteriores no se ha resuelto la colisi\u00f3n, se aplica la que se defini\u00f3 en \u00faltimo lugar, teniendo en cuenta en orden en el que se han vinculado los archivos CSS externos y la posici\u00f3n de la declaraci\u00f3n dentro de su archivos CSS.</li> </ol>"},{"location":"tema_3/page-1/","title":"1 Introducci\u00f3n al modelo de cajas","text":""},{"location":"tema_3/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>El modelo de cajas (box model) es seguramente la caracter\u00edstica m\u00e1s importante del lenguaje de hojas de estilos CSS, ya que condiciona el dise\u00f1o de todas las p\u00e1ginas web. El modelo de cajas es el comportamiento de CSS que hace que todos los elementos de las p\u00e1ginas se representen mediante cajas rectangulares.</p> <p>Las cajas de una p\u00e1gina se crean autom\u00e1ticamente. Cada vez que se inserta una etiqueta HTML, se crea una nueva caja rectangular que encierra los contenidos de ese elemento. La siguiente imagen muestra las tres cajas rectangulares que crean las tres etiquetas HTML que incluye la p\u00e1gina:</p> <p> Figura 1 - Modelo de Cajas</p> <p>Las cajas de las p\u00e1ginas no son visibles a simple vista porque inicialmente no muestran ning\u00fan color de fondo ni ning\u00fan borde.</p> <p>Los navegadores crean y colocan las cajas de forma autom\u00e1tica, pero CSS permite modificar todas sus caracter\u00edsticas. Cada una de las cajas est\u00e1 formada por seis partes, tal y como muestra la siguiente imagen:</p> <p> Figura 2 - Parte de una caja</p> <p>Las partes que componen cada caja y su orden de visualizaci\u00f3n desde el punto de vista del usuario son las siguientes:</p> <ul> <li>Contenido (content): se trata del contenido HTML del elemento (las palabras de un p\u00e1rrafo, una imagen, el texto de una lista de elementos, etc.)</li> <li>Relleno (padding): espacio libre opcional existente entre el contenido y el borde.</li> <li>Borde (border): l\u00ednea que encierra completamente el contenido y su relleno.</li> <li>Imagen de fondo (background image): imagen que se muestra por detr\u00e1s del contenido y el espacio de relleno.</li> <li>Color de fondo (background color): color que se muestra por detr\u00e1s del contenido y el espacio de relleno.</li> <li>Margen (margin): separaci\u00f3n opcional existente entre la caja y el resto de cajas adyacentes. El relleno y el margen son transparentes, por lo que en el espacio ocupado por el relleno se muestra el color o imagen de fondo (si est\u00e1n definidos) y en el espacio ocupado por el margen se muestra el color o imagen de fondo de su elemento padre (si est\u00e1n definidos). Si ning\u00fan elemento padre tiene definido un color o imagen de fondo, se muestra el color o imagen de fondo de la propia p\u00e1gina (si est\u00e1n definidos).</li> </ul> <p>Si una caja define tanto un color como una imagen de fondo, la imagen tiene m\u00e1s prioridad y es la que se visualiza. No obstante, si la imagen de fondo no cubre totalmente la caja del elemento o si la imagen tiene zonas transparentes, tambi\u00e9n se visualiza el color de fondo. Combinando im\u00e1genes transparentes y colores de fondo se pueden lograr efectos gr\u00e1ficos muy interesantes.</p> Ejercicio <p>Realiza una p\u00e1gina web que muestre una etiqueta padre <code>div</code> que contenga en su interior otra etiqueta <code>div</code>. Haz que tanto el padre como el hijo tengan una anchura de 200px. El <code>div</code> hijo debe mostrar el texto Pulsa. El color de fondo del <code>div</code> padre debe ser distinto del <code>div</code> hijo. Agrega un relleno de 10px al <code>div</code> padre. Centra horizontalmente el texto en el <code>div</code> hijo.</p> <p>Hazte las siguientes preguntas:</p> <p>\u00bfPor qu\u00e9 el espacio entre el borde y el contenido del <code>div</code> hijo se ve del color de fondo de dicha caja? \u00bfQu\u00e9 anchura real tiene el <code>div</code> hijo? \u00bfQu\u00e9 anchura real tiene el <code>div</code> padre? \u00bfQu\u00e9 altura tiene el <code>div</code> hijo? \u00bfQu\u00e9 altura tiene el <code>div</code> padre?</p> Ejercicio <p>Realiza el mismo ejercicio anterior, pero asegurando que la anchura real del div padre sea 200px</p>"},{"location":"tema_3/page-1/#modelo-de-calculo-de-anchura-y-altura","title":"Modelo de c\u00e1lculo de anchura y altura","text":"<p>La propiedad <code>box-sizing</code> se usa para establecer la forma de calcular la anchura y la altura de la caja que representa a un elemento.</p> Propiedad box-sizing Valores content-box | border-box | inherit Se aplica a Todos los elementos Valor inicial content-box Descripci\u00f3n Establece la forma de calcular el alto y el ancho de los elementos <p>Podemos especificar uno de los siguientes valores:</p> <ul> <li> <p><code>content-box</code>: Determina que las propiedades <code>width</code> y <code>height</code>, ancho y alto respectivamente, corresponden a la anchura y altura solo del contenido de la caja, pero no incluyen el relleno (padding), el borde (border) o el margen (margin). Por tanto la anchura real de la caja ser\u00e1 <code>width + padding + borde</code> y su altura real ser\u00e1 <code>height + padding + borde</code>. Por ejemplo, si especificamos la siguiente regla CSS:</p> <pre><code>.box{\nwidth: 300px;\nheight: 200px;\nborder: 2px solid black;\npadding: 10px;\n}\n</code></pre> <p>cualquier elemento de la clase <code>box</code> tendr\u00e1:</p> <ul> <li>una anchura de caja de 324px, calculada mediante la siguiente operaci\u00f3n: <code>2px (border-left) + 10px (padding-left) + 300px (width) + 10px (padding-right) + 2px (border-right)</code></li> <li>una altura de caja de 224px, calculada mediante la siguiente operaci\u00f3n: <code>2px (border-top) + 10px (padding-top) + 200px (height) + 10px (padding-bottom) + 2px (border-bottom)</code>.</li> </ul> </li> <li> <p><code>border-box</code>: Los valores especificados para las propiedades <code>width</code> y <code>height</code> corresponden al tama\u00f1o de la propia caja, no al tama\u00f1o del contenido, y por tanto incluyen el relleno (padding) y el borde (border), pero no el margen (margin). As\u00ed, si especificamos la siguiente regla CSS:</p> <pre><code>.box {\nbox-sizing: border-box;\nwidth: 300px;\nheight: 200px;\nborder: 2px solid black;\npadding: 10px;\n}\n</code></pre> <p>cualquier elemento de la clase <code>box</code> tendr\u00e1:</p> <ul> <li>Una anchura de caja de 300px, de manera que la anchura del contenido ser\u00e1 de 276px, calculada mediante la siguiente operaci\u00f3n:<code>300px - 2px (border-left) - 10px (padding-left) - 10px (padding-right) - 2px (border-right)</code></li> <li>Una altura de caja de 200px, de manera que la altura del contenido ser\u00e1 de 176px, calculada mediante la siguiente operaci\u00f3n: <code>200px - 2px (border-top) - 10px (padding-top) - 10px (padding-bottom) - 2px (border-bottom)</code>.</li> </ul> </li> </ul> <p>El problema del valor <code>content-box</code> es que el dise\u00f1ador tendr\u00e1 que hacer c\u00e1lculos matem\u00e1ticos para asegurarse de que las cajas caben en la posici\u00f3n deseada, dado que el tama\u00f1o real de la caja es mayor que el especificado en la propiedades <code>width</code> y <code>height</code>. Entonces \u00bfpor qu\u00e9 es el valor por defecto? El motivo es la compatibilidad con versiones anteriores de CSS. La propiedad <code>box-sizing</code> fue a\u00f1adida posteriormente en la especificaci\u00f3n CSS 3 y en CSS 2 todas las cajas utilizaban la forma de c\u00e1lculo descrita en el valor content-box.</p> <p>Si queremos resetear el comportamiento por defecto para todas las cajas, usaremos las siguientes reglas para hacer que el elemento ra\u00edz use el valor border-box y el resto de elementos hereden este comportamiento:</p> <pre><code>html {\nbox-sizing: border-box;\n}\n*, *:before, *:after {\nbox-sizing: inherit;\n}\n</code></pre> Ejercicio <p>Realiza el mismo ejercicio anterior, pero sin tener que hacer ning\u00fan c\u00e1lculo matem\u00e1tico</p>"},{"location":"tema_3/page-1/#anchura","title":"Anchura","text":"<p>La propiedad <code>width</code> establece la anchura del elemento. Si el valor de la propiedad <code>box-sizing</code> tiene el valor <code>content-box</code>, el valor indicado para <code>width</code> hace referencia a la anchura del contenido, no de la caja en s\u00ed. Si, por el contrario, la propiedad <code>box-sizing</code> tiene el valor <code>border-box</code>, el valor indicado para <code>width</code> hace referencia a la anchura de la caja, incluyendo el contenido, el relleno (padding) y el borde.</p> Propiedad width Valores unidad de medida | porcentaje | auto Se aplica a Todos los elementos, salvo los elementos que no sean im\u00e1genes, las filas de las tablas y los grupos de filas de tablas Valor inicial auto Descripci\u00f3n Estable la anchura de un elemento <p>La propiedad <code>width</code> no admite valores negativos y los valores en porcentaje se calculan a partir de la anchura de su elemento padre. El valor inherit indica que la anchura del elemento se hereda de su elemento padre. El valor <code>auto</code>, que es el que se utiliza si no se establece de forma expl\u00edcita un valor a esta propiedad, indica que el navegador debe calcular autom\u00e1ticamente la anchura del elemento, teniendo en cuenta sus contenidos, si se trata de un elemento en bloque o en l\u00ednea y el sitio disponible en la p\u00e1gina.</p> <p>Es muy importante resaltar que la propiedad width NO tendr\u00e1 efecto sobre los elementos en l\u00ednea, excepto la etiqueta <code>&lt;img&gt;</code>, as\u00ed como las filas de las tablas.</p> <p>Algunas veces querremos establecer que la anchura de un elemento sea variable y se adapte a la anchura de la ventana de visualizaci\u00f3n pero respetando ciertos l\u00edmites, es decir, que no sea tan estrecho como para que no se puedan mostrar correctamente su contenido y tampoco sea tan ancho como para que el contenido quede mal est\u00e9ticamente. Para estos casos, podemos establecer un valor relativo para la propiedad <code>width</code>, por ejemplo un porcentaje o un valor expresado en <code>vw</code>, en conjunci\u00f3n con las propiedades <code>min-width</code> y/o <code>max-width</code>, que permiten establecer, respectivamente, la anchura m\u00ednima y m\u00e1xima del elemento. El valor asignado a la propiedad <code>box-sizing</code> afecta a estas propiedades de manera similar a como afecta a <code>width</code>.</p> min-widthmax-width Propiedad min-width Valores unidad de medida | porcentaje Se aplica a Todos los elementos salvo filas y grupos de filas de tablas Valor inicial 0 Descripci\u00f3n Permite definir la anchura m\u00ednima de un elemento Propiedad max-width Valores unidad de medida | porcentaje | inherit Se aplica a Todos los elementos salvo filas y grupos de filas de tablas Valor inicial none Descripci\u00f3n Permite definir la anchura m\u00e1xima de un elemento <p>Si especificamos para la propiedad <code>width</code> un valor absoluto, por ejemplo en <code>px</code>, el valor establecido para las propiedades <code>min-width</code> o <code>max-width</code> no tendr\u00e1 ning\u00fan efecto, ya que se ha establecido una anchura fija para el elemento. De igual forma, si especificamos el valor de <code>width</code> en porcentaje y el de <code>min-width</code> o <code>max-width</code> tambi\u00e9n en porcentaje, NO se producir\u00e1 el resultado esperado. Lo adecuado es definir el valor de <code>width</code> como un porcentaje y el de <code>min-width</code> y/o <code>max-width</code> como un valor absoluto, por ejemplo en <code>px</code>.</p> <p>No debemos olvidar que las propiedades <code>min-width</code> y <code>max-width</code> no son heredadas por defecto, ya que sus valores iniciales no son inherit.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    width by irubenboy (@irubenboy)   on CodePen. </p> Ejercicio <p>Realiza una web que muestre un <code>div</code> padre cuya anchura sea el 50% de la anchura del viewport, variando entre 200px y 300px. Adem\u00e1s este <code>div</code> padre deber\u00e1 contener otro <code>div</code> hijo cuyo anchura sea el 50% del div padre y debe mostrar el texto 'H'</p> <p>Ambos <code>div</code> deben tener un relleno de 10px. Usa colores de fondo distintos para los dos <code>div</code></p>"},{"location":"tema_3/page-1/#altura","title":"Altura","text":"<p>La propiedad <code>height</code> establece la altura del elemento. Si el valor de la propiedad <code>box-sizing</code> tiene el valor <code>content-box</code>, el valor indicado para <code>height</code> hace referencia a la altura del contenido, no de la caja en s\u00ed. Si, por el contrario, la propiedad <code>box-sizing</code> tiene el valor <code>border-box</code>, el valor indicado para <code>height</code> hace referencia a la altura de la caja, incluyendo el contenido, el relleno (padding) y el borde.</p> Propiedad height Valores unidad de medida | porcentaje | auto Se aplica a Todos los elementos, salvo los elementos que no sean im\u00e1genes, las filas de las tablas y los grupos de filas de tablas Valor inicial auto Descripci\u00f3n Estable la altura de un elemento <p>Al igual que sucede con <code>width</code>, la propiedad <code>height</code> no admite valores negativos. Si se indica un porcentaje, se toma como referencia la altura del elemento padre. Si el elemento padre no tiene una altura definida expl\u00edcitamente, se asigna el valor auto a la altura.</p> <p>El valor <code>inherit</code> indica que la altura del elemento se hereda de su elemento padre. El valor <code>auto</code>, que es el que se utiliza si no se establece de forma expl\u00edcita un valor a esta propiedad, indica que el navegador debe calcular autom\u00e1ticamente la altura del elemento, teniendo en cuenta sus contenidos y el sitio disponible en la p\u00e1gina.</p> <p>Es muy importante resaltar que la propiedad <code>height</code> NO tendr\u00e1 efecto sobre los elementos en l\u00ednea, excepto la etiqueta <code>&lt;img&gt;</code>, as\u00ed como las columnas de las tablas.</p> <p>Algunas veces querremos establecer que la altura de un elemento sea variable pero respetando ciertos l\u00edmites. Para estos casos, podemos establecer un valor relativo para la propiedad <code>height</code>, por ejemplo un porcentaje o un valor expresado en <code>vw</code>, en conjunci\u00f3n con las propiedades <code>min-height</code> y/o <code>max-height</code>, que permiten establecer, respectivamente, la altura m\u00ednima y m\u00e1xima del elemento. El valor asignado a la propiedad box-sizing afecta a estas propiedades de manera similar a como afecta a height.</p> min-heightmax-height Propiedad min-height Valores unidad de medida | porcentaje Se aplica a Todos los elementos salvo filas y grupos de filas de tablas Valor inicial 0 Descripci\u00f3n Permite definir la altura m\u00ednima de un elemento Propiedad max-height Valores unidad de medida | porcentaje | inherit Se aplica a Todos los elementos salvo filas y grupos de filas de tablas Valor inicial none Descripci\u00f3n Permite definir la altura m\u00e1xima de un elemento <p>Si especificamos para la propiedad <code>height</code> un valor absoluto, por ejemplo en px, el valor establecido para las propiedades <code>min-height</code> o <code>max-height</code> no tendr\u00e1 ning\u00fan efecto, ya que se ha establecido una altura fija para el elemento. De igual forma, si especificamos el valor de <code>height</code> en porcentaje y el de <code>min-height</code> o <code>max-height</code> tambi\u00e9n en porcentaje, NO se producir\u00e1 el resultado esperado. Lo adecuado es definir el valor de <code>height</code> como un porcentaje y el de <code>min-height</code> y/o <code>max-height</code> como un valor absoluto, por ejemplo en px.</p> <p>No debemos olvidar que las propiedades <code>min-height</code> y <code>max-height</code> no son heredadas por defecto, ya que sus valores iniciales no son <code>inherit</code>.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    height by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-1/#desbordamiento-del-contenido","title":"Desbordamiento del contenido","text":"<p>Normalmente, los contenidos de un elemento se pueden mostrar en el espacio reservado para ese elemento. Sin embargo, en algunas ocasiones el contenido de un elemento no cabe en el espacio reservado para ese elemento, en cuyo caso se dice que el contenido se desborda.</p> <p>La situaci\u00f3n m\u00e1s habitual en la que el contenido sobresale de su espacio reservado es cuando se establece la anchura y/o altura de un elemento mediante la propiedad <code>width</code> y/o <code>height</code>. , aunque existen otras situaciones en las que tambi\u00e9n se produce, como por ejemplo con l\u00edneas de texto muy largas contenidas dentro de un elemento <code>&lt;pre&gt;</code>, que hacen que la p\u00e1gina entera sea demasiado ancha.</p> <p>No debemos olvidar que por defecto el texto se mover\u00e1 a una nueva l\u00ednea de forma natural cuando se llegue al final del elemento, por lo que en raras ocasiones el texto producir\u00e1 desbordamiento de anchura. Sin embargo, si hemos cambiado el valor de la propiedad <code>white-space</code>, como ocurre con las etiquetas <code>&lt;pre&gt;</code>, el texto si podr\u00e1 producir desbordamiento de anchura.</p> <p>Respecto a la altura, si no hemos especificado la altura de la caja mediante <code>height</code> o <code>max-height</code>, el fluir del texto haga que la caja sea simplemente m\u00e1s alta, ya que el valor por defecto para la propiedad height es auto, de manera que la altura de la caja es calculada en base su contenido, imposibilitando el desbordamiento de altura. Sin embargo, si hemos establecido una altura fija para la caja es perfectamente posible que si el texto es extenso se produzca un desbordamiento en altura.</p> <p>CSS define las propiedades <code>overflow-x</code>, <code>overflow-y</code> y <code>overflow</code> para controlar la forma en la que se visualizan los contenidos que sobresalen de sus elementos, respectivamente de forma horizontal, vertical y en ambos sentidos.</p> Propiedades <code>overflow</code>, <code>overflow-x</code>, <code>overflow-y</code> Valores visible | hidden | scroll | | auto | inherit Se aplica a Todos los elementos Valor inicial visible Descripci\u00f3n Define la forma en que se visualiza el contenido que sobresale de un elemento, debido a que no cabe en \u00e9l (en el eje x, en el eje y o en cualquiera de sus ejes) <p>Analicemos los posibles valores:</p> <ul> <li><code>visible</code>: el contenido no se corta y se muestra sobresaliendo de la zona reservada para visualizar el elemento. Este es el comportamiento por defecto.</li> <li><code>hidden</code>: el contenido sobrante se oculta y s\u00f3lo se visualiza la parte del contenido que cabe dentro de la zona reservada para el elemento.</li> <li><code>scroll</code>: solamente se visualiza el contenido que cabe dentro de la zona reservada para el elemento, pero tambi\u00e9n se muestran barras de scroll que permiten visualizar el resto del contenido.</li> <li><code>auto</code>: el comportamiento depende del navegador, aunque normalmente es el mismo que el valor scroll.</li> </ul> <p> See the Pen    overflow by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-2/","title":"2 Margen y Relleno","text":""},{"location":"tema_3/page-2/#margen","title":"Margen","text":"<p>CSS define cuatro propiedades para controlar cada uno de los m\u00e1rgenes horizontales y verticales de un elemento.</p> Propiedades <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, <code>margin-left</code> Valores unidad de medida | porcentaje | auto | inherit Se aplica a Todos los elementos, salvo margin-top y margin-bottom que s\u00f3lo se aplican a los elementos de bloque y a las im\u00e1genes Valor inicial 0 Descripci\u00f3n Establece cada uno de los m\u00e1rgenes horizontales y verticales de un elemento <p>Cada una de las propiedades establece la separaci\u00f3n entre el borde lateral de la caja y el resto de cajas adyacentes:</p> <p> Figura 3 - Margen</p> <p>Las unidades m\u00e1s utilizadas para indicar los m\u00e1rgenes de un elemento son los px (cuando se requiere una precisi\u00f3n total), los em y rem (para hacer dise\u00f1os que mantengan las proporciones) y los porcentajes, vw, vh (para hacer dise\u00f1os l\u00edquidos o fluidos).</p> <p>Los m\u00e1rgenes verticales (<code>margin-top</code> y <code>margin-bottom</code>) s\u00f3lo se pueden aplicar a los elementos de bloque y las im\u00e1genes, pero no a otros elementos en l\u00ednea, mientras que los m\u00e1rgenes laterales (<code>margin-left</code> y <code>margin-right</code>) se pueden aplicar a cualquier elemento.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    margin by irubenboy (@irubenboy)   on CodePen. </p> <p>Adem\u00e1s de las cuatro propiedades que controlan cada uno de los m\u00e1rgenes del elemento, CSS define una propiedad atajo (shorthand) que permite establecer los cuatro m\u00e1rgenes de forma simult\u00e1nea:</p> Propiedades <code>margin</code> Valores (unidad de medida | porcentaje | auto){1, 4} | inherit Se aplica a Todos los elementos salvo algunos casos especiales de elementos mostrados como tablas Valor inicial 0 Descripci\u00f3n Establece de forma directa todos los m\u00e1rgenes de un elemento <p>La notaci\u00f3n <code>{1, 4}</code> de la definici\u00f3n anterior significa que la propiedad margin admite entre uno y cuatro valores, con el siguiente significado:</p> <ul> <li>Si solo se indica un valor, todos los m\u00e1rgenes tienen ese valor.</li> <li>Si se indican dos valores, el primero se asigna al margen superior e inferior (margen vertical) y el segundo se asigna a los m\u00e1rgenes izquierdo y derecho (margen horizontal).</li> <li>Si se indican tres valores, el primero se asigna al margen superior, el tercero se asigna al margen inferior y el segundo valor se asigna los m\u00e1rgenes izquierdo y derecho.</li> <li>Si se indican los cuatro valores, el orden de asignaci\u00f3n es: margen superior, margen derecho, margen inferior y margen izquierdo. Por ejemplo, las siguientes reglas CSS son equivalentes:</li> </ul> <pre><code>p {\nmargin-top: .5em;\nmargin-bottom: .5em;\nmargin-left: 1em;\nmargin-right: .5em;\n}\np {\nmargin: .5em .5em .5em 1em;\n}\np {\nmargin: .5em;\nmargin-left: 1em;\n}\n</code></pre>"},{"location":"tema_3/page-2/#comportamiento-de-margenes","title":"Comportamiento de m\u00e1rgenes","text":"<p>Un aspecto curioso es que los m\u00e1rgenes pueden tomar valores negativos, acercando, e incluso, solapando elementos adyacentes.</p> <p>El valor <code>auto</code> indica al navegador a que sea \u00e9l el que establezca el margen. La mayor\u00eda de las veces el navegador asignar\u00e1 autom\u00e1ticamente al margen el valor 0. Sin embargo, si hay espacio disponible sin ocupar al lado del elemento, podr\u00e1 asignarle otro valor. Gracias a esta \u00faltima caracter\u00edstica podemos usar la propiedad <code>margin</code> para centrar horizontalmente un elemento, siempre y cuando le establezcamos una anchura determinada y asignemos el valor auto a <code>margin-left</code> y <code>margin-right</code>. Por ejemplo:</p> <p> See the Pen    center with margin by irubenboy (@irubenboy)   on CodePen. </p> <p>Si no hubi\u00e9ramos especificado la anchura del elemento, el valor auto de los m\u00e1rgenes izquierdo y derecho no hubiera causado ning\u00fan efecto, ya que el elemento ocupar\u00eda todo el ancho disponible del padre, al ser un elemento en bloque y el navegador haberle asignado autom\u00e1ticamente el valor 0 a los m\u00e1rgenes izquierdo y derecho.</p> <p>Un aspecto muy importante es que este uso del valor auto s\u00f3lo es \u00fatil para el centrado horizontal, NO sirve para centrar verticalmente un elemento.</p> <p>El comportamiento de los m\u00e1rgenes verticales es m\u00e1s complejo de lo que se puede imaginar. Cuando se juntan dos o m\u00e1s m\u00e1rgenes verticales, se fusionan de forma autom\u00e1tica y la altura del nuevo margen ser\u00e1 igual a la altura del margen m\u00e1s alto de los que se han fusionado.</p> <p> Figura 4 - Colapso vertical</p> <p>Cuando dos m\u00e1rgenes verticales entran en contacto se fusionan, con las siguientes reglas:</p> <ul> <li>Si ambos m\u00e1rgenes de positivos, s\u00f3lo se mantendr\u00e1 el de mayor tama\u00f1o.</li> <li>Si uno es positivo y el otro negativo, ambos m\u00e1rgenes se suman, produciendo un \u00fanico margen inferior al positivo.</li> <li>Si ambos m\u00e1rgenes son negativos, s\u00f3lo se mantendr\u00e1 el negativo de mayor magnitud.</li> </ul> <p>Veamos un ejemplo:</p> <p> See the Pen    margin collapse by irubenboy (@irubenboy)   on CodePen. </p> <p>De la misma forma, si un elemento est\u00e1 contenido dentro de otro elemento, sus m\u00e1rgenes verticales se fusionan y resultan en un nuevo margen de la misma altura que el mayor margen de los que se han fusionado:</p> <p> Figura 5 - Colapso vertical padre e hijo</p> <p>Aunque en principio puede parecer un comportamiento extra\u00f1o, la raz\u00f3n por la que se propuso este mecanismo de fusi\u00f3n autom\u00e1tica de m\u00e1rgenes verticales es el de dar uniformidad a las p\u00e1ginas web habituales.</p> <p>Si queremos evitar este comportamiento de fusi\u00f3n autom\u00e1tica de m\u00e1rgenes entre padres e hijos, bastar\u00e1 con a\u00f1adir un peque\u00f1o relleno (<code>padding: 1px</code>) o borde (<code>border: 1px solid transparent</code>) al elemento contenedor.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    avoid margin collapse by irubenboy (@irubenboy)   on CodePen. </p> <p>Dada la fusi\u00f3n que se puede dar entre m\u00e1rgenes verticales, se recomienda establecer la estrategia de usar siempre <code>margin-bottom</code> para separar los elementos, en vez de usar tanto <code>margin-top</code> como <code>margin-bottom</code>.</p> Ejercicio <p>Realiza una p\u00e1gina web que muestre dos etiquetas div hermanas de 200px de ancho y de 100px de alto, con color de fondo distinto, de manera que la primera se separe del borde izquierdo del body 20px, y la segunda se separe del borde izquierdo del body 40px. Adem\u00e1s la segunda caja debe aparecer encima de la mitad inferior de la primera.</p> <p>Hazte las siguientes preguntas:</p> <ol> <li>\u00bfC\u00f3mo conseguimos que el segundo div se dibuje encima del primero?</li> <li>\u00bfPor qu\u00e9 el primer div est\u00e1 separado del borde superior del body?</li> </ol>"},{"location":"tema_3/page-2/#relleno","title":"Relleno","text":"<p>CSS define cuatro propiedades para controlar cada uno de los espacios de relleno horizontales y verticales de un elemento.</p> Propiedades <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, <code>padding-left</code> Valores unidad de medida | porcentaje | inherit Se aplica a Todos los elementos excepto algunos elementos de tablas como grupos de cabeceras y grupos de pies de tabla Valor inicial 0 Descripci\u00f3n Establece cada uno de los rellenos horizontales y verticales de un elemento <p>Cada una de estas propiedades establece la separaci\u00f3n entre el contenido y los bordes laterales de la caja del elemento:</p> <p> Figura 5 - Padding</p> <p>Como sucede con los m\u00e1rgenes, CSS tambi\u00e9n define una propiedad de tipo \"shorthand\" llamada padding para establecer los cuatro rellenos de un elemento de forma simult\u00e1nea.</p> Propiedades <code>padding</code> Valores (unidad de medida | porcentaje |){1, 4} | inherit Se aplica a Todos los elementos excepto algunos elementos de tablas como grupos de cabeceras y grupos de pies de tabla Valor inicial 0 Descripci\u00f3n Establece de forma directa todos los rellenos de un elemento <p>La notaci\u00f3n <code>{1, 4}</code> de la definici\u00f3n anterior significa que la propiedad padding admite entre uno y cuatro valores, con el mismo significado que el de la propiedad <code>margin</code>.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    padding by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-3/","title":"3 Fondos","text":""},{"location":"tema_3/page-3/#introduccion","title":"Introducci\u00f3n","text":"<p>Otro de los elementos del modelo de cajas es el fondo de la caja, que puede ser desde un simple color a una (o m\u00e1s) im\u00e1genes.</p> <p>El valor por defecto para el fondo de una caja es el color transparente, por lo que si establecemos un color o imagen de fondo en al elemento <code>&lt;body&gt;</code>, todos los elementos de la p\u00e1gina se visualizan con el mismo fondo a menos que alg\u00fan elemento especifique su propio fondo.</p> <p>CSS define una serie de propiedades para establecer el fondo de cada elemento y su comportamiento.</p>"},{"location":"tema_3/page-3/#color","title":"Color","text":"<p>La propiedad <code>background-color</code> permite mostrar un color de fondo s\u00f3lido en la caja de un elemento. Esta propiedad no permite crear degradados ni ning\u00fan otro efecto avanzado.</p> Propiedad <code>background-color</code> Valores color | transparent | inherit Se aplica a Todos los elementos Valor inicial transparent Descripci\u00f3n Establece un color de fondo para los elementos <pre><code>body {\nbackground-color: #F5F5F5;\n}\n</code></pre>"},{"location":"tema_3/page-3/#imagen-de-fondo","title":"Imagen de fondo","text":"<p>La propiedad <code>background-image</code> permite mostrar una imagen como fondo de la caja de cualquier elemento.</p> Propiedad <code>background-imagen</code> Valores url# | none | inherit Se aplica a Todos los elementos Valor inicial none Descripci\u00f3n Establece una imagen de fondo para los elementos <pre><code>body {\nbackground-image: url(\"imagenes/fondo.png\");\n}\n</code></pre> <p>CSS permite establecer de forma simult\u00e1nea un color y una imagen de fondo. En este caso, la imagen se muestra delante del color, por lo que solamente si la imagen contiene zonas transparentes es posible ver el color de fondo.</p> <p>De igual forma, si especificamos varias im\u00e1genes de fondo (ya veremos como), se mostrar\u00e1n unas encima de otras, y estas incluyen zonas transparente, ser\u00e1 posible ver partes de una imagen inferior a trav\u00e9s de una superior.</p> <p>Las im\u00e1genes de fondo se indican a trav\u00e9s de su URL, que puede ser absoluta o relativa. Suele ser recomendable crear una carpeta de im\u00e1genes que se encuentre en el mismo directorio que los archivos CSS y que almacene todas las im\u00e1genes utilizadas en el dise\u00f1o de las p\u00e1ginas.</p> <p>As\u00ed, las im\u00e1genes correspondientes al dise\u00f1o de la p\u00e1gina se mantienen separadas del resto de im\u00e1genes del sitio y el c\u00f3digo CSS es m\u00e1s sencillo (por utilizar URL relativas) y m\u00e1s f\u00e1cil de mantener (por no tener que actualizar URL absolutas en caso de que se cambie la estructura del sitio web).</p> <p>Por otra parte, suele ser habitual indicar un color de fondo siempre que se muestra una imagen de fondo. En caso de que la imagen no se pueda mostrar o contenga errores, el navegador mostrar\u00e1 el color indicado (que deber\u00eda ser, en lo posible, similar a la imagen) y la p\u00e1gina no parecer\u00e1 que contiene errores.</p> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    Untitled by irubenboy (@irubenboy)   on CodePen. </p> <p>Si la imagen que se quiere mostrar es demasiado grande para el fondo del elemento, solamente se muestra la parte de imagen comprendida en el tama\u00f1o del elemento. Si la imagen que se establece como fondo de un elemento es m\u00e1s peque\u00f1a que el elemento en si, por defecto CSS la repite horizontal y verticalmente hasta llenar el fondo del elemento, aunque este comportamiento puede cambiar, como veremos a continuaci\u00f3n. Este comportamiento es \u00fatil para establecer un fondo complejo a una p\u00e1gina web entera. De esta forma, la imagen puede ser muy peque\u00f1a, y por tanto r\u00e1pida de descargar, y corresponder a un patr\u00f3n que se repita horizontal y verticalmente para cubrir el fondo de la caja, independientemente de su tama\u00f1o.</p>"},{"location":"tema_3/page-3/#modo-de-repeticion","title":"Modo de repetici\u00f3n","text":"<p>Como acabamos de comentar, si la imagen que se establece como fondo de un elemento es m\u00e1s peque\u00f1a que el elemento en si, por defecto CSS la repite horizontal y verticalmente hasta llenar el fondo del elemento. De esta manera, con una imagen tan sencilla como la siguiente, podemos establecer el fondo de cualquier caja, por muy grande que sea, y su visualizaci\u00f3n ser\u00e1 correcta:</p> <p> Figura 7 - Patr\u00f3n</p> <p>En ocasiones, no es conveniente que la imagen de fondo se repita horizontal y verticalmente. Para ello, CSS introduce la propiedad background-repeat que permite controlar la forma de repetici\u00f3n de las im\u00e1genes de fondo.</p> Propiedad <code>background-repeat</code> Valores repeat | repeat-x |repeat-y | no-repeat | space | round | inherit Se aplica a Todos los elementos Valor inicial repeat Descripci\u00f3n Controla la forma en la que se repiten las im\u00e1genes de fondo <p>Analicemos los posibles valores:</p> <ul> <li><code>repeat</code>: Indica que la imagen se debe repetir en todas direcciones y por tanto, es el comportamiento por defecto.</li> <li><code>no-repeat</code>: Muestra una sola vez la imagen y no se repite en ninguna direcci\u00f3n.</li> <li><code>repeat-x</code>: Repite la imagen s\u00f3lo horizontalmente.</li> <li><code>repeat-y</code>: Repite la imagen solamente de forma vertical.</li> <li><code>space</code>: No se recorta la \u00faltima repetici\u00f3n de la imagen de fondo, sino que no se muestra y el espacio sobrante el repartido como hueco entre el resto de las repeticiones de la imagen de la fila o columna.</li> <li><code>round</code>: La imagen se agranda lo suficiente como para que la no haya que recortar la \u00faltima repetici\u00f3n de la fila o columna.</li> </ul> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    background-repeat by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-3/#posicion","title":"Posici\u00f3n","text":"<p>Adem\u00e1s de seleccionar el tipo de repetici\u00f3n de las im\u00e1genes de fondo, CSS permite controlar la posici\u00f3n de la imagen dentro del fondo del elemento mediante la propiedad <code>background-position</code>.</p> Propiedad <code>background-position</code> Valores ((porcentaje | unidad de medida | left Se aplica a Todos los elementos Valor inicial 0% 0% Descripci\u00f3n Controla la posici\u00f3n en la que se muestra la imagen en el fondo del elemento <p>La propiedad <code>background-position</code> permite indicar la distancia que se desplaza la imagen de fondo respecto de su posici\u00f3n original situada en la esquina superior izquierda. S\u00f3lo tiene sentido cuando hayamos establecido la propiedad <code>background-repeat</code> al valor <code>no-repeat</code>.</p> <p>Si se indican dos porcentajes o dos medidas, el primero indica el desplazamiento horizontal y el segundo el desplazamiento vertical respecto del origen (situado en la esquina superior izquierda). Si solamente se indica un porcentaje o una medida, se considera que es el desplazamiento horizontal y al desplazamiento vertical se le asigna autom\u00e1ticamente el valor de 50%.</p> <p>Cuando se utilizan porcentajes, su interpretaci\u00f3n no es intuitiva. Si el valor de la propiedad <code>background-position</code> se indica mediante dos porcentajes <code>x% y%</code>, el navegador coloca el punto <code>(x%, y%)</code> de la imagen de fondo en el punto <code>(x%, y%)</code> del elemento.</p> <p>Las palabras clave permitidas son equivalentes a algunos porcentajes significativos: <code>top = 0%</code>, <code>left = 0%</code>, <code>center = 50%</code>, <code>bottom = 100%</code>, <code>right = 100%</code>.</p> <p>CSS permite mezclar porcentajes y palabras clave, como por ejemplo <code>50% 2cm</code>, <code>center 2cm</code>, <code>center 10%</code>.</p> <p>Si se utilizan solamente palabras clave, el orden es indiferente y por tanto, es equivalente indicar <code>top left</code> y <code>left top</code>.</p> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    background-position by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-3/#tamano","title":"Tama\u00f1o","text":"<p>La propiedad <code>background-size</code> especifica el tama\u00f1o de la imagen usada como fondo.</p> Propiedad <code>background-size</code> Valores [  || auto ]{1,2} | cover | contain Se aplica a Todos los elementos Valor inicial auto Descripci\u00f3n Especifica el tama\u00f1o de la imagen usada como fondo <p>El primer valor da la anchura de la imagen correspondiente, el segundo valor su altura. Si s\u00f3lo se define un valor el segundo se supone que es auto.</p> <p>Los valores pueden ser definidos en unidades de porcentaje (%) que ser\u00e1n relativas al tama\u00f1o de la superficie o en cualquier unidad de tama\u00f1o permitidas en CSS (em, rem, px, etc.).</p> <p>Adem\u00e1s disponemos de las siguientes valores:</p> <ul> <li><code>contain</code>: Escala la imagen, sin deformarla (sin alterar su relaci\u00f3n ancho/alto), para cubrir al menos un eje de la caja (X o Y) con una sola copia de la imagen. Esto es, muestra una copia completa de la imagen sin deformarla ni recortarla, cubriendo en la totalidad una de las dos dimensiones de la caja, dejando espacio sin cubrir si no coinciden las relaciones alto/ancho de ambos, imagen y caja.</li> <li> </li> </ul> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    background-size by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-3/#cover-escala-la-imagen-sin-deformarla-para-cubrir-la-totalidad-de-la-caja-recortando-si-es-necesario-la-parte-sobrante-para-mostrar-la-parte-de-la-imagen-que-interese-se-utiliza-con-background-position-este-es-el-valor-indicado-para-cubrir-todo-el-elemento-con-una-sola-imagen-sin-importar-la-relacion-de-tamanos-entre-caja-y-fondo","title":"<code>cover</code>: Escala la imagen sin deformarla para cubrir la totalidad de la caja, recortando si es necesario la parte sobrante. Para mostrar la parte de la imagen que interese se utiliza con background-position. Este es el valor indicado para cubrir todo el elemento con una sola imagen sin importar la relaci\u00f3n de tama\u00f1os entre caja y fondo.","text":""},{"location":"tema_3/page-3/#attachment","title":"Attachment","text":"<p>La propiedad <code>background-attachment</code> controla el comportamiento de la imagen de fondo al desplazar el elemento que lo contiene mediante scroll.</p> Propiedad <code>background-attachment</code> Valores scroll | fixed | local | inherit Se aplica a Todos los elementos Valor inicial scroll Descripci\u00f3n Controla el comportamiento de la imagen de fondo al desplazar el elemento que lo contiene mediante scroll <p>Los valores tienen el siguiente significado:</p> <ul> <li><code>scroll</code>: El fondo est\u00e1 fijado respecto al borde del elemento, por lo que al desplazar el elemento, el fondo sigue en la misma posici\u00f3n relativa. El \u00e1rea de dibujado y de posicionamiento del fondo es relativo al al borde.</li> <li><code>fixed</code>: El fondo est\u00e1 fijado respecto al viewport, por lo que al desplazar el elemento y cambiar \u00e9ste de posici\u00f3n su fondo cambia, ya que la imagen de fondo no se ha movido con \u00e9l. El \u00e1rea de dibujado y de posicionamiento del fondo es relativo al viewport, NO al borde del elemento.</li> <li><code>local</code>: El fondo est\u00e1 fijado respecto al contenido del elemento, por lo que si el elemento tiene alg\u00fan mecanismo de scroll interno, el fondo tambi\u00e9n se desplazar\u00e1 cuando se realiza un scroll del contenido. El \u00e1rea de dibujado y de posicionamiento del fondo es relativo al \u00e1rea desplazable del elemento, NO relativo al borde.</li> </ul> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    background-attachment by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-3/#area","title":"\u00c1rea","text":"<p>La propiedad <code>background-clip</code> determina qu\u00e9 \u00e1rea de la caja del elemento se utiliza para pintar el fondo. Si el fondo corresponde a una imagen, \u00e9sta se recorta para no incluir las zonas excluidas.</p> Propiedad <code>background-clip</code> Valores border-box | padding-box | content-box | inherit Se aplica a Todos los elementos Valor inicial border-box Descripci\u00f3n Determina qu\u00e9 \u00e1rea de la caja del elemento se utiliza para pintar el fondo <p>Los valores tienen el siguiente significado:</p> <ul> <li><code>border-box</code>: El \u00e1rea cubierta por el fondo ocupa al contenido, el padding y el borde.</li> <li><code>padding-box</code>: El \u00e1rea cubierta por el fondo ocupa el contenido y el padding, pero NO el borde.</li> <li><code>content-box</code>: El \u00e1rea cubierta por el fondo ocupa s\u00f3lo el contenido.</li> </ul> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    background-clip by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-3/#origen","title":"Origen","text":"<p>La propiedad <code>background-origin</code> indica qu\u00e9 elemento de la caja (borde, padding o contenido) act\u00faa como referente para el posicionamiento del fondo dentro de la caja, especificado por el valor de <code>background-position</code>.</p> <p>Si el valor de la propiedad <code>background-attachment</code> es fixed, entonces la propiedad <code>background-origin</code> no tiene efecto ninguno, ya que el posicionamiento es relativo al viewport.</p> Propiedad <code>background-origin</code> Valores border-box | padding-box | content-box | inherit Se aplica a Todos los elementos Valor inicial padding-box Descripci\u00f3n Indica qu\u00e9 elemento de la caja act\u00faa como referente para el posicionamiento del fondo <p>Los valores tienen el significado siguiente:</p> <ul> <li><code>border-box</code>: Posicionamiento relativo al borde.</li> <li><code>padding-box</code>: Posicionamiento relativo al padding.</li> <li><code>content-box</code>: Posicionamiento relativo al contenido.</li> </ul> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    background-origin by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-3/#propiedad-shorthand","title":"Propiedad shorthand","text":"<p>CSS define una propiedad de tipo shorthand <code>background</code> para indicar todas las propiedades del fondo de forma directa.</p> Propiedad <code>background</code> Valores ( background-image | background-position / background-size | background-repeat | background-attachment | background-origin | background-clip | background-color ) | inherit Se aplica a Todos los elementos Valor inicial - Descripci\u00f3n Establece todas las propiedades del fondo de un elemento <p>Podemos usar cualquier combinaci\u00f3n de las propiedades descritas anteriormente, en cualquier orden, aunque el orden recomendado es el que se muestra en el siguiente ejemplo:</p> <pre><code>body {\nbackground:\nurl(\"sweettexture.jpg\") /* image */\ntop center / 200px 200px /* position / size */\nno-repeat /* repeat */\nfixed /* attachment */\npadding-box /* origin */\ncontent-box /* clip */\nred; /* color */\n}\n</code></pre>"},{"location":"tema_3/page-3/#varias-imagenes","title":"Varias im\u00e1genes","text":"<p>Como hemos comentado anteriormente, CSS permite establecer varias im\u00e1genes de fondo, que se apilar\u00e1n una encima de otra, de manera que si una imagen contiene zonas transparentes podr\u00e1 visualizarse a trav\u00e9s de ellas im\u00e1genes inferiores de la pila.</p> <p>Para poder establecer varias im\u00e1genes de fondo utilizaremos las mismas propiedades que acabamos de ver, separando con coma <code>,</code> los valores correspondientes a la distintas im\u00e1genes, indic\u00e1ndolos en el mismo orden en todas las propiedades, para que hagan efecto a la imagen adecuada. Si para una propiedad se indica un \u00fanico valor, \u00e9ste se aplicar\u00e1 a todas las im\u00e1genes del fondo.</p> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    many images by irubenboy (@irubenboy)   on CodePen. </p> <p>Info</p> <p>Veamos unas demos interactivas sobre las propiedades para el fondo:</p> <ul> <li>Demo interactiva 1 de las propiedades para el fondo</li> <li>Demo interactiva 2 de las propiedades para el fondo</li> </ul>"},{"location":"tema_3/page-3/#background-blend-mode","title":"background-blend-mode","text":"<p>Cuando usamos varias im\u00e1genes de fondo podemos especificar tambi\u00e9n como se deben mezclar las distintas capas formadas por las im\u00e1genes correspondientes, para lo que usaremos la propiedad background-blend-mode.</p> Propiedad <code>background-blend-mode</code> Valores normal | multiply | screen | overlay | darken | lighten | color-dodge | color-burn | hard-light | soft-light | difference | exclusion | hue | saturation | color | luminosity | inherit Se aplica a Todos los elementos Valor inicial normal Descripci\u00f3n Describe c\u00f3mo las im\u00e1genes de fondo y el color de fondo del elemento deben mezclarse entre s\u00ed. <p>Los posibles valores tienen el siguiente significado:</p> <ul> <li><code>normal</code>: El color final es el de la capa superior, sin importar el color de fondo. El efecto es similar a dos trozos de papel sobrepuestos.</li> <li><code>multiply</code>: El color final es el resultado de multiplicar el color superior y el inferior. Una capa negra conduce a una capa final negra, y una capa blanca lleva a que no haya cambios. El efecto ese similar a dos im\u00e1genes impresas en papel transparente sobrepuestas.</li> <li><code>screen</code>: El color final ees el resultado de invertir los colores, multiplic\u00e1ndolos e invirtiendo el valor resultante. Una capa negra no produce cambio alguno, y una capa blanca conduce a una capa blanca final. El efecto es similar a dos im\u00e1genes mostr\u00e1ndose desde un proyector.</li> <li><code>overlay</code>: El color final es el resultado de multiply si el color inferior es m\u00e1s oscuro, o screen si el color inferior es m\u00e1s claro. Este modo de mezcla es equivalente a hard-light, pero si las capas son intercambiadas.</li> <li><code>darken</code>: El resultado final es un color compuesto de los valores m\u00e1s oscuros por cada canal de color.</li> <li><code>lighten</code>: El resultado final es un color compuesto de los valores m\u00e1s claros por cada canal de color.</li> <li><code>color-dodge</code>: El color final es el resultado de dividir el color inferior por el inverso del color superior. Un fondo negro no produce cambio alguno. Un color de primer plano con el color invertido del fondo produce un color completamente iluminado. Este modo de mezcla es similar a screen, pero basta con que el color de primer plano sea tan claro como el inverso del color de fondo para alcanzar un color completamente iluminado.</li> <li><code>color-burn</code>: El color final es el resultado de invertir el color de fondo, divide el valor por el color superior, e invertir ese valor. Un fondo blanco no produce cambio alguno. Un color de primer plano con el color invertido del fondo produce una imagen negra. Este modo de mezcla es similar a multiply, pero basta con que el color de primer plano sea tan oscuro como el inverso del color de fondo para dar como resultado una imagen negra.</li> <li><code>hard-light</code>: El color final es el resultado de multiply si el color superior es m\u00e1s oscuro, o screen si el color superior es m\u00e1s oscuro. Este modo de mezcla es equivalente a overlay, pero con las capas intercambiadas. El efecto es similar a encender un foco con mucha intensidad en el fondo.</li> <li><code>soft-light</code>: El color final es similar a hard-light, pero m\u00e1s suave. Este modo de mezcla se comporta similar a hard-light. El efecto es similar a encender un foco difuso en el fondo.</li> <li><code>difference</code>: El color final es el resultado de restar el color m\u00e1s oscuro de las dos capas, del m\u00e1s claro. Una capa negra no produce efecto alguno, mientras una capa blanca invierte el color de la otra capa.</li> <li><code>exclusion</code>: El color final es similar a difference, pero con menor contraste. As\u00ed como con difference, una capa negra no produce efecto alguno, mientras una capa blanca invierte el color de la otra capa.</li> <li><code>hue</code>: El color final tiene el matiz del color superior, mientras usa la saturaci\u00f3n y luminosidad del color inferior. saturation: El color final tiene la saturaci\u00f3n del color superior, mientras usa el matiz y luminosidad del color inferior. Un fondo gris puro, que no tenga saturaci\u00f3n, no producir\u00e1 efecto alguno.</li> <li><code>color</code>: El color final tiene el matiz y saturaci\u00f3n del color superior, mientras usa la luminosidad del color inferior. El efecto preserva los niveles de grid y puede ser usado para colorear el primer plano.</li> <li><code>luminosity</code>: El color final tiene la luminosidad del color superior, mientras usa el matiz y saturaci\u00f3n del color inferior. Este modo de mezcla es equivalente a color, pero con las capas intercambiadas.</li> </ul> <p>Los modos hue, saturation, color y luminosity no son soportados por Safari.</p> <p>Info</p> <p>Veamos una demo interactiva sobre los distintos valores de mezcla de capas de fondo:</p> <p>Demo interactiva de background-blend-mode</p>"},{"location":"tema_3/page-4/","title":"4 Bordes","text":""},{"location":"tema_3/page-4/#introduccion","title":"Introducci\u00f3n","text":"<p>CSS permite modificar el aspecto de cada uno de los cuatro bordes de la caja de un elemento. Para cada borde se puede establecer su anchura o grosor, su color, su estilo, el radio de las esquinas e incluso una imagen para dibujarlo. por lo que en total CSS define 31 propiedades relacionadas con los bordes.</p>"},{"location":"tema_3/page-4/#anchura","title":"Anchura","text":"<p>La anchura de los bordes se controla con las cuatro propiedades siguientes:</p> Propiedades <code>border-top-width</code>, <code>border-right-width</code>, <code>border-left-width</code>, <code>border-bottom-width</code> Valores (unidad de medida | thin | medium | thick ) | inherit Se aplica a Todos los elementos Valor inicial medium Descripci\u00f3n Establece la anchura de cada uno de los cuatros bordes de los elementos <p>La anchura de los bordes se indica mediante una medida (en cualquier unidad de medida absoluta o relativa) o mediante las palabras clave <code>thin</code> (delgado), <code>medium</code> (normal) y <code>thick</code> (ancho).</p> <p>La unidad de medida m\u00e1s habitual para establecer el grosor de los bordes es el px, ya que es la que permite un control m\u00e1s preciso sobre el grosor. Las palabras clave apenas se utilizan, ya que el est\u00e1ndar CSS no indica expl\u00edcitamente el grosor al que equivale cada palabra clave, por lo que pueden producirse diferencias visuales entre navegadores.</p> <p>Si se quiere establecer de forma simult\u00e1nea la anchura de todos los bordes de una caja, es necesario utilizar una propiedad shorthand llamada <code>border-width</code>:</p> Propiedades <code>border-width</code> Valores (unidad de medida | thin | medium | thick ) {1,4} | inherit Se aplica a Todos los elementos Valor inicial medium Descripci\u00f3n Establece la anchura de todos los bordes del elemento <p>La propiedad <code>border-width</code> permite indicar entre uno y cuatro valores. El significado de cada caso es el habitual de las propiedades shorthand:</p> <ul> <li>Si se indica un solo valor, se aplica a los cuatro bordes.</li> <li>Si se indican dos valores, el primero se aplica al borde superior e inferior y el segundo valor se aplica al borde izquierdo y derecho.</li> <li>Si se indican tres valores, el primero se aplica al borde superior, el segundo se aplica al borde izquierdo y derecho y el tercer valor se aplica al borde inferior. Si se indican los cuatro valores, el orden de aplicaci\u00f3n es superior, derecho, inferior e izquierdo.</li> </ul>"},{"location":"tema_3/page-4/#color","title":"Color","text":"<p>El color de los bordes se controla con las cuatro propiedades siguientes:</p> Propiedades <code>border-top-color</code>, <code>border-right-color</code>, <code>border-left-color</code>, <code>border-bottom-color</code> Valores color | transparent | inherit Se aplica a Todos los elementos Valor inicial - Descripci\u00f3n Establece el color de cada uno de los cuatro bordes de los elementos <p>CSS incluye una propiedad shorthand llamada <code>border-color</code> para establecer de forma simult\u00e1nea el color de todos los bordes de una caja:</p> Propiedades <code>border-color</code> Valores (color | transparent ) {1,4} | inherit Se aplica a Todos los elementos Valor inicial - Descripci\u00f3n Establece el color de todos los bordes del elemento <p>En este caso, al igual que sucede con la propiedad <code>border-width</code>, es posible indicar de uno a cuatro valores y las reglas de aplicaci\u00f3n son id\u00e9nticas a las de la propiedad <code>border-width</code>.</p>"},{"location":"tema_3/page-4/#estilo","title":"Estilo","text":"<p>CSS tambi\u00e9n permite establecer el estilo de cada uno de los bordes mediante las siguientes propiedades:</p> Propiedades <code>border-top-style</code>, <code>border-right-style</code>, <code>border-left-style</code>, <code>border-bottom-style</code> Valores none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset | inherit Se aplica a Todos los elementos Valor inicial none Descripci\u00f3n Establece el estilo de cada uno de los cuatro bordes de los elementos <p>El estilo de los bordes s\u00f3lo se puede indicar mediante alguna de las palabras reservadas definidas por CSS, como <code>hidden</code> (oculto), <code>dotted</code> (punteado), <code>dashed</code> (con guiones), <code>solid</code> (l\u00ednea contin\u00faa), <code>double</code> (l\u00ednea doble), <code>groove</code> (ranura 3D), <code>ridge</code> (marco 3D), <code>inset</code> (hundido hacia dentro), <code>outset</code> (resaltado hacia fuera).</p> <p>Como el valor por defecto de esta propiedad es <code>none</code>, los elementos no muestran ning\u00fan borde visible a menos que se establezca expl\u00edcitamente un estilo de borde</p> <p>Para establecer de forma simult\u00e1nea los estilos de todos los bordes de una caja, es necesario utilizar la propiedad shorthand llamada <code>border-style</code>:</p> Propiedades <code>border-style</code> Valores (none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset) {1, 4} | inherit Se aplica a Todos los elementos Valor inicial - Descripci\u00f3n Establece el estilo de todos los bordes del elemento <p>Como es habitual, la propiedad permite indicar de uno a cuatro valores diferentes y las reglas de aplicaci\u00f3n son las habituales de las propiedades shorthand.</p>"},{"location":"tema_3/page-4/#bordes-laterales","title":"Bordes laterales","text":"<p>Como sucede con los m\u00e1rgenes y los rellenos, CSS define una serie de propiedades de tipo shorthand que permiten establecer los atributos descritos anteriormente a los bordes de forma simult\u00e1nea. CSS incluye una propiedad shorthand para cada uno de los cuatro bordes y una propiedad shorthand global.</p> Propiedades <code>border-top</code>, <code>border-right</code>, <code>border-left</code>,<code>border-bottom</code> Valores (grosor | color | estilo) | inherit Se aplica a Todos los elementos Valor inicial - Descripci\u00f3n Establece el estilo completo de cada uno de los cuatro bordes de los elementos <p>Veamos un ejemplo:</p> <pre><code>h1 {\nborder-bottom: solid red;\n}\n</code></pre> <p>En el ejemplo anterior, la anchura del borde ser\u00e1 la correspondiente al valor por defecto (<code>medium</code>). Este otro ejemplo muestra la forma habitual utilizada para establecer el estilo de cada borde:</p> <pre><code>div {\nborder-top: 1px solid #369;\nborder-bottom: 3px double #369;\n}\n</code></pre>"},{"location":"tema_3/page-4/#borde-global","title":"Borde global","text":"<p>Por ultimo, CSS define una propiedad de tipo shorthand global para establecer el valor de todos los atributos de todos los bordes de forma directa:</p> Propiedades <code>border</code> Valores (grosor | color | estilo) | inherit Se aplica a Todos los elementos Valor inicial - Descripci\u00f3n Establece el estilo completo de todos los bordes de los elementos <p>Las siguientes reglas CSS son equivalentes:</p> <pre><code>div {\nborder-top: 1px solid red;\nborder-right: 1px solid red;\nborder-bottom: 1px solid red;\nborder-left: 1px solid red;\n}\ndiv { border: 1px solid red; }\n</code></pre> <p>Como el valor por defecto de la propiedad <code>border-style</code> es <code>none</code>, si una propiedad shorthand no establece expl\u00edcitamente el estilo de un borde, el elemento no muestra ese borde. Por ejemplo:</p> <pre><code>/* S\u00f3lo se establece el color, por lo que el estilo es\n    \"none\" y el borde no se muestra */\ndiv { border: red; }\n</code></pre> <p>Cuando los cuatro bordes no son id\u00e9nticos pero s\u00ed muy parecidos, se puede utilizar la propiedad <code>border</code> para establecer de forma directa los atributos comunes de todos los bordes y posteriormente especificar para cada uno de los cuatro bordes sus propiedades particulares. Por ejemplo:</p> <pre><code>h1 {\nborder: solid #000;\nborder-top-width: 6px;\nborder-left-width: 8px;\n}\n</code></pre> <p>Demo interactiva para los bordes</p> <p>http://informaticasaladillo.es/aplweb/cssinteractivedemos/border_demo.html</p> Ejercicio <p>Realiza una p\u00e1gina web que muestre el mismo resultado del ejemplo (cajas de colores cada una dentro de la otra), pero usando bordes. La caja m\u00e1s interna si tendr\u00e1 color de fondo, pero el resto no.</p>"},{"location":"tema_3/page-4/#esquinas-redondeas","title":"Esquinas redondeas","text":"<p>Para hacer que las esquinas de los bordes tengan aspecto redondeado podemos usar las cuatro propiedades siguientes:</p> Propiedades <code>border-top-left-radius</code>, <code>border-top-right-radius</code>, <code>border-bottom-left-radius</code>, <code>border-bottom-right-radius</code> Valores [|]{1,2} Se aplica a Todos los elementos Valor inicial 0 Descripci\u00f3n Establece el radio de curvatura de uno de los cuatro bordes de los elementos <p>Para especificar el radio, podemos usar como valor:</p> <ul> <li>Una longitud expresada en px, por ejemplo 10px.</li> <li>Un porcentaje, por ejemplo 10%.</li> </ul> <p>En realidad podemos proporcionar hasta dos valores:</p> <ul> <li>Si proporcionamos un \u00fanico valor, \u00e9ste corresponder\u00e1 al radio horizontal y al vertical.</li> <li>Si proporcionamos dos valores, el primero corresponder\u00e1 al radio horizontal y el segundo al vertical.</li> </ul> <p>Si queremos especificar de una vez el radio de las cuatro esquinas, podemos usar la propiedad shorthand <code>border-radius</code>:</p> Propiedades <code>border-radius</code> Valores [ | ]{1,4} [ / [ | ]{1,4} ]? Se aplica a Todos los elementos Valor inicial 0 Descripci\u00f3n Establece el radio de curvatura de los bordes de los elementos <p>Podemos especificar entre 1 y 8 valores:</p> <ul> <li>Si especificamos un \u00fanico valor, \u00e9ste corresponder\u00e1 al radio horizontal y vertical de las cuatro esquinas.</li> <li>Si especificamos m\u00e1s de uno, deben indicarse en el siguiente orden: superior izquierda, superior derecha, inferior derecha e inferior izquierda (siguiendo las agujas del reloj).</li> <li>Si se omite el valor para la inferior izquierda, se le asignar\u00e1 el valor de la superior derecha (el opuesto en la diagonal). Si se omite la inferior derecha, se le asignar\u00e1 el valor de la superior izquierda.t</li> <li>Para establecer diferentes valores para el radio horizontal y el radio vertical de una esquina, usaremos el formato radio_horizontal / radio_vertical.</li> <li>Una aplicaci\u00f3n curiosa de esta propiedad es hacer que un elemento sea totalmente redondo. Bastar\u00e1 con que tenga la misma anchura que altura y establezcamos el radio de los cuatro bordes al valor 50%.</li> </ul> <p>Tambi\u00e9n podemos hacer que el borde sea semitransparente, en cuyo caso se mezclar\u00e1, por defecto, con el color/imagen de fondo del elemento. Si no queremos que se fusione con el color de fondo del elemento sino con el padre, podemos usar la propiedad <code>background-clip: padding-box</code> para indicar que el fondo del elemento se dibuje detr\u00e1s del contenido y del padding, pero no del borde.</p> <p>Otro efecto curioso es simular que los bordes redondeados son interiores. Para ello, simplemente introduciremos una caja en otra, y haremos que los bordes de la interior queden redondeados.</p> <p>Podemos usar tambi\u00e9n el siguiente generador online para crear visualmente las esquinas redondeadas,</p> <p>Demos interactivas</p> <p>Demo interactiva 1 de border-radius</p> <p>Demo interactiva 2 de border-radius</p> <p>Demo interactiva 3 de border-radius</p> <p>Demo interactiva 4 de border-radius</p> <p>Finalmente, veamos unos ejemplos de elementos con distintos tipos de borde:</p> <p> See the Pen    border by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-4/#borde-formado-por-imagen","title":"Borde formado por imagen","text":"<p>La propiedad <code>border-image</code> permite usar im\u00e1genes en los bordes. Es dependiente de la existencia de un \u00e1rea de borde, es decir, que si <code>border-width</code> es 0 la propiedad <code>border-image</code> no se aplicar\u00e1.</p> <p>El \u00e1rea de la imagen del borde, a diferencia del \u00e1rea del borde, se extiende a trav\u00e9s de todo el elemento, incluyendo las otras \u00e1reas del modelo de caja (border area, padding area, content area). Esto permite utilizar la imagen del borde (a pesar de su nombre) no s\u00f3lo como fondo del elemento, sino que tambi\u00e9n permite extender la imagen del borde fuera de la zona del borde.</p> <p>La propiedad <code>border-image</code> es la forma acortada de otras propiedades que controlan el uso de im\u00e1genes en los bordes:<code>border-image-source</code>, <code>border-image-slice</code>, <code>border-image-outset</code>, <code>border-image-repeat</code> y <code>border-image-width</code>.</p> <p>La propiedad <code>border-image-source</code> define la ruta a la imagen que se utilizar\u00e1 como borde. La imagen se mostrar\u00e1 en lugar de cualquier otro valor que tenga border-style declarado. La forma en que se aplica la imagen depender\u00e1 de los valores de las otras cuatro propiedades de <code>border-image</code>.</p> Propiedades <code>border-image-source</code> Valores url | none Se aplica a Todos los elementos Valor inicial none Descripci\u00f3n Establece la imagen a utilizar como borde <p>Por ejemplo:</p> <pre><code>.module {\nborder-image-source: url(\"border.png\");\n}\n</code></pre> <p>La propiedad <code>border-image-slice</code> define cu\u00e1nto se recorta la imagen para crear el borde. Los valores especifican la cantidad de p\u00edxeles desde el borde exterior hacia adentro de la imagen que se preservar\u00e1n al recortar. Debemos tener en cuenta que la cantidad indicada NO controla la anchura del borde, sino tan s\u00f3lo define la zona a preservar al recortar.</p> Propiedades <code>border-image-slice</code> Valores [ | ]{1,4}   | fill Se aplica a Todos los elementos Valor inicial none Descripci\u00f3n Establece la imagen a utilizar como borde <p>El valor <code>fill</code> indica que la imagen NO debe recortarse. En vez del valor <code>fill</code>, puede recibir de 1 a 4 valores:</p> <ul> <li>De 1 a 4 valores num\u00e9ricos: Indican la cantidad en p\u00edxeles (NO hay que incluir la unidad px) desde cada borde de la imagen hacia dentro que hay que preservar de la imagen al recortarla (indicados como arriba, derecha, abajo e izquierda).</li> <li>De 1 a 4 porcentajes: Indican el porcentaje del alto/ancho de la imagen desde cada borde hacia adentro que hay que preservar al recortar. En el siguiente ejemplo se preservar\u00e1n 20 p\u00edxeles desde cada borde de la imagen hacia adentro para conformar el borde de la caja:</li> </ul> <p> Figura 8 - border-image-slice</p> <p>Al aplicar una zona de recorte, se crea internamente una cuadr\u00edcula de 9 celdas, donde la celda central es recortada y el resto se usar\u00e1 para dibujar las diferentes zonas del borde.</p> <p> Figura 9 - Cuadr\u00edcula border-image-slice</p> <p>La propiedad <code>border-image-outset</code> define cu\u00e1nto se extiende la imagen del borde fuera del \u00e1rea del borde. Puede recibir un valor n\u00famero, que representa m\u00faltiplos del valor de <code>border-width</code>, o un valor en px (incluyendo la unidad px)</p> Propiedades <code>border-image-outset</code> Valores [  |  ]{1,4} Se aplica a Todos los elementos Valor inicial 0 Descripci\u00f3n Establece cu\u00e1nto se extiende la imagen del borden fuera del \u00e1rea de borde <p>La propiedad <code>border-image-repeat</code> define c\u00f3mo se trata la imagen del borde una vez recorta, escal\u00e1ndose o repiti\u00e9ndola, si no es lo suficientemente grande para cubrir todo el \u00e1rea del borde.</p> Propiedades <code>border-image-repeat</code> Valores [stretch | repeat | round | space]{1,2} Se aplica a Todos los elementos Valor inicial stretch Descripci\u00f3n Establece el modo de repetici\u00f3n de la imagen de borde dentro del \u00e1rea de borde <p>Puede tomar los siguientes valores para los bordes horizontales y verticales (en este orden):</p> <ul> <li><code>stretch</code>: La imagen se estira para rellenar la anchura de borde</li> <li><code>repeat</code>: La imagen se repite para rellenar la anchura de borde</li> <li><code>round</code>: La imagen forma un mosaico. Si no se rellena el \u00e1rea con un n\u00famero entero de repeticiones, cada imagen se reescala.</li> <li><code>space</code>: La imagen forma un mosaico. Si no se rellena el \u00e1rea con un n\u00famero entero de repeticiones el espacio sobrante se redistribuye entre cada imagen. No soportado a\u00fan por Chrome.</li> </ul> <p>Note</p> <p>NO debemos pensar que a partir de una \u00fanica imagen completa podemos crear un borde en forma de mosaico repiti\u00e9ndola por todo el borde. Es necesario crear una nueva imagen que incluya la imagen original en cada una de las 9 celdas de la cuadr\u00edcula y despu\u00e9s recortarla haciendo uso de <code>border-image-slice</code>.</p> <p>La propiedad <code>border-image-width</code> define el ancho real de la imagen del borde. Aunque, por defecto, el ancho es el mismo que el <code>border-width</code>, la imagen del borde puede cubrir m\u00e1s o menos de \u00e9l.</p> Propiedades <code>border-image-width</code> Valores [  ||  | auto ]{1,4} Se aplica a Todos los elementos Valor inicial 1 Descripci\u00f3n Define el ancho real de la imagen de borde <p>Podemos especificar un valor para los cuatro lados o especificar el valor de cada lado, con las siguientes posibilidades:</p> <ul> <li>Un n\u00famero, que representa m\u00faltiplos del valor de <code>border-width</code></li> <li>Un porcentaje respecto del del \u00e1rea de borde</li> <li>Un valor en p\u00edxeles (incluyendo la unidad px)</li> </ul> <p>Podemos especificar todas las propiedades anterior de una sola vez haciendo uso de la propiedad shorthand <code>border-image</code>.</p> Propiedades <code>border-image</code> Valores [] Se aplica a Todos los elementos Valor inicial - Descripci\u00f3n Establece una imagen de borde <p>S\u00f3lo los dos primeros valores son obligatorios.</p> <p>Demos interactivas</p> <p>Demo interactiva 1 de border-image</p> <p>Demo interactiva 2 de border-image</p> <p>Demo interactiva 3 de border-image</p> <p>Demo interactiva 4 de border-image</p> <p>Finalmente veamos varios ejemplos:</p> <p> See the Pen    border.image by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-5/","title":"5 Contorno y sombra","text":""},{"location":"tema_3/page-5/#contorno","title":"Contorno","text":"<p>CSS permite dibujar un contorno alrededor de la caja de un elemento. A dicho contorno se le conoce como <code>outline</code>, y se usa normalmente para indicar visualmente al usuario qu\u00e9 elemento es el que tiene el foco.</p> <p>La propiedad <code>outline-color</code> define el color del trazo dibujado como contorno.</p> Propiedad <code>outline-color</code> Valores color | invert | inherit Se aplica Todos los elementos Valor inicial invert Descripci\u00f3n Establece el color de todos los bordes del elemento <p>El valor <code>invert</code> indica que se utilice como color el inverso al que haya en el fondo, de manera que nos aseguremos de que el contorno es visible. No es soportado por todos los navegadores.</p> <p>La propiedad <code>outline-style</code> define el estilo del trazo dibujado como contorno.</p> Propiedad <code>outline-style</code> Valores none | auto | dotted | solid | double | groove | ridge | inset | outset | inherit Se aplica Todos los elementos Valor inicial none Descripci\u00f3n Establece el estilo del trazo dibujado como contorno <p>El significado cada uno de los valores es similar al de la propiedad <code>border-style</code>. Sin embargo, no se puede usar el valor <code>hidden</code>. Adem\u00e1s tenemos el valor <code>auto</code>, que indica que sea el navegador el que elija el estilo.</p> <p>La propiedad <code>outline-width</code> define la anchura del trazo dibujado como contorno.</p> Propiedad <code>outline-width</code> Valores unidad de medida | thin | medium | thick | inherit Se aplica Todos los elementos Valor inicial medium Descripci\u00f3n Define al anchura del trazo dibujado como contorno <p>El significado cada uno de los valores es similar al de la propiedad <code>border-width</code>.</p> <p>La propiedad <code>outline</code> es una propiedad shorthand de las tres anteriores, que permite establecer el color, el estilo y la anchura del contorno de una vez.</p> Propiedad <code>outline</code> Valores Se aplica Todos los elementos Valor inicial - Descripci\u00f3n Define el color, el estilo y la anchura del contorno <p>No debemos confundir el contorno de la caja con su borde, ya que presentan una serie de diferencias.</p> <p>El contorno se dibuja a partir del l\u00edmite exterior del borde (por fuera del borde). El contorno es id\u00e9ntico en los cuatro lados, NO se puede especificar que el contorno derecho sea por ejemplo diferente del contorno izquierdo.</p> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    outline by irubenboy (@irubenboy)   on CodePen. </p> <p>El contorno NO se tiene en cuenta a la hora de establecer el tama\u00f1o de la caja, por lo que la aparici\u00f3n u ocultaci\u00f3n del contorno no provoca el redibujado de las cajas adyacentes. Es decir NO pertenece al modelo de caja. Dado que no forma parte del tama\u00f1o de la caja, el contorno puede aparecer solapado respecto a otros elementos (o \u00e9l mismo).</p> <p>Veamos un ejemplo:</p> <p> See the Pen    outline2 by irubenboy (@irubenboy)   on CodePen. </p> <p>Si el elemento se distribuye en varias l\u00edneas, el contorno no forma un rect\u00e1ngulo para encerrar a todo el elemento, sino que se muestra en ambas l\u00edneas all\u00e1 donde est\u00e9 presente el elemento.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    outline3 by irubenboy (@irubenboy)   on CodePen. </p> <p>El contorno no se ve\u00eda afectado por la propiedad <code>border-radius</code>, por lo que aunque las esquinas del bordes est\u00e9n redondeadas, el contorno segu\u00eda usando esquinas rectas. Este comportamiento estaba considerado un bug de los navegadores pero se ha corregido en versiones recientes.</p> <p> See the Pen    Untitled by irubenboy (@irubenboy)   on CodePen. </p> <p>El uso m\u00e1s habitual de esta propiedad es el marcado del campo de formulario que tiene el foco en un momento dado.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    outline5 by irubenboy (@irubenboy)   on CodePen. </p> <p>Por defecto, el contorno se dibuja justo desde borde de la caja hacia fuera. Sin embargo, con la propiedad <code>outline-offset</code> podemos establecer la distancia desde el borde a la que pintar el contorno. Si establecemos un valor negativo esto puede significar que el contorno se dibujo dentro de la propia caja.</p> Propiedad <code>outline-offset</code> Valores Se aplica a Todos los elementos Valor inicial 0 Descripci\u00f3n Establece la distancia desde el borde a la que pintar el contorno <p>Veamos un ejemplo:</p> <p> See the Pen    outline6 by irubenboy (@irubenboy)   on CodePen. </p> <p>Si establecemos un valor negativo esto puede significar que el contorno se dibujo dentro de la propia caja.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    outline7 by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-5/#sombra","title":"Sombra","text":"<p>La propiedad <code>box-shadow</code> permite agregar una o m\u00e1s sombras a la caja de un elemento. La sombra puede ser de cualquier color e incluso poseer un efecto de desenfoque, conocido como gaussian blur. Tambi\u00e9n podremos especificar la distancia respecto al borde en el que hay que dibujar la sombra e incluso si se trata de una sombra interior.</p> <p>|Propiedad      |<code>box-shadow</code>                                                   | |---------------| | none   | |Se aplica      |Todos los elementos                                            | |Valor inicial  |none                                                           | |Descripci\u00f3n    |Establece la sombra de la caja                                 | <p>Los valores tienen el siguiente significado:</p> <ul> <li>Desplazamiento horizontal de la sombra: Desplazamiento horizontal de la sombra de la caja respecto de la propia caja del elemento. Si el valor es positivo la sombra ser\u00e1 hacia la derecha y si es negativo hacia la izquierda.</li> <li>Desplazamiento vertical: Desplazamiento vertical de la sombra de la caja respecto de la propia caja del elemento. Si el valor es positivo la sombra ser\u00e1 hacia abajo y si es negativo hacia arriba.</li> <li>Radio de desenfoque: Es opcional. Define la dureza o suavidad de la sombra. Cuanto menor sea el valor, m\u00e1s n\u00edtida la sombra. Un valor alto crear\u00e1 un desenfoque grande. Los negativos se consideran 0.</li> <li>Distancia de propagaci\u00f3n: Es opcional. Define el tama\u00f1o de la sombra respecto al del elemento. Un valor negativo har\u00e1 que la sombra sea m\u00e1s peque\u00f1a que el elemento que la genera y un valor positivo, que sea mayor.</li> <li>Color: Es opcional. Si no se especifica se usar\u00e1 el color de la fuente.</li> <li>Sentido: Es opcional. Indica si la sombra debe dibujarse desde el borde hacia fuera (externa), correspondiente al valor <code>outset</code> (valor por defecto), o del borde hacia dentro (interna), correspondiente al valor <code>inset</code>. Se puede usar como primer o \u00faltimo par\u00e1metro, pero si se intercala entre otros no se tiene en cuenta.</li> </ul> <p>Veamos un ejemplo:</p> <p> See the Pen    box-shadow by irubenboy (@irubenboy)   on CodePen. </p> <p>Al igual que el contorno, la sombra de la caja NO se tiene en cuenta a la hora de establecer el tama\u00f1o de la caja, por lo que la aparici\u00f3n u ocultaci\u00f3n de la sombra no provoca el redibujado de las cajas adyacentes. Es decir NO pertenece al modelo de caja. Dado que no forma parte del tama\u00f1o de la caja, la sombra puede aparecer solapada respecto a otros elementos (o \u00e9l mismo).</p> <p>Veamos un ejemplo:</p> <p> See the Pen    box-shadow2 by irubenboy (@irubenboy)   on CodePen. </p> <p>La sombra se ve afectada por el hecho de que las esquinas de los bordes de la caja est\u00e9n redondeadas, mostr\u00e1ndose la sombra tambi\u00e9n con las esquinas redondeadas.</p> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    box-shadow3 by irubenboy (@irubenboy)   on CodePen. </p> <p>Por este \u00faltimo motivo, adem\u00e1s de por el hecho de que la propiedad <code>outline</code> no permite establecer efecto de desenfoque, normalmente se prefiere el uso de la propiedad <code>box-shadow</code> frente al de <code>outline</code> para crear el mismo efecto de contorno.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    box-shadow4 by irubenboy (@irubenboy)   on CodePen. </p> <p>Como hemos comentado, la sombra puede corresponder a una caja m\u00e1s grande o m\u00e1s peque\u00f1a que la del elemento original.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    box-shadow5 by irubenboy (@irubenboy)   on CodePen. </p> <p>Al igual que en el caso del contorno, si el elemento se distribuye en varias l\u00edneas, la sombra no forma un rect\u00e1ngulo para encerrar a todo el elemento, sino que se muestra en ambas l\u00edneas all\u00e1 donde est\u00e9 presente el elemento.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    box-shadow6 by irubenboy (@irubenboy)   on CodePen. </p> <p>Tambi\u00e9n podemos crear sombras internas gracias al valor <code>inset</code>.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    inset by irubenboy (@irubenboy)   on CodePen. </p> <p>En realidad la propiedad <code>box-shadow</code> admite varias sombras, para ello s\u00f3lo es necesario separar cada grupo por una coma <code>,</code>. Cuando se definen varias sombras, la primera declarada se dibuja sobre (eje Z) la segunda, y \u00e9sta sobre la tercera y as\u00ed sucesivamente.</p> <p>Otros de los usos habituales de <code>box-shadow</code> es la creaci\u00f3n de varios bordes para la caja. Como hemos visto cuando hablamos de la propiedad border, CSS NO permite especificar varios bordes para una caja, a diferencia de los fondos, que si podemos especificar varios. Para solucionar este inconveniente podemos crear el resto de bordes usando la propiedad <code>box-shadow</code>, especificando como distancia de propagaci\u00f3n del borde el grosor que queramos para el mismo.</p> <p>Incluso podemos a\u00f1adir una sombra tradicional despu\u00e9s de agregar sombras que act\u00faan como bordes. Sin embargo, debemos tener en cuenta que las sombras externas no forman parte de la caja por lo que cuando simulan bordes NO son consideradas como pertenecientes a la misma a efectos de, por ejemplo, detectar que estamos situados sobre la caja (<code>:hover</code>). La \u00fanica manera de solucionar esto es hacer que las sombras que simulan bordes sean <code>inset</code> y especificar una padding adicional para compensar el espacio interior que estos ocupan. De esta manera el espacio ocupado por los falsos bordes corresponder\u00e1 a espacio interno de la caja.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    box-shadow7 by irubenboy (@irubenboy)   on CodePen. </p> <p>Demo interactiva de box-shadow</p> <p>http://informaticasaladillo.es/aplweb/cssinteractivedemos/box_demo.html</p>"},{"location":"tema_3/page-6/","title":"6 Patrones de recorte","text":""},{"location":"tema_3/page-6/#introduccion","title":"Introducci\u00f3n","text":"<p>Tradicionalmente todos los elementos han sido mostrados con forma rectangular, es decir, en cajas con cuatro esquinas con un \u00e1ngulo de 90 grados. Con el uso de <code>border-radius</code> se \"enmascaran\" las esquinas para que aparezcan redondeadas.</p> <p>Para poder solucionar este problemas, CSS3 incluye la propiedad<code>clip-path</code>, que permite aplicar patrones de recorte a los elementos, de manera que estos luzcan con formas distintas a la rectangular. Es importante resaltar que esta propiedad puede usarse sobre cualquier caja, no solo sobre im\u00e1genes.</p> Propiedad <code>clip-path</code> Valores none |  | [] Se aplica Todos los elementos Valor inicial none Descripci\u00f3n Establece el modo de recorte del elemento <p>Expliquemos los valores posibles:</p> <ul> <li><code>&lt;url_origen_recorte&gt;</code>: Hace referencia a la URL del elemento que va a ser usado para recortar la imagen. Dicho elemento debe ser un contenido dentro de un elemento <code>&lt;clipPath&gt;</code> correspondiente para que podamos indicar su URL relativa haciendo uso de <code>#id</code>. Esta posibilidad es compatible actualmente tanto en Firefox como en Chrome.</li> <li> <p><code>&lt;forma_basica&gt;</code>: Como alternativa a especificar la URL, podemos usar una forma b\u00e1sica para indicar el elemento que debe ser usado para recortar la imagen. Esta posibilidad s\u00f3lo est\u00e1 presente por ahora en Chrome. Para definir la forma b\u00e1sica se puede usar una de las siguientes funciones:</p> <ul> <li><code>circle(&lt;radio&gt; at &lt;position&gt;)</code>: El recorte se realizar\u00e1 con un c\u00edrculo del radio indicado situado en la posici\u00f3n indicada. Por ejemplo:</li> </ul> <p><pre><code>/* Recorte con circulo con radio del 50% situado en el centro */\nimg{\nclip-path: circle(50% at 50% 50%);  }\n</code></pre>   - <code>ellipse(&lt;radio1&gt; &lt;radio2&gt; at &lt;posici\u00f3n&gt;)</code>: El recorte se realizar\u00e1 con una elipse de los radios indicados en la posici\u00f3n indicada.. Por ejemplo:</p> <p><pre><code>/*Recorte en forma de elipse*/\nimg{\nclip-path: ellipse(50% 35% at 50% 50%);\n}\n</code></pre>   - <code>inset(&lt;long1&gt; &lt;long2&gt; &lt;long3&gt; &lt;long4&gt; round &lt;radio_esquinas&gt;)</code>: El recorte se realizar\u00e1 mediante un rect\u00e1ngulo interior situado a la longitud indicada respecto a cada lado y con las esquinas redondeadas con el radio indicado. Por ejemplo:</p> <pre><code>/*Recorte mediante un rect\u00e1ngulo interior con una distancia del 10% respecto al borde de la caja y las esquinas redondeadas con un radio de 10px*/\nimg{\nclip-path: inset(10% round 10px);\n}\n</code></pre> </li> </ul> <p>Veamos una demostraci\u00f3n en la que realizamos distintas formas de recorte de imagenes:</p> <p> See the Pen    clip-path by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-6/#patrones-de-recorte-y-sombras-de-contornos","title":"Patrones de recorte y sombras de contornos","text":"<p>Debemos tener en cuenta que al recortar una caja, por ejemplo usando la funci\u00f3n <code>polygon()</code>, al indicar el valor 100% en alguna de sus coordenadas nos estamos refiriendo al borde de la caja, por lo que todo lo dibujado fuera de la caja, como la sombras y el contorno, no ser\u00e1 mostrado. En algunos casos podemos tratar de usar valores mayores que 100% o menores de 0% para incluir estos elementos en el \u00e1rea de recorte, pero por lo general el efecto no ser\u00e1 el deseado.</p> <p>Por tanto, debemos tener en cuenta que las propiedades <code>box-shadow</code> y <code>outline</code> NO tienen en cuenta el recorte realizado con la propiedad <code>clip-path</code> a la hora de dibujarse, algo que ser\u00eda deseable, pero desgraciadamente no es as\u00ed.</p> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    clip-path2 by irubenboy (@irubenboy)   on CodePen. </p> <p>Un posible apa\u00f1o es simular la sombra con otra caja, como vemos en la siguiente demo:</p> <p> See the Pen    clip-path3 by irubenboy (@irubenboy)   on CodePen. </p> <p>Generadores online</p> <p>Tenemos disponibles online algunos generadores para obtener de forma visual los valores para la propiedad <code>clip-path</code>:</p> <p>http://cssplant.com/clip-path-generator</p> <p>http://bennettfeely.com/clippy/</p>"},{"location":"tema_3/page-7/","title":"7 Transformaciones","text":""},{"location":"tema_3/page-7/#introduccion","title":"Introducci\u00f3n","text":"<p>CSS 3 permite realizar diferentes tipos de transformaciones visuales 2D y 3D sobre las cajas, a trav\u00e9s de una serie de funciones de transformaci\u00f3n y de propiedades. As\u00ed, podremos trasladar, escalar, rotar y deformar una caja, tanto en dos dimensiones (ejes x e y), como en tres dimensiones (eje z).</p> <p> Figura 10 - Eje X-Y-Z</p> <p>Las transformaciones NO afectan al flujo normal de posicionamiento de cajas, ya que se llevan a cabo una vez ha concluido el posicionamiento. Tan s\u00f3lo hacen que los elementos luzcan de forma diferente.</p>"},{"location":"tema_3/page-7/#propiedades","title":"Propiedades","text":"<p>La propiedad <code>transform</code> permite especificar las transformaciones que deben realizarse sobre un elemento. Recibe como valor una lista de funciones de transformaci\u00f3n que deben aplicarse, separadas por espacios en blanco. Las funciones de transformaci\u00f3n se realizan en el orden en el que aparecen.</p> Propiedad <code>transform</code> Valores none |  Se aplica a Elementos transformables Valor inicial none Descripci\u00f3n Establece las funciones de transformaci\u00f3n que se deben aplicar al elemento <p>Veamos unos ejemplos:</p> <pre><code>.rotada {\ntransform: rotate(-15deg);\n}\n.rotada-deformada {\ntransform: rotate(90deg) skewx(60deg);\n}\n</code></pre> <p>Por su parte, la propiedad <code>transform-origin</code> permite modificar las coordenadas del punto de referencia usado como origen de las transformaciones a aplicar a un elemento. Por defecto dicho punto de referencia es el centro del elemento.</p> Propiedad <code>transform-origin</code> Valores Se aplica a Elementos transformables Valor inicial 50% 50% 0 Descripci\u00f3n Establece las coordenadas del punto de referencia origen de las transformaciones en el elemento <p>El desplazamiento en cada eje se puede expresar mediante:</p> <ul> <li>Una longitud, indicada en alguna de las unidades conocidas.</li> <li>Un porcentaje respecto de la anchura / altura de la caja del elemento.</li> <li>Valores <code>left</code>, <code>right</code>, <code>center</code>, <code>top</code>, <code>bottom</code>.</li> </ul> <p>Veamos un ejemplo:</p> <pre><code>.rotada-left-top {\ntransform-origin: left top;\ntransform: rotate(90deg);\n}\n</code></pre>"},{"location":"tema_3/page-7/#funciones-de-transformacion-2d","title":"Funciones de transformaci\u00f3n 2D","text":"<p> Figura 11 - Transformaciones 2D</p>"},{"location":"tema_3/page-7/#traslacion","title":"Traslaci\u00f3n","text":"<p>Las funciones de traslaci\u00f3n son aquellas que desplazan el elemento en alguno de los ejes X o Y. Los valores positivos desplazan hacia la derecha en el eje X y hacia abajo en el eje Y, mientras que los valores negativos desplazan hacia la izquierda en el eje X y hacia arriba en el eje Y. Si se indican porcentajes, \u00e9stos se calculan respecto a la anchura/altura del elemento.</p> <ul> <li><code>translate(x, y)</code>: Traslada el elemento una distancia x horizontalmente y una distancia y verticalmente.</li> <li><code>translateX(x)</code>: Traslada el elemento una distancia x horizontalmente.</li> <li><code>translateY(y)</code>: Traslada el elemento una distancia y verticalmente.</li> </ul> <p>Por ejemplo, <code>transform: translate(10px, -20px)</code> traslada el elemento 10 p\u00edxeles a la derecha y 20 p\u00edxeles hacia arriba. Es equivalente a transform: <code>translateX(10px)</code> <code>translateY(-20px)</code></p>"},{"location":"tema_3/page-7/#escalado","title":"Escalado","text":"<p>Las funciones de escalado permiten aumentar o reducir el tama\u00f1o del elemento. Reciben el factor de escalado, de manera que si es positivo el elemento se agranda y si es negativa se empeque\u00f1ece.</p> <ul> <li><code>scale(fx, fy)</code>: Escala el elemento horizontalmente en un factor fx y verticalmente en un factor fy. Si fx y fy corresponden al mismo valor, se mantendr\u00e1 la proporci\u00f3n original del elemento al escalarlo.</li> <li><code>scaleX(fx)</code>: Escala el elemento horizontalmente en un factor fx.</li> <li><code>scaleY(fy)</code>: Escala el elemento verticalmente en un factor fy.</li> </ul> <p>Por ejemplo, <code>transform: scale(3, 2)</code> hace que el elemento tenga el triple de ancho y el doble de alto que originalmente.</p>"},{"location":"tema_3/page-7/#rotaciones","title":"Rotaciones","text":"<p>as funciones de rotaci\u00f3n giran el elemento el n\u00famero de grados especificado, en el sentido de las agujas del reloj.</p> <ul> <li><code>rotate(deg)</code>: Rota el elemento respecto al eje Z el n\u00famero de grados indicados.</li> <li><code>rotateX(deg)</code>: Rota el elemento respecto al eje X el n\u00famero de grados indicados.</li> <li><code>rotateY(deg)</code>: Rota el elemento respecto al eje Y el n\u00famero de grados indicados.</li> </ul> <p>Por ejemplo, <code>transform: rotate(15deg)</code> rota el elemento 15 grados en el eje Z.</p>"},{"location":"tema_3/page-7/#deformaciones","title":"Deformaciones","text":"<p>Las funciones de deformaci\u00f3n inclinan el elemento el n\u00famero de grados indicados.</p> <ul> <li><code>skew(xdeg, ydeg)</code>: Inclina el elemento el n\u00famero de grados indicados en el eje X y el n\u00famero de grados indicados en el eje Y.</li> <li><code>skewX(deg)</code>: Inclina el elemento en el eje X el n\u00famero de grados indicados.</li> <li><code>skewY(ydeg)</code>: Inclina el elemento en el eje Y el n\u00famero de grados indicados.</li> </ul> <p>Por ejemplo, <code>transform: skew(20deg, 15deg)</code> inclina el elemento 20 grados en el eje X y 15 grados en el eje Y.</p> <p>Transformaciones complejas</p> <p>La funci\u00f3n <code>matrix</code> permite realizar transformaciones complejas en 2D. Recibe 6 valores que conforman la matriz de transformaci\u00f3n. Se usa en transformaciones mucho m\u00e1s complejas que las anteriores En el siguiente enlace puede saber m\u00e1s sobre las matrices de transformaci\u00f3n en 2D.</p> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    transform by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-7/#funciones-de-transformacion-3d","title":"Funciones de transformaci\u00f3n 3D","text":"<p>CSS proporciona funciones de transformaci\u00f3n similares a las anteriores pero sobre el eje Z, que corresponde al eje de profundidad, lo que nos permitir\u00e1 modificar el elemento en tres dimensiones. Cada elemento con <code>z &gt; 0</code> se hace m\u00e1s grande y con <code>z &lt; 0</code> se vuelve m\u00e1s peque\u00f1o.</p> <p>Pero para que podamos visualizar correctamente los efectos 3D y determinar su intensidad, es necesario establecer la distancia entre el plano z= 0 y el usuario, es decir, determinar el punto de perspectiva del usuario. Las partes del elemento cuyo valor en el eje Z sean mayores que el valor de perspectiva no ser\u00e1n visibles, ya que quedan \"detr\u00e1s del usuario\".</p> <p>Para ello tenemos dos opciones:</p> <ul> <li>Establecer la propiedad <code>perspective</code> en el elemento padre del elemento al que queremos transformar, asign\u00e1ndole como valor la distancia deseada.</li> <li>Usar la funci\u00f3n <code>perspective(distancia)</code> dentro de la propiedad <code>transform</code> del elemento a transformar.</li> </ul> <p>Un valor bastante adecuado como distancia de perspectiva es <code>1000px</code>.</p> <p>La posici\u00f3n del elemento desde el que se mide la distancia indicada para la propiedad <code>perspective</code> corresponde, por defecto, al centro del elemento, pero podemos modificar dicho punto de referencia mediante la propiedad<code>perspective-origin</code> del elemento padre del elemento a transformar.</p> <p>Veamos las funciones de transformaci\u00f3n en 3D disponibles:_</p> <ul> <li><code>translateZ(z)</code>: Traslada el elemento una distancia z en el eje de profundidad. Los valores positivos acercan el elemento al usuario y los negativos lo alejan.</li> <li><code>translate3d(x, y, z)</code>: Traslada el elemento una distancia x en el eje X, una distancia y en el eje Y y una distancia z en el eje Z.</li> <li><code>scaleZ(fz)</code>: Escala el elemento en el eje Z en un factor de profundidad fz. scale3d(fx, fy, fz): Escala el elemento en el eje X en un factor fx, en el eje Y en un factor fy y en el eje Z en un factor fz.</li> <li><code>rotateZ(deg)</code>: Rota el elemento respecto al eje Z el n\u00famero de grados indicados. Similar a <code>rotate(deg)</code>.</li> <li><code>rotate3d(x, y, z, deg)</code>: Rota el elemento el n\u00famero de grados indicados, tomando como punto de referencia el denotado por x, y, z.</li> <li><code>matrix3d(n, n, ...)</code>: Establece una matriz de transformaci\u00f3n 3D de 16 valores. Se usa en transformaciones mucho m\u00e1s complejas que las anteriores. Visite el siguiente enlace para saber m\u00e1s sobre las matrices de transformaci\u00f3n en 3D.</li> </ul> <p>Veamos una demostraci\u00f3n:</p> <p> See the Pen    transform 3d by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-8/","title":"8 Visibilidad y opacidad","text":""},{"location":"tema_3/page-8/#introduccion","title":"Introducci\u00f3n","text":"<p>CSS nos ofrece distintas formas de hacer desaparecer una caja, de manera que \u00e9sta no sea visible para el usuario en un momento dado. Veamos algunas de ellas.</p>"},{"location":"tema_3/page-8/#visibilidad","title":"Visibilidad","text":"<p>La propiedad <code>visibility</code> permite ocultar o mostrar un elemento una vez \u00e9ste ha sido posicionado, sin afectar por tanto al posicionamiento del resto de elementos.</p> Propiedad <code>visibility</code> Valores visible | hidden | collapse | inherit Se aplica a Todos los elementos Valor inicial visible Descripci\u00f3n Define la visibilidad de un elemento <p>Inicialmente todas las cajas que componen la p\u00e1gina son visibles. Empleando el valor hidden es posible convertir una caja en invisible para que no muestre sus contenidos. El resto de elementos de la p\u00e1gina se muestran como si la caja todav\u00eda fuera visible, por lo que en el lugar donde originalmente se mostraba la caja invisible, ahora se muestra un hueco vac\u00edo.</p> <p>Por otra parte, el valor <code>collapse</code> de la propiedad visibility tiene un funcionamiento distinto. S\u00f3lo se puede utilizar en las filas, grupos de filas, columnas y grupos de columnas de una tabla. Su efecto es ocultar completamente la fila y/o columna y se pueden mostrar otros contenidos en ese lugar (similar a si hici\u00e9ramos <code>display: none</code>, como veremos m\u00e1s adelante). Si se utiliza el valor <code>collapse</code> sobre cualquier otro tipo de elemento, su efecto es id\u00e9ntico al valor <code>hidden</code>.</p> <p>Esta propiedad NO se puede animar, por lo que no podremos hacer que la caja aparezca o desparezca poco a poco.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    visibility by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-8/#opacidad","title":"Opacidad","text":"<p>La propiedad <code>opacity</code> define el nivel de opacidad (no transparencia) de un elemento, esto es, en que grado se superpone respecto a lo que haya detr\u00e1s del elemento.</p> Propiedad <code>opacity</code> Valores Se aplica a Todos los elementos Valor inicial 1 Descripci\u00f3n Define el nivel de opacidad de un elemento <p>Recibe un valor entre 0.0 y 1.0, ambos incluidos, donde el valor 0.0 indica que el elemento es totalmente transparente (invisible) y el 1.0 indica que es totalmente opaco (s\u00f3lido, nada transparente). Los valores intermedios indican c\u00f3mo de transl\u00facido es el elemento. Si el valor proporcionado se sale de la escala indicada, ser\u00e1 ajustado al valor v\u00e1lido m\u00e1s cercano.</p> <p>Esta propiedad s\u00ed se puede animar, por lo que podremos hacer que la caja aparezca y desaparezca poco a poco.</p> <p>Veamos un ejemplo:</p> <p> See the Pen    Untitled by irubenboy (@irubenboy)   on CodePen. </p>"},{"location":"tema_3/page-8/#otras-formas-de-hacer-desaparecer-un-elemento","title":"Otras formas de hacer desaparecer un elemento","text":"<p>En realidad disponemos en CSS de m\u00faltiples formas para hacer desaparecer un elemento:</p> <ul> <li> <p><code>display: none</code>: Hace que la caja correspondiente no sea pintada, saliendo del flujo normal, por lo que s\u00ed afecta al resto de elementos, que pueden ocupar el espacio que inicialmente le correspondiera a la caja desparecida. A efectos pr\u00e1cticas es como si hici\u00e9ramos <code>visibility: hidden</code> y <code>position: absolute</code>. Un problema adicional es que la propiedad <code>display</code> no se puede animar, por lo que no podremos hacer que la caja aparezca o desaparezca poco a poco. Veamos un ejemplo:     <p> See the Pen        display: none by irubenboy (@irubenboy)       on CodePen.</p> <p></p> </p> </li> <li> <p><code>width: 0</code> o <code>height: 0</code>: Deberemos adem\u00e1s evitar el desbordamiento de su contenido con <code>overflow: hidden</code>, y si es un elemento inline-block hacer <code>line-height: 0</code>. Tradicionalmente se usa esta opci\u00f3n para hacer aparecer men\u00fas de opciones ocultas y men\u00fas de tipo acorde\u00f3n. Veamos un ejemplo:     <p> See the Pen        hidden by width and height by irubenboy (@irubenboy)       on CodePen.</p> <p></p> </p> </li> <li> <p><code>position: absolute + desplazamiento</code>: Si el desplazamiento con <code>top</code>, <code>left</code>, <code>right</code> o <code>bottom</code> es lo suficientemente grande, el elemento ser\u00e1 sacado del viewport. Aunque la propiedad <code>position</code> no es animable, las propiedades de desplazamiento s\u00ed, por lo que podemos hacer que el elemento aparezca o desaparezca poco a poco por desplazamiento. Veamos un ejemplo:     <p> See the Pen    hidden by position by irubenboy (@irubenboy)   on CodePen.</p> <p></p> </p> </li> <li> <p><code>transform: scale(0)</code>: Al aplicarle una escala de 0 el elemento desaparece. No afecta al resto de elementos y es animable, lo que permite hacer que aparezca o desparezca poco a poco. Veamos un ejemplo:     <p> See the Pen        hidden by transform by irubenboy (@irubenboy)       on CodePen.</p> <p></p> </p> </li> <li> <p><code>transform: translate()</code>: Si la traslaci\u00f3n es suficientemente grande el elemento ser\u00e1 sacado del viewport. No afecta al resto de elementos y es animable, lo que permite hacer que aparezca o desparezca poco a poco por traslaci\u00f3n. Veamos un ejemplo:     <p> See the Pen        hidden by transform scale by irubenboy (@irubenboy)       on CodePen.</p> <p></p> </p> </li> <li> <p><code>clip-path: polygon()</code>: Si el pol\u00edgono de recorte de la caja ocupa toda la caja, \u00e9sta no sera visible. Esta propiedad es animable siempre y cuando el pol\u00edgono de recorte tenga exactamente el mismo n\u00famero de puntos. Veamos un ejemplo:     <p> See the Pen        hidden by clip-path by irubenboy (@irubenboy)       on CodePen.</p> <p></p> </p> </li> <li> <p><code>filter: opacity(0)</code>: Similar a opacity: 0, aunque supone una mayor carga de renderizado para el navegador.</p> </li> <li><code>filter: blur()</code>: Si desenfocamos suficientemente la caja, \u00e9sta se vuelve invisible, aunque su renderizado es muy costoso para el navegador. En el siguiente enlace puede aprender m\u00e1s sobre c\u00f3mo hacer desaparecer un elemento.</li> </ul>"}]}