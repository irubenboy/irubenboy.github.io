{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenidx al mundo de Java","text":""},{"location":"bloque_i/tema_1/page-1/","title":"1 Introducci\u00f3n","text":""},{"location":"bloque_i/tema_1/page-1/#conceptos-basicos","title":"Conceptos b\u00e1sicos","text":""},{"location":"bloque_i/tema_1/page-1/#computadora","title":"Computadora","text":"<p>Una computadora. o como se le conoce com\u00fan mente, un ordenador, es una m\u00e1quina electr\u00f3nica, anal\u00f3gica o digital, dotada de una memoria de gran capacidad y de m\u00e9todos de tratamiento de la informaci\u00f3n, capaz de resolver problemas matem\u00e1ticos y l\u00f3gicos mediante la utilizaci\u00f3n autom\u00e1tica de programas inform\u00e1ticos.</p>"},{"location":"bloque_i/tema_1/page-1/#informatica","title":"Inform\u00e1tica","text":"<p>Conjunto de conocimientos cient\u00edficos y t\u00e9cnicas que hacen posible el tratamiento autom\u00e1tico de la informaci\u00f3n por medio de ordenadores.</p>"},{"location":"bloque_i/tema_1/page-1/#hardware","title":"Hardware","text":"<p>Componentes f\u00edsicos que conforman parte de un ordenador (o de otro dispositivo electr\u00f3nico): procesador, RAM, impresora, teclado, rat\u00f3n,...</p>"},{"location":"bloque_i/tema_1/page-1/#software","title":"Software","text":"<p>Es el conjunto de programas de c\u00f3mputo, procedimientos, reglas, documentaci\u00f3n y datos asociados, que forman parte de las operaciones de un sistema de computaci\u00f3n.</p>"},{"location":"bloque_i/tema_1/page-1/#sistema-operativo","title":"Sistema Operativo","text":"<p>Se trata del software encargado de gestionar el ordenador. Es la aplicaci\u00f3n que oculta la f\u00edsica real del ordenador para mostrarnos una interfaz que permita al usuario un mejor y m\u00e1s f\u00e1cil manejo de la computadora. Por ejemplo: Windows, Linux, MacOS, etc.</p>"},{"location":"bloque_i/tema_1/page-1/#algoritmo","title":"Algoritmo","text":"<p>Conjunto ordenado y finito de operaciones que permite hallar la soluci\u00f3n de un problema.</p>"},{"location":"bloque_i/tema_1/page-1/#programa-informatico","title":"Programa inform\u00e1tico","text":"<p>Es una secuencia de instrucciones escritas para realizar una tarea espec\u00edfica en una computadora.</p>"},{"location":"bloque_i/tema_1/page-1/#aplicacion-informatica","title":"Aplicaci\u00f3n Inform\u00e1tica","text":"<p>Software formado por uno o m\u00e1s programas, la documentaci\u00f3n de los mismos y los archivos necesarios para su funcionamiento, de modo que el conjunto completo forma una herramienta de trabajo en un ordenador.</p>"},{"location":"bloque_i/tema_1/page-1/#codificacion-de-la-informacion","title":"Codificaci\u00f3n de la informaci\u00f3n","text":"<p>Un ordenador maneja informaci\u00f3n de todo tipo. Nuestra perspectiva humana nos permite r\u00e1pidamente diferenciar lo que no son n\u00fameros, de lo que es texto, imagen, ... Sin embargo al tratarse de una m\u00e1quina digital, el ordenador s\u00f3lo es capaz de representar n\u00fameros en forma binaria. Por ello todos los ordenadores necesitan codificar la informaci\u00f3n del mundo real al equivalente binario entendible por el ordenador.</p>"},{"location":"bloque_i/tema_1/page-1/#sistemas-numericos","title":"Sistemas Num\u00e9ricos","text":"<p>Existen dos tipos de sistemas num\u00e9ricos:</p> <ol> <li>Sistemas no posicionales. En ellos se utilizan s\u00edmbolos cuyo valor num\u00e9rico es siempre el mismo independientemente de donde se sit\u00faen.Es lo que ocurre con la numeraci\u00f3n romana. En esta numeraci\u00f3n el s\u00edmbolo <code>I</code> significa siempre <code>uno</code> independientemente de su posici\u00f3n.</li> <li>Sistemas posicionales. En ellos los s\u00edmbolos num\u00e9ricos cambian de valor en funci\u00f3n de la posici\u00f3n que ocupe. Es el caso de nuestra numeraci\u00f3n, el s\u00edmbolo 2, en la cifra 12 vale 2; mientra que en la cifra 21 vale viente.</li> </ol> <p>La historia ha demostrado que los sistemas posicionales son mucho mejores para los c\u00e1lculos matem\u00e1ticos ya que las operaciones matem\u00e1ticas son m\u00e1s sencillas. Todos los sistemas posicionales tienen una base, que es el n\u00famero total de s\u00edmbolos que utiliza el sistema.</p>"},{"location":"bloque_i/tema_1/page-1/#sistemas-posicionales","title":"Sistemas posicionales","text":"<ul> <li>Sistema decimal: la base es 10, ya que utiliza 10 s\u00edmbolos, desde el 0 hasta el 9.</li> <li>Sistema binario: la base es 2, utiliza 0 y 1.</li> <li>Sistema octal: la base es 8, desde el 0 hasta el 7. -Sistema hexadecimal: la base es 16, donde el 0 al 9 y desde la A a la F</li> </ul> <p>Para convertir un n\u00famero octal en binario, se representa cada d\u00edgito en octal por tres d\u00edgitos binarios seg\u00fan la siguiente tabla de conversi\u00f3n:</p> Octal Binario 0 000 1 001 2 010 3 011 4 100 5 101 6 110 7 111 <p>Por lo tanto, el n\u00famero 467 en octal ser\u00eda 100110111 en binario.</p> <p>Los mismo podemos hacer con el binario y el hexadecimal pero con 4 d\u00edgitos.</p> Octal Binario 0 0000 1 0001 2 0010 3 0011 4 0100 5 0101 6 0110 7 0111 8 1000 9 1001 A 1010 B 1011 C 1100 D 1101 E 1110 F 1111 <p>El n\u00famero B3F en hexadecimal es 1011001111111 en binario</p>"},{"location":"bloque_i/tema_1/page-1/#representacion-de-texto-en-el-sistema-binario","title":"Representaci\u00f3n de texto en el sistema binario","text":"<p>Puesto que una computadora no s\u00f3lo maneja n\u00fameros, habr\u00e1 d\u00edgitos binarios que contengan informaci\u00f3n que no es traducible a decimal. Todo depende de c\u00f3mo se interprete esa traducci\u00f3n. Por ejemplo en el caso del texto, lo que se hace es codificar cada car\u00e1cter en una serie de n\u00fameros binarios. El c\u00f3digo ASCII es un est\u00e1ndar que ha sido durante mucho tiempo el m\u00e1s utilizado. Inicialmente era un c\u00f3digo que utilizaba 7 bits para representar texto, lo que significaba que era capaz de codificar 127 caracteres. Por ejemplo el n\u00famero 65 (1000001 en binario) se utiliza para la A may\u00fascula. Poco despu\u00e9s apareci\u00f3 un problema: este c\u00f3digo es suficiente para los caracteres del ingl\u00e9s, pero no para otras lenguas. Entonces se a\u00f1adi\u00f3 el octavo bit para representar otros 128 caracteres que son distintos seg\u00fan idiomas(Europa Occidental usa unos c\u00f3digos que no utiliza Europa Oriental). Eso provoca que un c\u00f3digo como el 190 signifique cosas diferentes si cambiamos de pa\u00eds. Por ello cuando un ordenador necesita mostrar texto, tiene que saber qu\u00e9 juego de c\u00f3digos debe de utilizar (lo cual supone un tremendo problema). Una ampliaci\u00f3n de este m\u00e9todo de codificaci\u00f3n de caracteres es el est\u00e1ndar Unicode que puede utilizar hasta 4 bytes (32 bits) con lo que es capaz de codificar cualquier car\u00e1cter en cualquier lengua del planeta utilizando el mismo conjunto de c\u00f3digos. Poco a poco es el c\u00f3digo que se va extendiendo, siendo actualmente utilizado en un n\u00famero considerable de tecnolog\u00edas recientes, como XML, Java y sistemas operativos modernos.</p> <p>La descripci\u00f3n completa del est\u00e1ndar est\u00e1 disponible en la p\u00e1gina web de Unicode https://unicode.org/. En <code>Quick Links -&gt; Code Charts</code> encontraremos las tablas de caracteres. Los caracteres b\u00e1sicos del espa\u00f1ol los encontraremos en <code>Latin -&gt; Basic Latin (ASCII)</code> y los caracteres especiales del espa\u00f1ol por ejemplo, las vocales acentuadas y la \u00f1, en <code>Latin1 -&gt; Supplement</code>.</p>"},{"location":"bloque_i/tema_1/page-1/#representacion-binaria-de-datos-no-numericos-ni-de-texto","title":"Representaci\u00f3n binaria de datos no num\u00e9ricos ni de texto","text":"<p>En el caso de datos m\u00e1s complejos (im\u00e1genes, v\u00eddeo, audio) se necesita una codificaci\u00f3n m\u00e1s compleja. En el caso, por ejemplo de las im\u00e1genes, una forma b\u00e1sica de codificarlas en binario es la que graba cada p\u00edxel (cada punto distinguible en la imagen) mediante tres bytes: el primero graba el nivel de rojo, el segundo el nivel de azul y el tercero el nivel de verde. Y as\u00ed por cada p\u00edxel. Esto se conoce como modelo de color RGB donde es posible representar un color mediante la mezcla por adici\u00f3n de los tres colores de luz primarios. Por ejemplo un punto en una imagen de color rojo puro: <code>11111111 00000000 00000000</code>. Naturalmente en una imagen no solo se graban los p\u00edxeles sino el tama\u00f1o de la imagen, el modelo de color,... de ah\u00ed que representar estos datos sea tan complejo para el ordenador (y tan complejo entenderlo para nosotros).</p>"},{"location":"bloque_i/tema_1/page-1/#multiplos-para-medir-digitos-binarios","title":"M\u00faltiplos para medir d\u00edgitos binarios","text":"<p>Puesto que toda la informaci\u00f3n de un ordenador se representa de forma binaria, se hizo indispensable el utilizar unidades de medida para poder indicar la capacidad de los dispositivos:</p> <ul> <li>Bit (de binary digit). Representa un d\u00edgito binario. Por ejemplo, se dice que el n\u00famero binario 1001 tiene cuatro bits.</li> <li>Byte. Es el conjunto de 8 bits.</li> <li>Kilobyte. Son 1024 bytes.</li> <li>Megabyte. Son 1024 Kilobytes.</li> <li>Gigabyte. Son 1024 Megabytes.</li> <li>Terabyte. Son 1024 Gigabytes.</li> <li>Petabyte. Son 1024 Terabytes.</li> </ul>"},{"location":"bloque_i/tema_1/page-1/#arquitectura-de-von-newmann","title":"Arquitectura de Von Newmann","text":"<p>La mayor\u00eda de los sistemas inform\u00e1ticos actuales se basan en la arquitectura propuesta por Von Newmann. Esta arquitectura se caracteriza porque el programa que ejecuta el sistema inform\u00e1tico est\u00e1 almacenado internamente en el propio sistema.</p> <p> Figura 1 - Arquitectura de Von Newmann</p> <p>Los buses transportan la informaci\u00f3n entre los diferentes elementos.</p> <p> Figura 2 - Buses</p> <ul> <li>Buses de datos: Como su nombre indica transporta datos. Estos datos pueden ser la informaci\u00f3n que se est\u00e1 procesando o las instrucciones del programa que se ejecuta. El ancho en bits del bus de datos define el tama\u00f1o de la palabra del sistema inform\u00e1tico, por ejemplo, 32 bits \u00f3 64 bits.</li> <li>Bus de direcciones: El bus de direcciones se utiliza para indicar el origen y/o el destino de los datos. En el bus de direcciones se indica la posici\u00f3n de memoria a la que se est\u00e1 accediendo en cada momento. Puede tratarse de una direcci\u00f3n de la memoria principal o puede tratarse de una direcci\u00f3n de memoria de un perif\u00e9rico. El ancho en bits del bus de direcciones determina el tama\u00f1o del espacio de memoria direccionable. Un ancho de 16 bits puede almacenar 2 elevado a 16 (65.536) valores diferentes.</li> <li>Bus de control: El bus de control proporciona se\u00f1ales para coordinar las diferentes tareas que se realizan en el sistema inform\u00e1tico. Por ejemplo, R/W indica si es una operaci\u00f3n de lectura o escritura.</li> </ul>"},{"location":"bloque_i/tema_1/page-1/#historia-del-software","title":"Historia del Software","text":"<p>Los primeros ordenadores cumpl\u00edan una \u00fanica programaci\u00f3n que estaba definida en los componentes el\u00e9ctricos que formaban el ordenador. La idea de que el ordenador hiciera varias tareas (ordenador programable o multiprop\u00f3sito) hizo que se idearan las tarjetas perforadas. En ellas se utilizaba c\u00f3digo binario, de modo que se hac\u00edan agujeros en ellas para indicar el c\u00f3digo 1 o el cero. Estos \u201cprimeros programas\u201d l\u00f3gicamente serv\u00edan para hacer tareas muy concretas.</p> <p>La llegada de ordenadores electr\u00f3nicos m\u00e1s potentes hizo que los ordenadores se convirtieran en verdaderas m\u00e1quinas digitales que segu\u00edan utilizando el 1 y el 0 del c\u00f3digo binario pero que eran capaces de leer miles de unos y ceros. Empezaron a aparecer los primeros lenguajes de programaci\u00f3n que escrib\u00edan c\u00f3digo m\u00e1s entendible por los humanos que posteriormente era convertido al c\u00f3digo entendible por la m\u00e1quina.</p> <p>Inicialmente la creaci\u00f3n de aplicaciones requer\u00eda escribir pocas l\u00edneas de c\u00f3digo en el ordenador, por lo que no hab\u00eda una t\u00e9cnica especificar a la hora de crear programas. Cada programador se defend\u00eda como pod\u00eda generando el c\u00f3digo a medida que se le ocurr\u00eda. Poco a poco las funciones que se requer\u00edan a los programas fueron aumentando produciendo miles de l\u00edneas de c\u00f3digo que al estar desorganizada hac\u00edan casi imposible su mantenimiento. S\u00f3lo el programador que hab\u00eda escrito el c\u00f3digo era capaz de entenderlo y eso no era en absoluto pr\u00e1ctico.</p> <p>La llamada crisis del software ocurri\u00f3 cuando se percibi\u00f3 que se gastaba m\u00e1s tiempo en hacer las modificaciones a los programas que en volver a crear el software. La raz\u00f3n era que ya se hab\u00edan codificado millones de l\u00edneas de c\u00f3digo antes de que se definiera un buen m\u00e9todo para crear los programas. La soluci\u00f3n a esta crisis ha sido la definici\u00f3n de la Ingenier\u00eda del software como un oficio que requer\u00eda un m\u00e9todo de trabajo similar al del resto de ingenier\u00edas. La b\u00fasqueda de una metodolog\u00eda de trabajo que elimine esta crisis parece que a\u00fan no est\u00e1 resuelta, de hecho los m\u00e9todos de trabajo siguen redefini\u00e9ndose una y otra vez.</p>"},{"location":"bloque_i/tema_1/page-1/#ciclo-de-vida-de-una-aplicacion","title":"Ciclo de vida de una aplicaci\u00f3n","text":"<p> Figura 3 - Ciclo de vida</p> <p>Una de las cosas que se han definido tras el nacimiento de la ingenier\u00eda del software ha sido el ciclo de vida de una aplicaci\u00f3n. El ciclo de vida define los pasos que sigue el proceso de creaci\u00f3n de una aplicaci\u00f3n desde que se propone hasta que finaliza su construcci\u00f3n. Los pasos son:</p> <ol> <li>An\u00e1lisis. En esta fase se determinan los requisitos que tiene que cumplir la aplicaci\u00f3n. Se anota todo aquello que afecta al futuro funcionamiento de la aplicaci\u00f3n. Este paso le realiza un analista.</li> <li>Dise\u00f1o. Se especifican los esquemas de dise\u00f1o de la aplicaci\u00f3n. Estos esquemas forman los planos del programador, los realiza el analista y representan todos los aspectos que requiere la creaci\u00f3n de la aplicaci\u00f3n.</li> <li>Codificaci\u00f3n. En esta fase se pasa el dise\u00f1o a c\u00f3digo escrito en alg\u00fan lenguaje de programaci\u00f3n. Esta es la primera labor que realiza el programador.</li> <li>Pruebas. Se trata de comprobar que el funcionamiento de la aplicaci\u00f3n es la adecuada. Se realiza en varias fases:<ol> <li>Prueba del c\u00f3digo. Las realizan programadores. Normalmente programadores distintos a los que crearon el c\u00f3digo, de ese modo la prueba es m\u00e1s independiente y generar\u00e1 resultados m\u00e1s \u00f3ptimos.</li> <li>Versi\u00f3n alfa. Es una primera versi\u00f3n terminada que se revisa a fin de encontrar errores. Estas pruebas conviene que sean hechas por personal no inform\u00e1tico. El producto s\u00f3lo tiene cierta apariencia de acabado.</li> <li>Versi\u00f3n beta. Versi\u00f3n casi definitiva del software en la que no se estiman fallos, pero que se distribuye a los clientes para que encuentren posibles problemas. A veces est\u00e1 versi\u00f3n acaba siendo la definitiva.</li> </ol> </li> <li>Mantenimiento. Tiene lugar una vez que la aplicaci\u00f3n ha sido ya distribuida. En esta fase se asegura que el sistema siga funcionando aunque cambien los requisitos o el sistema para el que fue dise\u00f1ado el software. Antes esos cambios se hacen los arreglos pertinentes, por lo que habr\u00e1 que retroceder a fases anteriores del ciclo de vida.</li> </ol>"},{"location":"bloque_i/tema_1/page-1/#errores","title":"Errores","text":"<p>Cuando un programa obtiene una salida que no es la esperada, se dice que posee errores. Los errores son uno de los caballos de batalla de los programadores ya que a veces son muy dif\u00edciles de encontrar (de ah\u00ed que hoy en d\u00eda en muchas aplicaciones se distribuyan parches para subsanar errores no encontrados en la creaci\u00f3n de la aplicaci\u00f3n). Tipos de errores:</p> <ul> <li>Error del usuario. Errores que se producen cuando el usuario realiza algo inesperado y el programa no reacciona apropiadamente (se entiende por usuario la persona que utiliza la aplicaci\u00f3n inform\u00e1tica).</li> <li>Errores de documentaci\u00f3n. Ocurren cuando la documentaci\u00f3n del programa no es correcta y provoca fallos en el manejo.</li> <li>Error de interfaz. Se entiende por interfaz el medio con que el usuario se comunica con la m\u00e1quina, como ventanas, men\u00fas, etc. El error de interfaz ocurre si la interfaz de usuario de la aplicaci\u00f3n es enrevesada para el usuario impidiendo su manejo normal. Tambi\u00e9n se llaman as\u00ed los errores de protocolo entre dispositivos.</li> <li>Error de entrada / salida o de comunicaciones. Ocurre cuando falla la comunicaci\u00f3n entre el programa y un dispositivo (se desea imprimir y no hay papel, falla el teclado,...)</li> <li>Error fatal. Ocurre cuando el hardware produce una situaci\u00f3n inesperada que el software no puede controlar (el ordenador se cuelga, errores en la grabaci\u00f3n de datos,...)</li> <li>Error de sintaxis. Ocurre cuando una instrucci\u00f3n del c\u00f3digo no est\u00e1 bien escrita, es decir, tiene un error de sintaxis. Por lo tanto, no puede ser traducida a c\u00f3digo binario.</li> <li>Error de ejecuci\u00f3n. Se produce cuando el ordenador no puede ejecutar alguna instrucci\u00f3n de forma correcta. Por ejemplo, la instrucci\u00f3n c = 5 / 0; es correcta sint\u00e1cticamente y ser\u00e1 traducida a c\u00f3digo binario. Sin embargo, cuando la computadora intente realizar la divisi\u00f3n 5 / 0 se producir\u00e1 un error de ejecuci\u00f3n, ya que, matem\u00e1ticamente, no se puede dividir entre cero.</li> <li>Error de l\u00f3gica. En cuanto a los errores de l\u00f3gica son los m\u00e1s dif\u00edciles de detectar. Cuando un programa no tiene errores de sintaxis ni de ejecuci\u00f3n, pero a\u00fan as\u00ed, no funciona bien, esto es debido a la existencia de alg\u00fan error l\u00f3gico. De manera que, un error de l\u00f3gica se produce cuando los resultados obtenidos no son los esperados.</li> </ul>"},{"location":"bloque_i/tema_1/page-1/#lenguajes-de-programacion","title":"Lenguajes de programaci\u00f3n","text":""},{"location":"bloque_i/tema_1/page-1/#historia","title":"Historia","text":""},{"location":"bloque_i/tema_1/page-1/#inicio-en-la-programacion","title":"Inicio en la programaci\u00f3n","text":"<p>Charles Babbage defini\u00f3 a mediados del siglo XIX lo que \u00e9l llam\u00f3 la m\u00e1quina anal\u00edtica. Se considera a esta m\u00e1quina el dise\u00f1o del primer ordenador. La realidad es que no se pudo construir hasta el siglo siguiente. El caso es que su colaboradora Ada Lovelace escribi\u00f3 en tarjetas perforadas una serie de instrucciones que la m\u00e1quina iba a ser capaz de ejecutar. Se dice que eso signific\u00f3 el inicio de la ciencia de la programaci\u00f3n de ordenadores. En la segunda guerra mundial debido a las necesidades militares, la ciencia de la computaci\u00f3n prospera y con ella aparece el famoso ENIAC (Electronic Numerical Integrator And Calculator), que se programaba cambiando su circuiter\u00eda. Esa es la primera forma de programar (que a\u00fan se usa en numerosas m\u00e1quinas) que s\u00f3lo vale para m\u00e1quinas de \u00fanico prop\u00f3sito. Si se cambia el prop\u00f3sito, hay que modificar la m\u00e1quina.</p>"},{"location":"bloque_i/tema_1/page-1/#codigo-maquina-primera-generacion-de-lenguajes-1gl","title":"C\u00f3digo m\u00e1quina. Primera generaci\u00f3n de lenguajes (1GL)","text":"<p>No mucho m\u00e1s tarde apareci\u00f3 la idea de que las m\u00e1quinas fueran capaces de realizar m\u00e1s de una aplicaci\u00f3n. Para lo cual se ide\u00f3 el hecho de que hubiera una memoria donde se almacenaran esas instrucciones. Esa memoria se pod\u00eda rellenar con datos procedentes del exterior. Inicialmente se utilizaron tarjetas perforadas para introducir las instrucciones. Durante mucho tiempo esa fue la forma de programar, que teniendo en cuenta que las m\u00e1quinas entend\u00edan s\u00f3lo c\u00f3digo binario, consist\u00eda en introducir la programaci\u00f3n de la m\u00e1quina mediante unos y ceros, el llamado c\u00f3digo m\u00e1quina. Todav\u00eda los ordenadores es el \u00fanico c\u00f3digo que entienden, por lo que cualquier forma de programar debe de ser convertida a c\u00f3digo m\u00e1quina. S\u00f3lo se ha utilizado por los programadores en los inicios de la inform\u00e1tica. Su incomodidad de trabajo hace que sea impensable para ser utilizado hoy en d\u00eda. Pero cualquier programa de ordenador debe, finalmente, ser convertido a este c\u00f3digo para que un ordenador puede ejecutar las instrucciones de dicho programa. Un detalle a tener en cuenta es que el c\u00f3digo m\u00e1quina es distinto para cada tipo de procesador. Lo que hace que los programas en c\u00f3digo m\u00e1quina no sean portables entre distintas m\u00e1quinas.</p>"},{"location":"bloque_i/tema_1/page-1/#lenguaje-ensamblador-segunda-generacion-de-lenguajes-2gl","title":"Lenguaje ensamblador. Segunda generaci\u00f3n de lenguajes (2GL)","text":"<p>En los a\u00f1os 40 se intent\u00f3 concebir un lenguaje m\u00e1s simb\u00f3lico que permitiera no tener que programar utilizando c\u00f3digo m\u00e1quina. Poco m\u00e1s tarde se ide\u00f3 el lenguaje ensamblador, que es la traducci\u00f3n del c\u00f3digo m\u00e1quina a una forma m\u00e1s textual. Cada tipo de instrucci\u00f3n se asocia a una palabra mnemotecnia (como SUM para sumar por ejemplo), de forma que cada palabra tiene traducci\u00f3n directa en el c\u00f3digo m\u00e1quina. Tras escribir el programa en c\u00f3digo ensamblador, un programa (llamado tambi\u00e9n ensamblador) se encargar\u00e1 de traducir el c\u00f3digo ensamblador a c\u00f3digo m\u00e1quina. Esta traducci\u00f3n es r\u00e1pida puesto que cada l\u00ednea en ensamblador tiene equivalente directo en c\u00f3digo m\u00e1quina (en los lenguajes modernos no ocurre esto). La idea es la siguiente: si en el c\u00f3digo m\u00e1quina el n\u00famero binario 0000 significa sumar, una instrucci\u00f3n m\u00e1quina que sumara el n\u00famero 8 (00001000 en binario) al n\u00famero 16 (00010000 en binario) ser\u00eda <code>00000000100000010000</code>. El ordenador entender\u00eda que los primeros cuatro bits representan la instrucci\u00f3n y los 8 siguientes el primer n\u00famero y los ocho siguientes el segundo n\u00famero (suponiendo que los n\u00fameros ocupan 8 bits). L\u00f3gicamente trabajar de esta forma es muy complicado. Por eso se podr\u00eda utilizar la siguiente traducci\u00f3n en ensamblador: <code>SUM 8 16</code> , que ya se entiende mucho mejor. Puesto que el ensamblador es una representaci\u00f3n textual pero exacta del c\u00f3digo m\u00e1quina, cada programa s\u00f3lo funcionar\u00e1 para la m\u00e1quina en la que fue concebido el programa, es decir, no es portable. La ventaja de este lenguaje es que se puede controlar absolutamente el funcionamiento de la m\u00e1quina, lo que permite crear programas muy eficientes. Lo malo es precisamente que hay que conocer muy bien el funcionamiento de la computadora para crear programas con esta t\u00e9cnica. Adem\u00e1s las l\u00edneas requeridas para realizar una tarea se disparan ya que las instrucciones de la m\u00e1quina son excesivamente simples.</p>"},{"location":"bloque_i/tema_1/page-1/#lenguajes-de-alto-nivel-lenguajes-de-tercera-generacion-3gl","title":"Lenguajes de alto nivel. Lenguajes de tercera generaci\u00f3n (3GL)","text":"<p>Aunque el ensamblador signific\u00f3 una notable mejora sobre el c\u00f3digo m\u00e1quina, segu\u00eda siendo excesivamente cr\u00edptico. De hecho para hacer un programa sencillo, se necesitaban miles y miles l\u00edneas de c\u00f3digo. Para evitar los problemas del ensamblador apareci\u00f3 la tercera generaci\u00f3n de lenguajes de programaci\u00f3n, la de los lenguajes de alto nivel. En este caso el c\u00f3digo vale para cualquier m\u00e1quina pero deber\u00e1 ser traducido mediante software especial que adaptar\u00e1 el c\u00f3digo de alto nivel al c\u00f3digo m\u00e1quina correspondiente. Esta traducci\u00f3n es necesaria ya que el c\u00f3digo en un lenguaje de alto nivel no se parece en absoluto al c\u00f3digo m\u00e1quina. Tras varios intentos de representar lenguajes, en 1957 aparece el que se considera el primer lenguaje de alto nivel, el FORTRAN (FORmula TRANslation), lenguaje orientado a resolver f\u00f3rmulas matem\u00e1ticas. Poco a poco fueron evolucionando los lenguajes formando lenguajes cada vez mejores. As\u00ed en 1958 se crea LISP como lenguaje declarativo para expresiones matem\u00e1ticas, en 1960 se cre\u00f3 el COBOL como lenguaje de gesti\u00f3n y en 1963 se cre\u00f3 PL/I el primer lenguaje que admit\u00eda la multitarea y la programaci\u00f3n modular. BASIC se cre\u00f3 en el a\u00f1o 1964 como lenguaje de programaci\u00f3n sencillo de aprender y ha sido uno de los lenguajes m\u00e1s populares. En 1968 se crea LOGO para ense\u00f1ar a programar a los ni\u00f1os. Pascal se cre\u00f3 con la misma idea acad\u00e9mica pero siendo ejemplo de lenguaje estructurado para programadores avanzados. El creador del Pascal (Niklaus Wirdth) cre\u00f3 Modula en 1977 siendo un lenguaje estructurado para la programaci\u00f3n de sistemas (intentando sustituir al C). C es un lenguaje de programaci\u00f3n originalmente desarrollado por Dennis Ritchie entre 1969 y 1972 como evoluci\u00f3n del anterior lenguaje B a su vez basado en BCPL. Al igual que B, es un lenguaje orientado a la implementaci\u00f3n de Sistemas operativos, concretamente Unix. C es apreciado por la eficiencia del c\u00f3digo que produce y es el lenguaje de programaci\u00f3n m\u00e1s popular para crear software de sistemas, aunque tambi\u00e9n se utiliza para crear aplicaciones. Es un lenguaje de medio nivel ya que dispone de las estructuras t\u00edpicas de los lenguajes de alto nivel pero a su vez dispone de construcciones del lenguaje que permiten un control a muy bajo nivel pudiendo acceder directamente a memoria o dispositivos perif\u00e9ricos.</p>"},{"location":"bloque_i/tema_1/page-1/#lenguajes-de-cuarta-generacion-4gl","title":"Lenguajes de cuarta generaci\u00f3n (4GL)","text":"<p>En los a\u00f1os 70 se empez\u00f3 a utilizar \u00e9ste t\u00e9rmino para hablar de lenguajes en los que apenas hay c\u00f3digo y en su lugar aparecen indicaciones sobre qu\u00e9 es lo que el programa debe de obtener. Se consideraba que el lenguaje SQL (muy utilizado en las bases de datos) y sus derivados eran de cuarta generaci\u00f3n. Los lenguajes de consulta de datos, creaci\u00f3n de formularios, informes,... son lenguajes de cuarta generaci\u00f3n. Aparecieron con los sistemas de base de datos. Actualmente se consideran lenguajes de \u00e9ste tipo a aquellos lenguajes que se programan sin escribir casi c\u00f3digo (lenguajes visuales), mientras que tambi\u00e9n se propone que este nombre se reserve a los lenguajes orientados a objetos.</p>"},{"location":"bloque_i/tema_1/page-1/#lenguaje-orientado-a-objetos","title":"Lenguaje orientado a objetos","text":"<p>En los 80 llegan los lenguajes preparados para la programaci\u00f3n orientada a objetos todos procedentes de Simula (1964) considerado el primer lenguaje con facilidades de uso de objetos. De estos destac\u00f3 inmediatamente C++. A partir de C++ aparecieron numerosos lenguajes que convirtieron los lenguajes cl\u00e1sicos en lenguajes orientados a objetos y adem\u00e1s con mejoras en el entorno de programaci\u00f3n, son los llamados lenguajes visuales: Visual Basic, Delphi (versi\u00f3n orientada a objetos de Pascal), Visual C++,...En 1995 aparece Java como lenguaje totalmente orientado a objetos y en el a\u00f1o 2000 aparece C# un lenguaje que toma la forma de trabajar de C++ y del propio Java.</p>"},{"location":"bloque_i/tema_1/page-1/#lenguajes-para-la-web","title":"Lenguajes para la web","text":"<p>La popularidad de Internet ha producido lenguajes h\u00edbridos que se mezclan con el c\u00f3digo HTML con el que se crean las p\u00e1ginas web. HTML no es un lenguaje en s\u00ed sino un formato de texto pensado para crear p\u00e1ginas web. Estos lenguajes se usan para poder realizar p\u00e1ginas web m\u00e1s potentes. Son lenguajes interpretados como JavaScript o VB Script, o lenguajes especiales para uso en servidores como ASP, JSP o PHP. Todos ellos permiten crear p\u00e1ginas web usando c\u00f3digo mezcla de p\u00e1ginas web y lenguajes de programaci\u00f3n sencillos.</p>"},{"location":"bloque_i/tema_1/page-1/#tipos-de-lenguajes","title":"Tipos de lenguajes","text":"<p>Seg\u00fan el estilo de programaci\u00f3n se puede hacer esta divisi\u00f3n:</p> <ul> <li>Lenguajes imperativos. Son lenguajes que se centran en c\u00f3mo resolver el problema. Las instrucciones se ejecutan secuencialmente y van modificando la memoria del ordenador para producir las salidas requeridas. La mayor\u00eda de lenguajes (C, Pascal, Basic, Cobol, ...) son de este tipo. Dentro de estos lenguajes est\u00e1n tambi\u00e9n los lenguajes orientados a objetos (C++, Java, C#,...).</li> <li>Lenguajes declarativos. Son lenguajes que se centran en el qu\u00e9 queremos resolver en lugar de en c\u00f3mo resolverlo. El m\u00e1s conocido de ellos es el SQL, lenguaje de consulta de Bases de datos.</li> <li>Lenguajes funcionales. Definen funciones que nos responden a trav\u00e9s de una serie de argumentos. Son lenguajes que usan expresiones matem\u00e1ticas. El m\u00e1s conocido de ellos es el LISP.</li> <li>Lenguajes l\u00f3gicos. Lenguajes utilizados para resolver expresiones l\u00f3gicas. Utilizan la l\u00f3gica para producir resultados. El m\u00e1s conocido es el PROLOG.</li> </ul>"},{"location":"bloque_i/tema_1/page-1/#interpretes-y-compiladores","title":"Interpretes y compiladores","text":"<p>A la hora de convertir un programa en c\u00f3digo m\u00e1quina, se pueden utilizar dos tipos de software: int\u00e9rpretes y compiladores.</p>"},{"location":"bloque_i/tema_1/page-1/#interpretes","title":"Int\u00e9rpretes","text":"<p>Se convierte cada l\u00ednea a c\u00f3digo m\u00e1quina y se ejecuta ese c\u00f3digo m\u00e1quina antes de convertir la siguiente l\u00ednea. De esa forma si las dos primeras l\u00edneas son correctas y la tercera tiene un fallo de sintaxis, ver\u00edamos el resultado de las dos primeras l\u00edneas y al llegar a la tercera se nos notificar\u00eda el fallo y finalizar\u00eda la ejecuci\u00f3n. El int\u00e9rprete hace una simulaci\u00f3n de modo que parece que la m\u00e1quina entiende directamente las instrucciones del lenguaje, pareciendo que ejecuta cada instrucci\u00f3n (como si fuese c\u00f3digo m\u00e1quina directo). El BASIC era un lenguaje interpretado, se traduc\u00eda l\u00ednea a l\u00ednea. Hoy en d\u00eda la mayor\u00eda de los lenguajes integrados en p\u00e1ginas web son interpretados, la raz\u00f3n es que como la descarga de Internet es lenta, es mejor que las instrucciones se vayan traduciendo seg\u00fan van llegando en lugar de cargar todas en el ordenador. Por eso lenguajes como JavaScript son interpretados.</p> <p>Un programa que se convierte a c\u00f3digo m\u00e1quina mediante un int\u00e9rprete sigue estos pasos:</p> <ol> <li>Lee la primera instrucci\u00f3n</li> <li>Comprueba si es correcta</li> <li>Convierte esa instrucci\u00f3n al c\u00f3digo m\u00e1quina equivalente</li> <li>Lee la siguiente instrucci\u00f3n</li> <li>Vuelve al paso 2 hasta terminar con todas las instrucciones</li> </ol> <p>Ventajas de los int\u00e9rpretes</p> <ul> <li>Se tarda menos en crear el primer c\u00f3digo m\u00e1quina. El programa se ejecuta antes.</li> <li>No hace falta cargar todas las l\u00edneas para empezar a ver resultados (lo que hace que sea una t\u00e9cnica id\u00f3nea para programas que se cargan desde Internet)</li> </ul> <p>Desventajas de los int\u00e9rpretes:</p> <ul> <li>El c\u00f3digo m\u00e1quina producido es peor ya que no se optimiza al valorar una sola l\u00ednea cada vez. El c\u00f3digo optimizado permite estudiar varias l\u00edneas a la vez para producir el mejor c\u00f3digo m\u00e1quina posible, por ello no es posible mediante el uso de int\u00e9rpretes.</li> <li>Todos los errores son errores en tiempo de ejecuci\u00f3n, no se pueden detectar antes de lanzar el programa. Esto hace que la depuraci\u00f3n de los errores sea m\u00e1s compleja.</li> <li>El c\u00f3digo m\u00e1quina resultante gasta m\u00e1s espacio.</li> <li>Hay errores dif\u00edcilmente detectables, ya que para que los errores se produzcan, las l\u00edneas de errores hay que ejecutarlas. Si la l\u00ednea es condicional, hasta que no probemos todas las posibilidades del programa, no sabremos todos los errores de sintaxis cometidos.</li> </ul>"},{"location":"bloque_i/tema_1/page-1/#compiladores","title":"Compiladores","text":"<p>Se trata de software que traduce las instrucciones de un lenguaje de programaci\u00f3n de alto nivel a c\u00f3digo m\u00e1quina. La diferencia con los int\u00e9rpretes reside en que se analizan todas las l\u00edneas antes de empezar la traducci\u00f3n. Durante muchos a\u00f1os, los lenguajes potentes han sido compilados. El uso masivo de Internet ha propiciado que esta t\u00e9cnica a veces no sea adecuada y haya lenguajes modernos interpretados o semi-interpretados, mitad se compila hacia un c\u00f3digo intermedio y luego se interpreta l\u00ednea a l\u00ednea (esta t\u00e9cnica la siguen Java y los lenguajes de la plataforma .NET de Microsoft).</p> <p>Ventajas de los compiladores:</p> <ul> <li>Se detectan errores antes de ejecutar el programa (errores de compilaci\u00f3n).</li> <li>El c\u00f3digo m\u00e1quina generado es m\u00e1s r\u00e1pido (ya que se optimiza).</li> <li>Es m\u00e1s f\u00e1cil hacer procesos de depuraci\u00f3n de c\u00f3digo.</li> </ul> <p>Desventajas de los compiladores:</p> <ul> <li>El proceso de compilaci\u00f3n del c\u00f3digo es lento.</li> <li>No es \u00fatil para ejecutar programas desde Internet ya que hay que descargar todo el programa antes de traducirle, lo que ralentiza mucho su uso.</li> </ul>"},{"location":"bloque_i/tema_1/page-1/#tipos-de-paradigmas-de-programacion","title":"Tipos de paradigmas de programaci\u00f3n","text":"<p>Un paradigma de programaci\u00f3n es un modelo b\u00e1sico de dise\u00f1o y desarrollo de programas que permite generar programas con un conjunto de normas espec\u00edficas.</p> <p>En general, la mayor\u00eda de paradigmas son variantes de los dos tipos principales de programaci\u00f3n, imperativa y declarativa. En la programaci\u00f3n imperativa se describe paso a paso un conjunto de instrucciones que deben ejecutarse para variar el estado del programa y hallar la soluci\u00f3n, es decir, un algoritmo en el que se describen los pasos necesarios para solucionar el problema.</p> <p>En la programaci\u00f3n declarativa las sentencias que se utilizan lo que hacen es describir el problema que se quiere solucionar; se programa diciendo lo que se quiere resolver pero no las instrucciones necesarias para solucionarlo. Esto \u00faltimo se realizar\u00e1 mediante mecanismos internos de deducci\u00f3n de informaci\u00f3n a partir de la descripci\u00f3n realizada.</p> <p>A continuaci\u00f3n se describen algunas de las distintas variantes de paradigmas de programaci\u00f3n:</p>"},{"location":"bloque_i/tema_1/page-1/#programacion-imperativa","title":"Programaci\u00f3n imperativa","text":"<p>Es uno de los paradigmas de programaci\u00f3n de computadoras m\u00e1s utilizados. Bajo este paradigma, la programaci\u00f3n se describe en t\u00e9rminos del estado del programa y de sentencias que cambian dicho estado. Java es un lenguaje imperativo, lo que implica que un programa Java est\u00e1 compuesto por una secuencia de instrucciones, que son ejecutadas en el mismo orden en el que se escriben, de manera que al ejecutarla se produce cambios en el estado del programa.</p> <p>Dentro de esta categor\u00eda se engloban la programaci\u00f3n estructurada y la programaci\u00f3n orientada a objetos, las cuales han permitido mejorar la mantenibilidad y la calidad de los programas imperativos.</p>"},{"location":"bloque_i/tema_1/page-1/#programacion-estructurada","title":"Programaci\u00f3n estructurada","text":"<p>Est\u00e1 orientada a mejorar la claridad, calidad y tiempo de desarrollo de un programa de computadora recurriendo \u00fanicamente a subrutinas y tres estructuras b\u00e1sicas: secuencia, selecci\u00f3n (if y switch) e iteraci\u00f3n(bucles for y while).</p> <p>Una subrutina o subprograma, como idea general, se presenta como un subalgoritmo que forma parte del algoritmo principal, el cual permite resolver una tarea espec\u00edfica.</p>"},{"location":"bloque_i/tema_1/page-1/#programacion-orientada-a-objetos","title":"Programaci\u00f3n orientada a objetos","text":"<p>La programaci\u00f3n orientada a objetos encapsula elementos denominados objetos.</p> <p>Bajo este paradigma, la programaci\u00f3n se describe como una serie de objetos independientes que se comunican entre s\u00ed. Java es un lenguaje orientado a objetos.</p>"},{"location":"bloque_i/tema_1/page-1/#programacion-orientada-a-eventos","title":"Programaci\u00f3n orientada a eventos","text":"<p>La programaci\u00f3n dirigida por eventos es un paradigma de programaci\u00f3n en el que tanto la estructura como la ejecuci\u00f3n de los programas van determinados por los sucesos que ocurran en el sistema, definidos por el usuario o lo que sea que est\u00e9 accionando el programa.</p> <p>Mientras que en la programaci\u00f3n estructurada es el programador el que define cu\u00e1l va a ser el flujo del programa, en la programaci\u00f3n dirigida por eventos ser\u00e1 el propio usuario, o lo que sea que est\u00e9 accionando el programa, el que dirija el flujo del programa. Aunque en la programaci\u00f3n estructurada puede haber intervenci\u00f3n de un agente externo al programa, estas intervenciones ocurrir\u00e1n cuando el programador lo haya determinado, y no en cualquier momento como puede ser en el caso de la programaci\u00f3n dirigida por eventos.</p>"},{"location":"bloque_i/tema_1/page-1/#programacion-declarativa","title":"Programaci\u00f3n declarativa","text":"<p>Est\u00e1 basada en describir el problema declarando propiedades y reglas que deben cumplirse, en lugar de instrucciones. La soluci\u00f3n es obtenida mediante mecanismos internos de control, sin especificar exactamente c\u00f3mo encontrarla (tan solo se le indica a la computadora qu\u00e9 es lo que se desea obtener o qu\u00e9 es lo que se est\u00e1 buscando). Los lenguajes declarativos tienen la ventaja de ser razonados matem\u00e1ticamente, lo que permite el uso de mecanismos matem\u00e1ticos para optimizar el rendimiento de los programas.</p> <p>Dentro de esta categor\u00eda se engloban la programaci\u00f3n funcional y la programaci\u00f3n l\u00f3gica.</p>"},{"location":"bloque_i/tema_1/page-1/#programacion-funcional","title":"Programaci\u00f3n funcional","text":"<p>Es un paradigma de programaci\u00f3n en el que el resultado de un programa deriva de la aplicaci\u00f3n de distintas funciones a la entrada, sin cambiar el estado interno del programa. En la programaci\u00f3n funcional los bloques principales de construcci\u00f3n de nuestros programas son las funciones, y no los objetos.</p> <p>Al aplicar programaci\u00f3n funcional se produce normalmente un c\u00f3digo m\u00e1s corto y m\u00e1s sencillo de entender que aplicando programaci\u00f3n imperativa.</p>"},{"location":"bloque_i/tema_1/page-1/#programacion-logica","title":"Programaci\u00f3n l\u00f3gica","text":"<p>Es un paradigma de programaci\u00f3n basado en la definici\u00f3n de relaciones l\u00f3gicas.</p>"},{"location":"bloque_i/tema_1/page-1/#programacion-multiparadigma","title":"Programaci\u00f3n multiparadigma","text":"<p>Es el uso de dos o m\u00e1s paradigmas dentro de un programa. Por ejemplo, Java es imperativo y orientado a objetos</p>"},{"location":"bloque_i/tema_1/page-10/","title":"10 N\u00fameros aleatorios","text":""},{"location":"bloque_i/tema_1/page-10/#la-clase-random","title":"La clase Random","text":"<p>En java disponemos de la clase Random para generar n\u00fameros aleatorios. La clase dispone de dos constructores, uno sin par\u00e1metros y otro con un par\u00e1metro llamado semilla (seed). Aunque no  podemos  predecir  que  n\u00fameros  se  generar\u00e1n  con  una  semilla  particular,  podemos  sin embargo, duplicar una serie de n\u00fameros aleatorios usando la misma semilla. Es decir, cada vez que  creamos  un  objeto  de  la  clase  Random  con  la  misma  semilla  obtendremos  la  misma secuencia de n\u00fameros aleatorios. Podemos cambiar la semilla de los n\u00fameros aleatorios en cualquier momento utilizando el m\u00e9todo setSeed.</p>"},{"location":"bloque_i/tema_1/page-10/#metodos","title":"M\u00e9todos","text":"<p>Algunos m\u00e9todos de la clase Random para generar n\u00fameros aleatorios:</p> <ul> <li>nextInt(): genera un n\u00famero aleatorio entero de tipo int</li> <li>nextInt(int n): genera un n\u00famero aleatorio entero de tipo int entre 0(incluido) y n(excluido)</li> <li>nextLong(): genera un n\u00famero aleatorio entero de tipo long</li> <li>nextFloat(): genera un n\u00famero aleatorio de tipo float entre 0.0(incluido) y 1.0(excluido)</li> <li>nextDouble():  genera  un  n\u00famero  aleatorio  de  tipo  double  entre  0.0(incluido)  y 1.0(excluido)</li> <li>nextBoolean(): genera un booleano aleatorio</li> </ul>"},{"location":"bloque_i/tema_1/page-10/#numeros-aleatorios-en-un-rango","title":"N\u00fameros aleatorios en un rango","text":"<p>Para generar n\u00fameros aleatorios enteros comprendidos entre un rango de dos n\u00fameros enteros min y max, hay que utilizar la siguiente f\u00f3rmula:</p> <p><code>nextInt(max - min + 1) + min</code></p> <p>Por  ejemplo,  si  queremos  generar  un  n\u00famero  aleatorio  entre  5  y  10:  nextInt(10-5+1)+5  \u2192 nextInt(6)+5</p>"},{"location":"bloque_i/tema_1/page-10/#ejemplo-de-uso","title":"Ejemplo de uso","text":"<p>En el siguiente ejemplo, se puede observar en la ejecuci\u00f3n que utilizando el Random con semilla siempre se generan los mismos n\u00fameros</p> <pre><code>public class RandomClass {\npublic static void main(String[] args) {\nRandom random = new Random(); // Sin semilla\nRandom randomSeed = new Random(3816); // Con semilla. Siempre se generan los mimos n\u00fameros\nSystem.out.println(random.nextBoolean());\nSystem.out.println(random.nextInt());\nSystem.out.println(random.nextLong());\nSystem.out.println(random.nextFloat());\nSystem.out.println(random.nextDouble());\nSystem.out.println(random.nextInt(6) + 5); // Genera un n\u00famero aleatorio entre 5 y 10\nSystem.out.println(randomSeed.nextBoolean());\nSystem.out.println(randomSeed.nextInt());\nSystem.out.println(randomSeed.nextLong());\nSystem.out.println(randomSeed.nextFloat());\nSystem.out.println(randomSeed.nextDouble());\nSystem.out.println(randomSeed.nextInt(6) + 5); // Genera un n\u00famero aleatorio entre 5 y 10\n}\n}\n</code></pre> Ejercicio <p>Sacar aleatoriamente lo siguiente:</p> <ul> <li>La cara de una moneda</li> <li>El lanzamiento de un dado</li> <li>Un n\u00famero entre 34 y 68 ambos incluidos</li> <li>Un n\u00famero decimal</li> <li>Un d\u00eda de la semana y mostrar si es fin de semana o no</li> <li>Un mes del a\u00f1o y mostrar si es verano o no (entenderemos como veranos los meses de julio y agosto)</li> </ul>"},{"location":"bloque_i/tema_1/page-11/","title":"11 Lectura por teclado","text":""},{"location":"bloque_i/tema_1/page-11/#la-clase-system","title":"La clase System","text":"<p>Las aplicaciones pueden necesitar acceder a los recursos del sistema, como por ejemplo, a los dispositivos de entrada/salida est\u00e1ndar para recoger datos desde el teclado o mostrar datos por pantalla. En Java, la entrada por teclado y la salida de informaci\u00f3n por pantalla se hace mediante la clase System del paquete java.lang de la biblioteca de clases de Java. Dicha clase contiene el atributo in para el teclado y el atributo out para la pantalla.</p> <p>Dichos atributos son est\u00e1ticos por lo que se accede a ellos con el nombre de la clase System:</p> <ul> <li><code>System.in</code> Entrada est\u00e1ndar: teclado.</li> <li><code>System.out</code> Salida est\u00e1ndar: pantalla.</li> </ul>"},{"location":"bloque_i/tema_1/page-11/#la-clase-scanner","title":"La clase Scanner","text":"<p>El  kit  de  desarrollo  de  Java,  a  partir  de  su  versi\u00f3n  1.5,  incorpora  la  clase  Scanner  del  paquete java.util la cual posee m\u00e9todos para leer valores de entrada que pueden venir de varias fuentes, como por ejemplo, de datos introducidos por teclado o datos almacenados en un archivo. Para leer datos desde el teclado, tenemos que pasarle el  <code>System.in</code>  al constructor del Scanner:</p> <pre><code>Scanner keyboard = new Scanner (System.in);\n</code></pre> <p>Veamos algunos m\u00e9todos de esta clase:</p> <ul> <li>nextByte, nextShort, nextInt y nextLong: para leer datos de tipo entero.</li> <li>nextFloat y nextDouble: para leer n\u00fameros decimales.</li> <li>next: lee una palabra, es decir, hasta que encuentre un espacio.</li> <li>nextLine: lee una l\u00ednea completa, es decir, hasta que encuentre un salto de l\u00ednea (\\n).</li> </ul> <p>Por ejemplo, para leer un dato de tipo int ser\u00eda:</p> <pre><code>int i = keyboard.nextInt ();\n</code></pre> <p>O bien esta otra instrucci\u00f3n para leer una l\u00ednea completa:</p> <pre><code>String string = keyboard.nextLine();\n</code></pre> <p>He aqu\u00ed un ejemplo de entrada de teclado con la clase Scanner:</p> <pre><code>import java.util.Scanner;\npublic class ScannerClass {\npublic static void main(String[] args) {\nScanner keyboard = new Scanner(System.in);\nString string;\nint i;\nfloat f;\nboolean b;\nstring = keyboard.nextLine();\nSystem.out.println(string);\ni = keyboard.nextInt();\nSystem.out.println(i);\nb = keyboard.nextBoolean();\nSystem.out.println(b);\nf = keyboard.nextFloat();//(1)!\nSystem.out.println(f);\n}\n}\n</code></pre> <ol> <li>El s\u00edmbolo separador de decimales ser\u00e1 la coma si nuestro idioma por defecto del sistema operativo est\u00e1 configurado en espa\u00f1ol.</li> </ol> <p>El  s\u00edmbolo  separador  de  decimales  ser\u00e1  la  coma  si  nuestro  idioma  por  defecto  del  sistema operativo  est\u00e1  configurado  en  espa\u00f1ol.  Si  deseamos  que  el  separador  decimal  sea  el  punto  en lugar  de  la  coma,  entonces  tendremos  que  a\u00f1adir <code>useLocale(Locale.US)</code>   cuando  creemos  el Scanner:</p> <pre><code>import java.util.Locale;\nimport java.util.Scanner;\npublic class ScannerClassLocale {\npublic static void main(String[] args) {\nScanner keyboard = new Scanner(System.in).useLocale(Locale.US);\nfloat f;\n// Debido al useLocale(Locale.US), el s\u00edmbolo separador de decimales ser\u00e1 el punto\nf = keyboard.nextFloat();\nSystem.out.println(f);\n}\n}\n</code></pre> <p>Veamos un ejemplo de lectura de palabras con next():</p> <pre><code>import java.util.Scanner;\npublic class Next {\npublic static void main(String[] args) {\nScanner keyboard = new Scanner(System.in);\nString string1, string2, string3;\nSystem.out.println(\"Introduzca 3 palabras separadas por espacio: \");\nstring1 = keyboard.next();\nstring2 = keyboard.next();\nstring3 = keyboard.next();\nSystem.out.println(\"Primera palabra: \" + string1);\nSystem.out.println(\"Segunda palabra: \" + string2);\nSystem.out.println(\"Tercera palabra: \" + string3);\n}\n}\n</code></pre>"},{"location":"bloque_i/tema_1/page-11/#buffer-de-datos","title":"Buffer de datos","text":"<p>Un buffer de datos es un espacio de memoria donde se almacenan datos de manera temporal mientras  son  transferidos  o  procesados.  Los  sistemas  de  entrada  de  teclado  poseen  un  buffer que almacena las teclas presionadas.</p> <p>Cuando  introducimos  un  dato  por  teclado,  para  indicar  que  hemos  finalizado  la  introducci\u00f3n pulsamos la tecla Enter. Cuando se ejecuta cualquier next con la clase Scanner(excepto nextLine), se coge el dato correspondiente del buffer pero el Enter se queda guardado como un <code>\\n</code> (salto de l\u00ednea) en el buffer. Si a continuaci\u00f3n se ejecuta un nextLine, lee hasta el salto de l\u00ednea del buffer, es  decir,  lee  cadena  vac\u00eda  y  ya  no  le  da  opci\u00f3n  al  usuario  de  introducir  la  cadena.  Una  posible soluci\u00f3n  ser\u00eda  limpiar  el  buffer  con  un  nextLine  y  luego  realizar  otro  nextLine  para  pedirle  la cadena al usuario.</p> <pre><code>import java.util.Scanner;\npublic class NextLine {\npublic static void main(String[] args) {\nScanner keyboard = new Scanner(System.in);\nString string;\nint number;\nboolean b;\n// El nextLine() toma el salto de l\u00ednea dejado por cualquier otro next\nSystem.out.println(\"Introduzca un n\u00famero entero: \");\nnumber = keyboard.nextInt();\nSystem.out.println(number);\nSystem.out.println(\"Introduzca una cadena: \");\nstring = keyboard.nextLine();\nSystem.out.println(string);\nSystem.out.println(\"Introduzca un booleano: \");\nb = keyboard.nextBoolean();\nSystem.out.println(b);\nSystem.out.println(\"Introduzca una cadena: \");\nstring = keyboard.nextLine();\nSystem.out.println(string);\nSystem.out.println(\"Introduzca una cadena con next: \");\nstring = keyboard.next();\nSystem.out.println(string);\nSystem.out.println(\"Introduzca una cadena: \");\nstring = keyboard.nextLine();\nSystem.out.println(string);\n// Soluci\u00f3n: poner un nextLine que coja el salto de l\u00ednea. A esto se le conoce\n// como limpiar el buffer\nSystem.out.println(\"Vamos a solucionar el problema.\\nIntroduzca un n\u00famero entero: \");\nnumber = keyboard.nextInt();\nSystem.out.println(number);\nSystem.out.println(\"Introduce una cadena: \");\nkeyboard.nextLine(); // Limpieza del buffer\nstring = keyboard.nextLine();\nSystem.out.println(string);\n}\n}\n</code></pre> <p>Otra soluci\u00f3n ser\u00eda indicarle al objeto scanner que como delimitador use el \\n ya que por defecto es el car\u00e1cter espacio. De esta forma, cuando utilicemos next(), leer\u00e1 todos los caracteres hasta el siguiente \\n. El \u00fanico inconveniente de esto es que no podremos leer palabra a palabra.</p> <pre><code>public class NextDelimiter {\npublic static void main(String[] args) {\nString delimiterWindows = \"\\\\r\\\\n\";\nString delimiterLinuxMac = \"\\\\n\";\nScanner keyboard = new Scanner(System.in).useDelimiter(delimiterWindows);\nString string;\nint number;\nSystem.out.println(\"Introduzca un n\u00famero entero: \");\nnumber = keyboard.nextInt();\nSystem.out.println(number);\nSystem.out.println(\"Introduzca una cadena: \");\nstring = keyboard.next();\nSystem.out.println(string);\n}\n}\n</code></pre> Ejercicio <p>Solic\u00edtale al usuario los siguientes datos. A continuaci\u00f3n, mu\u00e9stralos por consola:</p> <ol> <li>Nombre</li> <li>Apellidos</li> <li>Edad</li> <li>Direcci\u00f3n<ul> <li>Calle</li> <li>N\u00famero</li> <li>C\u00f3digo postal</li> <li>Provincia</li> </ul> </li> <li>Si es estudiante (boolean)</li> <li>Altura (con decimales)</li> </ol>"},{"location":"bloque_i/tema_1/page-12/","title":"12 Escritura en pantalla","text":""},{"location":"bloque_i/tema_1/page-12/#introduccion","title":"Introducci\u00f3n","text":"<p>La salida por pantalla en Java se hace con el objeto System.out. Este objeto es una instancia de la clase  PrintStream  del  paquete  java.lang.  Si  miramos  la  API  de  PrintStream  obtendremos  la variedad de m\u00e9todos para mostrar datos por pantalla, algunos de estos son:</p> <ul> <li>print y println: muestran los datos por pantalla. Est\u00e1n sobrecargados para varios tipos de datos. El println inserta un salto de l\u00ednea despu\u00e9s de mostrar el dato.</li> <li>printf: escribe una cadena de texto utilizando formato.</li> </ul> <p>En print y println, cuando queramos escribir un mensaje y el valor de una variable debemos utilizar el operador de  <code>concatenaci\u00f3n</code>  de cadenas (+), por ejemplo:</p> <pre><code>System.out.println(\"Bienvenido, \" + nombre);\n</code></pre> <p>Escribe el mensaje de \"Bienvenido, Carlos\", si el valor de la variable nombre es Carlos. En print y println, todas las variables que se muestran se consideran como cadenas de texto sin formato,por ejemplo, no ser\u00eda posible indicar que escriba un n\u00famero decimal con dos cifras decimales.</p> <p>Para ello se utiliza printf</p> Ejercicio 1 <p>Muestra en consola lo siguiente, exactamente igual, utilizando <code>System.out.print</code></p> <pre><code>La letra n\u00famero \"101\" es la:    'e'\nEl car\u00e1cter '\\' es:\n        \"especial\"\n</code></pre>"},{"location":"bloque_i/tema_1/page-12/#el-metodo-printf","title":"El m\u00e9todo printf","text":"<p><code>printf(String format, Object... args)</code></p> <p>En <code>String format</code> se coloca la cadena a la cual se le quiere dar formato. Utiliza unos c\u00f3digos de conversi\u00f3n para indicar del contenido a mostrar de qu\u00e9 tipo es. Estos c\u00f3digos se caracterizan porque llevan delante el s\u00edmbolo <code>%</code>, algunos de ellos son:</p> <ul> <li><code>%c</code>: car\u00e1cter.</li> <li><code>%s</code>: cadena de texto.</li> <li><code>%d</code>: entero.</li> <li><code>%f</code>: n\u00famero decimal.</li> </ul> <p>Tambi\u00e9n se pueden usar las secuencias de escape que van precedidas de <code>\\</code>, como por ejemplo <code>\\n</code> y <code>\\t</code>, incluso el salto de l\u00ednea <code>\\n</code> tambi\u00e9n se puede especificar como <code>%n</code> .</p> <p>En <code>Object... args</code> se colocan los valores correspondientes. El primero corresponde al primer %, el segundo al segundo, y as\u00ed sucesivamente. Dichos valores tienen que ser expresiones que devuelvan resultados con tipos compatibles a los % que correspondan.</p> <p>Ejemplos:</p> <pre><code>System.out.printf(\"El car\u00e1cter es %c\", 'a');\n</code></pre> <p>Nos mostrar\u00eda por pantalla: <code>El car\u00e1cter es a</code></p> <pre><code>int integer = 10;\nSystem.out.printf(\"%d\", integer);\n</code></pre> <p>Salida por pantalla: <code>10</code></p> <p>Si queremos mostrar el s\u00edmbolo % se utiliza otro % delante:</p> <pre><code>System.out.printf(\"El 20%% de %d es %d\\n\", 200, 200*20/100);\n</code></pre> <p>Salida por pantalla: <code>El 20% de 200 es 40</code></p>"},{"location":"bloque_i/tema_1/page-12/#decimales","title":"Decimales","text":"<p>Para <code>%f</code> podemos especificar el n\u00famero de decimales escribiendo <code>.n</code> entre % y f, siendo n el n\u00famero de decimales:</p> <pre><code>System.out.printf(\"%.2f\", 12.3698);\n</code></pre> <p>La salida por pantalla es <code>12,37</code> ya que se realiza un redondeo para mostrar los decimales indicados.</p>"},{"location":"bloque_i/tema_1/page-12/#numeros-con-signo","title":"N\u00fameros con signo","text":"<p>Para mostrar n\u00fameros con signo se utiliza el s\u00edmbolo + entre % y d si es un n\u00famero entero o entre % y f si es un n\u00famero decimal.</p> <pre><code>int integer = 10;\nSystem.out.printf(\"%+d\", integer);\n</code></pre> <p>Salida por pantalla: <code>+10</code></p> <pre><code>int integer = -10;\nSystem.out.printf(\"%-d\", integer);\n</code></pre> <p>Salida por pantalla: <code>-10</code></p> <pre><code>double decimal = 3.968;\nSystem.out.printf(\"%+.2f\", decimal);\n</code></pre> <p>Salida por pantalla: <code>+3.97</code></p> <pre><code>double decimal = -3.968;\nSystem.out.printf(\"%+f\", decimal);\n</code></pre> <p>Salida por pantalla: <code>-3.968000</code></p>"},{"location":"bloque_i/tema_1/page-12/#mostrar-mas-de-un-valor","title":"Mostrar m\u00e1s de un valor","text":"<p>Utilizaremos tantos % como valores vamos a formatear. Despu\u00e9s de la primera coma, se van poniendo los valores separados por comas, el primero corresponde al primer %, el segundo al segundo %, y as\u00ed sucesivamente.</p> <pre><code>double decimal = 1.25036;\nint integer = 10;\nSystem.out.printf(\"decimal = %.2f integer = %d\", decimal, integer);\n</code></pre> <p>Salida por pantalla: <code>decimal = 1,25 integer = 10</code></p> <p>Tambi\u00e9n podemos cambiar el orden por defecto de correspondencia entre los valores y los % con el s\u00edmbolo <code>$</code>. Ejemplo: <code>%2$d</code> significa que al n\u00famero entero (%d) se le va a asignar el segundo valor (<code>2$</code>).</p> <pre><code>System.out.printf(\"decimal1 = %2$.2f integer = %1$d decimal2 = %2$+.1f\", integer, decimal);\n</code></pre> <p>Salida por pantalla: <code>decimal1 = 1,25 integer = 10 decimal2 = +1,3</code></p> <p>Ejemplo: mostrar el n\u00fameros 123.4567 y su cuadrado ambos con dos decimales:</p> <pre><code>double decimal = 123.4567;\nSystem.out.printf(\"El cuadrado de %.2f es %.2f\", decimal, decimal * decimal)\n</code></pre> <p>Salida por pantalla: <code>El cuadrado de 123,46 es 15241,56</code></p>"},{"location":"bloque_i/tema_1/page-12/#especificar-un-ancho-de-campo","title":"Especificar un ancho de campo","text":"<p>printf permite tambi\u00e9n mostrar valores con un ancho de campo determinado. Por ejemplo, si queremos mostrar un n\u00famero entero en un ancho de 10 caracteres, escribimos 10 enter % y d:</p> EJEMPLOSALIDA <pre><code>int integer = 1234;\nSystem.out.printf(\"Ancho de 10 caracteres con un entero: %10d\", integer);\n</code></pre> <pre><code>Ancho de 10 caracteres con un entero:      1234\n</code></pre> <p>Otro ejemplo con n\u00fameros decimales: mostrar con dos decimales, con signo y en un ancho de campo de 10 caracteres:</p> EJEMPLOSALIDA <pre><code>double decimal = 1.25036;\nSystem.out.printf(\"Ancho de 10 caracteres con un decimal: %+10.2f\", decimal);\n</code></pre> <pre><code>Ancho de 10 caracteres con un decimal:      +1,25\n</code></pre> <p>En el ancho de 10 caracteres, se cuentan adem\u00e1s de las cifras del n\u00famero, la coma decimal, el signo si lo lleva. En este caso, el n\u00famero ocupa un espacio de 5 caracteres (3 cifras, la coma y el signo), por lo tanto, se a\u00f1aden 5 espacios en blanco al principio para completar el tama\u00f1o de 10.</p> <p>Para completar el ancho de caracteres con ceros en lugar de con espacios, se coloca un 0 delante del ancho de caracteres:</p> EJEMPLOSALIDA <pre><code>double decimal = 1.25036;\nSystem.out.printf(\"Ancho de caracteres rellenado con ceros: %+010.2f\", decimal);\n</code></pre> <pre><code>Ancho de caracteres rellenado con ceros: +000001,25\n</code></pre> <p>Veamos un ejemplo con cadenas: mostrar la cadena \"Manolo\" con un ancho de 10 caracteres:</p> EJEMPLOSALIDA <pre><code>System.out.printf(\"Ancho de caracteres con cadenas:%10s\", \"Manolo\");\n</code></pre> <pre><code>Ancho de caracteres con cadenas:    Manolo\n</code></pre>"},{"location":"bloque_i/tema_1/page-12/#alineacion-a-la-izquierda","title":"Alineaci\u00f3n a la izquierda","text":"<p>Con el signo <code>-</code> se indica alineaci\u00f3n a la izquierda.</p> <p>Ejemplo: mostrar un decimal con un ancho de 9 caracteres, con tres decimales y alineado a la izquierda:</p> EJEMPLOSALIDA <pre><code>double decimal = 58.965874f;\nSystem.out.printf(\"decimal=%-9.3fQue ocupe 9 caracteres, con tres decimales y alineado a la izquierda\", decimal);\n</code></pre> <pre><code>decimal=58.966   Que ocupe 9 caracteres, con tres decimales y alineado a la izquierda\n</code></pre> <p>Ejemplo con cadenas: mostrar la cadena \"Manolo\" con un ancho de 10 caracteres y alineada a la izquierda:</p> EJEMPLOSALIDA <pre><code>System.out.printf(\"%-10s:Alineaci\u00f3n a la izquierda con cadenas\", \"Manolo\");\n</code></pre> <pre><code>Manolo    :Alineaci\u00f3n a la izquierda con cadenas\n</code></pre>"},{"location":"bloque_i/tema_1/page-12/#ejemplos","title":"Ejemplos","text":"<p>He aqu\u00ed todos los ejemplos de printf vistos en este apartado:</p> <pre><code>public class Printf {\npublic static void main(String[] args) {\ndouble decimal;\nint integer;\nSystem.out.printf(\"El car\u00e1cter es %c%n\", 'a');\ninteger = 10;\nSystem.out.printf(\"%d\\n\", integer);\nSystem.out.printf(\"El 20%% de %d es %d\\n\", 200, 200 * 20 / 100);\nSystem.out.printf(\"%.2f\\n\", 12.3698);\ndecimal = 1.25036;\nSystem.out.printf(\"%.3f\\n\", decimal);\nSystem.out.printf(\"%+d\\n\", integer);\ninteger = -10;\nSystem.out.printf(\"%+d\\n\", integer);\ndecimal = 3.968;\nSystem.out.printf(\"%+.2f\\n\", decimal);\ndecimal = -3.968;\nSystem.out.printf(\"%+f\\n\", decimal);\ndecimal = 1.25036;\ninteger = 10;\nSystem.out.printf(\"decimal = %.2f integer = %d\\n\", decimal, integer);\nSystem.out.printf(\"decimal1 = %2$.2f integer = %1$d decimal2 = %2$+.1f\\n\", integer, decimal);\ndecimal = 123.4567;\nSystem.out.printf(\"El cuadrado de %.2f es %.2f\\n\", decimal, decimal * decimal);\ninteger = 1234;\nSystem.out.printf(\"Ancho de 10 caracteres con un entero:%10d\\n\", integer);\ndecimal = 1.25036;\nSystem.out.printf(\"Ancho de 10 caracteres con un decimal:%+10.2f\\n\", decimal);\ndecimal = 1.25036;\nSystem.out.printf(\"Ancho de caracteres rellenado con ceros:%+010.2f\\n\", decimal);\nSystem.out.printf(\"Ancho de caracteres con cadenas:%10s\\n\", \"Manolo\");\ndecimal = 58.965874f;\nSystem.out.printf(\"decimal=%-9.3fQue ocupe 9 caracteres, con tres decimales y alineado a la izquierda\\n\", decimal);\nSystem.out.printf(\"%-10s:Alineaci\u00f3n a la izquierda con cadenas\\n\", \"Manolo\");\n}\n}\n</code></pre>"},{"location":"bloque_i/tema_1/page-12/#ejemplo-de-scanner-y-printf","title":"Ejemplo de Scanner y printf","text":"<p>He aqu\u00ed un ejemplo de entrada/salida de datos utilizando Scanner y printf.</p> <pre><code>import java.util.Scanner;\npublic class InputOutput {\npublic static void main(String[] args) {\nScanner keyboard = new Scanner(System.in);\nString name;\nint age;\nfloat salary;\n// Entrada de datos\nSystem.out.print(\"Nombre: \");\nname = keyboard.nextLine();\nSystem.out.print(\"Edad: \");\nage = keyboard.nextInt();\nSystem.out.print(\"Salario: \");\nsalary = keyboard.nextFloat();\n// Salida de datos\nSystem.out.printf(\"\\nBienvenido: %s\\n\", name);\nSystem.out.printf(\"Tienes: %d a\u00f1os\\n\", age);\nSystem.out.printf(\"Tu salario es: %.2f euros\\n\", salary);\n}\n}\n</code></pre> Ejercicio 2     <p>Utilizando las siguientes variables:</p> <pre><code>int x = 10;\nint y = -10;\nfloat n = 13.269834f;\nString cad = \"Ana\";\n</code></pre> <p>Muestra en consola el siguiente resultado, exactamente igual, utilizando <code>System.out.printf</code>, sin utilizar espacios ni tabulaciones en la cadena de formato y utilizando solamente las variables indicadas anteriormente.</p> <pre><code>10\n+10\n-10\n13,27\n  +13,2698\n  13,26983\n+00013,270\nn=13,27   x=10\n      AnaAna  Ana\n</code></pre>"},{"location":"bloque_i/tema_1/page-12/#colores","title":"Colores","text":"<p>Para poder utilizar colores en la escritura de datos por pantalla, hay que comprobar si es necesario instalar alg\u00fan plugin en el IDE.</p> <p>Las secuencias de escape ANSI permiten enviar informaci\u00f3n de control a la consola para cambiar los  atributos  del  texto  representado.  Solo  debemos  anteponer  a  la  cadena  que  queremos mostrar en color el c\u00f3digo de escape ANSI referente al color.</p> <p>Cuando aplicamos un color a la salida por consola, el resto de salida por consola seguir\u00e1 saliendo de dicho color hasta que se especifique otro color de salida o finalicemos el texto con el c\u00f3digo RESET, en cuyo caso se vuelve al color por defecto.</p> <pre><code>public class Colors {\npublic static final String RESET = \"\\u001B[0m\";\npublic static final String BLACK = \"\\u001B[30m\";\npublic static final String RED = \"\\u001B[31m\";\npublic static final String GREEN = \"\\u001B[32m\";\npublic static final String YELLOW = \"\\u001B[33m\";\npublic static final String BLUE = \"\\u001B[34m\";\npublic static final String PURPLE = \"\\u001B[35m\";\npublic static final String CYAN = \"\\u001B[36m\";\npublic static final String WHITE = \"\\u001B[37m\";\npublic static final String BLACK_BACKGROUND = \"\\u001B[40m\";\npublic static final String RED_BACKGROUND = \"\\u001B[41m\";\npublic static final String GREEN_BACKGROUND = \"\\u001B[42m\";\npublic static final String YELLOW_BACKGROUND = \"\\u001B[43m\";\npublic static final String BLUE_BACKGROUND = \"\\u001B[44m\";\npublic static final String PURPLE_BACKGROUND = \"\\u001B[45m\";\npublic static final String CYAN_BACKGROUND = \"\\u001B[46m\";\npublic static final String WHITE_BACKGROUND = \"\\u001B[47m\";\npublic static final String BOLD = \"\\u001B[1m\";// Negrita\npublic static final String UNDERLINE = \"\\u001B[4m\";// Subrayado\npublic static final String REVERSED = \"\\u001B[7m\";// Invierte los colores del texto y del fondo\n}\n</code></pre> <pre><code>import static examples.tema_01.Colors.*;\npublic class ColorUse {\npublic static void main(String[] args) {\nSystem.out.println(RED + \"Este texto es de color rojo\" + RESET);\nSystem.out.println(\"Volvemos al color por defecto\");\nSystem.out.println(GREEN + \"...y ahora es verde\");\nSystem.out.println(PURPLE_BACKGROUND + \"Fondo morado\");\nSystem.out.println(CYAN + WHITE_BACKGROUND + \"Fondo blanco con texto celeste\");\nSystem.out.println(CYAN + WHITE_BACKGROUND + BOLD + \"Fondo blanco con texto celeste en negrita\");\nSystem.out.println(CYAN + WHITE_BACKGROUND + UNDERLINE + \"Fondo blanco con texto celeste subrayado\");\nSystem.out.printf(\"%s\\n\", YELLOW + RED_BACKGROUND + (char) 9733); //Estrella\nSystem.out.println(YELLOW + GREEN_BACKGROUND + \"Fondo verde con texto amarillo\");\nSystem.out.println(REVERSED + \"Fondo amarillo con texto verde usando REVERSED\");\n}\n}\n</code></pre> Ejercicio 3 <p>Muestra en consola una l\u00ednea de texto con 3 colores y fondos diferentes usando solamente un printf.</p>"},{"location":"bloque_i/tema_1/page-13/","title":"Proyecto","text":"<p>Se desea realizar un proyecto Java en el cu\u00e1l se le solicitar\u00e1 al usuario la siguiente informaci\u00f3n sobre un tri\u00e1ngulo.</p> <ol> <li>Valor de hipotenusa</li> <li>Valor de su base</li> <li>Valor de su altura</li> <li>Nombre</li> </ol> <p>Se mostrar\u00e1 una salida con el siguiente formato, con dicha informaci\u00f3n, usando color de letras azul y un fondo morado:</p> <pre><code>Tri\u00e1ngulo  : Sombra\nHipotenusa : 20,75 cm\nBase       : 15,75 cm\nAltura     : 14.00 cm\n======================\n   \u00c1rea: 189,00 cm\u00b2\n======================\n- No es recto\n- No es equil\u00e1tero\n</code></pre> <p>Para realizar el proyecto se tendr\u00e1 en cuenta los siguientes objeciones:</p> <ol> <li>Se crear\u00e1 un proyecto nuevo cuyo nombre sea el siguiente formato <code>pr01java-NOMBRE-triangulos</code> siendo NOMBRE el nombre del alumno.</li> <li>Se declarar\u00e1 aquellas variables que sean necesarias inicializ\u00e1ndolas si es necesario, indicando el tipo correspondiente.</li> <li>Se deber\u00e1 realizar las operaciones pertinentes, incluso si no se han dictado expl\u00edcitamente en el enunciado</li> <li>La entrega de este proyecto se realizar\u00e1 a trav\u00e9s de un enlace a un repositorio de GitHub, realizando siempre m\u00e1s de un commit.</li> </ol>"},{"location":"bloque_i/tema_1/page-2/","title":"2 Introducci\u00f3n al lenguaje Java","text":""},{"location":"bloque_i/tema_1/page-2/#historia","title":"Historia","text":"<p>Java es un lenguaje de programaci\u00f3n de prop\u00f3sito general, concurrente, orientado a objetos, que fue dise\u00f1ado espec\u00edficamente para que los desarrolladores de aplicaciones escribieran el programa una vez y lo ejecutaran en cualquier dispositivo, lo que quiere decir que el c\u00f3digo que es ejecutado en una plataforma no tiene que ser recompilado para correr en otra.</p> <p>El lenguaje de programaci\u00f3n Java fue originalmente desarrollado por James Gosling, de Sun Microsystems (constituida en 1982 y posteriormente adquirida el 27 de enero de 2010 por la compa\u00f1\u00eda Oracle). Su sintaxis deriva en gran medida de C y C++, pero tiene menos utilidades de bajo nivel que cualquiera de ellos.</p> <p>El lenguaje Java se cre\u00f3 con cinco objetivos principales:</p> <ol> <li>Deber\u00eda usar el paradigma de la programaci\u00f3n orientada a objetos.</li> <li>Deber\u00eda permitir la ejecuci\u00f3n de un mismo programa en m\u00faltiples sistemas operativos.</li> <li>Deber\u00eda incluir por defecto soporte para trabajo en red.</li> <li>Deber\u00eda dise\u00f1arse para ejecutar c\u00f3digo en sistemas remotos de forma segura.</li> <li>Deber\u00eda ser f\u00e1cil de usar y tomar lo mejor de otros lenguajes orientados a objetos, como C++.</li> </ol>"},{"location":"bloque_i/tema_1/page-2/#bytecode-jvm-jre-jdk","title":"Bytecode, JVM, JRE, JDK","text":"<p>En el mundo de la programaci\u00f3n siempre se ha hablado de lenguajes compilados y de lenguajes interpretados. El resultado del proceso de compilaci\u00f3n (en realidad de compilaci\u00f3n y enlazado) es un archivo ejecutable. Un archivo ejecutable es un programa que se puede lanzar directamente en el sistema operativo; en el caso de Windows o Linux simplemente con hacer doble clic sobre el archivo, se ejecutan sus instrucciones. La ventaja es que los programas ejecutables no necesitan compilarse de nuevo, son programas terminados. El problema es que los sistemas operativos utilizan diferentes tipos de archivos ejecutables: es decir, un archivo ejecutable en Linux no ser\u00eda compatible con Windows.</p> <p>En Java el c\u00f3digo no se traduce a c\u00f3digo ejecutable. En Java el proceso se conoce como precompilaci\u00f3n y sirve para producir un archivo (de extensi\u00f3n class) que contiene c\u00f3digo que no es directamente ejecutable (no es c\u00f3digo Java). Es un c\u00f3digo intermedio llamado bytecode. Al no ser ejecutable, el archivo class no puede ejecutarse directamente con un doble clic en el sistema. El bytecode tiene que ser interpretado (es decir, traducido l\u00ednea a l\u00ednea) por una aplicaci\u00f3n conocida como la m\u00e1quina virtual de Java (JVM).</p> <p>JRE es el Java Runtime Environment o, en espa\u00f1ol, el Entorno de Ejecuci\u00f3n de Java. Contiene a la JVM y otras herramientas que permiten la ejecuci\u00f3n de las aplicaciones Java. La gran ventaja es que el entorno de ejecuci\u00f3n de Java se fabrica para todas las plataformas; lo que significa que un archivo class se puede ejecutar en cualquier ordenador o m\u00e1quina que incorpore el JRE. S\u00f3lo hay una pega, si programamos utilizando por ejemplo la versi\u00f3n 10 de Java, el ordenador en el que queramos ejecutar el programa deber\u00e1 incorporar el JRE al menos de la versi\u00f3n 10.</p> <p>A la forma de producir c\u00f3digo final de Java se la llama JIT (Just In Time,justo en el momento) ya que el c\u00f3digo ejecutable se produce s\u00f3lo en el instante de ejecuci\u00f3n del programa. Es decir, no hay en ning\u00fan momento c\u00f3digo ejecutable.</p> <p>JRE no posee compiladores ni herramientas para desarrollar las aplicaciones Java, solo posee las herramientas para ejecutarlas. JDK es el Java Development Kit o, en espa\u00f1ol, Herramientas de Desarrollo de Java. Sirve para construir programas usando el lenguaje de programaci\u00f3n Java. Trae herramientas \u00fatiles como el compilador (javac), el debugger, herramientas de evaluaci\u00f3n de rendimiento de aplicaciones, etc. Una instalaci\u00f3n de JDK ya contiene un JRE dentro de las carpetas.</p> <p>Para programar en Java, el primer paso que tiene que realizar el alumno es instalarse el JDK de la \u00faltima versi\u00f3n de Java. La descarga la puede efectuar desde la p\u00e1gina web de Oracle https://www.oracle.com/technetwork/java/javase/downloads/index.html/ en la pesta\u00f1a Downloads. Buscar la \u00faltima versi\u00f3n y descargar el JDK del Sistema Operativo con el que el alumno va a trabajar. Pero si al instalar el JDK ya existe una instalaci\u00f3n del JRE en el ordenador de una versi\u00f3n anterior, el JDK no actualizar\u00e1 el JRE a la \u00faltima versi\u00f3n. En este caso, hay que desinstalar primero el JRE y ya despu\u00e9s instalar el JDK de la \u00faltima versi\u00f3n.</p>"},{"location":"bloque_i/tema_1/page-2/#entornos-de-desarrollo-integrado-ide-eclipse","title":"Entornos de desarrollo integrado (IDE): Eclipse","text":"<p>El c\u00f3digo en Java se puede escribir en cualquier editor de texto, y para compilar el c\u00f3digo en bytecodes, s\u00f3lo hace falta descargar la versi\u00f3n del JDK deseada. Sin embargo, la escritura y compilaci\u00f3n de programas hecha de esta forma es un poco inc\u00f3moda. Por ello numerosas empresas fabrican sus propios entornos de edici\u00f3n, algunos incluyen el compilador y otras utilizan el propio JDK de Java.</p> <p>Un IDE ( integrated development environment )  es  un  entorno  de  programaci\u00f3n  que  consiste  b\u00e1sicamente en un editor de c\u00f3digo, un compilador y un depurador.</p> <p>Algunas ventajas que ofrecen son</p> <ul> <li>Facilidades  para  escribir  c\u00f3digo:  coloreado  de  las  palabras  clave,  autocorrecci\u00f3n  al  escribir, abreviaturas,...</li> <li>Facilidades de depuraci\u00f3n, para probar el programa.</li> <li>Facilidad de configuraci\u00f3n del sistema.</li> <li>Facilidades para organizar los archivos de c\u00f3digo.</li> <li>Facilidad para exportar e importar proyectos.</li> </ul> <p>Algunos IDEs para programar en Java son Eclipse, Netbeans e IntelliJ IDEA.</p>"},{"location":"bloque_i/tema_1/page-2/#sentencias","title":"Sentencias","text":"<p>Una sentencia es la unidad m\u00ednima de ejecuci\u00f3n de un programa. Un programa se compone de conjunto de sentencias  que  acaban  resolviendo  un  problema.  Al  final  de  cada  una  de  las  sentencias  encontraremos  un punto y coma (<code>;</code>).</p> <p>Veamos algunos ejemplos de sentencias en java:</p> <ul> <li>Sentencias de declaraci\u00f3n:  <code>int x;</code></li> <li>Invocaciones o llamadas a m\u00e9todos de tipo void: <code>System.out.println(\"Bienvenidos a Programaci\u00f3n\");</code></li> <li>Sentencias de control de flujo: alteran el flujo de ejecuci\u00f3n para tomar decisiones o repetir sentencias.</li> </ul>"},{"location":"bloque_i/tema_1/page-2/#expresiones","title":"Expresiones","text":"<p>Una  expresi\u00f3n  es  una  combinaci\u00f3n  de  operadores  y  operandos  que  se  eval\u00faa  gener\u00e1ndose  un  \u00fanico resultado de un tipo determinado.</p> <p>La diferencia entre las sentencias y los operadores es que las expresiones devuelven un valor y las sentencias no devuelven nada.</p>"},{"location":"bloque_i/tema_1/page-2/#bloques","title":"Bloques","text":"<p>Un bloque es un conjunto de sentencias las cuales est\u00e1n delimitadas por llaves:</p> <pre><code>{\nsentencias\n}\n</code></pre>"},{"location":"bloque_i/tema_1/page-3/","title":"3 Variables y constantes","text":""},{"location":"bloque_i/tema_1/page-3/#introduccion","title":"Introducci\u00f3n","text":"<p>Las variables son contenedores que sirven para almacenar los datos que utiliza un programa. Dicho m\u00e1s sencillamente, son nombres que asociamos a determinados datos. La realidad es que cada variable ocupa un espacio  en  la  memoria  RAM  del  ordenador  para  almacenar  el  dato  al  que  se  refiere.  Es  decir,  cuando utilizamos el nombre de la variable realmente estamos haciendo referencia a un dato que est\u00e1 en memoria.</p> <p>Las  variables  tienen  un  nombre  (un  identificador)  que  se  escribe  en  min\u00fascula,  y  si  consta  de  varias palabras,  se  utiliza  la  notaci\u00f3n  lowerCamelCase.  Ejemplo:  myFirstVariable.  Adem\u00e1s,  deben  cumplir  lo siguiente:</p> <ul> <li>No deben comenzar con los caracteres guion bajo ( _ ) o el signo de d\u00f3lar ( $ ), aunque ambos se admiten.</li> <li>Se admiten los n\u00fameros pero no como primer car\u00e1cter.</li> <li>Deben ser cortos pero significativos. La elecci\u00f3n de un nombre de variable debe ser mnem\u00f3nico, es decir, dise\u00f1ado para indicar al observador casual la intenci\u00f3n de su uso. Por ejemplo, si queremos usar una variable para almacenar una edad, la llamaremos edad.</li> <li>Se deben evitar los nombres de variables de un solo car\u00e1cter excepto para las variables temporales \"usar y tirar\". Los nombres comunes de las variables temporales son i, j, k, m, y n para enteros; c, d, y e para los caracteres.</li> </ul>"},{"location":"bloque_i/tema_1/page-3/#declaracion-de-variables","title":"Declaraci\u00f3n de variables","text":"<p>Antes de poder utilizar una variable, esta se debe declarar de la siguiente manera: <code>tipo nombreVariable;</code> Donde tipo es el tipo de datos que almacenar\u00e1 la variable (texto, n\u00fameros enteros,...) y nombreVariable es el identificador de la variable. Ejemplos:</p> <pre><code>int days; boolean exit;\n</code></pre> <p>Java es un lenguaje muy estricto al utilizar tipos de datos. Variables de datos distintos son incompatibles. Algunos autores hablan de lenguaje fuertemente tipado o incluso lenguaje muy tipificado. Se debe a una traducci\u00f3n muy directa del ingl\u00e9s strongly typed referida a los lenguajes que, como Java, son muy r\u00edgidos en el uso de tipos. El caso contrario ser\u00eda el lenguaje C en el que jam\u00e1s se comprueban de manera estricta los tipos de datos. Parte de le seguridad y robustez de las que hace gala Java se deben a esta caracter\u00edstica.</p> <p>Por convenci\u00f3n de c\u00f3digo, todas las declaraciones de variables se ponen al principio.</p>"},{"location":"bloque_i/tema_1/page-3/#inicializacion-de-variables","title":"Inicializaci\u00f3n de variables","text":"<p>En Java se utiliza el operador asignaci\u00f3n <code>=</code> para inicializar una variable, es decir, para darle un valor inicial.</p> <p>La inicializaci\u00f3n se puede realizar:</p> <ul> <li> <p>En la misma l\u00ednea de c\u00f3digo que la declaraci\u00f3n:</p> <pre><code>int x = 7;\n</code></pre> </li> <li> <p>En cualquier otro momento, pero siempre despu\u00e9s de haberla declarado:</p> <pre><code>int x;\n// ...\nx = 7;\n</code></pre> </li> <li> <p>Tambi\u00e9n se puede utilizar una expresi\u00f3n para asignar un valor a una variable:</p> <pre><code>int x;\n// ...\nx =7;\n//...\nx = x * 2;\n</code></pre> </li> <li> <p>Incluso se puede utilizar una expresi\u00f3n en la misma inicializaci\u00f3n:</p> <pre><code>int a = 13, b = 18;\nint c = a + b;\n</code></pre> </li> <li> <p>Se puede declarar m\u00e1s de una variable a la vez del mismo tipo en la misma l\u00ednea si las separamos con comas:</p> <pre><code>int days, year, weeks;\n</code></pre> </li> <li> <p>Incluso se pueden tambi\u00e9n inicializar:</p> <pre><code>int days = 365, years = 2019, weeks;\n</code></pre> </li> </ul>"},{"location":"bloque_i/tema_1/page-3/#ambito-de-vida-de-las-variables","title":"\u00c1mbito de vida de las variables","text":"<p>Toda variable tiene un \u00e1mbito de vida. Esto es la parte del c\u00f3digo en la que una variable se puede utilizar, que es en el bloque donde se ha declarado. De hecho las variables tienen un ciclo de vida:</p> <ol> <li>En la declaraci\u00f3n se reserva el espacio necesario para que se puedan comenzar a utilizar (digamos que se avisa de su futura existencia)</li> <li>Se la asigna su primer valor (la variable nace)</li> <li>Se la utiliza en diversas sentencias. Cuando finaliza el bloque en el que fue declarada, la variable muere. Es decir, se libera el espacio que ocupa esa variable en memoria.</li> <li>Una vez que la variable ha sido eliminada, no se puede utilizar. Dicho de otro modo, no se puede utilizar una variable m\u00e1s all\u00e1 del bloque en el que ha sido definida. Ejemplo:</li> </ol> <pre><code>{ // (1)!\nint x = 9;\n} // (2)!\nint y = x;\n</code></pre> <ol> <li>Se utiliza <code>{</code> para indicar el comienzo del bloque dde c\u00f3digo</li> <li>Se utiliza <code>}</code> para indicar el fin del bloque de c\u00f3digo</li> </ol>"},{"location":"bloque_i/tema_1/page-3/#constantes","title":"Constantes","text":"<p>Una constante es un valor que no puede ser modificado durante la ejecuci\u00f3n de un programa, \u00fanicamente puede ser le\u00eddo.</p> <p>La forma de declarar constantes es la misma que la de las variables pero hay que anteponer la palabra final que es la que indica que estamos declarando una constante:</p> <pre><code>final double PI = 3.141591;\n</code></pre> <p>Los nombres de las constantes se deben escribir en may\u00fasculas. Pueden contener tambi\u00e9n guiones bajos. Incluso pueden contener d\u00edgitos pero no como primer car\u00e1cter.</p> <p>Ejemplos:</p> <pre><code>final int MAX_PARTICIPANTS = 10;\nfinal int _MIN1 = 1;\n</code></pre> <p>Cuando  un  mismo  valor  se  utilice  en  varias  partes  del  c\u00f3digo,  entonces  hay  que  declararlo  como  una constante ya que si en alg\u00fan momento de la vida de la aplicaci\u00f3n, ese valor var\u00eda, solamente hay que cambiar el valor de la constante y no estar cambi\u00e1ndolo en todos los sitios del c\u00f3digo donde aparezca.</p> Ejercicio 1 <p>Indica cu\u00e1les de los siguientes no son identificadores.</p> <ol> <li>hola</li> <li>\"a\"</li> <li>1nombre</li> <li>mi variable</li> <li>mi_variable</li> <li>esto_es_una_variable</li> <li>nombre1</li> </ol>"},{"location":"bloque_i/tema_1/page-4/","title":"4 Tipos de datos primitivos","text":""},{"location":"bloque_i/tema_1/page-4/#introduccion","title":"Introducci\u00f3n","text":"<p>Se llaman tipos primitivos a los tipos de datos originales de un lenguaje de programaci\u00f3n, esto es, aquellos que nos proporciona el lenguaje, java posee los siguientes:</p> Tipo de variable Bytes que ocupa Rango de valores boolean 1 true, false char 2 Caracteres en Unicode byte 1 -128 a 127 short 2 -32.768 a 32.767 int 4 -2.147.483.648 a 2.147.483.647 long 8 -9\u00b71018 a 9\u00b71018 float 4 -3.4\u00b71038 a 3.4\u00b71038 double 8 -3.4\u00b710308 a 3.4\u00b710308"},{"location":"bloque_i/tema_1/page-4/#enteros","title":"Enteros","text":"<p>Los tipos byte, short, int y long sirven para almacenar datos enteros. Los enteros son n\u00fameros sin decimales.</p> <p>Un literal es un elemento de programa que representa directamente un valor:</p> <pre><code>int number = 16; // 16 es un literal\n</code></pre> <p>Los literales se pueden expresar de varias maneras</p> <ul> <li>En decimal, es como se representan por defecto: <code>16</code></li> <li>En binario, anteponiendo 0b: <code>0b10000</code></li> <li>En octal, anteponiendo 0: <code>020</code></li> <li>En hexadecimal, anteponiendo 0x: <code>0x10</code></li> </ul> <p>Por defecto, un literal entero es de tipo int. Si se le coloca detr\u00e1s la letra L, entonces el literal ser\u00e1 de tipo long.</p> <pre><code>int number = 16; //(1)!\nlong number_long = 16L; //(2)!\n</code></pre> <ol> <li>16 es un literal entero</li> <li>16L es un literal de tipo long</li> </ol> <p>No se acepta en general asignar variables de distinto tipo pero existen excepciones. Por ejemplo, si se pueden asignar valores de variables enteras a variables enteras de un tipo superior (por ejemplo, asignar un valor int a una variable long). Pero al rev\u00e9s no se puede:</p> <pre><code>int i = 12;\nbyte b = i; //(1)!\n</code></pre> <ol> <li>Error de compilaci\u00f3n, posible p\u00e9rdida de precisi\u00f3n</li> </ol> <p>La soluci\u00f3n es hacer un casting. Esta operaci\u00f3n permite convertir valores de un tipo a otro tipo, siempre y cuando sea posible:</p> <pre><code>int i = 12;\nbyte b = (byte) i; //(1)!\n</code></pre> <ol> <li>El casting evita el error</li> </ol> <p>Hay que tener en cuenta en estos castings que si el valor asignado sobrepasa el rango del elemento, el valor convertido no tendr\u00e1 ning\u00fan sentido ya que no puede almacenar todos los bits necesarios para representar ese n\u00famero:</p> <pre><code>int i = 1200;\nbyte b = (byte) i; //(1)!\n</code></pre> <ol> <li>El valor de b no tiene sentido</li> </ol> <p>Si lo que asignamos a la variables es un literal, java hace una conversi\u00f3n impl\u00edcita siempre y cuando el literal est\u00e9 dentro del rango permitido para dicho tipo. Por ejemplo, el siguiente c\u00f3digo no da error porque 127 est\u00e1 dentro del rango de los bytes aunque el literal sea por defecto int:</p> <pre><code>byte b = 127;\n</code></pre> <p>Sin embargo, el siguiente c\u00f3digo si da error porque 128 sobrepasa el rango de los tipos byte:</p> <pre><code>byte b = 128; //ERROR\n</code></pre> <p>A partir de Java7, se pueden usar guiones, como separador de miles, para facilitar la lectura al programador:</p> <pre><code>int i = 1_000_000;\n</code></pre> <p>En el siguiente c\u00f3digo de ejemplo, utilizamos <code>System.out.println</code> para escribir en pantalla el valor de las variables:</p> <pre><code>public class Integers {\npublic static void main(String[] args) {\nint i;\nlong l;\nbyte b;\nshort s;\ni = 16; //(1)!\nSystem.out.println(i);\ni = 020; //(2)!\nSystem.out.println(i);\ni = 0x10; //(3)!\nSystem.out.println(i);\ni = 0b10000; //(4)!\nSystem.out.println(i);\nl = 6985742369L; //(5)!\nSystem.out.println(l);\nb = 127; //(6)!\nSystem.out.println(b);\ns = 32767; //(7)!\nSystem.out.println(s);\ni = 1200;\nSystem.out.println(i);\nb = (byte) i;\nSystem.out.println(b); //(8)!\nSystem.out.println(1_000_000); //(9)!\n}\n}\n</code></pre> <ol> <li>16 en decimal</li> <li>20 en octal = 16 decimal</li> <li>10 hexadecimal = 16 decimal</li> <li>10000 binario = 16 decimal</li> <li>Si se le quita la L da error</li> <li>No da error porque est\u00e1 dentro del rango de los bytes aunque su valor por defecto sea int</li> <li>No da error porque est\u00e1 dentro del rango de los shorts aunque su valor por defecto sea int</li> <li>El valor b no tiene sentido</li> <li>Salida por consola: 1000000</li> </ol>"},{"location":"bloque_i/tema_1/page-4/#numeros-decimales","title":"N\u00fameros decimales","text":"<p>Los decimales se almacenan en los tipos float y double. Los decimales no son almacenados de forma exacta por eso siempre hay un posible error y se habla de precisi\u00f3n. Es mucho m\u00e1s preciso el tipo double que el tipo float.</p> <p>Para asignar valores literales a una variable decimal, hay que tener en cuenta que el separador decimal es el punto y no la coma. Es decir para asignar el valor 2,75 a la variable x se har\u00eda: <code>x=2.75;</code></p> <p>A un valor literal (como 1.5 por ejemplo), se le puede indicar con una f al final del n\u00famero que es float (1.5f por ejemplo) o una d para indicar que es double. Si no se indica nada, un n\u00famero literal siempre se entiende que es double, por lo que al usar tipos float hay que convertir los literales:</p> <pre><code>double d = 3.49; //(1)!\nfloat f = 3.49f; //(2)!\n</code></pre> <ol> <li>El literal 3.49 por defecto es double</li> <li>El literal 3.49 se tiene que convertir a float</li> </ol> <p>L\u00f3gicamente no podemos asignar valores decimales a tipos de datos enteros:</p> <pre><code>int x = 9.5; //Error\nint x = (int) 9.5;//(1)!\n</code></pre> <ol> <li>Podemos mediante un casting, pero perderemos los decimales. En este caso, x valdr\u00e1 9.</li> </ol> <p>El caso contrario, sin embargo, si se puede haceR:</p> <pre><code>int x = 9;\ndouble y = z;\n</code></pre> <p>La raz\u00f3n es que los tipos decimales son m\u00e1s grandes que los enteros, por lo que no hay problema de p\u00e9rdida de valores.</p>"},{"location":"bloque_i/tema_1/page-4/#booleanos","title":"Booleanos","text":"<p>Los valores booleanos o l\u00f3gicos se almacenan en el tipo boolean. Sirven para indicar si algo es verdadero (true) o falso (false).</p> <p>Por otro lado, a diferencia del lenguaje C, no se puede en Java asignar n\u00fameros a una variable booleana (en C, el valor false se asocia al n\u00famero 0, y cualquier valor distinto de cero se asocia a true). Tampoco tiene sentido asignar valores de otros tipos de datos a variables booleanas mediante casting:</p> <pre><code>boolean b = (boolean) 9; // no tiene sentido\n</code></pre>"},{"location":"bloque_i/tema_1/page-4/#5-caracteres","title":"5 Caracteres","text":"<p>Los valores de tipo car\u00e1cter sirven para almacenar s\u00edmbolos de escritura. En Java se puede almacenar cualquier c\u00f3digo Unicode en el tipo char.</p> <p>Los literales car\u00e1cter van entre comillas simples, como por ejemplo: <code>'a'</code>.</p> <p>En programaci\u00f3n, secuencias de escape es el conjunto de caracteres que en el c\u00f3digo es interpretado con alg\u00fan fin. En Java, la barra invertida <code>\\</code> se denomina car\u00e1cter de escape, el cual indica que el car\u00e1cter puesto a continuaci\u00f3n ser\u00e1 convertido en car\u00e1cter especial o, si ya es especial, dejar\u00e1 de ser especial. Por ejemplo, si el car\u00e1cter <code>n</code> no es especial pero con la <code>\\</code> delante se convierte en especial ya que <code>\\n</code> se interpreta como un salto de l\u00ednea. La <code>\\</code> es un car\u00e1cter especial pero con otra <code>\\</code> delante deja de ser especial y simplemente es una barra invertida.</p> Car\u00e1cter Significado \\t Tabulador \\n Salto de l\u00ednea \" Dobles comillas ' Comillas simples \\ Barra invertida \\udddd Representa el car\u00e1cter Unicode cuyo c\u00f3digo es representado por dddd en hexadecimal <p>Como se vio en el tema 1. Introducci\u00f3n, la descripci\u00f3n completa del est\u00e1ndar Unicode est\u00e1 disponible en la p\u00e1gina web https://unicode.org/. En dicha p\u00e1gina, encontramos las tablas de caracteres en hexadecimal en el enlace Code Charts. Para saber saber el c\u00f3digo de los caracteres en decimal, podemos acceder al siguiente enlace: https://unicode-table-com/es. Los caracteres imprimibles son del 32 al 126 y del 161 al 255.</p> <p>Para insertar el c\u00f3digo caracteres no disponibles en el teclado, se hace de manera diferente seg\u00fan el Sistema Operativo:</p> <ul> <li>Linux: Ctrl+Shift y luego se pulsa u(para indicar que es Unicode) y el c\u00f3digo Unicode en hexadecimal en el teclado num\u00e9rico desactivado.</li> <li>Windows: ++Alt++ y el c\u00f3digo Unicode en hexadecimal.</li> </ul> <p>Tambi\u00e9n se le puede asignar a una variable de tipo char un car\u00e1cter Unicode, ya sea usando el c\u00f3digo decimal o hexadecimal del car\u00e1cter.</p> <pre><code>public class Characters {\npublic static void main(String[] args) {\nchar character;\ncharacter = 'C'; //(1)!\nSystem.out.println(character);\ncharacter = 67; // (2)!\nSystem.out.println(character);\ncharacter = '\\u0043'; // (3)!\nSystem.out.println(character);\ncharacter = '\\n'; // (4)!\nSystem.out.println(character);\ncharacter = '\\''; // (5)!\nSystem.out.println(character);\ncharacter = '\\\"'; // (6)!\nSystem.out.println(character);\ncharacter = '\"'; // (7)!\nSystem.out.println(character);\ncharacter = '\\\\'; // (8)!\nSystem.out.println(character);\ncharacter = 9752; // (9)!\nSystem.out.println(character);\ncharacter = '\\u2618'; // (10)!\nSystem.out.println(character);\ncharacter = '\u2618'; // (11)!\nSystem.out.println(character);\n}\n}\n</code></pre> <ol> <li>Los literales car\u00e1cter van entre comillas simples</li> <li>El c\u00f3digo Unicode de la C es el 67</li> <li>El c\u00f3digo Unicode de la C en hexadecimal es el 0043</li> <li>Car\u00e1cter especial salto de l\u00ednea</li> <li>Car\u00e1cter especial Comillas Simples</li> <li>Car\u00e1cter especial Comillas Dobles</li> <li>Car\u00e1cter especial comillas dobles se puede utilizar sin el car\u00e1cter de escape en un literal de car\u00e1cter</li> <li>Car\u00e1cter especial barra inclinada</li> <li>C\u00f3digo decimal del car\u00e1cter tr\u00e9bol</li> <li>C\u00f3digo hexadecimal del car\u00e1cter tr\u00e9bol</li> <li>Car\u00e1cter tr\u00e9bol</li> </ol> <p>Si necesitamos almacenar m\u00e1s de un car\u00e1cter, entonces debemos usar otro tipo de datos que nos permite manejar cadenas de caracteres: String.</p> Ejercicio 1 <p>Muestra en consola los siguientes caracteres</p> <ol> <li>\u2764</li> <li>\u2602</li> <li>\u260e</li> <li>\u265e</li> </ol> <p>En Java, las cadenas no se modelan como un dato de tipo primitivo, sino a trav\u00e9s de la clase String. El texto es uno de los tipos de datos m\u00e1s importantes y por ello java lo trata de manera especial. Para Java, las cadenas de texto son objectos especiales. Los textos deben manejarse creando objetos de tipo String.</p> <p>Los literales cadena se escriben entre comillas dobles: <code>\"Esto es un literal cadena</code>\".</p> <p>Ejemplo:</p> <pre><code>String s = \"Estamos aprendiendo a programar\";\n</code></pre> <p>En Java existe tambi\u00e9n la cadena vac\u00eda o nula(\"\"), es decir, una cadena sin ning\u00fan car\u00e1cter. Ejemplo: <code>String s = \"\";</code> A la variable s se le est\u00e1 asignando la cadena vac\u00eda o nula.</p> Ejercicio 2 <p>Sea MAX una constante que vale 1000, a,b e i variables enteras, x una variable decimal, c una variable car\u00e1cter y s una variable cadena. Indicar las sentencias v\u00e1lidas y su valor, razonando la respuesta. Suponer que a = 3 y b = 4.</p> <ol> <li>i = (900 - MAX) / a</li> <li>i = b / 0</li> <li>i = a % (MAX - 900)</li> <li>i = (MAX - 900) % a</li> <li>i = 3.34 * a</li> <li>x = a / b</li> <li>x = a % (a / b)</li> <li>i = a / b</li> <li>i = ++a</li> <li>i = a++</li> <li>c = '''</li> <li>c = '\"'</li> <li>s = 'c'</li> <li>s = \"'\"</li> <li>s = \"\"\"</li> <li>c = '\\u0041'</li> <li>c = 65</li> </ol>"},{"location":"bloque_i/tema_1/page-5/","title":"5 Operadores","text":""},{"location":"bloque_i/tema_1/page-5/#introduccion","title":"Introducci\u00f3n","text":"<p>Un operador lleva a cabo operaciones sobre uno (operador unario), dos (operador binario) o tres (operador ternario) datos u operandos de tipo primitivo devolviendo un valor determinado tambi\u00e9n de un tipo primitivo. El tipo de valor devuelto tras la evaluaci\u00f3n depende del operador y del  tipo  de  los  operandos.  Por  ejemplo,  los  operadores  aritm\u00e9ticos  trabajan  con  operandos num\u00e9ricos,  llevan  a  cabo  operaciones  aritm\u00e9ticas  b\u00e1sicas  y  devuelven  el  valor  num\u00e9rico correspondiente. Los operadores se pueden clasificar en distintos grupos seg\u00fan se muestra en los siguientes apartados</p>"},{"location":"bloque_i/tema_1/page-5/#operador-asignacion","title":"Operador asignaci\u00f3n","text":"<p>El operador asignaci\u00f3n <code>=</code> es un operador binario que asigna el valor del t\u00e9rmino de la derecha al operando de la izquierda. El operando de la izquierda es una variable. El t\u00e9rmino de la derecha es una expresi\u00f3n de un tipo de dato compatible.</p> Operador Descripci\u00f3n Ejemplo de expresi\u00f3n Resultado del ejemplo = Operador asignaci\u00f3n n = 4 n vale 4 <p>No debe confundirse el operador asignaci\u00f3n (=) con el operador relacional de igualdad (==) que se ver\u00e1 m\u00e1s adelante. Adem\u00e1s Java dispone de otros operadores que combinan la asignaci\u00f3n con otras operaciones (operadores aritm\u00e9ticos combinados).</p>"},{"location":"bloque_i/tema_1/page-5/#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"<p>El lenguaje de programaci\u00f3n Java tiene varios operadores aritm\u00e9ticos para los datos num\u00e9ricos enteros y decimales.</p> Operador Descripci\u00f3n Ejemplo de expresi\u00f3n Resultado del ejemplo - Operador unario de cambio de signo -4 -4 + Suma 2.5 + 7.1 9.6 - Resta 235.6 - 103.5 132.1 * Multiplicaci\u00f3n 1.2 * 1.1 1.32 / Divisi\u00f3n 0.050 / 0.027 / 2 0.253 % M\u00f3dulo 20 % 714.5 % 2 60.5 <p>El resultado exacto depende de los tipos de operandos involucrados. Es conveniente tener en cuenta las siguientes peculiaridades:</p> <ul> <li> <p>El resultado de una expresi\u00f3n se convierte al tipo m\u00e1s general seg\u00fan el siguiente orden de generalidad:     byte \u2192 short \u2192 int \u2192 long \u2192 float \u2192 double     Teniendo esto en cuenta, tenemos que:</p> <ul> <li>El resultado es de tipo long si, al menos, uno de los operandos es de tipo long y ninguno es decimal. </li> <li>El resultado es de tipo int si ninguno de los operandos es de tipo long ni decimal.</li> <li>El resultado es de tipo double si, al menos, uno de los operandos es de tipo double.</li> <li>El resultado es de tipo float si, al menos, uno de los operandos es de tipo float y ninguno es double.</li> </ul> </li> <li> <p>Con  los  n\u00fameros  enteros,  si  se  divide  entre  cero,  se  genera  la  excepci\u00f3n ArithmeticException. Pero si se realiza la divisi\u00f3n entre cero con decimales, el resultado es infinito (<code>Infinity</code>).</p> </li> <li>El resultado de una expresi\u00f3n inv\u00e1lida, por ejemplo, dividir infinito por infinito, no genera una excepci\u00f3n ni un error de ejecuci\u00f3n: es un valor Not a Number (<code>NaN</code>).</li> </ul> <pre><code>public class ArithmeticOperators {\npublic static void main(String[] args) {\nint int1 = 100, int2 = 0;\ndouble dec1 = 20.36, dec2 = 0;\nSystem.out.println(int1 / int2); //(1)!\nSystem.out.println(dec1 / dec2); //(2)!\nSystem.out.println(dec1 % dec2); //(3)!\n}\n}\n</code></pre> <ol> <li>Genera ArithmeticException</li> <li>Infinity</li> <li>NaN</li> </ol> <p>Hay que tener en cuenta que el resultado de estos operadores var\u00eda notablemente si usamos enteros o si usamos n\u00fameros decimales. Por ejemplo:</p> <pre><code>double result1, d1 = 14, d2 = 5;\nint result2, i1 = 14, i2 = 5;\nresult1 = d1 / d2; // result1 = 2.8\nresult2 = i1 / i2; // result2 = 2\n</code></pre> <p>Es m\u00e1s incluso:</p> <pre><code>double result;\nint i1 = 7, i2 = 2;\nresult = i1 / i2; // resultado = 3.0\nresult = (double) i1 / i2; // resultado 3.5\n</code></pre> <p>El operador del m\u00f3dulo (<code>%</code>) sirve para calcular el resto de una divisi\u00f3n tanto entera como decimal.</p> <pre><code>int remainder, i1 = 14, i2 = 5;\nremainder = i1 % i2; // remainder = 4\n</code></pre> <p>En los decimales, el resto se calcula asumiendo que la divisi\u00f3n produce un resultado entero:</p> <pre><code>double remainder, d1 = 7.5, d2 = 2;\nremainder = d1 % d2; // remainder = 1.5\n</code></pre>"},{"location":"bloque_i/tema_1/page-5/#operadores-aritmeticos-incrementales","title":"Operadores aritm\u00e9ticos incrementales","text":"<p>Los  operadores  aritm\u00e9ticos  incrementales  son  operadores  unarios  (un  \u00fanico  operando).  El operando puede ser num\u00e9rico o de tipo char y el resultado es del mismo tipo que el operando.</p> Operador Descripci\u00f3n Ejemplo de expresi\u00f3n Resultado del ejemplo ++ Incremento 4++ 5 -- Decremento 4-- 3 <p>En el caso de los caracteres, el incremento/decremento se realiza a su c\u00f3digo Unicode. Es decir, si  una  variable  char  tiene  el  valor  'C',  su  c\u00f3digo  Unicode  es  67.  Si  se  incrementa,  su  c\u00f3digo Unicode pasa a valer 68 que corresponde al valor 'D'.</p> <p>Estos operadores pueden emplearse de dos formas dependiendo de su posici\u00f3n con respecto al operando:</p> <ul> <li>si  el  operador  est\u00e1  detr\u00e1s  del  operando,  primero  se  utiliza  la  variable  y  luego  se incrementa/decrementa su valor:<ul> <li>Post-incremento: a++</li> <li>Post-decremento: a- -</li> </ul> </li> <li>si el operador est\u00e1 delante del operando, primero se incrementa/decrementa el valor de la variable y luego se utiliza.<ul> <li>Pre-incremento: ++a</li> <li>Pre-decremento: - -a</li> </ul> </li> </ul> <pre><code>public class IncrementalArithmeticOperators {\npublic static void main(String[] args) {\nint integer1, integer2;\nchar character1, character2;\ncharacter1 = 'C'; //(1)!\ncharacter1++;\nSystem.out.println(character1); //(2)!\n//(3)!\ncharacter2 = (char) (character1 + 6);\nSystem.out.println(character2); //(4)!\ninteger1 = character2 + 2;\nSystem.out.println(integer1); //(5)!\ncharacter2++;\nSystem.out.println(character2); //(6)!\ninteger1 = character2;\nSystem.out.println(integer1); //(7)!\ninteger1 = 5;\ninteger2 = integer1++;\nSystem.out.println(integer1); //(8)!\nSystem.out.println(integer2); //(9)!\ninteger1 = 5;\ninteger2 = ++integer1;\nSystem.out.println(integer1); //(10)!\nSystem.out.println(integer2); //(11)!\n}\n}\n</code></pre> <ol> <li>Unicode 67</li> <li>Al incrementarse vale 'D', Unicode 68</li> <li>Tambi\u00e9n se pueden utilizar los caracteres con los operadores aritm\u00e9ticos, pero entonces hace falta usar casting</li> <li>character2 vale 'J', Unicode 74</li> <li>integer1 vale 76</li> <li>character2 vale 'K', Unicode 75</li> <li>integer1 vale 75</li> <li>integer1 vale 6</li> <li>integer2 vale 5</li> <li>integer1 vale 6</li> <li>integer2 vale 6</li> </ol>"},{"location":"bloque_i/tema_1/page-5/#operadores-aritmeticos-combinados","title":"Operadores aritm\u00e9ticos combinados","text":"<p>Combinan  un  operador  aritm\u00e9tico  con  el  operador  asignaci\u00f3n.  Como  en  el  caso  de  los operadores  aritm\u00e9ticos,  pueden  tener  operandos  num\u00e9ricos  enteros  o  decimales  y  el  tipo espec\u00edfico del resultado num\u00e9rico depender\u00e1 del tipo de \u00e9stos.</p> Operador Descripci\u00f3n Ejemplo de expresi\u00f3n Resultado del ejemplo += Suma combinada a+=b a=a+b -= Resta combinada a-=b a=a-b *= Multiplicaci\u00f3n combinada a*=b a=a*b /= Divisi\u00f3n combinada a/=b a=a/b %= Resto combinado a%=b a=a%b <p>Tambi\u00e9n se pueden utilizar con caracteres:</p> <pre><code>char character='a';\ncharacter+=2; //character vale 'c'\n</code></pre>"},{"location":"bloque_i/tema_1/page-5/#operadores-relacionales","title":"Operadores relacionales","text":"<p>Realizan  comparaciones  entre  datos  compatibles  de  tipos  primitivos  (num\u00e9ricos,  car\u00e1cter  y booleanos)  teniendo  siempre  un  resultado  booleano.  Los  operandos  booleanos  s\u00f3lo  pueden emplear los operadores de igualdad y desigualdad.</p> Operador Descripci\u00f3n Ejemplo de expresi\u00f3n Resultado del ejemplo == Igual que 7 == 3 false != Distinto que 'a' != 'k' true &lt; Menor que 'G' &lt; 'B' false &gt; Mayor que 'b' &gt; 'a' true &lt;= Menor o igual que 7.5 &lt;= 7.38 false &gt;= Mayor o igual que 38 &gt;= 7 true"},{"location":"bloque_i/tema_1/page-5/#operadores-logicos-o-booleanos","title":"Operadores l\u00f3gicos o booleanos","text":"<p>Las puertas l\u00f3gicas son circuitos electr\u00f3nicos capaces de realizar operaciones l\u00f3gicas b\u00e1sicas:</p> <ul> <li> <p>Puerta NOT: la salida es la inversa de la entrada. Se corresponde con la siguiente tabla de verdad:</p> A (entrada) S (salida) 0 1 1 0 </li> <li> <p>Puerta AND:  la  se\u00f1al  de  salida  se  activa  solo  cuando  se  activan  todas  las  se\u00f1ales  de entrada. Equivale al producto l\u00f3gico S = A \u00b7 B y se corresponde con la siguiente tabla de verdad:</p> A (entrada1) B (entrada 2) S (salida) 0 0 0 0 1 0 1 0 0 1 1 1 </li> <li> <p>Puerta OR: la salida se activa cuando cualquiera de las entradas est\u00e1 activada. Equivale a la suma l\u00f3gica S = A + B y se corresponde con la siguiente tabla de verdad:</p> A (entrada1) B (entrada 2) S (salida) 0 0 0 0 1 1 1 0 1 1 1 1 </li> </ul> <p>Los operadores l\u00f3gicos o booleanos realizan operaciones sobre datos booleanos y tienen como resultado un valor booleano:</p> Operador Descripci\u00f3n Ejemplo de expresi\u00f3n Resultado del ejemplo ! Negaci\u00f3n - NOT (unario) !false!(5 == 5) truefalse || Suma l\u00f3gica - OR (binario) true || false(5 == 5) || (5 &lt; 4) truetrue &amp;&amp; Producto l\u00f3gico - AND (binario) false &amp;&amp; true(5 == 5) &amp;&amp; (5 &lt; 4) falsefalse <p>El producto l\u00f3gico se realiza con cortocircuito, es decir, si el primer operando es false entonces el segundo operando no se eval\u00faa ya que el resultado va a ser de todas maneras false. En este caso es conveniente situar la condici\u00f3n m\u00e1s propensa a ser falsa en el t\u00e9rmino de la izquierda.</p> <p>La suma l\u00f3gica tambi\u00e9n  se  realiza  con  cortocircuito,  es  decir,  si  el  primer  operando  es  true entonces el segundo operando no se eval\u00faa ya que el resultado va a ser de todas maneras true. En este caso es conveniente colocar la condici\u00f3n m\u00e1s propensa a ser verdadera en el t\u00e9rmino de la izquierda.</p> <p>Estas t\u00e9cnicas reducen el tiempo de ejecuci\u00f3n del programa y ayudan al programador a evitar ciertos  errores.  Por  ejemplo,  <code>5/b==2</code> , si b es  una  variable  de  tipo  entero y  su  valor es 0,  se genera la excepci\u00f3n ArithmeticException. Para evitar este problema, el programador puede hacer lo siguiente: <code>b!=0 &amp;&amp; 5/b==2</code>.Si b contiene el valor 0, <code>b!=0</code> dar\u00e1 false, entonces <code>5/b==2</code> no se eval\u00faa, evitando as\u00ed la generaci\u00f3n de la excepci\u00f3n.</p> <p>Ejemplos de uso de operadores l\u00f3gicos o booleanos:</p> <pre><code>boolean adult, younger;\nint age = 21;\nadult = age &gt;= 18; //adult ser\u00e1 true\nyounger = !adult; //younger ser\u00e1 false\n</code></pre> <pre><code>boolean drivingLicense=true;\nint age=20;\nboolean canDrive= (age&gt;=18) &amp;&amp; drivingLicense;\n/*Si la edad es de al menos 18 a\u00f1os y tiene carnet de conducir,\n  entonces puede conducir*/\n</code></pre> <pre><code>boolean snow =true, rain=false, hail=false;\nboolean badWeather= snow || rain || hail;\n//Si nieva o llueve o graniza, hace mal tiempo\n</code></pre>"},{"location":"bloque_i/tema_1/page-5/#operador-condicional","title":"Operador condicional","text":"<p>Este operador ternario permite devolver valores en funci\u00f3n de una expresi\u00f3n l\u00f3gica. Su sintaxis es la siguiente:</p> <p><code>expresionLogica ? expresion_1 : expresion_2</code></p> <p>Si el resultado de evaluar la expresi\u00f3n l\u00f3gica es verdadero, devuelve el valor de la primera expresi\u00f3n, y en caso contrario, devuelve el valor de la segunda expresi\u00f3n.</p> Operador Descripci\u00f3n Ejemplo de expresi\u00f3n Resultado del ejemplo ?: Operador condicional a = 4;b = a == 4 ? a+5 : 6-a;b = a &gt; 4 ? a*7 : a+8; b vale 9 b vale 12 <p>Ejemplo:</p> <pre><code>pay = (age &gt; 18) ? 6000 : 3000;\n</code></pre> <p>En este caso, si la variable edad es mayor de 18, la paga ser\u00e1 de 6000, sino ser\u00e1 de 3000.</p>"},{"location":"bloque_i/tema_1/page-5/#operador-de-concatenacion-de-cadenas","title":"Operador de concatenaci\u00f3n de cadenas","text":"<p>El operador concatenaci\u00f3n <code>+</code> es un operador binario que devuelve una cadena resultado de concatenar dos cadenas que act\u00faan como operando. Si solo uno de los operandos es de tipo cadena, el otro se convierte impl\u00edcitamente en tipo cadena.</p> Operador Descripci\u00f3n Ejemplo de expresi\u00f3n Resultado del ejemplo + Operador concatenaci\u00f3n \"Hola\" + \"Juan\"\"Hola\" + 5 \"HolaJuan\"\"Hola5\""},{"location":"bloque_i/tema_1/page-5/#operador-a-nivel-de-bits","title":"Operador a nivel de bits","text":"<p>Manipulan los bits de los n\u00fameros.</p> Operador Descripci\u00f3n &amp; AND | OR ~ NOT ^ XOR &gt;&gt; Desplazamiento a la derecha &lt;&lt; Desplazamiento a la izquierda &gt;&gt;&gt;&gt; Desplazamiento a la derecha con relleno de ceros &lt;&lt;&lt;&lt; Desplazamiento a la izquierda con relleno de ceros Ejercicio <p>De las siguientes asignaciones, \u00bfcu\u00e1les son v\u00e1lidas? \u00bfCu\u00e1l es el efecto de su ejecuci\u00f3n? \u00bfDe qu\u00e9 tipo deben ser las variables?</p> <ol> <li>z = 2 &lt; 1</li> <li>a = a + 1</li> <li>sqrt(3) = 32717</li> <li>'x' = 'y'</li> <li>x = 'y'</li> <li>a = b</li> <li>precio = precio - precio * (30/100)</li> </ol>"},{"location":"bloque_i/tema_1/page-6/","title":"6 Sentencias y Expresiones","text":""},{"location":"bloque_i/tema_1/page-6/#sentencias","title":"Sentencias","text":"<p>Una sentencia es la unidad m\u00ednima de ejecuci\u00f3n de un programa. Un programa se compone de un  conjunto  de  sentencias  que  acaban  resolviendo  un  problema.  Al  final  de  cada  una  de  las sentencias encontraremos un punto y coma (<code>;</code>).</p> <p>Veamos algunos ejemplos de sentencias en java:</p> <ul> <li>Sentencias de declaraci\u00f3n:  int x;</li> <li>Invocaciones o llamadas a m\u00e9todos de tipo void: <code>System.out.println(\"Bienvenidos a Programaci\u00f3n\");</code></li> <li>Sentencias de control de flujo: alteran el flujo de ejecuci\u00f3n para tomar decisiones o repetir sentencias.</li> </ul>"},{"location":"bloque_i/tema_1/page-6/#expresiones","title":"Expresiones","text":"<p>Una expresi\u00f3n es una combinaci\u00f3n de operadores y operandos que se eval\u00faa gener\u00e1ndose un \u00fanico resultado de un tipo determinado.</p> <p>La diferencia entre las sentencias y las expresiones es que las expresiones devuelven un valor y las sentencias no devuelven nada.</p>"},{"location":"bloque_i/tema_1/page-6/#prioridad-entre-operadores","title":"Prioridad entre operadores","text":"<p>A veces hay expresiones con operadores que resultan confusas. Por ejemplo:</p> <p><code>resultado=8+4/2;</code></p> <p>Es  dif\u00edcil  saber  el  resultado.  \u00bfCu\u00e1l  es?  \u00bfseis  o  diez?  La  respuesta  es  10  y  la  raz\u00f3n  es  que  el operador de divisi\u00f3n siempre precede en el orden de ejecuci\u00f3n al de la suma. Es decir, siempre se ejecuta antes la divisi\u00f3n que la suma. Siempre se pueden usar par\u00e9ntesis para forzar el orden deseado:</p> <p><code>resultado=(8+4)/2;</code></p> <p>Ahora no hay duda, el resultado es seis.</p> <p>\u00bfC\u00f3mo podemos saber en qu\u00e9 orden se van a ejecutar los operadores en una expresi\u00f3n en Java? Pues se ejecutan en funci\u00f3n de una prioridad, es decir, primero se ejecuta el que tenga m\u00e1s prioridad. La siguiente tabla muestra todos los operadores Java ordenados de mayor a menor prioridad. La primera l\u00ednea de la tabla contiene los operadores de mayor prioridad y la \u00faltima los de menor prioridad. Los operadores que aparecen en la misma l\u00ednea tienen la misma prioridad.</p> <p>Cuando una expresi\u00f3n tenga dos operadores con la misma prioridad, la expresi\u00f3n se eval\u00faa seg\u00fan su asociatividad.</p> Nivel Operador Descripci\u00f3n Asociatividad 1 [].() acceso elementos arrayacceso miembros objetospar\u00e9ntesis de izquierda a derecha 2 ++-- unario post-incrementounario post-incremento no asociativos 3 ++--+-!~ unario pre-incrementounario pre-decrementounario m\u00e1sunario menosunario l\u00f3gico NOTunario NOT a nivel de bits de derecha a izquierda 4 ()new castcreaci\u00f3n objetos de derecha a izquierda 5 */% multiplicaci\u00f3ndivisi\u00f3nm\u00f3dulo de izquierda a derecha 6 +-+ sumarestaconcatenaci\u00f3n cadenas de izquierda a derecha 7 &lt;&lt;&gt;&gt;&gt;&gt;&gt; desplazamiento a nivel de bits de izquierda a derecha 8 &lt;&lt;=&gt;&gt;=instanceof relacionales no asociativos 9 ==!= igualdistinto de izquierda a derecha 10 &amp; AND nivel de bits de izquierda a derecha 11 ^ XOR nivel de bits de izquierda a derecha 12 | OR nivel de bits de izquierda a derecha 13 &amp;&amp; AND de izquierda a derecha 14 || OR de izquierda a derecha 15 ?: ternario condicional de derecha a izquierda 16 =+=-=*=/=%=&amp;=^|=&lt;&lt;&lt;=&gt;&gt;=&gt;&gt;= asignaciones de derecha a izquierda <p>Por ejemplo:<code>resultado = 9 / 3 * 3;</code> En este caso, la multiplicaci\u00f3n y la divisi\u00f3n tienen la misma prioridad y su asociatividad es de izquierda a derecha por lo que se realiza primero la operaci\u00f3n que est\u00e9 m\u00e1s a la izquierda, que en este caso es la divisi\u00f3n. El resultado por lo tanto es nueve.  Si  se  desea  que  se  haga  primero  la  multiplicaci\u00f3n,  habr\u00eda  que  utilizar  un  par\u00e9ntesis: <code>resultado = 9 / (3 * 3);</code> En este caso, el resultado ser\u00eda 1.</p> <p>Otro  ejemplo: <code>x  =  y  =  z  =  17;</code> Como  la  asociatividad  de  la  asignaci\u00f3n  es  de  derecha a izquierda, primero se asigna el valor 17 a <code>z</code>, luego a <code>y</code> y por \u00faltimo a <code>x</code>.Esto se puede realizar porque el operador de asignaci\u00f3n devuelve el valor asignado.</p> <p>Algunos operadores son no asociativos, por ejemplo, la expresi\u00f3n  <code>x &lt;= y &lt;= z</code> es inv\u00e1lida ya que  el  valor  devuelto  por  estos  operadores  es  de  un  tipo  diferente  (booleano)  al  de  los operandos que necesita (num\u00e9rico o car\u00e1cter).</p>"},{"location":"bloque_i/tema_1/page-6/#evaluacion-de-cortocircuito","title":"Evaluaci\u00f3n de cortocircuito","text":"<p>La evaluaci\u00f3n de cortocircuito denota la sem\u00e1ntica de algunos operadores booleanos en algunos lenguajes  de  programaci\u00f3n  en  los  cuales  si  con  la  evaluaci\u00f3n  de  la  primera  expresi\u00f3n  ya  se conoce el resultado, ya no se eval\u00faan el resto de expresiones. En Java, se utiliza la evaluaci\u00f3n de cortocircuito.</p> <p>Por ejemplo, veamos la siguiente expresi\u00f3n que utiliza operadores <code>AND</code>:</p> <pre><code>12 &lt; 9 &amp;&amp; 5 &gt; 1 &amp;&amp; 8 &lt;= 13\n</code></pre> <p>Se  eval\u00faa  la  primera  expresi\u00f3n <code>12  &lt;  9</code>   dando  false.  Como  el  resultado  va  a  ser  false independientemente del resultado de la segunda y tercera expresi\u00f3n, entonces no se eval\u00faan ni la segunda <code>5 &gt; 1</code> ni la tercera expresi\u00f3n <code>8&lt;= 13</code>, sino que solamente se eval\u00faa la primera, dando como resultado false. Lo mismo ocurre con el operador <code>OR</code>:</p> <pre><code>8 &lt;= 13 || 12 &lt; 9 || 5 &gt; 1\n</code></pre> <p>Se  eval\u00faa  la  primera  expresi\u00f3n <code>8  &lt;=  13</code>   dando true.  Como  el  resultado  va  a  ser  true independientemente del resultado de la segunda y tercera expresi\u00f3n, entonces no se eval\u00faan ni la segunda <code>12 &lt; 9</code> ni la tercera expresi\u00f3n <code>5 &gt; 1</code>, sino que solamente se eval\u00faa la primera, dando como resultado true.</p> Ejercicio 1 <p>Suponiendo realizadas las siguientes sentencias de asignaci\u00f3n: lado1 = 3; precio = 325,6; lado2 = 4; comprar = false; hipotenusa = 5; ch = '7'. Determinar cu\u00e1les de las expresiones siguientes dan un resultado booleano y cu\u00e1les no. Para aquellas que produzcan un resultado booleano determinar si el resultado es verdadero o falso. Para las que no lo sean, explicar la raz\u00f3n. Indicar tambi\u00e9n si existe alguna expresi\u00f3n err\u00f3nea, y crea una aplicaci\u00f3n Java para comprobar los resultados.</p> <ol> <li>5 * precio - 1.50</li> <li>(precio &lt; 300 + 0.1 * precio) ||comprar</li> <li>sqrt(lado1) + sqrt(lado2) = sqrt(hipotenusa)</li> <li>(!comprar) &amp;&amp; (precio + 125.3)</li> <li>(ch &lt;= 'A') &amp;&amp; comprar</li> <li>ch = '7' || !comprar</li> </ol> Ejercicio 2 <p>Calcula el resultado de las siguientes expresiones de forma manual, y luego creando un programa JAVA:</p> <ol> <li>3 * 5 - 4 / 2</li> <li>3 - (3*5)2 / 4</li> <li>32 - 5 * 2</li> <li>7 - 4 * 2 - 5 * 2</li> <li>5 + 4 &lt; 7 + 8</li> <li>4 &lt; 5 * 4 / 2 - 7</li> <li>3 + 6 * 14</li> <li>8 + 7 * 3 + 4 * 6</li> <li>-4 * 7 + 23 / 4 - 5</li> <li>12 + 3 * 7 + 5 * 4</li> <li>!(4 &gt; 6)</li> <li>73 / 2 + 6</li> </ol> Ejercicio 3 <p>Dados los siguientes valores para las variables booleanas a,b y c (a = true, b = false y c = true), evaluar las expresiones que aparecen a continuaci\u00f3n y crear un programa JAVA para comprobar las soluciones:</p> <ol> <li>a &amp;&amp; b || a &amp;&amp; c</li> <li>(a || b) &amp;&amp; (!a || c)</li> <li>a || b &amp;&amp; c</li> <li>!(a || b) &amp;&amp; c</li> </ol> Ejercicio 4 <p>Dado los siguientes valores de las variables x, y, j y k, a\u00f1adir los par\u00e9ntesis que sean necesarios para que las expresiones que las siguen eval\u00faen a verdadero: x = 10; y = 19; j = true; k = false.</p> <ol> <li>x == y || j</li> <li>x &gt;= y || x &lt;=y &amp;&amp; j</li> <li>!j || j</li> <li>!k &amp;&amp; k</li> </ol> Ejercicio 5 <p>Sea n un dato de tipo Entero que suponemos positivo. Empareja las expresiones con la descripci\u00f3n que les corresponda:</p> <p>a) El mayor n\u00famero par no superior a n. b) El primer n\u00famero par mayor o igual que n c) El primer impar mayor o igual que n</p> <p>1) (n / 2)*2 2) n + (n+1) % 2 3) ((n+1)/2)*2</p>"},{"location":"bloque_i/tema_1/page-7/","title":"7 Introducci\u00f3n a las funciones","text":""},{"location":"bloque_i/tema_1/page-7/#introduccion","title":"Introducci\u00f3n","text":"<p>Una subrutina o subprograma, como idea general, se presenta como un subalgoritmo que forma parte del algoritmo principal, el cual permite resolver una tarea espec\u00edfica.</p> <p>Podemos distinguir tres t\u00e9rminos que poseen diferencias:</p> <ol> <li>Funci\u00f3n: conjunto de instrucciones que devuelven un resultado.</li> <li>Procedimiento: conjunto de instrucciones que se ejecutan sin devolver ning\u00fan resultado.</li> <li>M\u00e9todo: funci\u00f3n o procedimiento que pertenece a un objeto.</li> </ol>"},{"location":"bloque_i/tema_1/page-7/#construccion","title":"Construcci\u00f3n","text":"<p>Una funci\u00f3n se construye de la siguiente manera:</p> <pre><code>modificador_acceso tipo_resultado nombre_funci\u00f3n (tipo_par\u00e1metro\nnombre_par\u00e1metro, ... ) {\ninstrucciones\nreturn expresi\u00f3n;\n}\n</code></pre> <ul> <li>modificador_acceso: es la visibilidad que posee la funci\u00f3n (Lo veremos m\u00e1s adelante. De momento, lo utilizaremos como public).</li> <li>tipo_resultado: es el tipo del resultado que devuelve la funci\u00f3n.</li> <li>nombre_funci\u00f3n:  es  el  nombre  que  identifica  a  la  funci\u00f3n.  Utiliza  la  notaci\u00f3n lowerCamelCase. Ejemplo: imprimirResultadoDecimal.</li> <li>tipo_par\u00e1metro nombre_par\u00e1metro,...:  puede  ocurrir  que  la  funci\u00f3n  necesite  ciertos valores para efectuar la misi\u00f3n para la que ha sido creada. Por ejemplo, la funci\u00f3n suma necesitar\u00eda  los  valores  que  tiene  que  sumar.  En  este  caso,  se  deben  indicar  cada  uno  de dichos  valores  con  sus  tipos  correspondientes. A  estos  valores  se  les  conoce como par\u00e1metros  de  la  funci\u00f3n.  Si  la  funci\u00f3n  no  necesita  par\u00e1metros,  entonces  solamente se ponen los par\u00e9ntesis:  <code>nombre_funcion( )</code></li> </ul> <p>A todo esto se le conoce como la firma (signature) de la funci\u00f3n:</p> <pre><code>modificador_acceso tipo_resultado nombre_funci\u00f3n (tipo_par\u00e1metro\nnombre_par\u00e1metro, ... )\n</code></pre> <ul> <li>instrucciones: instrucciones que conforman el algoritmo de la funci\u00f3n, para que realice la misi\u00f3n para la que ha sido creada.</li> <li>return expresi\u00f3n;: el return es el que nos devuelve el resultado, por lo tanto la expresi\u00f3n que  acompa\u00f1a  al  return  tiene  que  devolver  un  valor  correspondiente  al  tipo_resultado indicado en la firma de la funci\u00f3n.</li> </ul> <p>Ejemplo de funci\u00f3n con dos par\u00e1metros:</p> <pre><code>public static int add(int sum1,int sum2) {\nreturn sum1+sum2;\n}\n</code></pre> <p>Puede  ser  tambi\u00e9n  que  haya  m\u00e1s  de  un  return.  En  ese  caso,  el  flujo  de  ejecuci\u00f3n  abandona  la funci\u00f3n en cuanto ejecute el primer return. Ejemplo:</p> <pre><code>public static boolean isPar(int n){\nif(n%2==0){\nreturn true;\n}\nelse{\nreturn false;\n}\n}\n</code></pre> <p>En  el  caso  de  que  estemos  definiendo  un  procedimiento,  no  tendremos  return  ya  que  no devuelve ning\u00fan resultado y el tipo_resultado es void. Como por ejemplo <code>System.out.println</code>, que escribe en pantalla lo que recibe por par\u00e1metro pero no devuelve nada.</p>"},{"location":"bloque_i/tema_1/page-7/#llamada-a-la-funcion","title":"Llamada a la funci\u00f3n","text":"<p>Una  funci\u00f3n  permite  que  reutilicemos  un  algoritmo  ya  que  se  puede  utilizar  cuando  nos  haga falta.  Para  ello,  solamente  tendremos  que  llamar  a  la  funci\u00f3n  por  su  nombre  y  pasarle  los par\u00e1metros en el mismo orden que se han definido y pertenecientes al mismo tipo de dato. En la llamada, dichos par\u00e1metros se llaman argumentos.</p> <pre><code>public class Functions {\npublic static void main(String[] args) {\nboolean par;\nint result;\npar = isPar(5);//(1)!\nSystem.out.println(par);//(2)!\npar = isPar(4);//(3)!\nSystem.out.println(par);//(4)!\nresult = add(5, 2);//(5)!\nSystem.out.println(result);//(6)!\n}\npublic static boolean isPar(int n) {\nif (n % 2 == 0) {\nreturn true;\n} else {\nreturn false;\n}\n}\npublic static int add(int sum1, int sum2) {\nreturn sum1 + sum2;\n}\n}\n</code></pre> <ol> <li>Se llama a la funci\u00f3n isPar con un valor de 5 en el argumento</li> <li>Mostrar\u00e1 false</li> <li>Se llama a la funci\u00f3n isPar con un valor de 4 en el argumento</li> <li>Mostrar\u00e1 true</li> <li>Se llama a la funci\u00f3n add con los valores 5 y 2 en los argumentos</li> <li>Mostrar\u00e1 7</li> </ol>"},{"location":"bloque_i/tema_1/page-8/","title":"8 Tipos enumerados simples","text":""},{"location":"bloque_i/tema_1/page-8/#introduccion","title":"Introducci\u00f3n","text":"<p>Los tipos enumerados sirven para restringir el contenido de una variable a una serie de valores predefinidos. Esto suele ayudar a reducir los errores en nuestro c\u00f3digo.</p> <p>En  las  versiones  anteriores  a  la  versi\u00f3n  5  de  Java  no  exist\u00edan  los  tipos  de  datos  enumerados  con  lo  que deb\u00edamos usar constantes de la siguiente forma:</p> <pre><code>final String RED_COLOR = \"rojo\";\nfinal String GREEN_COLOR = \"verde\";\nfinal String BLUE_COLOR = \"azul\";\n</code></pre> <p>A partir de la versi\u00f3n 5 de Java se incorporaron al lenguaje los tipos de datos enumerados con el objetivo de mejorar varios aspectos sobre el uso de las constantes. B\u00e1sicamente, un enumerado en Java es un conjunto fijo  y  relacionado  de  constantes  y deben  usarse  siempre  que  se  necesite  representar  un  conjunto  de constantes con esas caracter\u00edsticas.</p>"},{"location":"bloque_i/tema_1/page-8/#definicion","title":"Definici\u00f3n","text":"<p>Los  enumerados  se  definen  con  la  palabra  enum, el nombre del enumerado  y  luego  el  conjunto  de  las constantes, que por las convenciones del lenguaje se escriben en may\u00fascula. Ejemplo:</p> <pre><code>public enum DayOfWeek {\nMONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY\n}\n</code></pre> <p>En Java, los tipos enumerados se pueden definir dentro de una clase o como una clase independiente. Si varias clases  van  a  utilizar  el  enum,  entonces  se  define  como  una  clase  independiente.  Si  por  el  contrario,  es solamente una clase la que lo utiliza, entonces se define dentro de dicha clase.</p> <ul> <li> <p>Dentro de una clase:</p> <pre><code>public class SimpleEnum {\npublic enum DayOfWeek {\nMONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY\n}\npublic static void main(String[] args) {\nDayOfWeek d;\nd = DayOfWeek.MONDAY;\nSystem.out.println(d == DayOfWeek.MONDAY ? true:false);\nd = DayOfWeek.SUNDAY;\nSystem.out.println(d == DayOfWeek.MONDAY ? true:false);\n}\n}\n</code></pre> </li> <li> <p>Como  una  clase  independiente: hay  que  colocarse  en  el  paquete donde se quiera crear el enum. Luego se pulsa el bot\u00f3n derecho del rat\u00f3n y New \u2192 Enum.</p> <pre><code>public enum DayOfWeeks {\nMONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY\n}\n</code></pre> <pre><code>public class EnumSimple {\npublic static void main(String[] args) {\nDayOfWeeks d;\nd = DayOfWeeks.MONDAY;\nSystem.out.println(d == DayOfWeeks.MONDAY ? true:false);\nd = DayOfWeeks.SUNDAY;\nSystem.out.println(d == DayOfWeeks.MONDAY ? true:false);\n}\n}\n</code></pre> </li> </ul>"},{"location":"bloque_i/tema_1/page-9/","title":"9 Iniciaci\u00f3n a la Programaci\u00f3n Orientada a Objetos","text":""},{"location":"bloque_i/tema_1/page-9/#introduccion","title":"Introducci\u00f3n","text":"<p>La Programaci\u00f3n Orientada a Objetos (POO) es una t\u00e9cnica de programar aplicaciones basada en una serie de objetos independientes que se comunican entre s\u00ed.</p> <p>A Java se le considera un lenguaje orientado a objetos ya que siempre que se crea un programa en Java, por simple que sea, se necesita declarar una clase, y el concepto de clase pertenece a la programaci\u00f3n orientada a objetos.</p> <p>Un  objeto  es  un  elemento  del  programa  que  integra  sus  propios  datos  y  su  propio funcionamiento. Es decir, un objeto est\u00e1 formado por datos (atributos o propiedades) y por las funciones que es capaz de realizar el objeto (m\u00e9todos). Esta forma de programar se asemeja m\u00e1s al pensamiento humano. La cuesti\u00f3n es detectar adecuadamente los objetos necesarios para una aplicaci\u00f3n. De hecho hay que detectar las distintas clases de objetos.</p> <p>Una clase es lo que define a un tipo de objeto. Al definir una clase lo que se hace es indicar como funciona un determinado tipo de objeto. Luego, a partir de la clase, podremos crear objetos de esa  clase, es  decir,  la  clase  es  como  un  molde  a  partir  del  cual  se  crean  los  objetos  que pertenecen  a  ella.  Realmente  la  programaci\u00f3n  orientada  a  objetos  es  una  programaci\u00f3n orientada a clases. Es decir, lo que necesitamos programar es como funcionan las clases de objetos.</p> <p>Por ejemplo, una clase podr\u00eda ser la clase Coche. Cuando se defina esta clase, indicaremos los atributos o propiedades (como el color, modelo, marca, velocidad m\u00e1xima,...) y los m\u00e9todos (arrancar, parar, repostar, acelerar, frenar...). Todos los coches, es decir, todos los objetos de la clase Coche, tendr\u00e1n esas propiedades y esos m\u00e9todos. Para explicar la diferencia entre clase y objeto:</p> <ul> <li>la clase Coche representa a todos los coches.</li> <li>un coche concreto es un objeto, es decir, un ejemplar de una clase es un objeto. Tambi\u00e9n se le llama a los objetos instancias de la clase. Este t\u00e9rmino procede del ingl\u00e9s, instance, que realmente significa ejemplar.</li> </ul> <p>Por ejemplo, si quisi\u00e9ramos crear el juego del parch\u00eds en Java, una clase ser\u00eda la casilla, otra las fichas,  otra  el  dado,  etc.  En  el  caso  de  la  casilla,  se  definir\u00eda  la  clase  para  indicar  su funcionamiento y sus propiedades, y luego se crear\u00edan tantos objetos casilla como casillas tenga el juego. Lo mismo ocurrir\u00eda con las fichas, la clase ficha definir\u00eda las propiedades de la ficha (color  y  posici\u00f3n  por  ejemplo)  y  su  funcionamiento  mediante  sus  m\u00e9todos  (por  ejemplo  un m\u00e9todo ser\u00eda mover, otro llegar a la meta, etc), luego se crear\u00edan tantos objetos ficha como fichas tenga el juego.</p>"},{"location":"bloque_i/tema_1/page-9/#creacion-de-objetos","title":"Creaci\u00f3n de objetos","text":"<p>Una vez definida la clase, ya se pueden crear objetos de la misma. Para crear un objeto, hay que declarar una variable cuyo tipo ser\u00e1 la propia clase.</p> <p>Si por ejemplo defini\u00e9ramos una clase llamada Vehicle para modelar veh\u00edculos, para crear un objeto tendr\u00edamos que declarar una variable de tipo Vehicle:</p> <pre><code>Vehicle car; // car es una variable de tipo Vehicle\n</code></pre> <p>Una vez definida la variable, se le crea el objeto llamando a un m\u00e9todo que se llama constructor. Un constructor es un m\u00e9todo que se invoca cuando se crea un objeto y que sirve para inicializar los atributos del objeto y para realizar las acciones pertinentes que requiera el mismo para ser creado. El constructor tiene el mismo nombre que la clase y para invocarlo se utiliza el operador new.</p> <pre><code>car = new Vehicle(); // Vehicle() es un m\u00e9todo constructor\n</code></pre> <p>Tambi\u00e9n se puede hacer todo en la misma l\u00ednea:</p> <pre><code>Vehicle car = new Vehicle();\n</code></pre>"},{"location":"bloque_i/tema_1/page-9/#acceso-a-los-atributos-y-metodos-del-objeto","title":"Acceso a los atributos y m\u00e9todos del objeto","text":"<p>Una  vez  creado  el  objeto,  se  puede  acceder  a  sus  atributos  de  la  siguiente  manera: <code>objeto.atributo</code>.</p> <pre><code>car.wheelCount = 4; //(1)!\n</code></pre> <ol> <li>Se le asigna 4 al atributo de ruedas de la variable car.</li> </ol> <p>Los m\u00e9todos se utilizan de la misma forma que los atributos, a excepci\u00f3n de que los m\u00e9todos poseen  siempre  par\u00e9ntesis  ya  que  son  funciones  que  pertenecen  a  un  objeto: <code>objeto.m\u00e9todo(argumentos)</code>.</p> <pre><code>car.accelerate(30); //(1)!\n</code></pre> <ol> <li>El coche incrementa su velocidad en 30. Es decir, si iba a 90km/h, despu\u00e9s de ejecutar el m\u00e9todo, el coche va a 120km/h.</li> </ol>"},{"location":"bloque_i/tema_1/page-9/#sobrecarga-de-metodos","title":"Sobrecarga de m\u00e9todos","text":"<p>Java admite sobrecargar los m\u00e9todos, es decir, crear distintas variantes del mismo m\u00e9todo con el mismo nombre pero que se diferencien en el orden, tipo o n\u00famero de los par\u00e1metros. Por ejemplo, tenemos el m\u00e9todo para <code>sumar  add(int x,double y)</code>:</p> <ul> <li>S\u00ed  podr\u00edamos  definir  el  m\u00e9todo <code>add(double  x,int  y)</code> porque  var\u00eda  el  orden  de  los par\u00e1metros.</li> </ul> <p>Otro ejemplo donde tenemos el m\u00e9todo <code>add(int x,int y)</code>:</p> <ul> <li>No  podr\u00edamos  definir  otro  m\u00e9todo <code>add(int  a,int  b)</code>porque  no  var\u00eda  el  tipo  ni  el n\u00famero de par\u00e1metros.</li> <li>S\u00ed podr\u00edamos definir <code>add(int a)  y  add(int  a,int  b,int  c)</code> porque  el  n\u00famero  de par\u00e1metros var\u00eda. Tambi\u00e9n podr\u00edamos definir `add(int x,double y)p porque aunque no var\u00ede el n\u00famero de par\u00e1metros, s\u00ed var\u00eda uno de los tipos.</li> </ul>"},{"location":"bloque_i/tema_1/page-9/#metodos-estaticos-y-dinamicos","title":"M\u00e9todos est\u00e1ticos y din\u00e1micos","text":"<p>A los m\u00e9todos asociados a los objetos se les conoce como m\u00e9todos din\u00e1micos. Pero puede ocurrir que tengamos m\u00e9todos que no est\u00e9n asociados a ning\u00fan objeto, por ejemplo, m\u00e9todos de utilidad general. Dichos m\u00e9todos se les conoce como m\u00e9todos est\u00e1ticos y se definen con la palabra static. Al no estar asociados a ning\u00fan objeto, se utilizan con el nombre de la clase: <code>Clase.metodoEst\u00e1tico(argumentos)</code>. Ejemplos de llamadas a m\u00e9todos din\u00e1micos y est\u00e1ticos:</p> <ul> <li>Llamada a m\u00e9todo din\u00e1mico: <code>car.accelerate(30);</code></li> <li>Llamada a m\u00e9todo est\u00e1tico: <code>Math.pow(2,3);</code></li> </ul>"},{"location":"bloque_i/tema_1/page-9/#api-de-java","title":"Api de Java","text":"<p>La API de Java es una interfaz de programaci\u00f3n de aplicaciones (API, por sus siglas del ingl\u00e9s: Application Programming Interface) provista por los creadores del lenguaje de programaci\u00f3n Java, que da a los programadores los medios para desarrollar aplicaciones Java.</p> <p>Al instalar Java (el paquete JDK) en nuestro ordenador, adem\u00e1s del compilador y la m\u00e1quina virtual de Java se instalan bastantes m\u00e1s elementos. Entre ellos, una cantidad muy importante de clases que ofrece la multinacional desarrolladora de Java y que est\u00e1n a disposici\u00f3n de todos los programadores listas para ser usadas.  Estas clases junto a otros elementos forman lo que se denomina API de Java.</p> <p>Los paquetes donde se encuentran dichas clases los podemos encontrar en https://docs.oracle.com/  \u2192 Java \u2192 Java SE Documentation \u2192 JDK  de  la  versi\u00f3n  deseada  \u2192  Specifications \u2192 API Documentation \u2192 Module: java.base.</p> <p>Otra manera de acceder r\u00e1pido es poniendo en un buscador de Internet <code>Api  Java  Version Clase</code>, como por ejemplo: Api Java 12 Math.</p>"},{"location":"bloque_i/tema_1/page-9/#la-clase-math","title":"La clase Math","text":"<p>La  clase  Math  contiene  los  m\u00e9todos  para  realizar  operaciones  matem\u00e1ticas  b\u00e1sicas,  como potencias, logaritmos, ra\u00edces cuadradas y funciones trigonom\u00e9tricas.</p> <p>Si observamos esta clase en la API, todos los m\u00e9todos tienen al principio la palabra static, ya que son m\u00e9todos est\u00e1ticos porque son funciones de utilidad que no se utilizan asociadas a un objeto. Despu\u00e9s de la palabra static nos encontramos con el tipo del resultado que devuelve el m\u00e9todo. Y  a  continuaci\u00f3n,  nos  encontramos  con  el  nombre  del  m\u00e9todo  y  sus  par\u00e1metros.  Ejemplo:</p> <p><code>static double abs(double a)</code>Esto se conoce como la firma del m\u00e9todo (signature en ingl\u00e9s).</p> <pre><code>public class MathClass {\npublic static void main(String[] args) {\nSystem.out.println(Math.abs(-3.2));\nSystem.out.println(Math.pow(2,3));\nSystem.out.println(Math.sqrt(16));\nSystem.out.println(Math.min(20,5));\n}\n}\n</code></pre> Ejercicio 1 <p>Investiga en la API de Java para qu\u00e9 sirven los siguientes m\u00e9todos de la clase Math. Realiza un programa Java donde uses cada uno de esos m\u00e9todos realizando comentarios explicando cada uno de ellos. (Hacer ejemplo con n\u00fameros positivos y negativos)</p> <ol> <li><code>static float abs(float a)</code></li> <li><code>static int addExact(int x, int y)</code></li> <li><code>static double ceil(double a)</code></li> <li><code>static int decrementExact(int a)</code></li> <li><code>static double floor(double a)</code></li> <li><code>static int incrementExact(int a)</code></li> <li><code>static double max(double a, double b)</code></li> <li><code>static int multiplyExact(int x, int y)</code></li> <li><code>static int negateExact(int a)</code></li> </ol> <p>Obs\u00e9rvese en la API la sobrecarga de los m\u00e9todos abs y min.</p>"},{"location":"bloque_i/tema_1/page-9/#la-clase-string","title":"La clase String","text":"<p>El texto es uno de los tipos de datos m\u00e1s importantes y por ello Java lo trata de manera especial. Para Java, las cadenas de texto son objetos especiales. Los textos deben manejarse creando objetos de tipo String. Las cadenas se pueden inicializar de dos maneras:</p> <ul> <li>Usando el operador asignaci\u00f3n: <code>String s=\"hola\";</code></li> <li>Usando el constructor: <code>String s=new String(\"hola\");</code></li> </ul> <p>Los literales cadena se escriben entre comillas dobles: <code>\"Esto es un literal cadena\"</code>.</p> <p>En java existe tambi\u00e9n la cadena vac\u00eda o nula, es decir, una cadena sin ning\u00fan car\u00e1cter. Ejemplo: <code>String s=\"\";</code> A la variable s se le est\u00e1 asignando la cadena vac\u00eda o nula.</p> <p>Como vimos en el tema 1.5 Operadores, el operador concatenaci\u00f3n <code>+</code>  es un operador binario que devuelve una cadena resultado de concatenar las dos cadenas que act\u00faan como operandos. Si s\u00f3lo uno de los operandos es de tipo cadena, el otro operando se convierte impl\u00edcitamente en tipo cadena.</p> <p>Obs\u00e9rvese en la API el m\u00e9todo valueOf: es est\u00e1tico y est\u00e1 sobrecargado. Sirve para obtener la representaci\u00f3n String de un valor u objeto.</p> <pre><code>public class StringClass {\npublic static void main(String[] args) {\nint i = 100;\nString string1, string2, string3, string4;\nstring1 = \"Esto es un literal cadena\"; //(1)!\nSystem.out.println(string1);\nSystem.out.println(string1 + \" al cual le hemos concatenado este literal cadena\"); //(2)!\nstring2 = \"hola\";\nstring3 = \" que tal\";\nstring4 = string2 + string3;\nSystem.out.println(string4);\nSystem.out.println(i + 100); //(3)!\nSystem.out.println(String.valueOf(i) + 100); //(4)!\n}\n}\n</code></pre> <ol> <li>Se le da el valor inicial con el operador asignaci\u00f3n =</li> <li>Se concatena otra cadena con el operador +</li> <li>suma de enteros</li> <li>Concatenaci\u00f3n de cadenas</li> </ol> <p>Otros m\u00e9todos de las cadenas muy \u00fatiles son:</p> <ul> <li>charAt: devuelve el car\u00e1cter de la cadena del especificado \u00edndice. Dicho \u00edndice empieza en cero, es decir, con el cero se obtiene el primer car\u00e1cter de la cadena.</li> <li>length: devuelve la longitud de la cadena.</li> <li>equals: compara si dos cadenas son iguales.</li> </ul> <pre><code>public class StringClass2 {\npublic static void main(String[] args) {\nString string = \"hola\";\nSystem.out.println(string.charAt(0)); //h\nSystem.out.println(string.charAt(1)); //o\nSystem.out.println(string.charAt(2)); //l\nSystem.out.println(string.charAt(3)); //a\nSystem.out.println(string.length()); //4\nSystem.out.println(string.equals(\"hola\")); //true\nSystem.out.println(string.equals(\"hola\")); //false\n}\n}\n</code></pre> Ejercicio 2 <p>Investiga en la API de Java para qu\u00e9 sirven los siguientes m\u00e9todos de la clase String. Realiza un programa Java con ejemplos de cada uno de ellos comentando su uso.</p> <ol> <li><code>char charAt(int index)</code></li> <li><code>int length()</code></li> <li><code>boolean equals(Object anObject)</code><ul> <li>Compara dos cadenas</li> <li>Compara tres cadenas</li> </ul> </li> <li><code>int codePointAt(int index)</code></li> <li><code>int compareTo(String anotherString)</code></li> <li><code>int compareToIgnoreCase(String str)</code></li> <li><code>String concat(String str)</code></li> <li><code>boolean endsWith(String suffix)</code></li> <li><code>boolean equalsIgnoreCase(String anotherString)</code></li> <li><code>int indexOf(int ch)</code></li> <li><code>int indexOf(int ch, int fromIndex)</code></li> <li><code>boolean isEmpty()</code></li> <li><code>int lastIndexOf(int ch)</code></li> <li><code>int lastIndexOf(int ch, int fromIndex)</code></li> <li><code>String replace(char oldChar, char newChar)</code></li> <li><code>String toUpperCase()</code></li> <li><code>String trim()</code></li> </ol>"},{"location":"bloque_i/tema_1/page-9/#wrappers","title":"Wrappers","text":"<p>En ocasiones es muy conveniente poder tratar los datos primitivos (int, boolean, etc.) como objetos. Pero los datos primitivos no son objetos. Para resolver esta situaci\u00f3n, la API de Java incorpora las clases envoltorio (wrapper class), que no son m\u00e1s que dotar a los datos primitivos con  un  envoltorio  que  permita  tratarlos  como  objetos.  Las  clases  envoltorio  proporcionan m\u00e9todos de utilidad para la manipulaci\u00f3n de datos primitivos (conversiones de / hacia datos primitivos, conversiones a String, etc).</p> <p>La siguiente tabla muestra los tipos primitivos y sus wrappers asociados:</p> Tipo primitivo Wrapper asociado byte Byte short Short int Integer long Long float Float double Double char Character boolean Boolean <p>Todos estos wrappers los encontraremos en la API de Java. Por ejemplo, si observamos en la API la clase Integer, podemos ver la siguiente firma de m\u00e9todo: <code>static int parseInt(String s)</code> que convierte la cadena pasada por par\u00e1metro a entero.</p> <pre><code>public class IntegerClass {\npublic static void main(String[] args) {\nInteger integer1, integer2;\nint i;\ninteger1 = 5;\nSystem.out.println(integer1);\ni = Integer.parseInt(\"7\"); //(1)!\nSystem.out.println(i);\ninteger2 = Integer.valueOf(i); //(2)!\nSystem.out.println(integer2);\ni = integer1.intValue(); //(3)!\nSystem.out.println(i);\n}\n</code></pre> <ol> <li>Convierte la cadena a int. M\u00e9todo est\u00e1tico por lo que se utiliza con Integer</li> <li>Convierte el int a Integer. Tambi\u00e9n es est\u00e1tico</li> <li>Convierte el integer a int. M\u00e9todo din\u00e1mico por lo que se utiliza con el objeto</li> </ol>"},{"location":"bloque_i/tema_1/page-9/#encadenamiento-de-llamadas-a-metodos","title":"Encadenamiento de llamadas a m\u00e9todos","text":"<p>Se emplea cuando invocamos a un m\u00e9todo de un objeto que nos devuelve como resultado otro objeto al que podemos volver a invocar otro m\u00e9todo y as\u00ed encadenar varias operaciones.</p> <pre><code>public class CallsToMethods {\npublic void showCallsToMethods(){\nBoolean b;\nString string;\nstring = \"EntornoDeDesarrollo\";\nSystem.out.println(string.substring(10).toUpperCase()); // DESARROLLO\nb = Boolean.TRUE;\nSystem.out.println(b.toString().charAt(2)); //u\n}\npublic static void main(String[] args) {\nnew CallsToMethods().showCallsToMethods();\n}\n}\n</code></pre> <p>En este ejemplo, el m\u00e9todo <code>substring(10)</code>  est\u00e1 devolviendo una subcadena de la cadena string a partir del car\u00e1cter 10 empezando en 0, es decir, \"Desarrollo\", al que se le invoca luego el m\u00e9todo <code>toUpperCase</code> devolviendo como resultado la cadena \"DESARROLLO\".</p> <p>Y el m\u00e9todo <code>toString()</code> de la variable b de tipo Boolean est\u00e1 devolviendo la cadena \"true\" a la que se le encadena el m\u00e9todo <code>charAt(2)</code>  devolviendo el car\u00e1cter 'u'.</p> Ejercicio 3 <p>Investiga en la API de Java para qu\u00e9 sirven los siguientes m\u00e9todos de la clase Character. Realiza un programa Java donde realices ejemplos us\u00e1ndolos y comentando su uso.</p> <ol> <li><code>char charValue()</code></li> <li><code>static int compare(char x, char y)</code></li> <li><code>boolean equals(Object obj)</code></li> <li><code>static boolean isDigit(char ch)</code></li> <li><code>static boolean isLetter(char ch)</code></li> <li><code>static boolean isLowerCase(char ch)</code></li> <li><code>static boolean isSpaceChar(char ch)</code></li> <li><code>static boolean isUpperCase(char ch)</code></li> <li><code>static char toLowerCase(char ch)</code></li> <li><code>static char toUpperCase(char ch)</code></li> <li><code>static Character valueOf(char c)</code></li> </ol> Ejercicio 4 <p>Investiga en la API de Java para qu\u00e9 sirven los siguientes m\u00e9todos de la clase Integer. Realiza un programa Java donde realices ejemplos us\u00e1ndolos y comentando su uso.</p> <ol> <li><code>byte byteValue()</code></li> <li><code>static int compare(int x, int y)</code></li> <li><code>int compareTo(Integer anotherInteger)</code></li> <li><code>double doubleValue()</code></li> <li><code>boolean equals(Object obj)</code></li> <li><code>int intValue()</code></li> <li><code>static int max(int a, int b)</code></li> <li><code>static int min(int a, int b)</code></li> <li><code>static int parseInt(String s)</code></li> <li><code>static int sum(int a, int b)</code></li> <li><code>static Integer valueOf(int i)</code></li> <li><code>static Integer valueOf(String s)</code></li> </ol> Ejercicio 5 <p>Investiga en la API de Java para qu\u00e9 sirven los siguientes m\u00e9todos de la clase Double. Realiza un programa Java donde realices ejemplos us\u00e1ndolos y comentando su uso.</p> <ol> <li><code>static int compare(double d1, double d2)</code></li> <li><code>int compareTo(Double anotherDouble)</code></li> <li><code>double doubleValue()</code></li> <li><code>boolean equals(Object obj)</code></li> <li><code>float floatValue()</code></li> <li><code>int intValue()</code></li> <li><code>boolean isInfinite()</code></li> <li><code>static boolean isInfinite(double v)</code></li> <li><code>boolean isNaN()</code></li> <li><code>static boolean isNaN(double v)</code></li> <li><code>static double max(double a, double b)</code></li> <li><code>static double min(double a, double b)</code></li> <li><code>static double parseDouble(String s)</code></li> <li><code>static double sum(double a, double b)</code></li> <li><code>static Double valueOf(double i)</code></li> <li><code>static Double valueOf(String s)</code></li> </ol> Ejercicio 6 <p>Declara un booleano, un entero, un car\u00e1cter y un decimal, inicial\u00edzalas. Luego, transforma todas las variables a variable cadena. Luego, obtener una cadena resultante de concatenar todas las cadenas obtenidas anteriormente. Muestra esta cadena resultante por pantalla.</p>"},{"location":"bloque_i/tema_2/page-1/","title":"1 Condicionales","text":""},{"location":"bloque_i/tema_2/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>Los  programas  se  construyen  para  procesar  datos,  manipul\u00e1ndolos  de  formas diferentes  dependiendo  de  los  valores  que  tengan.  Los  lenguajes  de  programaci\u00f3n deben proveer estructuras que les permitan a los  programadores controlar el flujo de ejecuci\u00f3n  de  un  programa  dependiendo  de  los  datos  que  procesan.  Para  ello,  se incluyen las sentencias de control de flujo, que alteran el flujo de ejecuci\u00f3n para tomar decisiones o repetir sentencias.</p> <p>La programaci\u00f3n estructurada es un paradigma de programaci\u00f3n orientado a mejorar la claridad, calidad y tiempo  de  desarrollo  de  un  programa  de  computadora  recurriendo  \u00fanicamente  a subrutinas y tres estructuras b\u00e1sicas: secuencia, sentencias condicionales y bucles.</p> <p>Una subrutina o subprograma, como idea general, se presenta como un subalgoritmo que forma parte del algoritmo  principal,  el  cual  permite  resolver  una  tarea  espec\u00edfica.  Por  ejemplo,  los m\u00e9todos en Java.</p>"},{"location":"bloque_i/tema_2/page-1/#secuencia","title":"Secuencia","text":"<p>La  ejecuci\u00f3n  secuencial  es  el  m\u00e1s  b\u00e1sico  de  los  mecanismos  de  control  de  flujo  y consiste en la ejecuci\u00f3n de instrucciones en el orden en que se encuentran en el c\u00f3digo fuente del programa.</p> <p>Hasta  ahora  las  instrucciones  que  hemos  visto,  son  instrucciones  que  se  ejecutan secuencialmente; es decir, podemos saber lo que hace el programa leyendo las l\u00edneas de izquierda a derecha y de arriba abajo.</p>"},{"location":"bloque_i/tema_2/page-1/#sentencias-condicionales","title":"Sentencias condicionales","text":"<p>La sentencia condicional consiste en ejecutar instrucciones diferentes dependiendo del resultado de evaluar una expresi\u00f3n l\u00f3gica. Una expresi\u00f3n l\u00f3gica es cualquier tipo de expresi\u00f3n que devuelva un resultado booleano (true o false). Las expresiones l\u00f3gicas se construyen  por  medio  de  variables  booleanas  o  bien  a  trav\u00e9s  de  los  operadores relacionales (==, &gt;, &lt;,...) y/o l\u00f3gicos (&amp;&amp;,||, !).</p>"},{"location":"bloque_i/tema_2/page-1/#condicional-simple","title":"Condicional simple","text":"<p>Se ejecutan una serie de instrucciones en el caso de que la expresi\u00f3n l\u00f3gica sea verdadera:</p> EstructuraEjemplo <pre><code>if(expresi\u00f3nL\u00f3gica){\n// instrucciones\n}\n</code></pre> <pre><code>import java.util.Scanner;\npublic class If {\npublic static void main(String[] args) {\nScanner keyboard = new Scanner(System.in);\nint age;\nString name;\nSystem.out.print(\"Introduce tu nombre: \");\nname = keyboard.nextLine();\nSystem.out.print(\"Introduce tu edad: \");\nage = keyboard.nextInt();\nif(age &gt;= 18){\nSystem.out.printf(\"Bienvenido/a %s\\n\", name);\nSystem.out.println(\"Eres mayor de edad\");\n}\n}\n}\n</code></pre> Ejercicio 1 <p>Dada una cantidad, si es mayor que 1000, que muestre el 15% de dicha cantidad. Si no, que no haga nada.</p>"},{"location":"bloque_i/tema_2/page-1/#condicional-doble","title":"Condicional doble","text":"<p>Es igual que la anterior, s\u00f3lo que se a\u00f1ade un apartado else que contiene instrucciones que se ejecutar\u00e1n si la expresi\u00f3n evaluada por el if es falsa.</p> EstructuraEjemplo <pre><code>if(expresi\u00f3nL\u00f3gica){\n// instrucciones si la expresi\u00f3n l\u00f3gica es verdadera\n} else {\n// expresiones si la expresi\u00f3n l\u00f3gica es falsa\n}\n</code></pre> <pre><code>import java.util.Scanner;\npublic class IfElse {\npublic static void main(String[] args) {\nScanner keyboard = new Scanner(System.in);\nint age;\nString name;\nSystem.out.print(\"Introduce tu nombre: \");\nname = keyboard.nextLine();\nSystem.out.print(\"Introduce tu edad: \");\nage = keyboard.nextInt();\nSystem.out.printf(\"Bienvenido/a %s\\n\", name);\nif(age &gt;= 18){\nSystem.out.println(\"Eres mayor de edad\");\n} else {\nSystem.out.println(\"Eres menor de edad\");\n}\n}\n}\n</code></pre> Ejercicio 2 <p>Dada una edad, que te muestre por pantalla si es mayor de edad o no.</p> Ejercicio 3 <p>Dado un n\u00famero, indicar si es par o impar.</p> Ejercicio 4 <p>Pedir dos n\u00fameros por teclado e indicar si el primer n\u00famero es m\u00faltiplo del segundo.</p>"},{"location":"bloque_i/tema_2/page-1/#condicional-multiple","title":"Condicional M\u00faltiple","text":""},{"location":"bloque_i/tema_2/page-1/#anidacion","title":"Anidaci\u00f3n","text":"<p>Dentro  de  una  sentencia  if  se  puede  colocar  otra  sentencia  if.  A  esto  se  le  llama anidaci\u00f3n  y  permite  crear  programas  donde  se  valoren  expresiones  complejas.  La nueva sentencia puede ir tanto en la parte if como en la parte else.</p> <p>Las anidaciones se utilizan much\u00edsimo al programar. Solo hay que tener en cuenta que siempre se debe cerrar primero el \u00faltimo if que se abri\u00f3. Es muy importante tambi\u00e9n tabular el c\u00f3digo correctamente para que las anidaciones sean legibles.</p> <p>Ejemplo:</p> <pre><code>if(x == 1){\n// instrucciones\n} else {\nif(x == 2){\n// instrucciones\n} else {\nif(x == 3){\n// instrucciones\n}\n}\n}\n</code></pre> <p>Una forma m\u00e1s legible de escribir ese mismo c\u00f3digo dando lugar a la llamada estructura if-else-if ser\u00eda:</p> <pre><code>if(x == 1){\n// instrucciones\n} else if(x == 2){\n// instrucciones\n} else if(x == 3){\n// instrucciones\n}\n</code></pre> <p>Cuando  se  cumpla  alguna  de  las  condiciones,  se  ejecutan  sus  instrucciones correspondientes y despu\u00e9s ya se sale de la estructura if-else-if ya que las condiciones son autoexcluyentes, es decir, solamente se va a cumplir una. Por eso, no estar\u00eda bien hacer lo siguiente:</p> <pre><code>if(x == 1){ // Forma incorrecta de programar\n// instrucciones\n}\nif(x == 2){\n// instrucciones\n}\nif(x == 3){\n// instrucciones\n}\n</code></pre> <p>El motivo de que no sea adecuado es porque se pierde tiempo en comprobar todas las condiciones. Por ejemplo, si x vale 1, se ejecutan sus instrucciones correspondientes y luego se comprobar\u00eda si x vale 2, si x vale 3, etc. cuando no se va a cumplir ninguna m\u00e1s ya que si x vale 1 no puede valer ni 2 ni 3.</p> <pre><code>import java.util.Scanner;\npublic class IfElseIf {\npublic static void main(String[] args) {         Scanner keyboard = new Scanner(System.in);\nint age;\nSystem.out.print(\"Introduce tu edad: \");\nage = keyboard.nextInt();\nif (age &gt;= 18) {\nSystem.out.println(\"Eres mayor de edad\");\n} else if (age &gt;= 16 &amp;&amp; age &lt; 18) {\nSystem.out.println(\"Eres menor de edad pero tienes ciertos privilegios\");\n} else if (age &gt;= 14 &amp;&amp; age &lt; 16) {\nSystem.out.println(\"Eres menor de edad y adem\u00e1s no tienes privilegios\");\n} else {\nSystem.out.println(\"Eres menor de edad\");\n}     }\n}\n</code></pre> Ejercicio 5 <p>Dada una nota, que te muestre lo siguiente:</p> <ul> <li>0, 1, 2: Muy deficiente</li> <li>3, 4: Insuficiente</li> <li>5: Suficiente</li> <li>6: Bien</li> <li>7, 8: Notable</li> <li>9, 10: Sobresaliente</li> </ul> Ejercicio 6 <p>Hacer un programa que lea por teclado un n\u00famero entero y nos diga si el n\u00famero es positivo, negativo o cero.</p> Ejercicio 7 <p>Realiza un programa que lea tres n\u00fameros positivos y compruebe si son iguales. Por ejemplo: Si la entrada fuese 5 5 5, la salida deber\u00eda ser \u201chay tres n\u00fameros iguales a 5\u201d. Si la entrada fuese 4 6 4, la salida deber\u00eda ser \u201chay dos n\u00fameros iguales a 4\u201d. Si la entrada fuese 0 1 2, la salida deber\u00eda ser \u201cno hay n\u00fameros iguales\u201d.</p>"},{"location":"bloque_i/tema_2/page-1/#switch","title":"Switch","text":"<p>El cuerpo de una sentencia switch se conoce como bloque switch.</p> <p>Esta  sentencia  eval\u00faa  una  expresi\u00f3n  y  cada  case  contiene  un  posible  valor  del resultado  de  dicha  expresi\u00f3n;  si  efectivamente  el  resultado  equivale  a  ese  valor,  se ejecutan las instrucciones de ese case y de los siguientes.</p> <p>La instrucci\u00f3n break se utiliza para salir del switch. De tal modo que si queremos que para un determinado valor se ejecuten las instrucciones de un apartado case y solo las de ese apartado, entonces habr\u00e1 que finalizar ese case con un break. Cuando se alcanza una sentencia break, el switch termina y el flujo de control salta a la siguiente l\u00ednea que sigue a la sentencia switch.</p> <p>Fall through condition (condici\u00f3n de ca\u00edda): esta condici\u00f3n se produce en la sentencia switch cuando no se utiliza  break en un case y causa la ejecuci\u00f3n de los siguientes case hasta que no se produce un break o se sale de la sentencia switch.</p> <p>El  bloque  default  sirve  para  ejecutar  instrucciones  para  los  casos  en  los  que  la expresi\u00f3n no se ajuste a ning\u00fan case. T\u00e9cnicamente, el break del default no es necesario porque el flujo se sale de la sentencia switch, pero se recomienda utilizarlo para que la modificaci\u00f3n del c\u00f3digo sea m\u00e1s f\u00e1cil y menos propensa a errores.</p> <p>Funciona con los tipos de datos primitivos, con los tipos enumerados, con las cadenas(a partir de Java 7) y con los wrappers.</p> EstructuraEjemplo 1Ejemplo 2 <pre><code>switch(expresi\u00f3n) {\ncase valor1 :\ninstrucciones\nbreak; // opcional\ncase valor2 :\ninstrucciones\nbreak; // opcional\n//....\n//....\ndefault : // opcional\ninstrucciones\nbreak; // opcional\n}\n</code></pre> <pre><code>import java.util.Scanner;\npublic class Switch1 {\npublic static void main(String[] args) {\nScanner keyboard = new Scanner(System.in);\nint weekday;\nSystem.out.print(\"Introduce un n\u00famero del 1 al 7 correspondiente al d\u00eda de la semana: \");\nweekday = keyboard.nextInt();\nswitch (weekday) {\ncase 1:\nSystem.out.println(\"Lunes\");\nbreak;\ncase 2:\nSystem.out.println(\"Martes\");\nbreak;\ncase 3:\nSystem.out.println(\"Mi\u00e9rcoles\");\nbreak;\ncase 4:\nSystem.out.println(\"Jueves\");\nbreak;\ncase 5:\nSystem.out.println(\"Viernes\");\nbreak;\ncase 6:\nSystem.out.println(\"S\u00e1bado\");\nbreak;\ncase 7:\nSystem.out.println(\"Domingo\");\nbreak;\ndefault:\nSystem.out.println(\"D\u00eda incorrecto\");\nbreak;\n}\n}\n}\n</code></pre> <pre><code>import java.util.Scanner;\npublic class Switch2 {\npublic static void main(String[] args) {\nScanner keyboard = new Scanner(System.in);\nint month, year, numDays = 0;\nSystem.out.print(\"Introduce un n\u00famero del 1 al 12 correspondiente a un mes: \");\nmonth = keyboard.nextInt();\nSystem.out.print(\"Introduce un a\u00f1o: \");\nyear = keyboard.nextInt();\nswitch (month) {\ncase 1:\ncase 3:\ncase 5:\ncase 7:\ncase 8:\ncase 10:\ncase 12:\nnumDays = 31;\nbreak;\ncase 4:\ncase 6:\ncase 9:\ncase 11:\nnumDays = 30;\nbreak;\ncase 2://Se calcula si es un a\u00f1o bisiesto\nif (((year % 4 == 0) &amp;&amp; !(year % 100 == 0)) || (year % 400 == 0)) {\nnumDays = 29;\n} else {\nnumDays = 28;\n}\nbreak;\ndefault:\nSystem.out.println(\"Mes inv\u00e1lido\");\nbreak;\n}\nif (month &gt;= 1 &amp;&amp; month &lt;= 12) {\nSystem.out.printf(\"N\u00famero de d\u00edas del mes %d del a\u00f1o %d: %d\", month, year, numDays);\n}\n}\n}\n</code></pre> <p>La  decisi\u00f3n  de  utilizar  sentencias  if-then-else  o  una  sentencia  switch  se  basa  en  la legibilidad y en la expresi\u00f3n que la sentencia est\u00e1 probando. Una sentencia if-then-else puede comprobar expresiones basadas en rangos de valores o condiciones, mientras que una sentencia switch comprueba expresiones basadas s\u00f3lo en un \u00fanico valor.</p> Ejercicio 8 <p>Realiza el ejercicio 4, haciendo uso de la estructura Switch.</p>"},{"location":"bloque_i/tema_2/page-1/#nuevo-switch","title":"Nuevo Switch","text":"<p>Desde la versi\u00f3n de Java 14, hay una nueva estructura de la sentencia switch, que la hace m\u00e1s \"elegante\" pero sobretodo legible.</p> EstructuraEjemplo 1Ejemplo 2 <pre><code>switch(expresi\u00f3n){\ncase valor1 -&gt; /* instrucci\u00f3n de una l\u00ednea*/;\ncase valor2 -&gt; {\n// instrucciones de m\u00e1s de una l\u00ednea\n}\n// ...\ndefault -&gt; /* instrucci\u00f3n de una l\u00ednea */;\n}\n</code></pre> <pre><code>import java.util.Scanner;\npublic class NewSwitch1 {\npublic static void main(String[] args) {\nScanner keyboard = new Scanner(System.in);\nint weekday;\nSystem.out.print(\"Introduce un n\u00famero del 1 al 7 correspondiente al d\u00eda de la semana: \");\nweekday = keyboard.nextInt();\nswitch (weekday) {\ncase 1 -&gt; System.out.println(\"Lunes\");\ncase 2 -&gt; System.out.println(\"Martes\");\ncase 3 -&gt; System.out.println(\"Mi\u00e9rcoles\");\ncase 4 -&gt; System.out.println(\"Jueves\");\ncase 5 -&gt; System.out.println(\"Viernes\");\ncase 6 -&gt; System.out.println(\"S\u00e1bado\");\ncase 7 -&gt; System.out.println(\"Domingo\");\ndefault -&gt; System.out.println(\"D\u00eda incorrecto\");\n}\n}\n}\n</code></pre> <pre><code>import java.util.Scanner;\npublic class NewSwitch2 {\npublic static void main(String[] args) {\nScanner keyboard = new Scanner(System.in);\nint month, year, numDays = 0;\nSystem.out.print(\"Introduce un n\u00famero del 1 al 12 correspondiente a un mes: \");\nmonth = keyboard.nextInt();\nSystem.out.print(\"Introduce un a\u00f1o: \");\nyear = keyboard.nextInt();\nswitch (month) {\ncase 1, 3, 5, 7, 8, 10, 12 -&gt; numDays = 31;\ncase 4, 6, 9, 11 -&gt; numDays = 30;\ncase 2 -&gt; {\n//Se calcula si es un a\u00f1o bisiesto\nif (((year % 4 == 0) &amp;&amp; !(year % 100 == 0)) || (year % 400 == 0)) {\nnumDays = 29;\n} else {\nnumDays = 28;\n}\n}\ndefault -&gt; System.out.println(\"Mes inv\u00e1lido\");\n}\nif (month &gt;= 1 &amp;&amp; month &lt;= 12) {\nSystem.out.printf(\"N\u00famero de d\u00edas del mes %d del a\u00f1o %d: %d\", month, year, numDays);\n}\n}\n}\n</code></pre> Ejercicio 9 <p>Realiza el ejercicio 4, haciendo uso de la nueva estructura Switch</p>"},{"location":"bloque_i/tema_2/page-1/#ejercicios","title":"Ejercicios","text":"Ejercicio 10 <p>Realiza un programa que calcule el precio de un billete de ida y vuelta por avi\u00f3n, conociendo la distancia a recorrer, el n\u00famero de d\u00edas de estancia y sabiendo que si la distancia es superior a 1.000 Km y el n\u00famero de d\u00edas de estancia es superior a 7, la l\u00ednea a\u00e9rea le hace un descuento del 30 %. (Precio por kil\u00f3metro = 0,35 \u20ac).</p> Ejercicio 11 <p>Los empleados de una f\u00e1brica trabajan en dos turnos: diurno y nocturno. Se desea calcular el jornal diario de acuerdo con los siguientes tarifas: la tarifa de las horas diurnas es de 3 \u20ac por hora, mientras que el de las nocturnas es de 4,80 \u20ac po hora. Cuando se trata de un d\u00eda festivo, la tarifa se incrementa en 1,20 \u20ac por hora en el turno diurno y 1,80 \u20ac por hora en el nocturno.</p> Ejercicio 12 <p>Realiza un programa que dados tres n\u00fameros, los devuelva en orden ascendente.</p> Ejercicio 13 <p>Dada una cadena solicitada al usuario, obtener y mostrar uno de sus caracteres elegidos aleatoriamente. Mostrar tambi\u00e9n en qu\u00e9 posici\u00f3n se encuentra dicho car\u00e1cter.</p> Ejercicio 14 <p>Realiza un programa que saque una carta aleatoria de una baraja con 4 palos y 13 cartas por cada palo. Los palos son Picas \u2660, Corazones \u2665, Diamantes \u2666 y Tr\u00e9boles \u2663. Las 13 cartas por cada palo ir\u00e1n del as al diez y adem\u00e1s tres figuras: jota, reina y rey. Mostrar la carta incluyendo el s\u00edmbolo del palo(\u2660,\u2665,\u2666,\u2663).</p>"},{"location":"bloque_i/tema_2/page-2/","title":"2 Bucles","text":""},{"location":"bloque_i/tema_2/page-2/#introduccion","title":"Introducci\u00f3n","text":"<p>En programaci\u00f3n, un bucle o instrucci\u00f3n de control repetitiva (o iterativa)  permite  ejecutar  una  o m\u00e1s  instrucciones  varias  veces,  es  decir,  permite  ejecutar  un  bloque  de  instrucciones repetidamente, escribi\u00e9ndolas una sola vez en el programa, reduciendo de este modo el c\u00f3digo del mismo. Cada vuelta que da el bucle se conoce como iteraci\u00f3n.</p> <p>Las variables que se utilizan en los bucles pueden tener distintas funciones:</p> <ul> <li>\u00edndice: es una variable que apunta a un recurso concreto. En los bucles, apunta al n\u00famero de iteraci\u00f3n. Se suelen utilizar por convenio los identificadores de variables i, j y k.</li> <li>contador: cuenta cu\u00e1ntas veces ocurre algo.</li> <li>acumulador: acumula operaciones parciales.</li> </ul> <p>Las instrucciones b\u00e1sicas que permiten construir este tipo de estructuras son while, do-while y for.</p>"},{"location":"bloque_i/tema_2/page-2/#bucle-while","title":"Bucle while","text":"<p>El bucle while agrupa instrucciones las cuales se ejecutan continuamente mientras una condici\u00f3n que se eval\u00faa sea verdadera. La condici\u00f3n se eval\u00faa antes de entrar dentro del while y cada vez que se termina de ejecutar las instrucciones del while.</p> <p>El programa se ejecuta siguiendo estos pasos:</p> <ol> <li>Se eval\u00faa la expresi\u00f3n l\u00f3gica.</li> <li>Si  la  expresi\u00f3n  es  verdadera  ejecuta  las  instrucciones,  sino  el  programa  abandona  la sentencia while.</li> <li>Tras ejecutar las instrucciones, volvemos al paso 1.</li> </ol> EstructuraEjemplo <pre><code>while(expresi\u00f3nL\u00f3gica){\n//instrucciones\n}\n</code></pre> <pre><code>import java.util.Random;\npublic class While1 {\npublic static void main(String[] args) {\nint number;\nRandom random = new Random();\n/*\n         * Se obtiene un n\u00famero aleatorio entre 1 y 500.\n         * Mientras dicho n\u00famero sea par, continuamos en el bucle while\n         */\nwhile ((number = random.nextInt(500)+1) % 2 == 0){\nSystem.out.println(number);\n}\n}\n}\n</code></pre> Ejercicio 1 <p>Dados dos n\u00fameros n1 y n2, tal que n1 &lt;= n2, mostrar los n\u00fameros pares comprendidos entre ellos ambos incluidos. Visualizar al final el n\u00famero total de pares encontrados. Hacer uso del bucle while.</p>"},{"location":"bloque_i/tema_2/page-2/#bucle-do-while","title":"Bucle do-while","text":"<p>La \u00fanica diferencia respecto al while est\u00e1 en que la expresi\u00f3n l\u00f3gica se eval\u00faa despu\u00e9s de haber ejecutado  las  instrucciones.  Es  decir,  el  bucle  al  menos  se  ejecuta  una  vez.  Los  pasos  son  los siguientes:</p> <ol> <li>Ejecutar instrucciones.</li> <li>Evaluar expresi\u00f3n l\u00f3gica.</li> <li>Si la expresi\u00f3n es verdadera, volver al paso 1. Si es falsa, salir del do-while.</li> </ol> <p>Ejemplo que muestra n\u00fameros aleatorios entre 1 y 500 hasta que salga uno m\u00faltiplo de 7:</p> EstructuraEjemploEjemplo 2Ejemplo 3Ejemplo 4 <pre><code>do{\n// instrucciones\n} while(expresi\u00f3nL\u00f3gica)\n</code></pre> <pre><code>import java.util.Random;\npublic class DoWhile1 {\npublic static void main(String[] args) {\nboolean exit = false;\nint number;\nRandom random = new Random();\ndo{\nnumber = random.nextInt(500) + 1; //(1)!\nSystem.out.println(number);\nexit = (number % 7 == 0); //(2)!\n} while (!exit); //(3)!\n}\n}\n</code></pre> <ol> <li>Se calcula un n\u00famero aleatorio entre 1 y 500</li> <li>exit se pone a true si el n\u00famero es m\u00faltiplo de 7</li> <li>Condici\u00f3n de repetici\u00f3n: que exit sea false</li> </ol> <p>Si le a\u00f1adimos al ejemplo anterior que solamente haya 5 posibilidades para encontrar el m\u00faltiplo de 7, eso significa que necesitamos una variable que apunte al n\u00famero de iteraci\u00f3n del bucle para poder controlar que solamente se ejecute 5 veces, es decir, necesitamos un \u00edndice:</p> <pre><code>import java.util.Random;\npublic class DoWhile2 {\npublic static void main(String[] args) {\nboolean exit = false;\nint number, i = 1; //(1)!\nRandom random = new Random();\ndo{\nnumber = random.nextInt(500) + 1;\nSystem.out.println(number);\nexit = (number % 7 == 0);\ni++;\n} while (!exit &amp;&amp; i &lt;= 5); //(2)!\nif(!exit){\nSystem.out.println(\"No se encontr\u00f3 el m\u00faltiplo de 7\");\n}\n}\n}\n</code></pre> <ol> <li>i es un \u00edndice porque apunta al n\u00famero de iteraci\u00f3n del bucle</li> <li>Mientras exit sea false y adem\u00e1s i sea menor o igual que 5</li> </ol> <p>El  bucle  do-while  se  utiliza  cuando  se  sabe  que  las  instrucciones  del  bucle  se  van  a  ejecutar  al menos  una  vez.  En  el  bucle  while  puede  ser  que  no  se  ejecuten  nunca  si  la  condici\u00f3n  es  falsa desde un principio. Las peticiones de usuario se realizan con bucles do-while, ya que la petici\u00f3n del  dato  al  usuario  siempre  se  realiza,  y  si  el  usuario  no  introduce  lo  que  le  hemos  pedido, entonces utilizamos el bucle para volv\u00e9rselo a pedir.</p> <pre><code>import java.util.Scanner;\npublic class DoWhile3 {\npublic static void main(String[] args) {\nScanner keyboard = new Scanner(System.in);\nint number;\ndo{\nSystem.out.print(\"Introduzca un n\u00famero del 1 al 5: \");\nnumber = keyboard.nextInt();\nSystem.out.printf(\"Has introducido un %d\\n\", number);\n}while (number &lt; 1 || number &gt; 5);\n}\n}\n</code></pre> <pre><code>import java.util.Scanner;\npublic class DoWhile4 {\npublic static void main(String[] args) {\nScanner keyboard = new Scanner(System.in);\nint number, counter = 0, sum = 0, index = 0;\n/*\n         * index: es un \u00edndice porque apunta al n\u00famero de iteraci\u00f3n del bucle\n         * counter: es un contador para contar el n\u00famero de pares\n         * sum: es un acumulador donde se acumula la suma de los n\u00fameros pares\n         */\ndo{\nSystem.out.print(\"Introduzca un n\u00famero \u00f3 0 para terminar: \");\nnumber = keyboard.nextInt();\nif(number != 0){\nindex++; // Se incrementa el n\u00famero de iteraciones del bucle\nSystem.out.printf(\"El n\u00famero introducido en la iteraci\u00f3n %d es %d\\n\", index, number);\nif(number % 2 == 0){ // si el n\u00famero es par\ncounter++; // Se incrementa el contador\nsum += number; // Se acumula la suma en el acumulador\n}\n}\n}while (number != 0);\nSystem.out.printf(\"En %d iteraciones se han introducido %d n\u00fameros pares cuya suma vale %d\", index, counter, sum);\n}\n}\n</code></pre> Ejercicio 2 <p>Dados dos n\u00fameros n1 y n2, tal que n1 &lt;= n2, mostrar los n\u00fameros pares comprendidos entre ellos ambos incluidos. Visualizar al final el n\u00famero total de pares encontrados. Hacer uso del bucle do-while.</p>"},{"location":"bloque_i/tema_2/page-2/#bucle-for","title":"Bucle for","text":"<p>El funcionamiento es el siguiente:</p> <ol> <li>Se ejecuta la instrucci\u00f3n de inicializaci\u00f3n.</li> <li>Se comprueba la condici\u00f3n.</li> <li>Si la condici\u00f3n es cierta, entonces se ejecutan las instrucciones. Si la condici\u00f3n es falsa, se abandona el bloque for.</li> <li>Tras ejecutar las instrucciones, se ejecuta la instrucci\u00f3n de incremento y se vuelve al paso</li> </ol> EstructuraEjemploEjemplo con While <pre><code>for(inicializaci\u00f3n;condici\u00f3n;incremento){\n// instrucciones\n}\n</code></pre> <p>Escribir n\u00fameros del 1 al 100:</p> <pre><code>public class For1 {\npublic static void main(String[] args) {\nint i;\nfor (i = 1; i &lt;= 100; i ++){ //(1)!\nSystem.out.println(i);\n}\n}\n}\n</code></pre> <ol> <li>i es un \u00edndice porque apunta al n\u00famero de iteraci\u00f3n del bucle</li> </ol> <p>Los bucles for tambi\u00e9n se pueden hacer con while o do-while pero los for tienen una sintaxis m\u00e1s abreviada. Veamos el ejemplo For1 hecho con un while:</p> <pre><code>public class While2 {\npublic static void main(String[] args) {\nint i = 1;\nwhile (i &lt;= 100){\nSystem.out.println(i);\ni++;\n}\n}\n}\n</code></pre> <p>Todos los bucles se pueden hacer con for, while y do-while, entonces, \u00bfcu\u00e1l se debe usar? Es importante que le programador utilice la estructura m\u00e1s adecuada en cada caso:</p> <ul> <li> <p>Un bucle for se utiliza cuando se conozca el n\u00famero de veces que se va a ejecutar el bucle, es decir, cuando se conozcan el n\u00famero de iteraciones de antemano.</p> </li> <li> <p>Si no se sabe de antemano el n\u00famero de iteraciones, entonces hay que utilizar while o do-while</p> <ul> <li>Un bucle do-while se utiliza cuando las instrucciones del bucle se van a ejecutar al menos una vez.</li> <li>Un bucle while se utiliza, entonces, cuando las instrucciones del bucle pueden no ejecutarse nunca si la condici\u00f3n es falsa desde un principio.</li> </ul> </li> </ul> <p>Tambi\u00e9n es posible declarar la variable dentro del propio bucle for, pero su \u00e1mbito de vida se reduce exclusivamente al bucle for, es decir, no se conoce fuera del for ya que muere en cuando el bucle se finalice.</p> <pre><code>public class For2 {\npublic static void main(String[] args) {\nfor (int i = 1; i &lt;= 100; i++) { //(1)!\nSystem.out.println(i);\n}\ni = 1; //(2)!\n}\n}\n</code></pre> <ol> <li>Se declara la variable i como int dentro del for</li> <li> Error de compilaci\u00f3n: <code>i cannot be resolved to a variable</code></li> </ol> <p>El bucle for tambi\u00e9n admite m\u00e1s de una variable, en cuyo caso, en las partes de inicializaci\u00f3n e incremento, se utiliza como separador la coma <code>,</code>:</p> <pre><code>public class For3 {\npublic static void main(String[] args) {\nfor(int i = 0, j = 10; i &lt;= j; i++, j--){\nSystem.out.printf(\"i: %d j: %d\\n\", i, j);\n}\n}\n}\n</code></pre> <p>CUIDADO</p> <p>En los IDEs, se puede seleccionar variables l\u00edneas de c\u00f3digos y se puede insertar f\u00e1cilmente en un if o en un bucle.</p> <p>Por motivos de legibilidad de c\u00f3digo, es muy importante que las variables del for aparezcan en las  3  partes  del  for,  es  decir,  en  la  inicializaci\u00f3n,  en  la  condici\u00f3n  y  en  el  incremento,  ya  que  el programador  que  quiera  saber  cu\u00e1ntas  iteraciones  realiza  el  bucle,  solamente  con  fijarse  en  la l\u00ednea de c\u00f3digo donde se encuentra el for, pueda saberlo. Si las variables del for no aparecen en las 3 partes, eso nos indica que es m\u00e1s conveniente realizar un while o un do-while.</p> <p>Veamos el ejemplo que muestra n\u00fameros aleatorios entre 1 y 500 hasta que salga uno m\u00faltiplo de 7:</p> <pre><code>import java.util.Random;\npublic class For4 {\npublic static void main(String[] args) {\nboolean exit = false;\nint number = 0, i;\nRandom random = new Random();\nfor(i = 1; !exit; i++){ // Este for no es legible, se debe sustituir por un do-while\nnumber = random.nextInt(500)+1;\nSystem.out.printf(\"Iteraci\u00f3n %d, n\u00famero: %d\\n\", i, number);\nexit = (number % 7 == 0);\n}\nSystem.out.printf(\"El m\u00faltiplo de 7 con valor %d se ha encontrado en la iteraci\u00f3n %d\", number, i - 1);\n}\n}\n</code></pre> <p>Si le a\u00f1adimos al ejemplo anterior que solamente haya 5 posibilidades para encontrar el m\u00faltiplo de 7:</p> <pre><code>import java.util.Random;\npublic class For5 {\npublic static void main(String[] args) {\nboolean exit = false;\nint number = 0, i;\nRandom random = new Random();\n/*\n         * Ahora el for s\u00ed es legible porque la variable i aparece en las 3 partes:\n         * en la inicializaci\u00f3n, en la condici\u00f3n y en el incremento\n         */\nfor(i = 1; i &lt;= 5 &amp;&amp; !exit; i++){\nnumber = random.nextInt(500) + 1;\nSystem.out.printf(\"Iteraci\u00f3n: %d, n\u00famero: %d\\n\", i, number);\nexit = (number % 7 == 0);\n}\nif(exit){\nSystem.out.printf(\"El m\u00faltiplo de 7 con valor de %d se ha encontrado en la iteraci\u00f3n %d\", number, i - 1);\n} else {\nSystem.out.println(\"El m\u00faltiplo de 7 no se ha encontrado\");\n}\n}\n}\n</code></pre> <p>Tambi\u00e9n  es  muy  importante  por  motivos  de  legibilidad  del  c\u00f3digo,  que  el  \u00fanico  sitio  donde  se modifiquen  los  valores  de  las  variables  del  for  sea  en  la  zona  del  incremento  ya  que  el programador que quiera saber cu\u00e1ntas iteraciones realiza el bucle, solamente con ver la l\u00ednea de c\u00f3digo del for, pueda saberlo. Por ejemplo, este c\u00f3digo no es adecuado ya que para salirse del bucle del for, se est\u00e1 modificando la variable i.</p> <pre><code>import java.util.Random;\npublic class For6 {\npublic static void main(String[] args) {\nint number = 0, i;\nRandom random = new Random();\nfor(i = 1; i &lt; = 5; i++){\nnumber = random.nextInt(500) + 1;\nSystem.out.printf(\"Iteraci\u00f3n %d, n\u00famero: %d\\n\", i, number);\nif(number % 7 == 0){\ni = 5; // No se pueden modificar las variables del for, solamente en el incremento\n}\n}\nif(number % 7 == 0){\nSystem.out.printf(\"El m\u00faltiplo de 7 encontrado vale %d\", number);\n} else {\nSystem.out.println(\"El m\u00faltiplo de 7 no se ha encontrado\");\n}\n}\n}\n</code></pre> Ejercicio 3 <p>Dados dos n\u00fameros n1 y n2, tal que n1 &lt;= n2, mostrar los n\u00fameros pares comprendidos entre ellos ambos incluidos. Visualizar al final el n\u00famero total de pares encontrados. Hacer uso del bucle for.</p>"},{"location":"bloque_i/tema_2/page-2/#bucle-for-each","title":"Bucle for-each","text":"<p>Una de las cosas que incorpor\u00f3 Java 5 fue el bucle for-each. Esta estructura nos permite recorrer una colecci\u00f3n o un array de elementos de una forma sencilla, evitando el uso de iteradores o de un bucle for normal.</p> <p>Tambi\u00e9n se usa el for-each para recorrer los valores de un enum. Para ello, se utiliza el m\u00e9todo values() de los enum que est\u00e1 impl\u00edcitamente declarado por el compilador:</p> EstructuraEjemplo <pre><code>for(TipoVariable variable : values){\n//instrucciones\n}\n</code></pre> <pre><code>public class ForEachEnum {\npublic enum DayOfWeek{\nMONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY\n}\npublic static void main(String[] args) {\nfor (DayOfWeek d : DayOfWeek.values()) {\nSystem.out.println(d);\n}\n}\n}\n</code></pre> Ejercicio 4 <p>Crea un enum con los meses del a\u00f1o, y haciendo uso de un bucle for-each, muestra aquellos meses de verano.</p>"},{"location":"bloque_i/tema_2/page-2/#ejercicios","title":"Ejercicios","text":"Ejercicio 5 <p>Haz un programa para simular 20 lanzamientos de un dado.</p> Ejercicio 6 <p>Genera 15 n\u00fameros aleatorios entre el rango de dos n\u00fameros solicitados al usuario.</p> Ejercicio 7 <p>Dados dos n\u00fameros enteros positivos, calcula su producto utilizando solo sumas.</p> Ejercicio 8 <p>Solic\u00edtale al usuario un n\u00famero entre 0 y 10 ambos incluidos:</p> <ul> <li>Si el usuario introduce un n\u00famero que no est\u00e9 dentro de ese rango, vuelve a ped\u00edrselo tantas veces como sea necesario, ese decir, hasta que introduzca un n\u00famero entre 0 y 10.</li> <li>Una vez obtenido el n\u00famero dentro de ese rango, muestra la tabla de multiplicar de dicho n\u00famero.</li> </ul> Ejercicio 9 <p>Realiza un programa que solicite al usuario un n\u00famero entero positivo n y dibuje un tri\u00e1ngulo de asteriscos. El tri\u00e1ngulo debe contener un asterisco en la primera l\u00ednea, dos en la segunda, etc.; es decir, en la fila en\u00e9sima deben aparecer n asteriscos. Ejemplo para n=5.</p> <pre><code>    *\n* *\n* * *\n* * * *\n* * * * *\n</code></pre> Ejercicio 10 <p>Realiza un programa que solicite al usuario un n\u00famero entero positivo n y dibuje un rombo de asteriscos. Por ejemplo, si n = 5 deber\u00eda dibujarse:</p> <pre><code>    *\n* *\n* * *\n* * * *\n* * * * *\n* * * *\n* * *\n* *\n*\n</code></pre> Ejercicio 11 <p>Realiza un programa que dibuje el tri\u00e1ngulo hasta un valor dado. El tri\u00e1ngulo contiene los n\u00fameros naturales correlativos, uno en la primera l\u00ednea, dos en la segunda, etc,; es decir, en la fila en\u00e9sima aparecen n valores. Ejemplo para n=5</p> <pre><code>        1\n1   2\n1   2   3\n1   2   3   4\n1   2   3   4   5\n</code></pre> Ejercicio 12 <p>Realiza un programa que dibuje una pir\u00e1mide de d\u00edgitos como la de la figura, pidiendo por teclado el n\u00famero de filas de la misma. Ejemplo para n = 5:</p> <pre><code>            1\n1  2  1\n1  2  3  2  1\n1  2  3  4  3  2  1\n1  2  3  4  5  4  3  2  1\n</code></pre> Ejercicio 13 <p>Crea un programa que dibuje un table de ajedrez.</p> Ejercicio 14 <p>Solic\u00edtale al usuario una casilla de un tablero de ajedrez. Dibuja el tablero de ajedrez con el alfil colocado en dicha casilla y marca con un color diferente en el tablero las casillas a las que puede mover dicho alfil.</p> Ejercicio 15 <p>Realiza un dibujo de una estrella de 6 puntas. Solic\u00edtale al usuario:</p> <ul> <li>La altura de las puntas, como m\u00ednimo 2.</li> <li>El color de la estrella: rojo o verde.</li> </ul> <p> Figura 1 - Salida del ejercicio 15 </p> Ejercicio 16 <p>Realiza un dibujo de un c\u00edrculo rojo con fondo amarillo. Solic\u00edtale al usuario el n\u00famero de l\u00edneas. </p> <p>Ejemplo con 13 l\u00edneas</p> <p> Figura 2 - Salida del ejercicio 16 </p> <p>Ejemplo con 21 l\u00edneas:</p> <p> Figura 3 - Salida del ejercicio 16 </p>"},{"location":"bloque_i/tema_2/page-3/","title":"3 Funciones","text":""},{"location":"bloque_i/tema_2/page-3/#introduccion","title":"Introducci\u00f3n","text":"<p>Una subrutina o subprograma, como idea general, se presenta como un subalgoritmo que forma parte del algoritmo principal, el cual permite resolver una tarea espec\u00edfica.</p> <p>Podemos distinguir tres t\u00e9rminos que poseen diferencias:</p> <ol> <li>Funci\u00f3n: conjunto de instrucciones que devuelven un resultado.</li> <li>Procedimiento: conjunto de instrucciones que se ejecutan sin devolver ning\u00fan resultado.</li> <li>M\u00e9todo: funci\u00f3n o procedimiento que pertenece a un objeto.</li> </ol> <p>Dichas  funciones  se  pueden  utilizar  desde  muchos  sitios  diferentes,  por  lo  que  de  manera general, no se suelen poner mensajes en consola en las funciones ya que puede ser que dichos mensajes no interesen en todos los sitios donde se utilice dicha funci\u00f3n. A no ser que la funci\u00f3n se haya creado espec\u00edficamente para dar mensajes informativos en consola.</p>"},{"location":"bloque_i/tema_2/page-3/#construccion","title":"Construcci\u00f3n","text":"<p>Una funci\u00f3n se construye de la siguiente manera:</p> <pre><code>modificador_acceso tipo_resultado nombre_funci\u00f3n (tipo_par\u00e1metro nombre_par\u00e1metro, ...){\n// instrucciones\nreturn expresi\u00f3n;\n}\n</code></pre> <ul> <li>modificador_acceso: es la visibilidad que posee la funci\u00f3n (Lo veremos m\u00e1s adelante. De momento, lo utilizaremos como public).</li> <li>tipo_resultado: es el tipo del resultado que devuelve la funci\u00f3n.</li> <li>nombre_funci\u00f3n:  es  el  nombre  que  identifica  a  la  funci\u00f3n.  Utiliza  la  notaci\u00f3n lowerCamelCase. Ejemplo: imprimirResultadoDecimal.</li> <li>tipo_par\u00e1metro  nombre_par\u00e1metro,  ...:  puede  ocurrir  que  la  funci\u00f3n  necesite  ciertos valores para efectuar la misi\u00f3n para la que ha sido creada. Por ejemplo, la funci\u00f3n suma necesitar\u00eda los valores que tiene que sumar. En este caso, se deben indicar cada uno de dichos  valores  con  sus  tipos  correspondientes.  A  estos  valores  se  les  conoce  como par\u00e1metros de la funci\u00f3n. Si la funci\u00f3n no necesita par\u00e1metros, entonces solamente se ponen los par\u00e9ntesis: <code>nombre_funci\u00f3n( )</code>.</li> </ul> <p>A todo esto se le conoce como firma (signature) de la funci\u00f3n:</p> <pre><code>modificador_acceso tipo_resultado nombre_funci\u00f3n (tipo_par\u00e1metro nombre_par\u00e1metro, ...)\n</code></pre> <ul> <li>instrucciones: instrucciones que conforman el algoritmo de la funci\u00f3n, para que realice la misi\u00f3n para la que ha sido creada.</li> <li>return expresi\u00f3n: con el return se termina la ejecuci\u00f3n de la funci\u00f3n y si va acompa\u00f1ado de una expresi\u00f3n, la funci\u00f3n devuelve como resultado el valor de dicha expresi\u00f3n. Dicho valor tiene que ser del tipo_resultado indicado en la firma de la funci\u00f3n.</li> </ul> <p>Ejemplo de la funci\u00f3n con dos par\u00e1metros:</p> <pre><code>public static int add(int sum1, int sum2){\nreturn sum1 + sum2;\n}\n</code></pre> <p>Puede ser tambi\u00e9n que haya m\u00e1s de un return. En ese caso, el flujo de ejecuci\u00f3n abandona la funci\u00f3n en cuanto ejecute el primer return. Ejemplo:</p> <pre><code>public static boolean isPair(int n){\nif(n % 2 == 0){\nreturn true;\n} else {\nreturn false;\n}\n}\n</code></pre> <p>En el caso de que estemos definiendo un procedimiento, no tendremos <code>return expresi\u00f3n</code> ya que no devuelve ning\u00fan resultado y el tipo_resultado es void. Como por ejemplo <code>System.put.println</code>, que escribe en pantalla lo que recibe por par\u00e1metro pero no devuelve nada.</p>"},{"location":"bloque_i/tema_2/page-3/#llamada-a-la-funcion","title":"Llamada a la funci\u00f3n","text":"<p>Una funci\u00f3n permite que reutilicemos un algoritmo ya que se puede utilizar cuando nos haga falta.  Para  ello,  solamente  tendremos  que  llamar  a  la  funci\u00f3n  por  su  nombre  y  pasarle  los par\u00e1metros en el mismo orden que se han definido y pertenecientes al mismo tipo de dato o compatible. En la llamada, dichos par\u00e1metros se llaman argumentos, es decir, los argumentos son los valores iniciales de los par\u00e1metros.</p> <pre><code>public class Functions1 {\npublic static void main(String[] args) {\nboolean pair;\nint result;\n/*\n         * Se llama a la funci\u00f3n isPair con un valor de 5 en el argumento, es decir,\n         * el valor inicial del par\u00e1metro n es 5:\n         */\npair = isPair(5);\nSystem.out.println(pair); // false\n/*\n         * Se lla a la funci\u00f3n isPair con un valor de 4 en el argumento, es decir,\n         * ahora el valor inicial del par\u00e1metro n es 4.\n         */\npair = isPair(4);\nSystem.out.println(pair); // true\n/*\n         * Se llama a la funci\u00f3n add con los valores 5 y 2 en los argumentos, es decir,\n         * los valores iniciales de los par\u00e1metros sum1 y sum2 son 5 y 2 respectivamente.\n         */\nresult = add(5,2);\nSystem.out.println(result); // 7\n}\npublic static int add(int sum1, int sum2){\nreturn sum1 + sum2;\n}\npublic static boolean isPair(int n){\nif(n % 2 == 0){\nreturn true;\n} else {\nreturn false;\n}\n}\n}\n</code></pre> Ejercicio 1 <p>Realiza una funci\u00f3n que reciba la base y el exponente y devuelva la potencia baseexponente sin utilizar Math.pow</p>"},{"location":"bloque_i/tema_2/page-3/#ambito-de-vida-de-los-parametros","title":"\u00c1mbito de vida de los par\u00e1metros","text":"<p>A nivel de visibilidad y de \u00e1mbito de vida, los par\u00e1metros funcionan como las variables locales (Ver tema 1.3 Variables y constantes 4. \u00c1mbito de vida de las variables), por lo tanto el \u00e1mbito de vida de los par\u00e1metros es el bloque donde han sido definidos, es decir, la propia funci\u00f3n. Cada vez  que  se  llame  a  la  funci\u00f3n,  los  par\u00e1metros  nacen,  se  ejecuta  la  funci\u00f3n  y  una  vez  que  la funci\u00f3n ha terminado de ejecutarse, los par\u00e1metros mueren.</p> <pre><code>public class Functions2 {\npublic static void main(String[] args) {\nboolean pair;\nint result;\npair = isPair(5); //(1)!\n//(2)!\nSystem.out.println(pair);\npair = isPair(4); //(3)!\n//(4)!\nSystem.out.println(pair);\nresult = add(5, 2); //(5)!\n//(6)!\nSystem.out.println(result);\n}\npublic static int add(int sum1, int sum2){ //(7)!\nreturn sum1 + sum2;\n} //(8)!\npublic static boolean isPair(int n){ //(9)!\nif(n % 2 == 0){\nreturn true;\n} else {\nreturn false;\n}\n} //(10)!\n}\n</code></pre> <ol> <li>Nace el par\u00e1metro n con el valor 5</li> <li>Aqu\u00ed n ya no existe porque la funci\u00f3n isPair ya ha terminado de ejecutarse</li> <li>Vuelve a nacer n pero esta vez con un valor de 4</li> <li>Aqu\u00ed n ya no existe porque la funci\u00f3n isPair ya ha terminado de ejecutarse</li> <li>Nacen los par\u00e1metros sum1 y sum2 con los valores 5 y 2 respectivamente</li> <li>Aqu\u00ed sum1 y sum2 ya no existen porque la funci\u00f3n add ha terminado de ejecutarse</li> <li>Comienzo del \u00e1mbito de vida de los par\u00e1metros sum1 y sum2</li> <li>Fin del \u00e1mbito de vida de los par\u00e1metros sum1 y sum2</li> <li>Comienzo del \u00e1mbito de vida del par\u00e1metro n</li> <li>Fin del \u00e1mbito de vida del par\u00e1metro n</li> </ol> Ejercicio 2 <p>Realiza una funci\u00f3n que reciba 3 par\u00e1metros: dos de tipo entero y uno de tipo car\u00e1cter. La funci\u00f3n deber\u00e1 sumar, restar, multiplicar o dividir los valores de los dos primeros par\u00e1metros dependiendo de la operaci\u00f3n indicada en el tercer par\u00e1metro, y devolver el resultado</p> Ejercicio 3 <p>Sobrecarga la funci\u00f3n del ejercicio anterior para que se pueda operar con enteros y con decimales. Haz un programa que utilice las dos funciones, con enteros y con decimales</p>"},{"location":"bloque_i/tema_2/page-3/#ejemplo-de-funcion-el-factorial-de-un-numero","title":"Ejemplo de funci\u00f3n: el factorial de un n\u00famero","text":"<p>El factorial de un entero positivo n, tambi\u00e9n indicado como n!, se define como el producto de todos los n\u00fameros enteros positivos desde 1 hasta n. Por ejemplo:</p> <p>5! = 1 x 2 x 3 x 4 x 5 = 120</p> <p>La  operaci\u00f3n  de  factorial  aparece  en  muchas  \u00e1reas  de  las  matem\u00e1ticas,  particularmente  en combinatoria  y  an\u00e1lisis  matem\u00e1tico.  De  manera  fundamental,  el  factorial  de  n  representa  el n\u00famero de formas distintas de ordenar n objetos distintos (elementos sin repetici\u00f3n). Este hecho ha sido conocido desde hace varios siglos, en el siglo XII, por los hind\u00faes.</p> <p>Veamos  c\u00f3mo  se  programar\u00eda  dicha  funci\u00f3n  factorial  y  las  llamadas  con  distintos  tipos  de argumentos:</p> <pre><code>import java.util.Scanner;\npublic class Factorial {\npublic static void main(String[] args) {\nScanner keyboard = new Scanner(System.in);\nint n, variable;\nSystem.out.println(\"Llamada a la funci\u00f3n con argumentos literales: \");\nSystem.out.printf(\"El factorial de 5 es %d\\n\", factorial(5));\nSystem.out.println(\"Llamada a la funci\u00f3n usando una variable como argumento: \");\nvariable = 5;\nSystem.out.printf(\"El factorial de %d es %d\\n\", variable, factorial(variable));\nSystem.out.println(\"Llamada a la funci\u00f3n usando una expresi\u00f3n como argumento: \");\nvariable = 3;\nSystem.out.printf(\"El factorial de %d es %d\\n\", variable + 2, factorial(variable + 2));\nSystem.out.println(\"Llamada a la funci\u00f3n con argumentos introducidos por el usuario: \");\ndo {\nSystem.out.println(\"Introduzca un n\u00famero entero positivo: \");\nn = keyboard.nextInt();\n} while (n &lt;= 0);\nSystem.out.printf(\"El factorial de %d es %d\", n, factorial(n));\n}\npublic static int factorial(int n) {\nint result = 1;\nfor (int i = 2; i &lt;= n; i++) {\nresult *= i;\n}\nreturn result;\n}\n}\n</code></pre> <p>El concepto del factorial se aplica a los n\u00fameros enteros positivos, pero como los int admiten n\u00fameros  negativos,  se  podr\u00eda  llamar  a  la  funci\u00f3n  con  un  n\u00famero  negativo  aunque  no  tenga sentido:</p> <pre><code>int result = factorial(-5); //(1)!\nSystem.out.println(\"El factorial de %d es %d\\n\", -5, result); //(2)!\n</code></pre> <ol> <li>No tiene mucho sentido porque el factorial se aplica a n\u00fameros positivos</li> <li>El factorial de -5 es 1</li> </ol> <p>Es decir, cuando programamos una funci\u00f3n, no podemos dar por hecho que el programador que la vaya a utilizar lo haga de manera adecuada con la l\u00f3gica que representa su funcionalidad. As\u00ed que  siempre  que  programemos  una  funci\u00f3n,  debemos  asegurarnos  que  va  a  funcionar correctamente para todos los valores posibles del par\u00e1metro. En nuestro caso, no podemos dar un  resultado  coherente  para  los  n\u00fameros  negativos  puesto  que  no  tiene  sentido matem\u00e1ticamente el factorial de un n\u00famero negativo, as\u00ed que lo m\u00e1s conveniente es lanzar un error cuando llamen a la funci\u00f3n con un n\u00famero negativo.</p> <pre><code>import java.util.Scanner;\npublic class Factorial {\npublic static void main(String[] args) {\nScanner keyboard = new Scanner(System.in);\nint n, variable;\nSystem.out.println(\"Llamada a la funci\u00f3n con argumentos literales: \");\nSystem.out.printf(\"El factorial de 5 es %d\\n\", factorial(5));\nSystem.out.println(\"Llamada a la funci\u00f3n usando una variable como argumento: \");\nvariable = 5;\nSystem.out.printf(\"El factorial de %d es %d\\n\", variable, factorial(variable));\nSystem.out.println(\"Llamada a la funci\u00f3n usando una expresi\u00f3n como argumento: \");\nvariable = 3;\nSystem.out.printf(\"El factorial de %d es %d\\n\", variable + 2, factorial(variable + 2));\nSystem.out.println(\"Llamada a la funci\u00f3n con argumentos introducidos por el usuario: \");\ndo {\nSystem.out.println(\"Introduzca un n\u00famero entero positivo: \");\nn = keyboard.nextInt();\n} while (n &lt;= 0);\nSystem.out.printf(\"El factorial de %d es %d\", n, factorial(n));\nSystem.out.println(\"Llamada a la funci\u00f3n con argumentos negativos\");\nvariable = - 5;\nSystem.out.printf(\"El factorial %d es %d\\n\", variable, factorial(variable));\n}\npublic static int factorial(int n) {\nint result = 1;\nif(n &lt; 0){\nthrow new IllegalArgumentException(\"El factorial se aplica a n\u00fameros positivos\");\n}\nfor (int i = 2; i &lt;= n; i++) {\nresult *= i;\n}\nreturn result;\n}\n}\n</code></pre> <p>Salida por consola:</p> <pre><code>Exception in thread \"main\" java.lang.IllegalArgumentException: El factorial se aplica a n\u00fameros positivos\nat tema2_3_Funciones.Factorial3.factorial(Factorial3.java:19)\nat tema2_3_Funciones.Factorial3.main(Factorial3.java:9)\n</code></pre> Ejercicio 4 <p>Realiza una funci\u00f3n que encuentre el primer valor N para el que la suma <code>1 + 2 + 3 + .. + N</code> exceda a un valor M que se introduce por par\u00e1metro. Es decir, si M vale:</p> <ul> <li>1: devuelve 2</li> <li>3: devuelve 3</li> <li>7: devuelve 4</li> <li>10: devuelve 5</li> <li>15: devuelve 6</li> </ul> Ejercicio 5 <p>El m\u00e1ximo com\u00fan divisor de dos enteros es el entero m\u00e1s grande que es divisor exacto de los dos n\u00fameros. Realiza una funci\u00f3n que devuelva el m\u00e1ximo com\u00fan divisor de dos enteros. Por ejemplo, 12 es el mcd de 36 y 60.</p>"},{"location":"bloque_i/tema_2/page-3/#ejemplo-de-procedimiento","title":"Ejemplo de Procedimiento","text":"<p>No tendremos  <code>return expresi\u00f3n</code>  ya que no devuelve ning\u00fan resultado y el <code>tipo_resultado</code> es void:</p> <pre><code>import java.util.Scanner;\nimport static examples.tema_01.Colors.GREEN;\nimport static examples.tema_01.Colors.RESET;\npublic class Procedure {\npublic static void main(String[] args) {\nScanner keyboard = new Scanner(System.in);\nString string;\nSystem.out.print(\"Introduce una cadena: \");\nstring = keyboard.nextLine();\npaintGreen(string);\n}\nprivate static void paintGreen(String string) {\nSystem.out.printf(\"La cadena que has introducido en verde: %s\", GREEN + string + RESET);\n}\n}\n</code></pre>"},{"location":"bloque_i/tema_2/page-3/#resultado-de-las-funciones","title":"Resultado de las funciones","text":"<p>En las llamadas a funciones, no hay que obligatoriamente utilizar el valor devuelto:</p> <pre><code>import java.util.Scanner;\nimport static examples.tema_01.Colors.GREEN;\nimport static examples.tema_01.Colors.RESET;\npublic class Result {\npublic static void main(String[] args) {\nScanner keyboard = new Scanner(System.in);\nString string, stringGreen;\nSystem.out.print(\"Introduce una cadena: \");\nstring = keyboard.nextLine();\n/*\n         * En la llamada a la funci\u00f3n turnGreen, no estamos utilizando el valor devuelto\n         */\nturnGreen(string);\n/*\n         * En la siguiente llamada, s\u00ed lo vamos a utilizar\n         */\nstringGreen = turnGreen(string);\nSystem.out.printf(\"La cadena %s convertida a verde: %s\", string, stringGreen);\n}\nprivate static String turnGreen(String string) {\nString result = String.format(\"%s\", GREEN + string + RESET);\nSystem.out.println(result);\nreturn result;\n}\n}\n</code></pre> Ejercicio 6 <p>Se dice que un n\u00famero entero es primo si s\u00f3lo es divisible entre 1 y entre s\u00ed mismo. Por ejemplo, 2, 3, 5 y 7 son primos, pero 4, 6, 8 y 9 no lo son.</p> <ol> <li>Realiza una funci\u00f3n que determine si un n\u00famero es primo o no.</li> <li>Realiza una funci\u00f3n que muestre todos los n\u00fameros primos comprendidos entre 1 y 10.000</li> <li>Realiza una funci\u00f3n que descomponga un n\u00famero en factores primos. Ejemplo:<ul> <li>18 = 2 x 3 x 3</li> <li>11 = 11</li> <li>35 = 5 x 7</li> <li>40 = 2 x 2 x 2 x 5</li> </ul> </li> </ol> Ejercicio 7 <p>Se dice que un n\u00famero entero es un n\u00famero perfecto si la suma de sus divisores propios (incluyendo el 1 y sin incluirse \u00e9l mismo) da como resultado el mismo n\u00famero. Por ejemplo, 6 es un n\u00famero perfecto, porque sus divisores propios son 1, 2 y 3; y 6 = 1 + 2 + 3. Los siguientes n\u00fameros perfectos son 28, 496 y 8128.</p> <ol> <li>Realiza una funci\u00f3n que determine si el par\u00e1metro es perfecto o no.</li> <li>Realiza una funci\u00f3n que dado un n\u00famero perfecto, imprima los divisores para confirmar que el n\u00famero es perfecto. Si no lo es, que no haga nada.</li> <li>Realiza una funci\u00f3n que muestre todos los n\u00fameros perfectos entre 1 y 10.000 con sus correspondientes factores.</li> </ol> Ejercicio 8 <p>La serie Fibonacci se define mediante: a0 = 0 a1 = 1 an = an-1 + an-2, es decir, la serie Fibonacci ser\u00eda la siguiente 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...</p> <ol> <li>Realiza una funci\u00f3n que devuelva el elemento en\u00e9simo de la serie Fibonacci. Es decir, si recibe:<ul> <li>0: devuelve 0</li> <li>1: devuelve 1</li> <li>4: devuelve 3</li> <li>7: devuelve 13</li> </ul> </li> <li>Realiza una funci\u00f3n que muestre los 30 primeros n\u00fameros de la serie de Fibonacci</li> <li>Realiza una funci\u00f3n que calcule el primer elemento de la serie Fibonacci que se mayor o igual que un valor introducido por par\u00e1metro. Por ejemplo, si recibe 20, devolver\u00e1 21, ya que es el primer elemento de la serie mayor o igual que 20.</li> </ol> Ejercicio 9 <p>Realiza una funci\u00f3n que reciba un n\u00famero entero positivo de n cifras y devuelva el n\u00famero con sus cifras en orden inverso. No utilizar String ni calcular previamente el n\u00famero de cifras. Ej: 24.321 debe devolver 12.345</p>"},{"location":"bloque_i/tema_2/page-3/#recursividad","title":"Recursividad","text":"<p>La recursividad es una t\u00e9cnica de escritura de funciones pensada para problemas complejos. La idea parte de que una funci\u00f3n pueda invocarse a s\u00ed misma.</p> <p>Esta t\u00e9cnica es peligrosa ya que se pueden generar f\u00e1cilmente llamadas infinitas (la funci\u00f3n se llama a s\u00ed misma, tras la llamada se vuelve a llamar a s\u00ed misma, y as\u00ed sucesivamente sin freno ni control).  Por  lo  tanto,  es  muy  importante  tener  en  cuenta  cu\u00e1ndo  la  funci\u00f3n  debe  dejar  de llamarse.</p> <p>Hay  que  ser  muy  cauteloso  cuando  se  utiliza  la  recursividad,  pero  permite  soluciones  muy originales y abre la posibilidad de solucionar problemas muy complejos.</p> <p>Veamos como ejemplo la versi\u00f3n recursiva del factorial:</p> <pre><code>import java.util.Scanner;\npublic class RecursiveFactorial {\npublic static void main(String[] args) {\nScanner keyboard = new Scanner(System.in);\nint n;\ndo{\nSystem.out.println(\"Introduce un n\u00famero entero positivo: \");\nn = keyboard.nextInt();\n} while (n &lt;= 0);\nSystem.out.printf(\"El factorial de %d es %d\\n\", factorial(n));\n}\nprivate static int factorial(int n) {\nint result;\nif(n == 1){ // Caso base: devuelve 1\nresult = 1;\n} else { // Caso recursivo\nresult = n * factorial(n-1);\n}\n/*\n         * Mensaje intermedio para comprobar\n         * como funciona\n         */\nSystem.out.printf(\"Factorial de %d  Resultado: %d\\n\", n, result);\nreturn result;\n}\n}\n</code></pre> <p>\u00bfRecursividad o iteraci\u00f3n? Hay otra versi\u00f3n del factorial resuelto mediante un bucle for (soluci\u00f3n iterativa) en lugar de utilizar la recursividad. La cuesti\u00f3n es \u00bfcu\u00e1l es mejor? Ambas implican sentencias repetitivas hasta llegar a una determinada condici\u00f3n, por lo que ambas pueden generar programas que no finalizan si la condici\u00f3n nunca se cumple. En el caso de la iteraci\u00f3n es una condici\u00f3n la que permite determinar el final, la recursividad lo que hace es ir simplificando el problema hasta generar una llamada a la funci\u00f3n que devuelva un valor y no se vuelva a llamar. Para un ordenador es m\u00e1s costosa la recursividad ya que implicar realizar muchas llamadas a funciones, es decir, es m\u00e1s r\u00e1pida la soluci\u00f3n iterativa. Entonces, \u00bfpor qu\u00e9 elegir recursividad? La recursividad se utiliza s\u00f3lo s\u00ed:</p> <ul> <li>No encontramos la soluci\u00f3n iterativa a un problema.</li> <li>El c\u00f3digo es mucho m\u00e1s claro en su versi\u00f3n recursiva.</li> </ul> Ejercicio 10 <p>Realiza el ejercicio 1, haciendo uso de la recursividad</p> Ejercicio 11 <p>El m\u00e1ximo com\u00fan divisor de los enteros a y b es el entero m\u00e1s grande que es divisor exacto de a y de b. Escribe una funci\u00f3n recursiva llamada gcd que devuelva el m\u00e1ximo com\u00fan divisor de a y b. El m\u00e1ximo com\u00fan divisor de a y b se define recursivamente como sigue:</p> <ul> <li>si b = 0 \u2192 gcd(a, b) = a</li> <li>si b \u2260 0 \u2192 gcd(a, b) = gcd(b, a % b)</li> </ul> Ejercicio 12 <p>Realiza el ejercicio 4 haciendo uso de la recursividad</p> Ejercicio 13 <p>Realiza el ejercicio 8 haciendo uso de la recursividad</p>"},{"location":"bloque_i/tema_2/page-3/#la-pila","title":"La pila","text":"<p>Una pila(stack) es una lista ordenada o estructura de datos que permite almacenar y recuperar datos, el modo de acceso a sus elementos es de tipo LIFO (del ingl\u00e9s Last In, First Out, \u00faltimo en entrar,  primero  en  salir) de  supuestos  en  el  \u00e1rea  de inform\u00e1tica debido a su simplicidad y capacidad de dar respuesta a numerosos procesos.</p> <p>Para el manejo de los datos cuenta con dos operaciones b\u00e1sicas: apilar (push), que coloca un objeto en la pila, y su operaci\u00f3n inversa, desapilar (pop), que retira el \u00faltimo elemento apilado.</p> <p>En cada momento s\u00f3lo se tiene acceso a la parte superior de la pila, es decir, al \u00faltimo objeto apilado  (denominado  TOS,  Top of Stack).  La  operaci\u00f3n  desapilar  permite  la  obtenci\u00f3n  de  este elemento, que es retirado de la pila permitiendo el acceso al anterior (apilado con anterioridad), que pasa a ser el \u00faltimo, el nuevo TOS.</p> <p>Para las llamadas entre funciones, se utiliza una estructura de tipo pila: supongamos que se est\u00e1 procesando  una  funci\u00f3n  y  en  su  interior  llama  a  otra  funci\u00f3n.  La  funci\u00f3n  se  abandona  para procesar la funci\u00f3n de la llamada, pero antes se almacena en una pila la direcci\u00f3n que apunta a la funci\u00f3n. Ahora supongamos que esa nueva funci\u00f3n llama a su vez a otra funci\u00f3n. Igualmente, se almacena su direcci\u00f3n, se abandona y se atiende la petici\u00f3n. As\u00ed en tantos casos como existan peticiones.  La  ventaja  de  la  pila  es  que  no  requiere  definir  ninguna  estructura  de  control  ni conocer las veces que el programa estar\u00e1 saltando entre funciones para despu\u00e9s retomarlas, con la \u00fanica limitaci\u00f3n de la capacidad de almacenamiento de la pila. Conforme se van cerrando las funciones, se van rescatando las funciones precedentes mediante sus direcciones almacenadas en la pila y se va concluyendo su proceso, esto hasta llegar a la primera.</p> <p>En el caso de una funci\u00f3n recursiva, esto es posible implementarlo con sencillez mediante una pila. La funci\u00f3n se llama a s\u00ed misma tantas veces como sea necesario hasta que el resultado de la funci\u00f3n cumpla la condici\u00f3n de retorno; entonces, todas las funciones abiertas van completando su proceso en cascada. No se necesita saber cuantas veces se anidar\u00e1 y, por tanto, tampoco cuando  se  cumplir\u00e1  la  condici\u00f3n,  con  la  \u00fanica  limitaci\u00f3n  de  la  capacidad  de  la  pila.  De sobrepasarse ese l\u00edmite, normalmente porque se entra en un bucle sin final, se produce el error de desbordamiento de la pila (stack overflow).</p> Ejercicio 15 <p>Realiza una funci\u00f3n recursiva que invierta los caracteres de una cadena. Por ejemplo, si la funci\u00f3n recibe \"Hola a todos\", devuelve \"sodot a aloH\".</p> Ejercicio 14 <p>Realiza  un  programa  para  resolver  el  juego  de  las  Torres de Hanoi.  El  juego  consiste  en  tres  varillas verticales. En una de las varillas se apila un n\u00famero indeterminado de discos. Los discos se apilan sobre una varilla en tama\u00f1o decreciente. No hay dos discos iguales, y todos ellos est\u00e1n apilados de mayor a menor radio en una de las varillas, quedando las otras dos varillas vacantes. El juego consiste en pasar todos los discos de la varilla ocupada a una de las otras varillas vacantes. Para realizar este objetivo, es necesario seguir estas simples reglas:</p> <ul> <li>Solo se puede mover un disco cada vez.</li> <li>Un disco de mayor tama\u00f1o no puede descansar sobre uno m\u00e1s peque\u00f1o que \u00e9l mismo.</li> <li>Solo puedes desplazar el disco que se encuentre arriba en cada varilla.</li> </ul> <p>El movimiento de n discos se puede visualizar en t\u00e9rminos de mover s\u00f3lo n-1 discos (y de ah\u00ed la recursividad) como sigue:</p> <ol> <li>Pasar n-1 discos de la varilla 1 a la 2, usando la varilla 3 como \u00e1rea de retenci\u00f3n temporal.</li> <li>Pasar el \u00faltimo disco (el m\u00e1s grande) de la varilla 1 a la 3.</li> <li>Pasar los n-1 discos de la varilla 2 a la 3, empleando la varilla 1 como \u00e1rea de retenci\u00f3n temporal.</li> </ol> <p>El  proceso  termina  cuando  la  \u00faltima  tarea  implica  pasar  n=1  disco,  esto  es,  el  caso  base.  Esto  se  logra transfiriendo  el  disco  sin  necesidad  de  un  \u00e1rea  de  retenci\u00f3n  temporal.  Escribe  una  funci\u00f3n  recursiva  con cuatro par\u00e1metros:</p> <ol> <li>El n\u00famero de discos por transferir.</li> <li>La varilla en la que est\u00e1n colocados inicialmente esos discos.</li> <li>La varilla a la que debe pasarse esa pila de discos.</li> <li>La varilla que se usar\u00e1 como \u00e1rea de retenci\u00f3n temporal.</li> </ol> <p>El programa deber\u00e1 imprimir las instrucciones precisas requeridas para pasar los discos de la varilla inicial a  la varilla de destino. Por ejemplo, para pasar una pila de tres discos de la varilla 1 a la varilla 3, el programa deber\u00e1 imprimir la siguiente serie de movimientos:</p> <pre><code>1 \u2192 3\n1 \u2192 2\n3 \u2192 2\n1 \u2192 3\n2 \u2192 1\n2 \u2192 3\n1 \u2192 3\n</code></pre>"},{"location":"bloque_i/tema_2/page-4/","title":"Proyecto","text":"<p>Se desea realizar un proyecto Java en el cu\u00e1l se le mostrar\u00e1 al usuario un men\u00fa d\u00f3nde se le solicitar\u00e1 una de las siguiente figuras, teniendo en cuenta que cada vez que acceda a una de ellas, se les solicitar\u00e1 los datos pertinentes para el calculo de su \u00e1rea. Las figuras son las siguientes:</p> <ol> <li>Tri\u00e1ngulo (solicitar base y altura)</li> <li>Cuadrado (solicitar lado)</li> <li>Rect\u00e1ngulo (solicitar base y altura)</li> <li>Rombo (solicitar diagonal mayor y menor)</li> <li>Romboide (solicitar base y altura)</li> <li>Trapecio (solicitar base mayor, base menor y altura)</li> <li>C\u00edrculo (solicitar di\u00e1metro)</li> </ol> <p>Una vez realizado el \u00e1rea se deber\u00e1 comprobar sin hacer uso del resto de la divisi\u00f3n si el \u00e1rea (solo la parte entera) es m\u00faltiplo de 3 y de 9.</p> <p>Adem\u00e1s se le dar\u00e1 una opci\u00f3n al usuario para salir del men\u00fa, ya que aunque el usuario elija una opci\u00f3n se le volver\u00e1 a mostrar el men\u00fa de opciones una vez finalizada la operaci\u00f3n.</p> <p>Para realizar el proyecto se tendr\u00e1 en cuenta los siguientes objeciones:</p> <ol> <li>Se crear\u00e1 un proyecto nuevo cuyo nombre sea el siguiente formato pr02java-NOMBRE-geometria siendo NOMBRE el nombre del alumno.</li> <li>Se declarar\u00e1 aquellas variables que sean necesarias inicializ\u00e1ndolas si es necesario, indicando el tipo correspondiente.</li> <li>Se har\u00e1 uso de funciones y procedimientos donde sea oportuno.</li> <li>Se har\u00e1 uso de la recursividad donde sea necesario.</li> <li>La entrega de este proyecto se realizar\u00e1 a trav\u00e9s de un enlace a un repositorio de GitHub, realizando siempre m\u00e1s de un commit.</li> <li>Se valorar\u00e1 la limpieza, la claridad, y la estructura del proyecto.</li> </ol>"},{"location":"bloque_i/tema_3/page-1/","title":"1 Cadenas","text":""},{"location":"bloque_i/tema_3/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>El texto es uno de los tipos de datos m\u00e1s importantes y por ello java lo trata de manera especial. Las cadenas deben manejarse creando objetos de tipo String. Se pueden inicializar de dos maneras:</p> <ul> <li>Usando el operador asignaci\u00f3n como los primitivos: <code>String s = \"hola\"</code></li> <li>Usando el constructor como los objetos: <code>String s = new String(\"hola\");</code></li> </ul> <p>Los literales cadena se escriben entre comillas dobles: <code>\"Esto es un literal cadena\"</code>.</p> <p>En Java existe tambi\u00e9n la cadena vac\u00eda o nula(\"\"), es decir, una cadena sin ning\u00fan car\u00e1cter.</p> <p>Ejemplo: <code>String s = \"\";</code> A la variable s se le est\u00e1 asignando la cadena vac\u00eda o nula.</p>"},{"location":"bloque_i/tema_3/page-1/#inmutabulidad","title":"Inmutabulidad","text":"<p>Uno  de  los  conceptos  que  suele  venir  asociado  a  la  programaci\u00f3n  funcional  es  el  de  la inmutabilidad.  Si  bien  es  cierto  que  la  inmutabilidad  es  una  idea  que  no  es  exclusiva  de  la programaci\u00f3n  funcional,  s\u00ed  que  cobra  una  importancia  vital  en  este  tipo  de  lenguajes.  La programaci\u00f3n funcional se asienta sobre muchos conceptos matem\u00e1ticos que requieren de la inmutabilidad para seguir siendo v\u00e1lidos. A\u00fan as\u00ed, es un concepto que es interesante conocer independientemente del tipo de paradigma de programaci\u00f3n que se utilice.</p>"},{"location":"bloque_i/tema_3/page-1/#que-es-la-inmutabilidad","title":"\u00bfQu\u00e9 es la inmutabilidad?","text":"<p>La idea es muy sencilla de entender: algo es inmutable cuando no se puede modificar. En el contexto de la programaci\u00f3n, una variable es inmutable cuando su valor no se puede modificar. Y un objeto lo es cuando su estado no puede ser actualizado tras la creaci\u00f3n del objeto. Es por tanto una forma de asegurar que los objetos no se modifican en lugares inesperados afectando con ello la ejecuci\u00f3n de nuestro programa.</p> <p>La inmutabilidad genera muchas ventajas en las aplicaciones multihilo, donde la inmutabilidad simplifica mucho el tratamiento de la concurrencia. Si algo no se puede modificar, da igual que se acceda a ello desde distintos hilos a la vez, as\u00ed como el orden en que se haga.</p> <p>La inmutabilidad hace que el c\u00f3digo sea mucho m\u00e1s predecible y m\u00e1s f\u00e1cil de testear, porque se acota mucho m\u00e1s los lugares donde se producen modificaciones de estado.</p> <p>La inmutabilidad tiene el sobrecoste de la generaci\u00f3n de objetos nuevos cada vez que cambia el estado, as\u00ed que esto puede penalizar bastante en el rendimiento. As\u00ed como gu\u00eda muy general, es recomendable usar objetos mutables en cualquier situaci\u00f3n que requiera de un estado que se modifica a menudo y/o la duplicaci\u00f3n de ese estado sea costosa.</p> <p>La inmutabilidad, por el contrario, presenta ventajas en las siguientes situaciones:</p> <ul> <li>En objetos que no vayan a requerir modificaciones de estado.</li> <li>En objetos que sean simples de duplicar.</li> <li>En situaciones de concurrencia.</li> </ul> <p>As\u00ed que hay que hacer inmutable todo el c\u00f3digo que sea posible ya que es un concepto muy potente que nos puede ayudar a simplificar la complejidad de comprensi\u00f3n de nuestro c\u00f3digo y, por tanto, a disminuir las probabilidades de que se produzcan errores inesperados.</p> <p>En java, los objetos String son inmutables.</p>"},{"location":"bloque_i/tema_3/page-1/#formatos-de-codificacion-de-caracteres","title":"Formatos de codificaci\u00f3n de caracteres","text":"<p>En  el  Unicode,  el  Plano  Multiling\u00fce  B\u00e1sico  (Basic  Multilingual  Plane,  BMP)  incluye  los  65.536 caracteres  cuyos  c\u00f3digos  van  desde  U+0000  a  U+FFFF,  que  son  la  mayor\u00eda  de  los  caracteres utilizados m\u00e1s frecuentemente.</p> <p>El n\u00famero 65.536 es 2 elevado a 16, es decir, la cantidad m\u00e1xima de combinaciones de bits que se pueden obtener en dos bytes.</p> <p>El resto de caracteres se denominan caracteres complementarios.</p> <p>Los formatos de codificaci\u00f3n que se pueden usar con Unicode se denominan UTF-8, UTF-16 y UTF-32:</p> <p>UTF-8  utiliza  1  byte  para  representar  caracteres  ASCII,  dos  bytes  para  caracteres  en  otros bloques alfab\u00e9ticos y tres bytes para el resto del BMP. Para los caracteres complementarios se utilizan 4 bytes.</p> <p>UTF-16  utiliza  2  bytes  para  cualquier  car\u00e1cter  en  el  BMP  y  4  bytes  para  los  caracteres complementarios.</p> <p>UTF-32 emplea 4 bytes para todos los caracteres.</p> <p> Figura 1 - Encodings</p> <p>En Java, las cadenas utilizan el formato de codificaci\u00f3n UTF-16.</p>"},{"location":"bloque_i/tema_3/page-1/#formateo-de-cadenas","title":"Formateo de cadenas","text":"<p>Hay un m\u00e9todo est\u00e1tico en la clase String que sirve para construir una cadena con cierto formato. Funciona de la misma manera que el m\u00e9todo <code>printf</code> que vimos en el tema 1.12. Escritura en pantalla.</p> <pre><code>public class StringFormat {\npublic static void main(String[] args) {\nString formattedString;\nformattedString = String.format(\"Nombre: %s Edad: %d Sueldo: %.2f\", \"Juan\", 20, 1896.23);\nSystem.out.println(formattedString);\n}\n}\n</code></pre>"},{"location":"bloque_i/tema_3/page-1/#metodos-de-la-clase-string","title":"M\u00e9todos de la clase String","text":"<p>Si observamos en la API la clase String, incluye m\u00e9todos para examinar los caracteres individuales de una cadena, para comparar cadenas, para buscar cadenas, para extraer subcadenas, para convertir cadenas a may\u00fasculas o min\u00fasculas, etc.</p> <p>Como vimos en el Tema 1.5 - Operadores, el operador concatenaci\u00f3n <code>+</code> es un operador binario que devuelve una cadena resultado para concatenar las dos cadenas que act\u00faan como operandos. Si s\u00f3lo uno de los operandos es de tipo cadena, el otro operando se convierte impl\u00edcitamente en tipo cadena.</p> <p>Obs\u00e9rvese en la API en el m\u00e9todo valueOf, es est\u00e1tico y est\u00e1 sobrecargado. Sirve para obtener la representaci\u00f3n String de un valor u objeto.</p> <pre><code>public class StringConcatPlus {\npublic static void main(String[] args) {\nint i = 100;\nString string1, string2, string3, string4;\nstring1 = \"Esto es un literal cadena\"; //(1)!\nSystem.out.println(string1);\nSystem.out.println(string1 + \" al cual le hemos concatenado este literal cadena\"); //(2)!\nstring2 = \"hola\";\nstring3 = \" que tal\";\nstring4 = string2 + string3;\nSystem.out.println(string4);\nSystem.out.println(i + 100);\nSystem.out.println(String.valueOf(i) + 100);\n}\n}\n</code></pre> <ol> <li>Se le da un valor inicial con el operador asignaci\u00f3n</li> <li>Se concatena otra cadena con el operador +</li> </ol> <p>Otros m\u00e9todos de las cadenas muy \u00fatiles son:</p> <ul> <li>charAt: devuelve el car\u00e1cter de la cadena del especificado \u00edndice. Dicho \u00edndice empieza en cero, es decir, con el cero se obtiene el primer car\u00e1cter de la cadena.</li> <li>length: devuelve la longitud de la cadena.</li> <li>equals: compara si dos cadenas son iguales. Las cadenas se comparan con equals como los objetos y los primitivos se comparan con <code>==</code>.</li> <li>equalsIgnoreCase: hace lo mismo que el anterior pero no tiene en cuenta las may\u00fasculas y min\u00fasculas.</li> </ul> <pre><code>public class StringMethods {\npublic static void main(String[] args) {\nString string = \"hola\";\nSystem.out.println(string.charAt(0));//h\nSystem.out.println(string.charAt(1));//o\nSystem.out.println(string.charAt(2));//l\nSystem.out.println(string.charAt(3));//a\nSystem.out.println(string.length());//4\nSystem.out.println(string.equals(\"hola\"));//true\nSystem.out.println(string.equals(\"Hola\"));//false\nSystem.out.println(string.equals(\"adi\u00f3s\"));//false\nSystem.out.println(string.equalsIgnoreCase(\"Hola\"));//true\nSystem.out.println(string.equalsIgnoreCase(\"HOLA\"));//true\n//Tambi\u00e9n se le pueden aplicar m\u00e9todos a un literal cadena:\nSystem.out.println(\"hola\".equals(\"hola\")); //true\nSystem.out.println(\"adios\".equals(\"hola\"));//false\n}\n}\n</code></pre> <p>M\u00e1s m\u00e9todos de cadenas interesantes:</p> <ul> <li>compareTo: compara dos cadenas lexicogr\u00e1ficamente. La comparaci\u00f3n se basa en el valor Unicode de cada car\u00e1cter de las cadenas. <code>s1.compareTo(s2)</code> devuelve un n\u00famero negativo si s1 es menor, un n\u00famero positivo si s1 es mayor o cero si son iguales.</li> <li>compareToIgnoreCase: hace lo mismo que el anterior pero no tiene en cuenta may\u00fasculas y min\u00fasculas.</li> <li>concat: se utiliza para concatenar cadenas, como el operador <code>+</code>.</li> <li>endsWith: devuelve true si la cadena termina con un determinado texto.</li> <li>startsWith: devuelve true si la cadena empieza con un determinado texto.</li> <li>indexOf: devuelve la primera posici\u00f3n en la que aparece un determinado texto en la cadena. En el caso de que el texto buscado no se encuentre, devuelve -1. Este m\u00e9todo est\u00e1 sobrecargado para que el texto a buscar pueda ser char o String.</li> <li>lastIndexOf: es como el anterior pero busca desde el final.</li> <li>isEmpty: devuelve true si la cadena est\u00e1 vac\u00eda, es decir, si su longitud es cero.</li> <li>repeat: devuelve una cadena cuyo valor es la concatenaci\u00f3n de la cadena repetida varias veces.</li> <li>replace: reemplaza todas las apariciones de un texto por otro texto. Este m\u00e9todo est\u00e1 sobrecargado para que el texto pueda ser char o String.</li> <li>substring: obtiene una subcadena.</li> <li>toLowerCase: devuelve la cadena en min\u00fasculas.</li> <li>toUpperCase: devuelve la cadena en may\u00fasculas.</li> <li>trim: elimina los espacios en blanco del principio y del final de la cadena.</li> </ul> <pre><code>public class StringOtherMethods {\npublic static void main(String[] args) {\nString string1 = \"hola\", string2 = \"adios\", string3 = \"Hola\", string4;\n//hola es mayor que adios\nSystem.out.println(string1.compareTo(string2) &gt; 0 ? String.format(\"%s es mayor que %s\", string1, string2)\n: String.format(\"%s es menor que %s\", string1, string2));\n//adios es menor que hola\nSystem.out.println(string2.compareTo(string1) &gt; 0 ? String.format(\"%s es mayor que %s\", string2, string1)\n: String.format(\"%s es menor que %s\", string2, string1));\n//En el Unicode, las may\u00fasculas est\u00e1n antes: Hola es menor que adios\nSystem.out.println(string3.compareTo(string2) &gt; 0 ? String.format(\"%s es mayor que %s\", string3, string2)\n: String.format(\"%s es menor que %s\", string3, string2));\n//Hola es mayor que adios si no tenemos en cuenta las may\u00fasculas y min\u00fasculas\nSystem.out.println(string3.compareToIgnoreCase(string2) &gt; 0\n? String.format(\"%s es mayor que %s si no tenemos en cuenta las may\u00fasculas y min\u00fasculas\", string3, string2)\n: String.format(\"%s es menor que %s si no tenemos en cuenta las may\u00fasculas y min\u00fasculas\", string3, string2));\nSystem.out.println(string4 = string1.concat(\" que tal\"));//string4=\"hola que tal\"\nSystem.out.println(string4.endsWith(\"tal\"));//true\nSystem.out.println(string4.endsWith(\"hola\"));//false\nSystem.out.println(string4.startsWith(\"hola\"));//true\nSystem.out.println(string4.startsWith(\"tal\"));//false\nSystem.out.println(string4.indexOf(\"hola\"));//0\nSystem.out.println(string4.indexOf(\"tal\"));//9\nSystem.out.println(string4.indexOf(\"que\"));//5\nSystem.out.println(string4.indexOf(string2));//-1\nSystem.out.println(string4.indexOf(string3));//-1\nSystem.out.println(string4.indexOf('a'));//3\nSystem.out.println(\"hola que tal hola que tal\".lastIndexOf(\"tal\"));//22\nSystem.out.println(string4.isEmpty());//false\nSystem.out.println(\"\".isEmpty());//true\nSystem.out.println(\"ole \".repeat(6));//ole ole ole ole ole ole \nSystem.out.println(string4.replace('a', '*'));//hol* que t*l\nSystem.out.println(\"hola que tal hola que tal\".replace(\"hola\",\n\"buenas\"));//buenas que tal buenas que tal\n//Para hacer desaparecer partes de una cadena, se reemplazan por cadena vac\u00eda\nSystem.out.println(\"hola que tal hola que tal\".replace(\" \",\"\"));//holaquetalholaquetal\nSystem.out.println(string4.substring(9));//tal\nSystem.out.println(string4.substring(5, 8));//que\nSystem.out.println(\"HOLA QUE TAL\".toLowerCase());//hola que tal\nSystem.out.println(\"hola que tal\".toUpperCase());//HOLA QUE TAL\nSystem.out.println(\"       Hola que tal      \".trim());//Hola que tal\n}\n}\n</code></pre>"},{"location":"bloque_i/tema_3/page-1/#ejercicios","title":"Ejercicios","text":"Ejercicio 1 <p>Realiza una funci\u00f3n que reciba una cadena y devuelva el n\u00famero de vocales que tiene.</p> Ejercicio 2 <p>Realiza una funci\u00f3n que reciba una cadena y devuelva otra cadena igual pero sin espacios en blanco. No se pueden utilizar m\u00e9todos replace.</p> Ejercicio 3 <p>Realiza una funci\u00f3n que reciba una cadena y un car\u00e1cter y devuelva otra cadena igual pero con todas las apariciones del car\u00e1cter reemplazadas por un asterisco. No se pueden utilizar m\u00e9todos replace.</p> Ejercicio 4 <p>Realiza una funci\u00f3n que reciba una cadena y un car\u00e1cter y devuelva el n\u00famero de apariciones del car\u00e1cter en la cadena. No se pueden utilizar los m\u00e9todos indexOf ni contains.</p> Ejercicio 5 <p>Realiza una funci\u00f3n que reciba una cadena y un car\u00e1cter y devuelva el n\u00famero de caracteres que hay entre la primera y la \u00faltima aparici\u00f3n del car\u00e1cter en la cadena. No se pueden utilizar los m\u00e9todos indexOf ni contains.</p> Ejercicio 6 <p>Realiza una funci\u00f3n que reciba dos cadenas y devuelva la concatenaci\u00f3n de ambas. El m\u00e9todo concat o el operador + solamente se pueden utilizar a nivel de car\u00e1cter.</p> Ejercicio 7 <p>Realiza una funci\u00f3n que reciba una cadena y un n\u00famero y devuelva otra cadena con los primeros caracteres de cadena, tantos como indique el par\u00e1metro. No se puede utilizar el m\u00e9todo substring. Por ejemplo, si recibe \"Programaci\u00f3n\" y 5, devuelve \"Progr\".</p> Ejercicio 8 <p>Realiza una funci\u00f3n que reciba una cadena y un n\u00famero y devuelva otra cadena con los \u00faltimos caracteres de la cadena, tantos como indique, el par\u00e1metro. No se puede utilizar el m\u00e9todo substring. Por ejemplo, si recibe \"Programaci\u00f3n\" y 5, devuelve \"aci\u00f3n\".</p> Ejercicio 9 <p>Realiza una funci\u00f3n que reciba una cadena y devuelva otra cadena con los caracteres en orden inverso. Por ejemplo, si recibe \"hola\", devuelve \"aloh\".</p> Ejercicio 10 <p>Realiza una funci\u00f3n que reciba una cadena y devuelva la suma de todos los d\u00edgitos que hay en ella. Por ejemplo, si recibe \"abc12de3f4gh\", devuelve 10.</p> Ejercicio 11 <p>Realiza una funci\u00f3n que reciba dos cadenas y devuelva el n\u00famero de apariciones de una de ellas en la otra. No se pueden utilizar los m\u00e9todos indexOf, contains ni substring. Hacer las comparaciones a nivel de car\u00e1cter. Por ejemplo, si recibe \"Estoy matriculado en Programaci\u00f3n, en Entornos y en Marcas\" y \"en\", devuelve 3. Si recibe \"hola que tal, hola que pasa, hola\" y \"hola\", devuelve 3.</p> Ejercicio 12 <p>Realiza  una  funci\u00f3n  que  reciba  una  cadena  y  devuelva  el  n\u00famero  de  palabras  que  tiene.  Hacer  las comparaciones a nivel de car\u00e1cter. No se pueden utilizar m\u00e9todos replace, indexOf ni trim. Las palabras dentro de la cadena est\u00e1n separadas por un espacio. Por ejemplo, si recibe \"Estoy matriculado en Programaci\u00f3n en Entornos y en Marcas\", devuelve 9. Si recibe \" Estoy matriculado en Programaci\u00f3n en Entornos y en Marcas \", es decir, con un espacio al principio y otro al final, devuelve 9.</p> Ejercicio 13 <p>Realiza  una  funci\u00f3n  que  reciba  una  cadena  y  devuelva  el  n\u00famero  de  palabras  que  tiene.  Hacer  las comparaciones a nivel de car\u00e1cter. No se pueden utilizar m\u00e9todos replace ni indexOf. Las palabras dentro de la cadena pueden estar separadas por m\u00e1s de un espacio. No se pueden eliminar los espacios de la cadena. Por ejemplo, si recibe \"Estoy         matriculado      en        Programaci\u00f3n       en         Entornos         y        en           Marcas\", devuelve 9.</p>"},{"location":"bloque_i/tema_3/page-2/","title":"2 StringBuilder y StringBuffer","text":""},{"location":"bloque_i/tema_3/page-2/#introduccion","title":"Introducci\u00f3n","text":"<p>Como se ha dicho en el apartado anterior, las cadenas son objetos constantes e inmutables, es decir, una vez que son creadas no pueden ser modificadas. Por ejemplo:</p> <pre><code>String s = \"hello\";\ns += \" world\";\nSystem.out.println(s); // Hello world\n</code></pre> <p>En primer lugar, se ha creado un objeto String y se ha referenciado a \u00e9l n the first line, a String \"Hello\" object is created and a reference to it, is stored in the s variable.</p> <p>En la segunda l\u00ednea otro objeto \"world\" es creado y despu\u00e9s viene una concatenaci\u00f3n de objetos (\"Hello\" y \"world\"). La concatenaci\u00f3n produce un nuevo objeto cadena \"Hello world\" cuya referencia ser\u00e1 almacenada en la variable s.</p> <p>Los objetos \"Hello\" y \"world\" son objetos obsoletos porque nadie usa su referencia, as\u00ed que no son usados. La JVM tiene un recolector de basura el cu\u00e1l limpia esos objetos de la memoria.</p> <p>Cuando manipulamos cadenas, ya sea concatenando, insertando o remplazando caracteres, muchos objetos son creados y r\u00e1pidamente descartados. Esta creaci\u00f3n de objetos de forma masiva puede provocar un incremento del uso de la memoria.</p> <p>El recolector de basura de Java limpia la memoria, pero dicha operaci\u00f3n tiene un tiempo costoso. Si nosotros creamos y destruimos muchos objetos, la ejecuci\u00f3n de nuestro programa puede ser poco eficiente.</p> <p>StringBuffer y StringBuilder son clases que nos permite crear objetos que almacenan cadenas que pueden ser modificadas sin necesidad de crear nuevos objetos.</p> <p>Ambas clases, tienen m\u00e9todos que nos permite manipular cadenas, como append, insert, etc.</p> <p>StringBuilder y StringBuffer son muy parecidos, pero StringBuffer puede ser usado en programas concurrentes con el uso de m\u00faltiples hilos de forma que sea thread safe (seguro para hilos), lo que hace que StringBuilder sea mucho m\u00e1s eficientes para programas no concurrentes.</p>"},{"location":"bloque_i/tema_3/page-2/#stringbuilder","title":"StringBuilder","text":"<p>StringBuilder es una clase de Java que nos permite manipular cadenas evitando la problem\u00e1tica de la creaci\u00f3n de objetos innecesarios. Algunos m\u00e9todos de esta clase son:</p> <ul> <li>StringBuilder append(String s). A\u00f1ade la cadena pasada por par\u00e1metro a la secuencia de caracteres. Este m\u00e9todo esta sobrescrito para a\u00f1adir cualquier tipo primitivo (int, boolean, char, etc.), para a\u00f1adir Object o un StringBuffer</li> <li>int capacity(). Retorna el n\u00famero de caracteres actuales que hay almacenados.</li> <li>StringBuilder delete(int start, int end). Elimina la subcadena en la secuencia de caracteres.</li> <li>StringBuilder deleteCharAt(). Elimina el car\u00e1cter especificado en la secuencia de caracteres.</li> <li>StringBuilder insert(int offset, String str). Inserta la cadena especificada a la secuencia de caracteres en la posici\u00f3n indicada, moviendo, si es necesario, el resto de caracteres. Este m\u00e9todo est\u00e1 sobrescrito para los tipos primitivos y el tipo Object.</li> <li>StringBuilder reverse(). Reemplaza la secuencia de caracteres actual por la secuencia de caracteres invertida.</li> <li>String toString(). Devuelve la secuencia de caracteres como String.</li> </ul> <p>Adem\u00e1s de estos m\u00e9todos, tambi\u00e9n tiene m\u00e9todos parecidos de la clase String como charAt(), indexOf(), lastIndexOf(), length(), subString().</p> <pre><code>import java.util.Scanner;\npublic class StringBuilderExample {\npublic static void main(String[] args) {\nStringBuilder builder = new StringBuilder();\nScanner scanner = new Scanner(System.in);\nfor(int i = 1; i &lt;= 10; i++){\nSystem.out.print(\"Introduce una cadena: \");\nbuilder.append(scanner.nextLine());\n}\nSystem.out.printf(\"Capacidad actual: %d\\n\", builder.capacity());\nbuilder.insert(5, \"String insertada en el car\u00e1cter 5\");\nbuilder.insert(0, true);\nSystem.out.printf(\"Cadena actual: %s\\n\", builder);\nSystem.out.printf(\"Primer car\u00e1cter: %s\\n\", builder.charAt(0));\nSystem.out.printf(\"Tama\u00f1o de la cadena: %d\\n\", builder.length());\nSystem.out.printf(\"La letra 'A' se encuentra en: %d\\n\", builder.indexOf(\"A\"));\nSystem.out.printf(\"Cadena invertida: %s\\n\", builder.reverse());\n}\n}\n</code></pre>"},{"location":"bloque_i/tema_3/page-2/#stringbuffer","title":"StringBuffer","text":"<p>La clase StringBuffer funciona de forma muy similar a la clase StringBuilder pero con la diferencia que \u00e9sta es thread-safe, segura para trabajar con hilos. Algunos m\u00e9todos de esta clase son:</p> <ul> <li>StringBuffer append(String s). A\u00f1ade la cadena pasada por par\u00e1metro a la secuencia de caracteres. Este m\u00e9todo esta sobrescrito para a\u00f1adir cualquier tipo primitivo (int, boolean, char, etc.), para a\u00f1adir Object u otro StringBuffer</li> <li>int capacity(). Retorna el n\u00famero de caracteres actuales que hay almacenados.</li> <li>StringBuffer delete(int start, int end). Elimina la subcadena en la secuencia de caracteres.</li> <li>StringBuffer deleteCharAt(). Elimina el car\u00e1cter especificado en la secuencia de caracteres.</li> <li>StringBuffer insert(int offset, String str). Inserta la cadena especificada a la secuencia de caracteres en la posici\u00f3n indicada, moviendo, si es necesario, el resto de caracteres. Este m\u00e9todo est\u00e1 sobrescrito para los tipos primitivos y el tipo Object.</li> <li>StringBuffer reverse(). Reemplaza la secuencia de caracteres actual por la secuencia de caracteres invertida.</li> <li>String toString(). Devuelve la secuencia de caracteres como String.</li> </ul> <p>Adem\u00e1s de estos m\u00e9todos, tambi\u00e9n tiene m\u00e9todos parecidos de la clase String como charAt(), indexOf(), lastIndexOf(), length(), subString().</p>"},{"location":"bloque_i/tema_3/page-2/#ejercicios","title":"Ejercicios","text":"Ejercicio 1 <p>Crea un m\u00e9todo que reciba una cadena de s\u00f3lo d\u00edgitos, y devolver la misma cadena pero con separadores de miles, si es posible. Por ejemplo, si recibe la cadena 3456 devolver\u00e1 3.456, si recibe 123456789, devolver\u00e1 123.456.789 y si recibe 123 devolver\u00e1 123. Hacer uso de la clase StringBuilder.</p> Ejercicio 2 <p>Realiza el ejercicio anterior, pero ahora haciendo uso de la clase StringBuffer.</p>"},{"location":"bloque_i/tema_3/page-3/","title":"3 Expresiones regulares","text":""},{"location":"bloque_i/tema_3/page-3/#introduccion","title":"Introducci\u00f3n","text":"<p>Una  expresi\u00f3n regular  es  una  secuencia  de  caracteres  que  forma  un  patr\u00f3n  de  b\u00fasqueda proporcionando una manera muy flexible de buscar o reemplazar cadenas de texto.</p> <p>En la clase String hay un m\u00e9todo llamado matches que indica si la cadena coincide o no con la expresi\u00f3n regular que se le pasa por par\u00e1metro . He aqu\u00ed algunas de las construcciones de expresiones regulares que se encuentran en la API de Java en la clase Pattern:</p> <ul> <li> <p>Characters</p> Construct Matches x The character x \\ The backslash character \\u*hhhh* The character with hexadecimal value 0x*hhhh* \\t The tab character (\\u0009) \\n The newline (line feed) character (\\u000A) <pre><code>public class Characters {\npublic static void main(String[] args) {\nSystem.out.println(\"a\".matches(\"a\")); //true\nSystem.out.println(\"b\".matches(\"a\")); //false\nSystem.out.println(\"A\".matches(\"\\u0041\")); //true\nSystem.out.println(\"\\n\".matches(\"\\n\")); //true\nSystem.out.println(\"\\t\".matches(\"\\t\")); //true\nSystem.out.println(\"\\\\\".matches(\"\\\\\\\\\")); //true\n}\n}\n</code></pre> <p>Tal  y  como  vimos  en  el  tema  1.4  Tipos  de  datos  primitivos  en  el  apartado  de  los  caracteres, secuencias de escape es el conjunto de caracteres que en el c\u00f3digo es interpretado con alg\u00fan fin. En Java, la barra invertida <code>\\</code> se denomina car\u00e1cter de escape, el cual indica que el car\u00e1cter puesto  a  continuaci\u00f3n  ser\u00e1  convertido  en  car\u00e1cter  especial  o,  si  ya  es  especial,  dejar\u00e1  de  ser especial.  Por  ejemplo,  el  car\u00e1cter <code>n</code> no es especial  pero  con  la <code>\\</code> delante  se  convierte  en especial ya que <code>\\n</code> se interpreta como un salto de l\u00ednea. La <code>\\</code>  es un car\u00e1cter especial pero con otra <code>\\</code> delante deja de ser especial y simplemente es una barra invertida.</p> <p>En las expresiones regulares tambi\u00e9n se utiliza la barra invertida <code>\\</code>  como car\u00e1cter de escape.</p> <p>Veamos la \u00faltima l\u00ednea del c\u00f3digo anterior  <code>\"\\\\\".matches(\"\\\\\\\\\")</code>: la cadena <code>\"\\\\\"</code> es una barra  invertida,  y  el  argumento  del  matches  <code>\"\\\\\\\\\"</code>   son  dos  barras  invertidas  ya  que  la expresi\u00f3n regular de la barra invertida son dos barras tal y como podemos observar en la tabla anterior.</p> </li> <li> <p>Logical Operators</p> Construct Matches XY X seguido Y X Y <pre><code>public class LogicalOperators {\npublic static void main(String[] args) {\nSystem.out.println(\"hola\".matches(\"hola\")); //true\nSystem.out.println(\"hol\".matches(\"hola\")); //false\nSystem.out.println(\"hola\".matches(\"hola|adios\")); //true\nSystem.out.println(\"adios\".matches(\"hola|adios\")); //true\nSystem.out.println(\"hol\".matches(\"hola|adios\")); //false\nSystem.out.println(\"Adios\".matches(\"hola|adios\")); //false\n}\n}\n</code></pre> </li> <li> <p>Character classes</p> Construct Matches [abc] a, b, o c (simple class) [^abc] Cualquier car\u00e1cter excepto a, b o c (negaci\u00f3n) [a-zA-Z] Desde la a hasta la z o desde la A hasta la Z, ambos incluidos (rango) [a-d[m-p]] Desde la a hasta la d o desde la m hasta la p (union) [a-z&amp;&amp;[def]] d, e o f (intersecci\u00f3n) [a-z&amp;&amp;[^bc]] Desde la a a la z, excepto b y c (subtracci\u00f3n) [a-z&amp;&amp;[^m-p]] Desde la a a la z, excepto los caracteres que van de la m a la p (subtracci\u00f3n) <pre><code>public class CharactersClasses {\npublic static void main(String[] args) {\nSystem.out.println(\"a\".matches(\"[abc]\")); //true\nSystem.out.println(\"d\".matches(\"[abc]\")); //false\nSystem.out.println(\"a\".matches(\"[abc][abc]\")); //false\nSystem.out.println(\"ac\".matches(\"[abc][abc]\")); //true\nSystem.out.println(\"ad\".matches(\"[abc][abc]\")); //false\nSystem.out.println(\" a\".matches(\"[abc ][abc]\")); //true\nSystem.out.println(\"d\".matches(\"[^abc]\")); //true\nSystem.out.println(\"a\".matches(\"[^abc]\")); //false\nSystem.out.println(\"d\".matches(\"[^abc][^abc]\")); //false\nSystem.out.println(\"de\".matches(\"[^abc][^abc]\")); //true\nSystem.out.println(\"da\".matches(\"[^abc][^abc]\")); //false\nSystem.out.println(\"A\".matches(\"[a-zA-Z]\")); //true\nSystem.out.println(\"9\".matches(\"[a-zA-Z]\")); //false\nSystem.out.println(\"A\".matches(\"[a-zA-Z][a-zA-Z]\")); //false\nSystem.out.println(\"Az\".matches(\"[a-zA-Z][a-zA-Z]\")); //true\nSystem.out.println(\"A9\".matches(\"[a-zA-Z][a-zA-Z]\")); //false\nSystem.out.println(\"b\".matches(\"[a-d[m-p]]\")); //true\nSystem.out.println(\"n\".matches(\"[a-d[m-p]]\")); //true\nSystem.out.println(\"s\".matches(\"[a-d[m-p]]\")); //false\nSystem.out.println(\"d\".matches(\"[a-z&amp;&amp;[def]]\")); //true\nSystem.out.println(\"a\".matches(\"[a-z&amp;&amp;[def]]\")); //false\nSystem.out.println(\"d\".matches(\"[a-z&amp;&amp;[^bc]]\")); //true\nSystem.out.println(\"b\".matches(\"[a-z&amp;&amp;[^bc]]\")); //false\nSystem.out.println(\"d\".matches(\"[a-z&amp;&amp;[^m-p]]\")); //true\nSystem.out.println(\"n\".matches(\"[a-z&amp;&amp;[^m-p]]\")); //false\n}\n}\n</code></pre> </li> <li> <p>Predefined character clasess</p> Construct Matches . Cualquier car\u00e1cter (puede o no ser determinadores de l\u00ednea) \\d Un d\u00edgito: [0-9] \\D Un no d\u00edgito: [^0-9] \\s Un car\u00e1cter de espacio en blanco: [\\t\\n\\x0B\\f\\r] \\S Un no car\u00e1cter de espacio en blanco: [^\\s] \\w Un car\u00e1cter de palabra: [a-zA-Z_0-9] \\W Un no car\u00e1cter de palabra: [^\\w] <p>Estas  expresiones  regulares  van  contenidas  en  una  cadena.  Entonces,  aquellas  expresiones regulares que lleven una barra invertida, como por ejemplo  <code>\\d</code>, tienen que llevar otra barra invertida <code>\\</code> delante ya que en las cadenas una barra invertida se expresa como <code>\\\\</code>.</p> </li> <li> <p>POSIX character classes (US-ASCII only)</p> Construct Matches \\p{Lower} Un car\u00e1cter alfab\u00e9tico en min\u00fascula: [a-z] \\p{Upper} Un car\u00e1cter alfab\u00e9tico en may\u00fasculas: [A-Z] \\p{ASCII} Todo caracteres ASCII: [\\x00-\\x7F] \\p{Alpha} Un car\u00e1cter alfab\u00e9tico: [\\p{Lower}\\p{Upper}] \\p{Digit} Un car\u00e1cter decimal: [0-9] \\p{Alnum} Un car\u00e1cter alfanum\u00e9rico: [\\p{Alpha}\\p{Digit}] \\p{Punct} Puntuaci\u00f3n: !\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[]^_`{}~ \\p{Graph} Un car\u00e1cter visible: [\\p{Alnum}\\p{Punct}] \\p{Print} Un car\u00e1cter imprimible: [\\p{Graph}\\x20] \\p{Blank} Un espacio o una tabulaci\u00f3n: [ \\t] \\p{Cntrl} Un car\u00e1cter de control: [\\x00-\\x1F\\x7F] \\p{XDigit} Un d\u00edgito hexadecimal: [0-9a-fA-F] \\p{Space} Un car\u00e1cter de espacio en blanco: [\\t\\n\\x0B\\f\\r] <p>En los caracteres imprimibles (\\p{Print}), \\x20 es el car\u00e1cter espacio.</p> <pre><code>public class PosixCharactersClasses {\npublic static void main(String[] args) {\nSystem.out.println(\"a\".matches(\"\\\\p{Lower}\"));//true\nSystem.out.println(\"A\".matches(\"\\\\p{Lower}\"));//false\nSystem.out.println(\"A\".matches(\"\\\\p{Upper}\"));//true\nSystem.out.println(\"a\".matches(\"\\\\p{Upper}\"));//false\nSystem.out.println(\"aC\".matches(\"\\\\p{Lower}\\\\p{Upper}\"));//true\nSystem.out.println(\"a\".matches(\"\\\\p{Alpha}\"));//true\nSystem.out.println(\"A\".matches(\"\\\\p{Alpha}\"));//true\nSystem.out.println(\"8\".matches(\"\\\\p{Alpha}\"));//false\nSystem.out.println(\"8\".matches(\"\\\\p{Digit}\"));//true\nSystem.out.println(\"A\".matches(\"\\\\p{Digit}\"));//false\nSystem.out.println(\"8A\".matches(\"\\\\p{Digit}\\\\p{Alpha}\"));//true\nSystem.out.println(\"A\".matches(\"\\\\p{Alnum}\"));//true\nSystem.out.println(\"8\".matches(\"\\\\p{Alnum}\"));//true\nSystem.out.println(\"a\".matches(\"\\\\p{Alnum}\"));//true\nSystem.out.println(\"\\n\".matches(\"\\\\p{Alnum}\"));//false\nSystem.out.println(\"?\".matches(\"\\\\p{Punct}\"));//true\nSystem.out.println(\"!\".matches(\"\\\\p{Punct}\"));//true\nSystem.out.println(\";\".matches(\"\\\\p{Punct}\"));//true\nSystem.out.println(\"a\".matches(\"\\\\p{Punct}\"));//false\nSystem.out.println(\" \".matches(\"\\\\p{Blank}\"));//true\nSystem.out.println(\"\\t\".matches(\"\\\\p{Blank}\"));//true\nSystem.out.println(\"\\n\".matches(\"\\\\p{Blank}\"));//false\nSystem.out.println(\" \".matches(\"\\\\p{Space}\"));//true\nSystem.out.println(\"\\t\".matches(\"\\\\p{Space}\"));//true\nSystem.out.println(\"\\n\".matches(\"\\\\p{Space}\"));//true\nSystem.out.println(\"a\".matches(\"\\\\p{Space}\"));//false\n}\n}\n</code></pre> </li> <li> <p>Boundary matchers</p> Construct Matches ^ Principio de una l\u00ednea $ Final de una l\u00ednea \\b L\u00edmite de una palabra \\B L\u00edmite de una no-palabra <pre><code>public class BoundaryMatchers {\npublic static void main(String[] args) {\nSystem.out.println(\"hola\".matches(\"^hola\"));//true\nSystem.out.println(\"hola9\".matches(\"^hola\"));//false\nSystem.out.println(\"hola9\".matches(\"^hola\\\\d\"));//true\nSystem.out.println(\"ab\".matches(\"^[aA]\\\\p{Lower}\"));//true\nSystem.out.println(\"bA\".matches(\"^[aA]\\\\p{Upper}\"));//false\nSystem.out.println(\"hhola\".matches(\".hola$\"));//true\nSystem.out.println(\"hola\".matches(\".hola$\"));//false\nSystem.out.println(\"9hola\".matches(\"\\\\dhola$\"));//true\nSystem.out.println(\"hc\".matches(\".[abc]$\"));//true\nSystem.out.println(\"ch\".matches(\".[abc]$\"));//false\n// (1)!\nSystem.out.println(\"hola\".matches(\"\\\\bhol.\"));//true, hol est\u00e1 al principio de una palabra\nSystem.out.println(\"hola\".matches(\".ola\\\\b\"));//true, ola est\u00e1 al final de una palabra\n//(2)!\nSystem.out.println(\"hola\".matches(\"\\\\bhola\\\\b\"));//true, hola est\u00e1 al principio y al final\n// \\B es justo lo contrario que \\b\nSystem.out.println(\"abc\".matches(\".\\\\Bb\\\\B.\"));//true, b no est\u00e1 al principio ni al final\nSystem.out.println(\"abc\".matches(\"a\\\\B..\"));//true, a no est\u00e1 al final\n}\n}\n</code></pre> <ol> <li>La expresi\u00f3n regular \\b se llama l\u00edmite de palabra ya que busca en los l\u00edmites de una palabra, al principio o al final.</li> <li>Para realizar una b\u00fasqueda de palabras espec\u00edficas se coloca la palabra entre dos l\u00edmites de palabra:</li> </ol> </li> </ul>"},{"location":"bloque_i/tema_3/page-3/#la-clase-pattern","title":"La clase Pattern","text":"<p>En Java disponemos de las clases Pattern y Matcher para poder hacer uso de las expresiones regulares. Ambas se encuentran en el paquete <code>java.util.regex</code>.</p> <p>La  clase  Pattern  nos  permite  definir  el  patr\u00f3n,  es  decir,  representa  a  la  expresi\u00f3n  regular. Veamos algunos m\u00e9todos de esta clase:</p> <ul> <li>compile: crea un patr\u00f3n a partir de una expresi\u00f3n regular.</li> <li>pattern: devuelve la expresi\u00f3n regular a partir de la cual se cre\u00f3 el patr\u00f3n.</li> <li>matches: indica si la cadena coincide o no con la expresi\u00f3n regular.</li> </ul> <pre><code>import java.util.regex.Pattern;\npublic class PatternClass {\npublic static void main(String[] args) {\nPattern pattern = Pattern.compile(\"\\\\p{Upper}\\\\p{Lower}\");\nSystem.out.println(pattern.pattern());\nSystem.out.println(Pattern.matches(\"\\\\p{Upper}\\\\p{Lower}\",\n\"Ho\"));//true\nSystem.out.println(Pattern.matches(\"\\\\p{Upper}\\\\p{Lower}\",\n\"ho\"));//false\n}\n}\n</code></pre>"},{"location":"bloque_i/tema_3/page-3/#la-clase-matcher","title":"La clase Matcher","text":"<p>La clase Matcher realiza operaciones de coincidencia del patr\u00f3n en una secuencia de caracteres.</p> <p>Se puede crear un objeto de tipo Matcher mediante el m\u00e9todo matcher de la clase Pattern. Una vez creado, un matcher puede ser utilizado para realizar tres tipos diferentes de operaciones:</p> <ul> <li>matches: intenta hacer coincidir toda la secuencia de entrada con el patr\u00f3n.</li> <li>lookingAt: intenta hacer coincidir el principio de la secuencia de entrada con el patr\u00f3n.</li> <li>find: intenta encontrar la pr\u00f3xima secuencia de entrada que coincide con el patr\u00f3n. Si hay varias coincidencias con el patr\u00f3n dentro del mismo texto, cada llamada a find devolver\u00e1 la siguiente coincidencia.</li> <li>start: devuelve el \u00edndice de la secuencia de entrada donde empieza la coincidencia del \u00faltimo find</li> <li>end: devuelve el \u00edndice de la secuencia de entrada el car\u00e1cter que est\u00e1 justo despu\u00e9s del \u00faltimo de la coincidencia del \u00faltimo find.</li> <li>reset: resetea el matcher.</li> </ul> <pre><code>import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\npublic class MatcherClass {\npublic static void main(String[] args) {\nint count;\nPattern pattern = Pattern.compile(\"es\", Pattern.CASE_INSENSITIVE);//(1)!\nMatcher matcher = pattern.matcher(\"Estoy en Espa\u00f1a\");\nSystem.out.println(matcher.matches());//false   \nSystem.out.println(matcher.lookingAt());//true\nmatcher.reset(\"Esto es un escrito en espa\u00f1ol\");\ncount = 0;\nwhile (matcher.find()) {\ncount++;\nSystem.out.printf(\"Coincidencia n\u00famero %d: empieza en %d y termina en %d\\n\", count, matcher.start(), matcher.end() - 1);\n}\n}\n}\n</code></pre> <ol> <li>Con Pattern.CASE_INSENSITIVE, no se distingue entre may\u00fasculas y min\u00fasculas</li> </ol> <p>La expresi\u00f3n regular . coincide con cualquier car\u00e1cter excepto un terminador de l\u00ednea, a menos que se especifique la bandera DOTALL.</p> <pre><code>import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\npublic class Point {\npublic static void main(String[] args) {\nPattern pattern = Pattern.compile(\".\", Pattern.DOTALL);\nMatcher matcher = pattern.matcher(\"\\n\");\nSystem.out.println(matcher.matches());//true\nSystem.out.println(\"\\n\".matches(\".\"));//false\n}\n}\n</code></pre> <p>Veamos m\u00e1s ejemplos de boundary matchers utilizando objetos de tipo Matcher:</p> <pre><code>import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\npublic class BoundaryMatchersAvanzed {\npublic static void main(String[] args) {\nString text = \"Esto es un texto escrito en espa\u00f1ol\";\nPattern pattern;\nMatcher matcher;\npattern = Pattern.compile(\"\\\\be\", Pattern.CASE_INSENSITIVE);\nmatcher = pattern.matcher(text);\nSystem.out.println(\"Las palabras que empiezan por e o por E se  encuentran en las siguientes posiciones:\");\nwhile (matcher.find()) {\nSystem.out.println(matcher.start());\n}\npattern = Pattern.compile(\"\\\\Be\");\nmatcher = pattern.matcher(text);\nSystem.out.println(\"Las e que no son comienzos de palabra se encuentran en las siguientes posiciones:\");\nwhile (matcher.find()) {\nSystem.out.println(matcher.start());\n}\npattern = Pattern.compile(\"o\\\\b\");\nmatcher = pattern.matcher(text);\nSystem.out.println(\"Las o que son finales de palabras se encuentran en las siguientes posiciones:\");\nwhile (matcher.find()) {\nSystem.out.println(matcher.start());\n}\npattern = Pattern.compile(\"o\\\\B\");\nmatcher = pattern.matcher(text);\nSystem.out.println(\"Las o que no son finales de palabras se encuentran en las siguientes posiciones:\");\nwhile (matcher.find()) {\nSystem.out.println(matcher.start());\n}\n/*\n         * Para realizar una b\u00fasqueda de palabras espec\u00edficas se coloca la palabra entre\n         * dos l\u00edmites de palabra:\n         */\npattern = Pattern.compile(\"\\\\btexto\\\\b\");\nmatcher = pattern.matcher(text);\nSystem.out.println(\"La palabra texto se encuentra en las siguientes posiciones:\");\nwhile (matcher.find()) {\nSystem.out.println(matcher.start());\n}\n}\n}\n</code></pre>"},{"location":"bloque_i/tema_3/page-3/#quantifiers-cuantificadores","title":"Quantifiers (cuantificadores)","text":"<ul> <li> <p>Greedy quantifiers</p> <p>Por defecto los cuantificadores son greedy. Se llaman greedy (glot\u00f3n) porque tratan de coger lo m\u00e1ximo posible de la cadena pero siempre intentando que el patr\u00f3n completo se cumpla.</p> Construct Matches X? X, una vez o ninguna X* X, ninguna o m\u00e1s veces X+ X, una o m\u00e1s veces X{n} X, exactamente n veces X{n,} X, al menos n veces X{n,m} X, al menos n pero no m\u00e1s de m <pre><code>public class GreedyQuantifiers {\npublic static void main(String[] args) {\nSystem.out.println(\"a\".matches(\"a?\"));//true\nSystem.out.println(\"\".matches(\"a?\"));//true\nSystem.out.println(\"b\".matches(\"a?\"));//false\nSystem.out.println(\"a\".matches(\"a*\"));//true\nSystem.out.println(\"\".matches(\"a*\"));//true\nSystem.out.println(\"aaaa\".matches(\"a*\"));//true\nSystem.out.println(\"b\".matches(\"a*\"));//false\nSystem.out.println(\"a\".matches(\"a+\"));//true\nSystem.out.println(\"aaaa\".matches(\"a+\"));//true\nSystem.out.println(\"\".matches(\"a+\"));//false\nSystem.out.println(\"b\".matches(\"a+\"));//false\nSystem.out.println(\"aaa\".matches(\"a{3}\"));//true\nSystem.out.println(\"aaa\".matches(\"a{4}\"));//false\nSystem.out.println(\"aaa\".matches(\"a{3,}\"));//true\nSystem.out.println(\"aaaaa\".matches(\"a{3,}\"));//true\nSystem.out.println(\"aa\".matches(\"a{3,}\"));//false\nSystem.out.println(\"aaa\".matches(\"a{3,6}\"));//true\nSystem.out.println(\"aaaaaa\".matches(\"a{3,6}\"));//true\nSystem.out.println(\"aa\".matches(\"a{3,6}\"));//false\nSystem.out.println(\"aaaaaaa\".matches(\"a{3,6}\"));//false\n}\n}\n</code></pre> </li> <li> <p>Reluctant quantifiers</p> <p>Otro posible comportamiento es reluctant (reacio, reticente). Este comportamiento es el contrario de greedy, trata de coger lo menos posible pero siempre intentando que se cumpla el patr\u00f3n.</p> Construct Matches X?? X, una vz o ninguna X*? X, cero o m\u00e1s veces X+? X, una o m\u00e1s veces X{n,}? X, al menos n veces X{n,m}? X, al menos n veces pero no m\u00e1s que m veces <pre><code>import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\npublic class ReluctantQuantifiers {\npublic static void main(String[] args) {\nPattern patternGreedy = Pattern.compile(\"a+\");\nPattern patternReluctant = Pattern.compile(\"a+?\");\nMatcher matcherGreedy = patternGreedy.matcher(\"aaaa\");\nMatcher matcherReluctant = patternReluctant.matcher(\"aaaa\");\nwhile (matcherGreedy.find()) {\nSystem.out.printf(\"Greedy: coincidencia desde %d hasta %d\\n\",\nmatcherGreedy.start(), matcherGreedy.end() - 1);\n}\nwhile (matcherReluctant.find()) {\nSystem.out.printf(\"Reluctant: coincidencia desde %d hasta %d\\n\",\nmatcherReluctant.start(), matcherReluctant.end() - 1);\n}\n}\n}\n</code></pre> </li> <li> <p>Possessive quantifiers</p> <p>Tratan  de  coger  lo  m\u00e1ximo  posible  de  la  cadena  pero  no  se  preocupan  de  que  se  cumpla  el patr\u00f3n. Este comportamiento se usa \u00fanicamente por motivos de eficiencia. Si en la cadena hay un trozo que queramos quitar y que podamos distinguir con una expresi\u00f3n regular, podemos ponerlo con este modo possessive. De esta forma, el possessive se comer\u00e1 directamente ese trozo de cadena y no perder\u00e1 el tiempo tratando de hacer casar ese trozo con el patr\u00f3n de alguna u otra forma.</p> <p>Se escriben como los greedy pero a\u00f1adiendo un + detr\u00e1s.</p> Construct Matches X?+ X, una vz o ninguna X*+ X, cero o m\u00e1s veces X++ X, una o m\u00e1s veces X{n,}+ X, al menos n veces X{n,m}+ X, al menos n veces pero no m\u00e1s que m veces <pre><code>public class PossessiveQuantifiers {\npublic static void main(String[] args) {\nPattern patternGreedy = Pattern.compile(\"a+a\");\nPattern patternPossessive = Pattern.compile(\"a++a\");\nMatcher matcherGreedy = patternGreedy.matcher(\"aaaa\");\nMatcher matcherPossessive = patternPossessive.matcher(\"aaaa\");\nwhile (matcherGreedy.find()) {\nSystem.out.printf(\"Greedy: coincidencia desde %d hasta %d\\n\",\nmatcherGreedy.start(), matcherGreedy.end() - 1);\n}\nwhile (matcherPossessive.find()) {\nSystem.out.printf(\"Possessive: coincidencia desde %d hasta %d\\n\",\nmatcherPossessive.start(), matcherPossessive.end() - 1);\n}\n}\n}\n</code></pre> <p>En el modo possessive, con la primera parte del patr\u00f3n a++ ya coge la cadena completa <code>\"aaaa\"</code>. Como no se preocupa de que el patr\u00f3n se cumpla, entonces la \u00faltima <code>a</code> del patr\u00f3n ya no tiene coincidencia con lo que el find devuelve false.</p> </li> </ul>"},{"location":"bloque_i/tema_3/page-3/#grupos","title":"Grupos","text":"<p>Los grupos sirven para extraer partes de una cadena y se marcan con un par\u00e9ntesis en la expresi\u00f3n regular. Cuando se encuentra una coincidencia en un texto, se puede acceder a la parte que se encuentra dentro del grupo a trav\u00e9s del m\u00e9todo group. Una expresi\u00f3n regular puede tener m\u00e1s de un grupo, en cuyo caso cada uno lleva sus propios par\u00e9ntesis. El grupo con n\u00famero 0 es toda la expresi\u00f3n regular y los grupos marcados con par\u00e9ntesis empiezan a enumerarse a partir del 1. Tambi\u00e9n puede hacer grupos dentro de otros grupos, como en el siguiente ejemplo, donde el grupo 2 y grupo 3 est\u00e1n dentro del grupo 1.</p> <pre><code>import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\npublic class Group {\npublic static void main(String[] args) {\nPattern pattern = Pattern.compile(\"((\\\\d+)\\\\+(\\\\d+))=(\\\\d+)\");\nMatcher matcher = pattern.matcher(\"23+56=79;15+13=28;30+60=90\");\nwhile (matcher.find()) {\nSystem.out.println(matcher.group(0));\nSystem.out.printf(\"Sumandos: %s\\n\", matcher.group(1));\nSystem.out.printf(\"Sumando 1: %s\\n\", matcher.group(2));\nSystem.out.printf(\"Sumando 2: %s\\n\", matcher.group(3));\nSystem.out.printf(\"Resultado: %s\\n\\n\", matcher.group(4));\n}\n}\n}\n</code></pre>"},{"location":"bloque_i/tema_3/page-3/#reemplazar-partes-de-una-cadena","title":"Reemplazar partes de una cadena","text":"<p>La clase Matcher tiene m\u00e9todos para reemplazar partes de la cadena que cumplan con el patr\u00f3n:</p> <ul> <li>replaceAll: reemplaza todas las coincidencias.</li> <li>replaceFirst: reemplaza solamente la primera coincidencia.</li> </ul> <pre><code>import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\npublic class Replace {\npublic static void main(String[] args) {\nPattern pattern = Pattern.compile(\"\\\\d\");\nMatcher matcher = pattern.matcher(\"Tengo 20 a\u00f1os y vivo en la calle Puerto Real 15\");\nString replaceAll = matcher.replaceAll(\"*\");\nString replaceFirst = matcher.replaceFirst(\"*\");\nSystem.out.printf(\"replaceAll: %s\\n\", replaceAll);\nSystem.out.printf(\"replaceFirst: %s\\n\", replaceFirst);\n}\n}\n</code></pre>"},{"location":"bloque_i/tema_3/page-3/#ejercicios","title":"Ejercicios","text":"Ejercicio 1 <p>Crea y comprueba las siguientes expresiones regulares:</p> <ol> <li>que la cadena sea exactamente \u201ctrue\u201d.</li> <li>que la cadena sea de tres letras, may\u00fasculas o min\u00fasculas.</li> <li>que la cadena contenga 5 o m\u00e1s caracteres que no sean la \u00f1, la z ni la x.</li> <li>que la cadena no empiece con un n\u00famero.</li> <li>que la cadena tenga varios caracteres excepto la b.</li> <li>que la cadena sea un n\u00famero de tel\u00e9fono.</li> <li>que la cadena sea un DNI.</li> <li>que la cadena sea un nombre, es decir, que no tenga espacios, que no sea una cadena vac\u00eda y que empiece por may\u00fasculas.</li> <li>que la cadena empiece con vocal y luego tenga varias consonantes o ninguna.</li> <li>que la cadena tenga un n\u00famero positivo m\u00e1s peque\u00f1o que 300.</li> </ol> Ejercicio 2 <p>Dada una cadena que contiene c\u00f3digo en Java, mostrar lo siguiente:</p> <ol> <li>En qu\u00e9 car\u00e1cter empiezan los comentarios de una l\u00ednea.</li> <li>En qu\u00e9 car\u00e1cter empiezan los bloques de c\u00f3digo.</li> <li>En qu\u00e9 car\u00e1cter empiezan y terminan los comentarios de m\u00e1s de 1 l\u00ednea.</li> <li>En qu\u00e9 car\u00e1cter empiezan y terminan las declaraciones de variables de tipo int. Ejemplos:<ul> <li>int a;</li> <li>int number=5;</li> <li>int i=0,j=10,k;</li> </ul> </li> </ol> Ejercicio 3 <p>Dada una cadena que contiene c\u00f3digo en Java, mostrar lo siguiente utilizando grupos:</p> <ol> <li>El nombre del paquete.</li> <li>Las clases que se importan con sus rutas de paquetes. Ejemplo: java.util.regex.Pattern</li> <li>Las condiciones de los while.</li> </ol> Ejercicio 4 <p>Dada una cadena que contiene c\u00f3digo en Java, reemplazar los int por byte y los double por float</p>"},{"location":"bloque_i/tema_3/page-4/","title":"Proyecto","text":"<p>Se va a realizar un proyecto que va a contener una librer\u00eda con m\u00e9todos y clases \u00fatiles para facilitar ciertas operaciones.</p> <p>En esta primera parte se llevar\u00e1 a cabo la creaci\u00f3n de la clase de utilidad Strings que contendr\u00e1 los m\u00e9todos de utilidad para mejorar y facilitar el trabajo con cadenas.</p> <p>Realiza los m\u00e9todos que consideres para realizar estas operaciones:</p> <ul> <li>Comprobar si una cadena no est\u00e1 vac\u00eda.</li> <li>Comprobar si una cadena no es una cadena compuesta solamente por espacios.</li> <li>Comprobar si una cadena es num\u00e9rica.</li> <li>Comprobar si una cadena es alfab\u00e9tica.</li> <li>Comprobar si una cadena es alfanum\u00e9rica.</li> <li>Comprobar si una cadena es \u00fanicamente contiene caracteres especiales: !\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[]^_`{}~</li> <li>Comprobar si una cadena es un espacio en blanco.</li> <li>Convertir una cadena en Upper Camel case. Ejemplo Hola mundo -&gt; \"Hola Mundo\"</li> <li>Convertir la primera letra de una cadena en may\u00fasculas. Ejemplo: hola mundo -&gt; Hola mundo</li> <li>Convertir la primera letra de una cadena en min\u00fasculas. Ejemplo: Hola mundo -&gt; hola mundo</li> <li>Centrar una cadena dada una tama\u00f1o m\u00e1ximo de pantalla.</li> <li>Mostrar una cadena con ellipsis dado un tama\u00f1o m\u00e1ximo.</li> <li>Mostrar una cadena con saltos dado un tama\u00f1o m\u00e1ximo</li> <li>Comprobar si una cadena es pal\u00edndroma, es decir, que se pueda leer exactamente igual del derecho que del rev\u00e9s. Por ejemplo: Roma ni se conoce sin oro, ni se conoce sin amor</li> <li>Contar el n\u00famero de palabras de una cadena.</li> <li>Contar el n\u00famero de veces que aparece una subcadena en una cadena.</li> <li>Contar el n\u00famero de veces que una cadena cumple un patr\u00f3n.</li> <li>Comprobar si una cadena cumple una expresi\u00f3n.</li> <li>Comprobar si una cadena tiene un formato email.</li> <li>Comprobar si una cadena tiene un formato telef\u00f3nico.</li> <li>Comprobar si una cadena tiene un formato de contrase\u00f1a b\u00e1sica, es decir, que tenga como m\u00ednimo 8 caracteres.</li> <li>Comprobar si una cadena tiene un formato de contrase\u00f1a compleja, es decir, que tenga como m\u00ednimo 8 caracteres, una min\u00fascula, una may\u00fascula, un d\u00edgito y un car\u00e1cter especial.</li> <li>Comprobar si una cadena es un DNI o NIE v\u00e1lido.</li> <li>Comprobar si una cadena es una matr\u00edcula de coche v\u00e1lido.</li> </ul> <p>Adem\u00e1s se crear\u00e1 una clase de utilidad Maths que contendr\u00e1 m\u00e9todos que facilite trabajar con operaciones matem\u00e1ticas:</p> <ul> <li>Comprobar si un n\u00famero es par.</li> <li>Comprobar si un n\u00famero es impar.</li> <li>Calcular el m\u00ednimo com\u00fan m\u00faltiplo de dos n\u00fameros.</li> <li>Calcular el m\u00ednimo com\u00fan m\u00faltiplo de tres n\u00fameros.</li> <li>Calcular el m\u00e1ximo com\u00fan divisor de dos n\u00fameros.</li> <li>Calcular el m\u00e1ximo com\u00fan divisor de tres n\u00fameros.</li> <li>Invertir un n\u00famero.</li> <li>Contar el n\u00famero de cifras que tiene.</li> <li>Comprobar si un n\u00famero es perfecto.</li> <li>Comprobar si un n\u00famero es primo.</li> <li>Comprobar si un n\u00famero es compuesto.</li> <li>Calcular el factorial de un n\u00famero.</li> </ul> <p>Para realizar este proyecto se tendr\u00e1 en cuenta:</p> <ol> <li>Se crear\u00e1 un paquete principal llamado <code>com.NOMBRE.common</code> donde nombre ser\u00e1 el nombre del alumno y common el nombre del proyecto.</li> <li>Se crear\u00e1 una clase Main, donde se ponga en pr\u00e1ctica los usos de la librer\u00eda y se valorar\u00e1 la complejidad de dicho Main.</li> <li>El nombre de las funciones ser\u00e1 en ingl\u00e9s y deber\u00e1n ser lo suficiente claras para poder identificarlas con facilidad.</li> <li>Sobrescribe los m\u00e9todos que consideres oportunos.</li> <li>El repositorio de GitHub tendr\u00e1 el siguiente nombre pr03java-NOMBRE-strings siendo NOMBRE el nombre del alumno.</li> <li>Se declarar\u00e1 aquellas variables que sean necesarias inicializ\u00e1ndolas si es necesario, indicando el tipo correspondiente.</li> <li>Se har\u00e1 uso de funciones y procedimientos donde sea oportuno.</li> <li>Se har\u00e1 uso de la recursividad donde sea necesario.</li> <li>La entrega de este proyecto se realizar\u00e1 a trav\u00e9s de un enlace a un repositorio de GitHub, realizando siempre m\u00e1s de un commit.</li> <li>Se valorar\u00e1 la limpieza, la claridad, y la estructura del proyecto.</li> </ol>"},{"location":"bloque_i/tema_4/page-1/","title":"1 Clases vs Objetos","text":""},{"location":"bloque_i/tema_4/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>La Programaci\u00f3n Orientada a Objetos (POO) es una t\u00e9cnica de programar aplicaciones basada en una serie de objetos independientes que se comunican entre s\u00ed.</p> <p>A Java se le considera un lenguaje orientado a objetos ya que siempre que se crea un programa en Java, por simple que sea, se necesita declarar una clase, y el concepto de clase pertenece a la programaci\u00f3n orientada a objetos.</p> <p>Un  objeto  es  un  elemento  del  programa  que  integra  sus  propios  datos  y  su  propio funcionamiento. Es decir, un objeto est\u00e1 formado por datos (atributos o propiedades) y por las funciones que es capaz de realizar el objeto (m\u00e9todos). Esta forma de programar se asemeja m\u00e1s al pensamiento humano. La cuesti\u00f3n es detectar adecuadamente los objetos necesarios para una aplicaci\u00f3n. De hecho hay que detectar las distintas clases de objetos.</p> <p>Una clase es lo que define a un tipo de objeto. Al definir una clase lo que se hace es indicar como funciona un determinado tipo de objeto. Luego, a partir de la clase, podremos crear objetos de esa  clase,  es  decir,  la  clase  es  como  un  molde  a  partir  del  cual  se  crean  los  objetos  que pertenecen  a  ella.  Realmente  la  programaci\u00f3n  orientada  a  objetos  es  una  programaci\u00f3n orientada a clases. Es decir, lo que necesitamos programar es como funcionan las clases de objetos.</p> <p>Por ejemplo, una clase podr\u00eda ser la clase Coche. Cuando se defina esta clase, indicaremos los atributos o propiedades (como el color, modelo, marca, velocidad m\u00e1xima,...) y los m\u00e9todos (arrancar, parar, repostar, acelerar, frenar...). Todos los coches, es decir, todos los objetos de la clase Coche, tendr\u00e1n esas propiedades y esos m\u00e9todos. Para explicar la diferencia entre clase y objeto:</p> <ul> <li>la clase Coche representa a todos los coches.</li> <li>un coche concreto es un objeto, es decir, un ejemplar de una clase es un objeto. Tambi\u00e9n se le llama a los objetos instancias de la clase. Este t\u00e9rmino procede del ingl\u00e9s, instance, que realmente significa ejemplar.</li> </ul> <p>Por ejemplo, si quisi\u00e9ramos crear el juego del parch\u00eds en Java, una clase ser\u00eda la casilla, otra las fichas,  otra  el  dado,  etc.  En  el caso de la  casilla,  se  definir\u00eda  la  clase  para  indicar  su funcionamiento y sus propiedades, y luego se crear\u00edan tantos objetos casilla como casillas tenga el juego. Lo mismo ocurrir\u00eda con las fichas, la clase ficha definir\u00eda las propiedades de la ficha (color  y  posici\u00f3n  por  ejemplo)  y  su  funcionamiento  mediante  sus  m\u00e9todos  (por  ejemplo  un m\u00e9todo ser\u00eda mover, otro llegar a la meta, etc), luego se crear\u00edan tantos objetos ficha como fichas tenga el juego.</p>"},{"location":"bloque_i/tema_4/page-1/#creacion-de-clases","title":"Creaci\u00f3n de clases","text":"<p>Una clase sirve para definir una serie de objetos con propiedades (atributos), comportamientos (m\u00e9todos)  y  sem\u00e1ntica  comunes.  Hay  que  pensar  en  una  clase  como  un  molde  para  crear objetos.</p> <p>La definici\u00f3n de una clase incluye lo siguiente:</p> <ul> <li>El nombre o identificador de clase. Debe empezar con letra may\u00fascula y seguir letras min\u00fasculas,  y  si  consta  de  varias palabras,  se  utiliza  la  notaci\u00f3n  UpperCamelCase. Tambi\u00e9n pueden contener n\u00fameros pero no como primer car\u00e1cter. Por ejemplo, <code>1Coche</code> no  es  un  identificador  v\u00e1lido  de  clase,  pero <code>Coche1</code> s\u00ed  ser\u00eda  v\u00e1lido.  Veamos  algunos consejos a la hora de elegir los identificadores de las clases:<ul> <li>Evitar abreviaturas a favor de la legibilidad del c\u00f3digo. Es muy importante que el nombre de las clases sea claro y simbolice perfectamente al tipo de objetos que representa.</li> <li>Evitar  nombres  excesivamente  largos.Aunque  parece  que  se  contradice  con  la norma anterior, se trata de que los nombres sean concisos. No es conveniente que sean descripciones de clase, para eso ya est\u00e1n los comentarios javadoc.</li> <li>Utilizar nombres ya reconocidos. Hay abreviaturas reconocidas como por ejemplo TCP,  por  eso  el  nombre  de  clase  <code>ManejadorTCP</code> es  mejor  que <code>ManejadorProtocoloControlTransmision</code> .</li> </ul> </li> <li>Los atributos, tambi\u00e9n llamados propiedades o campos. Los atributos son variables que poseer\u00e1 cada objeto de la clase y por lo tanto marcar\u00e1n el estado de los mismos. Por ejemplo, un coche puede estar parado, en marcha, estropeado, funcionando, sin gasolina, etc. El estado lo marca el valor que tengan los atributos del objeto.</li> <li>Los m\u00e9todos. Son las acciones que pueden realizar los objetos de la clase, es decir, lo que determina el comportamiento de los objetos.</li> </ul> <p>En Java, cada clase se define en un archivo. Adem\u00e1s, el nombre de la clase y el del archivo tiene que ser el mismo. Es decir, si queremos definir la clase Vehicle, tendremos que hacerlo en un archivo llamado Vehicle.java. Dicho archivo contiene la definici\u00f3n de la clase Vehicle:</p> <pre><code>public class Vehicle {\nint wheelCount; // N\u00ba ruedas\ndouble speed; // Velocidad\nString color; // Color del veh\u00edculo\nvoid accelerate(double amount){ // acelerar\nspeed += amount;\n}\nvoid brake(double amount){ // frenar\nspeed -= amount;\n}\n}\n</code></pre>"},{"location":"bloque_i/tema_4/page-1/#creacion-de-objetos","title":"Creaci\u00f3n de objetos","text":"<p>Una vez definida la clase, ya se pueden crear objetos de la misma. Para crear un objeto, hay que declarar una variable cuyo tipo ser\u00e1 la propia clase:</p> <pre><code>Vehicle car; //(1)!\n</code></pre> <ol> <li><code>car</code> es una variable de tipo Vehicle</li> </ol> <p>Una vez definida la variable, se le crea el objeto llamando a un m\u00e9todo que se llama constructor. Un constructor es un m\u00e9todo que se invoca cuando se crea un objeto y que sirve para inicializar los atributos del objeto y para realizar las acciones pertinentes que requiera el mismo para ser creado. El constructor tiene el mismo nombre que la clase y para invocarlo se utiliza el operador new.</p> <pre><code>car = new Vehicle(); //(1)!\n</code></pre> <ol> <li>Vehicle() es un m\u00e9todo constructor</li> </ol> <p>Tambi\u00e9n se puede hacer todo en la misma l\u00ednea:</p> <pre><code>Vehicle car = new Vehicle();\n</code></pre>"},{"location":"bloque_i/tema_4/page-1/#acceso-a-los-atributos-y-metodos-del-objeto","title":"Acceso a los atributos y m\u00e9todos del objeto","text":"<p>Una  vez  creado  el  objeto,  se  puede  acceder  a  sus  atributos  de  la  siguiente  manera: <code>objeto.atributo</code></p> <pre><code>car.wheelCount = 4; //(1)!\n</code></pre> <ol> <li>Se le asigna 4 al atributo n\u00famero de ruedas de la variable car-</li> </ol> <p>Los m\u00e9todos se utilizan de la misma forma que los atributos, a excepci\u00f3n de que los m\u00e9todos poseen  siempre  par\u00e9ntesis  ya  que  son  funciones  que  pertenecen  a  un  objeto: <code>objeto.m\u00e9todo(argumentos)</code>.</p> <pre><code>car.accelerate(30); //(1)!\n</code></pre> <ol> <li>El coche incrementa su velocidad a 30, es decir, si iba a 90km/h, despu\u00e9s de ejecutar el m\u00e9todo el coche va a 120km/h.</li> </ol> Ejercicio 1 <p>Crea un paquete llamado exercise01 el cual contenga una clase llamada Persona con los atributos: nombre, edad, altura y ocupaci\u00f3n. Crea una clase Main donde se le solicite al usuario el nombre de la persona, modif\u00edquelo y mu\u00e9strelo por pantalla.</p>"},{"location":"bloque_i/tema_4/page-2/","title":"2 Acceso y sobrecarga","text":""},{"location":"bloque_i/tema_4/page-2/#modificadores-de-acceso","title":"Modificadores de acceso","text":"<p>Los modificadores de acceso son palabras reservadas del lenguaje Java que determinan \u00e1mbitos de visibilidad de los atributos y   m\u00e9todos de una clase.</p> <p>Los modificadores de acceso son los siguientes:</p> <ul> <li>Private: el modificador private en Java es el m\u00e1s restrictivo de todos, cualquier elemento de una clase que sea privado puede ser accedido \u00fanicamente por la propia clase. Ninguna otra clase, sin importar la relaci\u00f3n que tengan, podr\u00e1 tener acceso a elementos privados.</li> <li>El modificador por defecto: Java nos da la opci\u00f3n de no usar un modificador de acceso y al no hacerlo, el elemento tendr\u00e1 un acceso conocido como default o friendly, que permite que tanto la propia clase como las clases del mismo paquete accedan a dichos elementos.</li> <li>Protected: lo veremos en el tema donde se explica el funcionamiento de la herencia en Java.</li> <li>Public: el modificador de acceso public es el m\u00e1s permisivo de todos, nos permite acceso a los elementos desde cualquier clase incluso de otros paquetes.</li> </ul> <p>Veamos una tabla que resume el funcionamiento de los modificadores de acceso en Java:</p> Private Friendly Public Misma clase x x x Mismo paquete x x Otro paquete x <p>El modificador se indica:</p> <ul> <li>Delante de class en la clase.</li> <li>Delante del tipo de datos en los atributos y m\u00e9todos.</li> </ul> <p>Veamos la clase Vehicle con los modificadores de acceso:</p> <pre><code>public class Vehicle {\nprivate int wheelCount; // N\u00ba ruedas\nprivate double speed; // Velocidad\nprivate String color; // Color del veh\u00edculo\npublic void accelerate(double amount){ // acelerar\nspeed += amount;\n}\npublic void brake(double amount){ // frenar\nspeed -= amount;\n}\n}\n</code></pre>"},{"location":"bloque_i/tema_4/page-2/#sobrecarga-de-metodos","title":"Sobrecarga de m\u00e9todos","text":"<p>Java admite sobrecargar los m\u00e9todos, es decir, crear distintas variantes del mismo m\u00e9todo con el mismo nombre pero que se diferencien en el orden, tipo o n\u00famero de los par\u00e1metros.</p> <p>Por ejemplo, tenemos el m\u00e9todo para sumar <code>add(int x,int y)</code>:</p> <ul> <li>No  podr\u00edamos  definir  otro  m\u00e9todo <code>add(int  a,int  b)</code> porque  no  var\u00eda  el  tipo  ni  el n\u00famero de par\u00e1metros.</li> <li>S\u00ed podr\u00edamos definir <code>add(int a)</code> y <code>add(int  a,int  b,int  c)</code> porque  el  n\u00famero  de par\u00e1metros var\u00eda.</li> <li>Tambi\u00e9n podr\u00edamos definir <code>add(int x,double y)</code> porque aunque no var\u00ede el n\u00famero de par\u00e1metros, s\u00ed var\u00eda uno de los tipos.</li> </ul> <p>Otro ejemplo donde tenemos el m\u00e9todo <code>add(int x,double y)</code>:</p> <ul> <li>S\u00ed  podr\u00edamos  definir  el  m\u00e9todo <code>add(double  x,int  y)</code> porque  var\u00eda  el  orden  de  los par\u00e1metros.</li> </ul> <p>El tipo resultado de los m\u00e9todos sobrecargados puede ser igual o diferente.</p>"},{"location":"bloque_i/tema_4/page-2/#atributos-metodos-y-bloques-estaticos","title":"Atributos, m\u00e9todos y bloques est\u00e1ticos","text":"<p>El concepto de est\u00e1tico es que pertenece a la clase, por lo tanto, puede ser accedido o invocado sin la necesidad de tener que instanciar un objeto de la clase. Se indica con la palabra clave static.</p> <p>Los atributos y m\u00e9todos asociados a los objetos se les conoce como din\u00e1micos.</p> <p>Los atributos est\u00e1ticos son variables que pertenecen a la clase y son compartidos por todos los objetos  de  la  clase.  Son  inicializados  en  el  momento  en  que  se  carga  la  clase  en  memoria, respetando  el  orden  de  declaraci\u00f3n.  Para  acceder  a  un  atributo  est\u00e1tico,  hay  que  indicar  el nombre de la clase: <code>Clase.AtributoEst\u00e1tico</code></p> <p>Los m\u00e9todos est\u00e1ticos son m\u00e9todos que pertenecen a la clase y no al objeto por lo que pueden llamarse sin tener que crear un objeto de dicha clase. Para llamar a un m\u00e9todo est\u00e1tico, hay que indicar el nombre de la clase:  Clase.M\u00e9todoEst\u00e1tico(Argumentos) . Un m\u00e9todo est\u00e1tico solo puede acceder a datos est\u00e1ticos y llamar a m\u00e9todos est\u00e1ticos. No pueden utilizar el operador this ni super ya que son conceptos din\u00e1micos. Los m\u00e9todos est\u00e1ticos es lo m\u00e1s parecido a lo que son las funciones en los lenguajes estructurados con la diferencia que se encuentran encapsulados en una clase.</p> <p>Cada vez que creamos un programa en Java debemos especificar el m\u00e9todo main:</p> <pre><code>public static void main(String[] args)\n</code></pre> <p>El m\u00e9todo main es est\u00e1tico para que la m\u00e1quina virtual de Java pueda llamarlo directamente sin tener que crear un objeto de la clase que lo contiene.</p> <p>Ejemplos de llamadas a m\u00e9todos din\u00e1micos y est\u00e1ticos:</p> <ul> <li>Llamada a m\u00e9todo din\u00e1mico: <code>car.accelerate(30)</code>;</li> <li>Llamada a m\u00e9todo est\u00e1tico: <code>Math.pow(2,3);</code></li> </ul> <p>El bloque est\u00e1tico es un bloque de instrucciones dentro de una clase Java que se ejecutar\u00e1 cuando una clase se cargue por primera vez en la JVM.</p> <pre><code>class MyClass{\nstatic{\n//instrucciones\n}\n}\n</code></pre> MyClassMainConsola <pre><code>public class MyClass {\nstatic int a;\nstatic int b;\nstatic {\na = 10;\nb = 20;\n}\n}\n</code></pre> <pre><code>public class Main {\nprivate void showStatic() {\nSystem.out.printf(\"Valor de a: %d\\n\", MyClass.a);\nSystem.out.printf(\"Valor de b: %d:\\n\", MyClass.b);\n}\npublic static void main(String[] args) {\nnew Main().showStatic();\n}\n}\n</code></pre> <pre><code>Valor de a: 10\nValor de b: 20\n</code></pre>"},{"location":"bloque_i/tema_4/page-3/","title":"3 Convenciones","text":""},{"location":"bloque_i/tema_4/page-3/#javabean","title":"JavaBean","text":"<p>Los JavaBeans son un modelo de componentes para la construcci\u00f3n de aplicaciones en Java. Se usan para encapsular varios objetos en un \u00fanico objeto (la vaina o Bean en ingl\u00e9s), para hacer uso de un solo objeto en lugar de varios m\u00e1s simples. La especificaci\u00f3n de JavaBeans los define como \"componentes de software reutilizables que se puedan manipular visualmente en una herramienta de construcci\u00f3n\".</p> <p>Para funcionar como una clase JavaBean, una clase debe obedecer ciertas convenciones sobre nomenclatura de m\u00e9todos, construcci\u00f3n y comportamiento. Estas convenciones permiten tener herramientas que puedan utilizar, reutilizar, sustituir y conectar JavaBeans.</p> <p>Las convenciones requeridas son:</p> <ul> <li>Debe tener un constructor sin argumentos.</li> <li>Sus atributos de clase deben ser privados.</li> <li>Sus  propiedades  deben  ser  accesibles  mediante  m\u00e9todos  get  y  set  que  siguen  una convenci\u00f3n de nomenclatura est\u00e1ndar.</li> <li>Debe ser serializable.</li> </ul> <p>Dentro de un JavaBean podemos distinguir tres partes:</p> <ul> <li>Propiedades: Los atributos que contiene.</li> <li>M\u00e9todos: Se establecen los m\u00e9todos get y set para acceder y modificar los atributos.</li> <li>Eventos: Permiten comunicar con otros JavaBeans</li> </ul>"},{"location":"bloque_i/tema_4/page-3/#metodos-get-y-set","title":"M\u00e9todos get y set","text":"<p>Los m\u00e9todos get y set son m\u00e9todos de las clases para mostrar o modificar el valor de un atributo. Para mostrar se utiliza el m\u00e9todo get y para modificar el m\u00e9todo set.</p> <p>Seg\u00fan las convenciones JavaBean, la nomenclatura de ambos debe ser la siguiente:</p> <ul> <li>get:         - Debe ser declarado con el modificador de acceso public.         - El  nombre  del  m\u00e9todo  comienza  con  get  y  le  sigue  el  nombre  del  atributo  en UpperCamelCase. En el caso de los booleanos, el nombre del m\u00e9todo comienza con is.         - El tipo de retorno del m\u00e9todo debe ser el mismo que el tipo del atributo.</li> <li>set:         - Debe ser declarado con el modificador de acceso public.         - El  nombre  del  m\u00e9todo  comienza  con  set  y  le  sigue  el  nombre  del  atributo  en UpperCamelCase.         - El tipo de retorno del m\u00e9todo debe ser void.         - El tipo del par\u00e1metro del m\u00e9todo debe ser el mismo que el tipo del atributo.</li> </ul> <p>Hacer uso de este convenio nos facilitar\u00e1 trabajar con el resto del mundo y nos permitir\u00e1 ampliar las capacidades de nuestro c\u00f3digo utilizando frameworks existentes que hacen uso del convenio y que si no seguimos no podremos utilizar.</p> <p>En los IDEs, se pueden generar de forma autom\u00e1tica.</p> <p>Vamos a incluir en la clase Vehicle los getters y setters. Para ello, nos tenemos que plantear qu\u00e9 atributos vamos a permitir consultar y modificar. En cuanto a la consulta, vamos a permitir consultar  todos  los  atributos  por  lo  que  tendremos  que  realizar  3  getters.  En  cuanto  a  las modificaciones, el n\u00famero de ruedas de un veh\u00edculo no cambia a lo largo del tiempo por lo que no hace falta ponerle un m\u00e9todo set. La velocidad se va modificando con los m\u00e9todos de acelerar y frenar por lo que tampoco le vamos a poner un m\u00e9todo set. En cuanto al color, vamos a permitir que un veh\u00edculo pueda cambiar de color por lo que s\u00ed vamos a hacerle un m\u00e9todo set al color.</p> <pre><code>public class Vehicle {\nprivate int wheelCount; // N\u00ba ruedas\nprivate double speed; // Velocidad\nprivate String color; // Color del veh\u00edculo\npublic int getWheelCount() {\nreturn wheelCount;\n}\npublic void setWheelCount(int wheelCount) {\nthis.wheelCount = wheelCount;\n}\npublic String getColor() {\nreturn color;\n}\npublic void setColor(String color) {\nthis.color = color;\n}\npublic double getSpeed() {\nreturn speed;\n}\npublic void accelerate(double amount){ // acelerar\nspeed += amount;\n}\npublic void brake(double amount){ // frenar\nspeed -= amount;\n}\n}\n</code></pre> <p>Fij\u00e9monos en el m\u00e9todo setColor:</p> <pre><code>public void setColor(String color) {\nthis.color = color;\n}\n</code></pre> <p>Tenemos dos variables que se llaman igual: color. Una es un par\u00e1metro y otra es un atributo. Para  diferenciarlas,  el  atributo  se  utiliza  con  la  palabra  this.  El  uso  de  this  se  explica  con detenimiento m\u00e1s adelante.</p> <p>En el caso de los booleanos, el getter comienza por is. Si la clase Vehicle tuviera un atributo booleano llamado empty para detectar cu\u00e1ndo est\u00e1 vac\u00edo el dep\u00f3sito de gasolina, el getter se llamar\u00eda isEmpty():</p> <pre><code>private boolean empty;\npublic boolean isEmpty(){\nreturn empty;\n}\n</code></pre> Ejercicio 2 <p>Cree un paquete llamado exercise02 y copie la clase Persona del ejercicio anterior. Luego, realice las modificaciones necesarias para poder modificar y acceder a los atributos sin necesidad de usar directamente el atributo. Crea un m\u00e9todo Main donde le solicite al usuario todos los atributos y mu\u00e9strelos por pantalla haciendo uso de dichos m\u00e9todos.</p>"},{"location":"bloque_i/tema_4/page-3/#constructores","title":"Constructores","text":"<p>Un constructor es un m\u00e9todo que se invoca cuando se crea un objeto y que sirve para inicializar los atributos del objeto y para realizar las acciones pertinentes que requiera el mismo para ser creado. El constructor tiene el mismo nombre que la clase y para invocarlo se utiliza el operador new.</p> <pre><code>Vehicle car = new Vehicle(); //(1)!\n</code></pre> <ol> <li>Vehicle() es un constructor de la clase Vehicle</li> </ol> <p>En los constructores no se especifica tipo de retorno:</p> VehicleMainConsola <pre><code>public class Vehicle {\nprivate int wheelCount; // N\u00ba ruedas\nprivate double speed; // Velocidad\nprivate String color; // Color del veh\u00edculo\npublic Vehicle(){\nwheelCount = 4;\nspeed = 0;\ncolor = \"blanco\";\n}\npublic int getWheelCount() {\nreturn wheelCount;\n}\npublic void setWheelCount(int wheelCount) {\nthis.wheelCount = wheelCount;\n}\npublic String getColor() {\nreturn color;\n}\npublic void setColor(String color) {\nthis.color = color;\n}\npublic double getSpeed() {\nreturn speed;\n}\npublic void accelerate(double amount){ // acelerar\nspeed += amount;\n}\npublic void brake(double amount){ // frenar\nspeed -= amount;\n}\n}\n</code></pre> <pre><code>public class Main {\npublic void showDefaultConstructor(){\nVehicle car1, car2;\ncar1 = new Vehicle();\ncar2 = new Vehicle();\nSystem.out.printf(\"Coche1: %d ruedas y de color %s\\n\", car1.getWheelCount(), car1.getColor());\nSystem.out.printf(\"Coche2: %d ruedas y de color %s\\n\", car2.getWheelCount(), car2.getColor());\nSystem.out.printf(\"Velocidad del coche1: %.2f km/h\\n\", car1.getSpeed());\nSystem.out.printf(\"Velocidad del coche2: %.2f km/h\\n\", car2.getSpeed());\nSystem.out.println(\"Aceleramos el coche1 a 90,50km/h\");\ncar1.accelerate(90.50);\nSystem.out.printf(\"Velocidad del coche1: %.2f km/h\\n\", car1.getSpeed());\nSystem.out.println(\"Aceleramos el coche2 a 20,30km/h\");\ncar2.accelerate(20.30);\nSystem.out.printf(\"Velocidad del coche2: %.2f km/h\\n\", car2.getSpeed());\n}\npublic static void main(String[] args) {\nnew Main().showDefaultConstructor();\n}\n}\n</code></pre> <pre><code>Coche1: 4 ruedas y de color blanco\nCoche2: 4 ruedas y de color blanco\nVelocidad del coche1: 0,00 km/h\nVelocidad del coche2: 0,00 km/h\nAceleramos el coche1 a 90,50km/h\nVelocidad del coche1: 90,50 km/h\nAceleramos el coche2 a 20,30km/h\nVelocidad del coche2: 20,30 km/h\n</code></pre> <p>El constructor que no tiene par\u00e1metros se llama constructor  por  defecto, como por ejemplo Vehicle(). Si nos fijamos en la salida por consola, los dos coches tienen los mismos datos ya que el constructor por defecto crea todos los objetos de la misma manera. Para poder crear objetos diferentes, tendremos que usar un constructor con par\u00e1metros:</p> VehiclesMainConsola <pre><code>public class Vehicle {\nprivate int wheelCount; // N\u00ba ruedas\nprivate double speed; // Velocidad\nprivate String color; // Color del veh\u00edculo\npublic Vehicle(){\nwheelCount = 4;\nspeed = 0;\ncolor = \"blanco\";\n}\npublic Vehicle(int wheelCount, String color) {\nthis.wheelCount = wheelCount;\nthis.color = color;\nspeed = 0;\n}\npublic int getWheelCount() {\nreturn wheelCount;\n}\npublic void setWheelCount(int wheelCount) {\nthis.wheelCount = wheelCount;\n}\npublic String getColor() {\nreturn color;\n}\npublic void setColor(String color) {\nthis.color = color;\n}\npublic double getSpeed() {\nreturn speed;\n}\npublic void accelerate(double amount){ // acelerar\nspeed += amount;\n}\npublic void brake(double amount){ // frenar\nspeed -= amount;\n}\n}\n</code></pre> <pre><code>public class ConstructorParameterized {\npublic void show(){\nVehicle car, moto;\ncar = new Vehicle(4, \"azul\");\nmoto = new Vehicle(2, \"rojo\");\nSystem.out.printf(\"Coche: %d ruedas y de color %s\\n\", car.getWheelCount(), car.getColor());\nSystem.out.printf(\"Moto: %d ruedas y de color %s\\n\", moto.getWheelCount(), moto.getColor());\n}\npublic static void main(String[] args) {\nnew ConstructorParameterized().show();\n}\n}\n</code></pre> <pre><code>Coche: 4 ruedas y de color azul\nMoto: 2 ruedas y de color rojo\n</code></pre> <p>Al tener par\u00e1metros el constructor, esto nos permite poder crear objetos diferentes.</p> <p>En los IDEs, se puede generar el constructor con par\u00e1metros de forma autom\u00e1tica.</p> <p>Los constructores se pueden sobrecargar, por lo tanto una clase puede tener varios constructores, en el ejemplo anterior la clase Vehicle mantiene el constructor por defecto, adem\u00e1s del constructor con par\u00e1metros.</p> <pre><code>public class ShowConstructors {\npublic void show(){\nVehicle car, moto;\ncar = new Vehicle();\nmoto = new Vehicle(2, \"rojo\");\nSystem.out.printf(\"Coche: %d ruedas y de color %s\\n\", car.getWheelCount(), car.getColor());\nSystem.out.printf(\"Moto: %d ruedas y de color %s\\n\", moto.getWheelCount(), moto.getColor());\n}\n}\n</code></pre> <p>Si una clase no tiene constructor, Java crea uno por defecto. Los atributos se inicializan a su valor por defecto en funci\u00f3n del tipo que posean:</p> <ul> <li>Tipos num\u00e9ricos enteros: 0</li> <li>Tipos num\u00e9ricos decimales: 0</li> <li>Caracteres: Car\u00e1cter nulo (C\u00f3digo Unicode 0)</li> <li>Booleanos: false</li> <li>Referencias a objetos: null</li> </ul> <p>Solo se inicializan los atributos, las variables locales de los m\u00e9todos no son inicializados por defecto.</p> <p>\u00a1OJO!</p> <p>Java solamente crea un constructor cuando la clase no tiene ninguno, pero si la clase tiene un constructor, aunque sea con par\u00e1metros, Java ya no crea ninguno por defecto.</p> <p>Si la clase posee alg\u00fan constructor con par\u00e1metros pero se usa Class() el compilador nos da un mensaje de error de que el constructor no est\u00e1 definido.</p> Ejercicio 3 <p>Crea un paquete llamado exercise03 y copia la clase persona del ejercicio anterior. Crea un m\u00e9todo constructor para dicha clase que asigne los siguientes valores a sus atributos:</p> <p>nombre = \"Sin nombre\" edad = 0 altura = 0.0f ocupacion = \"sin ocupaci\u00f3n\"</p> <p>Crea un Main que declare un objeto de tipo persona utilizando el constructor, para posteriormente mostrar el contenido de sus atributos por pantalla.</p> Ejercicio 4 <p>Crea un paquete llamado exercise04 y copie la clase persona del ejercicio anterior. Crea un m\u00e9todo constructor con par\u00e1metros sin anular el ya creado. Realiza un Main que declare un objeto tipo persona utilizando dicho constructor y muestre el contenido posteriormente por pantalla.</p>"},{"location":"bloque_i/tema_4/page-3/#visibilidad","title":"Visibilidad","text":"<p>La visibilidad de los atributos y m\u00e9todos de una clase se establece utilizando los modificadores de acceso.</p> <p>Los modificadores de acceso permiten dar un nivel de seguridad mayor a nuestras aplicaciones restringiendo el acceso a diferentes atributos y m\u00e9todos asegur\u00e1ndonos que el cliente no va a consultar el valor de un atributo que no debe, no va a modificar incorrectamente el valor de un atributo o que no va a utilizar un m\u00e9todo que no le est\u00e9 permitido. Cuando nos referimos al t\u00e9rmino cliente es cualquier programador que utilice nuestras clases.</p> <p>Tal y como vimos en el apartado 2. Modificadores de acceso, se resume su funcionamiento en la siguiente tabla:</p> Private Friendly Public Misma clase x x x Mismo paquete x x Otro paquete x <p>Veamos un ejemplo de la clase Vehicle que est\u00e1 en el mismo paquete que una clase cliente Main.</p> <p>Vamos a comprobar la visibilidad que tiene la clase Main sobre la clase Vehicle en funci\u00f3n de los modificadores de acceso. Tal y como podemos observar en la tabla anterior, tendr\u00e1 acceso a public y a friendly pero no a private</p> VehicleMain <pre><code>public class Vehicle {\nprivate int wheelCount; // N\u00ba ruedas\nprivate double speed; // Velocidad\nprivate String color; // Color del veh\u00edculo\npublic Vehicle(int wheelCount, String color) {\nthis.wheelCount = wheelCount;\nthis.color = color;\nspeed = 0;\n}\nint getWheelCount() {\nreturn wheelCount;\n}\npublic void setWheelCount(int wheelCount) {\nthis.wheelCount = wheelCount;\n}\npublic String getColor() {\nreturn color;\n}\npublic void setColor(String color) {\nthis.color = color;\n}\npublic double getSpeed() {\nreturn speed;\n}\npublic void accelerate(double amount){ // acelerar\nspeed += amount;\n}\npublic void brake(double amount){ // frenar\nspeed -= amount;\n}\n}\n</code></pre> <pre><code>public class Main {\npublic void showVisibility(){\nVehicle car = new Vehicle(4, \"azul\");\nSystem.out.printf(\"El coche tiene %d ruedas\\n\", car.getWheelCount()); //(1)!\ncar.accelerate(100); //(2)!\nSystem.out.printf(\"El coche va a %.2f km/h\\n\", car.speed); //(3)!\n}\n}\n</code></pre> <ol> <li>getWheelCount es visible porque es friendly y la clase Main est\u00e1 en el mismo paquete que la clase Vehicle.</li> <li>accelerate es visible porque es public.</li> <li>Error de compilaci\u00f3n: speed no es visible porque es private</li> </ol> Ejercicio 5 <p>Cree un paquete exercise05 copiando la clase Persona del exercise04 y modifica al acceso a algunos de sus m\u00e9todos, haci\u00e9ndolos public, private o friendly y realiza las siguientes operaciones y observa si da o no error, justificando sus respuesta con comentarios:</p> <ul> <li>Crea un m\u00e9todo main dentro de la clase Persona y crea un objeto persona, intente acceder a todos sus m\u00e9todos.</li> <li>Crea una clase Main dentro del paquete exercise_05 y realice la misma operaci\u00f3n anterior</li> <li>Crea un paquete llamado exercise05_bis y una clase Main realizando la misma operaci\u00f3n anterior</li> </ul>"},{"location":"bloque_i/tema_4/page-3/#instanceof","title":"instanceof","text":"<p>El operador instanceof permite comprobar si un determinado objeto pertenece a una clase concreta. Se utiliza de esta forma:</p> <pre><code>object instanceof class\n</code></pre> <p>Devuelve true si el objeto pertenece a dicha clase.</p> <pre><code>public class InstanceOf {\npublic void show(){\nVehicle vehicle = new Vehicle();\nSystem.out.println(vehicle instanceof  Vehicle);\n}\npublic static void main(String[] args) {\nnew InstanceOf().show();\n}\n}\n</code></pre>"},{"location":"bloque_i/tema_4/page-4/","title":"4 Referencias","text":""},{"location":"bloque_i/tema_4/page-4/#introduccion","title":"Introducci\u00f3n","text":"<p>Una referencia en cualquier lenguaje de programaci\u00f3n hace alusi\u00f3n a la posici\u00f3n en memoria RAM que tiene una variable.</p> <p>Una variable es conceptualmente un recipiente donde guardamos un dato. Java es un lenguaje fuertemente tipado. Las variables se definen siempre con un tipo asociado. No se puede meter en una variable ning\u00fan dato que no sea del tipo con que se defini\u00f3.</p> <p>Una variable es un lugar en la memoria donde se guarda un dato. Para ser exacto, este lugar en la memoria es la Pila o Stack. En el caso de los datos primitivos, como en <code>int i = 5;</code> hay cuatro bytes en la Pila donde se almacena el n\u00famero 5. Pero cuando se crea un objeto en Java, el objeto se guarda en una parte de la memoria llamada Heap. Cuando asignamos el objeto a una variable como en <code>Vehicle car=new Vehicle();</code>, lo que guardamos en car es la direcci\u00f3n de memoria Heap donde est\u00e1 el objeto.</p> <p>Stack en java es una secci\u00f3n de memoria que contiene m\u00e9todos, variables locales y variables de referencia. La memoria de pila siempre se referencia en el orden de \u00faltimo en entrar primero en salir. Las variables locales se crean en la pila.</p> <p>Heap es una secci\u00f3n de memoria que contiene objetos y tambi\u00e9n puede contener variables de referencia. Los atributos se crean en el heap.</p>"},{"location":"bloque_i/tema_4/page-4/#representacion-en-memoria-de-tipos-primitivos","title":"Representaci\u00f3n en memoria de tipos primitivos","text":"<p>Veamos paso a paso un ejemplo:</p> <ul> <li> <p>Cuando se declara una variable de un tipo primitivo, el compilador reserva un \u00e1rea de memoria para ella:</p> <pre><code>int i, j;\n</code></pre> <p> Figura 1 - Referencia de primitivos </p> </li> <li> <p>Cuando se asigna un valor, \u00e9ste es escrito en el \u00e1rea reservada:</p> <pre><code>i = 16;\nj = 3;\n</code></pre> <p> Figura 2 - Referencia de primitivos </p> </li> <li> <p>La asignaci\u00f3n entre variables significa copiar el contenido de una variable en la otra:</p> <pre><code>i = j;\n</code></pre> <p> Figura 3 - Referencia de primitivos </p> </li> <li> <p>La comparaci\u00f3n entre variables compara los contenidos de las mismas:</p> <pre><code>i == j; // true porque 3 es igual a 3\n</code></pre> </li> </ul> PrimitivesConsola <pre><code>public class Primitives {\npublic void show(){\nint i = 10, j = 20;\nSystem.out.printf(\"Valor de la variable i: %d\\n\", i);\nSystem.out.printf(\"Valor de la variable j: %d\\n\", j);\ni = j;\nSystem.out.printf(\"Valor de la variable i: %d\\n\", i);\nSystem.out.printf(\"Valor de la variable j: %d\\n\", j);\nSystem.out.printf(\"i y j%s tiene el mismo contenido\", i == j ? \"\" : \" no\");\n}\npublic static void main(String[] args) {\nnew Primitives().show();\n}\n}\n</code></pre> <pre><code>Valor de la variable i: 10\nValor de la variable j: 20\nValor de la variable i: 20\nValor de la variable j: 20\ni y j tiene el mismo contenido\n</code></pre>"},{"location":"bloque_i/tema_4/page-4/#representacion-en-memoria-de-objetos","title":"Representaci\u00f3n en memoria de objetos","text":"<p>Supongamos que tenemos una clase Complex con dos atributos: r, i.</p> <ul> <li> <p>Cuando se declara una variable de un objeto, el compilador reserva un \u00e1rea de memoria para ella. Mientras no se cree ning\u00fan objeto con el operador new, lo que contendr\u00e1 ser\u00e1 null. La palabra reservada null indica que una variable que referencia a un objeto se encuentra de momento sin referenciar a ninguno:</p> <pre><code>Complex cl;\n</code></pre> <p> Figura 4 - Referencia de objetos </p> </li> <li> <p>Cuando se crea el objeto llamando la constructor con el operador new, lo que se guarda en la variable c1 es la direcci\u00f3n de memoria donde se ha almacenado el objeto en el heap, es decir, la diferencia entre los tipos primitivos y los objetos es que en los primitivos la variable almacena el valor y en los objetos, la variable almacena la direcci\u00f3n de memoria donde se encuentra el objeto.</p> <pre><code>c1 = new Complex(7.2, 2.4);\n</code></pre> <p> Figura 5 - Referencia de objetos </p> </li> <li> <p>La asignaci\u00f3n entre variables de objetos significa copiar la direcci\u00f3n de memoria donde se encuentra el objeto:</p> <pre><code>Complex c2 = c1;\n</code></pre> <p>En este caso, el valor de la variable c2 es 0x2A18, por lo tanto, ambas variables apuntan al mismo objeto. Si una de ellas modifica alg\u00fan valor del objeto, tambi\u00e9n le afectar\u00e1 a la otra variable. Por ejemplo, si a c2 le cambiamos el valor de r a 9.7, si consultamos el valor de r de c1, tambi\u00e9n valdr\u00e1 9.7, en lugar de 7.2.</p> </li> <li> <p>La comparaci\u00f3n entre referencias no compara los contenidos de los objetos sino las direcciones de memoria, es decir, si apuntan al mismo sitio.</p> <pre><code>c2 == c1; // true porque apuntan al mismo sitio\nComplex c3 = new Complex(7.2, 2.4);\nc3 == c1; // false porque aunque tengan los mismos valores, no apuntan al mismo sitio\n</code></pre> <p>Para comparar el contenido de los objetos, se utiliza el m\u00e9todo equals:</p> <pre><code>c3.equals(c1); // true porque los contenidos de los objetos son los mismos\n</code></pre> </li> </ul> ComplexMainConsole <pre><code>public class Complex {\ndouble r;\ndouble j;\npublic Complex(double r, double j) {\nthis.r = r;\nthis.j = j;\n}\n}\n</code></pre> <pre><code>public class Objects {\npublic void show(){\nComplex c1 = new Complex(7.2, 2.3);\nComplex c2 = c1;\nSystem.out.printf(\"C1 -&gt; r: %.2f j: %.2f\\n\", c1.r, c1.j);\nSystem.out.printf(\"C2 -&gt; r: %.2f j: %.2f\\n\", c2.r, c2.j);\nc1.r = 10;\nc2.j = 7.6;\nSystem.out.printf(\"C1 -&gt; r: %.2f j: %.2f\\n\", c1.r, c1.j);\nSystem.out.printf(\"C2 -&gt; r: %.2f j: %.2f\\n\", c2.r, c2.j);\nComplex c3 = new Complex(10, 7.6);\nSystem.out.printf(\"C3 -&gt; r: %.2f j: %.2f\\n\", c3.r, c3.j);\nSystem.out.printf(\"c1 == c2 -&gt; %b\\n\", c1 == c2);\nSystem.out.printf(\"c1 == c3 -&gt; %b\\n\", c1 == c3);\nSystem.out.printf(\"c1 equals c3 -&gt; %b\\n\", c1.equals(c3));\n}\npublic static void main(String[] args) {\nnew Objects().show();\n}\n}\n</code></pre> <pre><code>C1 -&gt; r: 7,20 j: 2,30\nC2 -&gt; r: 7,20 j: 2,30\nC1 -&gt; r: 10,00 j: 7,60\nC2 -&gt; r: 10,00 j: 7,60\nC3 -&gt; r: 10,00 j: 7,60\nc1 == c2 -&gt; true\nc1 == c3 -&gt; false\nc1 equals c3 -&gt; false\n</code></pre>"},{"location":"bloque_i/tema_4/page-4/#garbage-collector","title":"Garbage Collector","text":"<p>Garbage Collector (recolector de basura) es un programa que se ejecuta en el Java Virtual Machine que elimina los objetos que ya no est\u00e1n siendo utilizados por una aplicaci\u00f3n Java. Es una forma de gesti\u00f3n autom\u00e1tica de la memoria.</p> <p>Un objeto es elegible para el recolector de basura cuando deja de existir alguna referencia hacia \u00e9l. Veamos algunos ejemplos.</p> <pre><code>Complex c1 = new Complex(7.2, 2.4);\n//...\nc1 = null;\n//...\n</code></pre> <p>Existe un objeto referenciado por la variable c1. Cuando la variable c1 pierde la referencia porque se le asigna el null, se pierde cualquier forma de acceder al objeto, de modo que pasa a ser elegible para el recolector de basura.</p> <pre><code>Complex c1 = new Complex(7.2, 2.4);\nComplex c2 = c1;\n// ...\nc1 = null;\n// ...\n</code></pre> <p>En este segundo ejemplo, el objeto no pasa a ser elegible para ser recolectado pues aunque la variable c1 haya perdido la referencia porque se le asigna el null, todav\u00eda existe una referencia hacia el objeto por la variable c2</p> <pre><code>Complex c1 = new Complex(7.2, 2.4);\n//...\nc1 = new Complex(8.3, 2.7);\n//...\n</code></pre> <p>En este otro ejemplo, la variable c1 es reasignada, es decir, se le asigna otro objeto mediante el operador  new, por  lo  tanto  se  pierde  cualquier  referencia  al  objeto  creado  al  principio  <code>new Complex(7.2 , 2.4)</code> por lo que dicho objeto pasa a ser elegible para el recolector de basura.</p>"},{"location":"bloque_i/tema_4/page-5/","title":"5 This","text":""},{"location":"bloque_i/tema_4/page-5/#introduccion","title":"Introducci\u00f3n","text":"<p>Cuando se llama a un m\u00e9todo, se pasa autom\u00e1ticamente un argumento impl\u00edcito que es una referencia al objeto invocado, es decir, el objeto sobre el que se llama el m\u00e9todo. Esta referencia se llama this, es decir, this es una variable que hace referencia al objeto actual.</p> <p>Veamos los distintos usos que puede tener:</p>"},{"location":"bloque_i/tema_4/page-5/#para-acceder-a-un-atributo-del-objeto-actual","title":"Para acceder a un atributo del objeto actual","text":"<p>Centr\u00e9monos en el getter del atributo color de la clase Vehicle:</p> <pre><code>public String getColor(){\nreturn color;\n}\n</code></pre> <p>color es un atributo de la clase Vehicle. El m\u00e9todo getColor() de la clase Vehicle puede acceder perfectamente al atributo color  ya  que  cuando  el  m\u00e9todo  getColor()  es  llamado,  recibe  de forma impl\u00edcita el objeto actual, es decir, el objeto sobre el que se llama el m\u00e9todo. Esto le permite al m\u00e9todo getColor() poder acceder a todos los atributos de la clase y llamar a cualquier m\u00e9todo de la misma.</p> <p>Como color es un atributo de la clase Vehicle, tambi\u00e9n pod\u00edamos haber accedido a \u00e9l como this.colour. Pero en realidad, cuando desde un m\u00e9todo se accede a un atributo, se usa this de forma impl\u00edcita, es decir, que aunque no escribamos this, el compilador lo sobreentiende. Por eso  en  la  pr\u00e1ctica,  solo  se  indica  si  es  imprescindible.  Veamos  un  ejemplo  en  el  que  sea imprescindible:</p> <pre><code>public void setColor(String color){\nthis.color = color;\n}\n</code></pre> <p>En este caso, nos encontramos con dos variables que se llaman color: el atributo y el par\u00e1metro del m\u00e9todo. El shadow (sombra) de variables se refiere a la pr\u00e1ctica en programaci\u00f3n de utilizar dos variables con el mismo nombre dentro de \u00e1mbitos que se superponen. La variable con el alcance de nivel superior se oculta porque la variable con el alcance de nivel inferior la anula. La variable de nivel superior se dice entonces que es \"sombreada\". En nuestro ejemplo, el atributo es  \"sombreado\" por  el  par\u00e1metro,  es  decir,  cuando  en  el  m\u00e9todo  accedemos  a  colour,  es  el par\u00e1metro al que nos estamos refiriendo. Para poder acceder al atributo, necesitamos utilizar la palabra this: <code>this.colour</code>. \u00bfQu\u00e9 es lo que estamos haciendo entonces con esta l\u00ednea de c\u00f3digo: <code>this.colour = colour</code>? Pues le estamos asignando el valor del par\u00e1metro al atributo, es decir, estamos actualizando el color del objeto actual con el color pasado por par\u00e1metro al m\u00e9todo setColor.</p>"},{"location":"bloque_i/tema_4/page-5/#para-invocar-un-constructor","title":"Para invocar un constructor","text":"<p>Un constructor puede llamar a otro constructor de la clase utilizando this, pero esta llamada solamente puede estar en la primera linea de c\u00f3digo.</p> <pre><code>public class Vehicle{\n//...\npublic Vehicle(){\nthis(4, \"Blanco\");\n}\npublic Vehicle(int wheelCount, String color) {\nthis.wheelCount = wheelCount;\nthis.color = color;\nspeed = 0;\n}\n//...\n}\n</code></pre>"},{"location":"bloque_i/tema_4/page-5/#como-referencia-al-objeto-actual","title":"Como referencia al objeto actual","text":"<p>Dentro de la clase, siempre que queramos obtener una referencia al objeto actual, podemos utilizar this.</p> <p>Supongamos que queremos modificar el m\u00e9todo acelerar los veh\u00edculos para que devuelvan el objeto actual con la velocidad modificada por la aceleraci\u00f3n:</p> <pre><code>public Vehicle accelerate(double amount){\nspeed += amount;\nreturn this;\n}\n</code></pre> <p>Veamos m\u00e1s ejemplos del uso de this como referencia al objeto actual. Vamos a a\u00f1adir los m\u00e9todo nuevos a la clase Vehicle:</p> <ul> <li>addSpeeds: devuelve la suma de dos velocidades, la del objeto actual y la del veh\u00edculo pasado como par\u00e1metro.</li> <li>doubleSpeed: dobla la velocidad del objeto actual utilizando el m\u00e9todo addSpeeds.</li> </ul> <pre><code>public double addSpeeds(Vehicle vehicle){\nreturn speed + vehicle.speed;\n}\npublic void doubleSpeed(){\nspeed = addSpeeds(this);\n}\n</code></pre> <p>Para doblar la velocidad utilizando el m\u00e9todo addSpeeds, tenemos que pasarle a este m\u00e9todo la referencia al objeto actual para que sume la velocidad consigo mismo, doblando de esta forma su propia velocidad.</p> MainConsola <pre><code>public class Main{\npublic void showThisCurrentObject(){\nVehicle car1, car2;\ncar1 = new Vehicle(4, \"azul\");\ncar2 = new Vehicle(2, \"rojo\");\ncar1.accelerate(90.3);\ncar2.accelerate(120.5);\nSystem.out.printf(\"Velocidad del coche1: %.2f\\n\", car1.getSpeed());\nSystem.out.printf(\"Velocidad del coche2: %.2f\\n\", car2.getSpeed());\nSystem.out.printf(\"Suma de las velocidades de los dos coches: %.2f\\n\", car1.addSpeeds(car2));\ncar1.doubleSpeed();\nSystem.out.printf(\"El coche1 ha doblado su velocidad: %.2f\\n\", car1.getSpeed());\n}\npublic static main(String[] args){\nnew Main().showThisCurrentObject();\n}\n}\n</code></pre> <pre><code>Velocidad del coche1: 90,30\nVelocidad del coche2: 120,50\nSuma de las velocidades de los dos coches: 210,80\nEl coche1 ha doblado su velocidad: 180,60\n</code></pre> <p>El m\u00e9todo doubleSpeed de la clase Vehicle puede llamar perfectamente al m\u00e9todo addSpeeds ya que cuando el m\u00e9todo doubleSpeed es llamado, recibe de forma impl\u00edcita el objeto actual, es decir, el objeto sobre el que se llama el m\u00e9todo. Esto le permite al m\u00e9todo doubleSpeed poder acceder a todos los atributos de la clase y llamar a cualquier m\u00e9todo de la misma.</p> <p>Como addSpeeds es un m\u00e9todo de la clase Vehicle, el m\u00e9todo doubleSpeed pod\u00eda haberlo llamado tambi\u00e9n utilizando el this: <code>this.addSpeeds(this)</code>, pero en realidad, cuando desde un m\u00e9todo se llama a otro de la clase, se usa this de forma impl\u00edcita, es decir, que aunque no escribamos this, el compilador lo sobreentiende. Por eso en la pr\u00e1ctica, solo se indica si es imprescindible.</p> Ejercicio 6 <p>Crea un paquete llamado exercise06 y copia la clase Persona del paquete exercise04 y crea un constructor que reciba todos los par\u00e1metros excepto la ocupaci\u00f3n, siendo su valor por defecto \"sin ocupaci\u00f3n\". Realice dicho constructor y los ya creados haciendo uso de la referencia this. Crea una clase Main para probar todos los constructores.</p> Ejercicio 7 <p>Crea un paquete llamado exercise07 y copia la clase Persona del ejercicio anterior y crea un atributo decimal para almacenar el sueldo. Crea un m\u00e9todo sumarSueldo que reciba una persona por par\u00e1metro. Dicho m\u00e9todo tiene que incrementar el sueldo con el sueldo de la persona recibida como par\u00e1metro. Crear otro m\u00e9todo, doblarSueldo, que doble el sueldo utilizando el m\u00e9todo sumarSueldo y this. Crea un main para probarlos.</p>"},{"location":"bloque_i/tema_4/page-6/","title":"6 T\u00e9cnicas","text":""},{"location":"bloque_i/tema_4/page-6/#encadenamiento-de-llamadas-a-metodos","title":"Encadenamiento de llamadas a m\u00e9todos","text":"<p>Se emplea cuando invocamos a un m\u00e9todo de un objeto que nos devuelve como resultado otro objeto al que podemos volver a invocar otro m\u00e9todo y as\u00ed encadenar varias operaciones:</p> <pre><code>public class CallsToMethods {\npublic void show(){\nBoolean b;\nString string;\nstring = \"EntornosDeDesarrollo\";\nSystem.out.println(string.substring(10).toUpperCase()); //DESARROLLO\nb = Boolean.TRUE;\nSystem.out.println(b.toString().charAt(2));\n}\npublic static void main(String[] args) {\nnew CallsToMethods().show();\n}\n}\n</code></pre> <p>En este ejemplo, el m\u00e9todo <code>substring(10)</code>  est\u00e1 devolviendo una subcadena de la cadena string a partir del car\u00e1cter 10 empezando en 0, es decir, \"Desarrollo\", al que se le invoca luego el m\u00e9todo  <code>toUpperCase</code>  devolviendo como resultado la cadena \"DESARROLLO\".</p> <p>Y el m\u00e9todo <code>toString()</code> de la variable b de tipo Boolean est\u00e1 devolviendo la cadena \"true\" a la que se le encadena el m\u00e9todo  <code>charAt(2)</code> devolviendo el car\u00e1cter 'u'.</p>"},{"location":"bloque_i/tema_4/page-6/#sintaxis-fluida","title":"Sintaxis fluida","text":"<p>Cuando un m\u00e9todo modifica alg\u00fan atributo del objeto, se puede devolver el objeto con un return para  que  dicho  m\u00e9todo  pueda  insertarse  en  una  expresi\u00f3n.  Esto  permite  encadenar  otras llamadas de m\u00e9todos consiguiendo que el c\u00f3digo sea m\u00e1s corto, m\u00e1s legible y m\u00e1s f\u00e1cil de manejar para los programadores.</p> <p>Veamos un ejemplo de clases, una con sintaxis fluida y otra sin ella para ver la diferencia.</p> Vehicle sin fluidezVehicle con sintaxis fluidaMainConsola <pre><code>public class Vehicle {\nprivate int wheelCount; // N\u00ba ruedas\nprivate double speed; // Velocidad\nprivate String color; // Color del veh\u00edculo\npublic Vehicle(){\nthis(4, \"Blanco\");\n}\npublic Vehicle(int wheelCount, String color) {\nthis.wheelCount = wheelCount;\nthis.color = color;\nspeed = 0;\n}\npublic int getWheelCount() {\nreturn wheelCount;\n}\npublic void setWheelCount(int wheelCount) {\nthis.wheelCount = wheelCount;\n}\npublic String getColor() {\nreturn color;\n}\npublic void setColor(String color) {\nthis.color = color;\n}\npublic double getSpeed() {\nreturn speed;\n}\npublic void accelerate(double amount){ // acelerar\nspeed += amount;\n}\npublic void brake(double amount){ // frenar\nspeed -= amount;\n}\n}\n</code></pre> <pre><code>public class Vehicle2 {\nprivate int wheelCount; // N\u00ba ruedas\nprivate double speed; // Velocidad\nprivate String color; // Color del veh\u00edculo\npublic Vehicle2(){\nthis(4, \"Blanco\");\n}\npublic Vehicle2(int wheelCount, String color) {\nthis.wheelCount = wheelCount;\nthis.color = color;\nspeed = 0;\n}\npublic int getWheelCount() {\nreturn wheelCount;\n}\npublic void setWheelCount(int wheelCount) {\nthis.wheelCount = wheelCount;\n}\npublic String getColor() {\nreturn color;\n}\npublic Vehicle2 setColor(String color) {\nthis.color = color;\nreturn this;\n}\npublic double getSpeed() {\nreturn speed;\n}\npublic Vehicle2 accelerate(double amount){ // acelerar\nspeed += amount;\nreturn this;\n}\npublic Vehicle2 brake(double amount){ // frenar\nspeed -= amount;\nreturn this;\n}\n}\n</code></pre> <pre><code>public class FluidSyntax {\npublic void show(){\nVehicle car1;\nVehicle2 car2;\ncar1 = new Vehicle(4, \"rojo\");\ncar2 = new Vehicle2(4, \"azul\");\ncar1.accelerate(120.55);\ncar1.brake(20.32);\nSystem.out.printf(\"Velocidad del coche1: %.2f\\n\", car1.getSpeed());\nSystem.out.printf(\"Velocidad del coche2: %.2f\\n\", car2.accelerate(120.55).brake(20.32).getSpeed());\n}\npublic static void main(String[] args) {\nnew FluidSyntax().show();\n}\n}\n</code></pre> <pre><code>Velocidad del coche1: 100,23\nVelocidad del coche2: 100,23\n</code></pre>"},{"location":"bloque_i/tema_4/page-6/#invariante-de-una-clase","title":"Invariante de una clase","text":"<p>El invariante de una clase es el conjunto de restricciones que deben cumplir todos los objetos que se instancien de dicha clase, como por ejemplo:</p> <ul> <li>Restricciones sobre los valores que pueden tomar los atributos de la clase. Ejemplo: el atributo wheelCount de la clase Vehicle tiene que ser mayor que 0.</li> <li>Restricciones que afecten a m\u00e1s de un atributo. Por ejemplo, si una clase modela un rango de valores, el atributo que corresponda al l\u00edmite superior del rango debe ser forzosamente mayor o igual que el atributo que corresponda al l\u00edmite inferior del rango, dada la definici\u00f3n matem\u00e1tica del rango.</li> <li>Restricciones con respecto a los objetos con los que se relaciona. Ejemplo: un empleado tiene un atributo que es objeto de la clase Empresa donde trabaja. Una restricci\u00f3n posible ser\u00eda que dicha empresa no pueda ser nula.</li> </ul> <p>Los m\u00e9todos constructores de una clase deben respetar el invariante de la clase a la hora de construir los objetos.</p> <p>Los m\u00e9todos p\u00fablicos de la clase tambi\u00e9n deben respetar el invariante. Un m\u00e9todo puede no respetar el invariante en el transcurso de la ejecuci\u00f3n, pero cuando el m\u00e9todo finalice, el invariante se tiene que cumplir, es decir, es perfectamente viable que un m\u00e9todo para alcanzar su objetivo pueda perder de forma temporal el invariante pero siempre y cuando finalice con el invariante cumplido, es decir, antes de la llamada el invariante se debe cumplir y despu\u00e9s de la llamada tambi\u00e9n, durante la ejecuci\u00f3n del mismo puede no satisfacerse.</p> <p>\u00danicamente se deben satisfacer los invariantes en las llamadas a m\u00e9todos p\u00fablicos, la ejecuci\u00f3n de m\u00e9todos privados de la misma clase pueden saltarse esta norma aunque no es aconsejable.</p> <p>Definir invariantes de clase puede ayudar a los programadores y controladores de calidad a localizar m\u00e1s errores durante las pruebas de software.</p>"},{"location":"bloque_i/tema_4/page-6/#encapsulamiento","title":"Encapsulamiento","text":"<p>La encapsulaci\u00f3n es un principio fundamental de la programaci\u00f3n orientada a objetos que consiste en ocultar el estado o los atributos de un objeto y obligar a que toda interacci\u00f3n se realice a trav\u00e9s de los m\u00e9todos del objeto definidos en su clase para conservar su invariante.</p> <p>El encapsulamiento se consigue utilizando los modificadores de acceso. Se recomienda que los atributos de una clase sean privados, por lo tanto, aquellos atributos que se permitan consultar deben tener sus propios m\u00e9todos get, y los que se permitan modificar, deben tener sus propios m\u00e9todos set. Hacer uso de este convenio nos facilitar\u00e1 trabajar con el resto del mundo y nos permitir\u00e1 ampliar las capacidades de nuestro c\u00f3digo utilizando frameworks existentes que hacen uso del convenio y que si no seguimos no podremos utilizar.</p> VehicleMain <pre><code>public class Vehicle {\npublic int wheelCount; // N\u00ba ruedas\npublic double speed; // Velocidad\npublic String color; // Color del veh\u00edculo\npublic Vehicle(int wheelCount, String color) {\nthis.wheelCount = wheelCount;\nthis.color = color;\nspeed = 0;\n}\npublic void accelerate(double amount){ // acelerar\nspeed += amount;\n}\npublic void brake(double amount){ // frenar\nspeed -= amount;\n}\n}\n</code></pre> <pre><code>public class NoEncapsulation {\npublic void show(){\nVehicle car = new Vehicle(4, \"azul\");\ncar.accelerate(90.54);\nSystem.out.printf(\"Velocidad: %.2f\\n\", car.speed);\ncar.speed = 120; // Se accede directamente\nSystem.out.printf(\"Velocidad: %.2f\\n\", car.speed);\n}\npublic static void main(String[] args) {\nnew NoEncapsulation().show();\n}\n}\n</code></pre> <p>Podemos observar que no se est\u00e1 cumpliendo el principio de encapsulamiento ya que el cliente est\u00e1 accediendo directamente al atributo speed modificando incorrectamente su valor ya que la velocidad solamente se debe modificar acelerando o frenando el veh\u00edculo.</p> <p>El ejemplo anterior pero cumpliendo encapsulamiento ocultando el estado o los atributos del objeto y obligando a toda interacci\u00f3n se realice a trav\u00e9s de los m\u00e9todos del objeto definidos en su clase, ser\u00eda tal y como hemos estado viendo en ejemplos anteriores, es decir, haciendo privado sus atributos y creando los m\u00e9todos getters y setters necesarios.</p> Vehicle <pre><code>public class Vehicle{\nprivate int wheelCount; // N\u00ba ruedas\nprivate double speed; // Velocidad\nprivate String color; // Color del veh\u00edculo\npublic Vehicle(){\nthis(4, \"Blanco\");\n}\npublic Vehicle(int wheelCount, String color) {\nthis.wheelCount = wheelCount;\nthis.color = color;\nspeed = 0;\n}\npublic int getWheelCount() {\nreturn wheelCount;\n}\npublic void setWheelCount(int wheelCount) {\nthis.wheelCount = wheelCount;\n}\npublic String getColor() {\nreturn color;\n}\npublic void setColor(String color) {\nthis.color = color;\n}\npublic double getSpeed() {\nreturn speed;\n}\npublic void accelerate(double amount){ // acelerar\nspeed += amount;\n}\npublic void brake(double amount){ // frenar\nspeed -= amount;\n}\n}\n</code></pre>"},{"location":"bloque_i/tema_4/page-6/#metodo-tostring","title":"M\u00e9todo toString","text":"<p>El m\u00e9todo <code>toString()</code> se utiliza para obtener una cadena de texto que represente al objeto. Lo veremos en m\u00e1s profundidad en el tema de herencia. Veamos su uso:</p> VehicleMain <pre><code>public class Vehicle {\n//...\n@Override\npublic String toString() {\nreturn \"Vehicle [wheelCount =\" + wheelCount + \", speed=\" + speed + \", color =\" + color + \"]\";\n}\n}\n</code></pre> <pre><code>public static void main(String[] args){\nVehicle car = new Vehicle(4, \"rojo\");\nSystem.out.println(car.toString());\n}\n</code></pre> <p>Algunos IDEs pueden generar toString() de forma autom\u00e1tica.</p> <p>El m\u00e9todo <code>System.out.println</code> y sus derivados llaman autom\u00e1ticamente al m\u00e9todo toString si se le pasa el objeto</p> <pre><code>public static void main(String[] args){\nVehicle car = new Vehicle(4, \"rojo\");\nSystem.out.println(car); // Es lo mismo que car.toString()\n}\n</code></pre>"},{"location":"bloque_i/tema_4/page-7/","title":"Ejercicios","text":"Ejercicio 8 <p>Crea un paquete llamado exercise08 y realiza una clase de nombre Alumno que cumpla estas especificaciones:</p> <ul> <li>El constructor admite como argumentos el n\u00famero de matr\u00edcula y el nombre y almacena \u00e9stos en los correspondientes atributos.</li> </ul> <p>Contiene los siguientes m\u00e9todos:</p> <ul> <li>ponNota: con dos argumentos de tipo double que corresponden a dos notas de su examen. El m\u00e9todo almacena \u00e9stos en dos atributos de tipo double.</li> <li>dameMedia: retorna la media de las notas.</li> <li>toString: retorna una descripci\u00f3n del alumno con todos sus datos, incluida la nota media</li> </ul> <p>Realiza una aplicaci\u00f3n de nombre VerAlumno que solicite los datos de un alumno y sus notas, construya un objeto de la clase Alumno y muestre los datos de \u00e9ste.</p> Ejercicio 9 <p>Crea un paquete llamado exercise09 y realiza una clase que represente una pel\u00edcula en DVD de nombre DVDCine con los atributos necesarios para mostrar su ficha. La pel\u00edcula tiene dos nombres, el original y el traducido. Esta clase contar\u00e1 con un constructor que admite como argumentos todos los atributos de la clase.</p> <p>Escribe los siguientes m\u00e9todos para la clase DVDCine:</p> <ul> <li>esThriller: este m\u00e9todo devuelve cierto si la pel\u00edcula pertenece a este g\u00e9nero cinematogr\u00e1fico (tratar los g\u00e9neros de las pel\u00edculas como enum)</li> <li>tieneResumen: devuelve cierto si la ficha de la pel\u00edcula tiene el resumen escrito.</li> <li>muestraDuracion: devuelve una cadena con la duraci\u00f3n en minutos. Ejemplo: 114 min.</li> <li> <p>toString: este m\u00e9todo devuelve una descripci\u00f3n completa de la pel\u00edcula de la siguiente manera:</p> <p>UN FINAL MADE IN HOLLYWOOD (HOLLYWOOD ENDING) De: Woody Allen Con: Woody Allen y George Hamilton Comedia - 114 min Resumen: Los Oscars ganados en el pasado por el ex-genio del cine Val Waxman...</p> </li> </ul> <p>Si la pel\u00edcula no tiene resumen, la \u00faltima l\u00ednea no aparece. Escribe una aplicaci\u00f3n que solicite los datos de una pel\u00edcula, genere un objeto DVD y pruebe todos los m\u00e9todos.</p> Ejercicio 10 <p>Realizar una clase de nombre Alimento en el paquete exercise10 cuyos objetivos representen alimentos. \u00c9stos tendr\u00e1n los atributos siguientes:</p> <ul> <li>Nombre</li> <li>Contenido en l\u00edpidos expresado en tanto por ciento</li> <li>Contenido en hidratos de carbono expresado en tanto por ciento</li> <li>Contenido en prote\u00ednas expresado en tanto por ciento</li> <li>Si es o no de origen animal</li> <li>Contenido en vitaminas expresado mediante un enum ALTO, MEDIO y BAJO.</li> <li>Contenido en minerales expresado con el mismo enum que las vitaminas.</li> </ul> <p>La clase tiene dos constructores: uno que admite como argumentos el nombre del alimento y otro que admite todos los atributos. La clase contiene los siguientes m\u00e9todos:</p> <ul> <li>esDietetico. Este m\u00e9todo retorna cierto si el alimento contiene menos del 20% de l\u00edpidos y el contenido en vitaminas no es bajo.</li> <li>toString. Retorna una descripci\u00f3n del alimentos, mostrando el contenido de vitaminas y minerales solo la inicial, es decir, si es ALTO solo muestra A.</li> <li>calculaContenidoEnergetico. Este m\u00e9todo retorna el contenido en Kcal de un gramo de alimento, considerando que un gramo de l\u00edpidos contiene 9.4Kcal, un gramo de prote\u00ednas contiene 5.3 y un gramo de hidratos de carbono contiene 4.1 Kcal.</li> <li>esRecomendableParaDeportistas. Este m\u00e9todo retorna cierto si el alimento cumple la siguiente lista: prote\u00ednas: 10-15%, l\u00edpidos: 30-35%, hidratos de carbono: 55-65%.</li> </ul> <p>Hacer una aplicaci\u00f3n en la que se creen dos alimentos usando los dos constructores. Mostrar los datos de los alimentos, sus contenidos energ\u00e9ticos, si son diet\u00e9ticos y recomendables para deportistas.</p> Ejercicio 11 <p>Realiza una clase de nombre Veh\u00edculo en el paquete exercise11 que contenga como atributos el modelo de tipo  String, la potencia de tipo double y la tracci\u00f3n a las cuatro ruedas(cRuedas) de tipo boolean. El constructor de la clase admitir\u00e1 como argumento el modelo. La clase tendr\u00e1 como m\u00e9todos de tipo get y set para la potencia y para la tracci\u00f3n a las cuatro ruedas. La clase contar\u00e1 con el m\u00e9todo toString el cual retorna los datos de cada veh\u00edculo y si tiene tracci\u00f3n a las cuatro ruedas. Realiza una aplicaci\u00f3n que solicite al usuario los datos de varios veh\u00edculos hasta que el usuario escriba como modelo la cadena \u201cfin\u201d en may\u00fascula o en min\u00fascula, en cuyo caso no se generar\u00e1 el objeto de la clase Veh\u00edculo. Una vez introducidos todos los veh\u00edculos, la aplicaci\u00f3n terminar\u00e1 mostrando los datos de todos los veh\u00edculos y emitiendo un mensaje de despedida.</p> Ejercicio 12 <p>Una tienda de inform\u00e1tica nos ha contratado para hacerle una aplicaci\u00f3n en java. De los  productos que tiene, quiere almacenar el modelo, el stock, el procesador y el precio, con las siguientes caracter\u00edsticas:</p> <ul> <li>El modelo tiene el siguiente formato: tres d\u00edgitos, guion y cuatro letras may\u00fasculas(incluida la \u00f1). Ejemplos:  112-ACER,334-HHPP,435-ASUS</li> <li>El procesador solamente puede ser de dos tipos: Intel o Amd. Los intel traen una memoria de 8Gb y los Amd de 4Gb.</li> <li>El precio en formato decimal y el stock. Ambos deben ser positivos.</li> </ul> <p>Crea la clase Producto en el paquete exercise12 haciendo lo siguiente:</p> <ul> <li>Los atributos no ser\u00e1n visibles desde fuera de la clase.</li> <li>Crea un m\u00e9todo para consultar el modelo que solamente sea visible para las clases del mismo paquete.</li> <li>Crea un m\u00e9todo para consultar el stock visible para todas las clases.</li> <li>Crea m\u00e9todos para actualizar los atributos que sean visibles tambi\u00e9n para las clases de otro paquete. Se encargar\u00e1n de hacer las comprobaciones necesarias para garantizar que el   formato o los rangos de valores son correctos y lanzar\u00e1n la excepci\u00f3n IllegalArgumentException cuando no sean v\u00e1lidos.</li> <li>Crea un constructor con par\u00e1metros que inicialice los atributos del objeto con los valores indicados en los par\u00e1metros. El constructor no construir\u00e1 el objeto si alg\u00fan atributo no es v\u00e1lido. Para ello, utilizar\u00e1 los m\u00e9todos anteriores para garantizar que los valores de los atributos sean correctos.</li> <li>Crea un constructor que inicialice los atributos del objeto con los siguientes valores. Utiliza el this(par\u00e1metros).<ul> <li>Modelo: 000-NNNN</li> <li>Stock: 0</li> <li>Procesador Intel</li> <li>Precio: 0</li> </ul> </li> <li>Crea el m\u00e9todo toString(). Muestra el precio con 2 decimales.</li> <li>Crea el m\u00e9todo disminuirStock() que decremente en 1 el stock del producto</li> </ul>"},{"location":"bloque_i/tema_4/page-8/","title":"Proyecto","text":"<p>Se va a realizar un proyecto para almacenar la informaci\u00f3n referente al usuario sobre su cuenta bancaria.</p> <p>La informaci\u00f3n se escribir\u00e1 en una clase llamada Account y contendr\u00e1 los siguientes atributos, m\u00e9todos y restricciones:</p> <ul> <li>Un titular, que por ninguna circunstancia podr\u00e1 faltar.</li> <li>N\u00famero de la cuenta, que debe tener 24 caracteres, siendo los dos primeros caracteres el pa\u00eds al que pertenece y los dos siguientes n\u00fameros el n\u00famero de la entidad en la cu\u00e1l se creo la cuenta. Los 8 primeros caracteres (incluido el pa\u00eds y la entidad) hacen referencia al c\u00f3digo IBAN.</li> <li>Saldo de la cuenta, puede ser negativo.</li> <li>M\u00e9todos para mostrar informaci\u00f3n de la cuenta (N\u00ba de la cuenta, IBAN, etc).</li> <li>M\u00e9todos para sacar e ingresar dinero en la cuenta.</li> <li>M\u00e9todo para consultar el saldo.</li> </ul> <p>Crea una clase App que contenga el main del proyecto, solicit\u00e1ndole al usuario los datos necesarios para crear una cuenta si no la tiene creada ya, y luego se le mostrar\u00e1 las siguientes opciones de forma infinita hasta que desee salir de la app:</p> <ol> <li>Ver cuenta</li> <li>Ver saldo</li> <li>Retirar dinero</li> <li>Ingresar dinero</li> <li>Salir</li> </ol> <p>Para realizar este proyecto se tendr\u00e1 en cuenta:</p> <ol> <li>El nombre de las funciones ser\u00e1 en ingl\u00e9s y deber\u00e1n ser lo suficiente claras para poder identificarlas con facilidad.</li> <li>Se har\u00e1 uso del encapsulamiento y de todo las formas \u00f3ptimas vista durante la unidad</li> <li>El repositorio de GitHub tendr\u00e1 el siguiente nombre pr04-java-NOMBRE-poo siendo NOMBRE el nombre del alumno.</li> <li>Se declarar\u00e1 aquellas variables que sean necesarias inicializ\u00e1ndolas si es necesario, indicando el tipo correspondiente.</li> <li>La entrega de este proyecto se realizar\u00e1 a trav\u00e9s de un enlace a un repositorio de GitHub, realizando siempre m\u00e1s de un commit.</li> <li>Se valorar\u00e1 la limpieza, la claridad, y la estructura del proyecto.</li> </ol>"},{"location":"bloque_i/tema_5/page-1/","title":"1 Excepciones","text":""},{"location":"bloque_i/tema_5/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>Uno de los problemas m\u00e1s importantes al escribir aplicaciones es el tratamiento de los errores. Los  errores  detienen  la  ejecuci\u00f3n  del  programa  e  impiden  su  desarrollo  normal  y,  lo  peor, adem\u00e1s provocan que el usuario est\u00e9 desinformado. Los programadores tiene que reconocer las situaciones que pueden provocar el fin de la ejecuci\u00f3n normal del programa por un error no controlado.  Dicho  de  otra  forma,  todos  los  posibles  errores  en  un  programa  deben  de  estar controlados. A veces es imposible evitarlos (por ejemplo no hay papel en la impresora, o falla el disco  duro),  pero  s\u00ed  reaccionar  de  forma  l\u00f3gica  para  que  el  usuario  reconozca  lo  que  est\u00e1 ocurriendo</p> <p>Java nos echa una mano para ello a trav\u00e9s de las excepciones. Se denomina excepci\u00f3n a un hecho que podr\u00eda provocar la detenci\u00f3n del programa; es decir una condici\u00f3n de error en tiempo de ejecuci\u00f3n pero que puede ser controlable (a trav\u00e9s de los mecanismos adecuados). En java sin embargo se denomina error a una condici\u00f3n de error incontrolable (ejemplos son el error que ocurre cuando no se dispone de m\u00e1s memoria o errores de sintaxis). Los  errores  de  sintaxis  son  detectados  durante  la  compilaci\u00f3n,  pero  los  errores  de  ejecuci\u00f3n pueden  provocar  situaciones  irreversibles,  su  control  debe  hacerse  tambi\u00e9n  en  tiempo  de ejecuci\u00f3n y eso siempre ha sido problem\u00e1tico para la programaci\u00f3n de aplicaciones.</p> <p>En Java se puede preparar el c\u00f3digo susceptible a provocar excepciones de modo que si ocurre una excepci\u00f3n, el c\u00f3digo es lanzado (throw) a una determinada rutina previamente preparada por el programador, que permite manipular esa excepci\u00f3n. Si la excepci\u00f3n no fuera capturada, la ejecuci\u00f3n del programa se detendr\u00eda irremediablemente (en muchas ocasiones la propia sintaxis de Java impide que la excepci\u00f3n no sea controlada; es decir, obliga a controlarla)</p>"},{"location":"bloque_i/tema_5/page-1/#try-catch","title":"Try-catch","text":"<p>El control de las excepciones se realiza mediante las sentencias try y catch.</p> <pre><code>try{\n// instrucciones que puedan provocar la excepci\u00f3n\n} catch(ClassException1 objetoQueLoCaptura){\n// instrucciones que se ejecutan si hay un error de tipo ClassException1\n} catch(ClassException2 objetoQueLoCaptura){\n// instrucciones que se ejecutan si hay un error de tipo ClassException2\n}\n// ...\n</code></pre> <p>Como se puede observar, puede haber m\u00e1s de una sentencia catch para un mismo bloque try debido a que un bloque de c\u00f3digo puede ser susceptible a provocar varios tipos diferentes de excepciones.</p> <p>Dentro del bloque try se colocan las instrucciones susceptibles de provocar una excepci\u00f3n, el bloque catch sirve para capturar esa excepci\u00f3n y evitar el fin de la ejecuci\u00f3n del programa. Desde el bloque catch se maneja, en definitiva, la excepci\u00f3n.</p> <p>Cada catch maneja un tipo de excepci\u00f3n. Cuando se produce una excepci\u00f3n, se busca el catch que posea el manejador de excepci\u00f3n adecuado, ser\u00e1 el que utilice el mismo tipo de excepci\u00f3n que se ha producido. La b\u00fasqueda del catch se realiza en el orden en que se han escrito. Si se produce una excepci\u00f3n, primero se mira si cuadra en el primer catch. Si no cuadra, se pasa al siguiente, y as\u00ed sucesivamente. Por este motivo, es importante el orden en que se coloquen los bloques catch.</p> <p>Cuando acaba la ejecuci\u00f3n del bloque catch, el programa contin\u00faa con la ejecuci\u00f3n del c\u00f3digo que le sigue al bloque del try-catch.</p> <pre><code>public class TryCatch {\npublic void show(){\nfinal String FIN = \"fin\";\nint base, exponent;\nString baseString;\nScanner keyboard = new Scanner(System.in);\ntry{\nSystem.out.println(\"Bienvenido al programa para calcular la potencia\");\nSystem.out.print(\"Introduce la base o fin para terminar\");\nbaseString = keyboard.nextLine();\nif(!baseString.equalsIgnoreCase(FIN)){\nbase = Integer.parseInt(baseString);\nSystem.out.print(\"Introduce el exponente: \");\nexponent = keyboard.nextInt();\nSystem.out.printf(\"%d elevado a %d es igual a %d\\n\", base, exponent, (int) Math.pow(base, exponent));\n}\n} catch (NumberFormatException e){\nSystem.out.println(\"Error en la base\");\n} catch (InputMismatchException e){\nSystem.out.println(\"Error en el exponente\");\n}\n}\npublic static void main(String[] args) {\nnew TryCatch().show();\n}\n}\n</code></pre> <p>Para  la  base,  si  el  usuario  no  introduce  fin  y  tampoco  introduce  un  n\u00famero  entero,  el <code>Integer.parseInt</code> al  intentar  convertir  la  cadena  a  n\u00famero  lanzar\u00e1  una  excepci\u00f3n  de  tipo <code>NumberFormatException</code> y ser\u00e1 manejada por el catch correspondiente. Para el exponente, si se introduce algo que no sea un n\u00famero (una letra, un s\u00edmbolo...), se producir\u00e1 una excepci\u00f3n de tipo <code>InputMismatchException</code> y se manejar\u00e1 por su correspondiente catch. Si se produce un error de otro tipo, el programa se detendr\u00e1.</p> <p>Puede  ser  que  el  programador  quiera  mostrar  el  mismo  mensaje  de  error  para  ambas excepciones. En este caso se utiliza el multi-catch, incorporado en Java desde la versi\u00f3n 7:</p> <pre><code>public class MultiCatch {\npublic void show(){\nfinal String FIN = \"fin\";\nint base, exponent;\nString baseString;\nScanner keyboard = new Scanner(System.in);\ntry{\nSystem.out.println(\"Bienvenido al programa para calcular la potencia\");\nSystem.out.print(\"Introduce la base o fin para terminar\");\nbaseString = keyboard.nextLine();\nif(!baseString.equalsIgnoreCase(FIN)){\nbase = Integer.parseInt(baseString);\nSystem.out.print(\"Introduce el exponente: \");\nexponent = keyboard.nextInt();\nSystem.out.printf(\"%d elevado a %d es igual a %d\\n\", base, exponent, (int) Math.pow(base, exponent));\n}\n} catch (NumberFormatException | InputMismatchException e){\nSystem.out.println(\"Error en la base o en el exponente\");\n}\n}\npublic static void main(String[] args) {\nnew MultiCatch().show();\n}\n}\n</code></pre> <p>En la programaci\u00f3n de aplicaciones en general siempre ha habido dos formas de manejar una excepci\u00f3n:</p> <ul> <li>Interrupci\u00f3n: en este caso se asume que el programa ha encontrado un error irrecuperable. La operaci\u00f3n que dio lugar a la excepci\u00f3n se anula y se entiendo que no hay manera de regresar al c\u00f3digo que provoc\u00f3 la excepci\u00f3n.</li> <li>Reanudaci\u00f3n: se puede manejar el error y regresar al c\u00f3digo que provoc\u00f3 el error.</li> </ul> <p>La filosof\u00eda de Java es del tipo interrupci\u00f3n, pero se puede intentar emular la reanudaci\u00f3n encerrando el bloque try en un bucle que se repetir\u00e1 hasta que el error deje existir:</p> <pre><code>public class Resumption {\npublic void show(){\nbyte number = 0;\nScanner keyboard = new Scanner(System.in);\nboolean error = false;\ndo{\ntry{\nSystem.out.print(\"Introduce un n\u00famero de tipo byte, es decir, entre -128 y 127: \");\nnumber = keyboard.nextByte();\nSystem.out.printf(\"Valor del n\u00famero: %d\\n\", number);\nerror = false; // Si se ha entrado antes en el catch, error est\u00e1 a true\n} catch (InputMismatchException e){\nSystem.out.println(\"Error\");\nerror = true;\nkeyboard.nextLine(); // Limpieza de buffer\n}\n} while (error);\n}\npublic static void main(String[] args) {\nnew Resumption().show();\n}\n}\n</code></pre> <p>Si el usuario introduce cualquier cosa que no sea un n\u00famero, el m\u00e9todo <code>nextByte()</code> lanza la excepci\u00f3n <code>InputMismatchException</code> y lo que ha metido el usuario se queda en el buffer. Para solucionarlo, se realiza una limpieza del buffer con <code>keyboard.nextLine()</code>.</p>"},{"location":"bloque_i/tema_5/page-1/#metodos-de-las-excepciones","title":"M\u00e9todos de las excepciones","text":"<ul> <li>getMessage: obtiene el mensaje descriptivo de la excepci\u00f3n.</li> <li>toString: devuelve una cadena sobre la situaci\u00f3n de la excepci\u00f3n. Suele indicar la clase de excepci\u00f3n y el texto de getMessage.</li> <li>printStackTrace: escribe el m\u00e9todo y mensaje de la excepci\u00f3n (la llamada informaci\u00f3n de pila). El resultado es el mismo mensaje que muestra el ejecutor (la m\u00e1quina virtual de Java) cuando no se controla la excepci\u00f3n.</li> </ul> <pre><code>public class MethodsOfExceptions {\npublic void show(){\nfinal String FIN = \"fin\";\nint base, exponent;\nString baseString;\nScanner keyboard = new Scanner(System.in);\ntry{\nSystem.out.println(\"Bienvenido al programa para calcular la potencia\");\nSystem.out.print(\"Introduce la base o fin para terminar\");\nbaseString = keyboard.nextLine();\nif(!baseString.equalsIgnoreCase(FIN)){\nbase = Integer.parseInt(baseString);\nSystem.out.print(\"Introduce el exponente: \");\nexponent = keyboard.nextInt();\nSystem.out.printf(\"%d elevado a %d es igual a %d\\n\", base, exponent, (int) Math.pow(base, exponent));\n}\n} catch (NumberFormatException e){\nSystem.out.println(GREEN + e.getMessage() + RESET);\nSystem.out.println(CYAN + e + RESET); // e.toString()\ne.printStackTrace();\n} catch (InputMismatchException e){\nSystem.out.println(GREEN + e.getMessage() + RESET);\nSystem.out.println(CYAN + e + RESET); // e.toString()\ne.printStackTrace();\n}\n}\npublic static void main(String[] args) {\nnew MethodsOfExceptions().show();\n}\n}\n</code></pre>"},{"location":"bloque_i/tema_5/page-1/#cuando-se-debe-capturar-una-excepcion","title":"Cuando se debe capturar una excepci\u00f3n","text":"<p>Una excepci\u00f3n se debe capturar cuando no sea un error de programaci\u00f3n, es decir, el programador debe distinguir si esa excepci\u00f3n es un error suyo de programaci\u00f3n o no, poeque si es un error de programaci\u00f3n, no debe capturar el error sino solucionarlo.</p> <p>Por ejemplo, cuando se intenta acceder a una parte de la cadena que no existe, por ejemplo, si la cadena hola le hacemos charAt(4), Java nos lanza la excepci\u00f3n StringIndexOutOfBoundsException. El programador no debe capturar con un try-catch, sino que debe corregir el error de programaci\u00f3n que ha producido dicha excepci\u00f3n.</p>"},{"location":"bloque_i/tema_5/page-2/","title":"2 Throws, throws y finally","text":""},{"location":"bloque_i/tema_5/page-2/#tipos-de-excepciones","title":"Tipos de excepciones","text":"<p>En Java, la herencia define una relaci\u00f3n entre clases en la cual una clase posee caracter\u00edsticas (m\u00e9todos y propiedades) que proceden de otra. A la clase que posee las caracter\u00edsticas a heredar se la llama superclase o clase padre y la clase que las hereda se llama subclase o clase hija. Lo beneficioso de este tipo de relaciones es que los hijos pueden heredar las caracter\u00edsticas de los padres y luego aportar caracter\u00edsticas propias convirti\u00e9ndose en una manera de reutilizar c\u00f3digo muy eficiente.</p> <p>Java  utiliza  much\u00edsimo  la  herencia  en  las  clases  que  conforman  su  API.  En  cuanto  a  las excepciones se refiere, existen tres tipos de excepciones que Java maneja a trav\u00e9s de la herencia: errores,  comprobadas  (checked)  y  no  comprobadas  (unchecked).  El  gr\u00e1fico  que  se  muestra  a continuaci\u00f3n muestra el \u00e1rbol de herencia de las excepciones en Java. El paquete de todas es java.lang:</p> <pre><code>classDiagram\n    Throwable &lt;|-- Error\n    Throwable &lt;|-- Exception\n    Error &lt;|-- Error Exception\n    Exception &lt;|-- OtrasExceptions\n    Exception &lt;|-- RuntimeExceptions\n    RuntimeExceptions &lt;|-- OtrasRuntimeExceptions</code></pre> <p>La clase principal de la cual heredan todas las excepciones Java es Throwable. De ella nacen dos ramas: Error y Exception. Error representa errores de una magnitud tal que una aplicaci\u00f3n nunca deber\u00eda intentar realizar nada con ellos (como errores de la JVM, desbordamientos de buffer, etc). La segunda rama, encabezada por Exception, representa aquellos errores que normalmente s\u00ed solemos gestionar, y a los que com\u00fanmente solemos llamar excepciones.</p> <p>De  Exception  nacen  m\u00faltiples  ramas:  ClassNotFoundException,  IOException,  ParseException, SQLException y otras  muchas,  todas  ellas  de  tipo  checked.  La  \u00fanica  excepci\u00f3n  es RuntimeException que es de tipo unchecked y encabeza todas las de este tipo.</p>"},{"location":"bloque_i/tema_5/page-2/#excepciones-checked","title":"Excepciones checked","text":"<p>Una  excepci\u00f3n  de  tipo  checked  representa  un  error  del  cual  t\u00e9cnicamente  podemos recuperarnos. En ciertos momentos, a pesar de la promesa de recuperabilidad, nuestro c\u00f3digo no  estar\u00e1  preparado  para  gestionar  la  situaci\u00f3n  de  error,  o  simplemente  no  ser\u00e1  su responsabilidad. En estos casos lo m\u00e1s razonable es relanzar la excepci\u00f3n y confiar en que un m\u00e9todo superior en la cadena de llamadas sepa gestionarla.</p> <p>Por  tanto,  todas  las  excepciones  de  tipo  checked  deben  ser  capturadas  o  relanzadas.  En  el primer caso, utilizamos el bloque try-catch. En caso de querer relanzar la excepci\u00f3n, debemos declarar dicha intenci\u00f3n en la firma de la funci\u00f3n que contiene las sentencias que lanzan la excepci\u00f3n, y lo hacemos mediante la clausula throws.</p> <p>Hay que tener presente que cuando se relanza una excepci\u00f3n estamos forzando al c\u00f3digo cliente de nuestro m\u00e9todo a capturarla o relanzarla. Una excepci\u00f3n que sea relanzada una y otra vez hacia arriba terminar\u00e1 llegando al m\u00e9todo primigenio y, en caso de no ser capturada por \u00e9ste, producir\u00e1 la finalizaci\u00f3n de su hilo de ejecuci\u00f3n (thread).</p> <p>La  dos  preguntas  que  debemos  hacernos  en  este  momento  es:  \u00bfCu\u00e1ndo  capturar  una excepci\u00f3n? \u00bfCu\u00e1ndo relanzarla? La respuesta es muy simple. Capturamos una excepci\u00f3n cuando: - - Podemos recuperarnos del error y continuar con la ejecuci\u00f3n.</p> <ul> <li>Queremos registrar el error.</li> <li>Queremos relanzar el error con un tipo de excepci\u00f3n distinto.</li> </ul> <p>En  definitiva,  cuando  tenemos  que  realizar  alg\u00fan  tratamiento  del  propio  error.  Por  contra, relanzamos una excepci\u00f3n cuando:</p> <ul> <li>No es competencia nuestra ning\u00fan tratamiento de ning\u00fan tipo sobre el error que se ha producido.</li> <li>Para centralizar el control de excepciones y facilitar el mantenimiento del c\u00f3digo.</li> </ul>"},{"location":"bloque_i/tema_5/page-2/#excepciones-unchecked","title":"Excepciones unchecked","text":"<p>Son excepciones de tipo RuntimeException o de cualquiera de sus subclases. El aspecto m\u00e1s destacado de las excepciones de tipo unchecked es que no deben ser forzosamente declaradas ni capturadas (en otras palabras, no son comprobadas). Por ello no son necesarios bloques try-catch ni declarar formalmente en la firma de la funci\u00f3n el lanzamiento de excepciones de este tipo. \u00c9sto, por supuesto, tambi\u00e9n afecta a funciones y/o clases m\u00e1s hacia arriba en la cadena invocante.</p>"},{"location":"bloque_i/tema_5/page-2/#throws","title":"Throws","text":"<p>En caso de querer relanzar la excepci\u00f3n, debemos declarar dicha intenci\u00f3n en la firma de la funci\u00f3n que contiene las sentencias que lanzan la excepci\u00f3n, y lo hacemos mediante la clausula throws.</p> <p>\u00bfTiene obligaci\u00f3n de tener un try-catch el que llame a la funci\u00f3n? Si la excepci\u00f3n es de tipo RuntimeException o cualquiera de sus hijas, no existe la obligaci\u00f3n de poner un try-catch. En cualquier  otro  caso,  s\u00ed  existe  dicha  obligaci\u00f3n,  de  hecho  si  no  se  hace,  Java  da  un  error  de compilaci\u00f3n.</p> <pre><code>public class Throws {\npublic void show(){\nfinal String FIN = \"fin\", SIGUIENTE = \"siguiente\";\nint number;\nString string;\nScanner keyboard = new Scanner(System.in);\ntry{\nSystem.out.print(\"Introduce un n\u00famero o siguiente para pasar al siguiente n\u00famero: \");\nstring = keyboard.nextLine();\nif(!string.equalsIgnoreCase(SIGUIENTE)){\n/*\n                 * Aqu\u00ed no estamos obligados a poner un try-catch porque\n                 * NumberFormatException es hija de RuntimeException\n                 */\nnumber = convertirNumero(string);\nSystem.out.printf(\"Valor del n\u00famero introducido: %d\\n\", number);\n}\n} catch (NumberFormatException e){\nSystem.out.println(\"Error en el n\u00famero\");\n}\ntry {\nSystem.out.print(\"Introduce un n\u00famero o fin para terminar: \");\nstring = keyboard.nextLine();\nif(!string.equalsIgnoreCase(FIN)){\n/*\n                 * Aqu\u00ed estamos obligados a poner un try-catch porque\n                 * Exception no es hija de RuntimeException\n                 */\nnumber = convertirNumero2(string);\nSystem.out.printf(\"Valor del n\u00famero introducido: %d\\n\", number);\n}\n} catch (Exception e){\nSystem.out.println(\"Error en el n\u00famero\");\n}\n}\nprivate int convertirNumero2(String string) {\nreturn Integer.parseInt(string);\n}\nprivate int convertirNumero(String string) throws NumberFormatException {\nreturn Integer.parseInt(string);\n}\npublic static void main(String[] args) {\nnew Throws().show();\n}\n}\n</code></pre>"},{"location":"bloque_i/tema_5/page-2/#orden-de-los-catch","title":"Orden de los catch","text":"<p>Cuando se tienen varios catch para el mismo try, hay que tener la precauci\u00f3n de poner los catch de las subclases antes que los de las superclases porque si no, los catch de las subclases nunca se capturar\u00edan. Ejemplo:</p> <pre><code>public class CatchOrder1 {\npublic void show(){\nfinal String FIN = \"fin\";\nString string;\nbyte number = 0;\nScanner keyboard = new Scanner(System.in);\ntry {\nSystem.out.print(\"Introduce un n\u00famero de tipo byte, es decir, entre -128 y 127: \");\nnumber = keyboard.nextByte();\nkeyboard.nextLine(); //Limpieza del buffer\nSystem.out.printf(\"Valor del n\u00famero introducido: %d\\n\", number);\nSystem.out.print(\"Introduzca otro n\u00famero de tipo byte o fin para terminar: \");\nstring = keyboard.nextLine();\nif (!string.equalsIgnoreCase(FIN)) {\nnumber = Byte.parseByte(string);\nSystem.out.printf(\"Valor del otro n\u00famero introducido: %d\\n\", number);\n}\n} catch (Exception e) {\nSystem.out.println(\"Error: no ha introducido un n\u00famero entre -128 y 127\");\n} catch (InputMismatchException e) { //Error de compilaci\u00f3n:inalcanzable bloque catch\nSystem.out.println(\"Error\");\n}\n}\npublic static void main(String[] args) {\nnew CatchOrder1().show();\n}\n}\n</code></pre> <p>En  este  caso,  Java  da  un  error  de  compilaci\u00f3n  ya  que  InputMismatchException  es  hija  de Exception. Si el usuario no introduce un n\u00famero de tipo byte, se lanza una excepci\u00f3n de tipo InputMismatchException.  Dicho  objeto  tambi\u00e9n  es  un  objeto  de  tipo  Exception,  ya  que  los objetos de tipo hijo, tambi\u00e9n son objetos de tipo padre.  Entonces, nunca entrar\u00eda en el catch del InputMismatchException. La soluci\u00f3n es cambiar el orden de los catch:</p> <pre><code>public class CatchOrder2 {\npublic void show(){\nfinal String FIN = \"fin\";\nString string;\nbyte number = 0;\nScanner keyboard = new Scanner(System.in);\ntry {\nSystem.out.print(\"Introduce un n\u00famero de tipo byte, es decir, entre -128 y 127: \");\nnumber = keyboard.nextByte();\nkeyboard.nextLine(); //Limpieza del buffer\nSystem.out.printf(\"Valor del n\u00famero introducido: %d\\n\", number);\nSystem.out.print(\"Introduzca otro n\u00famero de tipo byte o fin para terminar: \");\nstring = keyboard.nextLine();\nif (!string.equalsIgnoreCase(FIN)) {\nnumber = Byte.parseByte(string);\nSystem.out.printf(\"Valor del otro n\u00famero introducido: %d\\n\",\nnumber);\n}\n} catch (InputMismatchException e) {\nSystem.out.println(\"Error: no ha introducido un n\u00famero entre -128 y 127\");\n} catch (Exception e) {\nSystem.out.println(\"Error\");\n}\n}\npublic static void main(String[] args) {\nnew CatchOrder2().show();\n}\n}\n</code></pre>"},{"location":"bloque_i/tema_5/page-2/#throw","title":"Throw","text":"<p>Esta instrucci\u00f3n le permite al programador lanzar una excepci\u00f3n. Por ejemplo: <code>throw new Exception();</code>. El flujo del programa se dirigir\u00e1 a la instrucci\u00f3n try-catch m\u00e1s cercana.</p> <p>Se pueden utilizar constructores en esta llamada (el formato de los constructores depende de la clase que se utilice): <code>throw new Exception(\"Error grave\");</code> Esto construye una excepci\u00f3n con el mensaje indicado. Ese mensaje se puede obtener en el catch con el m\u00e9todo <code>getMessage()</code> del objeto que contiene la excepci\u00f3n.</p> <pre><code>public class Throw {\npublic void show() {\ndouble n;\nScanner keyboard = new Scanner(System.in);\ntry {\nSystem.out.println(\"Introduce un n\u00famero: \");\nn = keyboard.nextDouble();\ndivision(n);\n} catch (ArithmeticException e) {\nSystem.out.println(e.getMessage());\n}\n}\npublic void division(double n) {\n/*\n         * float y double admiten Infinity por lo que no se lanza\n         * una excepci\u00f3n cuando se divide entre cero.\n         * Podemos lanzar la excepci\u00f3n usando throw\n         * */\nif (n == 0) {\nthrow new ArithmeticException(\"Error: no se puede dividir entre cero\");\n}\nSystem.out.printf(\"500 entre %.2f: %.2f\\n\", n, 500 / n);\n}\npublic static void main(String[] args) {\nnew Throw().show();\n}\n}\n</code></pre>"},{"location":"bloque_i/tema_5/page-2/#finally","title":"Finally","text":"<p>Las instrucciones que se encuentran en el finally se ejecutan independientemente de si hubo o no excepci\u00f3n. Es decir, esas sentencias se ejecutan siempre. Si el c\u00f3digo del try ha ido bien y no se ha lanzado ninguna excepci\u00f3n, despu\u00e9s se ejecutan las instrucciones del finally y luego se contin\u00faa  por  el  c\u00f3digo  que  le  sigue  al  bloque  del  try-catch.  Pero  si  se  ha  lanzado  alguna excepci\u00f3n,  se  ejecutan  las  instrucciones  del  catch  correspondiente,  luego  se  ejecutan  las instrucciones del finally y luego se contin\u00faa por el c\u00f3digo que le sigue al bloque del try-catch. Por ello se coloca en el bloque finally c\u00f3digo com\u00fan para todas las excepciones y tambi\u00e9n para cuando no hay excepciones. Normalmente se suelen poner instrucciones de limpieza. Ejemplo:</p> <pre><code>public class Finally {\npublic void show() {\nint number = 0;\nString string;\nboolean error = false;\nScanner keyboard = new Scanner(System.in);\ntry {\nSystem.out.print(\"Introduce un n\u00famero: \");\nnumber = keyboard.nextInt();\n} catch (InputMismatchException e) {\nSystem.out.println(\"Error\");\nerror = true;\n} finally {\nkeyboard.nextLine();//Limpieza del buffer\n}\nSystem.out.print(\"Introduce una cadena: \");\nstring = keyboard.nextLine();\nSystem.out.printf(\"El n\u00famero introducido ha sido: %s\\n\", error ? \"error\" : number);\nSystem.out.printf(\"La cadena introducida ha sido: %s\", string);\n}\npublic static void main(String[] args) {\nnew Finally().show();\n}\n}\n</code></pre> <p>En el ejemplo, hay que limpiar el buffer haya o no una excepci\u00f3n, por lo tanto, se limpia en el finally.</p> <p>Pero \u00bfqu\u00e9 diferencia hay entre poner c\u00f3digo en el finally o ponerlo despu\u00e9s del bloque try-catch? Pues que en el finally siempre se va a ejecutar aunque se rompa el flujo de ejecuci\u00f3n, es decir, aunque exista por ejemplo un  <code>return</code>  en el try  o  un  <code>throw</code>   en  el  catch.  El  c\u00f3digo  que  se encuentre despu\u00e9s del bloque try-catch, no se ejecutar\u00eda en esos casos</p>"},{"location":"bloque_i/tema_5/page-3/","title":"Ejercicios","text":"Ejercicio 1 <p>Escribe un programa que juegue con el usuario a adivinar un n\u00famero. El ordenador debe generar un n\u00famero entre 1 y 500, y el usuario tiene que intentar adivinarlo. Para ello, cada vez que el usuario introduce un valor, el ordenador debe decirle al usuario si el n\u00famero que tiene  que adivinar es mayor o menor que el que ha introducido el usuario. Cuando consiga adivinarlo, debe indic\u00e1rselo e imprimir en pantalla el n\u00famero de veces que el usuario ha intentado adivinar el n\u00famero. Si el usuario introduce algo que no es un n\u00famero, debe indicarlo en pantalla, y contarlo como un intento.</p> Ejercicio 2 <p>Crea un m\u00e9todo que se llame readInt() que se encargue de leer un n\u00famero introducido por teclado teniendo en cuentas las excepciones que puede provocar. Crea un main para probarlo.</p>"},{"location":"bloque_i/tema_5/page-4/","title":"Proyecto","text":"<p>Se va a continuar el proyecto que contiene una librer\u00eda con m\u00e9todos y clases \u00fatiles para facilitar ciertas operaciones.</p> <p>En esta versi\u00f3n, se crear\u00e1 una clase ConsoleInput que trabajar\u00e1 con m\u00e9todos para facilitar la lectura por teclado.</p> <p>La clase contendr\u00e1 una serie de m\u00e9todos que permitan solicitar al usuario distintos datos y que gestionen el hecho de que los datos introducidos no correspondan a los tipos esperados o que no sean valores v\u00e1lidos, de  manera que se les vuelva a solicitar de nuevo, hasta que los valores introducidos sean v\u00e1lidos. Internamente un m\u00e9todo puede llamar a otro m\u00e9todo de la clase.</p> <p>Info</p> <p>SE PODR\u00c1N CREAR ADEM\u00c1S LOS M\u00c9TODOS Y ATRIBUTOS QUE SE CONSIDEREN NECESARIOS</p> <p>\u00a1OJO!</p> <p>Se deber\u00e1 de tratar con minuciosidad todas las posibilidades haciendo uso de estructuras de control de excepciones.</p> <p>Los m\u00e9todos que aparecen a continuaci\u00f3n se refieren al tipo byte. Realizarlos tambi\u00e9n para los tipos short, int,long, float y double:</p> <ul> <li><code>readByte()</code>: retorna un byte introducido por el usuario.</li> <li><code>readByteUnsigned()</code>: lo mismo que el anterior, pero n\u00fameros sin signos.</li> <li><code>readByteLessThan(byte upperBound)</code>: retorna un byte introducido por el usuario inferior al par\u00e1metro.</li> <li><code>readByteUnsignedLessThan(byte upperBound)</code>: lo mismo que el anterior, pero n\u00fameros sin signos.</li> <li><code>readByteLessOrEqualThan(byte upperBound)</code>: retorna un byte introducido por el usuario inferior igual al par\u00e1metro.</li> <li><code>readByteUnsignedLessOrEqualThan(byte upperBound)</code>: lo mismo que el anterior, pero n\u00fameros sin signos</li> <li><code>readByteGreaterThan(byte lowerBound)</code>: retorna un byte introducido por el usuario superior al par\u00e1metro.</li> <li><code>readByteUnsignedGreaterThan(byte lowerBound)</code>: lo mismo que el anterior, pero n\u00fameros sin signos.</li> <li><code>readByteGreaterOrEqualThan(byte lowerBound)</code>: retorna un byte introducido por el usuario superior o igual al par\u00e1metro.</li> <li><code>readByteUnsignedGreaterOrEqualThan(byte lowerBound)</code>: Lo mismo que el anterior, pero n\u00fameros sin signos.</li> <li><code>readByteInRangeInclusive(byte lowerBound, byte upperBound)</code>: retorna un byte introducido por el usuario cuyo valor est\u00e9 en el rango [lowerBound, upperBound], ambos incluidos.</li> <li><code>readByteInRangeExclusive(byte lowerBound, byte upperBound)</code>: retorna un byte introducido por  el usuario cuyo valor est\u00e9 en el rango [lowerBound, upperBound], donde upperBound no est\u00e9 incluido.</li> </ul> <p>Adem\u00e1s, realizar los m\u00e9todos siguientes:</p> <ul> <li><code>readChar()</code>: retorna un car\u00e1cter introducido por el usuario. Si \u00e9ste introduce m\u00e1s de un car\u00e1cter, se le vuelve a solicitar.</li> <li><code>readChar(String validCharacters)</code>: retorna un car\u00e1cter introducido por el usuario. El par\u00e1metro validCharacters contiene los posibles caracteres v\u00e1lidos.</li> <li><code>readVowel()</code>: retorna una vocal introducida por el usuario.</li> <li><code>readDigit()</code>: retorna un car\u00e1cter d\u00edgito introducido por el usuario.</li> <li><code>readConsonant()</code>: retorna una consonante introducida por el usuario.</li> <li><code>readLowerCase()</code>: retorna una letra min\u00fascula introducida por el usuario.</li> <li><code>readUpperCase()</code>: retorna una letra may\u00fascula introducida por el usuario.</li> <li><code>readString()</code>: retorna una cadena de caracteres introducida por el usuario.</li> <li><code>readString(int maxLength)</code>: retorna una cadena de caracteres de como m\u00e1ximo maxLength caracteres.</li> <li><code>readBooleanUsingChar(char affirmativeValue)</code>: retorna un booleano a partir de un car\u00e1cter introducido por el usuario, de manera que si coincide con affirmativeValue (en may\u00fasculas o min\u00fasculas) retornar\u00e1 true, y si se trata de cualquier otro car\u00e1cter retornar\u00e1 false.</li> <li><code>readBooleanUsingChar()</code>: retorna un booleano a partir de un car\u00e1cter introducido por el usuario, de manera que si coincide con s o S retornar\u00e1 true y en caso contrario retornar\u00e1 false.</li> <li><code>readBooleanUsingInt(int affirmativeValue)</code>: retorna un booleano a partir de un entero introducido por el usuario, de manera que si coincide con el valor proporcionado retornar\u00e1 true, y si se trata de cualquier otro valor entero retornar\u00e1 false.</li> <li><code>readBooleanUsingInt()</code>: retorna un booleano a partir de un entero introducido por el usuario, de manera que si coincide con 1 retornar\u00e1 true, y si se trata de cualquier otro valor entero retornar\u00e1 false.</li> </ul> <p>Para realizar este proyecto se tendr\u00e1 en cuenta:</p> <ol> <li>NO se realizar\u00e1 una versi\u00f3n sobre el proyecto 3, sino que se realizar\u00e1 un copia de dicho proyecto en esta versi\u00f3n</li> <li>Se mantendr\u00e1 el paquete principal llamado <code>com.NOMBRE.common</code> donde nombre ser\u00e1 el nombre del alumno y common el nombre del proyecto.</li> <li>Se crear\u00e1 una clase Main, donde se ponga en pr\u00e1ctica los usos de la librer\u00eda y se valorar\u00e1 la complejidad de dicho Main.</li> <li>Se deber\u00e1n respetar el nombre de las funciones as\u00ed como el nombre de los par\u00e1metros.</li> <li>El nombre del resto de funciones ser\u00e1 en ingl\u00e9s y deber\u00e1n ser lo suficiente claras para poder identificarlas con facilidad.</li> <li>El c\u00f3digo se comentar\u00e1 haciendo uso de los comentarios JavaDoc adem\u00e1s, de comentarios normales para dar una explicaci\u00f3n a la parte del c\u00f3digo m\u00e1s importante.</li> <li>El repositorio de GitHub tendr\u00e1 el siguiente nombre <code>pr05java-NOMBRE-console</code>siendo NOMBRE el nombre del alumno.</li> <li>Se declarar\u00e1 aquellas variables que sean necesarias inicializ\u00e1ndolas si es necesario, indicando el tipo correspondiente.</li> <li>Se har\u00e1 uso de funciones y procedimientos donde sea oportuno.</li> <li>La entrega de este proyecto se realizar\u00e1 a trav\u00e9s de un enlace a un repositorio de GitHub, realizando siempre m\u00e1s de un commit.</li> <li>Se valorar\u00e1 la limpieza, la claridad, y la estructura del proyecto.</li> </ol>"},{"location":"bloque_ii/tema_10/page-1/","title":"10.1 Introducci\u00f3n a los Gen\u00e9ricos","text":""},{"location":"bloque_ii/tema_10/page-1/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Se trata de la implementaci\u00f3n en Java de una de las opciones de C++ m\u00e1s a\u00f1oradas por los programadores que proceden de ese lenguaje; las plantillas (templates). Son similares a las plantillas de C++. Sirven para evitar conversiones de clases.</p> <p>Uno de los motivos de la creaci\u00f3n de los gen\u00e9ricos fueron las colecciones. Sin los gen\u00e9ricos todas las colecciones ser\u00edan de tipo Object, lo que tendr\u00eda una serie de desventajas:</p> <ul> <li>Nada impide crear listas heterog\u00e9neas de objetos. Eso causa problemas evidentes de casting, adem\u00e1s de imposible incoherencias.</li> <li>Si se desea acceder a propiedades espec\u00edficas de otro tipo de clases, ser\u00e1 necesario realizar una cantidad grande de conversiones en el c\u00f3digo, lo que har\u00e1 que sea m\u00e1s pesado de comprender.</li> <li>Los m\u00e9todos de las clases e interfaces de las colecciones no se adaptan al tipo de datos que contienen dificultando su uso.</li> </ul> <p>Por ello aparecieron los tipos gen\u00e9ricos en la versi\u00f3n 1.5 de Java consiguiendo solucionar los problemas anteriores en las colecciones.</p>"},{"location":"bloque_ii/tema_10/page-1/#2-idea-general-de-los-genericos","title":"2. Idea general de los gen\u00e9ricos","text":"<p>Los gen\u00e9ricos permiten crear clases y m\u00e9todos en los que los tipos de datos (las clases) sobre los que act\u00faan son un par\u00e1metro m\u00e1s. Gracias a ello se pueden crear clases y m\u00e9todos que se adaptan a distintos tipos de datos de forma autom\u00e1tica.</p> <p>Anteriormente a la aparici\u00f3n de los gen\u00e9ricos el que las clases y m\u00e9todos se adaptaran autom\u00e1ticamente pasaba por especificar par\u00e1metros de tipo Object, ya que las referencias de tipo Object valen para cualquier otro tipo de objeto.</p> <p>El problema es que la coherencia no est\u00e1 asegurada con los tipos Object, la sintaxis del lenguaje puede provocar excepciones de tipo ClassCastException ante conversiones err\u00f3neas de Object a otro tipo de datos.</p> <p>La idea es:</p> <ol> <li>El programar declara un gen\u00e9rico en un m\u00e9todo de clase, por ejemplo T</li> <li>Cuando se utilice dicha clase o m\u00e9todo se indicar\u00e1 un tipo concreto, entonces se cambia el gen\u00e9rico para que se refiera a ese tipo concreto.</li> </ol>"},{"location":"bloque_ii/tema_10/page-2/","title":"10.2 Uso de gen\u00e9ricos","text":""},{"location":"bloque_ii/tema_10/page-2/#1-genericos-en-metodos","title":"1. Gen\u00e9ricos en m\u00e9todos","text":"<p>Se pueden indicar gen\u00e9ricos en los m\u00e9todos. Para indicar que el m\u00e9todo se puede utilizar con cualquier tipo de objeto y que el m\u00e9todo se adaptar\u00e1 a dicho tipo. La sintaxis es: <code>modificadores &lt;Gen\u00e9rico&gt; tipoRetorno nombreM\u00e9todo(...)</code></p> <p>Ejemplo:</p> <pre><code>public class ArrayUtils{\npublic static &lt;T&gt; T getRandom(T a[]){\nint i = new Random().nexInt(a.length-1);\nreturn a[i];\n}\n}\n</code></pre> <p>En el ejemplo anterior, se desea obtener un elemento aleatorio de un array. En el ejemplo la letra T entre los signos &lt; y &gt; indica que se va a utilizar un tipo gen\u00e9rico, el hecho de que le siga otra T significa que el tipo que devuelve el m\u00e9todo tomarAleatorio ser\u00e1 el mismo que el del par\u00e1metro a, y se corresponder\u00e1 al tipo gen\u00e9rico T. Despu\u00e9s cuando se invoque a este m\u00e9todo, la letra gen\u00e9rica T ser\u00e1 traducida por el tipo con el que se invoque al m\u00e9todo. Por ejemplo desde este c\u00f3digo:</p> <pre><code>String a[] = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"};\nString element = ArraysUtils.getRandom(a);\nSystem.out.println(element);\n</code></pre> <p>En ese c\u00f3digo, como se invoca usando un array de Strings, por lo tanto la letra gen\u00e9rica T ser\u00e1 traducida por String. Es decir es como si el c\u00f3digo anterior se tradujera como:</p> <pre><code>public class UtilesArrays {\npublic static String tomarAleatorio(String a[]){\nint i=(int)(Math.random()*a.length);\nreturn a[i];\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_10/page-2/#2-genericos-en-las-clases","title":"2. Gen\u00e9ricos en las clases","text":"<p>El m\u00e9todo habitual de utilizar gen\u00e9ricos, debido a su mayor potencia, es declarar el gen\u00e9rico en una clase. De esta forma indicados que el c\u00f3digo de la clase utiliza tipos gen\u00e9ricos que ser\u00e1n traducidos por el tipo de datos que se desee.</p> <p>Por ejemplo una clase pensada para extraer elementos aleatorios de un array del tipo que sea se podr\u00eda declarar as\u00ed:</p> <pre><code>public class RandomElement&lt;T&gt; {\nprivate final T element;\npublic RandomElement(T[] array){\nelement = array[new Random().nextInt(array.length - 1)];\n}\npublic T getElement(){\nreturn element;\n}\n}\n</code></pre> <p>Los tipos se indican tras el nombre de la clase. De esta forma cuando se creen objetos de clase RandomElement habr\u00e1 que indicar la clase por la que se traducir\u00e1 el gen\u00e9rico T. Por ejemplo:</p> <pre><code>public static void main(String[] args) {\nString[] a = {\"uno\", \"dos\", \"tres\", \"cuatro\"};\nRandomElement&lt;String&gt; e = new RandomElement&lt;String&gt;(a);\nSystem.out.println(e.getElement());\n}\n</code></pre> <p>Obs\u00e9rvese que tanto al declarar el objeto e hay que concretar el valor del gen\u00e9rico de ah\u00ed que la declaraci\u00f3n sea <code>RandomElement&lt;String&gt; e</code> de ese modo ya queda claro la traducci\u00f3n de <code>T</code>. A partir de ese momento ya todos los m\u00e9todos de clase y propiedades que utilizaran el gen\u00e9rico <code>T</code>, ahora utilizar\u00e1n el tipo <code>String</code>. En definitiva los gen\u00e9ricos de clase marcan las posiciones para la clase concreta que habr\u00e1 que especificar en la creaci\u00f3n del objeto. Lo bueno es que pueden convivir distintas concreciones de gen\u00e9ricos, podr\u00eda ser:</p> <pre><code>RandomElement&lt;String&gt; e1 = new RandomElement&lt;String&gt;(a1);\nRandomElement&lt;Integer&gt; e2 = new RandomElement&lt;Integer&gt;(a2);\n</code></pre>"},{"location":"bloque_ii/tema_10/page-2/#3-interfaces-con-genericos","title":"3. Interfaces con gen\u00e9ricos","text":"<p>Al igual que las clases, las interfaces pueden utilizar gen\u00e9ricos en las mismas condiciones que en \u00e9stas:</p> <pre><code>public interface Comparable&lt;T&gt;{\nT lower();\nT upper();\n}\n</code></pre> <p>Una clase que implemente la interfaz puede hacerlo as\u00ed:</p> <pre><code>public class Clase1 implements Compar&lt;String&gt;{\n</code></pre> <p>De modo que traduce el gen\u00e9rico de la interfaz por un tipo concreto o bien:</p> <pre><code>public class Clase1 &lt;T&gt; implements Compar&lt;T&gt;{\n</code></pre> <p>De modo que no traduce el gen\u00e9rico y espera a que durante la creaci\u00f3n de objetos de esa clase se indique el tipo concreto para el gen\u00e9rico.</p>"},{"location":"bloque_ii/tema_10/page-2/#4-uso-de-varios-genericos","title":"4. Uso de varios gen\u00e9ricos","text":"<p>Tanto en m\u00e9todos, como en clases o interfaces, es posible utilizar dos tipos gen\u00e9ricos e incluso m\u00e1s. Para ello se separan por comas dentro del operador diamante. Ejemplo:</p> <pre><code>public class CompareObjects&lt;T, U&gt;{\nprotected T object1;\nprotected U object2;\npublic CompareObjects(T object1, U object2){\nthis.object1 = object1;\nthis.object2 = object2;\n}\npublic boolean sameFirstLetter(){\nString letter1 = object1.getClass().getName().substring(1,1);\nString letter2 = object2.getClass().getName().substring(1,1);\nreturn letter1.equalsIgnoreCase(letter2);\n}\n}\n</code></pre> <p>Esta clase (que en realidad no es muy \u00fatil), construye un objeto a partir de otros dos. El primero de tipo gen\u00e9rico <code>T</code>, y el segundo de tipo <code>U</code>. El m\u00e9todo <code>sameFirstLetter</code> devuelve verdadero si el nombre de clase de <code>T</code> empieza por la misma letra que <code>U</code>.</p> <p>Para utilizar esta clase:</p> <pre><code>public static void main(String[] args){\nString s1 = \"Hola\";\nStringBuffer s2 = new StringBuffer(\"Adi\u00f3s\");\nCompareObjects&lt;String, StringBuffer&gt; comp = new CompareObjects&lt;String, StringBuffer&gt;(s1,s2);\nSystem.out.println(comp.sameFirstLetter());\n}\n</code></pre> <p>Devolver\u00e1 verdadero porque tanto <code>String</code> como <code>StringBuffer</code> empiezan por <code>S</code>. En el ejemplo <code>T</code> se convertir\u00e1 en String y <code>U</code> en <code>StringBuffer</code>.</p>"},{"location":"bloque_ii/tema_10/page-3/","title":"10.3 Gen\u00e9ricos avanzados","text":""},{"location":"bloque_ii/tema_10/page-3/#limitacion-de-los-tipos-posibles-en-un-generico","title":"Limitaci\u00f3n de los tipos posibles en un gen\u00e9rico","text":"<p>A veces no interesa que las clases acepten a cualquier tipo de objeto, sino a objetos de un determinado tipo y sus descendientes. Eso es posible indicarlo mediante la palabra <code>extends</code> dentro de la declaraci\u00f3n del gen\u00e9rico. Ejemplo:</p> <pre><code>public class HandlerVehicle &lt;V extends Vehicle&gt;{\nprotected V vehicle;\npublic HandlerVehicle(V vehicle){\nthis.vehicle = vehicle;\n}\npublic void start(){\nvehicle.accelerate(100);\n}\n}\n</code></pre> <p>En el ejemplo, a la clase se le puede indicar cualquier clase descendiente de <code>Vehicle</code>, pero ninguna otra. Por ejemplo:</p> <pre><code>HandlerVehicle&lt;Car&gt; v1 = new HandlerVehicle&lt;Car&gt;();\nHandlerVehicle&lt;Autocar&gt; v2 = new HandlerVehicle&lt;Autocar&gt;\n</code></pre> <p>Sin embargo, no se podr\u00eda declarar:</p> <pre><code>HandlerVehicle&lt;String&gt; v3 = HandlerVehicle&lt;String&gt;(e);\n</code></pre> <p>No es posible porque la clase String no es heredera de ning\u00fan veh\u00edculo. La raz\u00f3n de utilizar esta cl\u00e1usula tan restrictiva est\u00e1 en el hecho de poder realizar acciones que sabemos que s\u00f3lo son posibles en cierto tipo de objetos. La clase <code>HandlerVehicle</code> necesita arrancar el veh\u00edculo, por ello tenemos que asegurar que el gen\u00e9rico no puede ser ninguna clase incompatible.</p> <p>Por otro lado extends no tiene por qu\u00e9 referirse a clases, tambi\u00e9n puede referirse a interfaces. Ejemplo:</p> <pre><code>public class Clase1 &lt;V extends Comparable&gt;{\n</code></pre> <p>Significa que la Clase1 usa un gen\u00e9rico al que se le puede asignar cualquier clase que implemente la interfaz Comparable.</p>"},{"location":"bloque_ii/tema_10/page-3/#tipos-comodin","title":"Tipos comod\u00edn","text":"<p>Aunque parece que todo est\u00e1 resuelto de esta forma. Hay problemas cuando mezclamos objetos de la misma clase pero distinta traducci\u00f3n de gen\u00e9rico. Es el caso de este ejemplo:</p> <pre><code>public class RandomElement&lt;T&gt; {\nprivate final T element;\nprivate final int index;\npublic RandomElement(T[] array){\nindex = new Random().nextInt(array.length - 1);\nelement = array[index];\n}\npublic T getElement(){\nreturn element;\n}\npublic static void main(String[] args) {\nString[] a = {\"uno\", \"dos\", \"tres\", \"cuatro\"};\nRandomElement&lt;String&gt; e = new RandomElement&lt;String&gt;(a);\nSystem.out.println(e.getElement());\n}\npublic int getIndex(){\nreturn index;\n}\npublic boolean sameIndex(RandomElement&lt;T&gt; random){\nreturn random.index == index;\n}\n}\n</code></pre> <p>En este caso la clase RandomElement se le ha a\u00f1adido una propiedad que almacena el \u00edndice aleatorio que obtiene el constructor. Eso permite que construyamos un m\u00e9todo llamado <code>sameIndex</code> que recibe un objeto de clase RandomElement y nos dice si el \u00edndice aleatorio calculado fue el mismo. Para usar este m\u00e9todo:</p> <pre><code>String[] s1 = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"};\nString[] s2 = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"};\nRandomElement&lt;String&gt; r1 = new RandomElement&lt;String&gt;(s1);\nRandomElement&lt;String&gt; r2 = new RandomElement&lt;String&gt;(s2);\nSystem.out.println(r1.sameIndex(r2));\n</code></pre> <p>El c\u00f3digo funciona, s\u00f3lo devolver\u00e1 verdadero si tanto el objeto <code>r1</code> como en <code>r2</code>, el \u00edndice tiene el mismo valor. Sin embargo, este otro c\u00f3digo fallara:</p> <pre><code>String[] s1 = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"};\nInteger[] s2 = {1,2,3,4,5,6};\nRandomElement&lt;String&gt; r1 = new RandomElement&lt;String&gt;(s1);\nRandomElement&lt;Integer&gt; r2 = new RandomElement&lt;Integer&gt;(s2);\nSystem.out.println(r1.sameIndex(r2));\n</code></pre> <p>El error ocurre en tiempo de compilaci\u00f3n. La raz\u00f3n, que en la l\u00ednea remarcada, el objeto <code>r1</code> es ya de tipo <code>RandomElement&lt;String&gt;</code> por lo que el m\u00e9todo <code>sameIndex</code> s\u00f3lo puede aceptar objetos de tipo <code>RandomElement&lt;String&gt;</code>, ya que el gen\u00e9rico T se tradujo como STring. El problema est\u00e1 en que dicho m\u00e9todo tiene que poder aceptar cualquier tipo de objeto de tipo <code>RandomElement</code>.</p> <p>Para ello se usa el signo <code>&lt;?&gt;</code> de ese modo indicamos la posibilidad de aceptar cualquier tipo de clase con gen\u00e9rico. Es decir el m\u00e9todo se reescribir\u00eda as\u00ed:</p> <pre><code>public boolean sameIndex(RandomElement&lt;?&gt; random){\nreturn random.getIndex() == index;\n}\n</code></pre> <p>De esa forma se indica que random es un objeto de tipo <code>RandomElement</code> tenga el tipo que tenga el gen\u00e9rico.</p> <p>Incluso se puede delimitar el gen\u00e9ricos:</p> <pre><code>public boolean sameIndex(RandomElement&lt;? extends Number&gt; random){\nreturn random.getIndex() == index;\n}\n</code></pre> <p>Ahora el m\u00e9todo acepta cualquier tipo de <code>RandomElement</code> pero siempre y cuando el tipo gen\u00e9rico forme parte de la herencia <code>Number</code></p>"},{"location":"bloque_ii/tema_10/page-4/","title":"Ejercicios","text":"Ejercicio 1 <p>Realiza una clase gen\u00e9rica Caja que pueda guardar un objeto de cualquier tipo. Realiza para dicha clase los m\u00e9todos get y  set. Haz un programa para probar dichos m\u00e9todos.</p> Ejercicio 2 <p>Realiza una clase gen\u00e9rica Pareja que contenga dos elementos de cualquier tipo. Realiza los siguientes m\u00e9todos:</p> <ul> <li>M\u00e9todo get para ambos.</li> <li>M\u00e9todo mostrarTipos que muestre el tipo de ambos elementos. Ejemplo: java.lang.String</li> <li>M\u00e9todo mismoTipo que devuelva true si ambos elementos tienen el mismo tipo.</li> </ul> Ejercicio 3 <p>Realiza la clase anterior con la restricci\u00f3n de que el segundo elemento pertenezca a una subclase del primero. (Probar con Number que es padre de todos los wrappers de n\u00fameros: Integer, Short, etc)</p> Ejercicio 4 <p>Realiza una clase gen\u00e9rica OperaMate que tenga un elemento de cualquier tipo num\u00e9rico. Realiza los siguientes m\u00e9todos:</p> <ul> <li>M\u00e9todo rec\u00edproco para obtener el el rec\u00edproco del n\u00famero (se obtiene dividiendo 1 entre el n\u00famero)</li> <li>M\u00e9todo fracci\u00f3n para obtener la parte fraccionaria.</li> </ul>"},{"location":"bloque_ii/tema_10/page-5/","title":"Proyecto","text":"<p>En este proyecto se va a realiza clases wrappers de Arrays, para manejarlos en diferentes situaciones. Para ello se va a crear una interfaz llamada Collection con los siguientes m\u00e9todos:</p> <ul> <li>first(): devuelve el primer elemento de la colecci\u00f3n</li> <li>last(): devuelve el \u00faltimo elemento de la colecci\u00f3n</li> <li>isEmpty(): comprueba si la colecci\u00f3n est\u00e1 vac\u00eda</li> <li>get(): devuelve el primer elemento de la colecci\u00f3n y lo elimina</li> <li>pop(): devuelve el \u00faltimo elemento de la colecci\u00f3n y lo elimina</li> <li>add(element): a\u00f1ade el elemento a la colecci\u00f3n</li> </ul> <p>Los tipos de colecciones que se quieren tratar son las siguientes:</p> <ul> <li>Cola. Este tipo de colecci\u00f3n funciona como la cola de un supermercado y sigue el proceso de una cola FIFO (First In, First Out), es decir, el primero en entrar en la cola, es el primero en salir.</li> <li>Pila. Este tipo de colecci\u00f3n funciona como una pila platos y sigue el proceso de una cola LIFO (Last In, First Out), es decir, el \u00faltimo que ha entrado es el primero en salir.</li> <li>Conjunto. Funciona exactamente igual que una cola, pero con la caracter\u00edstica de que no puede contener elementos repetidos. En caso de que se intentase a\u00f1adir un elemento repetido, \u00e9ste se lo saltar\u00eda.</li> <li>Entradas. Es una cola de elementos de pares clave-valor, donde la clave representada el identificador del valor. Al igual que los conjuntos, en una entrada no puede haber dos elementos iguales con la misma clave. En caso de que se intentase a\u00f1adir un elemento repetido, \u00e9ste se lo saltar\u00eda.</li> </ul> <p>Crea las clases necesarias para representar todas las colecciones, que deben implementar la interfaz creada.</p> <p>Para realizar este proyecto se tendr\u00e1 en cuenta:</p> <ul> <li>Se deber\u00e1 hacer uso de Gen\u00e9ricos donde sea requerido.</li> <li>Se deber\u00e1 entregar un diagrama de clase que represente las relaciones entre las clases y las interfaces.</li> <li>Se valorar\u00e1 la complejidad de un Main que ponga aprueba los m\u00e9todos y clases creadas.</li> <li>Se podr\u00e1 usar la librer\u00eda common realiza en proyectos anteriores, haciendo uso de JARs.</li> <li>El nombre de las funciones ser\u00e1 en ingl\u00e9s y deber\u00e1n ser lo suficiente claras para poder identificarlas con facilidad.</li> <li>El c\u00f3digo se comentar\u00e1 haciendo uso de los comentarios JavaDoc adem\u00e1s, de comentarios normales para dar una explicaci\u00f3n a la parte del c\u00f3digo m\u00e1s importante.</li> <li>El repositorio de GitHub tendr\u00e1 el siguiente nombre pr10java-NOMBRE-collections siendo NOMBRE el nombre del alumno.</li> <li>Se declarar\u00e1 aquellas variables que sean necesarias inicializ\u00e1ndolas si es necesario, indicando el tipo correspondiente.</li> <li>Se har\u00e1 uso de funciones y procedimientos donde sea oportuno.</li> <li>La entrega de este proyecto se realizar\u00e1 a trav\u00e9s de un enlace a un repositorio de GitHub, realizando siempre m\u00e1s de un commit.</li> <li>Se valorar\u00e1 la limpieza, la claridad, y la estructura del proyecto.</li> </ul>"},{"location":"bloque_ii/tema_6/page-1/","title":"1 Arrays unidimensionales","text":""},{"location":"bloque_ii/tema_6/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>Los tipos de datos que conocemos hasta ahora no permiten solucionar problemas que requieren gestionar muchos datos a la vez. Por ejemplo, imaginemos que deseamos almacenar las notas de  una  clase  de  25  alumnos,  para  ello,  con  lo  que  conocemos  hasta  ahora,  no  habr\u00e1  m\u00e1s remedio que declarar 25 variables. Eso es tremendamente pesado de programar. Manejar esos datos  significar\u00eda  estar  continuamente  manejando  25  variables.  Por  ello,  en  casi  todos  los lenguajes se pueden agrupar una serie de variables del mismo tipo en una misma estructura que com\u00fanmente se conoce como array. Esa estructura permite referirnos a todos los elementos, pero tambi\u00e9n nos permite acceder individualmente a cada uno de ellos.</p> <p>Los arrays son una colecci\u00f3n de datos del mismo tipo al que se le pone un nombre. Para acceder a  un  dato  individual  de  la  colecci\u00f3n  hay  que  utilizar  su  posici\u00f3n.  La  posici\u00f3n  es  un  n\u00famero entero, normalmente se le llama \u00edndice. Hay que tener en cuenta que en los arrays el primer elemento tiene como \u00edndice el n\u00famero cero, el segundo el uno y as\u00ed sucesivamente.</p> <p>Un  array  unidimensional  es  aquel  que  tiene  una  \u00fanica  dimensi\u00f3n,  es  decir,  un  \u00fanico  \u00edndice. Tambi\u00e9n se le suele llamar vector</p>"},{"location":"bloque_ii/tema_6/page-1/#declaracion","title":"Declaraci\u00f3n","text":"<p>Existen dos formas de declarar un array unidimensional:</p> <ul> <li><code>tipo nombre_array[];</code></li> <li><code>tipo[] nombre_array;</code></li> </ul> <p>tipo declara el tipo de elemento del array, es decir, el tipo de datos de cada elemento que comprende el array. Dicho tipo de datos puede ser un tipo primitivo o un objeto.</p> <p>Esta declaraci\u00f3n le dice al compilador que dicha variable va a contener un array con elementos de dicho tipo pero todav\u00eda no se reserva espacio en la memoria RAM ya que no se conoce el tama\u00f1o del mismo.</p>"},{"location":"bloque_ii/tema_6/page-1/#creacion","title":"Creaci\u00f3n","text":"<p>Se realiza con el operador new, que es el que realmente crea el array indicando un tama\u00f1o. Cuando se usa new es cuando se reserva el espacio necesario en memoria para el array.</p> <p>Se crea un array de la siguiente manera:  <code>nombre_array = new tipo[tama\u00f1o];</code></p> <p>Ejemplo:</p> <pre><code>int[] grades; //(1)!\ngrades = new int[3]; //(2)!\n</code></pre> <ol> <li>Declaraci\u00f3n del array de enteros llamado grades</li> <li>Creaci\u00f3n del array grades reservando en memoria espacio para 3 enteros</li> </ol> <p>Se puede realizar lo mismo en una \u00fanica l\u00ednea de c\u00f3digo:</p> <pre><code>int[] grades = new int[3];\n</code></pre>"},{"location":"bloque_ii/tema_6/page-1/#referencia-a-los-elementos-del-array","title":"Referencia a los elementos del array","text":"<p>Para referencias los elementos del array se utiliza el \u00edndice de los mismos entre corchetes:</p> <ul> <li><code>grades[0]</code>: es el primer elemento del array, es decir, la primera nota.</li> <li><code>grades[1]</code>: es el segundo elemento del array, es decir, la segunda nota.</li> <li><code>grades[2]</code>: es el tercer elemento del array, es decir, la tercera nota.</li> </ul>"},{"location":"bloque_ii/tema_6/page-1/#asignacion-de-valores","title":"Asignaci\u00f3n de valores","text":"<p>Se puede asignar valores a los elementos del array utilizando el signo =:</p> <pre><code>grades[2] = 8; // Se le asigna un 8 a la tercera nota.\n</code></pre> <p>Tambi\u00e9n se pueden asignar valores a todos los elementos del array utilizando literales array:</p> <pre><code>int[] grades = new int[] {8, 7, 9};\n</code></pre> <p>No es necesario escribir new int[] en las \u00faltimas versiones de Java:</p> <pre><code>int[] grades = {8, 7, 9}; </code></pre> <p>En este caso, se est\u00e1 asignando un 8 a la primera nota, un 7 a la segunda nota y un 9 a la tercera.</p>"},{"location":"bloque_ii/tema_6/page-1/#el-atributo-length","title":"El atributo length","text":"<p>Los arrays poseen el atributo length que contiene el tama\u00f1o del array:</p> <pre><code>System.out.println(grades.length); // 3\n</code></pre>"},{"location":"bloque_ii/tema_6/page-1/#utilizando-el-bucle-for","title":"Utilizando el bucle for","text":"<p>La ventaja de usar arrays es que gracias a un simple bucle for se pueden recorrer f\u00e1cilmente todos los elementos de un array:</p> <pre><code>public class ArrayFor {\npublic void show(){\nint[] grades = {8, 7, 9};\nfor(int i = 0; i &lt; grades.length; i++){\nSystem.out.printf(\"Nota del \u00edndice %d: %d\\n\", i, grades[i]);\n}\n}\npublic static void main(String[] args) {\nnew ArrayFor().show();\n}\n}\n</code></pre> <p>\u00a1CUIDADO!</p> <p>Los \u00edndices del array van desde el 0 hasta length-1. Si un array es de tama\u00f1o 3, sus \u00edndices son 0, 1 y 2. Por eso en la condici\u00f3n del for se debe iterar mientras i sea menor que array.length, y no menor o igual, de esta forma toma como \u00faltimo \u00edndice el length-1. Si pusi\u00e9ramos la condici\u00f3n menor o igual, nos lanzar\u00eda la excepci\u00f3n ArrayIndexOutOfBoundsException ya que estar\u00edamos accediendo al array con el \u00edndice 3, el cual es un \u00edndice no v\u00e1lido.</p> <pre><code>for(int i = 0; i &lt;= grades.length; i++){ // Lanza ArrayIndexOutOfBoundsException\n//...\n}\n</code></pre> <p>Tambi\u00e9n se pueden utilizar con los arrays los bucles for-each:</p> <pre><code>public class ArraysForEach {\npublic void show(){\nint[] grades = {8, 7, 9};\nfor (int grade : grades) {\nSystem.out.printf(\"Nota: %d\\n\", grade);\n}\n}\npublic static void main(String[] args) {\nnew ArraysForEach().show();\n}\n}\n</code></pre> Ejercicio 1 <p>Dado un array de 10 n\u00fameros, realiza la suma de los n\u00fameros pares.</p>"},{"location":"bloque_ii/tema_6/page-1/#metodo-split","title":"M\u00e9todo split","text":"<p>Las clases String y Pattern poseen el m\u00e9todo split que divide una cadena en subcadenas en funci\u00f3n de una expresi\u00f3n regular y devuelve un array con las subcadenas restantes.</p> <pre><code>public class Split {\npublic void show(){\nString string = \"Esto:es:una:cadena:dividida:por:split\";\nString[] stringArray = string.split(\":\");\nSystem.out.println(Arrays.toString(stringArray)); // [Esto, es, una, cadena, dividida, por, split]\n}\npublic static void main(String[] args) {\nnew Split().show();\n}\n}\n</code></pre> <p>Tip</p> <p>F\u00edjense en el m\u00e9todo est\u00e1tico toString de la clase Arrays. Devuelve una cadena con los elementos del array entre corchetes y separados por comas.</p> Ejercicio 2 <p>Realiza un programa que solicite al usuario una frase. Transforma esa frase en un array que cuyo valores sean las palabras de la frase, luego recorre el array.</p>"},{"location":"bloque_ii/tema_6/page-1/#los-arrays-se-implementan-como-objetos","title":"Los arrays se implementan como objetos","text":"<p>En Java, los arrays se implementan como objetos. Una de las ventajas que tiene esto es que los arrays que pierden la referencia pueden ser recolectados. (Ver el apartado referencias del tema 4 Programaci\u00f3n Orientada a Objetos)</p> <p>En la perspectiva de Java, un array es una referencia a una serie de valores que se almacenan en la memoria. El operador new en realidad lo que hace es devolver dicha referencia para poder leer y escribir esos valores.</p> <p>Veamos el efecto del uso operador new en los arrays y c\u00f3mo afectan en la memoria:</p> <p> Figura 1 - Referencia arrays</p> <p>Vemos como el anterior array se ha quedado sin referencia y se marca como elegible para el recolector de basura.</p>"},{"location":"bloque_ii/tema_6/page-1/#que-puede-contener-un-array","title":"\u00bfQu\u00e9 puede contener un array?","text":"<p>El array puede contener objetos o tipos de datos primitivos. En el caso de los tipos de datos primitivos, los valores reales se almacenan en ubicaciones de memoria contigua. En el caso de los objetos de una clase, los objetos reales se almacenan en heap.</p>"},{"location":"bloque_ii/tema_6/page-1/#arrays-de-tipos-primitivos","title":"Arrays de tipos primitivos","text":"<ul> <li> <p>Crear una variable de tipo array s\u00f3lo crea una referencia:</p> <pre><code>int[] a;\n</code></pre> <p> Figura 2 - Declaraci\u00f3n de arrays de tipo primitivos </p> </li> <li> <p>El espacio en memoria para el array se crea con new. Cuando se trata de un array de un tipo primitivo, se crean los elementos del array y se inicializan sus valores por defecto:</p> <pre><code>a = new int[5];\n</code></pre> <p> Figura 3 - Inicializaci\u00f3n de arrays de tipo primitivos </p> </li> </ul>"},{"location":"bloque_ii/tema_6/page-1/#array-de-objetos","title":"Array de objetos","text":"<ul> <li> <p>Crear una variable de tipo array de objetos s\u00f3lo crea la referencia:</p> <pre><code>Complejo[] a;\n</code></pre> <p> Figura 4 - Declaraci\u00f3n de arrays de objetos </p> </li> <li> <p>Con new se reserva el espacio para el array de referencias pero no los objetos a los que apuntar\u00e1n esas referencias. Las referencias se inicializan a su valor por defecto (null):</p> <pre><code>a = new Complejo[4];\n</code></pre> <p> Figura 5 - Inicializaci\u00f3n de arrays de objetos </p> </li> <li> <p>Los objetos hay que crearlos posteriormente:</p> <p> Figura 6 - Creaci\u00f3n de objetos de objetos </p> </li> </ul>"},{"location":"bloque_ii/tema_6/page-1/#asignacion-de-arrays","title":"Asignaci\u00f3n de arrays","text":"<p>Como en Java los arrays son objetos, la asignaci\u00f3n se realiza como los objetos (Ver el apartado referencias del tema 4 Programaci\u00f3n Orientada a Objetos)</p> <p>Un array se puede asignar a otro array (si son del mismo tipo). La asignaci\u00f3n solo copia referencias, es decir, la direcci\u00f3n de memoria. Por lo tanto, ambos arrays apuntar\u00e1n al mismo sitio:</p> <pre><code>int[] a;\nint[] b = {3, 4, 5, 6, 7, 8};\na = b;\n</code></pre> <p> Figura 7 - Referencia array</p> <p>Esta asignaci\u00f3n provoca que cualquier cambio en a tambi\u00e9n cambie el array b ya que de hecho, son el mismo array:</p> <pre><code>public class Assignment {\npublic void show(){\nint[] a;\nint[] b = {3, 4, 5, 6, 7, 8};\na = b;\nSystem.out.println(Arrays.toString(b)); // [3, 4, 5, 6, 7, 8]\na[0] = 1;\nSystem.out.println(Arrays.toString(b)); // [1, 4, 5, 6, 7, 8]\n}\npublic static void main(String[] args) {\nnew Assignment().show();\n}\n}\n</code></pre> Ejercicio 3 <p>Realiza un programa que contenga un m\u00e9todo que calcule los n primeros m\u00faltiplos de un n\u00famero. Luego realiza otro m\u00e9todo donde calcule la mitad de esos n\u00fameros. NO SE PUEDEN UTILIZAR PAR\u00c1METROS DE TIPO ARRAY</p>"},{"location":"bloque_ii/tema_6/page-1/#comparacion-de-arrays","title":"Comparaci\u00f3n de arrays","text":"<p>Como en Java los arrays son objetos, la comparaci\u00f3n se realiza como los objetos (Ver el apartado referencias del tema 4 Programaci\u00f3n Orientada a Objetos).</p> <p>El operador de igualdad <code>==</code> cuando se utiliza con arrays, no compara el contenido de los arrays sino sus direcciones de memoria o referencias, es decir, si apuntan al mismo array. Lo mismo ocurre con el m\u00e9todo equals de los arrays, que compara las direcciones de memoria. Si queremos comparar el contenido de los arrays, tendremos que utilizar el m\u00e9todo est\u00e1tico equals de la clase Arrays.</p> <pre><code>public class Comparison {\npublic void show(){\nint[] array1;\nint[] array2 = {3, 4, 5, 6, 7, 8};\nint[] array3 = {3, 4, 5, 6, 7, 8};\narray1 = array2;\nSystem.out.println(array1 == array2); //(1)!\nSystem.out.println(array2 == array3); //(2)!\nSystem.out.println(array1.equals(array2)); //(3)!\nSystem.out.println(array2.equals(array3)); //(4)!\nSystem.out.println(Arrays.equals(array1, array2)); //(5)!\nSystem.out.println(Arrays.equals(array2, array3)); //(6)!\n}\npublic static void main(String[] args) {\nnew Comparison().show();\n}\n}\n</code></pre> <ol> <li>true porque apuntan al mismo array</li> <li>false porque no apuntan al mismo array</li> <li>true porque apuntan al mismo array</li> <li>false porque apuntan al mismo array</li> <li>true porque el contenido es el mismo ya que apuntan al mismo array</li> <li>true porque el contenido es el mismo</li> </ol>"},{"location":"bloque_ii/tema_6/page-1/#arrays-como-parametros","title":"Arrays como par\u00e1metros","text":"<p>Al igual que las variables, tambi\u00e9n podemos pasar arrays a los m\u00e9todos, es decir, se pueden definir par\u00e1metros del tipo array. En la llamada al m\u00e9todo, lo que el m\u00e9todo recibe como argumento es la direcci\u00f3n de memoria del array, por lo que si el m\u00e9todo modifica el array, el array del m\u00e9todo que efect\u00faa la llamada tambi\u00e9n se ve afectado por dichos cambios.</p> <pre><code>public class ArraysAsParameters {\npublic void show(){\nint[] array = {3, 4, 5, 6, 7, 8};\nSystem.out.println(Arrays.toString(array)); // [3, 4, 5, 6, 7, 8]\nmethod(array);\nSystem.out.println(Arrays.toString(array)); // [6, 8, 10, 12, 14, 16]\n}\npublic void method(int[] array){\nfor (int i = 0; i &lt; array.length; i++) {\narray[i] *= 2;\n}\n}\npublic static void main(String[] args) {\nnew ArraysAsParameters().show();\n}\n}\n</code></pre> Ejercicio 4 <p>Realiza un aplicaci\u00f3n que contenga un m\u00e9todo que reciba un array de cadenas y una palabra. El m\u00e9todo localizar\u00e1 dicha palabra en el array, y devolver\u00e1 true en caso de encontrarla, y false en cualquier otro caso.</p>"},{"location":"bloque_ii/tema_6/page-1/#como-retornar-un-array","title":"C\u00f3mo retornar un array","text":"<p>Un m\u00e9todo tambi\u00e9n puede devolver un array, en cuyo caso, lo que retorna es la direcci\u00f3n de dicho array.</p> <pre><code>public class ReturningAnArray {\npublic void show(){\nint[] a;\na = method();\nSystem.out.println(Arrays.toString(a)); // [3, 4, 5, 6, 7, 8]\n}\npublic int[] method(){\nreturn new int[]{3, 4, 5, 6, 7, 8};\n}\npublic static void main(String[] args) {\nnew ReturningAnArray().show();\n}\n}\n</code></pre> <p>En este caso, el main define una variable a de tipo array de enteros pero no hace el new del array, sino que recibe la direcci\u00f3n de memoria que le devuelve el m\u00e9todo method. Sin embargo, el m\u00e9todo method s\u00ed que hace el new del array porque su responsabilidad es crear el array, darle valores y devolverlo.</p> Ejercicio 5 <p>Realiza un programa con un m\u00e9todo que dado un n\u00famero positivo, devuelva sus divisores.</p>"},{"location":"bloque_ii/tema_6/page-1/#excepcion-arrayindexoutofboundsexception","title":"Excepci\u00f3n ArrayIndexOutOfBoundsException","text":"<p>Cuando se intenta acceder a un elemento del array que no existe, Java nos lanza una excepci\u00f3n ArrayIndexOutOfBoundsException. El programador no debe capturar con un try-catch la excepci\u00f3n sino que debe corregir el error de programaci\u00f3n que ha producido dicha excepci\u00f3n. Veamos un ejemplo:</p> <pre><code>public class ArrayIndexOutOfBoundsException1 {\npublic void show(){\nint[] grades = {8, 7, 9};\nfor (int i = 0; i &lt;= grades.length; i++) {\nSystem.out.printf(\"Nota en el \u00edndice %d: %d\\n\", i, grades[i]);\n}\n}\npublic static void main(String[] args) {\nnew ArrayIndexOutOfBoundsException1().show();\n}\n}\n</code></pre> <p>Como vemos en el ejemplo, al usar <code>&lt;=</code>, se lanzar\u00e1 una excepci\u00f3n al intentar acceder al valor de la posici\u00f3n <code>grades[3]</code>, que es el valor de grades.length, que es inexistente. No se debe usar un try-catch para manejar este error, sino que el programador debe corregir el error.</p>"},{"location":"bloque_ii/tema_6/page-2/","title":"2 Arrays Multidimensionales","text":""},{"location":"bloque_ii/tema_6/page-2/#introduccion","title":"Introducci\u00f3n","text":"<p>Los arrays multidimensionales son aquellos que tienen m\u00e1s de una dimensi\u00f3n, es decir, son arrays que contienen otros arrays. Tienen m\u00e1s de un \u00edndice, uno por cada dimensi\u00f3n.</p> <p>Un array con dos dimensiones es un array bidimensional y tambi\u00e9n se le suele llamar matriz. Si adem\u00e1s, la matriz tiene el mismo n\u00famero de filas que de columnas, entonces se llama matriz cuadrada.</p>"},{"location":"bloque_ii/tema_6/page-2/#declaracion","title":"Declaraci\u00f3n","text":"<p>Se declaran como los arrays unidimensionales a\u00f1adiendo tantos corchetes <code>[ ]</code> como dimensiones haya. Por ejemplo, veamos las dos formas de declarar un array bidimensional:</p> <ul> <li><code>tipo nombre_array[][];</code></li> <li><code>tipo[][] nombre_array:</code></li> </ul> <p>tipo declara el tipo de elemento del array, es decir, el tipo de datos de cada elemento que comprende el array. Dicho tipo de datos puede ser un tipo primitivo o un objeto.</p> <p>Esta declaraci\u00f3n le dice al compilador que dicha variable va a contener un array con elementos de dicho tipo pero todav\u00eda no se reserva espacio en la memoria RAM ya que no se conoce el tama\u00f1o del mismo.</p>"},{"location":"bloque_ii/tema_6/page-2/#creacion","title":"Creaci\u00f3n","text":"<p>Se realiza con el operador new, que es realmente crea el array indicando un tama\u00f1o. Cuando se usa un new es cuando se reserva el espacio necesario en memoria para el array.</p> <p>Se crea un array bidimensional de la siguiente manera: <code>nombre_array = new tipo[filas][columnas]</code></p> <pre><code>int[] a = new int[10]; // Array de una dimensi\u00f3n\nint[][] b = new int[3][5]; // Array bidimensional (dos dimensiones)\nint[][][] c = new int[4][6][2]; // Array tridimensional (tres dimensiones)\n</code></pre> <p> Figura 8 - Array multidimensionales</p> <p>Los arrays multidimensionales son arrays que contienes arrays, por lo tanto un array bidimensional se puede representar de la siguiente manera</p> <p> Figura 9 - Array bidimensional</p>"},{"location":"bloque_ii/tema_6/page-2/#referencia-a-los-objetos-del-array","title":"Referencia a los objetos del array","text":"<p>Para referencias los elementos del array se utiliza el \u00edndice de los mismos entre corchetes:</p> <ul> <li><code>a[9]</code>: es el \u00faltimo elemento unidimensional de a.</li> <li><code>b[1][2]</code>: es el elemento que est\u00e1 justo en medio del array bidimensional b.</li> <li><code>c[0][0][0]</code>: es el primer elemento del array tridimensional c.</li> </ul> <p>Supongamos que tenemos el siguiente array bidimensional:</p> <pre><code>int[][] = new int[5][4];\n</code></pre> <p>Es un array que contiene 5 arrays unidimensionales de 4 posiciones cada uno. Veamos en la imagen la referencia de sus elementos:</p> <p> Figura 10 - Referencia a un array multidimensional</p> <ul> <li>m: contiene la referencia al array completo.</li> <li>m[0]: contiene la referencia del primer array unidimensional.</li> <li>m[4]: contiene la referencia del quinto array unidimensional.</li> <li>m[0] [0]: contiene el primer elemento del primer array unidimensional.</li> <li>m[0] [3]: contiene el \u00faltimo elemento del primer array unidimensional.</li> <li>m[4] [3]: contiene el \u00faltimo elemento del \u00faltimo array unidimensional.</li> </ul>"},{"location":"bloque_ii/tema_6/page-2/#asignacion-de-valores","title":"Asignaci\u00f3n de valores","text":"<p>Se pueden asignar valores a los elementos del array utilizando el signo <code>=</code>.</p> <pre><code>a[9] = 8; //(1)!\nb[1][2] = 9; //(2)!\nc[0][0][0] = 1; //(3)!\n</code></pre> <ol> <li>Se asigna un 8 al \u00faltimo elemento del array unidimensional a.</li> <li>Se asigna un 9 al elemento que est\u00e1 justo en medio del array bidimensional b.</li> <li>Se asigna un 1 al primer elemento del array tridimensional c.</li> </ol> <p>Tambi\u00e9n se pueden asignar valores a todos los elementos del array utilizando literales array:</p> <pre><code>// Array de dos dimensiones [3][5]\nint[][] twoDimensions = {\n{0, 1, 2, 3, 4},\n{5, 6, 7, 8, 9},\n{10, 11, 12, 13, 14}\n}\n// Array de tres dimensiones [2][3][2]\nint[][][] threeDimensions = {\n{ {0, 1}, {2, 3}, {4, 5}},\n{ {6, 7}, {8, 9}, {10, 11}}\n}\n</code></pre>"},{"location":"bloque_ii/tema_6/page-2/#el-atributo-length","title":"El atributo length","text":"<p>Los arrays poseen el atributo length que contiene el tama\u00f1o del array. Como los arrays multidimensionales son arrays de arrays, se puede aplicar a cualquier posici\u00f3n que contenga una referencia. Si se aplica a una posici\u00f3n que contenga un elemento, entonces da error de compilaci\u00f3n.</p> <pre><code>public class LengthMultidimensional {\npublic void show(){\n// Array de dos dimensiones [3][5]\nint[][] twoDimensions = {\n{0, 1, 2, 3, 4},\n{5, 6, 7, 8, 9},\n{10, 11, 12, 13, 14}\n};\n// Array de tres dimensiones [2][3][2]\nint[][][] threeDimensions = {\n{ {0, 1}, {2, 3}, {4, 5}},\n{ {6, 7}, {8, 9}, {10, 11}}\n};\nSystem.out.println(twoDimensions.length); // 3\nSystem.out.println(twoDimensions[0].length); // 5\nSystem.out.println(twoDimensions[1].length); // 5\nSystem.out.println(twoDimensions[2].length); // 5\nSystem.out.println(threeDimensions.length); // 2\nSystem.out.println(threeDimensions[0].length); // 3\nSystem.out.println(threeDimensions[1].length); // 3\nSystem.out.println(threeDimensions[0][0].length); // 2\nSystem.out.println(threeDimensions[1][2].length); // 2\nSystem.out.println(threeDimensions[1][2][0].length); // Error\n}\npublic static void main(String[] args) {\nnew LengthMultidimensional().show();\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_6/page-2/#utilizacion-del-bucle-for","title":"Utilizaci\u00f3n del bucle for","text":"<p>La ventaja de usar arrays es que gracias a un simple bucle for se pueden recorrer f\u00e1cilmente todos los elementos de un array multidimensional.</p> <pre><code>public class ForMultidimensional {\npublic void show(){\n// Array de dos dimensiones [3][5]\nint[][] twoDimensions = {\n{0, 1, 2, 3, 4},\n{5, 6, 7, 8, 9},\n{10, 11, 12, 13, 14}\n};\n// Array de tres dimensiones [2][3][2]\nint[][][] threeDimensions = {\n{ {0, 1}, {2, 3}, {4, 5}},\n{ {6, 7}, {8, 9}, {10, 11}}\n};\nfor(int i = 0; i &lt; twoDimensions.length; i++){\nfor(int j = 0; j &lt; twoDimensions[0].length; j++){\nSystem.out.printf(\"%2d \", twoDimensions[i][j]);\n}\nSystem.out.println();\n}\nSystem.out.println();\nfor (int i = 0; i &lt; threeDimensions.length; i++) {\nfor (int j = 0; j &lt; threeDimensions[i].length; j++) {\nfor (int k = 0; k &lt; threeDimensions[i][j].length; k++) {\nSystem.out.printf(\"%2d \", threeDimensions[i][j][k]);\n}\n}\n}\n}\npublic static void main(String[] args) {\nnew ForMultidimensional().show();\n}\n}\n</code></pre> <p>Tambi\u00e9n se pueden utilizar los bucles for-each pero solamente con arrays unidimensionales. En un array multidimensional, se puede utilizar un for-each en cualquiera de los arrays unidimensionales que forman parte del array multidimensional</p> <p>Para mostrar un array multidimensional, tambi\u00e9n se puede utilizar el m\u00e9todo est\u00e1tico deepToString de la clase Arrays. Devuelve una cadena con los elementos del array entre corchetes y separados por comas. Se utiliza con arrays multidimensionales. Para los arrays unidimensionales se usa el m\u00e9todo Arrays.toString.</p> <pre><code>public class DeepToString {\npublic void show(){\nint[][] twoDimensions = {\n{0, 1, 2, 3, 4},\n{5, 6, 7, 8, 9},\n{10, 11, 12, 13, 14}\n};\nSystem.out.println(Arrays.deepToString(twoDimensions)); // [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14]]\n}\npublic static void main(String[] args) {\nnew DeepToString().show();\n}\n}\n</code></pre> Ejercicio 1 <p>Realiza un programa que solicite las 3 notas de 5 alumnos, hallando la nota mayor, y a qui\u00e9n pertenece, la nota inferior, y a qui\u00e9n pertenece, y la nota mayor e inferior de cada alumno.</p>"},{"location":"bloque_ii/tema_6/page-2/#comparacion-de-arrays","title":"Comparaci\u00f3n de arrays","text":"<p>Como en Java los arrays son objetos, la comparaci\u00f3n se realiza como los objetos (Ver el apartado referencias del tema 4 Programaci\u00f3n Orientada a Objetos).</p> <p>El operador de igualdad <code>==</code> cuando se utiliza con arrays, no compara el contenido de los arrays sino sus direcciones de memoria o referencias, es decir, si apuntan al mismo array. Lo mismo ocurre cuando el m\u00e9todo equals de los arrays, que compara las direcciones de memoria. Si queremos comparar el contenido de los arrays, tendremos que utilizar el m\u00e9todo est\u00e1tico equals de la clase Arrays para los unidimensionales y el m\u00e9todo deepEquals para los multidimensionales.</p> <pre><code>public class ComparisonMultidimensional {\npublic void show(){\nint[][] twoDimension1;\nint[][] twoDimension2 = {\n{0, 1, 2, 3, 4},\n{5, 6, 7, 8, 9},\n{10, 11, 12, 13, 14}\n};\nint[][] twoDimension3 = {\n{0, 1, 2, 3, 4},\n{5, 6, 7, 8, 9},\n{10, 11, 12, 13, 14}\n};\ntwoDimension1 = twoDimension2;\nSystem.out.println(twoDimension1 == twoDimension2); // true porque apuntan al mismo array\nSystem.out.println(twoDimension2 == twoDimension3); // false porque no apuntan al mismo array\nSystem.out.println(twoDimension1.equals(twoDimension2)); // true porque apuntan al mismo array\nSystem.out.println(twoDimension2.equals(twoDimension3)); // false porque no apuntan al mismo array\nSystem.out.println(Arrays.deepEquals(twoDimension1, twoDimension2)); // true porque el contenido es el mismo ya que apuntan al mismo array\nSystem.out.println(Arrays.deepEquals(twoDimension2, twoDimension3)); // true porque el contenido es el mismo\nSystem.out.println(Arrays.equals(twoDimension2, twoDimension3)); // false porque para arrays multidimensionales es deepEquals en lugar de equals\n}\npublic static void main(String[] args) {\nnew Comparison().show();\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_6/page-2/#arrays-irregulares","title":"Arrays irregulares","text":"<p>Los arrays unidimensionales que forman un array multidimensional no tienen porqu\u00e9 tener todos el mismo tama\u00f1o.</p> <p> Figura 11 - Arrays Irregulares</p> <pre><code>public class IrregularArrays {\npublic void show(){\nint[][] b = { {1,2,3}, {4,5,6,7}, {8,9}};\nfor (int i = 0; i &lt; b.length; i++) {\nfor (int j = 0; j &lt; b[i].length; j++) {\nSystem.out.printf(\"%2d \", b[i][j]);\n}\nSystem.out.println();\n}\n}\npublic static void main(String[] args) {\nnew IrregularArrays().show();\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_6/page-3/","title":"3 Argumentos variables","text":""},{"location":"bloque_ii/tema_6/page-3/#introduccion","title":"Introducci\u00f3n","text":"<p>Se puede dar el caso de que se necesite crear un m\u00e9todo que tome una cantidad variable de argumentos, seg\u00fan su uso preciso. Por ello, Java en su versi\u00f3n 5 incorpor\u00f3 los llamados varargs que es la abreviatura de argumentos de longitud variable (Variable - Length Arguments). Un m\u00e9todo que toma una cantidad variable de argumentos se denomina m\u00e9todos varargs.</p>"},{"location":"bloque_ii/tema_6/page-3/#sintaxis-de-varargs","title":"Sintaxis de Varargs","text":"<p>Un par\u00e1metro de longitud variable se espec\u00edfica por tres punts(...).</p> <pre><code>public static int add(int... nums)\n</code></pre> <p>Esta sintaxis le dice al compilador que se puede llamar al m\u00e9todo add con cero o m\u00e1s argumentos . Adem\u00e1s hace que nums se declare impl\u00edcitamente como un array de tipo int[]. Por lo tanto, dentro del m\u00e9todo add se accede a nums usando la sintaxis de array normal:</p> <pre><code>public class Varargs1 {\npublic void show(){\nSystem.out.println(add());\nSystem.out.println(add(1));\nSystem.out.println(add(new int[]{1}));\nSystem.out.println(add(1,2));\nSystem.out.println(add(1,2,3));\nSystem.out.println(add(1,2,3,4));\nSystem.out.println(add(new int[]{1, 2, 3, 4}));\n}\nprivate int add(int... nums) {\nint sum = 0;\nfor (int i = 0; i &lt; nums.length; i++) {\nsum += nums[i];\n}\nreturn sum;\n}\npublic static void main(String[] args) {\nnew Varargs1().show();\n}\n}\n</code></pre> <p>Si nos fijamos en el ejemplo, el m\u00e9todo add se llama con diferentes n\u00fameros de argumentos, incluyendo ning\u00fan argumento. Los argumentos se colocan autom\u00e1ticamente en un array y se pasan nums. En el caso de que no haya argumentos, la longitud del array es cero.</p> Ejercicio 1 <p>Realiza un programa que contenga un m\u00e9todo que pueda recibir todos los par\u00e1metros que desee. Halla la suma de esos n\u00fameros</p>"},{"location":"bloque_ii/tema_6/page-3/#metodos-con-parametros-normales-y-parametros-variables","title":"M\u00e9todos con par\u00e1metros normales y par\u00e1metros variables","text":"<p>Un m\u00e9todo puede tener par\u00e1metros normales junto con un par\u00e1metro de longitud variable. Sin embargo, el par\u00e1metro de longitud variable debe ser el \u00faltimo par\u00e1metro declarado por el m\u00e9todo y solamente se acepta un varargs por m\u00e9todo. Por ejemplo, esta declaraci\u00f3n de m\u00e9todo es perfectamente aceptable:</p> <pre><code>int compute(int x, int y, double x, int... values)\n</code></pre> <p>En este caso, los tres primeros argumentos utilizados en una llamada al m\u00e9todo compute se corresponden con los primeros tres par\u00e1metros. Entonces, se supone que los argumentos restantes pertenecen a values.</p> <pre><code>public class Varargs2 {\npublic void show(){\nSystem.out.println(operate(2));\nSystem.out.println(operate(2, 1));\nSystem.out.println(operate(2, 1, 2));\nSystem.out.println(operate(2, 1, 2, 3));\nSystem.out.println(operate(2, 1, 2, 3, 4));\n}\npublic int operate(int mult, int... summands){\nint sum = 0;\nfor (int i = 0; i &lt; summands.length; i++) {\nsum += summands[i];\n}\nreturn sum * mult;\n}\npublic static void main(String[] args) {\nnew Varargs2().show();\n}\n}\n</code></pre> <p>Recuerda, el par\u00e1metro varargs debe ser el \u00faltimo. Por ejemplo, la siguiente declaraci\u00f3n es incorrecta:</p> <pre><code>int compute(int x, int y, double z, int... values, boolean exit); //error\n</code></pre> <p>Adem\u00e1s, solamente se acepta un varargs por m\u00e9todo. Por ejemplo, esta declaraci\u00f3n tampoco es v\u00e1lida:</p> <pre><code>int compute(int x, int y, double z, int... values, double... nums); //error\n</code></pre> Ejercicio 2 <p>Realiza un m\u00e9todo que reciba un par\u00e1metro num\u00e9rico y pueda recibir varios n\u00fameros. Devuelve el resultado de sumar cada n\u00famero multiplicado por el par\u00e1metro.</p>"},{"location":"bloque_ii/tema_6/page-4/","title":"4 La clase Arrays","text":""},{"location":"bloque_ii/tema_6/page-4/#introduccion","title":"Introducci\u00f3n","text":"<p>En el paquete java.utils se encuentra la clase Arrays. Esta clase contiene m\u00e9todos est\u00e1ticos para manipular arrays, como por ejemplo, b\u00fasquedas, comparaciones, copias y ordenaciones.</p>"},{"location":"bloque_ii/tema_6/page-4/#contenido-de-un-array","title":"Contenido de un array","text":"<ul> <li> <p>M\u00e9todo toString: devuelve una representaci\u00f3n en cadena del contenido del array especificado. Dicha cadena est\u00e1 formada por los elementos del array entre corchetes y separados por comas. Es muy \u00fatil para sacar por consola la informaci\u00f3n sobre el array. Se utiliza con arrays unidimensionales.</p> <pre><code>public class ToString {\npublic void show(){\nint[] array = {3, 4, 5, 6, 7, 8};\nSystem.out.printf(\"La informaci\u00f3n del array es %s\", Arrays.toString(array));\n}\npublic static void main(String[] args) {\nnew ToString().show();\n}\n}\n</code></pre> </li> <li> <p>M\u00e9todo deepToString: igual que el anterior pero para arrays multidimensionales:</p> <pre><code>public class DeepToString {\npublic void show(){\nint[][] twoDimensions = {\n{0, 1, 2, 3, 4},\n{5, 6, 7, 8, 9},\n{10, 11, 12, 13, 14}\n};\nSystem.out.println(Arrays.deepToString(twoDimensions)); // [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14]]\n}\npublic static void main(String[] args) {\nnew DeepToString().show();\n}\n}\n</code></pre> </li> </ul>"},{"location":"bloque_ii/tema_6/page-4/#rellenar-un-array","title":"Rellenar un array","text":"<p>El m\u00e9todo fill permite rellenar todo un array unidimensional con un determinado valor. Tambi\u00e9n tiene una versi\u00f3n sobrecargado para especificar un rango.</p> <pre><code>public class Fill {\npublic void show(){\nint[] array = new int[6];\nArrays.fill(array, 1);\nSystem.out.println(Arrays.toString(array)); // [1, 1, 1, 1, 1, 1]\nArrays.fill(array, 2, 5, 0);\nSystem.out.println(Arrays.toString(array)); // [1, 1, 0, 0, 0, 1]\n}\npublic static void main(String[] args) {\nnew Fill().show();\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_6/page-4/#busquedas","title":"B\u00fasquedas","text":"<p>El m\u00e9todo binarySearch:</p> <ul> <li>permite buscar un elemento de forma ultra r\u00e1pida en un array ordenado (en un array desordenado, sus resultados son impredecibles)</li> <li>Devuelve el \u00edndice en el que est\u00e1 colocado el elemento.</li> <li>Si el elemento no se encuentra, devuelve un n\u00famero negativo.</li> <li>Si el array contiene m\u00faltiples elementos con el valor especificado, no hay garant\u00eda de cu\u00e1l ser\u00e1 encontrado.</li> <li>Est\u00e1 sobrecargado para buscar en un determinado rango del array. Se proporcionan dos par\u00e1metros m\u00e1s para especificar el rango:<ul> <li>fromIndex: el \u00edndice (incluido) de la parte inferior del rango.</li> <li>toIndex: el \u00edndice (excluido) de la parte superior del rango.</li> </ul> </li> </ul> <pre><code>public class BinarySearch {\npublic void show(){\nint lowerRange, higherRange;\nint[] array = {3, 4, 5, 6, 7, 8};\nint number = 9;\nint index = Arrays.binarySearch(array, number);\nif(index &gt;= 0){\nSystem.out.printf(\"El n\u00famero %d se encuentra en el \u00edndice %d\\n\", number, index);\n} else {\nSystem.out.printf(\"El n\u00famero %d no se encuentra en el array\\n\", number);\n}\nlowerRange = 3;\nhigherRange = 6; // Como est\u00e1 excluido, se busca hasta el \u00edndice 5\nindex = Arrays.binarySearch(array, lowerRange, higherRange, number);\nif(index &gt;= 0){\nSystem.out.printf(\"El n\u00famero %d se encuentra en el \u00edndice %d\\n\", number, index);\n} else {\nSystem.out.printf(\"El n\u00famero %d no se encuentra en el array\\n\", number);\n}\n}\npublic static void main(String[] args) {\nnew BinarySearch().show();\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_6/page-4/#comparaciones","title":"Comparaciones","text":"<p>Adem\u00e1s de los m\u00e9todos, equals para los arrays unidimensionales, y deepEquals para los multidimensionales, existen otros m\u00e9todos para comparar:</p> <ul> <li> <p>M\u00e9todo compare: compara dos arrays lexicogr\u00e1ficamente. Tambi\u00e9n tiene una versi\u00f3n sobrecargada para especificar un rango. Devuelve:         - el valor 0: si los dos arrays son iguales y contienen los mismos elementos en el mismo orden.         - un n\u00famero negativo: si el primer array es lexicogr\u00e1ficamente inferior al segundo.         - un n\u00famero positivo: si el primer array es lexicogr\u00e1ficamente superior al segundo.</p> <pre><code>public class Compare {\npublic void show(){\nint result;\nboolean[] arrayBoolean1 = {true, true, false};\nboolean[] arrayBoolean2 = {true, true, false};\nchar[] arrayChar1 = {'m', 'n', 't'};\nchar[] arrayChar2 = {'m', 'n', 'a'};\nchar[] arrayChar3 = {'M', 'n', 't'};\nint[] arrayInt1 = {3, 4, 5};\nint[] arrayInt2 = {3, 4, 5};\nint[] arrayInt3 = {3, 4, 5, 6};\nresult = Arrays.compare(arrayBoolean1, arrayBoolean2);\nSystem.out.printf(\"El resultado de comparar %s y %s es: \",\nArrays.toString(arrayBoolean1), Arrays.toString(arrayBoolean2));\ncomparison(result);\nresult = Arrays.compare(arrayChar1, arrayChar2);\nSystem.out.printf(\"El resultado de comparar %s y %s es: \",\nArrays.toString(arrayChar1), Arrays.toString(arrayChar2));\ncomparison(result);\nresult = Arrays.compare(arrayChar3, arrayChar2);\nSystem.out.printf(\"El resultado de comparar %s y %s es: \",\nArrays.toString(arrayChar3), Arrays.toString(arrayChar2));\ncomparison(result);\nresult = Arrays.compare(arrayInt1, arrayInt2);\nSystem.out.printf(\"El resultado de comparar %s y %s es: \",\nArrays.toString(arrayInt1), Arrays.toString(arrayInt2));\ncomparison(result);\nresult = Arrays.compare(arrayInt1, arrayInt3);\nSystem.out.printf(\"El resultado de comparar %s y %s es: \",\nArrays.toString(arrayInt1), Arrays.toString(arrayInt3));\ncomparison(result);\nresult = Arrays.compare(arrayInt1,0, 3 ,arrayInt3, 0, 3);\nSystem.out.printf(\"El resultado de comparar %s y %s en el rango 0-2 es: \",\nArrays.toString(arrayInt1), Arrays.toString(arrayInt3));\ncomparison(result);\n}\npublic void comparison(int result){\nif(result == 0){\nSystem.out.println(\"los arrays son iguales\");\n} else if(result &lt; 0){\nSystem.out.println(\"el primer array es menor\");\n} else {\nSystem.out.println(\"el primer array es mayor\");\n}\n}\npublic static void main(String[] args) {\nnew Compare().show();\n}\n}\n</code></pre> </li> <li> <p>M\u00e9todo mismatch: encuentra y devuelve el \u00edndice de la primera diferencia entre dos arrays. Si no encuentra ninguna diferencia, devuelve -1. Tambi\u00e9n tiene una versi\u00f3n sobrecargada para especificar un rango.</p> </li> </ul> <pre><code>public class Mismatch {\npublic void show(){\nint[] array1 = {3, 4, 5, 6, 7, 8};\nint[] array2 = {3, 4, 5, 6, 7, 8};\nint[] array3 = {3, 4, 5, 6, 7, 8, 9, 10, 11};\nint indexMismatch;\nindexMismatch = Arrays.mismatch(array1, array2);\nif(indexMismatch == -1){\nSystem.out.printf(\"%s y %s son iguales\\n\", Arrays.toString(array1), Arrays.toString(array2));\n} else {\nSystem.out.printf(\"%s y %s tienen su primera diferencia en el elemento %d\\n\",\nArrays.toString(array1), Arrays.toString(array2), indexMismatch);\n}\nindexMismatch = Arrays.mismatch(array1, array3);\nif(indexMismatch == -1){\nSystem.out.printf(\"%s y %s son iguales\\n\", Arrays.toString(array1), Arrays.toString(array3));\n} else {\nSystem.out.printf(\"%s y %s tienen su primera diferencia en el elemento %d\\n\",\nArrays.toString(array1), Arrays.toString(array3), indexMismatch);\n}\nindexMismatch = Arrays.mismatch(array1, 2, 6, array3, 2, 6);\nif(indexMismatch == -1){\nSystem.out.printf(\"%s y %s son iguales en el rango 2-5\\n\", Arrays.toString(array1), Arrays.toString(array2));\n} else {\nSystem.out.printf(\"%s y %s tienen su primera diferencia en el elemento %d en el rango 2-5\\n\",\nArrays.toString(array1), Arrays.toString(array2), indexMismatch);\n}\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_6/page-4/#copias","title":"Copias","text":"<ul> <li> <p>M\u00e9todo copyOf: obtiene una copia de un array. Recibe dos par\u00e1metros, el array a copiar y el tama\u00f1o del array resultante. De mode que:         - si el tama\u00f1o es menor que el del array original: s\u00f3lo obtiene una copia de los primeros elementos, tantos como indique el tama\u00f1o.         - si el tama\u00f1o es mayor que el original: devuelve un array en el que los elementos superan al original se rellenaran con el valor por defecto seg\u00fan el tipo de datos del array.</p> <pre><code>public class CopyOf {\npublic void show(){\nint[] array1 = {3, 4, 5, 6, 7, 8, 9, 10};\nint[] array2 = Arrays.copyOf(array1, 5);\nint[] array3 = Arrays.copyOf(array1, 10);\nSystem.out.println(Arrays.toString(array2)); // [3, 4, 5, 6, 7]\nSystem.out.println(Arrays.toString(array3)); // [3, 4, 5, 6, 7, 8, 9, 10, 0, 0]\n}\npublic static void main(String[] args) {\nnew CopyOf().show();\n}\n}\n</code></pre> </li> <li> <p>M\u00e9todo copyOfRange: obtiene una copia de un array especificando el rango, es decir, de qu\u00e9 elemento a qu\u00e9 elemento se hace la copia.</p> <pre><code>public class CopyOfRange {\npublic void show(){\nint[] array1 = {3, 4, 5, 6, 7, 8, 9, 10};\nint[] array2 = Arrays.copyOfRange(array1, 2, 6);\nSystem.out.println(Arrays.toString(array2)); // [5, 6, 7, 8]\n}\npublic static void main(String[] args) {\nnew CopyOfRange().show();\n}\n}\n</code></pre> </li> </ul>"},{"location":"bloque_ii/tema_6/page-4/#ordenaciones","title":"Ordenaciones","text":"<p>El m\u00e9todo sort ordena un array de forma ascendente. Tambi\u00e9n tiene una versi\u00f3n sobrecargada para especificar un rango.</p> <pre><code>public class Sort {\npublic void show(){\nint[] array1 = {8, 4, 3, 7, 5, 6};\nint[] array2 = {8, 4, 3, 7, 5, 6};\nArrays.sort(array1);\nSystem.out.println(Arrays.toString(array1)); // [3, 4, 5, 6, 7, 8]\nArrays.sort(array2,1 ,5);\nSystem.out.println(Arrays.toString(array2)); // [8, 3, 4, 5, 7, 6]\n}\npublic static void main(String[] args) {\nnew Sort().show();\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_6/page-5/","title":"Ejercicios","text":"Ejercicio 1 <p>Realiza una funci\u00f3n que reciba varios n\u00fameros enteros y devuelva la multiplicaci\u00f3n de todos los n\u00fameros enteros.</p> Ejercicio 2 <p>Realiza una funci\u00f3n que reciba un array y devuelva otro array con sus elementos invertidos. Por ejemplo, si recibe {1, 2, 3} devuelve {3, 2, 1}.</p> Ejercicio 3 <p>Realiza el mismo ejercicio anterior pero haciendo uso de una funci\u00f3n recursiva.</p> Ejercicio 4 <p>Crea un array de caracteres que contengan de la 'A' a la 'Z' (solo may\u00fasculas). Despu\u00e9s, ve pidiendo posiciones de array por teclado y si la posici\u00f3n es correcta, se a\u00f1adir\u00e1 a una cadena que se mostrar\u00e1 al final. Se dejar\u00e1 de insertar cuando se introduzca -1.</p> Ejercicio 5 <p>Realiza el juego del ahorcado. El programa tendr\u00e1 un array con varias palabras y elegir\u00e1 de forma aleatoria una al azar.</p> <p>Se le solicitar\u00e1 al usuario si quiere completar la palabra o escribir un car\u00e1cter. Si elige la primera opci\u00f3n se le solicitar\u00e1 la palabra, en caso de coincidir con la elegida, mostrar\u00e1 un mensaje de ganador, en caso de fallarla, se le mostrar\u00e1 un mensaje de perdedor y se terminar\u00e1 el juego.</p> <p>En caso de elegir la segunda opci\u00f3n, se le solicitar\u00e1 al usuario un car\u00e1cter y se comprobar\u00e1 si forma parte de la palabra, mostrando el avance de la siguiente forma \"_ _ _ _ A\"</p> Ejercicio 6 <p>Realiza un programa que cree un array bidimensional rellen\u00e1ndolo de valores aleatorios comprendidos entre 1 y 10. Luego crea un array con el mismo array, y el valor de la suma de filas y columnas y el tama\u00f1o total. Solicita el tama\u00f1o de la matriz por consola.</p> Ejercicio 7 <p>Realiza una funci\u00f3n que reciba un array de tres dimensiones de n\u00fameros decimales y muestre cu\u00e1l es el elemento mayor y su posici\u00f3n</p> Ejercicio 8 <p>Realiza una funci\u00f3n que reciba un array bidimensional de enteros y devuelva otro array bidimensional con los elementos copiados pero con el doble de columnas. Los elementos nuevos se rellenan con ceros. Por ejemplo, si recibe {{1,2}, {3, 4}, {5, 6}} devuelve {{1, 2, 0, 0}, {3,4, 0, 0}, {5, 6, 0, 0}}</p> Ejercicio 9 <p>Se desea realizar una encuesta a varias personas, en la cu\u00e1l se quiere conocer su sexo (1 si es Hombre, 2 si es mujer), si trabaja (1 si trabaja o 2 si no), y su sueldo (comprendido entre 600 y 2000, siendo 0 en caso de que no trabaje). Crea un array bidimensional aleatorio y calcula:</p> <ul> <li>Porcentaje de hombre</li> <li>Porcentaje de mujeres</li> <li>Porcentaje de hombres que trabajan</li> <li>Porcentaje de mujeres que trabajan</li> <li>El sueldo promedio de los hombres que trabajan</li> <li>El sueldo promedio de las mujeres que trabajan</li> </ul> Ejercicio 10 <p>Realiza el juego del 3 en raya. Para ello se crear\u00e1 una matriz de 3x3 de tipo char. Se le solicitar\u00e1 al usuario la posici\u00f3n donde querr\u00e1 poner su marca, validando que sea correcta y que no tenga una marca puesta. El segundo jugador ser\u00e1 la m\u00e1quina.</p> <p>Al final, se mostrar\u00e1 un mensaje con el nombre del ganador o \"Empate\" en caso de que no haya ganado nadie.</p>"},{"location":"bloque_ii/tema_6/page-6/","title":"Proyecto","text":"<p>En este proyecto se va a realizar cambios en el proyecto conocido como common.</p> <p>Para ello, se debe modificar todas las funciones que se crean oportunas de la clase Strings y Maths haciendo uso de arrays, o de m\u00e9todos que devuelvan arrays si es necesario.</p> <p>Por otro lado, se a\u00f1adir\u00e1 los siguientes m\u00e9todos a la clase Maths:</p> <ul> <li>multiple(n, num): devolver\u00e1 los n m\u00faltiplos de un n\u00famero</li> <li>dividers(num): devolver\u00e1 los divisores de un n\u00fameros.</li> <li>primes(n): devolver\u00e1 los n primeros n\u00fameros primos comprendidos entre 0 y 100.</li> <li>primes(n, from, to): devolver\u00e1 los n primeros n\u00fameros primos comprendidos entre from, inclusivo, y end, exclusivo</li> <li>max(nums): obtiene el m\u00e1ximo valor de los n\u00fameros pasados por par\u00e1metros</li> <li>min(nums): obtiene el m\u00ednimo valor de los n\u00fameros pasados por par\u00e1metros.</li> <li>avg(nums): devolver\u00e1 la media de los n\u00fameros pasados como par\u00e1metros. Crear las versiones sobrecargadas para cada tipo de dato posible</li> <li>mode(nums): devolver\u00e1 la moda de los n\u00fameros pasados como par\u00e1metros. Crear las versiones sobrecargadas para cada tipo de dato posible</li> <li>median(nums): devolver\u00e1 la mediana de los n\u00fameros pasados como par\u00e1metros. Crear las versiones sobrecargadas para cada tipo de dato posible</li> <li>typicalDeviation(nums): devolver\u00e1 la desviaci\u00f3n t\u00edpica de los n\u00fameros pasados como par\u00e1metros. Crear las versiones sobrecargadas para cada tipo de dato posible</li> <li>variance(nums): devolver\u00e1 la varianza de los n\u00fameros pasados como par\u00e1metros. Crear las versiones sobrecargadas para cada tipo de dato posible</li> </ul> <p>Adem\u00e1s, en esta versi\u00f3n, se crear\u00e1 la clase Arrays que contendr\u00e1n m\u00e9todos de utilidad para trabajar con arrays:</p> <ul> <li>randomArray(n): devolver\u00e1 un array rellenado con n\u00fameros aleatorios entre el 0 y el 10 tantas veces como indique n. Comprobar que la capacidad indicada sea un n\u00famero positivo</li> <li>randomArray(n, fromIndex, toIndex): devolver\u00e1 un array rellenado con n\u00fameros aleatorios entre los indicados por par\u00e1metros, ambos inclusivos, tantas veces como indique n. Comprobar que la capacidad indicada sea un n\u00famero positivo</li> <li>add(array, element): a\u00f1adir\u00e1 el elemento al final del array. Crear las versiones sobrecargadas para cada tipo de dato.</li> <li>add(array, index, element): a\u00f1adir\u00e1 el elemento en el \u00edndice indicado del array, comprobando que el \u00edndice no supere el tama\u00f1o del array, y desplazando el resto de elementos, eliminando si fuese necesario el \u00faltimo valor. Crear las versiones sobrecargadas para cada tipo de dato</li> <li>remove(array, index): elimina el elemento en el \u00edndice indicado, comprobando que el \u00edndice no supere el tama\u00f1o del array.</li> <li>set(array, index, element): reemplaza el elemento en el \u00edndice especificado de la lista con el nuevo elemento proporcionado, comprobando que el \u00edndice no supere el tama\u00f1o del array. Crear las versiones sobrecargadas para cada tipo de dato</li> <li>indexOf(array, element): devuelve el primer \u00edndice del array que contenga el elemento indicado, en caso de no encontrarlo devolver\u00e1 -1. Crear las versiones sobrecargadas para cada tipo de dato</li> <li>lastIndexOf(array, element): devuelve el \u00faltimo \u00edndice del array que contenga el elemento indicado, en caso de no encontrarlo devolver\u00e1 -1. Crear las versiones sobrecargadas para cada tipo de dato</li> <li>isEmpty(array): retorna si el array est\u00e1 vac\u00edo, es decir, si no ha sido inicializado o todos sus valores son por defecto. Crear las versiones sobrecargadas para cada tipo de dato</li> <li>isNotEmpty(array): retorna si el array no est\u00e1 vac\u00edo, es decir, si ha sido inicializado y adem\u00e1s tiene alg\u00fan valor que no sea el de por defecto. Crear las versiones sobrecargadas para cada tipo de dato</li> <li>contains(array, element): retorna true si en el array se encuentra el elemento especificado, por el contrario devuelve false. Crear las versiones sobrecargadas para cada tipo de dato</li> <li>notContains(array, element): retorna true si en el array no se encuentra el elemento indicado, por el contrario devuelve true. Crear las versiones sobrecargadas para cada tipo de dato</li> <li>clear(array): vac\u00eda el array, dejando todos sus valor por defecto. Crear las versiones sobrecargadas para cada tipo de dato.</li> <li>addAll(array1, array2): A\u00f1ade todos los elementos del array2 en array1, retornando un nuevo array. Crear las versiones sobrecargadas para cada tipo de dato.</li> <li>subArray(array, fromIndex, toIndex): devuelve un nuevo array con los elementos del array desde el \u00edndice indicado (inclusivo) hasta el \u00edndice especificado (exclusivo), comprobando previamente, que los \u00edndices no superen el tama\u00f1o del array.</li> <li>reverse(array): Invierte el array. Crear las versiones sobrecargadas para cada tipo de dato</li> <li>plus(arrayA, arrayB): suma ambos array retornando el resultado.</li> <li>minus(arrayA, arrayB): resta ambos array retornando el resultado.</li> <li>scalarProduct(n, arrayA): devuelve el array A multiplicando cada uno de sus elementos por n</li> <li>product(arrayA, arrayB): devuelve la multiplicaci\u00f3n de ambos arrays multiplicando cada elemento de A por cada elemento de B.</li> </ul> <p>Tambi\u00e9n se crear\u00e1 la clase Matrixs que contendr\u00e1 los m\u00e9todos de utilidad para trabajar con arrays bidimensionales:</p> <ul> <li>isRegular(array): devolver\u00e1 true si el array bidimensional es regular, false si no lo es. Crear las versiones sobrecargadas para cada tipo de dato</li> <li>isIrregular(array): devolver\u00e1 true si el array bidimensional es irregular, false si no lo es.Crear las versiones sobrecargadas para cada tipo de dato</li> <li>randomMatrix(n, m): devolver\u00e1 una matriz rellenada con n\u00fameros aleatorios entre el 0 y el 10 tantas veces como indique n y m.</li> <li>randomMatrix(n, m, fromIndex, toIndex): devolver\u00e1 un array rellenado con n\u00fameros aleatorios entre los indicados por par\u00e1metros, ambos inclusivos, tantas veces como indique n y m.</li> <li>sum(matrix): devolver\u00e1 la suma de todos los elementos de la matriz.</li> <li>sumFiles(matrix): devolver\u00e1 la suma de todas las filas de la matriz.</li> <li>sumColumns(matrix): devolver\u00e1 la suma de todas las columnas de la matriz.</li> <li>sumDiagonal(matrix): devolver\u00e1 la suma de la diagonal de la matriz</li> <li>sumDiagonalReverse(matrix): devolver\u00e1 la suma de la diagonal inversa de la matriz.</li> <li>transpose(matrix): devolver\u00e1 la matriz transpuesta de la matriz indicada.</li> <li>isSymmetric(matrix): devolver\u00e1 true si la matriz indicada es sim\u00e9trica, o false si no lo es.</li> <li>determinant(matrix): calcula el determinante de la matriz.</li> <li>add(matrixA, matrixB): suma ambas matrices retornando el resultado.</li> <li>minus(matrixA, matrixB): resta ambas matrices retornando el resultado.</li> <li>scalarProduct(n, matrixA): devuelve la matriz A multiplicando cada uno de sus elementos por n</li> <li>product(matrixA, matrixB): devuelve la multiplicaci\u00f3n de ambas matrices multiplicando cada elemento de A por cada elemento de B.</li> </ul> <p>Para realizar este proyecto se tendr\u00e1 en cuenta:</p> <ul> <li>NO se realizar\u00e1 una versi\u00f3n sobre el proyecto 5, sino que se realizar\u00e1 un copia de dicho proyecto en esta versi\u00f3n</li> <li>Se mantendr\u00e1 el paquete principal llamado <code>com.NOMBRE.common</code> donde nombre ser\u00e1 el nombre del alumno y common el nombre del proyecto.</li> <li>Se crear\u00e1 una clase Main, donde se ponga en pr\u00e1ctica los usos de la librer\u00eda y se valorar\u00e1 la complejidad de dicho Main.</li> <li>Se deber\u00e1n respetar el nombre de las funciones.</li> <li>El nombre del resto de funciones ser\u00e1 en ingl\u00e9s y deber\u00e1n ser lo suficiente claras para poder identificarlas con facilidad.</li> <li>El c\u00f3digo se comentar\u00e1 haciendo uso de los comentarios JavaDoc adem\u00e1s, de comentarios normales para dar una explicaci\u00f3n a la parte del c\u00f3digo m\u00e1s importante.</li> <li>El repositorio de GitHub tendr\u00e1 el siguiente nombre <code>pr06java-NOMBRE-arrays</code> siendo NOMBRE el nombre del alumno.</li> <li>Se declarar\u00e1 aquellas variables que sean necesarias inicializ\u00e1ndolas si es necesario, indicando el tipo correspondiente.</li> <li>Se har\u00e1 uso de funciones y procedimientos donde sea oportuno.</li> <li>La entrega de este proyecto se realizar\u00e1 a trav\u00e9s de un enlace a un repositorio de GitHub, realizando siempre m\u00e1s de un commit.</li> <li>Se valorar\u00e1 la limpieza, la claridad, y la estructura del proyecto.</li> </ul>"},{"location":"bloque_ii/tema_7/page-1/","title":"1 Introducci\u00f3n a la herencia","text":""},{"location":"bloque_ii/tema_7/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>La herencia permite definir una clase tomando como base a otra clase ya existente. Dicha clase base se conoce como superclase o clase padre y la clase que hereda se denomina subclase o clase hija. Por lo tanto, una subclase es una versi\u00f3n especializada de una superclase, ya que hereda tanto los atributos como los m\u00e9todos definidos por la superclase y adem\u00e1s a\u00f1ade los suyos propios.</p> <p>Esto es una de las bases de la reutilizaci\u00f3n de c\u00f3digo ya que cuando se quiere crear una clase nueva y ya existe una clase que incluye parte del c\u00f3digo que queremos, podemos heredar nuestra nueva clase de la clase existente reutilizando los atributos y m\u00e9todos de la misma. La herencia facilita el trabajo del programador porque permite crear clases est\u00e1ndar y a partir de ellas crear nuestras propias clases personales. Esto es m\u00e1s c\u00f3modo que tener que crear todas las clases desde cero.</p> <p>Por ejemplo, si quisi\u00e9ramos realizar una aplicaci\u00f3n de veh\u00edculos, definir\u00edamos una superclase o clase padre con lo com\u00fan a todos los veh\u00edculos y luego definir\u00edamos una subclase o clase hija para cada tipo de veh\u00edculo donde se a\u00f1adir\u00eda lo particular de cada uno.</p> <p>En  java,  la  herencia  se  especifica  en  la  subclase  a\u00f1adiendo  la  palabra  extends  seguida  del nombre de la superclase. Por ejemplo, as\u00ed ser\u00eda para indicar que Coche es hija de Veh\u00edculo:</p> <pre><code>public class Car extends Vehicle{\n// ...\n}\n</code></pre> <p>En Java, solamente se puede tener un padre pero puede hacer varios niveles de herencia, es decir, clases hijas que a su vez son padres de otras clases. Por ejemplo, el Car es hija de Vehicle pero puede ser padre de otra clase, como por ejemplo TodoTerreno:</p> <pre><code>public class TodoTerreno extends Car{\n// ...\n}\n</code></pre> <p>Si  el  padre  tiene  alg\u00fan  atributo  est\u00e1tico,  tambi\u00e9n  lo  pueden  usar  los  hijos. <code>ClasePadre.AtributoEst\u00e1tico</code> y  <code>ClaseHijo.AtributoEst\u00e1tico</code> acceden a la misma variable porque es el mismo atributo est\u00e1tico.</p>"},{"location":"bloque_ii/tema_7/page-1/#modificadores-de-acceso","title":"Modificadores de acceso","text":"<p>En  el  tema  4.  Programaci\u00f3n  Orientada  a  Objetos  vimos  los  modificadores  de  acceso  y  c\u00f3mo afectaban a la visibilidad. En este tema vamos a incorporar el modificador de acceso protected que es el que est\u00e1 pensado para la herencia.</p> <p>Los modificadores de acceso afectan a la visibilidad y tambi\u00e9n afectan a la herencia. Visibilidad es lo que una clase puede ver de otra clase y herencia es lo que una clase hereda de otra clase. He aqu\u00ed dos tablas con los modificadores de acceso, una para la visibilidad y otra para la herencia</p> <p>Tabla de visibilidad</p> Private Friendly Protected Public Misma clase x x x x Mismo paquete x x x Otro paquete x Subclase en el mismo paquete x x x Subclase en distinto paquete x <p>Tabla de herencia</p> Private Friendly Protected Public Subclase en el mismo paquete x x x Subclase en distinto paquete x <p>Si las clases est\u00e1n en un subpaquete, a efectos de visibilidad y herencia se considera que est\u00e1n en otro paquete.</p> <p>Las conclusiones que se pueden obtener a partir de las dos tablas son las siguientes:</p> <ul> <li>La visibilidad es la misma independientemente de que la clase sea hija o no.</li> <li>En herencia, siempre se hereda el protected independientemente del paquete donde se encuentre  la  clase  hija.  Por  lo  tanto,  cuando  dise\u00f1emos  una  clase  que  vaya  a  tener descendientes, es conveniente declarar sus atributos como protected.</li> </ul> <p>Un atributo private no se hereda pero si los getters y setters del padre tienen un modificador distinto de private, s\u00ed puede el hijo utilizar dicho atributo a trav\u00e9s de dichos m\u00e9todos. Pero no es conveniente programar de esta manera, es m\u00e1s adecuado utilizar el modificador protected.</p> VehicleCarMainSalida <pre><code>public class Vehicle {\nprotected int wheelCount;\nprotected double speed;\nprotected String color;\npublic String getColor() {\nreturn color;\n}\npublic void setColor(String color) {\nthis.color = color;\n}\npublic int getWheelCount() {\nreturn wheelCount;\n}\npublic double getSpeed() {\nreturn speed;\n}\npublic void accelerate(double amount){\nspeed += amount;\n}\npublic void brake(double amount){\nspeed -= amount;\n}\n}\n</code></pre> <pre><code>public class Car extends Vehicle{\n/*\n     * Car hereda de Vehicle los atributos wheelCount, speed y color porque\n     son protected\n     * Tambi\u00e9n hereda todos los m\u00e9todos de Vehicle, ya que son public\n     * Adem\u00e1s, puede tener atributos y m\u00e9todos propios\n     */\nprivate double gasoline;\npublic double getGasoline() {\nreturn gasoline;\n}\npublic void refuel(double liters) {\ngasoline += liters;\n}\n}\n</code></pre> <pre><code>public class MainProtected {\npublic void show(){\nCar car = new Car();\ncar.accelerate(100);\nSystem.out.printf(\"La velocidad del coche es %.2f km/h\\n\", car.getSpeed());\ncar.refuel(40.35);\nSystem.out.printf(\"El coche tiene %.2f litros de gasolina\\n\", car.getGasoline());\n}\npublic static void main(String[] args) {\nnew MainProtected().show();\n}\n}\n</code></pre> <pre><code>La velocidad del coche es 100,00 km/h\nEl coche tiene 40,35 litros de gasolina\n</code></pre>"},{"location":"bloque_ii/tema_7/page-1/#sobrecarga-y-anulacion-de-metodos","title":"Sobrecarga y anulaci\u00f3n de m\u00e9todos","text":"<p>Se puede sobrecargar un m\u00e9todo heredado para proporcionar una versi\u00f3n del mismo adaptado a las necesidades de la subclase.</p> CarMainSalida <pre><code>public class Car extends Vehicle {\nprivate double gasoline;\npublic double getGasoline() {\nreturn gasoline;\n}\npublic void refuel(double liters) {\ngasoline += liters;\n}\npublic void accelerate(){\nspeed += 10;\n}\n}\n</code></pre> <pre><code>public class Overload {\npublic void show(){\nCar car = new Car();\ncar.accelerate(100); // Heredado\nSystem.out.printf(\"La velocidad del coche es %.2f km/h\\n\", car.getSpeed());\ncar.accelerate(); // sobrecargado\nSystem.out.printf(\"La velocidad del coche es %.2f km/h\\n\", car.getSpeed());\n}\npublic static void main(String[] args) {\nnew Overload().show();\n}\n}\n</code></pre> <pre><code>La velocidad del coche es 100,00 km/h\nLa velocidad del coche es 110,00 km/h\n</code></pre> <p>Si la subclase define un m\u00e9todo con la misma firma que un m\u00e9todo heredado, entonces anula o sobrescribe el m\u00e9todo de la superclase. Veamos un ejemplo donde el coche ha anulado el m\u00e9todo heredado de acelerar para a\u00f1adirle el consumo de gasolina:</p> CarMainSalida <pre><code>public class Car extends Vehicle {\nprivate double gasoline;\npublic double getGasoline() {\nreturn gasoline;\n}\npublic void refuel(double liters) {\ngasoline += liters;\n}\n@Override\npublic void accelerate(double amount){\nspeed += amount;\ngasoline *= 0.9;\n}\n}\n</code></pre> <pre><code>public class MainOverride {\npublic void show(){\nCar car = new Car();\ncar.refuel(40.35);\nSystem.out.printf(\"El coche tiene %.2f litros de gasolina\\n\", car.getGasoline());\ncar.accelerate(100);\nSystem.out.printf(\"El coche tiene %.2f litros de gasolina\\n\", car.getGasoline());\n}\npublic static void main(String[] args) {\nnew MainOverride().show();\n}\n}\n</code></pre> <pre><code>El coche tiene 40,35 litros de gasolina\nEl coche tiene 36,32 litros de gasolina\n</code></pre> <p>En  la  clase Car,  se  puede  observar  la  anotaci\u00f3n  @Override  antes  de  la  firma  del  m\u00e9todo accelerate.</p> <p>Las anotaciones de Java comienzan con @ y permiten incrustar informaci\u00f3n suplementaria en un programa para que pueda ser utilizada por varias herramientas.</p> <p>La anotaci\u00f3n @Override le indica al compilador que el m\u00e9todo debe sobrescribir un m\u00e9todo de la superclase.  Si  no  lo  hace,  el  compilador  generar\u00e1  un  error.  Se  utiliza  para  asegurar  que  un m\u00e9todo  de  superclase  est\u00e9  anulado,  y  no  simplemente  sobrecargado.  Es  una  manera  de comprobar en tiempo de compilaci\u00f3n que se est\u00e1 anulando correctamente un m\u00e9todo, y de este modo evitar errores en tiempo de ejecuci\u00f3n los cuales ser\u00edan mucho m\u00e1s dif\u00edciles de detectar.</p> <p>La visibilidad de lo que se hereda es con respecto al paquete de la superclase, no con respecto al paquete de la subclase. Si no interesa, la subclase tendr\u00e1 que sobrescribir lo heredado aunque no  haga  ning\u00fan  cambio  para  que  la  visibilidad  sea  con  respecto  al  paquete  de  la  subclase.</p> <p>Veamos un ejemplo donde Vehicle est\u00e1 en un paquete distinto que Car. Vehicle tiene el m\u00e9todo accelerate  como  protected,  por  lo  tanto  Car  lo  hereda  aunque  est\u00e9  en  otro  paquete  como podemos observar en la tabla de herencia. La clase Main se encuentra en el mismo paquete que Car y quiere acceder al m\u00e9todo accelerate del mismo. Pero la visibilidad de accelerate  es  con respecto al paquete de Vehicle  ya  que  la  visibilidad  de  lo  que  se  hereda  es  con  respecto  al paquete de la superclase, no con respecto al paquete de la subclase. Dicho m\u00e9todo es protected y si nos fijamos en la tabla de visibilidad, un protected no es visible desde otro paquete, por lo que no se le va a permitir dando un error de compilaci\u00f3n:</p> VehicleCarMain <pre><code>public class Vehicle {\nprotected int wheelCount;\nprotected double speed;\nprotected String color;\npublic String getColor() {\nreturn color;\n}\npublic void setColor(String color) {\nthis.color = color;\n}\npublic int getWheelCount() {\nreturn wheelCount;\n}\npublic double getSpeed() {\nreturn speed;\n}\nprotected void accelerate(double amount){\nspeed += amount;\n}\npublic void brake(double amount){\nspeed -= amount;\n}\n}\n</code></pre> <pre><code>public class Car extends Vehicle {\nprivate double gasoline;\npublic double getGasoline() {\nreturn gasoline;\n}\npublic void refuel(double liters) {\ngasoline += liters;\n}\n}\n</code></pre> <pre><code>public class Visibility {\npublic void show(){\nexercises.bloque_ii.tema_07.modifier_protected.Car car = new Car();\ncar.accelerate(100); // Error de compilaci\u00f3n porque no es visible\nSystem.out.printf(\"La velocidad del coche es %.2f km/h\\n\", car.getSpeed());\ncar.refuel(40.35);\nSystem.out.printf(\"El coche tiene %.2f litros de gasolina\\n\", car.getGasoline());\n}\npublic static void main(String[] args) {\nnew Visibility().show();\n}\n}\n</code></pre> <p>La soluci\u00f3n es que Car anule el m\u00e9todo accelerate heredado de Vehicle para que la visibilidad de dicho m\u00e9todo sea con respecto al paquete de Car. Car no va a realizar ning\u00fan cambio en dicho m\u00e9todo, es decir, lo va a anular para dejarlo exactamente igual, pero de esta forma modifica el paquete para la visibilidad:</p> <pre><code>public class Car extends Vehicle{\n// ...\n@Override\nprotected void accelerate(double amount){\nspeed += amount;\n}\n}\n</code></pre> <p>Pero, \u00bfqu\u00e9 ocurrir\u00eda si la clase Main estuviera en un paquete distinto a Car? Dar\u00eda un error de compilaci\u00f3n porque un protected no es visible desde otro paquete.</p> <p>La soluci\u00f3n ser\u00eda que Car cambiara la visibilidad del m\u00e9todo. Si una subclase quiere anular alg\u00fan m\u00e9todo  de  la  superclase  para  cambiar  la  visibilidad,  se  permite  \u00fanicamente  si  amplia  la visibilidad, no si la reduce. La escala de valores de m\u00e1s restrictivo a menos es: private, friendly, protected y public. Por ejemplo, no se puede cambiar de protected a friendly pero s\u00ed al rev\u00e9s. Solucionemos el ejemplo anterior para que la clase Main pueda acceder al m\u00e9todo accelerate de Car. Si nos fijamos en la tabla de visibilidad, el \u00fanico modificador que nos permite visibilidad desde  otro  paquete  es  public.  Entonces,  tendr\u00edamos  que  cambiar  el  protected  a  public  y  se permite porque se amplia la visibilidad, no se reduce:</p> <pre><code>public class Car extends Vehicle{\n// ...\n@Override\npublic void accelerate(double amount){\nspeed += amount;\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_7/page-2/","title":"2 Constructores","text":""},{"location":"bloque_ii/tema_7/page-2/#super","title":"Super","text":"<p>A veces se requiere llamar a un m\u00e9todo de la superclase. Eso se realiza con la palabra reservada super. En el tema 4. Programaci\u00f3n Orientada a Objetos vimos que this es una variable que hace referencia al objeto actual, pues super es una variable que hace referencia a la superclase del objeto actual, por lo tanto es un m\u00e9todo imprescindible para poder acceder a m\u00e9todos anulados por herencia.</p> CarMainSalidas <pre><code>public class Car extends Vehicle {\nprivate double gasoline;\npublic double getGasoline() {\nreturn gasoline;\n}\npublic void refuel(double liters) {\ngasoline += liters;\n}\n@Override\npublic void accelerate(double amount){\nsuper.accelerate(amount); // Llamo al accelerate del padre\ngasoline *= 0.9;\n}\n}\n</code></pre> <pre><code>public class Super {\npublic void show(){\nCar car = new Car();\ncar.refuel(40.35);\nSystem.out.printf(\"El coche tiene %.2f litros de gasolina, y va a %.2f km/h\\n\",\ncar.getGasoline(), car.getSpeed());\ncar.accelerate(100);\nSystem.out.printf(\"El coche tiene %.2f litros de gasolina, y va a %.2f km/h\\n\",\ncar.getGasoline(), car.getSpeed());\n}\npublic static void main(String[] args) {\nnew Super().show();\n}\n}\n</code></pre> <pre><code>El coche tiene 40,35 litros de gasolina y va a 0,00 km/h\nEl coche tiene 36,32 litros de gasolina y va a 100,00 km/h\n</code></pre> <p>En el ejemplo anterior, super.accelerate(amount) llama al m\u00e9todo accelerate de la clase Vehicle el cual acelerar\u00e1 la marcha. Es necesario redefinir el m\u00e9todo accelerate en la clase Car  ya  que aunque la velocidad var\u00eda igual que en la superclase, hay que tener en cuenta el consumo de gasolina.</p>"},{"location":"bloque_ii/tema_7/page-2/#constructores","title":"Constructores","text":"<p>Los constructores no se heredan de la superclase a las subclases pero s\u00ed se pueden invocar los constructores de la superclase desde los constructores de las subclases mediante super:</p> VehicleCarMainSalida <pre><code>public class Vehicle{\n// ...\npublic Vehicle(int wheelCount, String color) {\nthis.wheelCount = wheelCount;\nthis.color = color;\nspeed = 0;\n}\n// ...\n}\n</code></pre> <pre><code>public class Car extends Vehicle{\n//...\npublic Car(int wheelCount, String color){\nsuper(wheelCount, color); // Llama constructor del padre\ngasoline = 0;\n}\n// ...\n}\n</code></pre> <pre><code>public class Constructors {\npublic void show(){\nVehicle vehicle = new Vehicle(2, \"azul\");\nCar car = new Car(4, \"rojo\");\nSystem.out.printf(\"Veh\u00edculo: %d ruedas y de color %s\\n\", vehicle.getWheelCount(), vehicle.getColor());\nSystem.out.printf(\"Coche: %d ruedas y de color %s\\n\", car.getWheelCount(), car.getColor());\n}\npublic static void main(String[] args) {\nnew Constructors().show();\n}\n}\n</code></pre> <pre><code>Veh\u00edculo: 2 ruedas y de color azul\nCoche: 4 ruedas y de color rojo\n</code></pre> <p>Si una clase no tiene constructor, Java crea uno por defecto. Pero en el caso de que sea una subclase, Java lo crea con la l\u00ednea de c\u00f3digo super(), es decir, con una llamada al constructor de la superclase.</p> <p>Pero si la superclase tuviera un constructor con par\u00e1metros, Java ya no crear\u00eda el constructor por defecto Vehicle() y a las subclases les dar\u00eda un error de compilaci\u00f3n con la llamada del super():</p> VehicleCar <pre><code>public class Vehicle{\n// ...\n/*\n     * Tiene un constructor con par\u00e1metros, por lo tanto, Java\n     * no crea el constructor por defecto\n     * Vehicle()\n    */\npublic Vehicle(int wheelCount, String color) {\nthis.wheelCount = wheelCount;\nthis.color = color;\nspeed = 0;\n}\n// ...\n}\n</code></pre> <pre><code>public class Car extends Vehicle{\n//...\n/* \n     * No tiene constructor. Java lo crea por defecto con la l\u00ednea de c\u00f3digo \n     * super(), es decir, con una llamada al constructor por defecto de la\n     * superclase. Por lo tanto, est\u00e1 llamando a Vehicle(), dando un error \n     * de compilaci\u00f3n ya que no se ha creado. \n     */\n// ...\n}\n</code></pre> <p>Incluso aunque se defina un constructor con par\u00e1metros en la clase Car, Java sigue a\u00f1adiendo de manera impl\u00edcita la llamada super() en el constructor y como no hay constructor por defecto en la clase Vehicle, contin\u00faa dando error de compilaci\u00f3n</p> <pre><code>public class extends Vehicle{\n//...\n/*\n     * Java sigue a\u00f1adiendo de manera impl\u00edcita la llamada super()\n     * en el constructor y como no hay constructor por defecto en\n     * la clase Vehicle, da un error de compilaci\u00f3n\n     */\npublic Car(int wheelCount, String color){\nthis.wheelCount = wheelCount;\nthis.color = color;\nspeed = 0;\ngasoline = 0;\n}\n// ...\n}\n</code></pre> <p>Se  puede  arreglar  realizando  una  llamada  expl\u00edcita  al  constructor  con  par\u00e1metros  de  la superclase:</p> <pre><code>public class Car extends Vehicle{\n//...\npublic Car(int wheelCount, String color){\nsuper(wheelCount, color); // Llama constructor del padre\ngasoline = 0;\n}\n// ...\n}\n</code></pre> <p>Si una subclase tiene m\u00e1s constructores, este problema habr\u00eda que arreglarlo en cada uno de ellos:</p> <pre><code>public class Car extends Vehicle{\n//...\npublic Car(int wheelCount, String color){\nsuper(wheelCount, color); // Llama constructor del padre\ngasoline = 0;\n}\npublic Car(int wheelCount){ // ERROR\nthis.wheelCount = count;\nthis.color = \"blanco\";\nspeed = 0;\ngasoline = 0;\n}\n// ...\n}\n</code></pre> <p>Se puede solucionar de dos maneras:</p> <ol> <li>Haciendo una llamada a un constructor de la superclase mediante super.</li> <li>Haciendo una llamada a un constructor de la propia clase mediante this.</li> </ol> <p>En ambos casos, tienen que ser la primera instrucci\u00f3n del constructor, por lo que el uso de super y this no puede ser simult\u00e1neo, lo que significa que hay que elegir entre ambas.</p> Primera Soluci\u00f3nSegunda Soluci\u00f3n <pre><code>public class Car extends Vehicle{\n//...\npublic Car(int wheelCount, String color){\nsuper(wheelCount, color); // Llama constructor del padre\ngasoline = 0;\n}\npublic Car(int wheelCount){ super(wheelCount, \"blanco\")\nspeed = 0;\ngasoline = 0;\n}\n//...\n}\n</code></pre> <pre><code>public class Car extends Vehicle{\n//...\npublic Car(int wheelCount, String color){\nsuper(wheelCount, color); // Llama constructor del padre\ngasoline = 0;\n}\npublic Car(int wheelCount){ this(wheelCount, \"blanco\")\n}\n//...\n}\n</code></pre>"},{"location":"bloque_ii/tema_7/page-3/","title":"3 Polimorfismo","text":""},{"location":"bloque_ii/tema_7/page-3/#casting-de-objetos","title":"Casting de objetos","text":"<p>Como ocurre con los tipos primitivos, tambi\u00e9n es posible realizar casting entre objetos siempre y cuando est\u00e9 dentro de la estructura jer\u00e1rquica en su herencia.</p> <p>Para crear un objeto, hay que declarar una variable cuyo tipo es una clase:</p> <pre><code>Vehicle vehicle; // vehicle es una variable de tipo Vehicle\n</code></pre> <p>Eso significa que vehicle es de tipo Vehicle y que nunca va a cambiar de tipo, siempre va a ser de tipo Vehicle</p> <p>Creemos ahora una variable de tipo Car:</p> <pre><code>Car car; // car es una variable de tipo car.\n</code></pre> <p>Lo mismo que antes, car es una variable de tipo Car y nunca va a cambiar de tipo, siempre va a ser de tipo Car.</p> <p>A la variable vehicle se le puede asignar un objeto de tipo Vehicle y tambi\u00e9n se le puede asignar objetos cuyo tipo sean una subclase de Vehicle:</p> <pre><code>vehicle = car; // A vehicle se le est\u00e1 asignando un objeto de tipo Car, que es una subclase de Vehicle\n</code></pre> <p>La variable vehicle contiene un objeto de tipo Car pero su tipo es Vehicle, entonces solamente podr\u00e1 acceder a los atributos y m\u00e9todos de Vehicle:</p> <pre><code>vehicle.refuel(50); // Error de compilaci\u00f3n: el m\u00e9todo refuel no est\u00e1 definido para el tipo Vehicle\n</code></pre> <p>La variable vehicle no puede acceder al m\u00e9todo refuel porque dicho m\u00e9todo est\u00e1 definido en la clase Car. Es decir, una variable padre puede contener un objeto de tipo hijo pero solamente podr\u00e1 acceder a los atributos y m\u00e9todos definidos en el padre.</p> <p>\u00bfy si la asignaci\u00f3n la hici\u00e9ramos al rev\u00e9s, es decir, a car le asignamos vehicle?</p> <pre><code>car = vehicle; // Error de compilaci\u00f3n\n</code></pre> <p>Dar\u00eda un error de coincidencia de tipos, pero se podr\u00eda solucionar con un casting:</p> <pre><code>car = (Car) vehicle; // Solucionado con un casting ya que Vehicle contiene un Car\n</code></pre> <p>Hay que tener en cuenta que para que el casting funciones, la variable vehicle debe contener objeto de tipo Car, porque si no, dar\u00e1 un error de ejecuci\u00f3n ClassCastException.</p> <pre><code>vehicle = new Vehicle(2, \"blanco\");\ncar = (Car) vehicle; // Error de ejecuci\u00f3n: ClassCastException ya que Vehicle no contiene un objeto de tipo car\n</code></pre>"},{"location":"bloque_ii/tema_7/page-3/#modificador-final","title":"Modificador final","text":"<p>El modificador final tiene varios usos en funci\u00f3n de d\u00f3nde se utilice:</p> <ul> <li> <p>Delante de una variable en su declaraci\u00f3n, crea una constante. La constante puede recibir el valor en tiempo de compilaci\u00f3n o en tiempo de ejecuci\u00f3n.</p> Compilaci\u00f3nEjecuci\u00f3n <pre><code>final double PI = 3.141591;\n</code></pre> <p><pre><code>public class MyClass{\nprivate final int NUMBER;\npublic MyClass(int n){\nNUMBER = n;\n}\n}\n</code></pre> La constante NUMBER recibe el valor en la construcci\u00f3n del objeto.</p> </li> <li> <p>Delante de una variable que referencia a un objeto: dicha variable no puede referenciar a otro objeto.</p> <pre><code>final Car car = new Car(4, \"rojo\");\ncar = new Car(4, \"blanco\"); //ERROR: no puede referencias a otro objeto\n</code></pre> </li> <li> <p>En la declaraci\u00f3n de un m\u00e9todo: dicho m\u00e9todo no se puede anular por las subclases:</p> VehicleCar <pre><code>public class Vehicle{\n//...\nfinal public void accelerate(double amount){\nspeed += amount;\n}\n//...\n}\n</code></pre> <pre><code>public class Car extends Vehicle{\n//...\n@Override\npublic void accelerate(double amount){ // ERROR, no se puede anular el m\u00e9todo\nsuper.accelerate(amount);\ngasoline *= 0.5;\n}\n// ...\n}\n</code></pre> <ul> <li>En la definici\u00f3n de una clase: significa que ese clase no puede tener descendencia.</li> </ul> </li> </ul>"},{"location":"bloque_ii/tema_7/page-3/#polimorfismo","title":"Polimorfismo","text":"<p>Polimorfismo es la capacidad de un objeto de adquirir varias formas.</p> <p>La sobrecarga de m\u00e9todos es un tipo de polimorfismo est\u00e1tico porque se resuelve en tiempo de compilaci\u00f3n el m\u00e9todo apropiado a ser llamado basado en la lista de argumentos.</p> <p>La anulaci\u00f3n de m\u00e9todos es un tipo de polimorfismo din\u00e1mico porque se resuelve en tiempo de ejecuci\u00f3n atendiendo al tipo del objeto. Con una variable de tipo padre, si se utiliza un objeto del padre para invocar al m\u00e9todo, entonces se ejecutar\u00e1 el m\u00e9todo de la clase padre, pero si se utiliza un objeto de la clase hija para invocar al m\u00e9todo, entonces se ejecutar\u00e1 el m\u00e9todo de la clase hija</p> <pre><code>public class Polimorfismo {\npublic void show(){\nVehicle vehicle = new Vehicle(2, \"azul\");\nvehicle.accelerate(100.39); // M\u00e9todo del padre\nSystem.out.printf(\"La velocidad del veh\u00edculo es %.2f km/h\\n\", vehicle.getSpeed());\nvehicle = new Car(4, \"rojo\");\nvehicle.accelerate(50.89); // M\u00e9todo del hijo\nSystem.out.printf(\"La velocidad del veh\u00edculo es %.2f km/h\\n\", vehicle.getSpeed());\n}\npublic static void main(String[] args) {\nnew Polimorfismo().show();\n}\n}\n</code></pre> <p>Otro de las ventajas del polimorfismo es poder tener un m\u00e9todo que solicite un padre, y poder pasarle un hijo:</p> <pre><code>public class Polimorfismo2 {\npublic void show(){\naccelerateVehicle(new Car(4, \"rojo\"));\n}\nprivate void accelerateVehicle(Vehicle vehicle) {\nvehicle.accelerate(100.39); // M\u00e9todo del padre\nSystem.out.printf(\"La velocidad del veh\u00edculo es %.2f km/h\\n\", vehicle.getSpeed());s\n}\npublic static void main(String[] args) {\nnew Polimorfismo2().show();\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_7/page-3/#instanceof","title":"instanceof","text":"<p>El  operador  instanceof  permite  comprobar  si  un  determinado  objeto  pertenece  a  una  clase concreta. Se utiliza de esta forma:</p> <pre><code>object instanceof class\n</code></pre> <p>Devuelve true si el objeto pertenece a dicha clase.</p> <pre><code>public class InstanceOf {\npublic void show(){\nVehicle vehicle = new Vehicle(2, \"azul\");\nCar car = new Car(4, \"rojo\");\nSystem.out.println(vehicle instanceof Vehicle); // true\nSystem.out.println(vehicle instanceof Car); // false\nSystem.out.println(car instanceof Vehicle); // true\nSystem.out.println(car instanceof Car); // true\n}\npublic static void main(String[] args) {\nnew InstanceOf().show();\n}\n}\n</code></pre> <p>Tal y como podemos observar en el ejemplo, car tambi\u00e9n devuelve true con Vehicle ya que los objetos de las subclases tambi\u00e9n devuelven true con la superclase.</p>"},{"location":"bloque_ii/tema_7/page-3/#tostring","title":"toString","text":"<p>La clase Object es la clase ra\u00edz de todo el \u00e1rbol de la jerarqu\u00eda de clases Java, es decir, es una superclase impl\u00edcita de todas las dem\u00e1s clases. En otras palabras, todas las dem\u00e1s clases son subclases de Object. Esto significa que una variable de referencia de tipo Object puede referirse a un objeto de cualquier otra clase.</p> <p>La clase Object proporciona un cierto n\u00famero de m\u00e9todos de utilidad general que pueden utilizar todos  los  objetos  ya  que  los  heredan.  Pero  normalmente  hay  que  sobrescribirlos  para  que funcionen adecuadamente adapt\u00e1ndolos a la clase correspondiente. Esto se hace con la idea de que todas las clases utilicen el mismo nombre y prototipo de m\u00e9todo para hacer operaciones comunes. Como por ejemplo, <code>toString()</code> que se utiliza para obtener una cadena de texto que represente al objeto. El m\u00e9todo toString() de la clase Object devuelve una cadena que consiste en el nombre de la clase del objeto, el car\u00e1cter arroba \u2018@\u2019 y la representaci\u00f3n hexadecimal sin signo del c\u00f3digo hash del objeto. Siempre se recomienda sobrescribir el m\u00e9todo toString() para obtener nuestra propia representaci\u00f3n del objeto.</p> <pre><code>public class Vehicle{\n//...\n@Override\npublic String toString() {\nreturn \"Vehicle [wheelCount=\" + wheelCount+ \", speed=\" + speed + \", color=\" + color + \"]\";\n}\n}\n</code></pre> <p>Algunos entornos IDEs, puede autogenerar el c\u00f3digo del m\u00e9todo toString.</p> <p>Haciendo uso del m\u00e9todo para sacar por consola un objeto no es necesario hacer toString de forma expl\u00edcita, ya que dicho m\u00e9todo lo llama de forma impl\u00edcita.</p> <pre><code>public class ToString {\npublic void show(){\nVehicle vehicle = new Vehicle(2, \"azul\");\nSystem.out.println(vehicle);\n}\npublic static void main(String[] args) {\nnew ToString().show();\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_7/page-4/","title":"4 Clases abstractas e interfaces","text":""},{"location":"bloque_ii/tema_7/page-4/#clases-abstractas","title":"Clases abstractas","text":"<p>Cuando se crea una estructura con herencia, puede darse el caso de que alg\u00fan m\u00e9todo del padre no se pueda implementar porque los detalles de la implementaci\u00f3n dependan de cada uno de los hijos. Entonces, dicho m\u00e9todo se declara como abstracto en el padre y solamente se define su firma, no se implementa c\u00f3digo en \u00e9l. Los hijos pueden hacer dos cosas:</p> <ol> <li>Implementar el c\u00f3digo de dicho m\u00e9todo.</li> <li>Declararlo tambi\u00e9n como abstracto.</li> </ol> <p>Si  la  clase  contiene  alg\u00fan  m\u00e9todo  abstracto,  se  convierte  en  una  clase  abstracta.  Una  clase abstracta puede contener m\u00e9todos no abstractos pero al menos uno de los m\u00e9todos debe ser abstracto.</p> <p>Para indicar en Java que un m\u00e9todo o una clase son abstractos, se utiliza la palabra reservada abstract.</p> VehicleCarMainSalida <pre><code>public abstract class Vehicle {\n// ...\npublic abstract void accelerate(double amount);\n//..\n}\n</code></pre> <pre><code>public class Car extends Vehicle{\n// ...\n@Override\npublic void accelerate(double amount){\nspeed += amount;\ngasoline *= 0.9;\n}\n}\n</code></pre> <pre><code>public class AbstractClass {\npublic void show(){\nCar car = new Car(4, \"rojo\");\nSystem.out.printf(\"La velocidad del coche es %.2f km/h\\n\", car.getSpeed());\ncar.refuel(40.35);\nSystem.out.printf(\"El coche tiene %.2f litros de gasolina\\n\", car.getGasoline());\ncar.accelerate(100);\nSystem.out.printf(\"La velocidad del coche es %.2f km/h\\n\", car.getSpeed());\nSystem.out.printf(\"El coche tiene %.2f litros de gasolina\\n\", car.getGasoline());\n}\npublic static void main(String[] args) {\nnew AbstractClass().show();\n}\n}\n</code></pre> <pre><code>La velocidad del coche es 0,00 km/h\nEl coche tiene 40,35 litros de gasolina\nLa velocidad del coche es 100,00 km/h\nEl coche tiene 36,32 litros de gasolina\n</code></pre> <p>Una clase abstracta no se puede instanciar, es decir, no se pueden crear objetos de ella haciendo uso del new:</p> <pre><code>Vehicle = new Vehicle(2, \"azul\"); // Error de compilaci\u00f3n\n</code></pre> <p>Haciendo  uso  del  polimorfismo,  se  puede  declarar  una  variable  de  una  clase  abstracta  que referencie a un objeto hijo, de tal forma que si se invoca el m\u00e9todo abstracto, se ejecutar\u00e1 la implementaci\u00f3n realizada por el hijo de dicho m\u00e9todo abstracto:</p> <pre><code>Vehicle vehicle = new Car(4, \"rojo\");\nvehicle.accelerate(50.89); //(1)!\nSystem.out.printf(\"La velocidad del coche es %.2f km/h\\n\", car.getSpeed());\n</code></pre> <ol> <li>Se ejecuta la implementaci\u00f3n realizada en Car del m\u00e9todo abstracto accelerate</li> </ol>"},{"location":"bloque_ii/tema_7/page-4/#interfaces","title":"Interfaces","text":"<p>Una  interfaz  en  Java  es  una  colecci\u00f3n  de  m\u00e9todos  abstractos,  es  decir,  en  una  interfaz  se especifica qu\u00e9 se debe hacer pero no c\u00f3mo hacerlo. Ser\u00e1n las clases que implementen estas interfaces las que describen la l\u00f3gica del comportamiento de los m\u00e9todos.</p> <p>Una clase puede implementar m\u00e1s de una interfaz, lo que implica que debe realizar todos los m\u00e9todos de cada una de ellas. Si alg\u00fan m\u00e9todo lo deja como abstracto, entonces se convierte en una clase abstracta.</p> <p>En una interfaz tambi\u00e9n se pueden declarar constantes que luego puedan ser utilizadas por las clases que implementen dicha interfaz.</p> <p>Una interfaz se define en un archivo con el mismo nombre de la interfaz y con extensi\u00f3n .java.</p> <p>Las clases que quieran implementarla, tienen que a\u00f1adir la palabra reservada implements detr\u00e1s del nombre de la clase.</p> <p>Veamos un ejemplo de una interfaz que va a contener acciones que pueda realizar un veh\u00edculo, como por ejemplo, acelerar y frenar:</p> InterfazVehicle <pre><code>public interface ActionVehicle {\nvoid accelerate(double amount);\nvoid brake(double amount);\n}\n</code></pre> <pre><code>public class Vehicle implements ActionVehicle{\n@Override\npublic void accelerate(double amount){\nspeed += amount;\n}\n@Override\npublic void brake(double amount){\nspeed -= amount;\n}\n}\n</code></pre> <p>Para comprobar si una clase implementa una interfaz se puede usar <code>instanceof</code>:</p> <pre><code>Vehicle vehicle = new Vehicle(2, \"rojo\");\nvehicle instanceof Vehicle; // true\n</code></pre>"},{"location":"bloque_ii/tema_7/page-4/#herencia-entre-interfaces","title":"Herencia entre interfaces","text":"<p>Las  interfaces  tambi\u00e9n  pueden  heredar  de  otras  interfaces.  En  este  caso,  la  clase  que implemente la interfaz hija tendr\u00e1 que realizar los m\u00e9todos de la interfaz hija y los m\u00e9todos de la interfaz  padre.  Por  ejemplo,  vamos  a  crear  una  interfaz  GasolineMotor  que  va  a  contener m\u00e9todos de un veh\u00edculo con motor de gasolina y que herede de la interfaz ActionsVehicle:</p> GasolineMotorCar <pre><code>public interface GasolineMotor extends ActionVehicle {\ndouble getGasoline();\nvoid refuel(double liters);\n}\n</code></pre> <pre><code>public class Car extends Vehicle implements GasolineMotor {\n//...\n@Override\npublic double getGasoline() {\nreturn gasoline;\n}\n@Override\npublic void refuel(double liters) {\ngasoline += liters;\n}\n//...\n}\n</code></pre>"},{"location":"bloque_ii/tema_7/page-4/#metodos-por-defecto","title":"M\u00e9todos por defecto","text":"<p>A partir de Java 8, se pueden definir m\u00e9todos con una implementaci\u00f3n por defecto dentro de las interfaces. Las clases que implementan la interfaz pueden usar dicho m\u00e9todo o anularlo si les interesa otra implementaci\u00f3n diferente.</p> <p>Para indicar que un m\u00e9todo es por defecto se utiliza la palabra reservada default.</p> <p>Por ejemplo, si definimos la siguiente interfaz con el siguiente m\u00e9todo por defecto:</p> <pre><code>public interface Interfaz1{\ndefault void method(String str){\n// Implementaci\u00f3n del m\u00e9todo\n}\n}\n</code></pre> <p>y ahora queremos crear una clase que implemente la interfaz, dicha clase no estar\u00e1 obligada a implementar el m\u00e9todo  <code>method()</code>. Por ejemplo, el siguiente c\u00f3digo es totalmente v\u00e1lido:</p> <pre><code>public class Class1 implements Interfaz1{\n// No estamos obligados a implementar method(), aunque\n// tenemos la posibilidad de anularlo\n}\n</code></pre> <p>Pero  \u00bfqu\u00e9  ocurre  si  una  clase  implementa  dos  interfaces  que  tienen  el  mismo  m\u00e9todo  con implementaci\u00f3n por defecto? En ese caso la clase estar\u00e1 obligada a anular dicho m\u00e9todo, porque no se puede decidir qu\u00e9 implementaci\u00f3n por defecto usar. Por ejemplo:</p> <pre><code>public interface Interfaz1{\ndefault void method1(String str){\n//Implementaci\u00f3n\n}\n}\npublic interface Interfaz2{\ndefault void method1(String str){\n//Implementaci\u00f3n\n}\n}\npublic class Class1 implements Interfaz1, Interfaz2{\n@Override // Estamos oblogado a deshacer la ambig\u00fcedad\nvoid method1(String str){\n//Implementaci\u00f3n en Clase1\n}\n}\n</code></pre> <p>\u00a1Cuidado!</p> <p>Un m\u00e9todo con implementaci\u00f3n por defecto no puede anular a un m\u00e9todo de la clase  <code>java.lang.Object</code>, ya que es la clase base de todas las clases.</p>"},{"location":"bloque_ii/tema_7/page-4/#metodos-estaticos","title":"M\u00e9todos est\u00e1ticos","text":"<p>A partir de Java 8, las interfaces tambi\u00e9n puede contener m\u00e9todos est\u00e1ticos con implementaci\u00f3n por  defecto,  cuya  caracter\u00edstica  principal  es  que  pueden  ser  anulados  por  las  clases  que implementan la interfaz para evitar implementaciones no correctas en dichas clases. Se usan sobre todo para m\u00e9todos de utilidad. Veamos un ejemplo:</p> <pre><code>public interface Interfaz3 {\ndefault void print(String str){\n// Se llama al m\u00e9todo est\u00e1tico de la interfaz desde otro\n// m\u00e9todo default de la interfaz\nif(!isNull(str)){\nSystem.out.println(\"Cadena: \" + str);\n}\n}\nstatic boolean isNull(String str){\nSystem.out.println(\"Interface Null Check\");\nreturn str == null ? true : \"\".equals(str) ? true : false;\n}\n}\n</code></pre> <p>Un m\u00e9todo est\u00e1tico con implementaci\u00f3n por defecto de una interfaz, como el m\u00e9todo <code>isNull()</code> anterior, puede ser llamado desde otro m\u00e9todo de la propia interfaz , por ejemplo desde el m\u00e9todo <code>print()</code>.</p> <p>Tambi\u00e9n puede ser llamado est\u00e1ticamente usando el nombre de la interfaz, como en:</p> <pre><code>boolean resultado = Interfaz3.isNull(\"abc\");\n</code></pre> <p>Pero no puede ser llamado a trav\u00e9s de una instancia de una clase que implemente la interfaz. Por ejemplo, el siguiente c\u00f3digo da un error de compilaci\u00f3n:</p> <pre><code>Class1 myObject = new Class1();\nmyObject.isNull(\"hola\"); // ERROR de compilaci\u00f3n\n</code></pre> <p>No  se  pueden  definir  en  una  interfaz  m\u00e9todos  est\u00e1ticos  con  implementaci\u00f3n  que  tengan  la misma firma que m\u00e9todos de la clase  java.lang.Object , ya que es la clase base de todas las clases.</p>"},{"location":"bloque_ii/tema_7/page-4/#metodos-privados","title":"M\u00e9todos privados","text":"<p>A  partir  de  Java  9,  las  interfaces  pueden  contener  m\u00e9todos  privados,  que  s\u00f3lo  pueden  ser llamados desde m\u00e9todos default de dicha interfaz u otros m\u00e9todos privados de la misma. Sirven, b\u00e1sicamente,  para  poder  separar  el  c\u00f3digo  de  m\u00e9todos  con  implementaci\u00f3n  por  defecto. Veamos un ejemplo:</p> <pre><code>public interface Interfaz4{\n// Este m\u00e9todo privado s\u00f3lo puede ser llamado por m\u00e9todos default\n// de la misma interfaz.\nprivate int getNumeroAleatorio(){\nreturn (new Random()).nextInt(100);\n}\ndefault String method1(String s){\n// Un m\u00e9todo default puede llamar a un m\u00e9todo privado de la interfaz\nreturn s + getNumeroAleatorio();\n}\n}\n</code></pre> <p>A partir de Java 9 tambi\u00e9n podemos definir en una interfaz m\u00e9todos est\u00e1ticos privados, que s\u00f3lo podr\u00e1n ser llamados desde otros m\u00e9todos est\u00e1ticos de la interfaz. Sirven, b\u00e1sicamente, para poder separar el c\u00f3digo de m\u00e9todos est\u00e1ticos de la interfaz. Por ejemplo:</p> <pre><code>public interface Interfaz5{\nprivate static String getPrefix(String p){\nreturn p.equals(\"male\") ? \"Mr. \" : \"Ms. \"\n}\npublic static String getName(String n, String p){\nreturn getPrefix(p) + n;\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_7/page-4/#diferencias-entre-una-interfaz-y-una-clase-abstracta","title":"Diferencias entre una interfaz y una clase abstracta","text":"<p>Pero  entonces,  si  las  interfaces  pueden  tener  m\u00e9todos  con  implementaci\u00f3n  por  defecto  y m\u00e9todos privados \u00bfqu\u00e9 diferencia hay entre una interfaz con m\u00e9todos por defecto y una clase abstracta? La diferencia principal es que una interfaz no tiene estado, es decir no podemos almacenar atributos en ella, mientras que una clase abstracta s\u00ed.</p>"},{"location":"bloque_ii/tema_7/page-4/#utilizacion-de-una-interfaz-como-un-tipo-de-dato","title":"Utilizaci\u00f3n de una interfaz como un tipo de dato","text":"<p>Al declarar una interfaz, se declara un nuevo tipo de datos, lo que significa que se puede declarar una variable cuyo tipo es una interfaz. Pero, \u00bfqu\u00e9 va a contener dicha variable? Puede contener un objeto de cualquier clase que implemente dicha interfaz. Con dicha variable, las acciones que se pueden realizar son los m\u00e9todos de la interfaz.</p> <pre><code>public class Interfaces {\npublic void show(){\nVehicle vehicle = new Vehicle(2, \"rojo\");\nActionVehicle actionVehicle;\nSystem.out.printf(\"La velocidad del veh\u00edculo es %.2f km/h\\n\", vehicle.getSpeed());\nactionVehicle = vehicle;\nactionVehicle.accelerate(100.30);\nSystem.out.printf(\"La velocidad del veh\u00edculo es %.2f km/h\\n\", vehicle.getSpeed());\n}\npublic static void main(String[] args) {\nnew Interfaces().show();\n}\n}\n</code></pre> <p>\u00a1OJO!</p> <p>Con una variable de tipo interfaz, las acciones que se pueden realizar son los m\u00e9todos de la interfaz, es decir, con una variable de tipo ActionsVehicle lo que se puede realizar son los m\u00e9todos accelerate y brake que son los m\u00e9todos que pertenecen a la interfaz. Si intent\u00e1ramos realizar un getSpeed que pertenece a la clase Vehicle y no se encuentra entre los m\u00e9todos de la interfaz, nos dar\u00eda un error de compilaci\u00f3n.</p> <pre><code>ActionVehicle actionVehicle = vehicle;\nvehicle.getSpeed(); // ERROR\n</code></pre>"},{"location":"bloque_ii/tema_7/page-5/","title":"5 Clases anidadas","text":""},{"location":"bloque_ii/tema_7/page-5/#introduccion","title":"Introducci\u00f3n","text":"<p>En Java se permite escribir una clase dentro de otra clase. La clase de dentro se llama clase anidada y la que la contiene, clase contenedora o externa.</p> <p>Estas clases se utilizan con los siguientes prop\u00f3sitos:</p> <ul> <li>Agrupaci\u00f3n de clases relacionadas.</li> <li>Control de visibilidad de las clases.</li> <li>Proximidad entre la definici\u00f3n y el uso de las clases.</li> <li>Definici\u00f3n de clases simples de ayuda o adaptaci\u00f3n.</li> <li>C\u00f3digo m\u00e1s claro que evita el exceso de clases muy peque\u00f1as que no necesitan conocer los usuarios de un paquete.</li> </ul> <p>Las  clases  anidadas  se  dividen  en  dos  categor\u00edas:  las  clases  anidadas  est\u00e1ticas  y  las  clases anidadas no est\u00e1ticas o clases internas.</p>"},{"location":"bloque_ii/tema_7/page-5/#clases-anidadas-estaticas","title":"Clases anidadas est\u00e1ticas","text":"<p>Son clases declaradas de tipo static que se comportan como una clase normal de Java pero que se encuentran dentro de otra clase. Tambi\u00e9n se pueden usar dentro de una interfaz.</p> <p>Desde la clase anidada est\u00e1tica solamente se pueden acceder a los atributos est\u00e1ticos de la clase contenedora.</p> <p>Se pueden crear objetos sin crear ning\u00fan objeto de la clase contenedora.</p> <p>Para hacer referencia a una clase anidada est\u00e1tica hay que indicar tambi\u00e9n la clase contenedora: <code>ClaseContenedora.ClaseAnidada</code>.</p> ContainerClassMainSalida <pre><code>public class ContainerClass {\npublic static class StaticNestedClass{\npublic void staticNestedMethod(){\nSystem.out.println(\"Clase anidada est\u00e1tica\");\n}\n}\npublic void containerMethod(){\nSystem.out.println(\"Clase externa o contenedora\");\n}\n}\n</code></pre> <pre><code>public class ShowStaticNestedClass {\npublic void show(){\nContainerClass.StaticNestedClass nested = new ContainerClass.StaticNestedClass();\nnested.staticNestedMethod();\nContainerClass container = new ContainerClass();\ncontainer.containerMethod();\n}\npublic static void main(String[] args) {\nnew ShowStaticNestedClass().show();\n}\n}\n</code></pre> <pre><code>Clase anidada est\u00e1tica\nClase externa o contenedora\n</code></pre>"},{"location":"bloque_ii/tema_7/page-5/#clases-anidadas-no-estaticas-o-clases-internas","title":"Clases anidadas no est\u00e1ticas o clases internas","text":"<p>Las clases anidadas no est\u00e1ticas o clases internas tienen acceso a todos los atributos y m\u00e9todos de la clase contenedora, por lo tanto, para que exista un objeto de una clase interna es necesario que exista un objeto de la clase contenedora.</p> ContainerMainSalida <pre><code>public class ContainerClass {\nprivate int numContainer = 10;\npublic class InnerClass{\npublic void innerMethod(){\nSystem.out.printf(\"Clase interna. Puede acceder a la numContainer: %d\\n\", numContainer);\n}\n}\npublic void containerMethod(){\nInnerClass innerClass = new InnerClass();\ninnerClass.innerMethod();\n}\n}\n</code></pre> <pre><code>public class ShowInnerClass {\nprivate void show() {\nContainerClass container = new ContainerClass();\ncontainer.containerMethod();\n}\npublic static void main(String[] args) {\nnew ShowInnerClass().show();\n}\n}\n</code></pre> <pre><code>Clase interna. Puede acceder a numContainer: 10\n</code></pre> <p>Tambi\u00e9n se puede crear un objeto de la clase interna desde fuera de la clase externa siempre y cuando la clase interna sea visible:</p> <pre><code>ContainerClass container = new ContainerClass();\nContainerClass.InnerClass inner = container.new InnerClass();\ninner.innerMethod();\n</code></pre> <p>Se puede hacer una clasificaci\u00f3n de las clases internas en funci\u00f3n de d\u00f3nde y c\u00f3mo se utilicen:</p> <ul> <li>Clases miembro</li> <li>Clases dentro de un m\u00e9todo.</li> <li>Clases dentro de un bloque.</li> <li>Clases an\u00f3nimas</li> </ul>"},{"location":"bloque_ii/tema_7/page-5/#clases-internas-miembro","title":"Clases internas miembro","text":"<p>Se  utilizan  como  atributos  de  la  clase  contenedora.  Si  se  declaran  como  privadas,  la  clase contenedora es la \u00fanica que conoce su existencia.</p> ContainerMainSalida <pre><code>public class ContainerClass {\nprivate int num = 10;\nprivate InnerClass inner = new InnerClass();\nprivate class InnerClass{\nprivate int num = 20;\npublic void innerMethod(){\nSystem.out.printf(\"N\u00famero de la contenedora: %d. N\u00famero de la interna: %d\\n\",\nContainerClass.this.num, num);\n}\n}\npublic void containerMethod(){\ninner.innerMethod();\n}\n}\n</code></pre> <pre><code>public class ShowInnerMemberClass {\nprivate void show() {\nContainerClass container = new ContainerClass();\ncontainer.containerMethod();\n}\npublic static void main(String[] args) {\nnew ShowInnerMemberClass().show();\n}\n}\n</code></pre> <pre><code>N\u00famero de la contenedora: 10. N\u00famero de la interna: 20\n</code></pre> <p>Al usar this dentro de una clase interna, \u00e9ste se refiere al objeto de la clase interna. Para poder referirse al objeto de la clase contenedora, hay que anteponerle al this el nombre de dicha clase, tal y como se puede observar en el ejemplo: <code>ContainerClass.this.num</code>.</p>"},{"location":"bloque_ii/tema_7/page-5/#clases-internas-dentro-de-un-metodo","title":"Clases internas dentro de un m\u00e9todo","text":"<p>Se definen dentro de un m\u00e9todo de la clase contenedora por lo que solamente se pueden utilizar dentro de dicho m\u00e9todo.</p> <p>Se utilizan cuando el m\u00e9todo intenta solucionar un problema y necesita apoyarse en una clase pero no se necesita que esta clase est\u00e9 disponible fuera, por lo tanto, son clases que quedan fuera del dise\u00f1o.</p> <p>La clase interna tiene acceso a los m\u00e9todos y atributos de la clase contenedora y a las variables locales y par\u00e1metros del m\u00e9todo donde se la declara.</p> ContainerMainSalida <pre><code>public class ContainerClass {\nprivate int attribute = 10;\npublic void containerMethod(int parameter){\nint localVariable = 20;\nclass InnerClass{\npublic void innerMethod(){\nSystem.out.printf(\"Clases interna a m\u00e9todo---&gt;\\nAtributo de la clase contenedora: %d\\n\", attribute);\nSystem.out.printf(\"Variable local: %d\\n\", localVariable);\nSystem.out.printf(\"Par\u00e1metro: %d\\n\", parameter);\n}\n}\n}\n}\n</code></pre> <pre><code>public class ShowInnerMethodClass {\nprivate void show() {\nContainerClass container = new ContainerClass();\ncontainer.containerMethod(30);\n}\npublic static void main(String[] args) {\nnew ShowInnerMethodClass().show();\n}\n}\n</code></pre> <pre><code>Clase interna a m\u00e9todo---&gt;\nAtributo de la contenedora: 10\nVariable local: 20\nPar\u00e1metro: 30\n</code></pre>"},{"location":"bloque_ii/tema_7/page-5/#clases-internas-dentro-de-un-bloque","title":"Clases internas dentro de un bloque","text":"<p>S\u00f3lo son visibles y utilizables dentro del bloque de c\u00f3digo en el que se encuentran definidas.</p> ContainerMainSalida <pre><code>public class ContainerClass {\nprivate int attribute = 10;\npublic void containerMethod(int parameter){\nint localVariable = 20;\nif(parameter &gt; localVariable){\nclass InnerClass{\npublic void innerMethod(){\nSystem.out.printf(\"Clase interna a bloque---&gt;\\nAtributo de la contenedora: %d\\n\", attribute);\nSystem.out.printf(\"Variable local: %d\\n\", localVariable);\nSystem.out.printf(\"Par\u00e1metro; %d\\n\", parameter);\n}\n}\nInnerClass inner = new InnerClass();\ninner.innerMethod();\n}\n}\n}\n</code></pre> <pre><code>public class ShowInnerBlockClass {\npublic void show(){\nContainerClass container = new ContainerClass();\ncontainer.containerMethod(30);\n}\npublic static void main(String[] args) {\nnew ShowInnerBlockClass().show();\n}\n}\n</code></pre> <pre><code>Clase interna a bloque---&gt;\nAtributo de la contenedora: 10\nVariable local: 20\nPar\u00e1metro: 30\n</code></pre> <p>\u00a1Cuidado!</p> <p>Si se intenta utilizar la clase fuera del bloque, da un error de compilaci\u00f3n informando que la clase no puede ser resulta como tipo</p>"},{"location":"bloque_ii/tema_7/page-5/#clases-inline-anonimas","title":"Clases inline an\u00f3nimas","text":"<p>Son clases sin nombre que se definen e instancian en una sola operaci\u00f3n. Este tipo de clases se utiliza cuando se quiere anular el m\u00e9todo de una clase o implementar una interfaz solamente para un momento puntual evitando crear una clase nueva para un solo uso. El t\u00e9rmino inline se debe a que en el cuerpo de un m\u00e9todo se puede escribir una clase ah\u00ed mismo, en la l\u00ednea, es decir, sin necesidad de hacerlo en otro archivo.</p> <p>Por ejemplo, tenemos la siguiente class Class:</p> <pre><code>public class Class{\nprotected String message = \"Clases inline an\u00f3nimas\";\npublic void showMessage(){\nSystem.out.println(message);\n}\n}\n</code></pre> <p>Supongamos que queremos anular el m\u00e9todo <code>showMessage()</code> para mostrar el mensaje en rojo en un momento puntual y creamos una subclase o clase hija de Class que sobrescribiera el m\u00e9todo:</p> <pre><code>public class Subclass extends Class{\n@Override\npublic void showMessage(){\nSystem.out.println(RED + message + RESET);\n}\n}\n</code></pre> <p>Entonces estar\u00edamos creando una clase para algo que vamos a hacer solamente una vez. Y si quisi\u00e9ramos en otro momento hacer lo mismo pero en azul, tendr\u00edamos que crear otra subclase para hacerlo. Entonces, la soluci\u00f3n es crear una clase inline an\u00f3nima. Se llama an\u00f3nima porque en ning\u00fan otro momento aparece el nombre <code>Subclass</code>, es decir, estamos haciendo lo mismo que antes pero sin crear la subclase y lo estamos haciendo sobre la marcha:</p> <pre><code>public class AnonymousInlineClass {\npublic void show(){\nClass anonymousInner = new Class(){\npublic void showMessage(String message){\nSystem.out.println(RED + message + RESET);\n}\n};\nanonymousInner.showMessage();\nnew Class(){ // Lo mismo pero sin utilizar una variable\npublic void showMessage(String message){\nSystem.out.println(RED + message + RESET);\n}\n}.showMessage();\n}\npublic static void main(String[] args) {\nnew AnonymousInlineClass().show();\n}\n}\n</code></pre> <p>Veamos un ejemplo con interfaces</p> InterfazMain <pre><code>public interface Message {\nvoid showMessage();\n}\n</code></pre> <pre><code>    public class ShowAnonymousInlineClassWithInterface {\npublic void show(){\nnew Message(){\n@Override\npublic void showMessage() {\nSystem.out.println(RED + \"Clases inline an\u00f3nimas\" + RESET);\n}\n}.showMessage();\nnew Message(){\n@Override\npublic void showMessage() {\nSystem.out.println(BLUE + \"Clases inline an\u00f3nimas\" + RESET);\n}\n}.showMessage();\n}\npublic static void main(String[] args) {\nnew ShowAnonymousInlineClassWithInterface().show();\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_7/page-6/","title":"Ejercicios","text":"Ejercicio 1 <p>Queremos hacer una aplicaci\u00f3n para profesores y alumnos. De ambos se quiere conocer el nombre, la edad, el sexo y la nacionalidad. De los profesores se quiere conocer adem\u00e1s el sueldo, y del alumno si es o no repetidor. Realiza los siguientes apartados creando tres paquetes diferentes (uno para apartado). Cada paquete debe contener las clases y la clase con el main.</p> <ol> <li>Realiza en java las clases que consideres oportunas teniendo en cuenta las relaciones de herencia. Realiza un constructor por defecto para todas las clases sin usar super(). Realiza tambi\u00e9n los toString para todas las clases. Haz un programa para probarlo que haga lo siguiente:<ul> <li>Crea un profesor y saca por consola toString.</li> <li>Crea un alumno y saca por consola su toString.</li> <li>Crea una variable del padre y seg\u00fan un valor solicitado por consola, introduce en ella un objeto profesor o alumno. Muestra por consola el toString.</li> </ul> </li> <li>Hacer otra versi\u00f3n sustituyendo el constructor por defecto del padre por otro con par\u00e1metros. Soluciona los errores que surja realizando una llamada expl\u00edcita al constructor de la superclase.</li> <li>Lo mismo que el anterior pero utilizando el this(par\u00e1metros)</li> </ol> Ejercicio 2 <p>Queremos colocar figuras geom\u00e9tricas en un plano bidimensional y adem\u00e1s calcular el \u00e1rea de dichas figuras. Para ello, crear la clase abstracta FiguraGeom\u00e9trica que tendr\u00e1 como m\u00e9todo abstracto calcular_area. Dicha clase iniciar\u00e1 los valores de las coordenadas x e y del plano bidimensional para indicar la posici\u00f3n de la figura en dicho plano. Para el c\u00edrculo ser\u00e1 el centro de la circunferencia y para el resto, el v\u00e9rtice inferior izquierdo. Crea las clases Rect\u00e1ngulo, C\u00edrculo y Tri\u00e1ngulo heredadas de la clase abstracta.</p> Ejercicio 3 <p>Crea una clase empleado y una clase encargado. Los encargados reciben un 10% m\u00e1s de sueldo base que un empleado normal aunque realicen el mismo trabajo. Implementa dichas clases con el m\u00e9todo calcularSueldo() para ambas clases.</p> Ejercicio 4 <p>\u00bfPor qu\u00e9 no compila el siguiente c\u00f3digo?</p> <pre><code>class Prueba{\nprotected String nombre;\nprotected int id;\npublic String getIndent() {\nreturn nombre;\n}\npublic int getIndent(){\nreturn id;\n}\n}\n</code></pre> Ejercicio 5 <p>Implementa la siguiente estructura de clases:</p> <p>Forma es una superclase que tiene cuatro subclases: c\u00edrculo, cuadrado, tri\u00e1ngulo y rombo. Ni forma ni las subclases contienen atributos. La clase Forma es abstracta y contiene el m\u00e9todo abstracto toString(). Las subclases, al no tener atributos, en el m\u00e9todo toString() informar\u00e1n del tipo de forma que son.</p> <p>La clase forma tendr\u00e1 implementado un m\u00e9todo identidad que devuelva una cadena con la clase a la que pertenece. Realiza el m\u00e9todo identidad de tres maneras:</p> <ol> <li>Con el m\u00e9todo getClass(). Investigar en la API sobre este m\u00e9todo.</li> <li>Con instanceof</li> <li>Sin usar getClass() ni instanceof</li> </ol> <p>Hacer un programa que cree un array con cuatro objetos, uno de cada subclase y ejecutar de todos el m\u00e9todo identidad.</p> Ejercicio 6 <p>Este c\u00f3digo est\u00e1 utilizando la estructura de clases del ejercicio anterior. Modifica la sintaxis de las l\u00edneas que dan problema y elimina aquellas l\u00edneas que aunque sean sint\u00e1cticamente correctas nunca pueden funcionar:</p> <pre><code>public class TestForma{\npublic static void main(String[] args){\nForma f = new Circulo();\nf.identidad();\nCirculo c = new Circulo();\n((Forma) c).identidad();\n((Circulo) f).identidad();\nForma f2 = new Forma();\nf2.identidad();\n(Forma) f.identidad();\nf = c;\nc = f;\n}\n}\n</code></pre> Ejercicio 7 <p>Averigua los errores del siguiente c\u00f3digo:</p> <pre><code>public class Test{\npublic int dato = 0;\npublic static int datoStatic = 0;\npublic void metodo(){\nthis.datoStatic++;\n}\npublic static void metodoStatic(){\nthis.datoStatic++;\ndatoStatic++;\n}\npublic static void main(String[] args){\ndato++;\ndatoStatic++;\nmetodosStatic();\nmetodo();\n}\n}\n</code></pre> Ejercicio 8 <p>\u00bfQu\u00e9 mostrar\u00e1 el siguiente programa por pantalla?</p> <pre><code>public class Bebe{\nBebe(int i ){\nthis(\"Soy un bebe consentido\");\nSystem.out.println(\"Hola, tengo \" + i + \" meses\");\n}\nBebe(String s){\nSystem.out.println(s);\n}\nvoid berrea(){\nSystem.out.println(\"Buaaaaaaaa\");\n}\npublic static void main(String[] args){\nnew Bebe(8).berrea();\n}\n}\n</code></pre> Ejercicio 9 <p>Averigua sin ejecutar el c\u00f3digo, que mostrar\u00e1 el siguiente programa por pantalla. Una vez que tengas claro lo que el programa deber\u00eda de mostrar por pantalla ejecuta el c\u00f3digo y verifica que lo que has pensado se cumple.</p> <pre><code>public class Bebe{\nstatic void pedir(){\nSystem.out.println(str1 + \", \" + str2 + \", \" + str3);\n}\nstatic{\nstr2 = \"mama pipi\";\nstr3 = \"mama agua\";\n}\nBebe(){\nSystem.out.println(\"Nacimiento del bebe\");\n}\nstatic String str2, str3, str1 = \"papa tengo caca\";\npublic static void main(String[] args){\nSystem.out.println(\"El bebe se ha despertado y va a pedir cosas\");\nSystem.out.println(\"El bebe dice \" + Bebe.str1);\nBebe.pedir();\n}\nstatic Bebe bebe1 = new Bebe();\nstatic Bebe bebe2 = new Bebe();\nstatic Bebe bebe3 = new Bebe();\n}\n</code></pre> Ejercicio 10 <p>Tenemos la siguiente clase:</p> <pre><code>public abstract class Sorteo{\nprotected int posibilidades;\npublic abstract int lanzar();\n}\n</code></pre> <p>Se pide:</p> <ul> <li>Crear una clase Dado, la cual desciende de la clase Sorteo. La clase Dado, en la llamada al m\u00e9todo lanzar devolver\u00e1 un n\u00famero aleatorio del 1 al 6.</li> <li>Crear la clase Moneda, la cual desciende de la clase Sorteo. Esta clase en la llamada al m\u00e9todo lanzar devolver\u00e1 las palabras cara o cruz</li> </ul> Ejercicio 11 <p>Averigua por qu\u00e9 el compilador da un mensaje de error en el siguiente c\u00f3digo:</p> <pre><code>class TestFinal{\npublic static void main(String[] args){\nfinal String s1 = new String(\"Hola\");\nString s2 = new String(\" Mundo\");\ns1 = s1 + s2;\n}\n}\n</code></pre> Ejercicio 12 <p>Tenemos la siguiente clase:</p> <pre><code>public abstract class Vehiculo{\nprivate int peso;\npublic final void setPeso(int p){\npeso = p;\n}\npublic abstract int getVelocidadActual();\n}\n</code></pre> <ul> <li>\u00bfpodr\u00e1 tener descendencia esta clase?</li> <li>\u00bfse pueden sobrescribir todos sus m\u00e9todos?</li> </ul> Ejercicio 13 <p>Tenemos una jardiner\u00eda donde se venden plantas de jard\u00edn y productos de alfarer\u00eda. Ambas disponen de atributos precio y descripci\u00f3n pero no tienen relaci\u00f3n de herencia. Adem\u00e1s, las plantas disponen de un atributo para indicar si el producto es fr\u00e1gil. Ambas implementan la interfaz Mercanc\u00eda:</p> <pre><code>interface Mercancia{\npublic double damePrecio();\npublic String dameDescripcion();\n}\n</code></pre> <p>Haz un programa para probarlo que contenga el siguiente m\u00e9todo est\u00e1tico: <code>public static void dameDatos(Mercancia mercancia)</code>. Dicho m\u00e9todo deber\u00e1 mostrar el precio y la descripci\u00f3n del producto.</p> Ejercicio 14 <p>Implementa las siguientes interfaces que  heredan de la interface Mercancia del ejercicio anterior:</p> <pre><code>interface MercanciaViva extends Mercancia{\npublic boolean necesitaComida();\npublic boolean necesitaRiego();\n}\n</code></pre> <pre><code>interface MercanciaFragil extends Mercancia{\npublic String dameEmbalaje();\npublic double damePeso();\n}\n</code></pre> <p>Las plantas implementan la interface MercanciaViva y los productos de alfarer\u00eda implementan MercanciaFr\u00e1gil. Haz un programa para probarlo que contenta el siguiente m\u00e9todo est\u00e1tico: <code>public static void dameDatos(Mercancia producto)</code>. Dicho m\u00e9todo deber\u00e1 utilizar los m\u00e9todos de Mercancia, MercanciaViva y MercanciaFragil.</p> Ejercicio 15 <p>Realiza una clase pez con los atributos nombre, especie y zona donde vive. Realiza una subclase llamada pezAguaDulce con un atributo booleano para saber si es un pez de acuario. Realiza para ambas clases el toString y el equals. Haz un programa para probarlos.</p> Ejercicio 16 <p>Para la clase pez anterior, crea un atributo privado entero numpeces, com\u00fan a todos los objetos pez, el cual cuente el n\u00famero de peces creados. Crea un programa que compruebe que est\u00e1 variable se incrementa cada vez que se crea un objeto pez.</p> Ejercicio 17 <p>Realiza una clase huevo que est\u00e9 compuesta por dos clases internas, una clara y otra yema. Realiza un programa para probarlo.</p> Ejercicio 18 <p>\u00bfQu\u00e9 resultado da el siguiente c\u00f3digo? Analiza qu\u00e9 tipo de clase interna se est\u00e1 utilizando y haz una reflexi\u00f3n del resultado.</p> <p><pre><code>public class VerClaseInterna{\npublic static void main(String[] args){\nContenedor c1 = new Contenedor(34);\nContenedor.Contenido i1 = c1.new Contenido(23);\nSystem.out.println(c1.muestraContenedor(i1));\nc1.numero = 50;\nSystem.out.println(i1.muestraContenido());\ni1.numero2 = 25;\nSystem.out.println(c1.muestraContenedor(i1));\ni1.numero2 = 65;\nSystem.out.println(i1.muestraContenido());\n}\n}\n</code></pre> <pre><code>public class Contenedor{\npublic int numero = 0;\npublic Contenedor(int numero){\nthis.numero = numero;\n}\npublic String muestraContenedor(Contenido refCont){\nreturn \"N. contenedor= \" + numero + \" N. contenido= \" + refCont.numero2;\n}\npublic class Contenido{\npublic int numero2;\npublic Contenido(int numero){\nnumero2 = numero;\n}\npublic String muestraContenido(){\nreturn \"N. contenedor= \"+numero+\" N. contenido = \" + numero2;\n}\n}\n}\n</code></pre></p> Ejercicio 19 <p>\u00bfQu\u00e9 resultado da el siguiente c\u00f3digo? Analiza qu\u00e9 tipo de clase interna se est\u00e1 utilizando y haz una reflexi\u00f3n del resultado.</p> <pre><code>public class ClaseLocal{\npublic int numero = 0;\npublic ClaseLocal(int numero){\nthis.numero = numero;\n}\npublic String muestraContenido(){\nclass Mostrador{\npublic String muestraDato(){\nreturn \"N\u00famero = \"+numero;\n}\n}\nMostrador m = new Mostrador();\nreturn m.muestraDato();\n}\n}\n</code></pre> <pre><code>public class VerClaseLocal{\npublic static void main(String[] args){\nClaseLocal c1 = new ClaseLocal(346);\nSystem.out.println(c1.muestraContenido());\n}\n}\n</code></pre> Ejercicio 20 <p>\u00bfQu\u00e9 resultado da el siguiente c\u00f3digo? Analiza qu\u00e9 tipo de clase interna se est\u00e1 utilizando y haz una reflexi\u00f3n del resultado.</p> <pre><code>public class VerClaseAnidada{\npublic static void main(String[] args){\nPrimerContenedor.Contenido i1 = new PrimerContenedor.Contenido(29);\ni1.numero2 = 25;\nSystem.out.println(i1.muestraContenido());\nPrimerContenedor c1 = new PrimerContenedor(34);\nSystem.out.println(c1.muestraContenedor(i1));\n}\n}\n</code></pre> <pre><code>public class PrimerContenedor{\npublic int numero = 0;\nstatic public int numero3 = 13;\npublic PrimerContenedor(int numero){\nthis.numero = numero;\n}\npublic String muestraContenedor(Contenido refCont){\nreturn \"N\u00ba contenedor=\" +numero+ \"N\u00ba contenido=\" + refCont.numero2;\n}\nstatic class Contenido{\npublic int numero2;\npublic Contenido(int numero){\nnumero2 = numero;\n}\npublic String muestraContenido(){\nreturn \"N\u00ba contenedor=\" + numero3 + \" N\u00ba contenido= \" + numero2; }\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_7/page-7/","title":"Proyecto","text":"<p>En este proyecto se quiere almacenar informaci\u00f3n sobre los profesores y alumnos de un instituto.</p> <p>De ambos se desea almacenar su dni, su nombre y su apellidos. De los profesores adem\u00e1s se quiere almacenar el a\u00f1o en el que empez\u00f3 en el instituto.</p> <p>De los alumnos se desea almacenar:</p> <ul> <li>Curso</li> <li>A\u00f1o de matriculaci\u00f3n</li> <li>Notas de cada asignatura.</li> </ul> <p>Existen dos tipos de profesores: Tutores y no tutores, de los tutores se desea almacenar el curso del cual son tutores y adem\u00e1s pueden realizar las siguientes acciones:</p> <ul> <li>Comunicarse con los padres de alg\u00fan alumno (debe recibir el alumno como par\u00e1metro).</li> <li>Dar boletines de notas de un alumno.</li> <li>Pasar lista.</li> </ul> <p>Adem\u00e1s puede hacer tambi\u00e9n podr\u00e1 poner las notas de un alumno, como cualquier profesor.</p> <p>Tambi\u00e9n se quiere guardar informaci\u00f3n de los directores, que no son considerados profesores ya que no imparten clases, pero pueden hacer cualquier acci\u00f3n realizada por un profesor, ya sea tutor o no.</p> <p>Tambi\u00e9n se almacenar\u00e1 la informaci\u00f3n importante del instituto, dividiendo dicha informaci\u00f3n en: informaci\u00f3n de la direcci\u00f3n, que mostrar\u00e1 los datos de la direcci\u00f3n donde se encuentra el instituto, informaci\u00f3n de los directores y del claustro e informaci\u00f3n con todos los alumnos.</p> <p>Realiza una aplicaci\u00f3n Java con la estructura de clase detallada por lo dicho anteriormente, creando un Diagrama de clases. En el Main, se deber\u00e1 crear varios profesor y alumnos y probar todo los m\u00e9todos que contengan.</p> <p>Para realizar este proyecto se tendr\u00e1 en cuenta:</p> <ul> <li>Se deber\u00e1 hacer uso de la herencia, de interfaces y clases internas. Valorando el uso de cada una.</li> <li>Se valorar\u00e1 la complejidad de dicho Main.</li> <li>Se podr\u00e1 usar la librer\u00eda common realiza en proyectos anteriores, haciendo uso de JARs.</li> <li>El nombre de las funciones ser\u00e1 en ingl\u00e9s y deber\u00e1n ser lo suficiente claras para poder identificarlas con facilidad.</li> <li>El c\u00f3digo se comentar\u00e1 haciendo uso de los comentarios JavaDoc adem\u00e1s, de comentarios normales para dar una explicaci\u00f3n a la parte del c\u00f3digo m\u00e1s importante. El repositorio de GitHub tendr\u00e1 el siguiente nombre pr07java-NOMBRE-hig-school siendo NOMBRE el nombre del alumno.</li> <li>Se declarar\u00e1 aquellas variables que sean necesarias inicializ\u00e1ndolas si es necesario, indicando el tipo correspondiente.</li> <li>Se har\u00e1 uso de funciones y procedimientos donde sea oportuno.</li> <li>La entrega de este proyecto se realizar\u00e1 a trav\u00e9s de un enlace a un repositorio de GitHub, realizando siempre m\u00e1s de un commit.</li> <li>Se valorar\u00e1 la limpieza, la claridad, y la estructura del proyecto.</li> </ul>"},{"location":"bloque_ii/tema_8/page-1/","title":"1 Introducci\u00f3n a los tipos enumerados","text":""},{"location":"bloque_ii/tema_8/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>Un tipo enumerado (enum type) es un tipo cuyos \u00fanicos valores legales consisten en un conjunto fijo de constantes, como por ejemplo las estaciones del a\u00f1o o los palos en una baraja de cartas.</p> <p>Antes  de  que  los  lenguajes  nos  permitieran  definir  tipos  enumerados,  \u00e9stos  eran  simulados declarando un grupo de constantes enteras, una para cada valor posible del tipo. Por ejemplo, para definir los tipos de manzanas y los tipos de naranjas podr\u00edamos hacer:</p> <pre><code>// APPLE TYPES\npublic static final int APPLE_FUJI = 0;\npublic static final int APPLE_PIPPIN = 1;\npublic static final int APPLE_GRANNY_SMITH = 2;\n// ORANGE TYPES\npublic static final int ORANGE_NAVEL = 0;\npublic static final int ORANGE_TEMPLE = 1;\n</code></pre> <p>Esta t\u00e9cnica, conocida como el patr\u00f3n de enumeraci\u00f3n entera, tiene muchos defectos, por lo que no se recomienda su uso.</p> <p>Para  empezar,  al  no  definir  realmente  un  tipo,  el  compilador  no  puede  proporcionarnos seguridad real respecto al tipo. Por ejemplo, podemos pasar un tipo de naranja como argumento de un m\u00e9todo que espera recibir un tipo de manzana, o almacenar un tipo de naranja en una variable que debe tener un tipo de manzana.</p> <pre><code>// Para el compilador esto es correct\nint appleType = ORANGE_TEMPLE;\n</code></pre> <p>No solo eso, podemos comparar err\u00f3neamente tipos de manzanas y tipos de naranjas.</p> <pre><code>int appleType = APPLE_PIPPIN;\nint orangeType = ORANGE_TEMPLE;\nif(appleType == orangeType){\n// ...\n}\n</code></pre> <p>Como Java no proporciona espacios de nombre para grupos de constantes enteras, debemos usar  prefijos  para  evitar  conflictos  con  los  nombres  de  las  constantes  correspondientes  a distintos grupos, como por ejemplo entre <code>ELEMENT_MERCURY</code> y <code>PLANET_MERCURY</code>.</p> <p>Otro problema es que si se cambia el valor asociado a una constante, todas las clases que la usen seguir\u00e1n compilando, pero su comportamiento puede llegar a ser incorrecto.</p> <p>Finalmente, el patr\u00f3n de enumeraci\u00f3n entera tiene el inconveniente de que no hay una forma f\u00e1cil de traducir las constantes enteras a cadenas imprimibles, es decir, la descripci\u00f3n textual del valor que desea representar.</p> <p>En otras ocasiones se usa una variante del patr\u00f3n anterior, pero usando el tipo  String  como tipo para las constantes en lugar de  int. Por ejemplo:</p> <pre><code>// Apple types\npublic static final String APPLE_FUJI = \"FUJI\";\npublic static final String APPLE_PIPPIN = \"PIPPIN\";\npublic static final String APPLE_GRANNY_SMITH = \"SMITH\";\n// Orange types\npublic static final String ORANGE_NAVEL = \"NAVEL\";\npublic static final String ORANGE_TEMPLE = \"TEMPLE\";\n</code></pre> <p>Esta  variaci\u00f3n  se  conoce  como  patr\u00f3n  de  enumeraci\u00f3n  con  cadenas,  y  es  a\u00fan  menos deseable  que  la  anterior,  porque  aunque  proporciona  cadenas  imprimibles  para  sus constantes, los desarrolladores pueden tener la tentaci\u00f3n de usar en otras clases los valores de cadena  directamente  en  vez  de  las  constantes,  por  lo  que  un  simple  error  tipogr\u00e1fico  puede conllevar  fallos  en  tiempo  de  ejecuci\u00f3n.  Adem\u00e1s,  la  comparaci\u00f3n  de  cadenas  es  mucho  m\u00e1s costosa que la de enteros.</p> <p>La  alternativa  adecuada  a  los  patrones  de  enumeraci\u00f3n  anteriores  es  que  el  lenguaje  de programaci\u00f3n  nos  permita  definir  tipos  enumerados,  es  decir,  que  nos  permita  definir  un nuevo tipo indicando cu\u00e1les son los valores legales para dicho tipo y con qu\u00e9 nombre queremos referirnos a dichos valores.</p> <p>En algunos lenguajes de programaci\u00f3n, estos tipos enumerados son internamente tipos enteros. Sin  embargo,  en  Java  cuando  definimos  un  tipo  enumerado,  estamos  definiendo  una  clase completa,  lo  que  nos  proporciona  una  mayor  funcionalidad  a  la  de  otros  lenguajes  de programaci\u00f3n.  En  la  versi\u00f3n  5  de  Java,  se  incorporaron  al  lenguaje  los  tipos  de  datos enumerados.</p> <p>As\u00ed, siguiendo el ejemplo anterior, definir\u00edamos las siguientes clases <code>enum</code>:</p> <pre><code>public enum Apple{\nFUJI, PIPPIN, GRANNY_SMITH\n}\npublic enum Orange{\nNAVEL, TEMPLE\n}\n</code></pre> <p>Los enums presentan numerosas ventajas frente al uso de los patrones de enumeraci\u00f3n entera y de enumeraci\u00f3n con cadenas. La m\u00e1s importante es que la clase enum corresponder\u00e1 a un tipo, por lo que el compilador va a ser capaz de proporcionar comprobaci\u00f3n de tipos en tiempo de compilaci\u00f3n.  Por  ejemplo,  si  se  declara  que  un  par\u00e1metro  es  del  tipo <code>Apple</code>,  el  compilador garantiza que cualquier referencia de objeto no nulo pasada al par\u00e1metro debe ser alguno de las instancias de  Apple  v\u00e1lidas que hemos definido en el enum. En caso contrario, se producir\u00e1 un error  de  compilaci\u00f3n.  Ocurre  exactamente  lo  mismo  al  asignar  una  expresi\u00f3n  de  un  tipo  de enumeraci\u00f3n a una variable de un tipo enum, o al usar el operador <code>==</code> para comparar valores de diferentes tipos enum.</p> <p>Adem\u00e1s,  los  tipos  enum  definen  su  propio  espacio  de  nombres,  por  lo  que  no  hay  ning\u00fan problema en usar constantes con el mismo nombre en distintos enums.</p> <p>Otra ventaja es que si cambiamos el orden de las constantes en el enum, esto no afecta al c\u00f3digo de  los  clientes  del  enum,  dado  que  las  constantes  no  son  compiladas  en  el  c\u00f3digo  cliente,  a diferencia de como ocurr\u00eda en los patrones anteriores.</p>"},{"location":"bloque_ii/tema_8/page-1/#definicion","title":"Definici\u00f3n","text":"<p>Los enumerados se definen con la palabra reservada enum, el nombre del enumerado y luego el conjunto de las constantes, que por las convenciones del lenguaje se escriben en may\u00fascula. Las constantes de la enumeraci\u00f3n son public y static de forma impl\u00edcita.Ejemplo:</p> <pre><code>public enum DayOfWeek{\nMONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY\n}\n</code></pre> <p>Por otra parte, \u00bfd\u00f3nde debemos definir un enum? Si va a ser usado desde varios lugares, lo l\u00f3gico es definir el enum como una clase en su propio fichero. Si su uso est\u00e1 restringido a una \u00fanica clase cliente, es m\u00e1s razonable definir el enum como una clase interna miembro de dicha clase. Una vez definido el enum, se pueden crear variables de ese tipo:</p> <pre><code>DayOfWeek day; // day es una variable del tipo de enumeraci\u00f3n DayOfWeek\n</code></pre> <p>Como day es de tipo DayOfWeek, los \u00fanicos valores que se le pueden asignar son los definidos por la enumeraci\u00f3n:</p> <pre><code>day = DayOfWeek.MONDAY; // Se asigna a day el valor MONDAY\n</code></pre> <p>El  compilador  nos  da  un  error  si  intentamos  asignar  a  una  variable  enum  un  tipo  que  no  le corresponde:</p> <pre><code>DayOfWeek day = Apple.FUJI; //(1)!\n</code></pre> <ol> <li>ERROR -&gt; falta de correspondencia entre tipos; No se puede convertir de Apple a DayOfWeek</li> </ol>"},{"location":"bloque_ii/tema_8/page-2/","title":"2 Operaciones con tipos enumerados","text":""},{"location":"bloque_ii/tema_8/page-2/#constructores","title":"Constructores","text":"<p>Los  enum  se  implementan  internamente  como  clases.  El  enum DayOfWeek  internamente  se convierte en:</p> <pre><code>class DayOfWeek {\npublic static final DayOfWeek MONDAY = new DayOfWeek();\npublic static final DayOfWeek TUESDAY = new DayOfWeek();\npublic static final DayOfWeek WEDNESDAY = new DayOfWeek();\n// ...\n}\n</code></pre> <p>Los  enum  de  Java  son  clases  que  exportan  una  instancia  (objeto)  para  cada  constante  de enumeraci\u00f3n  a  trav\u00e9s  de  un  campo  final  est\u00e1tico  p\u00fablico.  Estas  instancias  son  creadas autom\u00e1ticamente  al  hacer  referencia  al  enum  en  nuestro  c\u00f3digo,  es  decir,  el  constructor  se ejecuta para cada constante en el momento de la carga de la clase enum. No podemos crear objetos enum expl\u00edcitamente y, por lo tanto, no podemos invocar al constructor directamente:</p> <pre><code>DayOfWeek day = new DayOfWeek(); // ERROR \n</code></pre> <p>Los \u00fanicos modificadores de acceso permitidos para los constructores de los enum son friendly y private. Los modificadores de acceso protected y public dan un error de compilaci\u00f3n.</p> <p>Como vemos, los  enum  de Java son una generaci\u00f3n del patr\u00f3n de dise\u00f1o singleton permitiendo una  determinada  serie  de  instancias,  cada  una  de  las  cuales  es  accesible  a  trav\u00e9s  de  una constante. Visto de forma inversa, podr\u00edamos decir que un singleton no es m\u00e1s que un enum con una sola instancia.</p>"},{"location":"bloque_ii/tema_8/page-2/#comparaciones","title":"Comparaciones","text":"<p>Los enum se pueden comparar utilizando el operador relacional ==:</p> <pre><code>if(day == DayOfWeek.MONDAY){ // ...\n}\nDayOfWeek day = DayOfWeek.MONDAY;\nSystem.out.println(day == DayOfWeek.MONDAY ? \"Es lunes\" : \"No es lunes\")\n</code></pre> <p>El compilador nos da un error si intentamos comparar valores de diferentes tipos enum:</p> <pre><code>DayOfWeek day = DayOfWeek.Monday;\nApple apple = Apple.FUJI;\nif(day == apple){ // ERROR\n}\n</code></pre>"},{"location":"bloque_ii/tema_8/page-2/#enums-en-switch","title":"Enums en switch","text":"<p>Tambi\u00e9n podemos utilizar switch para comprobar en los case los distintos valores del enum:</p> <pre><code>switch(day){\ncase MONDAY:\nSystem.out.println(\"Lunes\");\nbreak;\ncase MONDAY:\nSystem.out.println(\"Martes\");\nbreak;\n// ...\n}\n</code></pre> <p>\u00a1OJO!</p> <p>No es necesario calificar las constantes en las declaraciones de case con su nombre de tipo enum. De hecho, intentar hacerlo provocar\u00e1 un error de compilaci\u00f3n</p>"},{"location":"bloque_ii/tema_8/page-3/","title":"3 Tipo de enumerados compuestos","text":""},{"location":"bloque_ii/tema_8/page-3/#atributos","title":"Atributos","text":"<p>Los enums no dejan de ser clases, por lo que podemos declararles atributos, que deben ser final, ya que los enums son inmutables por naturaleza. Aunque estos atributos pueden ser public, se recomienda definirlos como private y definir los getters correspondientes si es necesario acceder a los atributos desde fuera del enum.</p> <p>Para  establecer  el  valor  de  estos  atributos,  debemos  definir  en  la  clase  enum  el  constructor adecuado y al establecer las instancias pasaremos como argumento los valores deseados que se pasar\u00e1n al constructor. En el ejemplo, cuando definimos PLUS, le ponemos entre par\u00e9ntesis la cadena  \"+\".  Cuando  se  cree  el  objeto  para PLUS,  se  ejecuta  el  constructor  private <code>Operation(String symbol)</code>  y en symbol se pasa \"+\":</p> EnumMainSalida <pre><code>public enum Operation {\nPLUS(\"+\"), MINUS(\"-\"), TIMES(\"*\"), DIVIDE(\"/\");\nprivate final String symbol;\nOperation(String symbol){\nthis.symbol = symbol;\n}\npublic String getSymbol() {\nreturn symbol;\n}\n}\n</code></pre> <p>Observa</p> <p>Del ejemplo se pueden destacar dos cosas importantes y a tener en cuenta:</p> <ul> <li>El constructor es privado aunque no es necesario indic\u00e1rselo, ya que si se indica un modificar diferente dar\u00eda error de compilaci\u00f3n. Esto ocurre para evitar crear objetos fuera del enum.</li> <li>Cuando se declaran atributos, constructores y/o m\u00e9todos es obligatorio poner <code>;</code> al terminar de declarar los valores del enum.</li> </ul> <pre><code>public class EnumAttributes {\npublic void show(){\nOperation operation1 = Operation.PLUS;\nOperation operation2 = Operation.MINUS;\nSystem.out.printf(\"El atributo de PLUS es una cadena con el valor %s\\n\", operation1.getSymbol());\nSystem.out.printf(\"El atributo de MINUS es una cadena con el valor %s\\n\", operation2.getSymbol());\n}\npublic static void main(String[] args) {\nnew EnumAttributes().show();\n}\n}\n</code></pre> <pre><code>El atributo de PLUS es una cadena con el valor +\nEl atributo de MINUS es una cadena con el valor -\n</code></pre>"},{"location":"bloque_ii/tema_8/page-3/#metodos","title":"M\u00e9todos","text":"<p>Una  enumeraci\u00f3n  no  puede  heredar  de  otra  clase  ni  puede  actuar  como  superclase  de  otra clase, pero por defecto, hereda de la clase <code>java.lang.Enum&lt;E&gt;</code> y por tanto tiene una serie de m\u00e9todos heredados, como por ejemplo los m\u00e9todos <code>toString()</code> y <code>ordinal()</code>.</p> <p>Adem\u00e1s, todas las enumeraciones tienen autom\u00e1ticamente dos m\u00e9todos est\u00e1ticos predefinidos: <code>values()</code> y <code>valueOf(String str)</code>.</p>"},{"location":"bloque_ii/tema_8/page-3/#metodo-tostring","title":"M\u00e9todo toString","text":"<p>Las clases enum proporcionan de serie implementaciones de alta calidad de todos los m\u00e9todos de  la  clase <code>Object</code> (la  clase  <code>Enum</code> hereda de <code>Object</code>), como el m\u00e9todo <code>public  String toString()</code>, que retornar\u00e1 el nombre de la constante asociada a la instancia correspondiente. Por ejemplo <code>Apple.FUJI.toString()</code> retorna la cadena <code>FUJI</code>, aunque si no estamos contentos con  dicha  implementaci\u00f3n,  podemos  sobrescribir  nosotros  dicho  m\u00e9todo.  Adem\u00e1s,  las  clases enum implementan de serie las interfaces  <code>Comparable</code> y <code>Serializable</code> .</p> <pre><code>public class EnumToString {\nprivate void show() {\nOperation operation1 = Operation.PLUS;\nOperation operation2 = Operation.MINUS;\nString operation1ToString = operation1.toString();\nString operation2ToString = operation2.toString();\nSystem.out.println(operation1ToString);\nSystem.out.println(operation2ToString);\nSystem.out.println(Operation.DIVIDE);\n}\npublic static void main(String[] args) {\nnew EnumToString().show();\n}\n}\n</code></pre> <p>El m\u00e9todo <code>name()</code> tambi\u00e9n devuelve el nombre del enum.</p>"},{"location":"bloque_ii/tema_8/page-3/#metodo-valueof","title":"M\u00e9todo valueOf","text":"<p><code>public  static  E  valueOf(String  name)</code>   es  un  m\u00e9todo  declarado  impl\u00edcitamente  que devuelve la instancia del enum que posee asociado el nombre de constante recibida.</p> <pre><code>public class EnumValueOf {\nprivate void show() {\nOperation operation = Operation.valueOf(\"PLUS\"); // Se le asigna a operation la instancia correspondiente a PLUS\nSystem.out.printf(\"La variable operation es de tipo enum %s y su s\u00edmbolo es %s\", operation,\noperation.getSymbol());\n}\npublic static void main(String[] args) {\nnew EnumValueOf().show();\n}\n}\n</code></pre> <p>\u00a1CUIDADo!</p> <p>Si el argumento cadena que recibe el m\u00e9todo valueOf no corresponde a ninguna constante de enumeraci\u00f3n, el m\u00e9todo lanza la excepci\u00f3n <code>IllegalArgumentException</code>.</p> <p><pre><code>Operation operation = Operation.valueOf(\"PLUS1\"); //ERROR\n</code></pre> Ten en cuenta que la cadena que corresponda a la enumeraci\u00f3n ha de ser escrita tal y como est\u00e1 escrita en el enum, sino no la reconoce y lanzar\u00e1 la excepci\u00f3n</p> <pre><code>Operation operation = Operation.valueOf(\"plus\"); // ERROR\n</code></pre>"},{"location":"bloque_ii/tema_8/page-3/#metodo-values","title":"M\u00e9todo values","text":"<p><code>public static E[] values()</code> es un m\u00e9todo declarado impl\u00edcitamente que devuelve un array con todas las instancias de la clase enum en el orden en que fueron declarados.</p> <pre><code>public class EnumValues {\nprivate void show() {\nfor (Operation operation : Operation.values()) {\nSystem.out.println(operation);\n}\n}\npublic static void main(String[] args) {\nnew EnumValues().show();\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_8/page-3/#metodo-ordinal","title":"M\u00e9todo ordinal","text":"<p>Una  enumeraci\u00f3n  hereda  de  la  clase <code>java.lang.Enum&lt;E&gt;</code> y por  tanto  tiene  una  serie  de m\u00e9todos heredados, como por ejemplo <code>ordinal()</code>.</p> <p><code>public final int ordinal()</code> devuelve un entero que indica la posici\u00f3n de la constante dentro de la enumeraci\u00f3n. La primera constante tiene el valor 0.</p> <pre><code>public class EnumOrdinal {\nprivate void show() {\nfor (Operation operation : Operation.values()) {\nSystem.out.println(operation.ordinal());\n}\n}\npublic static void main(String[] args) {\nnew EnumOrdinal().show();\n}\n}\n</code></pre> <p>El problema de usar el m\u00e9todo <code>ordinal()</code> es que el funcionamiento del c\u00f3digo cliente depende completamente del orden en el que se definen las constantes en el enum, lo que puede resultar problem\u00e1tico  para  el  mantenimiento  del  c\u00f3digo  si  en  un  futuro  se  cambia  dicho  orden.  En realidad,  este  m\u00e9todo  est\u00e1  dise\u00f1ado  para  ser  utilizado  por  estructuras  de  datos  sofisticadas basadas en enumeraciones como <code>EnumSet</code> y <code>EnumMap</code>. (Se explican en el Tema 11. Colecciones).</p> <p>Por  lo  tanto  se  recomienda  no  hacer  uso  del  m\u00e9todo <code>ordinal()</code>, sino  definir  un  atributo  y asignar un valor para dicho atributo en cada instancia:</p> ENUMMain <pre><code>public enum Operation {\nPLUS(\"+\", 1), MINUS(\"-\", 2), TIMES(\"*\", 3), DIVIDE(\"/\", 4);\nprivate final String symbol;\nprivate final int optionNumber;\nOperation(String symbol, int optionNumber){\nthis.symbol = symbol;\nthis.optionNumber = optionNumber;\n}\npublic String getSymbol() {\nreturn symbol;\n}\npublic int getOptionNumber() {\nreturn optionNumber;\n}\n}\n</code></pre> <pre><code>public class EnumAttributeInsteadOfOrdinal {\nprivate void show() {\nfor (Operation operation : Operation.values()) {\nSystem.out.println(operation.getOptionNumber());\n}\n}\npublic static void main(String[] args) {\nnew EnumAttributeInsteadOfOrdinal().show();\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_8/page-3/#metodos-abstractos","title":"M\u00e9todos abstractos","text":"<p>En algunas ocasiones es necesario asociar un comportamiento ligeramente diferente en cada instancia del enum. En estos casos, debemos declarar un m\u00e9todo abstracto en el enum e incluir la implementaci\u00f3n concreta de dicho m\u00e9todo abstracto en la definici\u00f3n de cada instancia. Estas implementaciones reciben el nombre de constant-specific methods. Por ejemplo:</p> EnumMainSalida <pre><code>public enum Operation {\nPLUS(\"+\"){\n@Override\npublic double apply(double x, double y) {\nreturn x + y;\n}\n}, MINUS(\"-\") {\n@Override\npublic double apply(double x, double y) {\nreturn x - y;\n}\n}, TIMES(\"*\") {\n@Override\npublic double apply(double x, double y) {\nreturn x * y;\n}\n}, DIVIDE(\"/\") {\n@Override\npublic double apply(double x, double y) {\nreturn x / y;\n}\n};\nprivate final String symbol;\nOperation(String symbol){\nthis.symbol = symbol;\n}\npublic String getSymbol() {\nreturn symbol;\n}\npublic abstract double apply(double x, double y);\n}\n</code></pre> <pre><code>public class EnumAbstractMethods {\nprivate void show() {\nfor (Operation operation :\nOperation.values()) {\nSystem.out.printf(\"%-8s %.2f %s %.2f = %.2f\\n\", operation + \":\", 5f, operation.getSymbol(), 5f,\noperation.apply(5, 3));\n}\n}\npublic static void main(String[] args) {\nnew EnumAbstractMethods().show();\n}\n}\n</code></pre> <pre><code>PLUS:     5,00 + 3,00 = 8,00\nMINUS:    5,00 - 3,00 = 2,00\nTIMES:    5,00 * 3,00 = 15,00\nDIVIDE:   5,00 / 3,00 = 1,67\n</code></pre>"},{"location":"bloque_ii/tema_8/page-3/#implementacion-de-interfaces","title":"Implementaci\u00f3n de interfaces","text":"<p>Como  ya  hemos  comentado,  un  enum  no  puede  heredar  de  otro  enum.  Pero  hay  ocasiones donde  tiene  sentido  que  otros  programadores  puedan  \"extender\"  un  enum  que  hayamos proporcionado en nuestra API. Por ejemplo cuando el enum corresponda a c\u00f3digos de operaci\u00f3n sobre una determinada m\u00e1quina, como por ejemplo el enum  Operation , ser\u00eda recomendable que  quien  use  nuestra  API  puede  \"a\u00f1adir\"  nuevas  operaciones.  Para  estos  casos  podemos simular la herencia entre enums definiendo una interfaz con el m\u00e9todo de la operaci\u00f3n y hacer 1ue nuestro enum implemente dicha interfaz. Por ejemplo</p> InterfazBasicOperationExtendOperationMainSalida <pre><code>public interface Operation {\ndouble apply(double x, double y);\nString getSymbol();\n}\n</code></pre> <pre><code>public enum BasicOperation implements Operation {\nPLUS(\"+\"){\n@Override\npublic double apply(double x, double y) {\nreturn x + y;\n}\n}, MINUS(\"-\") {\n@Override\npublic double apply(double x, double y) {\nreturn x - y;\n}\n}, TIMES(\"*\") {\n@Override\npublic double apply(double x, double y) {\nreturn x * y;\n}\n}, DIVIDE(\"/\") {\n@Override\npublic double apply(double x, double y) {\nreturn x / y;\n}\n};\nprivate final String symbol;\nBasicOperation(String symbol){\nthis.symbol = symbol;\n}\n@Override\npublic String getSymbol() {\nreturn symbol;\n}\n}\n</code></pre> <p><pre><code>public enum ExtendedOperation implements Operation{\nEXP(\"^\"){\n@Override\npublic double apply(double x, double y) {\nreturn Math.pow(x, y);\n}\n},\nREMAINDER(\"%\"){\n@Override\npublic double apply(double x, double y) {\nreturn x % y;\n}\n};\nprivate final String symbol;\nExtendedOperation(String symbol) {\nthis.symbol = symbol;\n}\n@Override\npublic String getSymbol() {\nreturn symbol;\n}\n}\n</code></pre> De esta manera, el c\u00f3digo cliente que quiera trabajar con una operaci\u00f3n, tendr\u00e1 que definir la variable correspondiente de tipo interfaz:</p> <p><pre><code>Operation operation = ExtendedOperation.EXT;\n</code></pre> El problema principal de est\u00e1 t\u00e9cnica es que dado de que no se trata de herencia real, no podemos reutilizar c\u00f3digo entre los enums.</p> <pre><code>public class InterfacesImplementation {\nprivate void show() {\nfor (Operation operation : BasicOperation.values()) {\nshow(operation);\n}\nfor (Operation operation : ExtendedOperation.values()) {\nshow(operation);\n}\n}\npublic void show(Operation operation){\nSystem.out.printf(\"%-8s %.2f %s %.2f = %.2f\\n\", operation + \":\", 5f, operation.getSymbol(), 5f,\noperation.apply(5, 3));\n}\npublic static void main(String[] args) {\nnew InterfacesImplementation().show();\n}\n}\n</code></pre> <pre><code>PLUS:       5,00 + 3,00 = 8,00\nMINUS:      5,00 - 3,00 = 2,00\nTIMES:      5,00 * 3,00 = 15,00\nDIVIDE:     5,00 / 3,00 = 1,67\nEXP:        5,00 ^ 3,00 = 125,00\nREMAINDER:  5,00 % 3,00 = 2,00\n</code></pre>"},{"location":"bloque_ii/tema_8/page-4/","title":"Ejercicios","text":"Ejercicio 1 <p>Crea una aplicaci\u00f3n Java que controle los tipos de manera existentes (Roble, Caoba, Nogal, Cerezo, Boj, Otro). Solic\u00edtale al usuario un tipo de manera existen. La aplicaci\u00f3n finalizar\u00e1 cuando el usuario elija una tipo de madera correcto.</p> Ejercicio 2 <p>Se desea controlar los tipos de lenguaje de programaci\u00f3n que se cursa en el IES BellaVista (Java, C#, Python, Javascript, Typescript, C++). Crea un enum que contenga dichos lenguajes de la forma correcta y crea un main que recorra todos los valores del enum, teniendo en cuenta que a la hora de mostrarlo por pantalla la salida deber\u00e1 ser as\u00ed: <code>Lenguaje de programaci\u00f3n Java</code>.</p> Ejercicio 3 <p>En una empresa existen 3 tipos de empleados: Ingeniero, encargado y vendedor, cuyos salarios bases son 50000, 40000 y 30000, respectivamente. Teniendo en cuenta que se le puede aplicar un aumento de sueldo en base a las prestaciones ofrecidas (como por ejemplo, las horas extras, cantidad de venta realizada, etc.) o incluso un descuento si no cumple ciertas condiciones, crea un enum con los tipos de empleados y un main para probar dichas operaciones.</p> Ejercicio 4 <p>En un bar se vende cerveza en diferentes tipos de vasos, siendo su capacidad, altura y precio diferente:</p> Vaso Capacidad Altura Jarra 500 20,7 Tubo 250 16,7 Tercio 333 12,3 Ca\u00f1a 200 8,5 <p>El precio var\u00eda seg\u00fan el tipo de vaso, teniendo en cuenta que se a\u00f1adir\u00e1 0,10 c\u00e9ntimos por cada 100 ml de capacidad y un 1 euro por cada 10 cm de altura, m\u00e1s una cantidad de impuestos que se deber\u00e1 indicar.</p> <p>Haciendo uso de un m\u00e9todo abstracto crea un enum con los tipos de vasos y luego un main para probarlo.</p> Ejercicio 5 <p>Realiza el mismo ejercicio anterior pero haciendo uso de una interfaz.</p>"},{"location":"bloque_ii/tema_9/page-1/","title":"1 Introducci\u00f3n a las Fechas Java8","text":""},{"location":"bloque_ii/tema_9/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>A partir de Java 8, Java incorpora una nueva API para el manejo de fechas, pero hasta entonces el manejo de fechas era muy diferente.</p> <p>Hoy en d\u00eda la mayor\u00eda de aplicaciones Java usan est\u00e1 nueva API, pero a\u00fan hay aplicaciones que usan las versiones antiguas.</p> <p>Las tres clases principales para el manejo de fechas en Java anterior a la 8 son:</p> <ul> <li><code>Date</code>: Almacena la fecha.</li> <li><code>DateFormat</code> y <code>SimpleDateFormat</code>: Aplica formatos a las fechas.</li> <li><code>Calendar</code>: Realizar c\u00e1lculos sobre fechas.</li> </ul> <p>Una de las desventajas que tiene est\u00e1 API es que no trabaja con la internacionalizaci\u00f3n.</p>"},{"location":"bloque_ii/tema_9/page-1/#la-clase-date","title":"La clase Date","text":"<p>La clase <code>Date</code> representa un tiempo espec\u00edfico con la precisi\u00f3n de los milisegundos.</p> <p>Los constructores de esta clase son:</p> <ul> <li><code>Date()</code>: Crea un objeto Date con la fecha y hora actuales.</li> <li><code>Date(int year, int month, int date)</code>: Crea un objeto Date con los datos del a\u00f1o, del mes (comienza en 0 y acaban en 11) y con el d\u00eda.</li> </ul> <p>Estos m\u00e9todos tambi\u00e9n tienen una versi\u00f3n para recibir la hora y los minutos y la hora, los minutos y los segundos.</p> <p>Otra versi\u00f3n del m\u00e9todo es <code>Date(long date)</code> que crea un objeto de tipo Date a partir de los milisegundos especificados desde el tiempo base est\u00e1ndar conocido como epoch, es decir, desde el 1 de Enero de 1970, OO:OO:OO GTM.</p> <p>\u00a1CUIDADA!</p> <p>Todos estos constructores est\u00e1n deprecated y la mayor\u00eda de m\u00e9todos como por ejemplo <code>getYear()</code>, <code>getMonth()</code>, etc. tambi\u00e9n est\u00e1n deprecated.</p> <p>Algunos m\u00e9todos c\u00f3mo after(Date when) o before(Date when) no est\u00e1n deprecated. Estos m\u00e9todos sirven para comprobar si una fecha sucede despu\u00e9s o antes que otra, respectivamente.</p>"},{"location":"bloque_ii/tema_9/page-1/#dateformat-y-simpledateformat","title":"DateFormat y SimpleDateFormat","text":"<p><code>DateFormat</code> es una clase abstracta hecha para subclases de formateo de fecha/tiempo.</p> <p><code>SimpleDateFormat</code> es una clase concreta para formatear y parsear fechas de manera sensible a la configuraci\u00f3n regional.</p> <p>El formato de fecha y hora se especifican con cadenas de patr\u00f3n de fechas y horas:</p> <p>|Letra    |Componente de fecha u hora|Presentaci\u00f3n    |Ejemplo    | |:-------:|:-----------M-------------:|:-------------:|:---------:| |G        |Designador de era         |Texto           |AD         | |y        |A\u00f1o                       |A\u00f1o             |1996;96    | |M        |Mes del a\u00f1o               |Mes             |July;Jul;07| |d        |D\u00eda del mes               |N\u00famero          |9;09       | |H        |Hora del d\u00eda(0-23)        |N\u00famero          |23         | |m        |Minutos en una hora       |N\u00famero          |10         | |s        |Segundo en un minuto      |N\u00famero          |2;02       |</p> <p>Info</p> <p>Para comprobar el resto de patrones puedes ir a la API y observar la tabla: https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/text/SimpleDateFormat.html</p> <p>Con el m\u00e9todo <code>format(Date date)</code>, formateamos la fecha indicada con el patr\u00f3n indicado:</p> <pre><code>Date date = new Date(2022, 10, 10, 7, 2 ,5);\nDateFormat format = new SimpleDateFormat(\"dd/M/yy\");\nSystem.out.println(format.format(date)); // 10/11/22\n</code></pre> <p>Con el m\u00e9todo <code>parse(String str)</code> se parsea una cadena a la clase Date siempre y cuando cumpla el formato, por el contrario, lanzar\u00e1 una excepci\u00f3n <code>ParseException</code>:</p> <pre><code>Date newDate = format.parse(\"12/10/22\");\n</code></pre>"},{"location":"bloque_ii/tema_9/page-1/#calendar","title":"Calendar","text":"<p>Una vez creada una fecha , esta simplemente almacena la informaci\u00f3n . Si queremos realizar operaciones sobre ella lo que tenemos que construir es un <code>Calendar</code>. Una vez construido el calendario le asignamos nuestra fecha con el m\u00e9todo <code>setTime(Date date)</code></p> <p>Calendar es una clase abstracta que permite trabajar con fechas en un tipo de calendario. Existe diferentes tipos de subclases que funcionan como calendarios, como por ejemplo, <code>GregorianCalendar()</code> que permite crear un calendario gregoriano.</p> <pre><code>Calendar calendario = new GregorianCalendar();\ncalendario.setTime(date);\n</code></pre> <p>Para obtener el calendario de la zona actual y de la fecha actual se puede usar el m\u00e9todo est\u00e1tico <code>getInstance()</code>:</p> <pre><code>Calendar calendario = Calendar.getInstance();    </code></pre> <p>La clase Calendar tiene varios atributos est\u00e1ticos para indicar meses, <code>Calendar.FEBRUARY</code>, d\u00edas de la semana, <code>Calendar.MONDAY</code>, momentos del a\u00f1o, <code>Calendar.DAY_OF_MONTH</code>, <code>Calendar.HOUR</code>, etc.</p> <p>Una vez establecido el calendario, se puede hacer diferentes operaciones sobre \u00e9l:</p> <ul> <li><code>add(int field, int amount)</code>, siendo el primer par\u00e1metro el atributo est\u00e1tico para indicar que es lo que vamos a\u00f1adir, y el segundo par\u00e1metro la cantidad a a\u00f1adir.</li> <li><code>after(Object object)</code>, comprueba si el calendario representa un momento posterior a la hora indicada en el objeto especificado.</li> <li><code>before(Object objet)</code>, comprueba si el calendario representa un momento anterior a la hora indicada en el objeto especificado.</li> </ul> <pre><code>Date date = new Date(2022, 10, 12); // 12/11/22\nCalendar calendar = Calendar.getInstance(); // Se obtiene el calendario actual\ncalendar.setTime(date); // se le indica la fecha\ncalendar.add(Calendar.MONTH, 5); // A\u00f1adimos cinco meses 12/04/23\n</code></pre>"},{"location":"bloque_ii/tema_9/page-1/#nueva-api-de-java","title":"Nueva API de Java","text":"<p>A partir de Java 8, se creo una nueva API en Java para el manejo de fechas, con muchas ventajas sobre la API anterior, siendo una de ellas la internacionalizaci\u00f3n.</p>"},{"location":"bloque_ii/tema_9/page-2/","title":"2 Fechas en Java 8","text":""},{"location":"bloque_ii/tema_9/page-2/#introduccion","title":"Introducci\u00f3n","text":"<p>Java 8 introduce una nueva API para fechas y horas que es thread-safe, m\u00e1s f\u00e1cil de leer y m\u00e1s amplia que la API anterior.</p> <p>Esta API se introduce para cubrir los siguientes inconvenientes de la vieja API de fecha y hora:</p> <ol> <li><code>java.util.Date</code> no es thread-safe por lo que los desarrolladores tienen que hacer frente a problemas de concurrencia durante el uso de la fecha. La nueva API de fecha y hora es inmutable y no tiene m\u00e9todos setter. Al ser inmutables, no necesitan ser clonadas.</li> <li>Dificultad para manejar zona-horaria.</li> </ol> <p>En java 8 se crea un nuevo paquete para el manejo de fechas, se trata del paquete <code>java.time</code>. Este paquete es una extensi\u00f3n a las clases <code>java.util.Date</code> y <code>java.util.Calendar</code> que vemos un poco limitado para manejo de fechas, horas y localizaci\u00f3n.</p> <p>Las clases definidas en este paquete representan los principales conceptos de fecha - hora, incluyendo instantes, fechas, horas, per\u00edodos, zonas de tiempo, etc. Est\u00e1n basados en el sistema de calendario ISO, el cual es el calendario mundial de-facto que sigue las reglas del calendario Gregoriano.</p>"},{"location":"bloque_ii/tema_9/page-2/#enumerado-de-dia-de-la-semana","title":"Enumerado de d\u00eda de la semana","text":"<p>Existe un enum donde se definen todos los d\u00edas de la semana. Este enum se llama <code>java.time.DayOfWeek</code> y contiene algunos m\u00e9todos interesantes que permiten manipular d\u00edas hacia adelante, <code>plus(int amount)</code> y hacia atr\u00e1s, <code>minus(int amount)</code>:</p> <pre><code>DayOfWeek dia = DayOfWeek.MONDAY;\nSystem.out.printf(\"8 d\u00edas ser\u00e1: %s%n\",dia.plus(8));\nSystem.out.printf(\"2 d\u00edas antes fue: %s%n\",dia.minus(2));\n</code></pre> <p>Adem\u00e1s, con el m\u00e9todo <code>getDisplayName()</code> se puede acceder al texto que corresponde a la fecha. Este m\u00e9todo recibe dos par\u00e1metros:</p> <ul> <li>TextStyle: Es una enum del paquete <code>java.time.format</code> que define diferentes formas de formatear una fecha:<ul> <li><code>TextStyle.FULL</code>, la descripci\u00f3n completa, por ejemplo Monday.</li> <li><code>TextStyle.NARROW</code>, la letra que representa ese d\u00eda, M.</li> <li><code>TextStyle.SHORT</code>, la abreviaci\u00f3n del d\u00eda, Mon.</li> </ul> </li> <li> <p>Locale: Es una clase que trabaja con la localizaci\u00f3n, de est\u00e1 forma ponemos obtener Monday si estamos en UK, o Lunes si estamos en Espa\u00f1a. Para crear una instancia del objeto <code>Locale</code>, se puede hacer de dos formas:</p> <ul> <li>Usando los atributos est\u00e1ticos que representas los m\u00e1s utilizados, por ejemplo: <code>Locale.ENGLISH</code>.</li> <li>Usando el m\u00e9todo est\u00e1tico <code>of()</code>, que recibe el c\u00f3digo de lenguaje, por ejemplo, si es para espa\u00f1ol. Dicho constructor esta sobrecargado para recibir el c\u00f3digo del pa\u00eds, ES para Espa\u00f1a. Tambi\u00e9n tiene una tercera versi\u00f3n que adem\u00e1s de recibir los dos par\u00e1metros indicados antes, recibe el c\u00f3digo de la variante, por ejemplo ca, para el Catal\u00e1n.</li> </ul> <pre><code>Locale locale = Locale.of(\"es\",\"ES\", \"ca\");\n</code></pre> <p>Java 19</p> <p>En versiones anterior a Java 19, el m\u00e9todo est\u00e1tico <code>of()</code>, no exist\u00eda. En su lugar se usan los constructores (que tienen la misma firma que este m\u00e9todo), que est\u00e1n deprecated en esta versi\u00f3n.</p> </li> </ul> <p>Veamos un ejemplo de como mostrar todos los d\u00edas de la semana en espa\u00f1ol:</p> MainSALIDA <pre><code>public class EnumDays {\npublic void show(){\nLocale locale = Locale.of(\"es\", \"ES\");\nfor (DayOfWeek day : DayOfWeek.values()) {\nSystem.out.printf(\"D\u00eda completo: %s\\n\", day.getDisplayName(TextStyle.FULL, locale));\nSystem.out.printf(\"Letra del d\u00eda: %s\\n\", day.getDisplayName(TextStyle.NARROW, locale));\nSystem.out.printf(\"D\u00eda abreviado: %s\\n\", day.getDisplayName(TextStyle.SHORT, locale));\n}\n}\npublic static void main(String[] args) {\nnew EnumDays().show();\n}\n}\n</code></pre> <pre><code>D\u00eda completo: lunes\nLetra del d\u00eda: L\nD\u00eda abreviado: lun\nD\u00eda completo: martes\nLetra del d\u00eda: M\nD\u00eda abreviado: mar\nD\u00eda completo: mi\u00e9rcoles\nLetra del d\u00eda: X\nD\u00eda abreviado: mi\u00e9\nD\u00eda completo: jueves\nLetra del d\u00eda: J\nD\u00eda abreviado: jue\nD\u00eda completo: viernes\nLetra del d\u00eda: V\nD\u00eda abreviado: vie\nD\u00eda completo: s\u00e1bado\nLetra del d\u00eda: S\nD\u00eda abreviado: s\u00e1b\nD\u00eda completo: domingo\nLetra del d\u00eda: D\nD\u00eda abreviado: dom\n</code></pre>"},{"location":"bloque_ii/tema_9/page-2/#enumerado-de-mes-del-ano","title":"Enumerado de mes del a\u00f1o","text":"<p>En est\u00e1 API, tambi\u00e9n se a\u00f1adi\u00f3 el enum <code>java.time.Month</code> que representa los meses del a\u00f1o. Tiene los mismos m\u00e9todos que los d\u00edas de la semana:</p> <pre><code>public class EnumMonths {\npublic void show(){\nLocale locale = Locale.of(\"es\", \"ES\");\nfor (Month day : Month.values()) {\nSystem.out.printf(\"Mes completo: %s\\n\", day.getDisplayName(TextStyle.FULL, locale));\nSystem.out.printf(\"Letra del mes: %s\\n\", day.getDisplayName(TextStyle.NARROW, locale));\nSystem.out.printf(\"Mes abreviado: %s\\n\", day.getDisplayName(TextStyle.SHORT, locale));\n}\n}\npublic static void main(String[] args) {\nnew EnumMonths().show();\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_9/page-3/","title":"3 Fechas","text":""},{"location":"bloque_ii/tema_9/page-3/#introduccion","title":"Introducci\u00f3n","text":"<p>Para poder trabajar con fechas, en Java se usa la clase <code>LocalDate</code>, la cu\u00e1l solo maneja la fecha (no la hora), a diferencia de la clase <code>Date</code> del paquete <code>java.util</code>.</p> <p>Para poder crear una instancia de dicha clase, esta API nos proporciona los siguientes m\u00e9todos est\u00e1ticos:</p> <ul> <li><code>now()</code>: Obtiene la fecha actual.</li> <li><code>of()</code>: Recibe tres par\u00e1metros, el a\u00f1o, el mes (1 al 12) y el d\u00eda, respectivamente de tipo entero. Existe una versi\u00f3n sobrecargada, que en lugar de recibir el mes como un entero lo recibe como tipo enum Month. Si alg\u00fan dato no es correcto, por ejemplo, se espec\u00edfica un mes err\u00f3neo, o un d\u00eda del mes incorrecto, se lanzar\u00e1 la excepci\u00f3n <code>DateTimeException</code>.</li> <li><code>ofEpochDay()</code>: Recibe un par\u00e1metro de tipo long y crea una fecha a partir de milisegundos, partiendo desde el 01 de Enero de 1970.</li> <li><code>ofYearDay()</code>: Recibe dos par\u00e1metros, el a\u00f1o y el d\u00eda del a\u00f1o de tipo entero. Crear\u00e1 la fecha a partir de ambos datos.</li> </ul> <pre><code>LocalDate today = LocalDate.now();\nLocalDate date1 = LocalDate.of(2022, 5, 24); // 24 de Mayo de 2022\nLocalDate date2 = LocalDate.of(2022, Month.MAY; 24);\nLocalDate date3 = LocalDate.of(2022, 2, 30); // DateTimeException\nLocalDate date4 = LocalDate.ofEpochDay(19527); // 2023-06-19\nLocalDate date5 = LocalDate.ofYearDay(2023, 115); // 2023-04-25\n</code></pre> <p>Algunos m\u00e9todos importantes para trabajar con fechas:</p> <ul> <li><code>getDayOfMonth()</code>. Devuelve el d\u00eda del mes de la fecha indicada.</li> <li><code>getDayOfWeek()</code>. Devuelve una instancia del enum <code>DayOfWeek</code> con el d\u00eda de la semana.</li> <li><code>getDayOfYear()</code>. Devuelve el d\u00eda del a\u00f1o.</li> <li><code>getMonth()</code>. Devuelve una instancia del enum <code>Month</code> con el mes al cual pertenece la fecha.</li> <li><code>getMontValue()</code>. Devuelve un n\u00famero entero (1-12) representativo del mes.</li> <li><code>getYear()</code>. Devuelve el a\u00f1o de una fecha.</li> <li><code>isLeapYear()</code>. Comprueba si la instancia fecha es un a\u00f1o bisiesto.</li> <li><code>lengthOfMonth()</code>. Devuelve el n\u00famero de d\u00edas que tiene el mes.</li> <li><code>lengthOfYear()</code>. Devuelve el n\u00famero de d\u00edas que tiene el a\u00f1o.</li> </ul> <p>Adem\u00e1s de estos m\u00e9todos, tambi\u00e9n posee m\u00e9todos para a\u00f1adir d\u00edas (<code>plusDays()</code>), meses (<code>plusMonths()</code>), semanas (<code>plusWeeks()</code>) y a\u00f1os (<code>plusYears()</code>), y los mismos para restar(<code>minusDays()</code>, <code>minusMOnths()</code>, <code>minusWeeks()</code>, <code>minusYears()</code>, <code>minusDays()</code>)</p> <p>Veamos un ejemplo:</p> <pre><code>public class LocalDateExample {\npublic void show(){\nLocalDate date = LocalDate.now();\ninfoDate(date);\nLocalDate datePlusTenDays = date.plusDays(10);\ninfoDate(datePlusTenDays);\nLocalDate datePlusTwoMonths = date.plusMonths(2);\ninfoDate(datePlusTwoMonths);\nLocalDate dateMinusOneYear = date.minusYears(1);\ninfoDate(dateMinusOneYear);\n}\nprivate void infoDate(LocalDate date) {\nSystem.out.printf(\"La fecha es: %s\\n- D\u00eda de la semana: %s\\n- Mes: %s\\n- A\u00f1o: %d\\n- \u00bfEs a\u00f1o bisiesto?: %s\\n\",\ndate, date.getDayOfWeek(), date.getMonth(), date.getYear(), date.isLeapYear() ? \"S\u00ed\" : \"No\");\n}\npublic static void main(String[] args) {\nnew LocalDateExample().show();\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_9/page-3/#yearmonth","title":"YearMonth","text":"<p>Es una clase que representa el mes especifico de un a\u00f1o. Se puede instanciar haciendo uso de los m\u00e9todos est\u00e1ticos <code>now()</code> y <code>of(year, month)</code>, siendo month un entero o un tipo enum <code>Month</code>.</p> <p>Con el m\u00e9todo <code>lengthOfMonth()</code> obtenemos el n\u00famero de d\u00edas que tiene ese mes en ese a\u00f1o.</p> <pre><code>YearMonth year = YearMonth.of(2022, 12); System.out.println(year.lengthOfMonth()); // 31\n</code></pre> <p>Tiene m\u00e9todos parecidos a los vistos en el punto anterior, para a\u00f1adir y restar meses y a\u00f1os y para saber si el a\u00f1o es bisiesto. Adem\u00e1s tiene lo siguientes m\u00e9todos:</p> <ul> <li><code>isAfter(YearMonth other)</code>: Comprueba si la fecha instanciada es posterior a other.</li> <li><code>isBefore(YearMonth other)</code>: Comprueba si la fecha instanciada es anterior a other.</li> <li><code>isValidDay(int day)</code>: Comprueba si el d\u00eda especificado es un d\u00eda v\u00e1lido dentro de ese mes y a\u00f1o. Por ejemplo, el d\u00eda 29 s\u00ed ser\u00eda un d\u00eda v\u00e1lido para el mes Marzo del 2023 pero no ser\u00eda v\u00e1lido para el 29 de Febrero de 2023.</li> <li><code>withMoth()</code>. Devuelve una copia del a\u00f1o y del mes, pero con el mes alterado.</li> <li><code>withYear()</code>. Devuelve una copia del a\u00f1o y del mes, pero con el a\u00f1o alterado.</li> <li><code>atDay(int day)</code>. Devuelve un objeto de tipo <code>LocalDate</code> con el d\u00eda especificado, pudiendo lanzar un <code>DateTimeException</code> si el d\u00eda no es v\u00e1lido para ese mes y ese a\u00f1o.</li> <li><code>atEndOfMonth</code>: Devuelve un objeto de tipo <code>LocalDate</code>con el d\u00eda en el final del mes.</li> </ul> <p>Veamos un ejemplo haciendo uso de estos m\u00e9todos:</p> <pre><code>public class YearMonthExample {\npublic void show(){\nYearMonth ym1 = YearMonth.now();\nYearMonth ym2 = YearMonth.of(2023, 5);\nYearMonth ym3 = ym1.withMonth(10);\nSystem.out.println(ym1.isAfter(ym2));\nSystem.out.println(ym1.isValidDay(31));\nSystem.out.println(ym3.atDay(10));\nSystem.out.println(ym3.atEndOfMonth());\n}\npublic static void main(String[] args) {\nnew YearMonthExample().show();\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_9/page-3/#monthday","title":"MonthDay","text":"<p>La clase <code>MonthDay</code> representa un d\u00eda de un mes en particular. Para construir una objeto de dicha clase tenemos los siguientes m\u00e9todos est\u00e1ticos:</p> <ul> <li><code>of(int month, int day)</code>: Recibe el mes y el d\u00eda del mes de los cuales se quiere construir el objeto. Tiene un versi\u00f3n sobrecargada, que en vez de recibir el mes en formato entero lo recibe como un enum Month.</li> <li><code>now()</code>: Crea una instancia de la clase con el mes y el d\u00eda actual.</li> </ul> <p>La mayor\u00eda de m\u00e9todos son parecidos a los vistos anteriormente, pero adem\u00e1s a\u00f1ade:</p> <ul> <li><code>isValidYear()</code>. Comprueba si ese d\u00eda en ese mes concreto es v\u00e1lido para cierto a\u00f1o. Por ejemplo, si pasamos como par\u00e1metro 2023, y validamos si es correcto el 29 de Febrero, retornar\u00eda false, como dicho d\u00eda en dicho mes y en dicho a\u00f1o, el mes de Febrero no tiene 29 d\u00edas.</li> <li><code>atYear()</code>: Crea una instancia de la clase <code>LocalDate</code> con el a\u00f1o indicado. Si la fecha no es v\u00e1lida, lanzar\u00e1 una excepci\u00f3n de tipo <code>DateTimeException</code>.</li> </ul> <p>Veamos un ejemplo:</p> <pre><code>public class MonthDayExample {\npublic void show(){\nMonthDay md1 = MonthDay.now();\nMonthDay md2 = md1.withDayOfMonth(20);\nSystem.out.println(md1.isBefore(md2));\nSystem.out.println(MonthDay.of(2, 29).isValidYear(2024));\nSystem.out.println(md1.atYear(2020));\n}\npublic static void main(String[] args) {\nnew MonthDayExample().show();\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_9/page-3/#year","title":"Year","text":"<p>La clase <code>Year</code> nos permite obtener informaci\u00f3n de un a\u00f1o especifico sin importar ni el d\u00eda ni el mes. Para construir un objeto de dicha clase se usa los siguientes m\u00e9todos est\u00e1ticos:</p> <ul> <li><code>now()</code>. Crea una instancia con el a\u00f1o actual.</li> <li><code>of(int year)</code>: Crea una instancia con el a\u00f1o indicado.</li> </ul> <p>Alguno de sus m\u00e9todos son:</p> <ul> <li><code>atDay(int dayOfYear)</code>: Devuelve un <code>LocalDate</code> con el d\u00eda y el mes obtenido del dayOfYear.</li> <li><code>atMonth(int month)</code>: Devuelve un <code>YearMonth</code> con el mes indicado. Tiene una versi\u00f3n sobrecargada que recibe una instancia del enum <code>Month</code>.</li> <li><code>athMonthDay(MonthDay monthDay)</code>: Devuelve un <code>LocalDate</code> con el d\u00eda y el mes indicados.</li> <li><code>getValue()</code>. Retorna el valor entero del a\u00f1o.</li> <li><code>isLeap()</code>. Comprueba si el a\u00f1o es bisiesto. Adem\u00e1s tiene una versi\u00f3n est\u00e1tica <code>isLeap(int year)</code> para comprobar si el a\u00f1o indicado es bisiesto sin necesidad de crear una instancia de la clase <code>Year</code>.</li> <li><code>length()</code>. Devuelve el n\u00famero de d\u00edas que tiene ese a\u00f1o.</li> </ul> <p>Adem\u00e1s tiene m\u00e9todos similares a las clases anteriores. Veamos un ejemplo:</p> <pre><code>public class YearExample {\npublic void show(){\nYear year1 = Year.now();\nYear year2 = Year.of(2023);\nSystem.out.println(year1.isAfter(year2));\nSystem.out.println(year1.atDay(123));\nSystem.out.println(year1.atMonth(Month.APRIL));\nSystem.out.println(\"A\u00f1o en entero: \" + year1.getValue());\nSystem.out.println(\"N\u00famero de d\u00edas: \" + year1.length());\nSystem.out.println(Year.isLeap(2024));\n}\npublic static void main(String[] args) {\nnew YearExample().show();\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_9/page-4/","title":"Horas","text":""},{"location":"bloque_ii/tema_9/page-4/#introduccion","title":"Introducci\u00f3n","text":"<p>En esta API, las horas se pueden manejar de forma independiente a la fecha, con la clase <code>LocalTime</code>. Tiene un funcionamiento bastante similar a la clase <code>LocalDate</code>.</p> <p>Una de las utilidades de esta clase es la capacidad de representar el tiempo de un d\u00eda, como por ejemplo, la hora de inicio de una pel\u00edcula, la hora de apertura de una biblioteca, etc. Hacen referencia a un d\u00eda cualquiera, sin indicar una fecha concreta.</p> <pre><code>public class LocalTimeExample {\npublic void show(){\nLocalTime time = LocalTime.now();\nSystem.out.println(time);\ntime = time.plusHours(10);\nSystem.out.println(time);\ntime = time.minusMinutes(20);\nSystem.out.println(time);\n}\npublic static void main(String[] args) {\nnew LocalTimeExample().show();\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_9/page-4/#localdatetime","title":"LocalDateTime","text":"<p>Por el contrario, si se desea manejar el tiempo de una fecha concreta, la API nos proporciona la clase <code>LocalDateTime</code>, que representa la fecha y la hora y es una combinaci\u00f3n de LocalDate y LocalTime.</p> <p>Tiene m\u00e9todos muy parecidos de las dos clases que combina y adem\u00e1s tiene m\u00e9todos est\u00e1ticos para construir una instancia de la clase:</p> <ul> <li><code>of(int year, int month, int day, int hour, int minute, int second)</code>. Crea una instancia de la clase con los datos proporcionados. Adem\u00e1s tiene una sobrecarga donde no recibe los segundos, otra sobrecarga donde tambi\u00e9n recibe los nano segundos, adem\u00e1s de las sobrecargas donde recibe un valor del enum <code>Month</code>.</li> <li><code>of(LocalDate date, LocalTime time)</code>. Crea una instancia de la clase combinando el date y el time indicados.</li> <li><code>now()</code>. Crea una instancia de la clase con la fecha y hora actual.</li> </ul> <p>Veamos un ejemplo con el uso de estos constructores y algunos de sus m\u00e9todos</p> <pre><code>public class LocalDateTimeExample {\nprivate void show() {\nLocalDate date = LocalDate.now();\nLocalTime time = LocalTime.now();\nLocalDateTime dateTime = LocalDateTime.of(date, time);\nSystem.out.println(dateTime.plusHours(10));\nSystem.out.println(dateTime.minusMonths(12));\nSystem.out.println(dateTime.toLocalDate());\n}\npublic static void main(String[] args) {\nnew LocalDateTimeExample().show();\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_9/page-5/","title":"Formateo de fechas","text":""},{"location":"bloque_ii/tema_9/page-5/#introduccion","title":"Introducci\u00f3n","text":"<p>La API de Java nos proporciona clase clase para formatear las fechas y las horas, <code>DateTimeFormatter</code>, al igual que su antecesora est\u00e1 compuesta de patrones de cadena que representas diferentes s\u00edmbolos relacionados con las fechas:</p> <ul> <li>y, nos permite acceder al a\u00f1o en formato de cuatro o dos d\u00edgitos (2014 o 14).</li> <li>D, nos permite obtener el n\u00famero de d\u00eda del a\u00f1o (225).</li> <li>d, al contrario del anterior nos devuelve el n\u00famero del d\u00eda del mes en cuesti\u00f3n (27).</li> <li>L, nos ayuda a obtener el mes del a\u00f1o en forma num\u00e9rica, M nos da el mes en texto.</li> <li>H, nos da la hora.</li> <li>s, nos da los segundos.</li> <li>m, nos permite obtener los minutos.</li> <li>a, nos da el am o pm de la hora.</li> <li>z, nos permite acceder al nombre de la zona horaria.</li> </ul> <p>Info</p> <p>Para ver m\u00e1s patrones puede visitar la API: https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/time/format/DateTimeFormatter.html</p> <p>Para construir una instancia de esta clase, existe un m\u00e9todo est\u00e1tico <code>ofPattern(str)</code> que recibe una cadena con los patronos indicados. Existe una versi\u00f3n sobrecargada que adem\u00e1s recibe un <code>Locale</code> para devolver la fecha formateado al idioma deseado.</p> <p>Si el m\u00e9todo recibe un patr\u00f3n err\u00f3neo lanzar\u00e1 la excepci\u00f3n <code>IllegalArgumentException</code></p> <pre><code>DateTimeFormatter format = DateTimeFormatter.ofPattern(\"dd/M/yyyy\", Locale.of(\"es\", \"ES\"));\n</code></pre>"},{"location":"bloque_ii/tema_9/page-5/#parsear-una-fecha-a-cadena","title":"Parsear una fecha a cadena","text":"<p>Las clases LocalDate, LocalTime, LocalDateTime, YearMonth, MonthDay, y el resto de clases referidas a las fechas tienen un m\u00e9todo <code>format()</code> que recibe un objeto de la clase <code>DateTimeFormatter</code> para formatear la fecha con dicho formato. Adem\u00e1s la clase <code>DateTimeFormatter</code> tiene el mismo m\u00e9todo, pero recibe un objeto fecha.</p> <p>Veamos un ejemplo:</p> <pre><code>public class DateToString {\npublic void show(){\nLocalDateTime date = LocalDateTime.now();\nDateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd/M/yy\");\nSystem.out.println(date.format(formatter));\n}\npublic static void main(String[] args) {\nnew DateToString().show();\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_9/page-5/#parsear-una-cadena-a-una-fecha","title":"Parsear una cadena a una fecha","text":"<p>Las clases de manejo de fecha, tienen un m\u00e9todo est\u00e1tico llamado <code>parse</code>, que recibe la fecha en formato cadena, y un formato (en caso de no recibirlo, tiene una versi\u00f3n sobrecargada donde obtiene el formato est\u00e1ndar) devolviendo as\u00ed un objeto de tipo fecha. En caso de que la cadena no cumpla con el patr\u00f3n se lanzar\u00e1 una excepci\u00f3n <code>DateTimeParseException</code></p> <pre><code>public class StringToDate {\npublic void show(){\nDateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd-LL-yyyy\");\nSystem.out.println(LocalDate.parse(\"20-03-2023\", formatter));\n}\npublic static void main(String[] args) {\nnew StringToDate().show();\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_9/page-6/","title":"Otras clase de manejo de fechas","text":""},{"location":"bloque_ii/tema_9/page-6/#introduccion","title":"Introducci\u00f3n","text":"<p>La API de Java, a parte de todas las clases ya vistas, contiene otras clases para el manejo de fechas y horas:</p> <ul> <li><code>Instant</code>: Esta clase modela un solo punto instant\u00e1neo en la l\u00ednea de tiempo. Esto podr\u00eda usarse para registrar marcas de tiempo de eventos en la aplicaci\u00f3n.</li> <li><code>Period</code>: Una cantidad de tiempo basada en fechas en el sistema de calendario ISO-8601, como '2 a\u00f1os, 3 meses y 4 d\u00edas'. Esta clase modela una cantidad o cantidad de tiempo en t\u00e9rminos de a\u00f1os, meses y d\u00edas.</li> <li><code>ZonedDateTime</code> es una representaci\u00f3n inmutable de una fecha y hora con una zona horaria. Esta clase almacena todos los campos de fecha y hora, con una precisi\u00f3n de nanosegundos, y una zona horaria, con un desplazamiento de zona utilizado para manejar fechas y horas locales ambiguas. Por ejemplo, el valor \"2 de octubre de 2007 a las 13:45.30.123456789 +02:00 en la zona horaria de Europa/Par\u00eds\" se puede almacenar en un archivo ZonedDateTime.</li> </ul>"},{"location":"bloque_ii/tema_9/page-6/#chronounit","title":"ChronoUnit","text":"<p>El enum <code>ChronoUnit</code> contiene unidades para fechas y horas, como por ejemplo, DAYS, MONTHS, WEEKS, YEARS, HOURS, MINUTES, SECONDS, etc. Representa una unidad de tiempo y tiene m\u00e9todo que nos permite manejar fechas como <code>between</code> que te devuelve la distancia entre dos fechas. Veamos un ejemplo:</p> <pre><code>public class ChronosUnitExample {\nprivate void show() {\nLocalDateTime today = LocalDateTime.now();\nLocalDateTime someDay = LocalDateTime.of(2022, 6, 6, 0, 0, 0);\nfor (ChronoUnit chronoUnit: ChronoUnit.values()) {\nSystem.out.printf(\"La diferencia entre %s y %s en %s: %d\\n\", today, someDay, chronoUnit,\nchronoUnit.between(today, someDay));\n}\n}\npublic static void main(String[] args) {\nnew ChronosUnitExample().show();\n}\n}\n</code></pre>"},{"location":"bloque_ii/tema_9/page-7/","title":"Ejercicios","text":"Ejercicio 1 <p>Escribir un m\u00e9todo que reciba una fecha y devuelva el d\u00eda de la semana que corresponde para esta fecha.</p> Ejercicio 2 <p>Realiza un m\u00e9todo que reciba una hora y devuelva los nanosegundos. Comprueba que ta el mismo resultado que el m\u00e9todo toNanoOfDay de la clase LocalTime.</p> Ejercicio 3 <p>Realiza un m\u00e9todo que reciba una fecha de nacimiento de devuelva la edad.</p> Ejercicio 4 <p>Realiza una clase para convertir fechas que tenga los siguientes m\u00e9todos. Haz un programa para probarlo:</p> <ul> <li><code>String europeaToAmerican(String)</code>: este m\u00e9todo convierte una fecha en formato europeo (dia/mes/a\u00f1o) a formato americano (mes/dia/a\u00f1o).</li> <li><code>String americanToEuropea(string)</code>: este m\u00e9todo realiza el paso contrario, convierte fechas de formato americano a formato europeo.</li> </ul> Ejercicio 5 <p>Realiza un programa que muestre la fecha del sistema de la siguiente manera: Hoy es s\u00e1bado 12-marzo-2011 a las 10:22:13</p> Ejercicio 6 <p>Realiza un m\u00e9todo que reciba un mes y un d\u00eda correspondiente a este a\u00f1o y devuelva el n\u00famero de d\u00edas que han pasado desde el 1 de Enero de este a\u00f1o hasta dicho d\u00eda.</p> Ejercicio 7 <p>Realiza un m\u00e9todo de decodifique fechas del siglo XXI. El dato es un entero comprendido entre 10100 y 311299. El resultado es una secuencia de caracteres: n\u00famero del d\u00eda dentro del mes, del mes dentro del a\u00f1o y del a\u00f1o dentro del siglo. Por ejemplo, para el dato 30485, el resultado es el texto 3-4-2085.</p> Ejercicio 8 <p>Realiza un m\u00e9todo que reciba d\u00eda, mes y a\u00f1o y devuelva una cadena con la fecha. Ejemplo:</p> <p>D\u00eda: Jueves Mes: Mayo A\u00f1o: 2012 El m\u00e9todo devolver\u00e1 03/05/2012 ya que coge el primer jueves de mayo.</p> Ejercicio 9 <p>Realiza un m\u00e9todo que reciba una cadena con una fecha y devuelva si dicha fecha es correcta.</p> Ejercicio 10 <p>Realiza un m\u00e9todo que reciba un a\u00f1o y devuelva si es bisiesto o no. No se puede usar el m\u00e9todo isLeap().</p> Ejercicio 11 <p>Realiza un m\u00e9todo que dada dos fechas te devuelva la diferencia de ambas. Utilizar una de las clases indicadas (investigar API).</p> Ejercicio 12 <p>Realiza un m\u00e9todo que reciba un a\u00f1o y un mes y dibuje el calendario de ese mes dentro de ese a\u00f1o con el siguiente formato:</p> <pre><code>      Jun-23\nL  M  X  J  V  S  D\n1  2  3  4\n5  6  7  8  9 10 11\n12 13 14 15 16 17 18\n19 20 21 22 23 24 25\n26 27 28 29 30\n</code></pre> <p>Realiza una nueva version donde reciba solamente el a\u00f1o y muestre el calendario de ese a\u00f1o. Por \u00faltimo realiza otra versi\u00f3n, donde no reciba ning\u00fan par\u00e1metro y muestre el calendario del a\u00f1o actual, marcando el d\u00eda actual.</p>"},{"location":"bloque_ii/tema_9/page-8/","title":"Proyecto","text":"<p>En este proyecto se va a realizar cambios en el proyecto conocido como common.</p> <p>Para ello se va a a\u00f1adir los siguientes m\u00e9todos a la clase ConsoleInput:</p> <ul> <li>readDate(): Este m\u00e9todo retornar\u00e1 una fecha v\u00e1lida le\u00edda por teclado con el formato por defecto.</li> <li>readTime(): Este m\u00e9todo retornar\u00e1 una hora v\u00e1lida le\u00edda por teclado con el formato por defecto.</li> <li>readDateTime(): Este m\u00e9todo retornar\u00e1 una fecha y hora v\u00e1lida le\u00edda por teclado con el formato por defecto.</li> </ul> <p>Se sobrescribir\u00e1n los m\u00e9todos anteriores para que adem\u00e1s reciban un par\u00e1metro con el formato con el que se desea leer.</p> <p>Adem\u00e1s, se va a crear la clase Dates en la cu\u00e1l se llevaran a cabo atributos y m\u00e9todos de utilidad (est\u00e1ticos) para trabajar con fechas de la API Java 8.</p> <p>Se crear\u00e1n varios atributos con los patrones de fechas siguientes, (teniendo en cuenta que coger\u00e1 el idioma por defecto del ordenador)</p> <ul> <li>FULL_DATE: Tuesday, 20 June 2023, 12:40:15</li> <li>DATE: Tue, 20 June 2023, 12:40</li> <li>SHORT_DATE: 20 June 2023, 12:40</li> <li>NUMBER_DATE: 20/06/2023, 12:40</li> <li>ONLY_FULL_DATE: Tuesday, 20 June 2023</li> <li>ONLY_DATE: Tue, 20 June 2023</li> <li>ONLY_SHORT_DATE: 20 June 2023</li> <li>ONLY_NUMBER_DATE: 20/06/2023</li> <li>ONLY_TIME: 12:40</li> </ul> <p>Info</p> <p>Puedes a\u00f1adir todos los patrones que consideres oportunos si no est\u00e1n en la lista anterior.</p> <p>Se crear\u00e1n, tambi\u00e9n, los siguientes m\u00e9todos:</p> <ul> <li>betweenDay(date1, date2): Calcula la diferencia en d\u00edas de dos fechas.</li> <li>betweenMonth(date1, date2): Calcula la diferencia en meses de dos fechas.</li> <li>betweenYear(date1, date2): Calcula la diferencia en a\u00f1os de dos fechas.</li> <li>betweenHours(date1, date2): Calcula la diferencia en horas de dos fechas.</li> <li>betweenMinutes(date1, date2): Calcula la diferencia en minutos de dos fechas.</li> <li>betweenSeconds(date1, date2): Calcula la diferencia en segundos de dos fechas.</li> <li>betweenDecades(date1, date2): Calcula la diferencia en d\u00e9cadas de dos fechas.</li> <li>betweenCenturies(date1, date2): Calcula la diferencia en siglos de dos fechas.</li> <li>betweenMillennia(date1, date2): Calcula la diferencia en milenios de dos fechas.</li> <li>between(date1, date2): Calcula el per\u00edodo de tiempo entre dos fechas.</li> <li>format(date): Devuelve una cadena formateada por el formato por defecto.</li> <li>isValidDate(string): Comprueba si la cadena cumple con un formato de fecha.</li> <li>getFirstDate(dayOfWeek, month, year): Devuelve una fecha con el primer un d\u00eda de la semana, mes y a\u00f1o.</li> <li>getLastDate(dayOfWeek, month, year): Devuelve una fecha con el \u00faltimo d\u00eda de la semana, mes y a\u00f1o.</li> <li>calendar(month, year): Muestra un calendario de la mes y a\u00f1o indicado.</li> <li>calendar(month, year, date): Muestra un calendario del mes y del a\u00f1o indicado con la fecha se\u00f1alizada. Si la fecha no coincide con el mes y a\u00f1o indicado, no se se\u00f1alizar\u00e1.</li> <li>calendar(year): Muestra un calendario del a\u00f1o especificado.</li> <li>calendar(year, date): Muestra un calendario del a\u00f1o especificado con la fecha se\u00f1alada. Si la fecha no coincide con el  a\u00f1o indicado, no se se\u00f1alizar\u00e1.</li> <li>calendar(date): Muestra un calendario del a\u00f1o actual con la fecha se\u00f1alada. Si la fecha no coincide con el a\u00f1o actual no se se\u00f1alizar\u00e1.</li> <li>calendar(): Muestra un calendario del a\u00f1o actual con la fecha de hoy se\u00f1alada.</li> </ul> <p>Adem\u00e1s de todos estos m\u00e9todos indicados, se a\u00f1adir\u00e1 un m\u00e9todo a la clase String, toDate(string), que devuelve una fecha dado una cadena.</p> <p>Para realizar este proyecto se tendr\u00e1 en cuenta:</p> <ul> <li>NO se realizar\u00e1 una versi\u00f3n sobre el proyecto 6, sino que se realizar\u00e1 un copia de dicho proyecto en esta versi\u00f3n</li> <li>Se mantendr\u00e1 el paquete principal llamado <code>com.NOMBRE.common</code> donde nombre ser\u00e1 el nombre del alumno y common el nombre del proyecto.</li> <li>Se deber\u00e1n sobrescribir los m\u00e9todos necesarios para que reciban los diferentes tipos de fechas que hay.</li> <li>Se crear\u00e1 una clase Main, donde se ponga en pr\u00e1ctica los usos de la librer\u00eda y se valorar\u00e1 la complejidad de dicho Main.</li> <li>Se deber\u00e1n respetar el nombre de las funciones.</li> <li>El nombre del resto de funciones ser\u00e1 en ingl\u00e9s y deber\u00e1n ser lo suficiente claras para poder identificarlas con facilidad.</li> <li>El c\u00f3digo se comentar\u00e1 haciendo uso de los comentarios JavaDoc adem\u00e1s, de comentarios normales para dar una explicaci\u00f3n a la parte del c\u00f3digo m\u00e1s importante.</li> <li>El repositorio de GitHub tendr\u00e1 el siguiente nombre <code>pr09java-NOMBRE-dates</code> siendo NOMBRE el nombre del alumno.</li> <li>Se declarar\u00e1 aquellas variables que sean necesarias inicializ\u00e1ndolas si es necesario, indicando el tipo correspondiente.</li> <li>Se har\u00e1 uso de funciones y procedimientos donde sea oportuno.</li> <li>La entrega de este proyecto se realizar\u00e1 a trav\u00e9s de un enlace a un repositorio de GitHub, realizando siempre m\u00e1s de un commit.</li> <li>Se valorar\u00e1 la limpieza, la claridad, y la estructura del proyecto.</li> </ul>"},{"location":"bloque_iii/tema_11/page-1/","title":"1 Introducci\u00f3n a las colecciones","text":""},{"location":"bloque_iii/tema_11/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>Una colecci\u00f3n representa un grupo de objetos. Estos objetos son conocidos como elementos. Cuando queremos trabajar con un conjunto de elementos, necesitamos un almac\u00e9n donde poder guardarlos.</p> <p>Las colecciones son estructuras de datos con la peculiaridad de que son estructuras din\u00e1micas. Eso quiere decir que pueden aumentar o disminuir su tama\u00f1o dependiendo de los elementos que almacenan, lo que suponen una mejora respecto a las estructuras de datos est\u00e1ticas cuyo tama\u00f1o se define en su creaci\u00f3n y no se puede alterar en tiempo de ejecuci\u00f3n, como por ejemplo, los arrays.</p> <p>El API de Java nos proporciona en el paquete <code>java.util</code> el framework de las colecciones, que nos permite utilizar diferentes estructuras de datos para almacenar y recuperar objetos de cualquier clase. Java tiene desde la versi\u00f3n 2 todo un juego de clases e interfaces para guardar colecciones de objetos donde todas las entidades conceptuales est\u00e1n representadas por interfaces y las clases se usan para proveer implementaciones de esas interfaces. Estas clases e interfaces est\u00e1n estructuradas en una jerarqu\u00eda.</p> <p>Pero \u00bfqu\u00e9 podemos almacenar dentro de una colecci\u00f3n? Podemos almacenar cualquier objeto que herede de la clase <code>Object</code>. Pero esto presenta ciertos inconvenientes:</p> <ul> <li>Podr\u00edamos tener una colecci\u00f3n con objetos completamente distintos, lo que puede dar lugar a problemas ya que en todo momento deber\u00edamos saber qu\u00e9 tipo de objeto y qu\u00e9 posici\u00f3n de la colecci\u00f3n se encuentra el elementos con el que queremos trabajar, de otro modo podr\u00edamos tener incongruencias en el c\u00f3digo e incluso hacer saltar una excepci\u00f3n.</li> <li>Otro inconveniente es que tendr\u00edamos que hacer continuos castings para poder trabajar con los elementos de la colecci\u00f3n, lo cual resulta tedioso y poco productivo.</li> </ul> <p>Veamos un ejemplo para obtener la suma de los valores almacenados en una lista:</p> <pre><code>int total = 0;\nArrayList numbers = new ArrayList(); // Creaci\u00f3n de la lista\nnumbers.add(1); // Se a\u00f1ade el elemento 1 a la lista utilizando el m\u00e9todo add\nnumbers.add(2);\nnumbers.add(3);\nfor(int i = 0; i &lt; numbers.size(); i++){\n// No vemos obligados a hacer cast, dado que numbers.get(i) retorna un Object:\ntotal += (int) numbers.get(i);\n}\nSystem.out.printf(\"Total: %d\\n\", total);\n</code></pre> <p>Como vemos en el ejemplo anterior, nos vemos obligados a hacer expl\u00edcitamente un cast cuando obtenemos un elemento de la lista, dado que la lista internamente trabaja con elementos de la clase <code>Object</code>. No hay ning\u00fan contrato que permita a la clase <code>ArrayList</code> saber qu\u00e9 tipo de datos queremos que trabaje.</p> <p>Adem\u00e1s, es posible a\u00f1adir elementos de distinto tipo a la lista, con el agravante de que m\u00e1s adelante cuando se intenta acceder al elemento y se hace cast sobre \u00e9l se producir\u00e1 un error en tiempo de ejecuci\u00f3n. As\u00ed, si modificamos el ejemplo anterior de la siguiente manera:</p> <pre><code>int total = 0;\nArrayList numbers = new ArrayList(); numbers.add(1);\nnumbers.add(2);\nnumbers.add(\"Antonio\");\nfor(int i = 0; i &lt; numbers.size(); i++){\n// Esta l\u00ednea lanza una excepci\u00f3n cuando\n// se trata de convertir a entero el elemento \"Antonio\",\ntotal += (int) numbers.get(i);\n}\nSystem.out.printf(\"Total: %d\\n\", total);\n</code></pre> <p>As\u00ed pues, para resolver este problema, a partir de la versi\u00f3n 5 de Java empezaron a utilizar los gen\u00e9ricos. Los gen\u00e9ricos nos permiten establecer un tipo con el que vamos a trabajar en esa colecci\u00f3n, de esa manera podemos evitar los problemas mencionados anteriormente.</p> <p>As\u00ed el ejemplo anterior podr\u00edamos modificarlo de la siguiente manera:</p> <pre><code>int total = 0;\nArrayList&lt;Integer&gt; numbers = new ArrayList&lt;&gt;(); numbers.add(1);\nnumbers.add(2);\n//Esta l\u00ednea da un error de compilaci\u00f3n, dado que el compilador\n// detecta que estamos intentado a\u00f1adir una cadena a la lista de enteros:\nnumbers.add(\"Antonio\");\nfor(int i = 0; i &lt; numbers.size(); i++){\n// Ya no es necesario hacer un cast expl\u00edcito, dado que el compilador\n// lo har\u00e1 internamente por nosotros, al haberle informado de que quer\u00edamos\n// trabajar con una lista de enteros\ntotal += numbers.get(i);\n}\nSystem.out.printf(\"Total: %d\\n\", total);\n</code></pre> <p>Como vemos en el ejemplo anterior, gracias a la informaci\u00f3n que le suministramos al compilador sobre el tipo de lista con el que queremos trabajar, en este caso <code>Integer</code>, el compilador es capaz de detectar en tiempo de compilaci\u00f3n que no deber\u00eda ser posible a\u00f1adir una cadena a la lista, y adem\u00e1s nos evita tener que hacer expl\u00edcitamente el cast a entero cuando obtenemos los elementos de la lista, porque ya lo puede hacer \u00e9l internamente por nosotros.</p> <p>Lo que se use en un gen\u00e9rico debe ser un objeto, por lo tanto, los gen\u00e9ricos no funcionan con datos primitivos. Para resolver esta situaci\u00f3n, la API de Java incorpora las clases envoltorio (wrapper class) que no son m\u00e1s que dotar a los datos primitivos con un envoltorio que permita tratarlos como objetos. Las clases envoltorios proporcionan m\u00e9todos de utilidad para la manipulaci\u00f3n de datos primitivos (conversiones de / hacia datos primitivos, conversiones a String, etc).</p>"},{"location":"bloque_iii/tema_11/page-2/","title":"2 ArrayList","text":""},{"location":"bloque_iii/tema_11/page-2/#interfaz-collection","title":"Interfaz Collection","text":"<p>Es la interfaz ra\u00edz de la jerarqu\u00eda de las colecciones. Java no proporciona ninguna implementaci\u00f3n directa de esta interfaz, sino que proporciona implementaciones de sub-interfaces m\u00e1s espec\u00edficas como Set y List. Esta interfaz se utiliza normalmente para pasar colecciones y manipularlas cuando se desea la m\u00e1xima generalidad.</p> <p>Veamos algunos de los m\u00e9todos que podemos observar en la API</p> <ul> <li><code>boolean add(E e)</code>: a\u00f1ade el elemento e a la colecci\u00f3n.</li> <li><code>boolean addAll(Collection &lt;? extends E&gt; c)</code>: a\u00f1ade todos los elementos de la colecci\u00f3n c.</li> <li><code>void clear()</code>: elimina todos los elementos de la colecci\u00f3n.</li> <li><code>boolean contains(Object o)</code>: comprueba si el elemento o est\u00e1 en la colecci\u00f3n.</li> <li>boolean containsAll(Collection&lt;?&gt; c) : comprueba si todos los elementos de c est\u00e1n en la colecci\u00f3n.</li> <li><code>boolean isEmpty()</code>: comprueba si la colecci\u00f3n est\u00e1 vac\u00eda.</li> <li><code>boolean remove(Object o)</code>: elimina de la colecci\u00f3n el elemento o.</li> <li><code>boolean removeAll(Collection&lt;?&gt; c)</code>: elimina de la colecci\u00f3n todos los elementos de c.</li> <li><code>boolean retainAll(Collection&lt;?&gt; c)</code>: elimina de la colecci\u00f3n todos los elementos exceptos los que est\u00e1n en c, es decir, obtiene la intersecci\u00f3n.</li> <li><code>int size()</code>: devuelve el tama\u00f1o de la colecci\u00f3n.</li> </ul>"},{"location":"bloque_iii/tema_11/page-2/#interfaz-list","title":"Interfaz List","text":"<p>Esta interfaz es una sub-interfaz o interfaz hija de Collection, por lo tanto, tiene todos los m\u00e9todos de Collection y adem\u00e1s a\u00f1ade los suyos propios.</p> <p>Este tipo de colecci\u00f3n se refiere a listas en las que los elementos de la colecci\u00f3n tienen un orden, es decir, existe una secuencia de elementos. Cada elemento tiene un \u00edndice o posici\u00f3n. El primer elemento ocupa la posici\u00f3n 0. La interfaz List s\u00ed admite elementos duplicados.</p> <p>Veamos algunos de los m\u00e9todos que podemos observar en la API:</p> <ul> <li><code>void add(int index, E element)</code>: inserta el elemento E en la posici\u00f3n index.</li> <li><code>boolean add(E e)</code>: a\u00f1ade el elemento e al final de la lista.</li> <li><code>boolean addAll(int index, Collection &lt;? extends E&gt; c)</code>: inserta todos los elementos de c en la posici\u00f3n index.</li> <li><code>boolean addAll(Collection &lt;? extends E&gt; c)</code>: a\u00f1ade todos los elementos de c al final de la lista.</li> <li><code>E get(int index)</code>: devuelve el elemento de la posici\u00f3n index.</li> <li><code>int indexOf(Object o)</code>: devuelve el \u00edndice de la primera ocurrencia del elemento o en la lista, o -1 si la lista no contiene el elemento.</li> <li><code>int lastIndexOf(Object o)</code>: devuelve el \u00edndice de la \u00faltima ocurrencia del elemento o en la lista, o -1 si la lista no contiene el elemento.</li> <li><code>E remove(int index)</code>: elimina el elemento que se encuentra en la posici\u00f3n index. E set(int index, E element): reemplaza el elemento que se encuentra en index por el elemento element.</li> <li><code>List&lt;E&gt; subList(int fromIndex, int toIndex)</code>: devuelve la sub-lista comprendida entre las posiciones fromIndex incluida y toIndex excluida.</li> </ul> <p>Existen varios tipos de implementaciones realizadas dentro de la plataforma Java para la interfaz List, como por ejemplo, ArrayList.</p>"},{"location":"bloque_iii/tema_11/page-2/#la-clase-arraylist","title":"La clase ArrayList","text":"<p>Se basa en un array redimensionable que aumenta su tama\u00f1o seg\u00fan crece la colecci\u00f3n de elementos. Lo bueno es que el tiempo de acceso a un elemento en particular es \u00ednfimo. Lo malo es que si queremos eliminar un elemento del principio o del medio, la clase debe mover todos los que le siguen a la posici\u00f3n anterior, para tapar el agujero que deja el elemento removido. Esto hace que sacar elementos del medio o del principio sea costoso.</p> <p>ArrayList mantiene el orden de inserci\u00f3n, es decir, si recorremos la colecci\u00f3n se nos mostrar\u00e1 en el mismo orden en que insertamos los objetos.</p> <p>Veamos un ejemplo de declaraci\u00f3n e inicializaci\u00f3n:</p> <pre><code>ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();\n</code></pre> <p>A partir de java7, no es necesario indicar el gen\u00e9rico en la inicializaci\u00f3n:</p> <pre><code>ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n</code></pre> <p>Para hacer el c\u00f3digo m\u00e1s gen\u00e9rico, se puede definir la variable de tipo interfaz, ya que dicho c\u00f3digo podr\u00eda funcionar con cualquier clase que implemente la interfaz, simplemente habr\u00eda que cambiar el new:</p> <pre><code>List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n</code></pre> <p>Veamos un ejemplo de ArrayList donde utiliza m\u00e9todos tanto de Collection como de List:</p> C\u00f3digoSalida <pre><code>import java.util.ArrayList;\nimport java.util.List;\npublic class ShowArrayList{\npublic void show(){\nList&lt;Integer&gt; list1 = new ArrayList&lt;&gt;();\nList&lt;Integer&gt; list2 = new ArrayList&lt;&gt;();\nList&lt;Integer&gt; list3 = new ArrayList&lt;&gt;();\nlist1.add(1);\nlist1.add(2);//Se a\u00f1aden los elementos al final de la lista\nlist1.add(6);\nlist1.add(2, 5);//Se a\u00f1ade el 5 en la posici\u00f3n 2\nfor (Integer i : list1) {//Recorremos la lista con un bucle for-each: 1 2 5 6\nSystem.out.printf(\" %d \", i);\n}\nSystem.out.println();\nlist2.add(3);\nlist2.add(4);\nlist1.addAll(2, list2);//Se inserta list2 en la posici\u00f3n 2 de list1\nfor (Integer i : list1) {// 1 2 3 4 5 6\nSystem.out.printf(\" %d \", i);\n}\nSystem.out.println();\nlist3.add(7);\nlist3.add(8);\nlist1.addAll(list3);//Se inserta list3 al final de list1\nfor (Integer i : list1) {// 1 2 3 4 5 6 7 8\nSystem.out.printf(\" %d \", i);\n}\nSystem.out.printf(\"\\nEl elemento 3 de list1 es: %d\", list1.get(3));//4\nSystem.out.printf(\"\\nLa posici\u00f3n del 4 en list1 es: %d\", list1.indexOf(4));//3\nlist1.add(4);//Se a\u00f1ade un 4 al final de list1\nSystem.out.printf(\"\\nLa posici\u00f3n del 4 en list1 por el final es: %d\\n\", list1.lastIndexOf(4));//8\nlist1.remove(8);//Se elimina el elemento de la posici\u00f3n 8, que es el \u00faltimo 4 insertado\nfor (Integer i : list1) {// 1 2 3 4 5 6 7 8\nSystem.out.printf(\" %d \", i);\n}\nlist1.set(6, 8);//Se reemplaza el elemento que se encuentra en la posici\u00f3n 6 por un 8\nSystem.out.println();\nfor (Integer i : list1) {// 1 2 3 4 5 6 8 8\nSystem.out.printf(\" %d \", i);\n}\nSystem.out.printf(\"\\nLa sub-lista comprendida entre las posiciones 2 y 5 es: \");\nfor (Integer i : list1.subList(2, 6)) {// 3 4 5 6\nSystem.out.printf(\" %d \", i);\n}\nSystem.out.printf(\"\\nEl 4 %s se encuentra en list1\", list1.contains(4) ? \"s\u00ed\" : \"no\");//s\u00ed\nSystem.out.printf(\"\\nEl 9 %s se encuentra en list1\", list1.contains(9) ? \"s\u00ed\" : \"no\");//no\n//list1: 1 2 3 4 5 6 8 8\n//list2: 3 4\n//list3: 7 8\nSystem.out.printf(\"\\nTodos los elementos de list2 %s se encuentran en list1\", list1.containsAll(list2) ? \"s\u00ed\" : \"no\");//s\u00ed\nSystem.out.printf(\"\\nTodos los elementos de list3 %s se encuentran en list1\\n\",\nlist1.containsAll(list3) ? \"s\u00ed\" : \"no\");//no\nlist1.removeAll(list3);//Se eliminan de list1 todos los elementos de list3, es decir, el 8\nfor (Integer i : list1) {// 1 2 3 4 5 6\nSystem.out.printf(\" %d \", i);\n}\nSystem.out.println();\nlist1.retainAll(list2);//Intersecci\u00f3n entre list1 y list2\nfor (Integer i : list1) {// 3 4\nSystem.out.printf(\" %d \", i);\n}\nSystem.out.printf(\"\\nEl tama\u00f1o de list1 es: %d\", list1.size());//2\nSystem.out.printf(\"\\nlist1 %s est\u00e1 vac\u00eda\", list1.isEmpty() ? \"s\u00ed\" : \"no\");//no\nlist1.clear();//Elimina todos los elementos de list1\nSystem.out.printf(\"\\nlist1 %s est\u00e1 vac\u00eda\", list1.isEmpty() ? \"s\u00ed\" : \"no\");//s\u00ed\n}\npublic static void main(String[] args) {\nnew ShowArrayList().show();\n}\n}\n</code></pre> <pre><code>1 2 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6 7 8\nEl elemento 3 de list1 es: 4\nLa posici\u00f3n del 4 en list1 es: 3\nLa posici\u00f3n del 4 en list1 por el final es: 8\n1 2 3 4 5 6 7 8\n1 2 3 4 5 6 8 8\nLa sub-lista comprendida entre las posiciones 2 y 5 es: 3 4 5 6\nEl 4 s\u00ed se encuentra en list1\nEl 9 no se encuentra en list1\nTodos los elementos de list2 s\u00ed se encuentran en list1\nTodos los elementos de list3 no se encuentran en list1\n1 2 3 4 5 6\n3 4\nEl tama\u00f1o de list1 es: 2\nlist1 no est\u00e1 vac\u00eda\nlist1 s\u00ed est\u00e1 vac\u00eda\n</code></pre>"},{"location":"bloque_iii/tema_11/page-2/#iteradores","title":"Iteradores","text":"<p>En dise\u00f1o de software, el patr\u00f3n de dise\u00f1o Iterador (en ingl\u00e9s, Iterator) define una interfaz que declara los m\u00e9todos necesarios para acceder secuencialmente a un grupo de objetos de una colecci\u00f3n.</p> <p>Este patr\u00f3n debe ser utilizado cuando se requiera una forma est\u00e1ndar de recorrer una colecci\u00f3n, es decir, cuando no sea necesario que un cliente sepa el tipo de colecci\u00f3n que est\u00e1 recorriendo.</p> <p>La interfaz <code>Iterable&lt;T&gt;</code> contiene el m\u00e9todo iterator() que devuelve una instancia de alguno clase que implemente la interfaz <code>Iterator&lt;T&gt;</code>:</p> <ul> <li><code>Iterator&lt;T&gt; iterator()</code>: devuelve un iterador al comienzo de la colecci\u00f3n.</li> </ul> <p>La interfaz <code>Iterator&lt;E&gt;</code> permite el acceso secuencial a los elementos de una colecci\u00f3n y realizar recorridos sobre la colecci\u00f3n. Los m\u00e9todos de <code>Iterator&lt;E&gt;</code> son:</p> <ul> <li><code>boolean hasNext()</code>: comprueba si hay siguiente elemento.</li> <li><code>E next()</code>: devuelve el siguiente elemento y mueve el iterador.</li> <li><code>void remove()</code>: se invoca despu\u00e9s de next() para eliminar el \u00faltimo elemento le\u00eddo.</li> </ul> <p>La interfaz <code>Collection&lt;E&gt;</code> es una sub-interfaz o interfaz hija de <code>Iterable&lt;E&gt;</code>, as\u00ed que dispone del m\u00e9todo <code>iterator()</code>. Veamos un ejemplo de un <code>ArrayList&lt;E&gt;</code>utilizando iteradores:</p> C\u00f3digoConsola <pre><code>import java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\npublic class ShowIterator{\npublic void show(){\nIterator&lt;String&gt; it;\nList&lt;String&gt; list = new ArrayList&lt;&gt;();\nlist.add(\"Juan\");\nlist.add(\"Antonio\");\nlist.add(\"Jaime\");\nlist.add(\"Vicente\");\nit = list.iterator();\nwhile(it.hasNext()){\nSystem.out.println(it.next());\n}\n}\npublic static void main(String[] args){\nnew ShowIterator().show();\n}\n}\n</code></pre> <pre><code>Juan\nAntonio\nJaime\nVicente\n</code></pre> <p>Si no hay siguiente, <code>next()</code> lanza una excepci\u00f3n <code>NoSuchElementException</code>:</p> <pre><code>import java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\npublic class NextException {\npublic void show() {\nIterator&lt;String&gt; it;\nList&lt;String&gt; list = new ArrayList&lt;&gt;();\nlist.add(\"Juan\");\nit = list.iterator();\nSystem.out.println(it.next());\nSystem.out.println(it.next());//(1)!\n}\npublic static void main(String[] args) {\nnew NextException().show();\n}\n}\n</code></pre> <ol> <li>Se lanza en ejecuci\u00f3n una excepci\u00f3n <code>NoSuchElementException</code></li> </ol> <p>Tal y como vemos en el ejemplo anterior, hay que comprobar si hay siguiente con un <code>hashNext()</code> para que el <code>next()</code> no lance la excepci\u00f3n.</p> <p>No se puede modificar la colecci\u00f3n dentro del bucle for-each porque se lanza en ejecuci\u00f3n la excepci\u00f3n <code>ConcurrentModificationException</code>, ya que estamos recorriendo y modificando la lista a la vez:</p> <pre><code>import java.util.ArrayList;\nimport java.util.List;\npublic class ModifyInsideForEach {\npublic void show() {\nList&lt;String&gt; list = new ArrayList&lt;&gt;();\nlist.add(\"Juan\");\nlist.add(\"Antonio\");\nlist.add(\"Jaime\");\nlist.add(\"Vicente\");\nfor (String s : list) {//(1)!\nSystem.out.printf(\" %s \", s);\nif (s.equals(\"Antonio\")) {\nlist.remove(\"Antonio\");\n}\n}\n}\npublic static void main(String[] args) {\nnew ModifyInsideForEach().show();\n}\n}\n</code></pre> <ol> <li>Se lanza en ejecuci\u00f3n la excepci\u00f3n <code>ConcurrentModificationException</code></li> </ol> <p>Para solucionarlo, podemos utilizar el m\u00e9todo <code>remove()</code>de <code>Iterator&lt;E&gt;</code>. Si se modifica una colecci\u00f3n mientras se recorre, los iteradores quedan invalidados, a excepci\u00f3n del m\u00e9todo <code>remove()</code> de la interfaz <code>Iterator&lt;E&gt;</code>. El m\u00e9todo <code>remove()</code> permite eliminar elementos de la colecci\u00f3n siendo la \u00fanica forma adecuada para eliminar elementos durante la iteraci\u00f3n:</p> C\u00f3digoConsola <pre><code>import java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\npublic class RemoveIterator {\npublic void show() {\nString s;\nIterator&lt;String&gt; it;\nList&lt;String&gt; list = new ArrayList&lt;&gt;();\nlist.add(\"Juan\");\nlist.add(\"Antonio\");\nlist.add(\"Jaime\");\nlist.add(\"Vicente\");\nit = list.iterator();\nwhile (it.hasNext()) {\ns = it.next();\nif (s.equals(\"Antonio\")) {\nit.remove();\n} else {\nSystem.out.println(s);\n}\n}\n}\npublic static void main(String[] args) {\nnew RemoveIterator().show();\n}\n}\n</code></pre> <pre><code>Juan\nJaime\nVicente\n</code></pre> <p>Solo puede haber una invocaci\u00f3n a <code>remove()</code> por cada invocaci\u00f3n <code>next()</code>. Si no cumple, se lanza en ejecuci\u00f3n una excepci\u00f3n <code>IllegalStateException</code>. Por ejemplo, imaginemos que tenemos una lista de personas y queremos eliminar a Antonio y a la persona que venga detr\u00e1s. Si cuando encontramos a Antonio, hacemos dos <code>remove()</code> seguidos, entonces salta la excepci\u00f3n:</p> <pre><code>import java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\npublic class RemoveNext1 {\npublic void show() {\nString s;\nIterator&lt;String&gt; it;\nList&lt;String&gt; list = new ArrayList&lt;&gt;();\nlist.add(\"Juan\");\nlist.add(\"Antonio\");\nlist.add(\"Jaime\");\nlist.add(\"Vicente\");\nit = list.iterator();\nwhile (it.hasNext()) {\ns = it.next();\nif (s.equals(\"Antonio\")) {\nit.remove();\nit.remove();//(1)!\n} else {\nSystem.out.println(s);\n}\n}\n}\npublic static void main(String[] args) {\nnew RemoveNext1().show();\n}\n}\n</code></pre> <ol> <li>Se lanza en ejecuci\u00f3n la excepci\u00f3n <code>IllegalStateException</code></li> </ol> <p>Tendr\u00edamos que hacer otro <code>next()</code> para el que venga detr\u00e1s de Antonio:</p> C\u00f3digoConsola <pre><code>import java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\npublic class RemoveNext2 {\npublic void show() {\nString s;\nIterator&lt;String&gt; it;\nList&lt;String&gt; list = new ArrayList&lt;&gt;();\nlist.add(\"Juan\");\nlist.add(\"Antonio\");\nlist.add(\"Jaime\");\nlist.add(\"Vicente\");\nit = list.iterator();\nwhile (it.hasNext()) {\ns = it.next();\nif (s.equals(\"Antonio\")) {\nit.remove();\nit.next();\nit.remove();\n} else {\nSystem.out.println(s);\n}\n}\n}\npublic static void main(String[] args) {\nnew RemoveNext2().show();\n}\n}\n</code></pre> <pre><code>Juan\nVicente\n</code></pre> <p>La interfaz <code>ListIterator&lt;E&gt;</code> es una subinterfaz o interfaz hija de <code>Iterator&lt;E&gt;</code>. Es un iterador para listas que permite al programador recorrer la lista hacia delante y hacia atr\u00e1s, modificar la lista durante la iteraci\u00f3n y obtener la posici\u00f3n actual del iterador en la lista.</p> <p>Hereda los m\u00e9todos de <code>Iterador&lt;E&gt;</code> y adem\u00e1s aporta otros m\u00e9todos nuevos:</p> <ul> <li><code>void add(E e)</code>: inserta el elemento en la lista antes del elemento que ser\u00eda devuelto por next(), si lo hubiera, y despu\u00e9s del elemento que ser\u00eda devuelto por previous(), si lo hubiera. Una llamada posterior a next() no se ver\u00eda afectada y una llamada posterior a previous() devolver\u00eda el nuevo elemento.</li> <li><code>boolean hasPrevious()</code>: comprueba si hay un elemento anterior.</li> <li><code>int nextIndex()</code>: devuelve el \u00edndice del elemento que ser\u00eda devuelto por una llamada a next(). El \u00edndice del primer elemento es 0.</li> <li><code>E previous()</code>: devuelve el elemento anterior de la lista y mueve la posici\u00f3n del cursor hacia atr\u00e1s.</li> <li><code>int previousIndex()</code>: devuelve el \u00edndice del elemento que ser\u00eda devuelto por una llamada a previous().</li> <li><code>void set(E e)</code>: sustituye el \u00faltimo elemento devuelto por next() o previous() por elemento e.</li> </ul> <p>En la interfaz <code>List&lt;E&gt;</code>, hay dos m\u00e9todos para crear este iterador:</p> <ul> <li><code>ListIterator&lt;E&gt; listIterator()</code>: se coloca antes del primer elemento para que al hacer el primer next() se devuelva el primer elemento.</li> <li><code>ListIterator&lt;E&gt; listIterator(int index)</code>: se coloca antes del elemento que se encuentra en la posici\u00f3n index para que al hacer un next() se devuelva dicho elemento. Para recorrer la lista al rev\u00e9s, hay que crearlo con el tama\u00f1o de la lista para que el primer previous() devuelva el \u00faltimo.</li> </ul> <pre><code>import java.util.ArrayList;\nimport java.util.List;\nimport java.util.ListIterator;\npublic class ShowListIterator {\npublic void show() {\nListIterator&lt;Integer&gt; it;\nList&lt;Integer&gt; list = new ArrayList&lt;&gt;();\nlist.add(1);\nlist.add(2);\nlist.add(4);\nlist.add(6);\n//Recorrido de la lista hacia atr\u00e1s:\nit = list.listIterator(list.size());\nwhile (it.hasPrevious()) {\nSystem.out.printf(\" %d \", it.previous());// 6 4 2 1\n}\nit = list.listIterator(1);//Se coloca antes del elemento que se encuentra en la posici\u00f3n 1\nSystem.out.printf(\"\\n %d \", it.next());//2\nSystem.out.printf(\"\\n %d \", it.nextIndex());//2\nSystem.out.printf(\"\\n %d \", it.previousIndex());//1\nit.add(3);\nSystem.out.printf(\"\\n %d \", it.next());//4 Una llamada posterior a next() no se ve afectada\nit.add(5);\nSystem.out.printf(\"\\n %d \", it.previous());//5 Una llamada posterior a previous() devuelve el nuevo elemento\nSystem.out.printf(\"\\n %d \\n\", it.next());//5\nit.set(7);//sustituye el \u00faltimo elemento devuelto por next() por 7\nfor (Integer i : list) {\nSystem.out.printf(\" %d \", i);//1 2 3 4 7 6\n}\n}\npublic static void main(String[] args) {\nnew ShowListIterator().show();\n}\n}\n</code></pre>"},{"location":"bloque_iii/tema_11/page-3/","title":"3 Conjuntos","text":""},{"location":"bloque_iii/tema_11/page-3/#introduccion","title":"Introducci\u00f3n","text":"<p>Un conjunto es una lista formada por elementos que no se repiten. Para ello, la JVM usar\u00e1 los m\u00e9todos <code>equals</code> y <code>hashCode</code> heredados la clase clase Object para comprobar si dos elementos son iguales.</p> <p>Son m\u00e9todos heredados de la clase <code>Object</code>. Normalmente, hay que sobrescribirlos para adaptarlo de forma adecuada a la clase correspondiente.</p> <p>Sin embargo, debemos tener en cuenta que al sobrescribir todos estos m\u00e9todos debemos seguir cumpliendo con el comportamiento que se espera de ellos, ya que son usados internamente por muchas clases del propio lenguaje. De lo contario, las clases que dependen de ello, como <code>HashMap</code>y <code>HashSet</code> dejar\u00edan de funcionar correctamente.</p> <p>Escribir a mano los m\u00e9todos <code>equals()</code> y <code>hashCode()</code> es bastante tedioso. Para facilitarnos esta tarea tenemos librer\u00edas como la librer\u00eda AutoValue de Google que lo genera autom\u00e1ticamente para nosotros con tan s\u00f3lo usar una determinada anotaci\u00f3n. Otra opci\u00f3n es dejar que el IDE nos genere dichos m\u00e9todos, aunque esto tiene el inconveniente de que no se generan autom\u00e1ticamente de nuevo conforme a\u00f1adimos atributos a nuestro clase, por lo que debemos tener cuidado, algo que s\u00ed hace AutoValue. En todo caso, es mejor usar el IDE que hacerlo nosotros a mano, ya que el humano es m\u00e1s propenso a los errores. En el Eclipse se encuentra en <code>Men\u00fa Source \u2192 Generate hashCode() and equals()</code>.</p>"},{"location":"bloque_iii/tema_11/page-3/#metodo-equals","title":"M\u00e9todo <code>equals</code>","text":"<p>El m\u00e9todo <code>equals()</code> comprueba si dos objetos son iguales.</p> <p>En caso de que no se sobrescriba dicho m\u00e9todo, s\u00f3lo ser\u00e1 igual a s\u00ed misma, es decir, si est\u00e1 situada en la misma posici\u00f3n de memoria.</p> <p>Debemos tener en cuenta que cuando un programador usa el m\u00e9todo <code>equals()</code> sobre un objeto pas\u00e1ndole como argumento otro objeto lo que pretende es descubrir si ambos objetos son equivalentes l\u00f3gicamente(representa el mismo \"valor\"), no si est\u00e1n almacenados en la misma posici\u00f3n de memoria (tienen la misma identidad).</p> <p>No sobrescribir el m\u00e9todo <code>equals()</code> en una determinada clase es la opci\u00f3n recomendada en los siguientes casos:</p> <ul> <li>Cuando cada instancia de la clase es intr\u00ednsecamente \u00fanica, lo cual es cierto para clases como <code>Scanner</code> que representan entidades activas en lugar de valores.</li> <li>Cuando se considera que no hay necesidad de que la clase provea una prueba de equivalencia l\u00f3gica.</li> <li>Cuando una superclase de la clase ya lo ha sobrescrito y el comportamiento de la superclase es apropiado para las subclase.</li> <li>Cuando la clase es privada o friendly, y estamos completamente seguros de que su m\u00e9todo <code>equals()</code> nunca ser\u00e1 invocado, ni expl\u00edcita ni impl\u00edcitamente.</li> </ul> <p>Si nuestra clase no se encuentra en ninguno de los casos anteriores es muy recomendable que sobrescribamos el m\u00e9todo <code>equals()</code>. Un ejemplo muy caracter\u00edstico es cuando la clase corresponda a una entidad que represente un valor.</p> <p>Como hemos comentado, cuando sobrescribamos el m\u00e9todo <code>equals()</code> debemos seguir cumpliendo el comportamiento que el sistema espera de \u00e9l, que incluye las siguientes propiedades:</p> <ul> <li>Reflexiva: Para todo objeto x distinto de null se debe cumplir que <code>x.equals(x)</code> sea true.</li> <li>Sim\u00e9trica: Para todo par de objetos x e y y distintos de null se debe cumplir que <code>x.equals(y)</code> s\u00f3lo debe retornar true si <code>y.equals(x)</code> retorna true.</li> <li>Transitiva: Para todo tr\u00edo de objetos x, y, z distintos de null se debe cumplir que si <code>x.equals(y)</code> retorne true y <code>y.equals(z)</code> retorna true entonces <code>x.equals(z)</code> debe retornar true.</li> <li>Consistente: Para todo par de objetos x e y distintos de null se debe cumplir que <code>x.equals(y)</code>siempre retorne el mismo valor si no hemos cambiado los atributos que se usan para comparar en alguno de los objetos.</li> <li>Para todo objeto x distinto de null se debe cumplir que <code>x.equals(null)</code>debe retornar false.</li> </ul> <p>As\u00ed para sobrescribir el m\u00e9todo <code>equals()</code> cumpliendo con las propiedades anteriores se recomienda seguir los siguientes pasos:</p> <ol> <li>Usar el operador <code>==</code> para comprobar si el argumento corresponde a otra referencia al mismo objeto, en cuyo caso retornar true.</li> <li>Usar el operador <code>instanceof</code> para comprobar si el objeto recibido como argumento no es de la misma clase, en cuyo caso retornar false. Tambi\u00e9n nos sirve para comprobar si dichos argumento es null, ya que en este caso instanceof retornar\u00eda false.</li> <li>Hacer cast del objeto recibido como argumento convirti\u00e9ndolo a la clase correspondiente. Dado que hemos hecho antes instanceof, el cast siempre tendr\u00e1 \u00e9xito.</li> <li>Para cada atributo significativo de la clase, comprobar que dicho atributo en el objeto argumento es equivalente al atributo en el objeto this. Si no tenemos \u00e9xito en alguno de ellos, retornar false. Si todas las comprobaciones se han hecho con \u00e9xito, retornar true. Para realizar las comprobaciones de cada atributo usar:<ul> <li>El operador <code>==</code> para valores primitivos que no sean float ni double.</li> <li>Para los valores float usar <code>Float.compare(value1, value2)</code> y para valores double usar <code>Double.compare(value1, value2)</code>.</li> <li>Para valores correspondientes a objetos llamar a <code>equals()</code> recursivamente. Si es v\u00e1lido que dichos objetos contengan null, entonces debemos usar <code>Objects.equals(object1, object2)</code> para que no se produzca la excepci\u00f3n <code>NullPointerException</code>.</li> <li>Para los valores correspondientes a arrays, compara uno a uno los elementos significativos del array. Si todos los elementos son significativos, usa alguno de las versiones del m\u00e9todo est\u00e1tico <code>Arrays.equals()</code>.</li> </ul> </li> </ol> <p>Veamos un ejemplo:</p> <pre><code>public final class PhoneNumber{\nprivate final short areaCode, prefix, lineNum;\n@Override\npublic boolean equals(Object o){\nif(o == this) return true;\nif(!(o instanceof PhoneNumber)) return false;\nPhoneNumber pn = (PhoneNumber) o;\nreturn pn.lineNum == lineNum &amp;&amp; pn.prefix == prefix &amp;&amp; pn.areaCode == areaCode;\n}\n//...\n}\n</code></pre> <p>\u00a1CUIDADO!</p> <p>Un aspecto muy importante es que no debemos cambiar el tipo del objeto recibido como argumento, que siempre debe ser <code>Object</code>, o no estaremos sobrescribiendo el m\u00e9todo <code>equals()</code>, sino sobrecarg\u00e1ndolo, lo que puede producir falsos positivos. El compilador no se quejar\u00e1 si no usamos la anotaci\u00f3n <code>@Override</code> (por eso siempre se recomienda usarla). Por ejemplo, nunca hagas esto:</p> <pre><code>public boolean equals(MyClass o){\n//...\n}\n</code></pre> <p>Nota</p> <p>Algunas veces, para comparar que una variable de tipo String es equivalente a una determinada constante de cadena se usa la construcci\u00f3n \"Hello\".equals(message) , ya que dicho construcci\u00f3n no puede lanzar NullPointerException si message es null, sino que tan s\u00f3lo retornar\u00e1 false, mientras que message.equals(\"Hello\") lanzar\u00eda NullPointerException en ese caso.</p>"},{"location":"bloque_iii/tema_11/page-3/#metodo-hashcode","title":"M\u00e9todo <code>hashCode</code>","text":"<p>El m\u00e9todo <code>hashCode()</code> devuelve un n\u00famero entero que identifica al objeto cuando se guarda en algunas estructuras de datos.</p> <p>Un detalla muy importante que no debemos olvidar es que **si en una clase sobrescribimos el m\u00e9todo <code>equals()</code> debemos obligatoriamente sobrescribir tambi\u00e9n el m\u00e9todo <code>hashCode()</code> o de lo contrario no se estar\u00e1 cumpliendo con el comportamiento esperado de este \u00faltimo, lo que impedir\u00e1 que los objetos de dichas clase funcionen correctamente en colecciones como <code>HashMap</code> y <code>HashSet</code>.</p> <p>El comportamiento que se espera de <code>hashCode()</code> es el siguiente:</p> <ul> <li>Debe ser consistente, es decir, que repetidas llamadas al m\u00e9todo <code>hashCode()</code> deben retornar el mismo valor, siempre y cuando no se haya modificado ninguno de los atributos usados para las comparaciones.</li> <li>Si dos objetos son equivalentes, es decir, si <code>x.equals(y)</code> retorna true, entonces <code>x.hashCode()</code> e <code>y.hashCode()</code> deben retornar el mismo valor entero. \u00c9ste ees el motivo por el que siempre que sobrescribamos <code>equals()</code> debemos sobrescribir <code>hashCode()</code>, ya que la implementaci\u00f3n por defecto de <code>hashCode()</code> de la clase <code>Object</code> devuelve una representaci\u00f3n num\u00e9rica de la direcci\u00f3n de memoria en la que se encuentra ubicado el objeto.</li> <li>Si dos objetos no son equivalentes, es decir si <code>x.equals(y)</code> retorna false, no es estrictamente necesario, aunque si recomendable, que <code>x.hashCode()</code> e <code>y.hashCode()</code> retornen valores diferentes, de manera que se mejore el rendimiento de las tablas hash. Idealmente el algoritmo de la funci\u00f3n hash debe distribuir una colecci\u00f3n de instancias de un tama\u00f1o considerable de forma uniforme entre todos los valores enteros.</li> </ul> <p>La implementaci\u00f3n caracter\u00edstica al sobrescribir el m\u00e9todo <code>hashCode()</code> en la clase <code>PhoneNumber</code> es la siguiente, usando los atributos areaCode, prefix, lineNum.</p> <pre><code>public final class PhoneNumber{\nprivate final short areaCode, prefix, lineNum;\n@Override\npublic boolean equals(Object o){\nif(o == this) return true;\nif(!(o instanceof PhoneNumber)) return false;\nPhoneNumber pn = (PhoneNumber) o;\nreturn pn.lineNum == lineNum &amp;&amp; pn.prefix == prefix &amp;&amp; pn.areaCode == areaCode;\n}\n@Override\npublic int hashCode(){\nint result = Short.hashCode(areaCode);\nresult = 31 * result + Short.hashCode(prefix);\nresult = 31 * result + Short.hashCode(lineNum);\nreturn result;\n}\n//...\n}\n</code></pre> <p>Adem\u00e1s de escribir nosotros a mano el c\u00f3digo del m\u00e9todo <code>hashCode()</code>, podemos usar la implementaci\u00f3n proporcionada por algunas librer\u00edas, como Guava o AutoValue, o usar la implementaci\u00f3n de los IDEs.</p> <p>Por otra parte, podemos usar <code>Objects.hashCode(object...)</code> para sobrescribir el m\u00e9todo con una sola l\u00ednea. Desafortunadamente, este m\u00e9todo es bastante menos eficiente de lo esperado, debido a que recibe un array de atributos y de que realiza boxing y unboxing de los atributos que sean de un tipo primitivo. Por ejemplo:</p> <pre><code>public final class PhoneNumber{\nprivate final short areaCode, prefix, lineNum;\n@Override\npublic boolean equals(Object o){\nif(o == this) return true;\nif(!(o instanceof PhoneNumber)) return false;\nPhoneNumber pn = (PhoneNumber) o;\nreturn pn.lineNum == lineNum &amp;&amp; pn.prefix == prefix &amp;&amp; pn.areaCode == areaCode;\n}\n@Override\npublic int hashCode(){\nreturn Objects.hash(lineNum, prefix, areaCode);\n}\n//...\n}\n</code></pre> <p>Si una clase es inmutable y el coste de calcular el valor hash es significativo, podr\u00eda considerar almacenar cacheado el c\u00f3digo hash en el propio objecto, en lugar de recalcularlo cada vez que se solicite. Si cree que la mayor\u00eda de los objetos de esta clase se usar\u00e1n como claves hash, entonces deber\u00eda calcular el c\u00f3digo hash cuando se cree la instancia. De lo contario, podr\u00eda elegir calcular perezosamente el c\u00f3digo hash la primera vez que se invoque el m\u00e9todo <code>hash()</code>.</p> <p>Dos consideraciones finales:en primer lugar no excluya atributos significativos del c\u00e1lculo de valor hash, as\u00ed lograr\u00e1 un mejor rendimiento, al no repetir tanto los valores. En segundo lugar, no proporcione a los clientes de la clase demasiada informaci\u00f3n acerca de c\u00f3mo se calcula el valor hash de esta manera el c\u00f3digo no podr\u00e1 depender de c\u00f3mo se calcula, permiti\u00e9ndonos modificar la implementaci\u00f3n del m\u00e9todo en el futuro sin afectar a los clientes.</p>"},{"location":"bloque_iii/tema_11/page-3/#colecciones-sin-duplicados","title":"Colecciones sin duplicados","text":"<p>La interfaz <code>Set</code>, que hereda de Collection, permite implementar listas de elementos sin duplicados, es decir, modela la abstracci\u00f3n matem\u00e1tica de los conjuntos.</p> <p>Existen varios tipos de implementaciones realizadas dentro de la plataforma Java:</p> <ul> <li>HashSet: esta implementaci\u00f3n almacena los elementos de una tabla hash. Es la implementaci\u00f3n con mejor rendimiento de todas pero no garantiza ning\u00fan orden a la hora de realizar iteraciones.</li> <li>LinkedHashSet: est\u00e1 implementaci\u00f3n almacena los elementos en funci\u00f3n del orden de inserci\u00f3n. Es un poco m\u00e1s costosa que HashSet.</li> <li>TreeSet: est\u00e1 implementaci\u00f3n utiliza una estructura de \u00e1rbol para ordenar los elementos. Es bastante m\u00e1s lenta que HashSet.</li> </ul>"},{"location":"bloque_iii/tema_11/page-3/#clase-hashset","title":"Clase HashSet","text":"<p>Implementa la interfaz <code>Set</code>. Es la clase m\u00e1s utilizada para implementar listas sin duplicados. Esta clase permite el elemento nulo. No garantiza ning\u00fan orden a la hora de realizar iteraciones.</p> <p>Utiliza internamente una tabla de tipos hash:</p> <p> Figura 1 - Hashtable</p> <p>Al querer guardar un objeto en esta estructura, se llama al m\u00e9todo hashCode() el cual devuelve un n\u00famero entero que la estructura usar\u00e1 para decidir en qu\u00e9 caj\u00f3n debe recuperar el objeto. El objetivo de guardar los datos de esta forma y de llamar al m\u00e9todo es lograr almacenar y recuperar la informaci\u00f3n en tiempo constante (lo cual no ocurre siempre, pero se acerca). El que no suceda esto depende, casi siempre, del valor que devuelva el m\u00e9todo <code>hashCode()</code> para cada objeto.</p> <p>Supongamos que guardamos 3 objetos en esta estructura y el m\u00e9todo <code>hashCode()</code> de los 3 devuelve 0, esto quiere decir que los 3 objetos se guardar\u00e1n en el caj\u00f3n 0. Cuando se necesite recuperar un objeto, hay que recorrer los objetos del caj\u00f3n 0 para determinar cu\u00e1l es el que se quiere recuperar. Por lo tanto, este m\u00e9todo <code>hashCode()</code> no es \u00fatil ya que lo que se pretende al guardar los elementos es que \u00e9stos queden dispersos de forma uniforme en toda la estructura quedando la menor cantidad de cajones vac\u00edos y que no haya cajones donde se guarden muchos m\u00e1s elementos que en otros.</p> <p>Si dos objetos tiene el mismo <code>hashCode()</code>, ambos objetos se guardar\u00e1n en el mismo caj\u00f3n. La estructura usa entonces el m\u00e9todo <code>equals()</code> dentro de ese caj\u00f3n para determinar cu\u00e1l corresponde con el solicitado y para eso depende de que el programador haya sobrescrito el m\u00e9todo, de lo contrario no garantiza un resultado correcto.</p> <p> Figura 2 - Hash</p> <p>Los objetos HashSet se construyen con un tama\u00f1o inicial de tabla (el tama\u00f1o del array) y un factor de carga que indica cu\u00e1ndo se debe redimensionar el array. Es decir, si se cre\u00f3 un array de 100 elementos y la carga se estableci\u00f3 al 80%, cuando se hayan rellanado 80 valores, se redimensiona el array. Por defecto, el tama\u00f1o del array se toma con 16 y el factor de carga con 0,75 (75%). No obstante, se puede construir una lista HashSet indicando ambos par\u00e1metros.</p> <p>Esta implementaci\u00f3n proporciona tiempos constantes en las operaciones b\u00e1sicas siempre y cuando la funci\u00f3n hash disperse de forma correcta los elementos dentro de la tabla hash. Es importante definir el tama\u00f1o inicial de la tabla ya que este tama\u00f1o marcar\u00e1 el rendimiento de esta implementaci\u00f3n.</p> <p>Veamos un ejemplo de <code>HashSet</code> con la clase <code>Vehicle</code>. Los atributos significativos a tener en cuenta para el <code>equals()</code> y el <code>hashCode()</code> son wheelCount y colour. La velocidad (speed) no se incluye ya que si comparamos el mismo coche pero con velocidades distintas, en realidad, no deja de ser el mismo coche.</p> VehicleMainConsola <pre><code>public class Vehicle {\nprivate int wheelCount;\nprivate double speed;\nprivate String colour;\npublic Vehicle(int wheelCount, String colour) {\nthis.wheelCount = wheelCount;\nthis.colour = colour;\nspeed = 0;\n}\npublic int getWheelCount() {\nreturn wheelCount;\n}\npublic double getSpeed() {\nreturn speed;\n}\npublic String getColour() {\nreturn colour;\n}\npublic void setColour(String colour) {\nthis.colour = colour;\n}\npublic void accelerate(double amount) {\nspeed += amount;\n}\npublic void brake(double amount) {\nspeed -= amount;\n}\n@Override\npublic String toString() {\nreturn \"Vehicle [wheelCount=\" + wheelCount + \", speed=\" + speed + \",colour=\" + colour + \"]\";\n}\n@Override\npublic int hashCode() {\nfinal int prime = 31;\nint result = 1;\nresult = prime * result + ((colour == null) ? 0 : colour.hashCode());\nresult = prime * result + wheelCount;\nreturn result;\n}\n@Override\npublic boolean equals(Object obj) {\nif (this == obj)\nreturn true;\nif (obj == null)\nreturn false;\nif (!(obj instanceof Vehicle other))\nreturn false;\nif (colour == null) {\nif (other.colour != null)\nreturn false;\n} else if (!colour.equals(other.colour))\nreturn false;\nreturn wheelCount == other.wheelCount;\n}\n}\n</code></pre> <pre><code>import java.util.HashSet;\nimport java.util.Set;\npublic class ShowHashSet {\npublic void show() {\nSet&lt;Vehicle&gt; set = new HashSet&lt;&gt;();\nset.add(new Vehicle(4, \"azul\"));\nset.add(new Vehicle(2, \"rojo\"));\nset.add(new Vehicle(4, \"azul\"));\nset.add(new Vehicle(2, \"rojo\"));\nset.add(new Vehicle(4, \"verde\"));\nfor (Vehicle v : set) {\nSystem.out.println(v);//Se llama al toString del objeto\n}\n}\npublic static void main(String[] args) {\nnew ShowHashSet().show();\n}\n}\n</code></pre> <pre><code>Vehicle [wheelCount=4, speed=0.0, colour=verde]\nVehicle [wheelCount=4, speed=0.0, colour=azul]\nVehicle [wheelCount=2, speed=0.0, colour=rojo]\n</code></pre>"},{"location":"bloque_iii/tema_11/page-3/#clase-linkedhashset","title":"Clase LinkedHashSet","text":"<p>Almacena los elementos en funci\u00f3n del orden de inserci\u00f3n. Es un poco m\u00e1s costosa que HashSet.</p> MainConsola <pre><code>import java.util.LinkedHashSet;\nimport java.util.Set;\npublic class ShowLinkedHashSet {\npublic void show() {\nSet&lt;Vehicle&gt; set = new LinkedHashSet&lt;&gt;();\nset.add(new Vehicle(4, \"azul\"));\nset.add(new Vehicle(2, \"rojo\"));\nset.add(new Vehicle(4, \"azul\"));\nset.add(new Vehicle(2, \"rojo\"));\nset.add(new Vehicle(4, \"verde\"));\nfor (Vehicle v : set) {\nSystem.out.println(v);//Se llama al toString del objeto\n}\n}\npublic static void main(String[] args) {\nnew ShowLinkedHashSet().show();\n}\n}\n</code></pre> <pre><code>Vehicle [wheelCount=4, speed=0.0, colour=azul]\nVehicle [wheelCount=2, speed=0.0, colour=rojo]\nVehicle [wheelCount=4, speed=0.0, colour=verde]\n</code></pre>"},{"location":"bloque_iii/tema_11/page-3/#clase-enumset","title":"Clase EnumSet","text":"<p>Es una implementaci\u00f3n de conjuntos de alto rendimiento de tipos enumerados. Require que las constantes de enumeraci\u00f3n colocadas en \u00e9l pertenezcan al mismo tipo de enumeraci\u00f3n. Veamos algunos de sus m\u00e9todos:</p> <ul> <li><code>static &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; allOf(Class&lt;E&gt; elementType)</code>: crea un conjunto de enumeraciones que contiene todos los valores del tipo de enumeraci\u00f3n especificado.</li> <li><code>static &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; complementOf(EnumSet&lt;E&gt; s)</code>: crea un conjunto de numeraciones con el mismo tipo que el conjunto de enumeraciones especificado, conteniendo inicialmente todos los elementos de este tipo que no est\u00e1n contenidos en el conjunto especificado.</li> <li><code>static &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; copyOf(EnumSet&lt;E&gt; s)</code>: crea un conjunto de enumeraciones a partir de otro.</li> <li><code>static &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; noneOf(Class&lt;E&gt; elementType)</code>: crea un conjunto de enumeraciones vac\u00edo con el tipo de elemento especificado.</li> <li><code>static &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; of(E e)</code>: crea un conjunto de enumeraciones que contiene el elemento especificado. Este m\u00e9todo tiene varias sobrecargas para admitir m\u00e1s elementos.</li> <li><code>static &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; range(E from, E to)</code>: crea un conjunto de enumeraciones que contiene inicialmente todos los elementos del rango definido por los dos elementos especificados.</li> </ul> ENUMShowEnumSet <pre><code>public enum Operation {\nPLUS(\"+\"), MINUS(\"-\"), TIMES(\"*\"), DIVIDE(\"/\");\nprivate final String symbol;\nprivate Operation(String symbol) {\nthis.symbol = symbol;\n}\npublic String getSymbol() {\nreturn symbol;\n}\n}\n</code></pre> <pre><code>public class ShowEnumSet {\npublic void show() {\nEnumSet&lt;Operation&gt; allOperations1, allOperations2, operations1, operations2, operations3, operations4;\nallOperations1 = EnumSet.allOf(Operation.class);\nSystem.out.printf(\"allOf: %s\", allOperations1);//allOf: [PLUS, MINUS,TIMES, DIVIDE]\nallOperations2 = EnumSet.copyOf(allOperations1);\nSystem.out.printf(\"\\ncopyOf: %s\", allOperations2);//copyOf: [PLUS,MINUS, TIMES, DIVIDE]\noperations1 = EnumSet.noneOf(Operation.class);\noperations1.add(Operation.PLUS);\noperations1.add(Operation.MINUS);\nSystem.out.printf(\"\\nnoneOf y add: %s\", operations1);//noneOf y add: [PLUS, MINUS]\noperations2 = EnumSet.complementOf(operations1);\nSystem.out.printf(\"\\ncomplementOf: %s\", operations2);//complementOf:[TIMES, DIVIDE]\noperations3 = EnumSet.of(Operation.DIVIDE, Operation.MINUS);\nSystem.out.printf(\"\\nof: %s\", operations3);//of: [MINUS, DIVIDE]\noperations4 = EnumSet.range(Operation.MINUS, Operation.DIVIDE);\nSystem.out.printf(\"\\nrange: %s\\n\", operations4);//range: [MINUS,TIMES, DIVIDE]\nSystem.out.println(operations4.contains(Operation.PLUS));//false\nSystem.out.println(operations4.contains(Operation.MINUS));//true\n}\npublic static void main(String[] args) {\nnew ShowEnumSet().show();\n}\n}\n</code></pre>"},{"location":"bloque_iii/tema_11/page-4/","title":"4 Mapas","text":""},{"location":"bloque_iii/tema_11/page-4/#introduccion","title":"Introducci\u00f3n","text":"<p>Las colecciones de tipo Set tienen el inconveniente de tener que almacenar una copia exacta del elemento a buscar. Sin embargo, en la pr\u00e1ctica es habitual que haya datos que se consideren clave, es decir, que identifican a cada objeto (el dni de las personas por ejemplo) de tal manera que buscan los datos en base a esa clave y por otro lado se almacenan el resto de los datos. Los mapas permiten definir colecciones de elementos que poseen pares de datos clave-valor. Esto se utiliza para localizar valores en funci\u00f3n de la clave que poseen. Son muy interesantes y r\u00e1pidos. Los mapas tambi\u00e9n son conocidos como diccionarios.</p> <p>La interfaz <code>Map&lt;K,V&gt;</code> es la ra\u00edz de todas las clases que implementan mapas. Hasta la versi\u00f3n 5, los mapas eran colecciones de pares clave-valor donde tanto la clave como el valor eran de tipo Object. Desde la versi\u00f3n versi\u00f3n 5, esta interfaz tiene dos gen\u00e9ricos: <code>K</code> para el tipo de datos de la clave y <code>V</code> para el tipo de los valores. Esta estructura de datos nos permite obtener el objeto <code>V</code> muy r\u00e1pidamente a partir de su clave <code>K</code>.</p> <p>Esta interfaz no hereda de Collection por lo que no tiene los m\u00e9todos vistos anteriormente. La raz\u00f3n es que la obtenci\u00f3n, b\u00fasqueda y borrado de elementos se hace de una manera muy distinta.</p> <p>Las claves no se pueden repetir por lo que se implementan con una tabla hash para que no haya duplicados. Por lo tanto, la clase que se utilice como clave tiene que sobrescribir sus m\u00e9todos <code>equals()</code> y <code>hashCode()</code>.</p> <p>Veamos algunos m\u00e9todos de esta interfaz:</p> <ul> <li><code>boolean containsKey(Object key)</code>: devuelve true si el mapa contiene dicha clave.</li> <li><code>boolean containsValue(Object value)</code>: devuelve true si el mapa contiene dicho valor.</li> <li><code>V get(Object key)</code>: devuelve el valor asociado a la clave o null si no existe esa clave en el mapa.</li> <li><code>V getOrDefault(Object V, defaultValue)</code>: devuelve el valor asociado a la clave o defaultValue si no existe esa clave en el mapa.</li> <li><code>V put(K key, V value)</code>: a\u00f1ade un par clave-valor al mapa. Si ya hab\u00eda un valor para esa clave, se reemplaza. Devuelve el valor que ten\u00eda antes dicha clave o null si la clave no estaba en el mapa.</li> <li><code>V putIfAbsent(K key, V value)</code>: si la clave especificada no est\u00e1 ya asociada a un valor o est\u00e1 asignada a null, se le asocia el valor dado y devuelve null, en caso contrario, devuelve el valor previamente asociado con la clave.</li> <li><code>void putAll(Map&lt;? extends K, ? extends V&gt; m)</code>: a\u00f1ade los pares claves-valor del mapa m.</li> <li><code>V remove(Object key)</code>: elimina la clave y su valor asociado, el cual se devuelve. Si no existe dicha clave, devuelve null.</li> </ul> <p>Existen varios tipos de implementaciones realizadas dentro de la plataforma Java:</p> <ul> <li><code>HashMap</code>: esta implementaci\u00f3n almacena las claves en una tabla hash. Es la implementaci\u00f3n con mejor rendimiento de todas pero no garantiza ning\u00fan orden a la hora de realizar iteraciones.</li> <li><code>LinkedHashMap</code>: esta implementaci\u00f3n almacena las claves en funci\u00f3n del orden de la inserci\u00f3n. Es un poco m\u00e1s costosa que <code>HashMap</code>.</li> <li><code>TreeMap</code>: esta implementaci\u00f3n utiliza la estructura del \u00e1rbol para ordenar las claves. Es bastante m\u00e1s lenta que <code>HashMap</code>. La veremos m\u00e1s adelante en el apartado de los \u00e1rboles.</li> </ul>"},{"location":"bloque_iii/tema_11/page-4/#clase-hashmap","title":"Clase HashMap","text":"<p>Esta implementaci\u00f3n proporciona tiempos constantes en las operaciones b\u00e1sicas siempre y cuando la funci\u00f3n hash disperse de forma correcta las claves dentro de la tabla hash. Es importante definir el tama\u00f1o inicial de la tabla ya que este tama\u00f1o marcar\u00e1 el rendimiento de esta implementaci\u00f3n. No garantiza ning\u00fan orden a la hora de recorrer el mapa.</p> <p>Veamos un ejemplo de un mapa de veh\u00edculos donde la clave es la matr\u00edcula. A\u00f1adimos la matr\u00edcula como atributo por lo que hay generar de nuevo los m\u00e9todos <code>toString()</code>, <code>hashCode()</code>y <code>equals()</code>:</p> VehicleShowHashMapConsola <pre><code>public class Vehicle{\nprivate final String registration; // Atributo para almacenar la matr\u00edcula del coche\nprivate final int wheelCount;\nprivate double speed;\nprivate String colour;\npublic Vehicle(String registration, int wheelCount, String colour){\nthis.registration = registration;\nthis.wheelCount = wheelCount;\nthis.colour = colour;\nspeed = 0;\n}\npublic int getWheelCount(){\nreturn wheelCount;\n}\npublic double getSpeed(){\nreturn speed;\n}\npublic String getColour(){\nreturn colour;\n}\npublic void setColour(String colour){\nthis.colour = colour;\n}\npublic String getRegistration(){\nreturn registration;\n}\npublic void accelerate(double amount){\nspeed += amount;\n}\npublic void brake(double amount){\nspeed -= amount;\n}\n@Override\npublic String toString(){\nreturn \"Vehicle [registration=\" + registration + \", wheelCount=\" + wheelCount + \", speed=\" + speed + \", colour=\" + colour + \"]\";\n}\n@Override\npublic int hashCode(){\nfinal int prime = 31;\nint result = 1;\nresult = prime * result + ((colour == null) ? 0 : colour.hashCode());\nresult = prime * result + ((registration == null) ? 0 : registration.hashCode());\nresult = prime * result + wheelCount;\nreturn result;\n}\n@Override\npublic boolean equals(Object obj){\nif(this == obj) return true;\nif(obj == null) return false;\nif(!(obj instanceof Vehicle other)) return false;\nif(colour == null){\nif(other.colour != null){\nreturn false;\n}\n} else if(!colour.equals(other.colour)){\nreturn false;\n}\nif(registration == null){\nif(other.registration != null){\nreturn false;\n}\n} else if(!registration.equals(other.registration)){\nreturn false;\n}\nreturn wheelCount == other.wheelCount;\n}\n}\n</code></pre> <pre><code>public class ShowHashMap {\npublic void show() {\nMap&lt;String, Vehicle&gt; map = new HashMap&lt;&gt;();\nMap&lt;String, Vehicle&gt; map2 = new HashMap&lt;&gt;();\nVehicle vehicles[] = new Vehicle[6];\nvehicles[0] = new Vehicle(\"9685KMX\", 4, \"azul\");\nvehicles[1] = new Vehicle(\"1235GTR\", 2, \"rojo\");\nvehicles[2] = new Vehicle(\"7314QWE\", 4, \"verde\");\nvehicles[3] = new Vehicle(\"5930POI\", 2, \"negro\");\nvehicles[4] = new Vehicle(\"1705UBG\", 4, \"blanco\");\nvehicles[5] = new Vehicle(\"3495JZA\", 2, \"naranja\");\nfor (int i = 0; i &lt; vehicles.length; i++) {\nmap.put(vehicles[i].getRegistration(), vehicles[i]);\n}\nSystem.out.println(map.containsKey(\"1005SAW\"));//false\nSystem.out.println(map.containsKey(\"1705UBG\"));//true\nSystem.out.println(map.containsValue(new Vehicle(\"5930POI\", 4,\"negro\")));//false\nSystem.out.println(map.containsValue(new Vehicle(\"5930POI\", 2,\"negro\")));//true\nSystem.out.println(map.get(\"4554ASD\"));//null\nSystem.out.println(map.get(\"1705UBG\"));//Vehicle[registration=1705UBG, wheelCount=4, speed=0.0, colour=blanco]\nSystem.out.println(map.getOrDefault(\"8080SAS\", new Vehicle(\"4554ASD\", 4, \"negro\")));//Vehicle [registration=4554ASD, wheelCount=4, speed=0.0,colour=negro]\nSystem.out.println(map.getOrDefault(\"1705UBG\", new Vehicle(\"4554ASD\", 4, \"negro\")));//Vehicle [registration=1705UBG, wheelCount=4, speed=0.0,colour=blanco]\nSystem.out.println(map.put(\"6320LPL\", new Vehicle(\"6320LPL\", 2,\n\"verde\")));//null\nSystem.out.println(map.put(\"6320LPL\", new Vehicle(\"6320LPL\", 4,\n\"beis\")));//Vehicle [registration=6320LPL, wheelCount=2, speed=0.0,colour=verde]\nSystem.out.println(map.putIfAbsent(\"4687RTB\", new Vehicle(\"4687RTB\", 2, \"blanco\")));//null\nSystem.out.println(map.putIfAbsent(\"4687RTB\", new Vehicle(\"4687RTB\", 4, \"naranja\")));//Vehicle [registration=4687RTB, wheelCount=2, speed=0.0,colour=blanco]\nSystem.out.println(map.remove(\"1234ABC\"));//null\nSystem.out.println(map.remove(\"4687RTB\"));//Vehicle[registration=4687RTB, wheelCount=2, speed=0.0, colour=blanco]\nSystem.out.printf(\"El mapa tiene %d veh\u00edculos\", map.size());\nmap2.put(\"7410HJH\", new Vehicle(\"7410HJH\", 4, \"rojo\"));\nmap2.put(\"8520FGF\", new Vehicle(\"8520FGF\", 2, \"verde\"));\nmap.putAll(map2);//a\u00f1ade a map los pares clave-valor del mapa map2\nSystem.out.printf(\"\\nDespu\u00e9s de a\u00f1adirle map2, el mapa tiene %d veh\u00edculos\", map.size());\n}\npublic static void main(String[] args) {\nnew ShowHashMap().show();\n}\n}\n</code></pre> <pre><code>false\ntrue\nfalse\ntrue\nnull\nVehicle [registration=1705UBG, wheelCount=4, speed=0.0 colour=blanco]\nVehicle [registration=4554ASD, wheelCount=4, speed=0.0, colour=negro]\nVehicle [registration=1705UBG, wheelCount=4, speed=0.0, colour=blanco]\nnull\nVehicle [registration=6320LPL, wheelCount=2, speed=0.0, colour=verde]\nnull\nVehicle [registration=4687RTB, wheelCount=2, speed=0.0, colour=blanco]\nnull\nVehicle [registration=4687RTB, wheelCount=2, speed=0.0, colour=blanco]\nEl mapa tiene 7 veh\u00edculos\nDespu\u00e9s de a\u00f1adirle map2, el mapa tiene 9 veh\u00edculos\n</code></pre> <p>Veamos las distintas maneras de recorrer un mapa:</p> <ul> <li><code>Set&lt;K&gt; keySet()</code>: devuelve un conjunto con todas las claves. como entre las claves no puede haber elementos duplicados, las claves forman un conjunto (Set).</li> <li><code>Collection&lt;V&gt; values()</code>: devuelve una colecci\u00f3n con todos los valores. Los valores s\u00ed pueden estar duplicados, por lo tanto, este m\u00e9todo devuelve un Collection.</li> <li><code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet</code>: devuelve un conjunto de objetos Map.Entry. Los pares de elementos (tambi\u00e9n llamados entradas) de los que est\u00e1 compuesto un Map son de un tipo que viene implementado por la interfaz Map.Entry. La interfaz Map.Entry se define de forma interna a la interfaz Map y representa un objeto de par clave-valor, es decir, mediante esta interfaz podemos trabajar con una entrada del mapa. Veamos algunos m\u00e9todos de la interfaz Map.Entry. <li><code>K getKey()</code>: retorna la clave.</li> <li><code>V getValue()</code>: retorna el valor.</li> <li><code>V setValue(V value)</code>: reemplaza el valor por value y devuelve el valor anterior.</li> TraverseHashMapConsola <pre><code>public class TraverseHashMap {\npublic void show() {\nMap&lt;String, Vehicle&gt; map = new HashMap&lt;&gt;();\nVehicle vehicles[] = new Vehicle[6];\nvehicles[0] = new Vehicle(\"9685KMX\", 4, \"azul\");\nvehicles[1] = new Vehicle(\"1235GTR\", 2, \"rojo\");\nvehicles[2] = new Vehicle(\"7314QWE\", 4, \"verde\");\nvehicles[3] = new Vehicle(\"5930POI\", 2, \"negro\");\nvehicles[4] = new Vehicle(\"1705UBG\", 4, \"blanco\");\nvehicles[5] = new Vehicle(\"3495JZA\", 2, \"naranja\");\nfor (int i = 0; i &lt; vehicles.length; i++) {\nmap.put(vehicles[i].getRegistration(), vehicles[i]);\n}\nSystem.out.println(\"Claves del mapa:\\n\");\nfor (String s : map.keySet()) {//keySet() devuelve un conjunto con todas las claves\nSystem.out.println(s);\n}\nSystem.out.println(\"\\nValores del mapa:\\n\");\nfor (Vehicle v : map.values()) {//values() devuelve una colecci\u00f3n con todos los veh\u00edculos\nSystem.out.println(v);\n}\nSystem.out.println(\"\\nPares clave-valor del mapa usando un foreach:\\n\");\nfor (Map.Entry&lt;String, Vehicle&gt; entry : map.entrySet()) {\nSystem.out.printf(\"Matr\u00edcula -&gt; %s Veh\u00edculo -&gt; %s\\n\",entry.getKey(), entry.getValue());\n}\nSystem.out.println(\"\\nPares clave-valor del mapa usando iteradores:\\n\");\nSet&lt;Map.Entry&lt;String, Vehicle&gt;&gt; entrySet = map.entrySet();\nIterator&lt;Map.Entry&lt;String, Vehicle&gt;&gt; it = entrySet.iterator();\nMap.Entry&lt;String, Vehicle&gt; entry;\nwhile (it.hasNext()) {\nentry = it.next();\nSystem.out.printf(\"Matr\u00edcula -&gt; %s Veh\u00edculo -&gt; %s\\n\",\nentry.getKey(), entry.getValue());\n}\n}\npublic static void main(String[] args) {\nnew TraverseHashMap().show();\n}\n}\n</code></pre> <pre><code>Claves del mapa:\n\n3495JZA\n1705UBG\n1235GTR\n7314QWE\n9685KMX\n5930POI\n\nValores del mapa:\n\nVehicle [registration=3495JZA, wheelCount=2, speed=0.0, colour=naranja]\nVehicle [registration=1705UBG, wheelCount=4, speed=0.0, colour=blanco]\nVehicle [registration=1235GTR, wheelCount=2, speed=0.0, colour=rojo]\nVehicle [registration=7314QWE, wheelCount=4, speed=0.0, colour=verde]\nVehicle [registration=9685KMX, wheelCount=4, speed=0.0, colour=azul]\nVehicle [registration=5930POI, wheelCount=2, speed=0.0, colour=negro]\nPares clave-valor del mapa usando un foreach:\n\nMatr\u00edcula -&gt; 3495JZA Veh\u00edculo -&gt; Vehicle [registration=3495JZA, wheelCount=2, speed=0.0, colour=naranja]\nMatr\u00edcula -&gt; 1705UBG Veh\u00edculo -&gt; Vehicle [registration=1705UBG, wheelCount=4, speed=0.0, colour=blanco]\nMatr\u00edcula -&gt; 1235GTR Veh\u00edculo -&gt; Vehicle [registration=1235GTR, wheelCount=2, speed=0.0, colour=rojo]\nMatr\u00edcula -&gt; 7314QWE Veh\u00edculo -&gt; Vehicle [registration=7314QWE, wheelCount=4, speed=0.0, colour=verde]\nMatr\u00edcula -&gt; 9685KMX Veh\u00edculo -&gt; Vehicle [registration=9685KMX, wheelCount=4, speed=0.0, colour=azul]\nMatr\u00edcula -&gt; 5930POI Veh\u00edculo -&gt; Vehicle [registration=5930POI, wheelCount=2, speed=0.0, colour=negro]\nPares clave-valor del mapa usando iteradores:\n\nMatr\u00edcula -&gt; 3495JZA Veh\u00edculo -&gt; Vehicle [registration=3495JZA, wheelCount=2, speed=0.0, colour=naranja]\nMatr\u00edcula -&gt; 1705UBG Veh\u00edculo -&gt; Vehicle [registration=1705UBG, wheelCount=4, speed=0.0, colour=blanco]\nMatr\u00edcula -&gt; 1235GTR Veh\u00edculo -&gt; Vehicle [registration=1235GTR, wheelCount=2, speed=0.0, colour=rojo]\nMatr\u00edcula -&gt; 7314QWE Veh\u00edculo -&gt; Vehicle [registration=7314QWE, wheelCount=4, speed=0.0, colour=verde]\nMatr\u00edcula -&gt; 9685KMX Veh\u00edculo -&gt; Vehicle [registration=9685KMX, wheelCount=4, speed=0.0, colour=azul]\nMatr\u00edcula -&gt; 5930POI Veh\u00edculo -&gt; Vehicle [registration=5930POI, wheelCount=2, speed=0.0, colour=negro]\n</code></pre>"},{"location":"bloque_iii/tema_11/page-4/#clase-linkedhashmap","title":"Clase LinkedHashMap","text":"<p>Almacena las claves en funci\u00f3n del orden de inserci\u00f3n. Es un poco m\u00e1s costosa que <code>HashMap</code>.</p> MainConsola <pre><code>public class ShowLinkedHashMap {\npublic void show() {\nMap&lt;String, Vehicle&gt; map = new LinkedHashMap&lt;&gt;();\nVehicle vehicles[] = new Vehicle[6];\nvehicles[0] = new Vehicle(\"9685KMX\", 4, \"azul\");\nvehicles[1] = new Vehicle(\"1235GTR\", 2, \"rojo\");\nvehicles[2] = new Vehicle(\"7314QWE\", 4, \"verde\");\nvehicles[3] = new Vehicle(\"5930POI\", 2, \"negro\");\nvehicles[4] = new Vehicle(\"1705UBG\", 4, \"blanco\");\nvehicles[5] = new Vehicle(\"3495JZA\", 2, \"naranja\");\nfor (int i = 0; i &lt; vehicles.length; i++) {\nmap.put(vehicles[i].getRegistration(), vehicles[i]);\n}\nfor (Map.Entry&lt;String, Vehicle&gt; entry : map.entrySet()) {\nSystem.out.printf(\"Matr\u00edcula -&gt; %s Veh\u00edculo -&gt; %s\\n\",entry.getKey(), entry.getValue());\n}\n}\npublic static void main(String[] args) {\nnew ShowLinkedHashMap().show();\n}\n}\n</code></pre> <pre><code>Matr\u00edcula -&gt; 9685KMX Veh\u00edculo -&gt; Vehicle [registration=9685KMX, wheelCount=4, speed=0.0, colour=azul]\nMatr\u00edcula -&gt; 1235GTR Veh\u00edculo -&gt; Vehicle [registration=1235GTR, wheelCount=2, speed=0.0, colour=rojo]\nMatr\u00edcula -&gt; 7314QWE Veh\u00edculo -&gt; Vehicle [registration=7314QWE, wheelCount=4, speed=0.0, colour=verde]\nMatr\u00edcula -&gt; 5930POI Veh\u00edculo -&gt; Vehicle [registration=5930POI, wheelCount=2, speed=0.0, colour=negro]\nMatr\u00edcula -&gt; 1705UBG Veh\u00edculo -&gt; Vehicle [registration=1705UBG, wheelCount=4, speed=0.0, colour=blanco]\nMatr\u00edcula -&gt; 3495JZA Veh\u00edculo -&gt; Vehicle [registration=3495JZA, wheelCount=2, speed=0.0, colour=naranja]\n</code></pre> <p>Podemos observar que los datos se muestran en el mismo orden en el que se insertaron.</p>"},{"location":"bloque_iii/tema_11/page-4/#ejemplo-de-uso-de-un-mapa-en-un-enum","title":"Ejemplo de uso de un mapa en un enum","text":"<p>Si hemos sobrescrito el m\u00e9todo <code>toString()</code> o las instancias del enum tienen alguna forma adicional de referirnos a ellas, tiene bastante sentido que creemos un m\u00e9todo est\u00e1tico parecido a <code>valueOf()</code>, pero que reciba dicha forma adicional de referirnos a las instancias.</p> EnumMainConsola <pre><code>public enum Operation {\nPLUS(\"+\") {\n@Override\npublic double apply(double x, double y) {\nreturn x + y;\n}\n},\nMINUS(\"-\") {\n@Override\npublic double apply(double x, double y) {\nreturn x - y;\n}\n},\nTIMES(\"*\") {\n@Override\npublic double apply(double x, double y) {\nreturn x * y;\n}\n},\nDIVIDE(\"/\") {\n@Override\npublic double apply(double x, double y) {\nreturn x / y;\n}\n};\nprivate final String symbol;\nprivate static final Map&lt;String, Operation&gt; symbolToOperation = Map.of(Operation.PLUS.getSymbol(), Operation.PLUS, Operation.MINUS.getSymbol(), Operation.MINUS, Operation.TIMES.getSymbol(), Operation.TIMES,Operation.DIVIDE.getSymbol(), Operation.DIVIDE);\nprivate Operation(String symbol) {\nthis.symbol = symbol;\n}\npublic String getSymbol() {\nreturn symbol;\n}\npublic abstract double apply(double x, double y);\npublic static Operation fromSymbol(String symbol) {\nreturn symbolToOperation.get(symbol);\n}\n}\n</code></pre> <pre><code>public class ExampleUseMapEnum {\npublic void show() {\nOperation operation;\noperation = Operation.fromSymbol(\"+\");//operation se asigna con la instancia correspondiente al s\u00edmbolo +\nSystem.out.printf(\"La variable operation es de tipo enum %s y su s\u00edmbolo es %s\", operation, operation.getSymbol());\n}\npublic static void main(String[] args) {\nnew ExampleUseMapEnum().show();\n}\n}\n</code></pre> <pre><code>La variable operation es de tipo enum PLUS y su s\u00edmbolo es +\n</code></pre> <p>Como vemos en el c\u00f3digo anterior, creamos un mapa est\u00e1tico que relaciona cada s\u00edmbolo con cada instancia, de manera que podamos obtener la instancia adecuada a partir del s\u00edmbolo. Debemos tener en cuenta que no est\u00e1 permitido que los constructores de las instancias de un enum accedan a los atributos est\u00e1ticos del enum, con la excepci\u00f3n de las constantes de las instancias, dado que los atributos est\u00e1ticos a\u00fan no han sido inicializados cuando se est\u00e1n ejecutando los constructores de las instancias. Un caso especial de esta restricci\u00f3n es que en los constructores de las instancias tampoco se puede acceder a otras instancias del enum.</p>"},{"location":"bloque_iii/tema_11/page-4/#clases-enummap","title":"Clases EnumMap","text":"<p>Es una implementaci\u00f3n de mapa muy eficiente donde las claves son elementos de una enumeraci\u00f3n:</p> EnumMainConsola <pre><code>public enum Operation {\nPLUS(\"+\"), MINUS(\"-\"), TIMES(\"*\"), DIVIDE(\"/\");\nprivate final String symbol;\nprivate Operation(String symbol) {\nthis.symbol = symbol;\n}\npublic String getSymbol() {\nreturn symbol;\n}\n}\n</code></pre> <pre><code>public class ShowEnumMap {\npublic void show() {\nEnumMap&lt;Operation, String&gt; operationsMap = new EnumMap&lt;&gt;(Operation.class);\noperationsMap.put(Operation.PLUS, \"Esta operaci\u00f3n se utiliza para sumar\");\noperationsMap.put(Operation.MINUS, \"Esta operaci\u00f3n se utiliza para restar\");\noperationsMap.put(Operation.TIMES, \"Esta operaci\u00f3n se utiliza para multiplicar\");\noperationsMap.put(Operation.DIVIDE, \"Esta operaci\u00f3n se utiliza para dividir\");\nfor (Map.Entry&lt;Operation, String&gt; entry : operationsMap.entrySet()) {\nSystem.out.printf(\"%-6s: %s\\n\", entry.getKey(), entry.getValue());\n}\n}\npublic static void main(String[] args) {\nnew ShowEnumMap().show();\n}\n}\n</code></pre> <pre><code>PLUS : Esta operaci\u00f3n se utiliza para sumar\nMINUS : Esta operaci\u00f3n se utiliza para restar\nTIMES : Esta operaci\u00f3n se utiliza para multiplicar\nDIVIDE: Esta operaci\u00f3n se utiliza para dividir\n</code></pre>"},{"location":"bloque_iii/tema_11/page-5/","title":"5 \u00c1rboles","text":""},{"location":"bloque_iii/tema_11/page-5/#introduccion","title":"Introducci\u00f3n","text":"<p>Los \u00e1rboles se caracterizan por almacenar sus nodos en forma jer\u00e1rquica y no en forma lineal como las listas</p> <p> Figura 1 - \u00c1rboles</p> <p>Un \u00e1rbol es una estructura en la que los datos se organizan en nodos. Los \u00e1rboles binarios son aquellos en los que un nodo solamente puede tener dos hijos como m\u00e1ximo. Se utilizan para ordenar datos, de tal manera que a la izquierda se colocan los valores menores y a la derecha los valores mayores. Un \u00e1rbol binario se puede recorrer de varias formas, siendo el recorrido inorden el que muestra los datos ordenados: sub\u00e1rbol izquierdo, ra\u00edz, sub\u00e1rbol derecho. Veamos un ejemplo.</p> <p> Figura 2 - Ejemplo \u00e1rbol</p> <p>Nos posicionamos en el 9. Mientras tenga sub\u00e1rbol izquierdo vamos avanzando hasta llegar al 1. Como es una hoja, la mostramos: el 1. Luego mostramos la ra\u00edz: el 3. Despu\u00e9s, continuamos con el sub\u00e1rbol derecho. Nos encontramos con el 6, pero tiene sub\u00e1rbol izquierdo, as\u00ed avanzamos hasta el 4. Como es una hoja, los mostramos: el 4. Luego, continuamos con la ra\u00edz: el 6. Despu\u00e9s, continuamos con el sub\u00e1rbol derecho, avanzando hasta el 7. Como es hoja, lo mostramos: el 7. Ya hemos tratado todo el sub\u00e1rbol izquierdo del 8, que es la ra\u00edz. Ahora mostramos la ra\u00edz: el 8 y a continuaci\u00f3n comenzamos con el sub\u00e1rbol derecho del 8. Y as\u00ed sucesivamente. El resultado final es: 1,3,4,6,7,8,10,13 y 14, es decir, los elementos ordenador de menor a mayor.</p> <p>Si queremos introducir un nuevo nodo en el \u00e1rbol, hay que tener en cuidado de no romper la estructura ni el orden del \u00e1rbol. Hay que tener en cuenta que cada nodo nunca se podr\u00e1 insertar como su hijo. Con esta restricci\u00f3n nos aseguramos de mantener la estructura del \u00e1rbol, pero a\u00fan nos falta mantener el orden. Para localizar el lugar adecuado del \u00e1rbol donde insertar el nuevo nodo se realizan comparaciones entre los nodos del \u00e1rbol y el elemento a insertar. El primer nodo que se compara es el nodo ra\u00edz, si el nuevo nodo es menor que el ra\u00edz, la b\u00fasqueda prosigue por el lado izquierdo de \u00e9ste. Si el nuevo nodo fuese mayor, la b\u00fasqueda seguir\u00eda por el hijo derecho. Y as\u00ed, sucesivamente hasta llegar a un nodo que no tenga hijo en la rama por la que la b\u00fasqueda deber\u00eda seguir. En este caso, el nuevo nodo se inserta en ese hueco, como su nuevo hijo.</p> <p>Por ejemplo, queremos insertar el elemento 9. Lo primero es comparar el nuevo elemento con el nodo ra\u00edz. Como 9 &gt; 8, entonces la b\u00fasqueda prosigue por el lado derecho. Ahora el nuevo nodo se compara con el elemento 10. En este caso 9 &lt; 10, por lo que hay que continuar la b\u00fasqueda por la rama izquierda. Como la rama izquierda de 10 no tiene ning\u00fan nodo, se inserta en ese lugar el nuevo nodo.</p> <p>La interfaz <code>SortedSet&lt;E&gt;</code> es la encargada de definir esta estructura. Esta interfaz es hija de <code>Set&lt;E&gt;</code>, que a su vez es hija de <code>Collection&lt;E&gt;</code>, que a su vez es hija de `Iterable. Por lo tanto, tiene los m\u00e9todos de todas y adem\u00e1s a\u00f1ade sus propios m\u00e9todos. <ul> <li><code>E first()</code>: devuelve el elemento m\u00e1s peque\u00f1o.</li> <li><code>E last()</code>: devuelve el elemento m\u00e1s grande.</li> <li><code>SortedSet&lt;E&gt; headSet(E toElement)</code>: devuelve un SortedSet que contendr\u00e1 todos los elementos menores que toElement.</li> <li><code>SortedSet&lt;E&gt; tailSet(E fromElement)</code>: devuelve un SortedSet que contendr\u00e1 todos los elementos mayores que fromElement.</li> <li><code>SortedSet&lt;E&gt; subSet(E fromElement, E toElement)</code>: devuelve un SortedSet que contendr\u00e1 los elementos que van desde fromElement incluido haste toElement excluido.</li> </ul> <p>Pero, \u00bfc\u00f3mo ordenamos los elementos por ejemplo veh\u00edculos? Para ello, Java nos proporciona dos interfaces: <code>Comparable&lt;T&gt;</code> y <code>Comparator&lt;T&gt;</code>. La diferencia entre ambas es que Comparable se implementa desde la propia clase que se quiere ordenar y Comparator^ no.</p>"},{"location":"bloque_iii/tema_11/page-5/#interfaz-comparable","title":"Interfaz Comparable","text":"<p>La interfaz <code>Comparable</code> contiene un \u00fanico m\u00e9todo, el m\u00e9todo <code>compareTo</code>, que recibe un objeto de la misma clase y que debe realizar una comparaci\u00f3n entre ambos objetos, retornando un valor entero negativo, cero o positivo, dependiendo de si el objeto sobre el que se ejecuta es respectivamente, menor, igual o mayor que el objeto recibido.</p> <p>La definici\u00f3n de la interfaz es la siguiente:</p> <pre><code>public interface Comparable&lt;T&gt;{\nint compareTo(T o);\n}\n</code></pre> <p>Por ejemplo, si quisi\u00e9ramos crear un \u00e1rbol para ordenar los veh\u00edculos lo primero que tendr\u00edamos que hacer es que la clase Vehicle implemente la interfaz Comparable y que el m\u00e9todo compareTo ordene por el atributo que deseemos. Por ejemplo, vamos a ordenar veh\u00edculos alfab\u00e9ticamente por el color. Como el color es de tipo String, debemos utilizar el compareTo de la clase String:</p> VehicleMain <pre><code>public class Vehicle implements Comparable&lt;Vehicle&gt; {\nprivate String registration;\nprivate int wheelCount;\nprivate double speed;\nprivate String colour;\npublic Vehicle(String registration, int wheelCount, String colour) {\nthis.registration = registration;\nthis.wheelCount = wheelCount;\nthis.colour = colour;\nspeed = 0;\n}\npublic int getWheelCount() {\nreturn wheelCount;\n}\npublic double getSpeed() {\nreturn speed;\n}\npublic String getColour() {\nreturn colour;\n}\npublic void setColour(String colour) {\nthis.colour = colour;\n}\npublic String getRegistration() {\nreturn registration;\n}\npublic void accelerate(double amount) {\nspeed += amount;\n}\npublic void brake(double amount) {\nspeed -= amount;\n}\n@Override\npublic String toString() {\nreturn \"Vehicle [registration=\" + registration + \", wheelCount=\" +  wheelCount + \", speed=\" + speed + \", colour=\"\n+ colour + \"]\";\n}\n@Override\npublic int compareTo(Vehicle o) {\nreturn colour.compareTo(o.colour);\n}\n}\n</code></pre> <pre><code>public class Compare{\npublic void show(){\nVehicle v1 = new Vehicle(\"9685KMX\", 4, \"azul\");\nVehicle v2 = new Vehicle(\"1235GTR\", 2, \"rojo\");\nVehicle v3 = new Vehicle(\"7314QWE\", 4, \"rojo\");\nSystem.out.println(v1.compareTo(v2)); // positivo -&gt; v1 &gt; v2\nSystem.out.println(v2.compareTo(v1)); // negativo -&gt; v2 &lt; v1\nSystem.out.println(v1.compareTo(v3)); // 0 -&gt; v1 == v3\n}\npublic static void main(String[] args){\nnew Compare().show();\n}\n}\n</code></pre>"},{"location":"bloque_iii/tema_11/page-5/#interfaz-comparator","title":"Interfaz Comparator","text":"<p>La interfaz <code>Comparator&lt;T&gt;</code> es una interfaz que define el m\u00e9todo <code>compare</code>al que se le pasan los dos objetos a comparar y cuyo resultado es como el del compareTo (0 si son iguales, positivo si el primero es mayor y negativo si el segundo es mayor). Para definir un comparador de este forma, hay que crear una clase que implemente esta interfaz y definir el m\u00e9todo compare, despu\u00e9s crear un objeto de ese tipo y usarlo.</p> VehicleComparatorMain <pre><code>public class VehicleComparator implements Comparator&lt;Vehicle&gt;{\n@Override\npublic int compare(Vehicle o1, Vehicle o2){\nreturn o1.getColour().compareTo(o2.getColour());\n}\n}\n</code></pre> <pre><code>public class Comparator{\npublic void show(){\nVehicle v1 = new Vehicle(\"9685KMX\", 4, \"azul\");\nVehicle v2 = new Vehicle(\"1235GTR\", 2, \"rojo\");\nVehicle v3 = new Vehicle(\"7314QWE\", 4, \"rojo\");\nVehicleComparator comparator = new VehicleComparator();\nSystem.out.println(comparator.compare(v1, v2)); // positivo -&gt; v1 &gt; v2\nSystem.out.println(comparator.compare(v2, v1)); // negativo -&gt; v2 &lt; v1\nSystem.out.println(comparator.compare(v1, v3)); // 0 -&gt; v1 == v3\n}\npublic static void main(String[] args){\nnew Comparator().show();\n}\n}\n</code></pre> <p>Si dicha clase, solo va a ser utilizada una \u00fanica vez, se recomienda usar una clase an\u00f3nima en l\u00ednea:</p> <pre><code>public class ComparatorAnonymous{\npublic void show(){\nVehicle v1 = new Vehicle(\"9685KMX\", 4, \"azul\");\nVehicle v2 = new Vehicle(\"1235GTR\", 2, \"rojo\");\nVehicle v3 = new Vehicle(\"7314QWE\", 4, \"rojo\");\nComparator comparator = new Comparator&lt;Vehicle&gt;(){\n@Override\npublic int compare(Vehicle o1, Vehicle o2){\nreturn o1.getColour().compareTo(o2.getColour());\n}\n};\nSystem.out.println(comparator.compare(v1, v2)); // positivo -&gt; v1 &gt; v2\nSystem.out.println(comparator.compare(v2, v1)); // negativo -&gt; v2 &lt; v1\nSystem.out.println(comparator.compare(v1, v3)); // 0 -&gt; v1 == v3\n}\npublic static void main(String[] args){\nnew ComparatorAnonymous().show();\n}\n}\n</code></pre> <p>Para ordenar descendientemente se cambiar\u00eda el orden de <code>o1</code> por el de <code>o2</code>.</p>"},{"location":"bloque_iii/tema_11/page-5/#usos-de-comparable-y-comparator","title":"Usos de comparable y comparator","text":"<p>Cuando creemos clases que representen valores que posean un determinado orden natural, como por ejemplo un orden alfab\u00e9tico, num\u00e9rico o cronol\u00f3gico, deberemos hacer que dicha clase implemente la interfaz  Comparable, permitiendo as\u00ed que los objetos de dicha clase puedan trabajar con mucho algoritmos gen\u00e9ricos e implementaciones de colecciones que dependen de dicha interfaz.</p> <p>La mayor\u00eda de las clases est\u00e1ndar que representan valores y de las clases enums incorporadas a Java,  implementan  la  interfaz  Comparable,  como  por  ejemplo  la  clase  String.  Las  clases  que definamos nosotros que representen valores tambi\u00e9n deber\u00edan implementarla.</p> <p>A la hora de realizar la implementaci\u00f3n debemos respetar una serie de reglas:</p> <ul> <li><code>x.compareTo(y) == -y.compareTo(x)</code>  para todo valor de  x  e  y .</li> <li>La relaci\u00f3n es transitiva, es decir, que si  <code>(x. compareTo(y) &gt; 0 &amp;&amp; y.compareTo(z) &gt;0)</code> entonces  <code>x.compareTo(z) &gt; 0</code>.</li> <li>Si  <code>x.compareTo(y) == 0</code>  entonces  <code>x.compareTo(z) == y.compareTo(z)</code> para cualquier valor de  z.</li> <li>Aunque  no  es  obligatorio  se  recomienda  que  <code>(x.compareTo(y) == 0)</code> == <code>(x.equals(y))</code>.</li> </ul> <p>Si para comparar los objetos debemos comparar un atributo de un tipo primitivo, se recomienda usar los m\u00e9todos est\u00e1ticos de comparaci\u00f3n  compare   de  las  clases  boxed  correspondientes, como <code>Long.compare()</code>,  <code>Float.compare()</code>, etc., disponibles a partir de Java 7, en vez de usar los operadores <code>&lt;</code>  o <code>&gt;</code>, ya que son menos verbosos y propensos al error:</p>"},{"location":"bloque_iii/tema_11/page-5/#clase-treeset","title":"Clase TreeSet","text":"<p>La clase <code>TreeSet&lt;E&gt;</code> es la que se utiliza prioritariamente para trabajar con \u00e1rboles ordenados ya que implementa la interfaz <code>SortedSet&lt;E&gt;</code>.</p> <p>Los objetos a incluir en un TreeSet deben implementar Comparable o bien crear el \u00e1rbol con un constructor que reciba un Comparator</p> <p>Ejemplo:</p> VehicleMainConsola <pre><code>public class Vehicle implements Comparable&lt;Vehicle&gt; {\nprivate String registration;\nprivate int wheelCount;\nprivate double speed;\nprivate String colour;\npublic Vehicle(String registration, int wheelCount, String colour) {\nthis.registration = registration;\nthis.wheelCount = wheelCount;\nthis.colour = colour;\nspeed = 0;\n}\npublic int getWheelCount() {\nreturn wheelCount;\n}\npublic double getSpeed() {\nreturn speed;\n}\npublic String getColour() {\nreturn colour;\n}\npublic void setColour(String colour) {\nthis.colour = colour;\n}\npublic String getRegistration() {\nreturn registration;\n}\npublic void accelerate(double amount) {\nspeed += amount;\n}\npublic void brake(double amount) {\nspeed -= amount;\n}\n@Override\npublic String toString() {\nreturn \"Vehicle [registration=\" + registration + \", wheelCount=\" +  wheelCount + \", speed=\" + speed + \", colour=\"\n+ colour + \"]\";\n}\n@Override\npublic int compareTo(Vehicle o) {\nreturn colour.compareTo(o.colour);\n}\n}\n</code></pre> <pre><code>public class TreeSet1{\npublic void show(){\nSortedSet&lt;Vehicle&gt; tree = new TreeSet&lt;&gt;();\ntree.add(new Vehicle(\"9685KMX\", 4, \"azul\"));\ntree.add(new Vehicle(\"1235GTR\", 2, \"rojo\"));\ntree.add(new Vehicle(\"7314QWE\", 4, \"verde\"));\ntree.add(new Vehicle(\"5930POI\", 2, \"negro\"));\ntree.add(new Vehicle(\"1705UBG\", 4, \"blanco\"));\ntree.add(new Vehicle(\"3495JZA\", 2, \"naranja\"));\nfor(Vehicle v: tree){\nSystem.out.println(v);\n}\n}\npublic static void main(String[] args){\nnew TreeSet1().show();\n}\n}\n</code></pre> <pre><code>Vehicle [registration=9685KMX, wheelCount=4, speed=0.0, colour=azul]\nVehicle [registration=1705UBG, wheelCount=4, speed=0.0, colour=blanco]\nVehicle [registration=3495JZA, wheelCount=2, speed=0.0, colour=naranja]\nVehicle [registration=5930POI, wheelCount=2, speed=0.0, colour=negro]\nVehicle [registration=1235GTR, wheelCount=2, speed=0.0, colour=rojo]\nVehicle [registration=7314QWE, wheelCount=4, speed=0.0, colour=verde]\n</code></pre> <p>Pero, \u00bfqu\u00e9 ocurrir\u00eda si tuvi\u00e9ramos colores repetidos?:</p> MainConsola <pre><code>import java.util.SortedSet;\nimport java.util.TreeSet;\npublic class TreeSet2 {\npublic void show() {\nSortedSet&lt;Vehicle&gt; tree = new TreeSet&lt;&gt;();\ntree.add(new Vehicle(\"9685KMX\", 4, \"azul\"));\ntree.add(new Vehicle(\"1235GTR\", 2, \"rojo\"));\ntree.add(new Vehicle(\"7314QWE\", 4, \"verde\"));\ntree.add(new Vehicle(\"5930POI\", 2, \"azul\"));\ntree.add(new Vehicle(\"1705UBG\", 4, \"rojo\"));\ntree.add(new Vehicle(\"3495JZA\", 2, \"verde\"));\nfor (Vehicle v : tree) {\nSystem.out.println(v);\n}\n}\npublic static void main(String[] args) {\nnew TreeSet2().show();\n}\n}\n</code></pre> <pre><code>Vehicle [registration=9685KMX, wheelCount=4, speed=0.0, colour=azul]\nVehicle [registration=1235GTR, wheelCount=2, speed=0.0, colour=rojo]\nVehicle [registration=7314QWE, wheelCount=4, speed=0.0, colour=verde]\n</code></pre> <p>Los tres primero veh\u00edculos se introducen en el \u00e1rbol. Cuando se va a introducir el cuarto que es de color azul, el \u00e1rbol lo va comparando con compareTo con los veh\u00edculos que ya existen el \u00e1rbol para encontrar la posici\u00f3n ordenada donde incluirlo. Pero cuando lo compara con el que es azul, el compareTo, devuelve 0, por lo que el \u00e1rbol interpreta que ese objeto ya existe en el \u00e1rbol, que es igual a otro, por lo tanto no lo incluye en el \u00e1rbol. Lo mismo ocurre con el quinto y el sexto. Por lo tanto, lo que ocurrir\u00eda es que los 3 \u00faltimos no se introducen en el \u00e1rbol porque compareTo devuelve 0 entre veh\u00edculos del mismo color, por lo que el \u00e1rbol considera que son iguales. En estos casos, lo que se hace es que se incluye un segundo criterio de comparaci\u00f3n: vamos a ordenar por el color, y en aquellos casos donde los veh\u00edculos tengan el mismo color entonces vamos a ordenar por matr\u00edcula.</p> VehicleMainConsola <pre><code>public class Vehicle implements Comparable&lt;Vehicle&gt;{\n//...\n@Override\npublic int compareTo(Vehicle o){\nint result = colour.compareTo(o.colour);\nif(result == 0){\nresult = registration.compareTo(o,registration);\n}\nreturn result;\n}\n}\n</code></pre> <pre><code>import java.util.SortedSet;\nimport java.util.TreeSet;\npublic class ShowTreeSet {\npublic void show() {\nSortedSet&lt;Vehicle&gt; tree = new TreeSet&lt;&gt;();\ntree.add(new Vehicle(\"9685KMX\", 4, \"azul\"));\ntree.add(new Vehicle(\"1235GTR\", 2, \"rojo\"));\ntree.add(new Vehicle(\"7314QWE\", 4, \"verde\"));\ntree.add(new Vehicle(\"5930POI\", 2, \"azul\"));\ntree.add(new Vehicle(\"1705UBG\", 4, \"rojo\"));\ntree.add(new Vehicle(\"3495JZA\", 2, \"verde\"));\nfor (Vehicle v : tree) {\nSystem.out.println(v);\n}\n}\npublic static void main(String[] args) {\nnew ShowTreeSet().show();\n}\n}\n</code></pre> <pre><code>Vehicle [registration=5930POI, wheelCount=2, speed=0.0, colour=azul]\nVehicle [registration=9685KMX, wheelCount=4, speed=0.0, colour=azul]\nVehicle [registration=1235GTR, wheelCount=2, speed=0.0, colour=rojo]\nVehicle [registration=1705UBG, wheelCount=4, speed=0.0, colour=rojo]\nVehicle [registration=3495JZA, wheelCount=2, speed=0.0, colour=verde]\nVehicle [registration=7314QWE, wheelCount=4, speed=0.0, colour=verde]\n</code></pre> <p>Pero, \u00bfqu\u00e9 ocurrir\u00eda si la clase Vehicle no implementase la interfaz Comparable? Pues que no contendr\u00eda el m\u00e9todo compareTo, entonces el \u00e1rbol no tendr\u00eda la informaci\u00f3n de c\u00f3mo ordenar los veh\u00edculos. En este caso, se lanzar\u00eda una excepci\u00f3n <code>ClassCastException</code>.</p> VehicleMainConsola <pre><code>public class Vehicle{\n//...\n// No contiene el m\u00e9todo compareTo\n}\n</code></pre> <pre><code>import java.util.SortedSet;\nimport java.util.TreeSet;\npublic class ShowException{\npublic void show(){\nSortedSet&lt;Vehicle&gt; = new TreeSet&lt;&gt;();\ntree.add(new Vehicle(\"9685KMX\", 4, \"azul\"));\ntree.add(new Vehicle(\"1235GTR\", 2, \"rojo\"));\ntree.add(new Vehicle(\"7314QWE\", 4, \"verde\"));\ntree.add(new Vehicle(\"5930POI\", 2, \"negro\"));\ntree.add(new Vehicle(\"1705UBG\", 4, \"blanco\"));\ntree.add(new Vehicle(\"3495JZA\", 2, \"naranja\"));\nfor(Vehicle v: tree){\nSystem.out.println(v);\n}\n}\npublic static void main(String[] args){\nnew ShowException().show();\n}\n}\n</code></pre> <pre><code>Exception in thread \"main\" java.lang.ClassCastException: class \ntema11_Colecciones.arboles3.Vehicle cannot be cast to class\njava.lang.Comparable (tema11_Colecciones.arboles3.Vehicle is in unnamed module\nof loader 'app'; java.lang.Comparable is in module java.base of loader\n'bootstrap')\nat java.base/java.util.TreeMap.compare(TreeMap.java:1291)\nat java.base/java.util.TreeMap.put(TreeMap.java:536)\nat java.base/java.util.TreeSet.add(TreeSet.java:255)\nat tema11_Colecciones.arboles3.ShowException.show(ShowException.java:11)\nat tema11_Colecciones.arboles3.ShowException.main(ShowException.java:25)\n</code></pre> <p>Otra posibilidad es utilizar un objeto <code>Comparator&lt;E&gt;</code>. Para ello, se crea la clase que implementa dicha interfaz y se usar\u00eda en la construcci\u00f3n del \u00e1rbol mediante un constructor que recibe un Comparator: <code>TreeSet(Comparator&lt;? super E&gt; comparator)</code>. En este caso, \u00e9sa ser\u00e1 la forma prioritaria para ordenar la lista, por encima del m\u00e9todo compareTo de la interfaz Comparable. Como ya dijimos anteriormente, la diferencia entre Comparable y Comparator es que Comparable se implementa desde la propia clase que se quiere ordenar y Comparator no, ya que Comparator se implementa desde otra clase distinta a la que se quiere ordenar:</p> VehicleComparatorMainConsola <pre><code>import java.util.comparator;\npublic class VehicleComparator implements Comparator&lt;Vehicle&gt;{\n@Override\npublic int compare(Vehicle o1, Vehicle o2){\nint result = o1.getColour().compareTo(o2.getColour());\nif(result == 0){\nresult = o1.getRegistration().compareTo(o2.getRegistration());\n}\nreturn result;\n}\n}\n</code></pre> <pre><code>import java.util.SortedSet;\nimport java.util.TreeSet;\npublic class ShowComparator {\npublic void show() {\nSortedSet&lt;Vehicle&gt; tree = new TreeSet&lt;&gt;(new VehicleComparator());\ntree.add(new Vehicle(\"9685KMX\", 4, \"azul\"));\ntree.add(new Vehicle(\"1235GTR\", 2, \"rojo\"));\ntree.add(new Vehicle(\"7314QWE\", 4, \"verde\"));\ntree.add(new Vehicle(\"5930POI\", 2, \"azul\"));\ntree.add(new Vehicle(\"1705UBG\", 4, \"rojo\"));\ntree.add(new Vehicle(\"3495JZA\", 2, \"verde\"));\nfor (Vehicle v : tree) {\nSystem.out.println(v);\n}\n}\npublic static void main(String[] args) {\nnew ShowComparator().show();\n}\n}\n</code></pre> <pre><code>Vehicle [registration=5930POI, wheelCount=2, speed=0.0, colour=azul]\nVehicle [registration=9685KMX, wheelCount=4, speed=0.0, colour=azul]\nVehicle [registration=1235GTR, wheelCount=2, speed=0.0, colour=rojo]\nVehicle [registration=1705UBG, wheelCount=4, speed=0.0, colour=rojo]\nVehicle [registration=3495JZA, wheelCount=2, speed=0.0, colour=verde]\nVehicle [registration=7314QWE, wheelCount=4, speed=0.0, colour=verde]\n</code></pre> <p>Pero si esta comparaci\u00f3n la vamos a utilizar solamente una vez, tenemos que crear una clase solamente para su uso. Y si necesitamos ordenar los veh\u00edculos de varias maneras, tenemos que tener una clase por cada criterio de ordenaci\u00f3n. En estos casos, podemos utilizar una clase inline an\u00f3nima:</p> MainConsola <pre><code>import java.util.Comparator;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\npublic class AnonymousComparator {\npublic void show() {\nSortedSet&lt;Vehicle&gt; tree = new TreeSet&lt;&gt;(new Comparator&lt;Vehicle&gt;(){\n@Override\npublic int compare(Vehicle o1, Vehicle o2){\nint result = o1.getColour().compareTo(o2.getColour());\nif(result == 0){\nresult = o1.getRegistration().compareTo(o2.getRegistration());\n}\nreturn result;\n}\n});\ntree.add(new Vehicle(\"9685KMX\", 4, \"azul\"));\ntree.add(new Vehicle(\"1235GTR\", 2, \"rojo\"));\ntree.add(new Vehicle(\"7314QWE\", 4, \"verde\"));\ntree.add(new Vehicle(\"5930POI\", 2, \"azul\"));\ntree.add(new Vehicle(\"1705UBG\", 4, \"rojo\"));\ntree.add(new Vehicle(\"3495JZA\", 2, \"verde\"));\nfor (Vehicle v : tree) {\nSystem.out.println(v);\n}\n}\npublic static void main(String[] args) {\nnew AnonymousComparator().show();\n}\n}\n</code></pre> <pre><code>Vehicle [registration=5930POI, wheelCount=2, speed=0.0, colour=azul]\nVehicle [registration=9685KMX, wheelCount=4, speed=0.0, colour=azul]\nVehicle [registration=1235GTR, wheelCount=2, speed=0.0, colour=rojo]\nVehicle [registration=1705UBG, wheelCount=4, speed=0.0, colour=rojo]\nVehicle [registration=3495JZA, wheelCount=2, speed=0.0, colour=verde]\nVehicle [registration=7314QWE, wheelCount=4, speed=0.0, colour=verde]\n</code></pre> <p>Si quisi\u00e9ramos ordenar de manera descendente, cambiamos el orden entre o1 y o2, es decir, hacemos que sea o2 el que ejecute el compareTo</p> MainConsola <pre><code>import java.util.Comparator;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\npublic class DescendingOrder {\npublic void show() {\nSortedSet&lt;Vehicle&gt; tree = new TreeSet&lt;&gt;(new Comparator&lt;Vehicle&gt;(){\n/*\n             * Si quisi\u00e9ramos ordenar de manera descendente,\n             * cambiamos el orden entre o1 y o2, es decir,\n             * hacemos que sea o2 el que ejecute el compareTo\n             */\n@Override\npublic int compare(Vehicle o1, Vehicle o2){\nint result = o2.getColour().compareTo(o1.getColour());\nif(result == 0){\nresult = o2.getRegistration().compareTo(o1.getRegistration());\n}\nreturn result;\n}\n});\ntree.add(new Vehicle(\"9685KMX\", 4, \"azul\"));\ntree.add(new Vehicle(\"1235GTR\", 2, \"rojo\"));\ntree.add(new Vehicle(\"7314QWE\", 4, \"verde\"));\ntree.add(new Vehicle(\"5930POI\", 2, \"azul\"));\ntree.add(new Vehicle(\"1705UBG\", 4, \"rojo\"));\ntree.add(new Vehicle(\"3495JZA\", 2, \"verde\"));\nfor (Vehicle v : tree) {\nSystem.out.println(v);\n}\n}\npublic static void main(String[] args) {\nnew DescendingOrder().show();\n}\n}\n</code></pre> <pre><code>Vehicle [registration=5930POI, wheelCount=2, speed=0.0, colour=azul]\nVehicle [registration=9685KMX, wheelCount=4, speed=0.0, colour=azul]\nVehicle [registration=1235GTR, wheelCount=2, speed=0.0, colour=rojo]\nVehicle [registration=1705UBG, wheelCount=4, speed=0.0, colour=rojo]\nVehicle [registration=3495JZA, wheelCount=2, speed=0.0, colour=verde]\nVehicle [registration=7314QWE, wheelCount=4, speed=0.0, colour=verde]\n</code></pre> <p>Los comparadores de tipo Comparator permiten ordenar de diferentes formas, por eso en la pr\u00e1ctica se utilizan mucho. Por ejemplo, el m\u00e9todo sort de la clase Arrays tambi\u00e9n admite indicar un comparador para saber de qu\u00e9 forma deseamos ordenar el array.</p> CompareBoxedClassesConsola <pre><code>import java.util.Comparator;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\npublic class CompareBoxedClasses {\npublic void show() {\nSortedSet&lt;Vehicle&gt; tree = new TreeSet&lt;&gt;(new Comparator&lt;Vehicle&gt;() {\n@Override\npublic int compare(Vehicle o1, Vehicle o2) {\nint result = Integer.compare(o1.getWheelCount(), o2.getWheelCount());\nif (result == 0) {\nresult = Double.compare(o1.getSpeed(), o2.getSpeed());\n}\nreturn result;\n}\n});\nVehicle vehicles[] = new Vehicle[6];\nvehicles[0] = new Vehicle(\"9685KMX\", 4, \"azul\");\nvehicles[0].accelerate(100);\nvehicles[1] = new Vehicle(\"1235GTR\", 2, \"rojo\");\nvehicles[1].accelerate(150);\nvehicles[2] = new Vehicle(\"7314QWE\", 4, \"verde\");\nvehicles[2].accelerate(200);\nvehicles[3] = new Vehicle(\"5930POI\", 2, \"negro\");\nvehicles[3].accelerate(80);\nvehicles[4] = new Vehicle(\"1705UBG\", 4, \"blanco\");\nvehicles[4].accelerate(75);\nvehicles[5] = new Vehicle(\"3495JZA\", 2, \"naranja\");\nvehicles[5].accelerate(170);\nfor (int i = 0; i &lt; vehicles.length; i++) {\ntree.add(vehicles[i]);\n}\nfor (Vehicle v : tree) {\nSystem.out.println(v);\n}\n}\npublic static void main(String[] args) {\nnew CompareBoxedClasses().show();\n}\n}\n</code></pre> <pre><code>Vehicle [registration=5930POI, wheelCount=2, speed=80.0, colour=negro]\nVehicle [registration=1235GTR, wheelCount=2, speed=150.0, colour=rojo]\nVehicle [registration=3495JZA, wheelCount=2, speed=170.0, colour=naranja]\nVehicle [registration=1705UBG, wheelCount=4, speed=75.0, colour=blanco]\nVehicle [registration=9685KMX, wheelCount=4, speed=100.0, colour=azul]\nVehicle [registration=7314QWE, wheelCount=4, speed=200.0, colour=verde]\n</code></pre>"},{"location":"bloque_iii/tema_11/page-5/#clase-treemap","title":"Clase TreeMap","text":"<p>Esta implementaci\u00f3n utiliza una estructura de \u00e1rbol que permite que los elementos del mapa se ordenen en sentido ascendente seg\u00fan la clave, por lo tanto, la clase de las claves tiene que implementar la interfaz Comparable o bien indicar un objeto Comparator durante la creaci\u00f3n del TreeMap.</p> <p>TreeMap implementa la interfaz  <code>SortedMap</code>  que, a su vez, es heredera de  <code>Map</code> , por lo que todo lo dicho sobre los mapas funciona con las colecciones de tipo TreeMap.</p> MainConsola <pre><code>import java.util.Map;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\npublic class ShowTreeMap {\npublic void show() {\nSortedMap&lt;String, Vehicle&gt; sortedMap = new TreeMap&lt;&gt;();\nVehicle vehicles[] = new Vehicle[6];\nvehicles[0] = new Vehicle(\"9685KMX\", 4, \"azul\");\nvehicles[1] = new Vehicle(\"1235GTR\", 2, \"rojo\");\nvehicles[2] = new Vehicle(\"7314QWE\", 4, \"verde\");\nvehicles[3] = new Vehicle(\"5930POI\", 2, \"negro\");\nvehicles[4] = new Vehicle(\"1705UBG\", 4, \"blanco\");\nvehicles[5] = new Vehicle(\"3495JZA\", 2, \"naranja\");\nfor (int i = 0; i &lt; vehicles.length; i++) {\nsortedMap.put(vehicles[i].getRegistration(), vehicles[i]);\n}\nfor (Map.Entry&lt;String, Vehicle&gt; entry : sortedMap.entrySet()) {\nSystem.out.printf(\"Matr\u00edcula -&gt; %s Veh\u00edculo -&gt; %s\\n\", entry.getKey(), entry.getValue());\n}\n}\npublic static void main(String[] args) {\nnew ShowTreeMap().show();\n}\n</code></pre> <pre><code>Matr\u00edcula -&gt; 1235GTR Veh\u00edculo -&gt; Vehicle [registration=1235GTR, wheelCount=2, speed=0.0, colour=rojo]\nMatr\u00edcula -&gt; 1705UBG Veh\u00edculo -&gt; Vehicle [registration=1705UBG, wheelCount=4,\nspeed=0.0, colour=blanco]\nMatr\u00edcula -&gt; 3495JZA Veh\u00edculo -&gt; Vehicle [registration=3495JZA, wheelCount=2,\nspeed=0.0, colour=naranja]\nMatr\u00edcula -&gt; 5930POI Veh\u00edculo -&gt; Vehicle [registration=5930POI, wheelCount=2,\nspeed=0.0, colour=negro]\nMatr\u00edcula -&gt; 7314QWE Veh\u00edculo -&gt; Vehicle [registration=7314QWE, wheelCount=4,\nspeed=0.0, colour=verde]\nMatr\u00edcula -&gt; 9685KMX Veh\u00edculo -&gt; Vehicle [registration=9685KMX, wheelCount=4,\nspeed=0.0, colour=azul]\n</code></pre> <p>Como podemos observar, est\u00e1 ordenado ascendentemente por la matr\u00edcula ya que la matr\u00edcula es de tipo <code>String</code> que implementa la interfaz  <code>Comparable</code>. Si la clave fuera una clase hecha por nosotros, tendr\u00edamos que hacer que implementara Comparable o bien indicar un Comparator en la creaci\u00f3n del TreeMap.</p>"},{"location":"bloque_iii/tema_11/page-6/","title":"6 Pilas y colas","text":""},{"location":"bloque_iii/tema_11/page-6/#introduccion","title":"Introducci\u00f3n","text":"<p>Una cola es un tipo de dato que sigue el principio FIFO (first in, first out) que implica que el primer elemento en ser insertado en la cola es tambi\u00e9n el primero en ser eliminado de la misma.</p> <p>En el mundo real podemos encontrar este ejemplo en las colas de un banco, la cadena de impresi\u00f3n de documentos, etc. En el caso de la cola en el banco, la primera persona en llegar es tambi\u00e9n la primera en irse (suponiendo una \u00fanica ventanilla) y en los documentos a imprimir, la impresora imprime seg\u00fan el orden de llegada.</p> <p><code>Queue&lt;E&gt;</code> es una interfaz que hereda de Collection que proporciona operaciones para trabajar con una cola. Veamos alguna de ellas:</p> <ul> <li><code>boolean add(E e)</code>: inserta el elemento al final de la cola.</li> <li><code>E  element()</code>: Devuelve, pero no elimina,  el principio de la cola. Lanza la excepci\u00f3n <code>NoSuchElementException</code> si la cola est\u00e1 vac\u00eda.</li> <li><code>E peek()</code>:Devuelve, pero no elimina, el principio de la cola. Devuelve null si la cola est\u00e1 vac\u00eda.</li> <li><code>E poll()</code>: Devuelve y elimina el principio de la cola. Devuelve null si la cola est\u00e1 vac\u00eda.</li> <li><code>E  remove()</code>: Devuelve y elimina el principio de la cola. Lanza la excepci\u00f3n <code>NoSuchElementException</code> si la cola est\u00e1 vac\u00eda.</li> </ul> <p><code>Deque&lt;E&gt;</code> representa  una  cola  de  doble  extremo,  lo  que  significa  que  se  puede  insertar  y eliminar elementos desde ambos extremos de la cola. El nombre Deque es una abreviatura de Double Ended Queue. Admite,  por  lo  tanto, la  implementaci\u00f3n  de  la  cola  FIFO  como  la implementaci\u00f3n de la pila LIFO, que implica que el \u00faltimo elemento que se ha insertado, es el primero en ser eliminado: LIFO (last in, first out).</p> <p>Deque hereda de Queue, por lo que tiene todos sus m\u00e9todos y adem\u00e1s a\u00f1ade los suyos propios.Veamos algunos de ellos:</p> <ul> <li><code>void addFirst(E e)</code>: inserta el elemento al principio.</li> <li><code>void addLast(E e)</code>: inserta el elemento al final.</li> <li><code>E  getFirst()</code>: Devuelve, pero no  elimina,  el  primer  elemento.  Lanza  la  excepci\u00f3n <code>NoSuchElementException</code>  si el Deque est\u00e1 vac\u00edo.</li> <li><code>E  getLast()</code>: Devuelve, pero no elimina,  el  \u00faltimo  elemento.  Lanza  la  excepci\u00f3n <code>NoSuchElementException</code> si el Deque est\u00e1 vac\u00edo.</li> <li><code>E peekFirst()</code>: Devuelve, pero no elimina, el primer elemento. Devuelve null si el Deque est\u00e1 vac\u00edo.</li> <li><code>E peekLast()</code>: Devuelve, pero no elimina, el \u00faltimo elemento. Devuelve null si el Deque est\u00e1 vac\u00edo.</li> <li><code>E pollFirst()</code>: Devuelve y elimina el primer elemento. Devuelve null si el Deque est\u00e1 vac\u00edo.</li> <li><code>E pollLast()</code>: Devuelve y elimina el \u00faltimo elemento. Devuelve null si el Deque est\u00e1 vac\u00edo.</li> <li><code>E  removeFirst()</code>: Devuelve  y  elimina  el  primer  elemento.  Lanza  la  excepci\u00f3n <code>NoSuchElementException</code> si el Deque est\u00e1 vac\u00edo.</li> <li><code>E  removeLast()</code>: Devuelve y elimina el \u00faltimo  elemento.  Lanza  la  excepci\u00f3n <code>NoSuchElementException</code> si el Deque est\u00e1 vac\u00edo.</li> </ul>"},{"location":"bloque_iii/tema_11/page-6/#clase-arraydeque","title":"Clase ArrayDeque","text":"<p>La clase <code>ArrayDeque&lt;E&gt;</code> implementa la interfaz Deque y por lo tanto, tambi\u00e9n Queue, ya que Deque hereda de Queue.</p> ColaConsola ColaPilaConsola Pila <p><pre><code>import java.util.ArrayDeque;\nimport java.util.Queue;\npublic class ShowQueue{\npublic void show(){\nQueue&lt;Vehicle&gt; queue = new ArrayDeque();\nqueue.add(new Vehicle(\"9685KMX\", 4, \"azul\"));\nqueue.add(new Vehicle(\"1235GTR\", 2, \"rojo\"));\nqueue.add(new Vehicle(\"7314QWE\", 4, \"verde\"));\nSystem.out.println(queue.element()); //(1)!\nSystem.out.println(queue.peek());//(2)!\nSystem.out.println(queue.poll());//(3)!\nSystem.out.println(queue.remove());//(4)!\nSystem.out.println(queue.remove());//(5)!\nSystem.out.println(queue.peek());//(6)!\nSystem.out.println(queue.poll());//(7)!\nSystem.out.println(queue.element());//(8)!\nSystem.out.println(queue.remove());//(9)!\n}\npublic static void main(String[] args){\nnew ShowQueue().show();\n}\n}\n</code></pre> 1. Devuelve pero no elimina 9685KMX 1. Devuelve pero no elimina: 9685KMX 1. Devuelve y elimina: 9685KMX 1. Devuelve y elimina: 1235GTR 1. Devuelve y elimina el \u00faltimo, se queda la cola vac\u00eda: 7314QWE 1. Devuelve null 1. Devuelve null 1. Lanza NoSuchElementException porque la cola est\u00e1 vac\u00eda 1. Lanza NoSuchElementException porque la cola est\u00e1 vac\u00eda</p> <pre><code>Vehicle [registration=9685KMX, wheelCount=4, speed=0.0, colour=azul]\nVehicle [registration=9685KMX, wheelCount=4, speed=0.0, colour=azul]\nVehicle [registration=9685KMX, wheelCount=4, speed=0.0, colour=azul]\nVehicle [registration=1235GTR, wheelCount=2, speed=0.0, colour=rojo]\nVehicle [registration=7314QWE, wheelCount=4, speed=0.0, colour=verde]\nnull\nnull\nException in thread \"main\" java.util.NoSuchElementException\nat java.base/java.util.ArrayDeque.getFirst(ArrayDeque.java:402)\nat java.base/java.util.ArrayDeque.element(ArrayDeque.java:551)\nat tema11_Colecciones.pilasYColas.ShowQueue.show(ShowQueue.java:21)\nat tema11_Colecciones.pilasYColas.ShowQueue.main(ShowQueue.java:28)\n</code></pre> <pre><code>import java.util.ArrayDeque;\nimport java.util.Deque;\npublic class ShowDeque{\npublic void show(){\nQueue&lt;Vehicle&gt; deque = new ArrayDeque();\ndeque.add(new Vehicle(\"9685KMX\", 4, \"azul\"));\ndeque.add(new Vehicle(\"1235GTR\", 2, \"rojo\"));\ndeque.add(new Vehicle(\"7314QWE\", 4, \"verde\"));\nSystem.out.println(deque.element()); //(1)!\nSystem.out.println(deque.peek());//(2)!\nSystem.out.println(deque.poll());//(3)!\nSystem.out.println(deque.remove());//(4)!\nSystem.out.println(deque.remove());//(5)!\nSystem.out.println(deque.peek());//(6)!\nSystem.out.println(deque.poll());//(7)!\nSystem.out.println(deque.element());//(8)!\nSystem.out.println(deque.remove());//(9)!\n}\npublic static void main(String[] args){\nnew ShowDeque().show();\n}\n}\n</code></pre> <ol> <li>Devuelve pero no elimina 7314QWE</li> <li>Devuelve pero no elimina: 7314QWE</li> <li>Devuelve y elimina: 7314QWE</li> <li>Devuelve y elimina: 1235GTR</li> <li>Devuelve y elimina el \u00faltimo, se queda la pila vac\u00eda: 9685KMX</li> <li>Devuelve null</li> <li>Devuelve null</li> <li>Lanza NoSuchElementException porque la pila est\u00e1 vac\u00eda</li> <li>Lanza NoSuchElementException porque la pila est\u00e1 vac\u00eda</li> </ol> <pre><code>Vehicle [registration=7314QWE, wheelCount=4, speed=0.0, colour=verde]\nVehicle [registration=7314QWE, wheelCount=4, speed=0.0, colour=verde]\nVehicle [registration=7314QWE, wheelCount=4, speed=0.0, colour=verde]\nVehicle [registration=1235GTR, wheelCount=2, speed=0.0, colour=rojo]\nVehicle [registration=9685KMX, wheelCount=4, speed=0.0, colour=azul]\nnull\nnull\nException in thread \"main\" java.util.NoSuchElementException\nat java.base/java.util.ArrayDeque.getLast(ArrayDeque.java:413)\nat tema11_Colecciones.pilasYColas.ShowDeque.show(ShowDeque.java:21)\nat tema11_Colecciones.pilasYColas.ShowDeque.main(ShowDeque.java:28)\n</code></pre>"},{"location":"bloque_iii/tema_11/page-6/#clase-collections","title":"Clase Collections","text":"<p>La clase  Collections  contiene numerosos m\u00e9todos est\u00e1ticos para utilizar con todo tipo de colecciones,  como  por  ejemplo,  para  a\u00f1adir,  buscar,  copiar,  reemplazar,  ordenar,  obtener  el m\u00e1ximo o el m\u00ednimo, etc.</p>"},{"location":"bloque_iii/tema_11/page-7/","title":"Ejercicios","text":"Ejercicio 1 <p>Utilizando la clase gen\u00e9rica caja del bolet\u00edn de gen\u00e9ricos, haz un programa que haga lo siguiente:</p> <ul> <li>Guardar en una lista 5 cajas de cadenas. Recorrer la lista y mostrar por pantalla el contenido de todas las cajas. Mostrar una concatenaci\u00f3n de todas las cadenas.</li> <li>Guardar en otra lista 5 cajas de long. Recorrer la lista y mostrar por pantalla el contenido de las cajas. Mostrar un resultado de sumarlas todas.</li> </ul> Ejercicio 2 <p>Realiza una interfaz gen\u00e9rica que contenga dos m\u00e9todo:     T primerContenido();     T ultimoContenido();</p> <p>Realizar una clase Almacen que contenga una lista de cajas. Dicha clase debe implementar esa interfaz. Los m\u00e9todos devolver\u00e1n el contenido de la primera caja y el contenido de la \u00faltima caja respectivamente.</p> Ejercicio 3 <p>Realiza el siguiente men\u00fa para gestionar una lista simplemente enlazada de cadenas:</p> <ol> <li>Nueva lista</li> <li>N\u00famero de cadenas</li> <li>A\u00f1adir cadena</li> <li>Eliminar cadena</li> <li>Contiene cadena</li> <li>Mostrar lista entera</li> <li>Salir</li> </ol> <p>En la opci\u00f3n 1, se limpiar\u00e1 toda la lista dejando la lista vac\u00eda. En la opci\u00f3n 5, se le pedir\u00e1 una cadena al usuario y se le dir\u00e1 si est\u00e1 o no en la lista.</p> Ejercicio 4 <p>Rellena una lista simplemente enlazada circular de n\u00fameros decimales de tipo float. A continuaci\u00f3n, presentar el siguiente men\u00fa.</p> <ol> <li>Mostrar la lista</li> <li>Mostrar siguiente</li> <li>Eliminar \u00faltimo mostrado</li> <li>Salir</li> </ol> <p>En la opci\u00f3n 2, la primera vez que se ejecute saldr\u00e1 el primero de la lista. La Siguiente vez el segundo, y as\u00ed sucesivamente. Si el \u00faltimo mostrado ha sido el \u00faltimo y se le vuelve a dar esta opci\u00f3n, entonces se mostrar\u00e1 el primero. En la opci\u00f3n 3, se elimina el \u00faltimo mostrado por la opci\u00f3n 2.</p> Ejercicio 5 <p>Realiza el mismo ejercicio anterior pero con una lista doblemente enlazada circular. A\u00f1\u00e1dele una opci\u00f3n nueva al men\u00fa que sea 'Mostrar anterior'.</p> Ejercicio 6 <p>Realiza el siguiente men\u00fa para gestionar una pila de n\u00fameros de tipo byte.</p> <ol> <li>Nueva pila</li> <li>Consultar elemento</li> <li>A\u00f1adir elemento</li> <li>Eliminar elemento</li> <li>Consultar toda la pila</li> <li>Salir</li> </ol> Ejercicio 7 <p>Realiza el ejercicio anterior pero con una cola.</p> Ejercicio 8 <p>Un videoclub quiere que le hagamos una aplicaci\u00f3n para registrar sus pel\u00edculas. Los requisitos que nos exigen son los siguientes:</p> <ul> <li>Enum Genero<ul> <li>3 valores: COMEDIA, FICCION, TERROR<ul> <li>M\u00e9todo getCodigo que devuelva el siguiente car\u00e1cter para cada valor:<ul> <li>COMEDIA: C</li> <li>FICCION: F</li> <li>TERROR: T</li> </ul> </li> </ul> </li> </ul> </li> <li>Clase Clave:<ul> <li>Atributos: enum Genero y un n\u00famero entero</li> <li>Atributos privados y solamente los getters necesarios</li> <li>M\u00e9todo toString: devuelve una cadena concatenando del enum con el n\u00famero entero. Ej: C1, F2, T3</li> <li>M\u00e9todo est\u00e1tico asignarClave: recibe un g\u00e9nero y devuelve un objeto de tipo Clave. El n\u00famero de la clave ser\u00e1 1 para la primera pel\u00edcula de comedia, 1 para la primera pel\u00edcula de terror, ..., 2 para las segundas, etc.</li> </ul> </li> <li>Clase Pel\u00edcula<ul> <li>Atributos:<ul> <li>Clave: objeto de la clase Clave</li> <li>Nombre</li> <li>FechaEstreno. fecha de estreno en Espa\u00f1a</li> <li>FechaDVD: fecha de venta en DVD</li> </ul> </li> <li>Atributos privados y solamente los getters necesarios</li> <li>Constructor: <code>Pelicula(String nombre, Genero genero, LocalDate fechaEstreno, LocalDate fechaDVD)</code></li> <li>Criterio de comparaci\u00f3n de la clase: descendientemente por d\u00edas que ha tardado la pel\u00edcula en salir en DVD desde que se estren\u00f3. Si dos pel\u00edculas tienen el mismo n\u00famero de d\u00edas, ordenarlas ascendentemente por orden alfab\u00e9tico del nombre.</li> </ul> </li> <li> <ul> <li>Se crear\u00e1n pel\u00edculas de la siguiente tabla:</li> </ul> <p>Clase Videoclub: esta clase contendr\u00e1 la l\u00f3gica con varias colecciones para hacer lo siguiente:</p> Orden de la inserci\u00f3n en la colecciones Nombre G\u00e9nero Clave Fecha Estreno Fecha DVD 1 Poltergeist, juegos diab\u00f3licos Terror T1 22/05/2015 22/09/2015 2 La cumbre escarlata Terror T2 09/10/2015 12/02/2016 3 Ocho apellidos catalanes Comedia C1 20/112015 18/03/2016 4 Padres por desigual Comedia C2 01/01/2016 11/05/2016 5 Star Wars: El despertar de la Fuerza Ficci\u00f3n F1 18/12/2015 20/04/2016 6 Mad Max: Furia en la carretera Ficci\u00f3n F2 15/05/2015 01/09/2015 7 Clon de Poltergeist, juegos diab\u00f3licos 8 Clon de Star Wars: El despertar de la fuerza <ul> <li>Utilizar las colecciones oportunas para crear la siguiente salida por consola exactamente igual. Insertar las pel\u00edculas en las colecciones en el orden indicado en la primera columna de la tabla. Tener en cuenta lo siguiente:<ul> <li>En el 3, utiliza un Comparator de manera an\u00f3nima</li> <li>En el 4, el criterio de comparaci\u00f3n de la clave es primera las de ficci\u00f3n, luego las de terror y por \u00faltimo las de comedia. A igualdad de g\u00e9nero, se ordena ascendentemente por el n\u00famero de la clave. Es decir, el orden ser\u00eda: F1, F2, T1, T2, C1, C2.</li> <li>En el 5, utilizar ListIterator.</li> </ul> </li> </ul> </li> </ul> <p>Salidas por consola:  </p> Ejercicio 9 <p>Realiza una aplicaci\u00f3n para gestionar los ex\u00e1menes de junio de 1\u00baCFGS de Aplicaciones Multiplataforma. Se crear\u00e1n los ex\u00e1menes que aparecen en la siguiente tabla y se insertar\u00e1n en todas las colecciones en el orden indicado en la primera columna de la tabla. La clave estar\u00e1 formada por el d\u00eda del examen, un guion y la hora de inicio y ser\u00e1 autogenerada por la clase. La fecha tiene que ser mostrada con el formato d\u00eda/mes/a\u00f1o, tal y como est\u00e1 en la tabla.</p> Orden de inserci\u00f3n en las colecciones Asignatura Descripci\u00f3n Fecha Hora de Inicio Hora de Fin Clave 1 Programaci\u00f3n Herencia y colecciones 16/06/2017 08:15 13:30 16-08:15 2 Base de datos Disparadores y SQL 15/06/2017 11:45 14:30 15-11:45 3 Sistemas Inform\u00e1ticos Sistemas en red 20/06/2017 10:15 11:35 20-10:15 4 Entornos de Desarrollo Diagramas de clases 19/06/2017 09:15 11:15 19-09:15 5 Lenguaje de Marcas Hojas de estilo 14/06/2017 08:15 11:15 13-10:15 6 FOL Derechos del trabajador 13/06/2017 10:15 11:15 13-10:15 7 Base de datos Entidad-Relaci\u00f3n 15/06/2017 08:15 11:30 15-08:15 8 Clon de Programaci\u00f3n 9 Clon de Lenguaje de Marcas <p>Realizar con dichos ex\u00e1menes lo siguiente, teniendo en cuenta que las salidas en consola est\u00e9n bien alineadas y que las horas tienen que salir con dos d\u00edgitos. Ejemplo 08:15</p> <ol> <li>Insertarlos en un ArrayList. Muestra el contenido del ArrayList.</li> <li>Inserta los ex\u00e1menes en una colecci\u00f3n sin duplicados que mantenga el orden de inserci\u00f3n. Muestra la colecci\u00f3n sin duplicados.</li> <li>Muestra el contenido de la colecci\u00f3n sin duplicados del apartado 2 al rev\u00e9s.</li> <li>Utilizando la interfaz List, solic\u00edtale al usuario los valores necesarios para mostrar una sublista de la colecci\u00f3n sin duplicados del apartado 2. Ejemplo: si el usuario introduce 3 y 5, se muestran los ex\u00e1menes de Sistemas Inform\u00e1ticos, Entornos de Desarrollo y Lenguaje de Marcas.</li> <li>Inserta los ex\u00e1menes en un \u00e1rbol. Utilizando la interfaz Comparable, ordena los ex\u00e1menes en el \u00e1rbol ascendente de asignatura, fecha y hora de inicio en este orden. Es decir, si la asignatura es la misma, entonces ordena por fecha, y si la fecha tambi\u00e9n es la misma, entonces ordena por hora. El primer examen ser\u00e1 el de Base de Datos que empieza a las 08:15 y el \u00faltimo ser\u00e1 el de Sistemas Inform\u00e1ticos.</li> <li>Inserta los ex\u00e1menes en otro \u00e1rbol pero esta vez utilizando la interfaz Comparator de manera an\u00f3nima. En dicha \u00e1rbol, el orden ser\u00e1 por orden descendente de fecha y hora de inicio en ese orden. El primer examen ser\u00e1 el de Sistemas Inform\u00e1ticos y el \u00faltimo ser\u00e1 el de FOL.</li> <li>Inserta los ex\u00e1menes en un mapa ordenado utilizando como clave del mapa el campo clave de los ex\u00e1menes. Mostrar el contenido del mapa ordenado.</li> </ol> Ejercicio 10 <p>Una empresa nos ha contratado para hacer una aplicaci\u00f3n en Java para registrar a sus empleados. Pertenecemos a un equipo de trabajo de programadores dirigidos por un analista. El analista quiere que cumplamos una serie de requisitos ya que luego habr\u00e1 que unir todo el c\u00f3digo hecho por los programadores. Los requisitos son los siguientes:</p> <ul> <li>Enum Categoria<ul> <li>3 valores: JEFE, ENCARGADO y EMPLEADO</li> <li>M\u00e9todo getCodigo que devuelva el siguiente car\u00e1cter para cada valor:<ul> <li>JEFE: J</li> <li>ENCARGADO: E</li> <li>EMPLEADO: D</li> </ul> </li> </ul> </li> <li>Clase Clave<ul> <li>Atributos: enum Categoria y un n\u00famero entero.</li> <li>Atributos privados y solamente los getters necesarios.</li> <li>M\u00e9todo toString: devuelve una cadena concatenando el c\u00f3digo del enum con el n\u00famero entero. Ej: J1</li> <li>M\u00e9todo est\u00e1tico asignarClave: recibe una categor\u00eda y devuelve un objeto de tipo Clave. El n\u00famero de la clave ser\u00e1 1 para el primer jefe, primer encargado y primer empleado, 2 para los segundos, etc.</li> </ul> </li> <li>Clase Empleado<ul> <li>Atributos:<ul> <li>Clave: objeto de la clase Clave</li> <li>Nombre</li> <li>FechaAlta: fecha de alta en la empresa</li> <li>FechaBaja: fecha de baja en la empresa. Si contin\u00faan trabajando en la empresa, este atributo se rellena con null  </li> </ul> </li> <li>Atributos privados y solamente los getters necesarios.</li> <li>Constructor: Empleado(String nombre, Categoria categoria, LocalDate fechaAlta, LocalDate fechaBaja)</li> <li>Criterio de comparaci\u00f3n de la clase: descendentemente por d\u00edas trabajados.</li> </ul> </li> <li> <ul> <li> <p>En los 3 \u00e1rboles se a\u00f1adir\u00e1n los siguientes empleados y en este mismo orden:</p> Orden de inserci\u00f3n en los \u00e1rboles Nombre Categor\u00eda Fecha Alta Fecha Baja 1 Pepe Empleado 21/03/2011 22/04/2013 2 Juan Encargado 29/02/2012 No tiene 3 Mar\u00eda Jefe 30/04/2010 No tiene 4 Laura Empleado 30/12/2010 No tiene 5 Esteban Encargado 05/11/2010 11/02/2015 6 Pedro Jefe 16/08/2009 No tiene 7 Yolanda Empleado 27/07/2012 01/10/2013 8 Nuria Jefe 31/08/2009 No tiene 9 Antonio Encargado 28/01/2011 14/05/2014 10 Clone de Pepe 11 Clone de Esteban 12 Clone de Pedro </li> </ul> <p>Clase Arboles: esta clase contendr\u00e1 el main con 3 \u00e1rboles de empleados:</p> <ul> <li>Los tres \u00e1rboles son los siguientes:<ul> <li>\u00c1rbol con los empleados ordenados descendentemente por d\u00edas trabajados.</li> <li>\u00c1rbol con los empleados ordenados ascendentemente por orden alfab\u00e9tico de los nombres de los empleados. Utiliza l interfaz Comparator de manera an\u00f3nima.</li> <li>TreeMap con los empleados ordenador descendentemente por categor\u00eda profesional y a misma categor\u00eda, se ordena ascendentemente por n\u00famero. Utilizar como clave del TreeMap el atributo clave del empleado. </li> </ul> </li> <li>De todos los \u00e1rboles hay que mostrar los datos. La salida por consola debe ser exactamente igual a la siguiente:</li> </ul> <p> </p> </li> </ul>"},{"location":"bloque_iii/tema_11/page-8/","title":"Proyecto","text":"<p>En una empresa quieren guardar informaci\u00f3n sobre los clientes, y de \u00e9stos se desea almacena:</p> <ul> <li>Clave del cliente, que estar\u00e1 formada por las dos primeras letras del nombre del cliente, las tres primeras letras de cada apellido, los tres n\u00fameros de su DNI y su letra. Por ejemplo, si un cliente se llama Rosa Vel\u00e1zquez Mart\u00ednez, con DNI 32050698G, su clave ser\u00eda **rovema698G*.</li> <li>Nombre del cliente</li> <li>Apellidos del cliente</li> <li>DNI</li> <li>Direcci\u00f3n, compuesta por la el tipo de v\u00eda (calle, avenida, pasaje, km, otro), el nombre de la v\u00eda, n\u00famero de la v\u00eda, c\u00f3digo postal, municipio, provincia y otra informaci\u00f3n relevante.</li> <li>Importe total comprado.</li> <li>Lista de fechas de compra.</li> </ul> <p>Crea aun aplicaci\u00f3n Java que le permita al usuario realizar las siguientes operaciones:</p> <ol> <li>A\u00f1adir clientes</li> <li>Consultar clientes por nombre</li> <li>Consultar clientes por DNI</li> <li>Eliminar clientes</li> <li>Mostrar todos los clientes</li> <li>Filtrar por fecha de compra</li> <li>Top 5 de clientes que m\u00e1s dinero han comprado</li> </ol> <p>Realizar la misma aplicaci\u00f3n con diferentes versiones.</p> <ul> <li>La primera versi\u00f3n se har\u00e1 uso de la interfaz List.</li> <li>La segunda versi\u00f3n se har\u00e1 uso de la interfaz Set.</li> <li>La tercera versi\u00f3n se har\u00e1 uso de la interfaz SortedSet.</li> <li>La cuarta versi\u00f3n se har\u00e1 uso de la interfaz Map.</li> <li>La quinta versi\u00f3n se har\u00e1 uso de la interfaz SortedMap.</li> </ul> <p>Ten en cuenta que el orden de natural de los clientes es ordenado primero por su apellido de forma ascendente, en caso de ser repetido, seguir\u00e1 ordenado por nombre de forma ascendente, en caso de que haya dos personas que se llamen igual, se ordenar\u00e1 por las veces que ha realizado un comprar de forma descendente, y por \u00faltimo lugar, el DNI de forma descendiente.</p> <p>Para realizar este proyecto se tendr\u00e1 en cuenta:</p> <ul> <li>Se deber\u00e1 entregar un diagrama de clase que represente las relaciones entre las clases y las interfaces.</li> <li>Se valorar\u00e1 la complejidad de un Main que ponga aprueba los m\u00e9todos y clases creadas, as\u00ed como la complejidad de la estructura de la aplicaci\u00f3n.</li> <li>Se podr\u00e1 usar la librer\u00eda common realiza en proyectos anteriores, haciendo uso de JARs.</li> <li>El nombre de las funciones ser\u00e1 en ingl\u00e9s y deber\u00e1n ser lo suficiente claras para poder identificarlas con facilidad.</li> <li>El c\u00f3digo se comentar\u00e1 haciendo uso de los comentarios JavaDoc adem\u00e1s, de comentarios normales para dar una explicaci\u00f3n a la parte del c\u00f3digo m\u00e1s importante.</li> <li>El repositorio de GitHub tendr\u00e1 el siguiente nombre <code>pr11java-NOMBRE-collections</code> siendo NOMBRE el nombre del alumno.</li> <li>Se declarar\u00e1 aquellas variables que sean necesarias inicializ\u00e1ndolas si es necesario, indicando el tipo correspondiente.</li> <li>Se har\u00e1 uso de funciones y procedimientos donde sea oportuno.</li> <li>La entrega de este proyecto se realizar\u00e1 a trav\u00e9s de un enlace a un repositorio de GitHub, realizando siempre m\u00e1s de un commit.</li> <li>Se valorar\u00e1 la limpieza, la claridad, y la estructura del proyecto.</li> </ul>"},{"location":"bloque_iii/tema_12/page-1/","title":"1 Interfaces funcionales","text":""},{"location":"bloque_iii/tema_12/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>La programaci\u00f3n  imperativa  es  uno  de  los  paradigmas  de  programaci\u00f3n  de computadoras m\u00e1s utilizados. Bajo este paradigma, la programaci\u00f3n se describe en t\u00e9rminos del estado del programa y de sentencias que cambian dicho estado. Java es un lenguaje imperativo, lo que implica que un programa Java est\u00e1 compuesto por una secuencia de instrucciones, que son ejecutadas en el mismo orden en el que se escriben, de manera que al ejecutarla se produce cambios en el estado del programa.</p> <p>Por  su  parte,  la  programaci\u00f3n  funcional  es  un  paradigma  de  programaci\u00f3n alternativo, en el que el resultado de un programa deriva de la aplicaci\u00f3n de distintas funciones a la entrada, sin cambiar el estado interno del programa. En la programaci\u00f3n funcional los bloques principales de construcci\u00f3n de nuestros programas son las funciones y no los objetos.</p> <p>Al aplicar programaci\u00f3n funcional se produce normalmente un c\u00f3digo m\u00e1s corto y m\u00e1s sencillo de entender que aplicando programaci\u00f3n imperativa, ya que es m\u00e1s f\u00e1cil crear abstracciones a trav\u00e9s de funciones que a trav\u00e9s de interfaces.</p> <p>Java siempre fue un lenguaje para programaci\u00f3n imperativa y de hecho las funciones en Java NO son objetos, por lo que una funci\u00f3n no puede pasarse directamente como argumento de otra funci\u00f3n para que se ejecute su c\u00f3digo. Sin embargo, gracias a las interfaces funcionales y a las clases inline an\u00f3nimas pod\u00edamos superar esta limitaci\u00f3n. Pero \u00bfqu\u00e9 es una interfaz funcional?</p>"},{"location":"bloque_iii/tema_12/page-1/#interfaces-funcionales","title":"Interfaces funcionales","text":"<p>Una interfaz funcional es una interfaz que contiene un \u00fanico m\u00e9todo abstracto. Esto no quiere decir que no pueda contener otros m\u00e9todos. De hecho, puede contener:</p> <ul> <li>Otros m\u00e9todos <code>static</code> (Java 8+).</li> <li>Otros m\u00e9todos <code>default</code>  (Java 8+).</li> <li>Otros m\u00e9todos <code>private</code> (Java 9+)</li> <li>M\u00e9todos que sobrescriban m\u00e9todos de la clase <code>Object</code> .</li> </ul> <p>A  la  hora  de  definir  una  interfaz  funcional,  Java  8  proporciona  la  anotaci\u00f3n <code>@FunctionInterface</code>, que informa al compilador de que dicha interfaz es funcional y por tanto tiene un \u00fanico m\u00e9todo abstracto. El objetivo de esta anotaci\u00f3n es que se produzca un error de compilaci\u00f3n si le a\u00f1adimos un segundo m\u00e9todo abstracto a la interfaz. El uso de esta anotaci\u00f3n no se ha establecido como obligatoria para mantener la compatibilidad con el c\u00f3digo ya existente, pero s\u00ed que est\u00e1 recomendada.</p> <p>Una interfaz funcional pura es aquella en la que las clases que la implementan no almacenan ning\u00fan estado, como por ejemplo <code>Comparator</code>. Veamos el m\u00e9todo <code>sort</code> de la interfaz <code>List&lt;E&gt;</code> que recibe un objeto de una clase que implementa la interfaz <code>Comparator</code>: <code>default void sort(Comparator&lt;? super E&gt; c)</code>. El m\u00e9todo utiliza el <code>Comparator</code> para ordenar la lista llamando al m\u00e9todo <code>compare</code> de dicho objeto cada vez que debe comparar dos objetos de la lista. Por lo tanto, debemos crear una clase que implemente <code>Comparator</code> para determinar c\u00f3mo se comparan dos elementos:</p> <pre><code>import java.util.Comparator;\npublic class ListOrder implements Comparator&lt;Integer&gt;{\n@Override\npublic int compare(Integer o1, Integer o2){\nreturn Integer.compare(o1, o2);\n}\n}\n</code></pre> <p>As\u00ed, cuando queramos ordenar una lista de enteros har\u00edamos:</p> <pre><code>import java.util.Arrays;\nimport java.util.List;\npublic class Main{\npublic void show(){\nList&lt;Integer&gt; list = Arrays.asList(3, 2, 6, 1, 5, 4);\nlist.sort(new ListOrder());\nfor(Integer i : list){\nSystem.out.printf(\" %d \", i);\n}\n}\npublic static void main(String[] args){\nnew Main().show();\n}\n}\n</code></pre>"},{"location":"bloque_iii/tema_12/page-1/#implementacion-de-interfaces-funcionales-mediante-clases-inline-anonimas","title":"Implementaci\u00f3n de interfaces funcionales mediante clases inline an\u00f3nimas","text":"<p>El problema del c\u00f3digo anterior es que si esta ordenaci\u00f3n se hace solamente en dicha ocasi\u00f3n, se ha creado la clase <code>ListOrder</code> para un \u00fanico uso. En ese caso, es m\u00e1s conveniente utilizar una clase inline an\u00f3nima:</p> <pre><code>import java.util.Arrays;\nimport java.util.List;\npublic class InlineAnonymousClass{\npublic void show(){\nList&lt;Integer&gt; list = Arrays.asList(3, 2, 6, 1, 5, 4);\nlist.sort(new Comparator&lt;Integer&gt;(){\n@Override\npublic int compare(Integer o1, Integer o2){\nreturn Integer.compare(o1, o2);\n}\n});\nfor(Integer i : list){\nSystem.out.printf(\" %d \", i);\n}\n}\npublic static void main(String[] args){\nnew InlineAnonymousClass().show();\n}\n}\n</code></pre> <p>Lo que estamos haciendo es indicarle al m\u00e9todo <code>sort()</code> el c\u00f3digo que debe ejecutar para comparar dos objetos. Entonces, \u00bfno ser\u00eda m\u00e1s f\u00e1cil que al m\u00e9todo <code>sort()</code> le pudi\u00e9ramos pasar directamente el c\u00f3digo que debe ejecutar? El problema es que en Java las funciones no son objetos, por lo que no pueden ser referenciadas mediante una variable o pasadas directamente como argumento.</p> <p>En realidad, lo que nos interesa es poder establecer tipos funci\u00f3n, es decir, tipos que representen una funci\u00f3n que reciba unos determinados par\u00e1metros de alg\u00fan tipo y que devuelva un valor de retorno de alg\u00fan tipo. Si existieran los tipos funci\u00f3n, podr\u00edamos definir variables o par\u00e1metros de dichos tipos. De hecho hay lenguajes de programaci\u00f3n que tienen tipos funci\u00f3n. En Java, debido a la necesidad de mantener la compatibilidad con versiones anteriores, no existe ninguna sintaxis especial para definir tipos funci\u00f3n sino que se utilizan las interfaces funcionales para representarlos. Dado que una interfaz funcional solo puede tener un \u00fanico m\u00e9todo abstracto, la firma de dicho m\u00e9todo puede ser usado como tipo funci\u00f3n.</p>"},{"location":"bloque_iii/tema_12/page-1/#interfaces-funcionales-puras-predefinidas","title":"Interfaces funcionales puras predefinidas","text":"<p>Java incorpora, a partir de la versi\u00f3n 8, una serie de interfaces funcionales puras predefinidas en el paquete <code>java.util.function</code> para permitir la programaci\u00f3n funcional en Java:</p> <ul> <li><code>Function&lt;T,R&gt;</code>: su m\u00e9todo abstracto es <code>R apply(T t)</code>.</li> <li><code>UnaryOperator&lt;T&gt;</code>: es un caso espec\u00edfico de la interfaz funcional Function, es decir, coinciden el tipo del argumento y el tipo de retorno, por lo que est\u00e1 parametrizada con un \u00fanico tipo. <li><code>BiFunction&lt;T,U,R&gt;</code>: su m\u00e9todo abstracto es <code>R apply(T t,U u)</code>.</li> <li><code>BinaryOperator&lt;T&gt;</code>:es un caso espec\u00edfico  de  la  interfaz  funcional BiFunction en el que coinciden el tipo de los dos argumentos recibidos por el m\u00e9todo apply y el tipo de retorno del mismo. Es por tanto similar a BiFunction. La interfaz funcional  BinaryOperator est\u00e1,  por  tanto, parametrizada con un \u00fanico tipo. <li><code>Predicate&lt;T&gt;</code>: su m\u00e9todo abstracto es <code>boolean test(T t)</code>.</li> <li><code>BiPredicate&lt;T&gt;</code>: su m\u00e9todo abstracto es <code>boolean test(T t,U u)</code>.</li> <li><code>Consumer&lt;T&gt;</code>: su m\u00e9todo abstracto es <code>void accept(T t)</code>.</li> <li><code>BiConsumer&lt;T,U&gt;</code>: su m\u00e9todo abstracto es <code>void accept(T t,U u)</code>.</li> <li><code>Supplier&lt;T&gt;</code>: su m\u00e9todo abstracto es <code>T get()</code>.</li> <p>Veamos un ejemplo utilizando la interfaz funcional <code>BinaryOperator&lt;T&gt;</code></p> ShowBinaryOperatorMainConsola <pre><code>import java.util.function.BinaryOperator;\npublic class ShowBinaryOperator{\npublic Integer calculate(Integer value1, Integer value2, BinaryOperator&lt;Integer&gt; binaryOperator){\nreturn binaryOperation.apply(value1, value2);\n}\n}\n</code></pre> <pre><code>public class Main2 {\npublic void show(){\nShowBinaryOperator binOper = new ShowBinaryOperator();\nSystem.out.printf(\"12 + 6 = %d\\n\", binOper.calculate(12, 6, new BinaryOperator&lt;Integer&gt;(){\n@Override\npublic Integer apply(Integer t, Integer u){\nreturn t + u;\n}\n}));\nSystem.out.printf(\"12 - 6 = %d\\n\", binOper.calculate(12, 6, new BinaryOperator&lt;Integer&gt;(){\n@Override\npublic Integer apply(Integer t, Integer u){\nreturn t - u;\n}\n}));\nSystem.out.printf(\"12 / 6 = %d\\n\", binOper.calculate(12, 6, new BinaryOperator&lt;Integer&gt;(){\n@Override\npublic Integer apply(Integer t, Integer u){\nreturn t / u;\n}\n}));\nSystem.out.printf(\"12 * 6 = %d\\n\", binOper.calculate(12, 6, new BinaryOperator&lt;Integer&gt;(){\n@Override\npublic Integer apply(Integer t, Integer u){\nreturn t * u;\n}\n}));\n}\npublic static void main(String[] args){\nnew Main2().show();\n}\n}\n</code></pre> <pre><code>12 + 6 = 18\n12 - 6 = 6\n12 / 6 = 2\n12 * 6 = 72\n</code></pre>"},{"location":"bloque_iii/tema_12/page-1/#interfaces-funcionales-para-tipos-primitivos","title":"Interfaces funcionales para tipos primitivos","text":"<p>Como no podemos usar la parametrizaci\u00f3n de clases e interfaces con los tipos primitivos (limitaci\u00f3n de generics), el paquete <code>java.util.function</code> define tambi\u00e9n una serie de interfaces funcionales similares a las explicadas anteriormente pero espec\u00edficas para los tipos primitivos:</p> <ul> <li>Para el tipo primitivo boolean: <code>BooleanSupplier</code></li> <li>Para  el  tipo  primitivo  double:  <code>DoubleBinaryOperator</code> , <code>DoubleConsumer</code>, <code>DoubleFunction</code>, <code>DoublePredicate</code>, <code>DoubleSupplier</code>, <code>DoubleToIntFunction</code>, <code>DoubleToLongFunction</code>, <code>DoubleUnaryOperator</code>, <code>ToDoubleBiFunction</code>, <code>ToDoubleFunction</code>, <code>ObjDoubleConsumer</code>.</li> <li>Para el tipo primitivo int:  <code>IntBinaryOperator</code>, <code>IntConsumer</code>,  <code>IntFunction</code>, <code>IntPredicate</code>, <code>IntSupplier</code>,  <code>IntToDoubleFunction</code>, <code>IntToLongFunction</code>, <code>IntUnaryOperator</code>, <code>ToIntBiFunction</code>, <code>ToIntFunction</code>, <code>ObjIntConsumer</code>.</li> <li>Para  el  tipo  primitivo  long:  <code>LongBinaryOperator</code> , <code>LongConsumer</code>, <code>LongFunction</code>, <code>LongPredicate</code>,  <code>LongSupplier</code>, <code>LongToDoubleFunction</code>, <code>LongToIntFunction</code>, <code>LongUnaryOperator</code>,  <code>ToLongBiFunction</code>, <code>ToLongFunction</code>, <code>ObjLongConsumer</code>.</li> </ul> <p>Adem\u00e1s, la mayor\u00eda de las interfaces vistas hasta ahora incluyen m\u00e9todos cuyo nombre incluye <code>ToTipo</code> que retornan objetos de interfaces funcionales para tipos primitivos.</p>"},{"location":"bloque_iii/tema_12/page-2/","title":"2 Expresiones lambda","text":""},{"location":"bloque_iii/tema_12/page-2/#introduccion","title":"Introducci\u00f3n","text":"<p>Con objeto de incorporar a Java funcionalidades propias de la programaci\u00f3n funcional, Java 8 trajo consigo dos nuevas sintaxis para representar interfaces funcionales: expresiones lambda (lambda expressions) y referencias a m\u00e9todo (method references).</p> <p>Una  expresi\u00f3n  lambda  es  una  nueva  sintaxis  con  la  que  representar  la implementaci\u00f3n del m\u00e9todo abstracto de interfaces funcionales indicando adem\u00e1s la lista de par\u00e1metros con sus tipos y el tipo de retorno. De esta manera, podemos escribir el c\u00f3digo de apartados anteriores mediante una expresi\u00f3n lambda, haci\u00e9ndolo mucho m\u00e1s legible.</p> <p>El nuevo operador para las expresiones lambda se denomina operador lambda y tiene la forma de flecha <code>-&gt;</code>. Divide la expresi\u00f3n lambda en dos partes: la parte izquierda especifica los par\u00e1metros necesarios y la parte derecha contiene el cuerpo de la expresi\u00f3n. Este cuerpo puede estar compuesto por una \u00fanica expresi\u00f3n o puede ser un bloque de c\u00f3digo. Cuando es una \u00fanica expresi\u00f3n se denomina lambda de expresi\u00f3n y cuando es un bloque de c\u00f3digo se denomina lambda de bloque.</p> <p>Debemos tener en cuenta que cuando se especifica una expresi\u00f3n lambda, no indicamos  nada  sobre  la  interfaz  funcional  a  la  queremos  aplicarla,  es  decir, dependiendo de donde se est\u00e9 usando la expresi\u00f3n lambda, el compilador deber\u00e1 determinar si la firma de la expresi\u00f3n lambda coincide con la firma del m\u00e9todo abstracto de la correspondiente interfaz funcional. Si la expresi\u00f3n lambda no incluye los tipos de los par\u00e1metros, el compilador tratar\u00e1 de inferirlos a partir de los tipos de los par\u00e1metros del m\u00e9todo abstracto de la interfaz funcional.</p> <p>El ejemplo anterior de la interfaz <code>BinaryOperator&lt;Integer&gt;</code>, si lo realizamos con una expresi\u00f3n lambda, resultar\u00eda de la siguiente manera:</p> <pre><code>public class BinaryOperatorWithLambda{\npublic void show(){\nShowBinaryOperator binOper = new ShowBinaryOperator();\nSystem.out.printf(\"12 + 6 = %d\\n\", binOper.calculate(12, 6, (t,u) -&gt; t + u));\nSystem.out.printf(\"12 - 6 = %d\\n\", binOper.calculate(12, 6, (t,u) -&gt; t - u));\nSystem.out.printf(\"12 / 6 = %d\\n\", binOper.calculate(12, 6, (t,u) -&gt; t / u));\nSystem.out.printf(\"12 * 6 = %d\\n\", binOper.calculate(12, 6, (t,u) -&gt; t * u));\n}\npublic static void main(String[] args){\nnew BinaryOperatorWithLambda().show();\n}\n}\n</code></pre> <p>Veamos el ejemplo de ordenaci\u00f3n de la lista hecho de las dos maneras, con una clase inline an\u00f3nima y con una expresi\u00f3n lambda:</p> <pre><code>import java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\npublic class LambdaExpression{\npublic void show(){\nList&lt;Integer&gt; list = Arrays.asList(3, 2, 6, 1, 5, 4);\nlist.sort(new Comparator&lt;Integer&gt;(){\n@Override\npublic int compare(Integer o1, Integer o2){\nreturn Integer.compare(o1, o2);\n}\n});\nfor(Integer i : list){\nSystem.out.printf(\" %d \", i);\n}\nSystem.out.println();\nlist.sort((o1, o2) -&gt; Integer.compare(o1, o2)); for(Integer i : list){\nSystem.out.printf(\" %d \", i);\n}\n}\npublic static void main(String[] args){\nnew LambdaExpression().show();\n}\n}\n</code></pre> <p>A\u00fan as\u00ed, debemos tener en cuenta que un objeto de una clase inline an\u00f3nima y una expresi\u00f3n lambda no son lo mismo, porque una expresi\u00f3n lambda no crea ninguna clase adicional y adem\u00e1s en una expresi\u00f3n lambda no se puede almacenar ning\u00fan estado, mientras que en una clase an\u00f3nima inline s\u00ed. Un objeto de una clase an\u00f3nima inline genera un archivo de clase independiente durante la compilaci\u00f3n que aumenta el tama\u00f1o del archivo jar. Sin embargo, una expresi\u00f3n lambda se convierte en un simple m\u00e9todo privado. En una lambda, this representa la clase actual desde la que se est\u00e1 usando la lambda. En el caso de una clase an\u00f3nima, this representa ese objeto de la clase an\u00f3nima en particular.</p> <p>Como vemos, las expresiones lambda son muy \u00fatiles para simplificar el c\u00f3digo, pero presentan un problema: para que podamos usar esta nueva sintaxis de expresi\u00f3n lambda es necesario que la interfaz contra la que la usemos sea una interfaz funcional, es decir, que s\u00f3lo contenga un \u00fanico m\u00e9todo abstracto, porque si tuviera por ejemplo dos m\u00e9todos, \u00bfel c\u00f3digo proporcionado mediante la expresi\u00f3n lambda cu\u00e1ndo se deber\u00eda ejecutar, cuando se ejecute uno o cuando se ejecute el otro? Por este motivo las expresiones lambda solo se pueden usar con interfaces funcionales.</p> <p>Se puede almacenar una expresi\u00f3n lambda en una variable cuyo tipo corresponda a una interfaz funcional compatible con dicha lambda, es decir, cuya firma del m\u00e9todo abstracto de la interfaz sea compatible con la expresi\u00f3n lambda. Por ejemplo:</p> <pre><code>Comparator&lt;Integer&gt; comparador = (o1, o2) -&gt; Integer.compare(o1, o2);\nBinaryOperator&lt;Integer&gt; operacionBinaria = (o1, o2) -&gt; o1 + o2;\n</code></pre>"},{"location":"bloque_iii/tema_12/page-2/#sintaxis-de-la-expresion-lambda","title":"Sintaxis de la expresi\u00f3n lambda","text":"<p>Veamos la sintaxis de la expresi\u00f3n lambda:</p> <pre><code>(tipo param1, tipo param2, ...) -&gt; {\n// instrucciones\nreturn valorRetorno;\n}\n</code></pre> <p>Podemos omitir el tipo de dato de cada par\u00e1metro siempre y cuando el compilador pueda inferirlos (deducirlos) a partir del context, es decir, a partir de los tipos de los par\u00e1metros del m\u00e9todo abstracto de la interfaz funcional para la que se est\u00e1 usando.</p> <p>El cuerpo de las expresiones lambda puede contener los mismos tipos de sentencias que cualquier otra funci\u00f3n, como sentencias condicionales, iterativas o <code>try catch</code>.</p> <p>Si se espec\u00edfica un \u00fanico par\u00e1metro y no se espec\u00edfica el tipo de \u00e9ste sino que es inferido, podemos omitir los par\u00e9ntesis. Por ejemplo:</p> <pre><code>x -&gt; x + x;\n</code></pre> <p>Si no se espec\u00edfica ning\u00fan par\u00e1metro, es obligatorio poner los par\u00e9ntesis. Por ejemplo:</p> <pre><code>() -&gt; System.out.println(\"Hola mundo\");\n</code></pre> <p>En el cuerpo podemos omitir las las llaves si \u00e9ste contiene una \u00fanica expresi\u00f3n o una \u00fanica sentencia que no retorna valor. Si el cuerpo contiene una \u00fanica expresi\u00f3n, \u00e9sta ser\u00e1 evaluada y la expresi\u00f3n lambda retornar\u00e1 el valor obtenido.</p> <p>Si el cuerpo contiene m\u00e1s de una sentencia y la expresi\u00f3n lambda debe retornar un valor, entonces debemos usar una sentencia <code>return valor</code>.</p> <p>Si el cuerpo contiene una sentencia <code>return valor</code>, forzosamente debemos poner las llaves, incluso si el cuerpo contiene una \u00fanica sentencia, ya que <code>return</code>no es un expresi\u00f3n.</p> <p>Un expresi\u00f3n lambda se puede usar como argumento de un par\u00e1metro de tipo interfaz funcional y como valor de retorno de una funci\u00f3n cuyo tipo de retorno sea una interfaz funcional. sin embargo habr\u00e1 ocasiones donde debamos realizar un cast expl\u00edcitamente para indicar la interfaz funcional a la que queremos aplicar una determinada expresi\u00f3n lambda.</p>"},{"location":"bloque_iii/tema_12/page-2/#ambito-de-una-expresion-lambda","title":"\u00c1mbito de una expresi\u00f3n lambda","text":"<p>Una expresi\u00f3n lambda puede acceder a las variables <code>static</code> definidas en el \u00e1mbito en el que la expresi\u00f3n lambda es usada. Tambi\u00e9n puede acceder a las variables locales pero que sean eficazmente finales, es decir, variables cuyo valor no cambia una vez asignado. Estas variables no tienen necesariamente que estar definidas como <code>final</code>. Una expresi\u00f3n lambda tambi\u00e9n tiene acceso a <code>this</code>, lo que hace referencia a la instancia de invocaci\u00f3n de la clase contenedora de la expresi\u00f3n lambda.</p> <p>Si en el cuerpo de una expresi\u00f3n lambda con m\u00e1s de una sentencia definimos una variable local, debemos tener en cuenta que dicha variable tendr\u00e1 como \u00e1mbito el correspondiente a donde se ha definido la expresi\u00f3n lambda, ya que la expresi\u00f3n lambda no define su propio \u00e1mbito independiente. Si ya existiera una variable con el mismo nombre en dicho \u00e1mbito se producir\u00eda un error de compilaci\u00f3n. Por ejemplo:</p> <pre><code>int z = 2;\nBinaryOperator&lt;Integer&gt; operacion = (x, y) -&gt; {\nint z = 4; //(1)!\nSystem.out.println(x + z);\n}\n</code></pre> <ol> <li>\u00a1ERROR! z ya est\u00e1 definida en el \u00e1mbito</li> </ol> <p>Una expresi\u00f3n lambda puede generar una excepci\u00f3n. No obstante, si genera una excepci\u00f3n comprobada, esta tendr\u00e1 que ser compatible con la excepci\u00f3n (o excepciones) indicadas en la cl\u00e1usula <code>throws</code> del m\u00e9todo abstracto de la interfaz funcional. Veamos un ejemplo:</p> InterfazMain <pre><code>public interface FunctionalInterface{\nint ioAction() throws Exception;\n}\n</code></pre> <pre><code>public class LambdaException{\npublic void show(){\nFunctionalInterface fi = () -&gt; {\nScanner keyboard = new Scanner(System.in);\nint num = keyboard.nextInt();\nreturn num;\n};\ntry{\nSystem.out.printf(\"Introduce un n\u00famero: \");\nSystem.out.println(method(fi));\n} catch (Exception e){\nSystem.out.println(\"Error en la lectura\");\n}\n}\npublic int method(FunctionalInterface fi) throws Exception{\nreturn fi.ioAction();\n}\npublic static void main(String[] args){\nnew LambdaException().show();\n}\n}\n</code></pre>"},{"location":"bloque_iii/tema_12/page-2/#limitaciones-de-las-expresiones-lambda","title":"Limitaciones de las expresiones lambda","text":"<p>El c\u00f3digo de una expresi\u00f3n lambda se convierte en el c\u00f3digo del m\u00e9todo abstracto de la interfaz funcional que implementa. or tanto, las expresiones lambda no sirven para sobrescribir la implementaci\u00f3n por defecto de un m\u00e9todo default de la interfaz, sino que debe tratarse de un m\u00e9todo abstracto. De hecho si la interfaz solo tiene un m\u00e9todo default, no ser\u00e1 considerada una interfaz funcional. Si nos vemos en la obligaci\u00f3n de sobrescribir un m\u00e9todo default de una interfaz, entonces tendremos que usar una clase an\u00f3nima inline.</p> <p>Por otro lado, una expresi\u00f3n j*lambda* no es consciente de qu\u00e9 interfaz funcional concreta est\u00e1 implementando, por lo que no puede llamar a su vez a m\u00e9todos privados ni default de la interfaz.</p> <p>Finalmente, las expresiones lambda no pueden usarse con clases abstractas que tengan un \u00fanico m\u00e9todo abstracto, solo se pueden usar con interfaces funcionales.</p>"},{"location":"bloque_iii/tema_12/page-2/#referencias-a-metodo","title":"Referencias a m\u00e9todo","text":"<p>Una referencia de m\u00e9todo (method reference) es una abreviaci\u00f3n de la lambda y se da siempre y cuando es una expresi\u00f3n de una \u00fanica l\u00ednea y los par\u00e1metros que se le pasa a la lambda son utilizados en la expresi\u00f3n.</p> <p>Una referencia de m\u00e9todo permite hacer referencia a un m\u00e9todo sin ejecutarlo. Al evaluar una referencia de m\u00e9todo, tambi\u00e9n se crea una instancia de una interfaz funcional.</p> <ul> <li>Sintaxis para m\u00e9todos est\u00e1ticos: <code>NombreClase::nombreM\u00e9todo</code><ul> <li><code>v -&gt; Math.sqrt(v)</code> equivaldr\u00eda a <code>Math::sqrt</code></li> <li><code>(o1, o2) -&gt; Integer.compare(o1, o2)</code> equivaldr\u00eda a <code>Integer::compare</code></li> </ul> </li> <li>Sintaxis para m\u00e9todos de instancia: <code>refObj::nombreM\u00e9todo</code><ul> <li><code>persona -&gt; persona.getNombre()</code> equivaldr\u00eda a <code>Persona::getNombre</code></li> <li><code>n -&gt; System.out.println(n)</code> equivaldr\u00eda <code>System.out::println</code></li> <li><code>(cadena1, cadena2) -&gt; cadena1.compareToIgnoreCase(cadena2)</code> equivaldr\u00eda a <code>String::compareToIgnoreCase</code>: en este caso, el primer par\u00e1metro de la expresi\u00f3n lambda es quien ejecuta el m\u00e9todo y el resto de par\u00e1metros se pasan como argumentos en la llamada.</li> <li><code>empleado -&gt; jefe.comparaSalarioCon(empleado)</code> equivaldr\u00eda a <code>jefe::comparaSalarioCon</code>: en este caso, un objeto ajeno a la expresi\u00f3n lambda es quien ejecuta el m\u00e9todo y dicho m\u00e9todo recibe como argumento el (o los) par\u00e1metro(s) de la expresi\u00f3n lambda.</li> <li><code>() -&gt; new TreeMap&lt;&gt;()</code> equivaldr\u00eda a <code>TreeMap::new</code>: este tipo se conoce como referencia a constructor, que emplearemos cuando queramos que se llame al m\u00e9todo constructor de una clase.</li> <li><code>i -&gt; new int[i]</code> equivaldr\u00eda a <code>int[]::new</code>: en este caso, lo que queremos es que se llame al constructor de un array.</li> </ul> </li> <li>Sintaxis para m\u00e9todos gen\u00e9ricos:<ul> <li>Est\u00e1ticos: <code>NombreClase::&lt;T&gt;nombreM\u00e9todo</code></li> <li>M\u00e9todos de instancia: <code>refObj::&lt;T&gt;nombreM\u00e9todo</code></li> </ul> </li> </ul>"},{"location":"bloque_iii/tema_12/page-3/","title":"3 Alguna interfaces funcionales","text":""},{"location":"bloque_iii/tema_12/page-3/#consumer-y-biconsumer","title":"Consumer y BiConsumer","text":"<ul> <li><code>Consumer&lt;T&gt;</code>: su m\u00e9todo abstracto es <code>void accept(T t)</code>.</li> <li><code>BiConsumer&lt;T, U&gt;</code>: su m\u00e9todo abstracto es <code>void accept(T t, U u)</code>.</li> </ul> <p>La interfaz <code>Consumer</code>  es empleada por el m\u00e9todo <code>forEach(Consumer&lt;T&gt; action)</code> de la interfaz <code>Iterable</code>, que ejecuta la acci\u00f3n indicada sobre cada elemento del iterable.</p> <pre><code>import java.util.List; public class InterfaceConsumer {\npublic void show() {\nList&lt;Integer&gt; list = List.of(3, 2, 6, 1, 5, 4);\nlist.forEach(System.out::println); // num -&gt; System.out.println(num)\n}     public static void main(String[] args) { new InterfaceConsumer().show();     } }\n</code></pre> <p>En este ejemplo, se ejecuta la acci\u00f3n de mostrar por consola una l\u00ednea con cada elemento de la lista.</p> <p>La interfaz funcional <code>BiConsumer</code> es similar a <code>Consumer</code> pero su m\u00e9todo recibe dos argumentos, uno de tipo <code>T</code>  y otro de tipo <code>U</code> y no retorna nada: <code>void accept(T t, U u)</code></p> <pre><code>import java.util.HashMap;\nimport java.util.Map; public class InterfaceBiConsumer {     public void show() {         Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\nfor (int i = 0; i &lt; 5; i++) {\nmap.put(i, i * i);\n}\nmap.forEach((k, v) -&gt; System.out.printf(\"Clave:%d Valor:%d\\n\", k, v));\n}     public static void main(String[] args) {         new InterfaceBiConsumer().show();\n}\n}\n</code></pre> <p>La  interfaz  funcional  <code>Consumer</code>   posee  un  m\u00e9todo  default  llamado <code>andThen(Consumer&lt;T&gt; after)</code> que llama al m\u00e9todo <code>accept</code> del consumidor recibido despu\u00e9s de haber llamado a su propio <code>accept</code>. Gracias a este m\u00e9todo, podemos tener una serie de objetos <code>Consumer</code> predefinidos y encadenarlos de la forma que nos interese.Veamos un ejemplo:</p> <pre><code>import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Consumer;\npublic class ConsumerAndThen{\npublic void show(){\nList&lt;Integer&gt; list = List.of(3, 2, 6, 1, 5, 4);\nList&lt;Integer&gt; listCopy = new ArrayList&lt;&gt;();\nConsumer&lt;Integer&gt; copy = listCopy::add; // (value) -&gt; listCopy.add(value);\nConsumer&lt;Integer&gt; show = System.out::println; // (value) -&gt; System.out.println(value);\nlist.forEach(copy.andThen(show));\nlistCopy.foreach(show);\n}\npublic static void main(String[] args){\nnew ConsumerAndThen().show();\n}\n}\n</code></pre>"},{"location":"bloque_iii/tema_12/page-3/#predicate-y-bipredicate","title":"Predicate y BiPredicate","text":"<ul> <li><code>Predicate&lt;T&gt;</code>: su m\u00e9todo abstracto es <code>boolean test(T t)</code>.</li> <li><code>BiPredicate&lt;T&gt;</code>: su m\u00e9todo abstracto es <code>boolean test(T t, U u)</code>.</li> </ul> <p>Las interfaces funcionales  <code>Predicate</code>  y  <code>BiPredicate</code>  poseen m\u00e9todos default que retornan un nuevo objeto que implementa la misma interfaz y que permiten componer predicados  mediante  operaciones  l\u00f3gicas,  como  <code>or(otherPredicate)</code>, <code>and(otherPredicate)</code> o <code>negate(otherPredicate)</code>. El orden en el que se ejecutar\u00e1n ser\u00e1n el orden en el que aparecen en la composici\u00f3n, es decir, no existe una prioridad preestablecida como con los operadores l\u00f3gicos.</p> <p>Veamos un ejemplo utilizando el m\u00e9todo <code>removeIf</code> de la interfaz <code>Collection</code> que recibe un Predicate por par\u00e1metro:  <code>default  boolean  removeIf(Predicate&lt;?  super  E&gt; filter)</code>. Dicho m\u00e9todo elimina de la colecci\u00f3n aquellos elementos que cumplan el Predicate:</p> <pre><code>import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Predicate;\npublic class PredicateComposition{\npublic void show(){\nList&lt;Integer&gt; list = new ArrayList&lt;&gt;(List.of(3, 2, 6, 1, 5, 4));\nPredicate&lt;Integer&gt; esPar = n -&gt; n % 2 == 0;\nPredicate&lt;Integer&gt; mayorQue3 = n -&gt; n &gt; 3;\nlist.removeIf(esPar.and(mayorQue3));\nlist.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew PredicateComposition().show();\n}\n}\n</code></pre> <p>La interfaz <code>Predicate</code> tiene tambi\u00e9n un m\u00e9todo est\u00e1tico factor\u00eda <code>PredicateIsEqual(Object o)</code> que retorna el predicado correspondiente a comprobar si un elemento es igual que otro objeto. Internamente simplemente se llamar\u00e1 al m\u00e9todo <code>equals</code>:</p> <pre><code>import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Predicate;\npublic class PredicateIsEqual{\npublic void show(){\nList&lt;Integer&gt; list = new ArrayList&lt;&gt;(List.of(3, 2, 6, 1, 5, 4));\nlist.removeIf(Predicate.isEqual(5));\nlist.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew PredicateIsEqual().show();\n}\n}\n</code></pre>"},{"location":"bloque_iii/tema_12/page-3/#function","title":"Function","text":"<p><code>Function&lt;T,R&gt;</code>: su m\u00e9todo abstracto es <code>R apply(T t)</code>. Veamos un ejemplo de utilizaci\u00f3n en el m\u00e9todo<code>computeIfAbsent</code>de los mapas:</p> <pre><code>import java.util.HashMap;\nimport java.util.Map;\nimport java.util.function.Function;\npublic class InterfaceFunction{\npublic void show(){\nFunction&lt;Integer, Integer&gt; elevarAlCuadrado = n -&gt; n * n;\nMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\nfor(int i = 0; i &lt; 10; i++){\nmap.computeIfAbsent(i, elevarAlCuadrado);\n}\nmap.forEach((k,v) -&gt; System.out.printf(\"Clave:%d Valor:%d\\n\", k, v));\n}\npublic static void main(String[] args){\nnew InterfaceFunction().show();\n}\n}\n</code></pre> <p>La interfaz funcional <code>Function</code> posee un m\u00e9todo default llamado <code>andThen(afterFunction)</code> que permite que despu\u00e9s de la ejecuci\u00f3n del m\u00e9todo <code>apply</code> de la function original, su resultado se pase como valor de entrada del m\u00e9todo <code>apply</code> del objeto <code>Function</code> pasado como argumento, retornado el objeto <code>Function</code> correspondiente a la cadena de operaciones de transformaci\u00f3n. Veamos un ejemplo:</p> <pre><code>import java.util.HashMap;\nimport java.util.Map;\nimport java.util.function.Function;\npublic class FunctionAndThen{\npublic void show(){\nFunction&lt;Integer, Integer&gt; elevarAlCuadrado = n -&gt; n * n;\nFunction&lt;Integer, String&gt; aCadena = String::valueOf; // value -&gt; String.valueOf(value)\nMap&lt;Integer, String&gt; map = new HashMap&lt;&gt;();\nfor(int i = 0; i &lt; 10; i++){\nmap.computeIfAbsent(i, elevarAlCuadrado.andThen(aCadena));\n}\nmap.forEach((k,v) -&gt; System.out.printf(\"Clave:%d Valor:%d\\n\", k, v));\n}\npublic static void main(String[] args){\nnew FunctionAndThen().show();\n}\n}\n</code></pre> <p>Muy parecido al anterior es el m\u00e9todo default <code>compose(beforeFunction)</code> que primero ejecuta el m\u00e9todo <code>apply</code> del objeto <code>Function</code> recibe y despu\u00e9s el m\u00e9todo <code>apply</code> del objeto <code>Function</code> original, es decir, se ejecutan en orden inverso al de <code>andThen</code>. Gracias a estos dos m\u00e9todos, podemos tener una serie de objetos <code>Function</code>predefinidos y encadenarlos de la forma que nos interese.</p> <pre><code>import java.util.HashMap;\nimport java.util.Map;\nimport java.util.function.Function;\npublic class FunctionCompose{\npublic void show(){\nFunction&lt;Integer, Integer&gt; elevarAlCuadrado = n -&gt; n * n;\nFunction&lt;Integer, String&gt; aCadena = String::valueOf; // value -&gt; String.valueOf(value)\nMap&lt;Integer, String&gt; map = new HashMap&lt;&gt;();\nfor(int i = 0; i &lt; 10; i++){\nmap.computeIfAbsent(i, aCadena.compose(elevarAlCuadrado));\n}\nmap.forEach((k,v) -&gt; System.out.printf(\"Clave:%d Valor:%d\\n\", k, v));\n}\npublic static void main(String[] args){\nnew FunctionCompose().show();\n}\n}\n</code></pre>"},{"location":"bloque_iii/tema_12/page-3/#comparator","title":"Comparator","text":"<p>La interfaz funcional <code>Comparator</code> (comparador) contiene el m\u00e9todo abstracto <code>int compare(T o1, T o2)</code> que recibe dos valores de tipo <code>T</code> y retorna un entero que vale:</p> <ul> <li>0 si o1 es igual a o2.</li> <li>Menor que 0 si o1 es menor que o2.</li> <li>Mayor que 0 si o1 es mayor que o2.</li> </ul> <p>La interfaz <code>Comparator</code> ya exist\u00eda en Java 7 y de hecho no se encuentra en el paquete <code>java.util.function</code>, sino directamente en <code>java.util</code>. Esta interfaz posee una serie de m\u00e9todos est\u00e1ticos factor\u00eda que retornan objetos <code>Comparator</code> correspondientes a los casos m\u00e1s habituales de comparaci\u00f3n:</p> <ul> <li> <p><code>static &lt;T extends Comparable&lt;? super T&gt;&gt; Comparator&lt;T&gt; naturalOrder()</code>: devuelve un objeto <code>Comparator</code> para ordenar por el orden natural. Pero, \u00bfqu\u00e9 considera Java como orden natural? El orden indicado en la implementaci\u00f3n de <code>Comparable</code>.</p> <pre><code>import java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\npublic class NaturalOrder{\npublic void show(){\nList&lt;Integer&gt; list = Arrays.asList(3, 2, 6, 1, 5, 4);\nlist.sort(Comparator.naturalOrder());\nlist.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew NaturalOrder().show();\n}\n}\n</code></pre> </li> <li> <p><code>static &lt;T extends Comparable&lt;? super T&gt;&gt; Comparator&lt;T&gt; reverseOrder()</code>: ordena por el orden natural inverso:</p> <pre><code>import java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\npublic class ReverseOrder{\npublic void show(){\nList&lt;Integer&gt; list = Arrays.asList(3, 2, 6, 1, 5, 4);\nlist.sort(Comparator.reverseOrder());\nlist.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew ReverseOrder().show();\n}\n}\n</code></pre> </li> <li> <p><code>static &lt;T&gt; Comparator&lt;T&gt; nullsFirst(Comparator&lt;? super T&gt; comparator)</code>: recibe un comparador y retorna un nuevo comparador seg\u00fan el cual los elementos <code>null</code> preceder\u00e1n a los que no lo sean, que ser\u00e1n ordenados atendiendo al comparador recibido. Tambi\u00e9n tenemos <code>nullsLast</code>, similar al anterior pero los elementos que sean <code>null</code>se sit\u00faan al final.</p> <pre><code>import java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\npublic class NullsFirst{\npublic void show(){\nList&lt;Integer&gt; list = Arrays.asList(3, 2, null, 6, 1, 5, 4, null);\nlist.sort(Comparator.nullsFirst(Comparator.naturalOrder()));\nSystem.out.println(\"nullsFirst: \");\nlist.forEach(System.out::println);\nlist.sort(Comparator.nullsLast(Comparator.naturalOrder()));\nSystem.out.println(\"nullsLast: \");\nlist.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew ReverseOrder().show();\n}\n}\n</code></pre> </li> <li> <p><code>static &lt;T, U extends Comparable&lt;? super U&gt;&gt; Comparator&lt;T&gt; comparing(Function&lt;? super T, ? extends U&gt; keyExtractor)</code>: recibe una funci\u00f3n que debe retornar el valor por el que debe comparar el comparador retornado. Este m\u00e9todo es muy \u00fatil si queremos ordenar una lista de objetos por un determinado campo.</p> VehicleMainConsola <pre><code>public class Vehicle {     private String registration;\nprivate int wheelCount;\nprivate double speed;\nprivate String colour;\npublic Vehicle(String registration, int wheelCount, String colour) {\nthis.registration = registration;\nthis.wheelCount = wheelCount;\nthis.colour = colour;\nspeed = 0;\n}\npublic int getWheelCount() {\nreturn wheelCount;\n}\npublic double getSpeed() {\nreturn speed;\n}     public String getColour() {\nreturn colour;\n}     public void setColour(String colour) {\nthis.colour = colour;\n}     public String getRegistration() {\nreturn registration;\n}     public void accelerate(double amount) {\nspeed += amount;\n}     public void brake(double amount) {\nspeed -= amount;\n}     @Override\npublic String toString() {\nreturn \"Vehicle [registration=\" + registration + \", wheelCount=\" + wheelCount + \", speed=\" + speed + \", colour=\" + colour + \"]\";\n} }\n</code></pre> <pre><code>public class Comparing{\npublic void show(){\nList&lt;Vehicle&gt; list = new ArrayList&lt;&gt;();\nlist.add(new Vehicle(\"1705UBG\", 4, \"blanco\"));\nlist.add(new Vehicle(\"9685KMX\", 4, \"azul\"));\nlist.add(new Vehicle(\"1235GTR\", 2, \"rojo\"));\nlist.add(new Vehicle(\"7314QWE\", 4, \"verde\"));\nlist.add(new Vehicle(\"3495JZA\", 2, \"blanco\"));\nlist.add(new Vehicle(\"5930POI\", 2, \"negro\"));\nlist.sort(Comparator.comparing(Vehicle::getColour));\nlist.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew Comparing().show();\n}\n}\n</code></pre> <pre><code>Vehicle [registration=9685KMX, wheelCount=4, speed=0.0, colour=azul]\nVehicle [registration=1705UBG, wheelCount=4, speed=0.0, colour=blanco]\nVehicle [registration=3495JZA, wheelCount=2, speed=0.0, colour=blanco]\nVehicle [registration=5930POI, wheelCount=2, speed=0.0, colour=negro]\nVehicle [registration=1235GTR, wheelCount=2, speed=0.0, colour=rojo]\nVehicle [registration=7314QWE, wheelCount=4, speed=0.0, colour=verde]\n</code></pre> <p>Hay versiones de este m\u00e9todo est\u00e1tico factor\u00eda para cuando el valor por que se debe ordenar es de un tipo primitivo, como <code>comparingInt</code>, <code>comparingLong</code> o <code>comparingDouble</code></p> </li> </ul> <p>La interfaz funcional <code>Comparator</code> tambi\u00e9n incorpora una serie de m\u00e9todos default que nos permiten encadenar comparadores:</p> <ul> <li> <p><code>default Comparator&lt;T&gt; reversed()</code>: sirve para obtener el orden inverso al del comparador original.</p> MainConsola <pre><code>public class Reversed{\npublic void show(){\nList&lt;Vehicle&gt; list = new ArrayList&lt;&gt;();\nlist.add(new Vehicle(\"1705UBG\", 4, \"blanco\"));\nlist.add(new Vehicle(\"9685KMX\", 4, \"azul\"));\nlist.add(new Vehicle(\"1235GTR\", 2, \"rojo\"));\nlist.add(new Vehicle(\"7314QWE\", 4, \"verde\"));\nlist.add(new Vehicle(\"3495JZA\", 2, \"blanco\"));\nlist.add(new Vehicle(\"5930POI\", 2, \"negro\"));\nlist.sort(Comparator.comparing(Vehicle::getColour).reversed());\nlist.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew Reversed().show();\n}\n}\n</code></pre> <pre><code>Vehicle [registration=7314QWE, wheelCount=4, speed=0.0, colour=verde]\nVehicle [registration=1235GTR, wheelCount=2, speed=0.0, colour=rojo]\nVehicle [registration=5930POI, wheelCount=2, speed=0.0, colour=negro]\nVehicle [registration=1705UBG, wheelCount=4, speed=0.0, colour=blanco]\nVehicle [registration=3495JZA, wheelCount=2, speed=0.0, colour=blanco]\nVehicle [registration=9685KMX, wheelCount=4, speed=0.0, colour=azul]\n</code></pre> <ul> <li><code>default &lt;U extends Comparable&lt;? super U&gt;&gt; Comparator&lt;T&gt; thenComparing(Function&lt;? super T, ? extends U&gt; keyExtractor)</code>: recibe una funci\u00f3n con la que indica el valor por el que comparar si con el comparador original los elementos son iguales:</li> </ul> MainConsola <pre><code>public class ThenComparingFunction{\npublic void show(){\nList&lt;Vehicle&gt; list = new ArrayList&lt;&gt;();\nlist.add(new Vehicle(\"1705UBG\", 4, \"blanco\"));\nlist.add(new Vehicle(\"9685KMX\", 4, \"azul\"));\nlist.add(new Vehicle(\"1235GTR\", 2, \"rojo\"));\nlist.add(new Vehicle(\"7314QWE\", 4, \"verde\"));\nlist.add(new Vehicle(\"3495JZA\", 2, \"blanco\"));\nlist.add(new Vehicle(\"5930POI\", 2, \"negro\"));\nlist.sort(Comparator.comparing(Vehicle::getColour).thenComparing(Vehicle::getWheelCount));\nlist.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew Reversed().show();\n}\n}\n</code></pre> <pre><code>Vehicle [registration=9685KMX, wheelCount=4, speed=0.0, colour=azul]\nVehicle [registration=3495JZA, wheelCount=2, speed=0.0, colour=blanco]\nVehicle [registration=1705UBG, wheelCount=4, speed=0.0, colour=blanco]\nVehicle [registration=5930POI, wheelCount=2, speed=0.0, colour=negro]\nVehicle [registration=1235GTR, wheelCount=2, speed=0.0, colour=rojo]\nVehicle [registration=7314QWE, wheelCount=4, speed=0.0, colour=verde]\n</code></pre> </li> </ul> <p>Existen versiones espec\u00edficas de este m\u00e9todo para cunado la funci\u00f3n retorna un tipo primitivo, como <code>thenComparingInt</code>, <code>thenComparingLong</code> y <code>thenComparingDouble</code>.</p>"},{"location":"bloque_iii/tema_12/page-4/","title":"4 Optional","text":""},{"location":"bloque_iii/tema_12/page-4/#introduccion","title":"Introducci\u00f3n","text":"<p>La clase <code>Optional&lt;T&gt;</code> es un wrapper alrededor de un valor que puede estar presente o no. El objetivo de esta clase es servir b\u00e1sicamente como tipo de retorno de aquellos m\u00e9todos que pueden retornar una valor o no.</p> <p>Por ejemplo, supongamos que queremos realizar un m\u00e9todo que retorne la posici\u00f3n en la que se encuentra un determinado elemento de una lista de enteros. La pregunta que inmediatamente nos har\u00edamos como desarrolladores ser\u00eda, \u00bfqu\u00e9 debo hacer si el elemento a buscar, que ha sido pasado como argumento del m\u00e9todo, no se encuentra en la lista? Debo lanzar una excepci\u00f3n? No puedo retornar <code>false</code> porque el m\u00e9todo retorna un entero. \u00bfDebo retornar un valor especial como por ejemplo <code>-1</code>?\u00bfRetorno como valor especial del valor <code>null</code>?</p> <p>Tradicionalmente los desarrolladores han resulto esta situaci\u00f3n de distintas maneras y todas tienen sus inconvenientes. Por un lado, lanzar una excepci\u00f3n parece excesivo porque no es un error del programa y al cliente del m\u00e9todo simplemente hay que informarle de alguna manera de que no se ha encontrado el elemento.</p> <p>Por otra parte, retornar un valor especial tiene el inconveniente que de que obliga a que el cliente conozca dicho valor especial y adem\u00e1s debe acordarse de comprobar que el valor retornada no es el valor especial si quiere usarlo. En cierta manera estamos d\u00e1ndolo al cliente la responsabilidad de la comprobaci\u00f3n pero no estamos oblig\u00e1ndola a ello. La consecuencia es que si el desarrollador del c\u00f3digo cliente olvida realizar la comprobaci\u00f3n, estar\u00e1 usando un valor no v\u00e1lido. Este hecho se convierte en m\u00e1s peligroso a\u00fan si el valor retornado es <code>null</code>, porque si olvida realizar la comprobaci\u00f3n y m\u00e1s adelante en el c\u00f3digo se trata de acceder a una propiedad del objeto retornado por el m\u00e9todo, se producir\u00eda una excepci\u00f3n <code>NullPointerException</code>.</p> <p>Entonces, \u00bfcu\u00e1l es la soluci\u00f3n? La soluci\u00f3n propuesta por Java 8 es que el m\u00e9todo no retorne directamente un objeto de clase <code>T</code>, sino un <code>Optional&lt;T&gt;</code>. La ventaja de esta soluci\u00f3n es que si el c\u00f3digo cliente quiere acceder al objeto real debe forzosamente comprobar si el Optional tiene un valor presente o no, de manera que pueda extraerse.</p> <p>Es muy importante resaltar que no es posible tener un Optional cuyo valor contenido sea null.</p>"},{"location":"bloque_iii/tema_12/page-4/#construccion","title":"Construcci\u00f3n","text":"<p>La clase <code>Optional&lt;T&gt;</code> es una clase inmutable, por lo que no proporciona m\u00e9todos setter que permitan cambiar el valor que contiene. Adem\u00e1s el proceso de construcci\u00f3n de un Optional no se realizar a trav\u00e9s de un constructor, sino usando alguno de los m\u00e9todos est\u00e1ticos factor\u00eda que se indican a continuaci\u00f3n.</p> <ul> <li><code>static &lt;T&gt; Optional&lt;T&gt; empty()</code>: retorna un Optional que no contiene valor.</li> <li><code>static &lt;T&gt; Optional&lt;T&gt; of(T value)</code>: retorna un Optional que contiene un valor pasado como argumento. Si tratamos de pasar el valor <code>null</code> a dicho m\u00e9todo se producir\u00e1 una excepci\u00f3n.</li> <li><code>static &lt;T&gt; Optional&lt;T&gt; ofNullable(T value)</code>: retorna un Optional que contiene el valor pasado como argumento. A diferencia del m\u00e9todo anterior, si tratamos de pasar el valor <code>null</code>, el m\u00e9todo retorna un Optional vac\u00edo.</li> </ul> <pre><code>import java.util.Optional;\npublic class Construction{\npublic void show(){\nOptional&lt;Integer&gt; optional1 = Optional.empty(); //(1)!\nSystem.out.println(optional1);\nOptional&lt;Integer&gt; optional2 = Optional.of(1000); //(2)!\nSystem.out.println(optional2);\nOptional&lt;Integer&gt; optional3 = Optional.ofNullable(methodWhichCanReturnNull(5)); //(3)!\nSystem.out.println(optional3);\nOptional&lt;Integer&gt; optional4 = Optional.ofNullable(methodWhichCanReturnNull(2));\nSystem.out.println(optional4); Optional&lt;Integer&gt; optional5;\ntry {\noptional5 = Optional.of(null);\nSystem.out.println(optional5);\n} catch (NullPointerException e) {\nSystem.out.println(\"Se ha lanzado la excepci\u00f3n NullPointerException\");\n}       }\npublic static Integer methodWhichCanReturnNull(int num){        if (num &gt;= 5) {\nreturn num;\n} else {\nreturn null;\n}     }\npublic static void main(String[] args) {\nnew Construction().show();     }\n}\n</code></pre> <ol> <li>Crea un optional sin valor.</li> <li>Crea un optional con valor 1000</li> <li>Retorna un Optional vac\u00edo si el valor pasado como argumento es null:</li> </ol>"},{"location":"bloque_iii/tema_12/page-4/#igualdad","title":"Igualdad","text":"<p>Podemos comparar los valores de dos Optional con el m\u00e9todo <code>boolean equals(Object obj)</code>: compara los valores de los dos Optional. Dos Optional vac\u00edos de distinto tipo son considerados iguales:</p> <pre><code>import java.util.Optional; public class Equality {     public void show() {         Optional&lt;Integer&gt; optional1 = Optional.of(1000); //Crea un optional con valor 1000\nOptional&lt;Integer&gt; optional2 = Optional.of(1000);\nOptional&lt;Integer&gt; optional3 = Optional.empty();\nOptional&lt;String&gt; optional4 = Optional.empty();         System.out.println(optional1.equals(optional2)); //Comprueba  si tienen el mismo valor: true\nSystem.out.println(optional1 == optional2); //Comprueba si son  el mismo objeto: false\nSystem.out.println(optional3.equals(optional4));//Dos Optional  vac\u00edos de distinto tipo son considerados iguales: true\nSystem.out.println(optional3.equals(null));//False     \n}     public static void main(String[] args) { new Equality().show();     } }\n</code></pre>"},{"location":"bloque_iii/tema_12/page-4/#procesamiento","title":"Procesamiento","text":"<p>Supongamos que queremos usar el m\u00e9todo est\u00e1tico <code>Collections.max(collection)</code> que retorna el valor m\u00e1ximo contenido en una colecci\u00f3n:</p> <pre><code>// Suponiendo que list es una colecci\u00f3n de enteros\nInteger max = Collections.max(list);\n</code></pre> <p>Pero \u00bfqu\u00e9 ocurre si la colecci\u00f3n est\u00e1 vac\u00eda? En este caso el m\u00e9todo <code>max()</code> lanzar\u00e1 la excepci\u00f3n <code>NoSuchElementException</code>. \u00bfCu\u00e1l es el problema? Que el cliente debe mirar la documentaci\u00f3n para enterarse de ello y capturar la excepci\u00f3n o de lo contrario producir\u00e1 un error en tiempo de ejecuci\u00f3n. Est\u00e1 obligando a darse cuenta de que debe hacer:</p> <pre><code>try{\nInteger max = Collections.max(list);\n} catch(NoSuchElementException e){\n// ...\n}\n</code></pre> <p>\u00bfY si existiera una forma de indicar que el valor de retorno de una funci\u00f3n es opcional? Pues bien, Java 8 introdujo para este problema la clase <code>Optional&lt;T&gt;</code>.</p> <p>La clase <code>Optional&lt;T&gt;</code> es una clase parametrizada que representa la abstracci\u00f3n de un valor de retorno opcional. As\u00ed, podr\u00edamos codificar nuestro m\u00e9todo anterior haciendo que retorno un <code>Optional&lt;T&gt;</code> en vez de lanzar una excepci\u00f3n en el caso de que la colecci\u00f3n est\u00e9 vac\u00eda:</p> <pre><code>public static &lt;T extends Comparable&lt;T&gt;&gt; Optional&lt;T&gt; max(Collection &lt;? extends T&gt; coll){\ntry{\nreturn Optional.of(Collections.max(coll));\n} catch(NoSuchElementException){\nreturn Optional.empty();\n}\n}\n</code></pre> <p>En ese caso, cuando el cliente llame a este m\u00e9todo estar\u00e1 obligado a tratar el hecho de que puede que no se retorne un valor. No tiene que mirar la documentaci\u00f3n ni recordar hacer ning\u00fan tipo de comprobaci\u00f3n porque el tipo de terno es <code>Optional&lt;T&gt;</code>, de manera que si de verdad quiere obtener el valor, va a tener que comprobar si el Optional tiene o no valor.</p> <pre><code>Optional&lt;Integer&gt; maxOpt = max(list);\n</code></pre> <p>Veamos m\u00e1s m\u00e9todos de Optional:</p> <ul> <li><code>T get()</code>: si un valor est\u00e1 presente, devuelve el valor, de lo contrario lanza la excepci\u00f3n NoSuchElementException.</li> <li> <p><code>boolean isPresent()</code>: si un valor est\u00e1 presente, devuelve true, en caso contrario false.</p> <pre><code>import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Optional; public class GetAndIsPresent {     public void show() {         List&lt;Integer&gt; list1 = List.of(3, 2, 6, 1, 5, 4);\nList&lt;Integer&gt; list2 = new ArrayList&lt;&gt;();\nOptional&lt;Integer&gt; maximumOptional1 = max(list1);\nOptional&lt;Integer&gt; maximumOptional2 = max(list2);\nInteger maximum1 = 0, maximum2;    if (maximumOptional1.isPresent()) {\nmaximum1 = maximumOptional1.get();\n}\nSystem.out.println(maximumOptional1);//Optional[6]\nSystem.out.println(maximum1);//6         \nmaximum2 = maximumOptional2.isPresent() ? maximumOptional2.get() : 0;\nSystem.out.println(maximumOptional2);//Optional.empty\nSystem.out.println(maximum2);//0     \n}     public static &lt;T extends Comparable&lt;T&gt;&gt; Optional&lt;T&gt; max(Collection&lt;? extends T&gt; coll) {\ntry {\nreturn Optional.of(Collections.max(coll));\n} catch (NoSuchElementException e) {\nreturn Optional.empty();\n}\n} public static void main(String[] args) {         new GetAndIsPresent().show();     } }\n</code></pre> </li> <li> <p><code>T orElse(T other)</code>: si un valor est\u00e1 presente, devuelve el valor, de lo contrario devuelve el valor suministrado como argumento</p> </li> <li><code>T orElseGet(Supplier&lt;? extends T&gt; supplier)</code>: si hay un valor, devuelve el valor,  en  caso  contrario  devuelve  el  resultado  producido  por  la  funci\u00f3n suministradora.</li> <li><code>T orElseThrow()</code>: si un valor est\u00e1 presente, devuelve el valor, de lo contrario lanza la excepci\u00f3n NoSuchElementException.</li> <li> <p><code>&lt;X extends Throwable&gt; T orElseThrow(Suppler&lt;? extends X&gt; exceptionSupplier) throws x</code>: si hay un valor, devuelve el valor, en caso contrario, lanza una excepci\u00f3n producida por la funci\u00f3n suministradora.</p> <pre><code>import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Optional;\nimport java.util.Random;\npublic class OrElse {     public void show() {         List&lt;Integer&gt; list1 = List.of(3, 2, 6, 1, 5, 4);\nList&lt;Integer&gt; list2 = new ArrayList&lt;&gt;();\nOptional&lt;Integer&gt; maximumOptional1 = max(list1);\nOptional&lt;Integer&gt; maximumOptional2 = max(list2);\nInteger maximum1, maximum2; maximum1 = maximumOptional1.orElse(0);\nmaximum2 = maximumOptional2.orElse(0);\nSystem.out.println(maximum1);//6\nSystem.out.println(maximum2);//0         \nmaximum1 = maximumOptional1.orElseGet(() -&gt; obtainRandomNumber());\nmaximum2 = maximumOptional2.orElseGet(() -&gt; obtainRandomNumber());\nSystem.out.println(maximum1);//6\nSystem.out.println(maximum2);//N\u00famero aleatorio entre 1 y  10\nmaximum1 = maximumOptional1.orElseThrow();\nSystem.out.println(maximum1);//6\ntry {\nmaximum2 = maximumOptional2.orElseThrow();\n} catch (NoSuchElementException e) {\nSystem.out.println(\"Valor no presente\");\n}\nmaximum1 = maximumOptional1.orElseThrow(IllegalStateException::new);\nSystem.out.println(maximum1);//6\ntry {\nmaximum2 = maximumOptional2.orElseThrow(IllegalStateException::new);\n} catch (IllegalStateException e) {\nSystem.out.println(\"Valor no presente\");\n}     }     public Integer obtainRandomNumber() {\nreturn new Random().nextInt(10) + 1;//Devuelve un n\u00famero aleatorio entre 1 y 10\n}     public static &lt;T extends Comparable&lt;T&gt;&gt; Optional&lt;T&gt; max(Collection&lt;? extends T&gt; coll){\ntry {\nreturn Optional.of(Collections.max(coll));\n} catch (NoSuchElementException e) {\nreturn Optional.empty();\n}\n}     public static void main(String[] args) {\nnew OrElse().show();     } </code></pre> </li> <li> <p><code>Optional&lt;T&gt; or(Supplier&lt;? extends Optional&lt;? extends T&gt;&gt; supplier)</code>: se introdujo en Java 9 para encadenar Optionals. Si el Optional original contiene un valor, el m\u00e9todo retorna un nuevo Optional con dicho valor. Si el Optional original no contiene el valor, el m\u00e9todo retornar\u00e1 el Optional producido por la funci\u00f3n suministradora.</p> </li> <li><code>&lt;U&gt; Optional&lt;U&gt; map(Function &lt;? super T, ? extends U&gt; mapper)</code>: sirve para transformar el valor contenido en un Optional. Si el Optional original est\u00e1 vac\u00edo, devuelve un nuevo Optional vac\u00edo y si tiene valor, devolver\u00e1 el Optional que contendr\u00e1 como valor el resultado de aplicar la funci\u00f3n de transformaci\u00f3n al valor contenido en el Optional original. Si dicha funci\u00f3n devuelve un resultado nulo, entonces se devuelve un Optional vac\u00edo.</li> <li> <p><code>Optional&lt;T&gt; filter(Predicate &lt;? super T&gt; predicate)</code>: retorna un nuevo Optional que estar\u00e1 vac\u00edo si el Optional original estaba vac\u00edo o si no se cumple el predicado recibido como argumento (su m\u00e9todo <code>test()</code> retorna <code>false</code>). Si el Optional original conten\u00eda un valor y dicho valor cumple con el predicado, el nuevo Optional retornado contendr\u00e1 el valor del Optional original.</p> <pre><code>import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Optional;\nimport java.util.Random;\npublic class OrMapFilter {     public void show() {         List&lt;Integer&gt; list1 = List.of(3, 2, 6, 1, 5, 4);\nList&lt;Integer&gt; list2 = new ArrayList&lt;&gt;();\nOptional&lt;Integer&gt; maximumOptional1 = max(list1);\nOptional&lt;Integer&gt; maximumOptional2 = max(list2);\nOptional&lt;Integer&gt; maximumOptional3, maximumOptional4, maximumOptional5;         maximumOptional3 = maximumOptional1.or(() -&gt; Optional.of(obtainRandomNumber()));\nmaximumOptional4 = maximumOptional2.or(() -&gt; Optional.of(obtainRandomNumber()));\nSystem.out.println(maximumOptional3);//Optional[6]\nSystem.out.println(maximumOptional4);//Optional de un n\u00famero aleatorio\nmaximumOptional3 = maximumOptional1.map(n -&gt; n * 2);\nmaximumOptional4 = maximumOptional2.map(n -&gt; n * 2);\nSystem.out.println(maximumOptional3);//Optional[12]\nSystem.out.println(maximumOptional4);//Optional.empty  \nmaximumOptional3 = maximumOptional1.filter(n -&gt; n % 2 == 0);\nmaximumOptional4 = maximumOptional1.filter(n -&gt; n % 2 != 0);\nmaximumOptional5 = maximumOptional2.filter(n -&gt; n % 2 == 0);\nSystem.out.println(maximumOptional3);//Optional[6]\nSystem.out.println(maximumOptional4);//Optional.empty\nSystem.out.println(maximumOptional5);//Optional.empty\n}     public Integer obtainRandomNumber() {\nreturn new Random().nextInt(10) + 1;//Devuelve un n\u00famero aleatorio entre 1 y 10\n}     public static &lt;T extends Comparable&lt;T&gt;&gt; Optional&lt;T&gt; max(Collection&lt;? extends T&gt; coll)     {\ntry {\nreturn Optional.of(Collections.max(coll));\n} catch (NoSuchElementException e) {\nreturn Optional.empty();\n}\n}     public static void main(String[] args) {         new OrMapFilter().show();     } }\n</code></pre> </li> <li> <p><code>void ifPresent(Consumer &lt;? super T&gt; action)</code>: permite consumir (usar) directamente el valor contenido en Optional si es que \u00e9ste contiene un valor. Si el Optional est\u00e1 vac\u00edo, no hace nada.</p> </li> <li><code>void ifPresentOrElse(Consumer &lt;? super T&gt; action, Runnable emptyAction)</code>: se incorpor\u00f3 este m\u00e9todo en Java 9. Ejecuta el consumidor pasado como argumento si el Optional posee un valor o ejecuta el Runnable pasado como argumento si el Optional no contiene ning\u00fan valor.</li> </ul> <pre><code>import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Optional;\npublic class IfPresent {     public void show() {         List&lt;Integer&gt; list1 = List.of(3, 2, 6, 1, 5, 4);\nList&lt;Integer&gt; list2 = new ArrayList&lt;&gt;();\nOptional&lt;Integer&gt; maximumOptional1 = max(list1);\nOptional&lt;Integer&gt; maximumOptional2 = max(list2);\nmaximumOptional1.ifPresent(System.out::println);//6\nmaximumOptional2.ifPresent(System.out::println);//No hace nada         \nmaximumOptional1.ifPresentOrElse(System.out::println,() -&gt; System.out.println(\"No hay m\u00e1ximo porque la lista est\u00e1 vac\u00eda\"));//6\nmaximumOptional2.ifPresentOrElse(System.out::println,() -&gt; System.out.println(\"No hay m\u00e1ximo porque la  lista est\u00e1 vac\u00eda\"));//No hay m\u00e1ximo porque la lista est\u00e1 vac\u00eda     \n}     public static &lt;T extends Comparable&lt;T&gt;&gt; Optional&lt;T&gt; max(Collection&lt;? extends T&gt; coll){\ntry {\nreturn Optional.of(Collections.max(coll));\n} catch (NoSuchElementException e) {\nreturn Optional.empty();\n}\n}     public static void main(String[] args) {         new IfPresent().show();     } }\n</code></pre> <p>Desafortunadamente, no podemos garantizar que la referencia al objeto Optional en s\u00ed no sea <code>null</code>. De hecho, en todos los ejemplos anteriores estamos confiando en que el m\u00e9todo <code>max()</code> nunca va a retornar un <code>null</code>. Otros lenguajes de programaci\u00f3n m\u00e1s modernos, como Kotlin o Swift, incorporan el concepto de Optional al sistema de tipos, de manera que existir\u00e1n dos tipos distintos, uno que incorpora la posibilidad de tener el valor <code>null</code> y otro tipo que no lo permite. Por ejemplo, en Kotlin existe el tipo <code>String</code>, que no puede contener el valor <code>null</code> y el tipo <code>String?</code>, que s\u00ed puede contenerlo. Al establecer el tipo de retorno de una funci\u00f3n tendremos que decidir si el tipo de retorno del m\u00e9todo es <code>String?</code>, el cliente deber\u00e1 comprobar si realmente se ha retornado un valor o no, pero siempre podr\u00e1 realizar la comprobaci\u00f3n. El problema de Java es que al encapsular un valor en un objeto Optional, el propio objeto Optional podr\u00eda ser <code>null</code> y deber\u00edamos fiarnos de que eso nunca puede suceder o realizar la comprobaci\u00f3n cada vez. Evidentemente, cualquier desarrollador que realiza un m\u00e9todo que retorna un Optional deber\u00eda asegurarse y documentar que dicho m\u00e9todo nunca retornar\u00e1 <code>null</code>, sino siempre un Optional.</p>"},{"location":"bloque_iii/tema_12/page-4/#donde-no-usar-optional","title":"D\u00f3nde no usar Optional","text":"<p>Debemos tener en cuenta que la clase <code>Optional&lt;T&gt;</code> ha sido dise\u00f1ada espec\u00edficamente para ser usada como tipo de retorno de los m\u00e9todos. No se recomienda su uso en los siguientes casos:</p> <ul> <li>No se recomienda usar Optional como tipo de los atributos de una clase.</li> <li>No se recomienda usar Optional como tipo de los par\u00e1metros de un m\u00e9todo porque ensucian mucho el c\u00f3digo y realmente no hacen que el par\u00e1metro sea opcional.</li> <li>No se recomienda usar Optional como tipo de una colecci\u00f3n, como por ejemplo en una lista.</li> </ul>"},{"location":"bloque_iii/tema_12/page-5/","title":"Proyecto y ejercicios","text":"<p>En este proyecto se llevar\u00e1 acabo una serie de ejercicios sobre la programaci\u00f3n funcional.</p> <p>IMPORTANTE</p> <p>S\u00f3lo se crear\u00e1 un \u00fanico proyecto, para cada ejercicio se deber\u00e1 crear una nueva versi\u00f3n del mismo a trav\u00e9s de GitHub, teniendo que usar tags para cada versi\u00f3n cuyo nombre sea vX.0 d\u00f3nde X es el n\u00famero de ejercicio</p> Ejercicio 1 <p>Crear una interfaz <code>Predicate</code>, que tenga un \u00fanico m\u00e9todo llamado <code>test(entero)</code> que reciba un entero y retorne un booleano.</p> <p>Crea una clase llamada <code>IsPrime</code> que implemente la interfaz <code>Predicate</code> y cuyo m\u00e9todo <code>test(entero)</code> retorne true si el entero recibido es un n\u00famero primo.</p> <p>Crea una clase <code>SuperFunctions</code>, que posea los siguientes m\u00e9todos est\u00e1ticos:</p> <ol> <li><code>count(list, predicate)</code>: Retorna el n\u00famero de elementos de la lista que cumplen con el predicado recibido. En el <code>main</code> llama a dicho m\u00e9todo est\u00e1tico para obtener cu\u00e1ntos n\u00fameros hay que sean primos en una lista pasada como argumento. As\u00ed, si la lista es <code>[5, 7, 2, 4, 9, 5, 15, 3]</code>, el m\u00e9todo est\u00e1tico debe retornar <code>5</code>, ya que contiene los siguientes n\u00fameros primos <code>5, 7, 2, 5, 3</code>.</li> <li><code>allMatch(list, predicate)</code>: Retorna true si todos los elementos de la lista cumplen con el predicado recibido. En el <code>main</code> llama a dicho m\u00e9todo est\u00e1tico para obtener si todos los n\u00fameros de la lista son primos.</li> <li><code>noneMatch(list, predicate)</code>: Retorna true si ning\u00fan elemento de la lista cumple con el predicado  recibido.  En  el main   llama  a  dicho  m\u00e9todo  est\u00e1tico  para  obtener  si  ninguno  de  los n\u00fameros de la lista es primo.</li> <li><code>anyMatch(list,  predicate)</code>:  Retorna true si  alg\u00fan  elemento  de  la  lista  cumple  con  el predicado recibido. En el <code>main</code>  llama a dicho m\u00e9todo est\u00e1tico para obtener si alguno de los n\u00fameros de la lista es primo.</li> <li><code>takeWhile(list, predicate)</code>: Retorna una nueva lista creada a partir de los elementos de la lista recibida como argumento, de manera que va tomando valores de la lista original mientras \u00e9stos cumplan con el predicado recibido. En cuanto un elemento no cumple el predicado se dejan de incluir elementos en la lista resultante. Por ejemplo, si le pasamos la lista <code>[5, 7, 2, 4, 9, 5, 15, 3]</code> y el predicado de que el n\u00famero sea primo, la funci\u00f3n deber\u00e1 retornar la lista <code>[5, 7, 2]</code>, ya que el <code>4</code> ya no es primo. Prueba el ejemplo anterior desde el <code>main</code>.</li> <li><code>dropWhile(list, predicate)</code>: Retorna una nueva lista creada a partir de los elementos de la lista recibida como argumento, de manera que el primer elemento que es incluido en la lista resultante es  aquel  que  no  cumple  con  el  predicado  recibido  como  argumento,  y  a  partir  de  dicho  elemento  el resto de elementos de la lista original son incluidos sin realizar ninguna comprobaci\u00f3n. Por ejemplo, si le pasamos la lista <code>[5, 7, 2, 4, 9, 5, 15, 3]</code> y el predicado de que el n\u00famero sea primo, la funci\u00f3n  deber\u00e1  retornar  la  lista <code>[4, 9, 5, 15, 3]</code>, porque  el  primer  n\u00famero  no  primo  de  la  lista original es <code>4</code>. Prueba el ejemplo anterior desde el  main .</li> </ol> Ejercicio 2 <p>Crea una interfaz <code>Function</code>, que tenga un \u00fanico m\u00e9todo llamado <code>apply(entero)</code>que reciba un entero y retorne un entero.</p> <p>Crea una clase llamada <code>Triple</code> que implemente la interfaz <code>Function</code> y cuyo m\u00e9todo <code>apply(entero)</code>retorne el triple del entero recibido.</p> <p>Crea  una  clase  llamada <code>LessThan100</code>   que  implemente  la  interfaz <code>Predicate</code>  y cuyo m\u00e9todo <code>test(entero)</code> retorne  true si el entero recibido es &gt;= 0 y menor que 100.</p> <p>En la clase  SuperFunctions  agrega los siguientes m\u00e9todos est\u00e1ticos:</p> <ol> <li><code>iterate(integerSeed,  count,  function)</code>: Retorna  una  lista  con <code>count</code>  elementos  (se debe lanzar una excepci\u00f3n si <code>count  &lt;=  0</code>), donde el primer elemento corresponde a <code>integerSeed</code> y  el  resto  de  elementos  se  calcula  aplicando  la  funci\u00f3n  recibida  al  elemento anterior.  Por  ejemplo,  si <code>integerSeed</code> es 1, <code>count</code> es 4 y la funci\u00f3n es calcular el triple,  el m\u00e9todo debe retornar la lista  <code>[1, 3, 9, 27]</code></li> <li><code>iterate(integerSeed, max, predicate,  function)</code>:  Retorna  una  lista  donde  el  primer elemento  corresponde  a <code>integerSeed</code> y  el  resto  de  elementos  se  calcula  aplicando  la  funci\u00f3n recibida  al  elemento  anterior.  En  cuanto  un  elemento  generado  no  cumple  con  el  predicado  dicho elemento no es incluido en la lista resultante y \u00e9sta se da por concluida. Si la lista resultante alcanza el n\u00famero m\u00e1ximo de elementos <code>max</code> la lista se da por concluida. Por ejemplo, si <code>integerSeed</code> es 1, <code>max</code> es 10, el predicado es que el n\u00famero sea menor que 100 y la funci\u00f3n es calcular  el triple, el m\u00e9todo debe retornar la lista <code>[1, 3, 9, 27, 81]</code>, ya que  243 (81 * 3)  ya no es menor que 100. Si el predicado se cumple siempre, como por ejemplo si en el caso anterior <code>integerSeed</code> es 0 , se retornar\u00e1 una lista cuyo tama\u00f1o corresponder\u00e1 a <code>max</code>, en nuestro caso <code>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</code>.</li> </ol> Ejercicio 3 <p>Crea una interfaz <code>ConsumerBinary</code>, que tenga un \u00fanico m\u00e9todo <code>accept(entero1,entero2)</code>  que reciba dos enteros y no retorne nada.</p> <p>Crea  una  clase <code>PrinterWithIndex</code> que  implemente  la  interfaz <code>ConsumerBinary</code> y cuyo m\u00e9todo <code>accept(entero1, entero2)</code> muestre por consola el mensaje \"El valor {entero2} tiene el \u00edndice {entero1}\"  sustituyendo <code>{entero2}</code> por  el  valor  de entero2 y {entero1}   por  el  valor  de{entero1} </p> <p>Crear una interfaz <code>FunctionBinary</code>, que tenga un \u00fanico m\u00e9todo <code>apply(entero1, entero2)</code> que reciba dos enteros y retorne un entero.</p> <p>Crea una clase <code>Subtractor</code> que implemente dicha interfaz y cuyo m\u00e9todo <code>apply()</code> retorne el resultado de restarle entero1 a entero2.</p> <p>En la clase <code>SuperFunctions</code> agrega los siguientes m\u00e9todos est\u00e1ticos:</p> <ul> <li><code>actWithIndex(list, consumerBinary)</code>: Para cada elemento de la lista llama al m\u00e9todo <code>accept</code> del consumidor binario pas\u00e1ndole como primer argumento el \u00edndice del elemento y como segundo argumento el elemento en s\u00ed. La funci\u00f3n debe retornar una nueva lista con los elementos de la lista original. Por ejemplo, si la lista es <code>[10, 20, 30]</code> y el <code>consumerBinary</code> es un objeto de la clase <code>PrinterWithIndex</code>, se debe mostrar por consola:</li> </ul> <p><pre><code>El valor 10 tiene el \u00edndice 0\nEl valor 20 tiene el \u00edndice 1\nEl valor 30 tiene el \u00edndice 2\n</code></pre> La funci\u00f3n debe retornar <code>[10, 20, 30]</code>.</p> <ul> <li><code>consumeWithIndex(list, consumerBinary)</code>: Para cada elemento de la lista llama al m\u00e9todo <code>accept</code> del consumidor binario pas\u00e1ndole como primer argumento el \u00edndice del elemento y como segundo argumento el m\u00e9todo en s\u00ed. La funci\u00f3n no debe retornar nada.</li> <li><code>reduceFromEnd(list, functionBinary)</code>: Retorna un valor entero con el resultado de aplicar la operaci\u00f3n de reducci\u00f3n indicada por la <code>functionBinary</code> pero tomando como primer elemento el \u00faltimo de la lista original. Si la lista original estuviera vac\u00eda retornar\u00e1 <code>null</code>. Por ejemplo, si la lista es <code>[1, 3, 9, 27]</code> y la funci\u00f3n binaria corresponde a un objeto de la clase <code>Subtractor</code>, la funci\u00f3n debe retornar 14, que corresponde a la operaci\u00f3n 27 - 9 - 3 - 1.</li> <li><code>reduceFromEnd(list, identity, functionBinary)</code>: Retorna un valor entero con el resultado de aplicar la operaci\u00f3n de reducci\u00f3n indicada por la <code>functionBinary</code> pero tomado como primer elemento el \u00faltimo de la lista original. El valor inicial de acumulador corresponder\u00e1 a <code>identity</code>. Por ejemplo, si la lista es <code>[1, 3, 9, 27]</code>, identidad corresponde <code>0</code> y la funci\u00f3n binaria corresponde a un objeto de la clase <code>Subtractor</code>, la funci\u00f3n debe retornar -40, que corresponde a la operaci\u00f3n 0 - 27 - 9 - 3 - 1.</li> </ul> Ejercicio 4 <p>Realiza las siguientes modificaciones:</p> <ul> <li>En el main(), realiza las llamadas anteriores a las funciones haciendo uso de las clases an\u00f3nimas inline, en vez de usar las clases <code>IsPrime</code>, <code>Triple</code>, <code>NaturalLessThan100</code>, <code>PrinterWithIndex</code> o <code>Subtractor</code>, que puedes eliminar tranquilamente.</li> <li>Modifica las interfaces para que en vez de trabajar con enteros, sean interfaces gen\u00e9ricas parametrizadas que funcionen con tipos gen\u00e9ricos.</li> <li>Modifica los m\u00e9todos de la clase <code>SuperFunction</code> para que se adapten a los cambios descritos anteriormente.</li> <li>Vuelve a cambiar en el main(), las llamadas a las funciones, haciendo uso de las clases an\u00f3nimas inline, pero en esta ocasi\u00f3n haciendo uso de los parametrizadas con el tipo adecuado.</li> </ul> Ejercicio 5 <p>Crea la clase <code>Stream&lt;T&gt;</code>, que representa un flujo, y a\u00f1\u00e1dele los m\u00e9todos de la clase <code>SuperFunctions</code>, sin que sean est\u00e1ticos (excepto el m\u00e9todo <code>iterate</code>). (La clase <code>SuperFunctions</code> podr\u00e1 ser eliminada).</p> <p>Haz que los m\u00e9todos de la clase retornen un nuevo flujo en vez de una lista.</p> <p>Agrega a la clase <code>Stream&lt;T&gt;</code> los m\u00e9todos:</p> <ul> <li><code>filter(predicate)</code>: retorna un nuevo flujo con los elementos de la lista original que cumplan el predicado.</li> <li><code>map(function)</code>: retorna un nuevo flujo con los elementos \"transformados\" del flujo original. Por ejemplo, si la flujo inicial est\u00e1 formado por los n\u00fameros del 1 al 10 y se quiere transformar al cuadrado de dichos n\u00fameros (el valor de <code>function</code> ser\u00eda una clase an\u00f3nima inline, que la implementaci\u00f3n de su m\u00e9todo <code>apply</code>retorne el cuadrado de un n\u00famero).</li> <li><code>of(vararg)</code>: m\u00e9todo est\u00e1tico que recibe un vararg de elementos, que retornar\u00e1 un flujo con los elementos recibidos.</li> <li><code>from(collection)</code>: m\u00e9todo est\u00e1tico que recibe una colecci\u00f3n de elementos y retornar\u00e1 un nuevo flujo con los elementos recibidos.</li> <li><code>recolectar()</code>: retorna una lista con los elementos gestionados por el flujo.</li> </ul> <p>Realiza un main que cree un flujo usando el m\u00e9todo est\u00e1tico <code>iterate(integerSeed, count, function)</code>, donde <code>integerSeed</code>, sea 1, <code>count</code>sea 5 y <code>function</code> sea una <code>Function&lt;Integer&gt;</code> cuyo m\u00e9todo <code>apply()</code> retorna el valor recibido multiplicado por 5 y se le sume 1. Despu\u00e9s el flujo generado ser\u00e1 filtrado de manera que se obtenga un nuevo flujo con s\u00f3lo los valores del anterior que sean pares. Despu\u00e9s se deber\u00e1 obtener un nuevo flujo con los valores del anterior convertidos a cadena con el formato <code>-valor-</code> y finalmente dicho flujo se reduzca haciendo uso del m\u00e9todo <code>reduceFromEnd()</code>, de manera que se obtenga una \u00fanica cadena de caracteres. Por ejemplo <code>-156--6-</code>.</p> Ejercicio 6 <p>Realiza la versi\u00f3n anterior modificando lo siguiente:</p> <ul> <li>A\u00f1ade la anotaci\u00f3n <code>@FunctionalInterface</code> a todas las interfaces definidas.</li> <li>Reemplaza las clases an\u00f3nimas con expresiones lambdas.</li> </ul> Ejercicio 7 <p>En esta versi\u00f3n elimina las interfaces funcionales y reempl\u00e1zalas en la clase <code>Stream&lt;T&gt;</code>  por las interfaces funcionales predefinidas en Java 8.</p> Ejercicio 8 <p>Crea una clase <code>MyAppUtils</code> con los siguientes m\u00e9todos est\u00e1ticos:</p> <ul> <li><code>quintupleMoreOne(value)</code>: recibe un entero y retorna dicho valor multiplicado por 5 y despu\u00e9s sum\u00e1ndole 1.</li> <li><code>isEven(value)</code>: recibe un entero y retorna true si el n\u00famero es par.</li> <li><code>withDashes(value)</code>: recibe un entero y retorna la cadena <code>-value-</code>.</li> <li><code>concat(str1, str2)</code>: retorna la concatenaci\u00f3n de ambas cadenas recibidas.</li> </ul> <p>Haciendo uso de la referencias a m\u00e9todos, sustituye las expresiones lambda por la llamada a estos m\u00e9todos.</p> Ejercicio 9 <p>Realiza los m\u00e9todos anteriores dentro de la misma clase Main sin definirlos de forma est\u00e1tica y eliminado la clase <code>MyAppUtils</code>. Adem\u00e1s en vez de usar el m\u00e9todo <code>concat</code> (que puede ser eliminado) se usar\u00e1 el m\u00e9todo <code>concat</code> de la clase <code>String</code>.</p> Ejercicio 10 <p>Agrega a la clase <code>Stream&lt;T&gt;</code> un m\u00e9todo <code>find(predicate)</code> que encuentre el primer elemento que cumple con el predicado y lo retorne en un <code>Optional&lt;T&gt;</code>.</p> <p>Agrega tambi\u00e9n, un m\u00e9todo llamada <code>findLast(predicate)</code> que encuentre el \u00faltimo elemento que cumple con el predicado y lo retorne en un <code>Optional&lt;T&gt;</code>.</p>"},{"location":"bloque_iii/tema_13/page-1/","title":"1 Introducci\u00f3n a los Streams","text":""},{"location":"bloque_iii/tema_13/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>Un stream (flujo) en Java es una secuencia de elementos que se pueden procesar (mapear, filtrar, transformar, reducir y recolectar), de forma secuencial o paralela, mediante una cadena de operaciones especificadas a trav\u00e9s de expresiones lambda. Introducidos en Java 8, los streams permiten optimizar la forma de procesar grandes colecciones de datos.</p> <p>La interfaz <code>Stream&lt;T&gt;</code> representa un flujo de elementos de tipo <code>T</code> aunque tambi\u00e9n se definen interfaces concretas para los tipos primitivos, como <code>IntStream</code>, <code>LongStream</code>, etc.</p> <p>Un stream es una abstracci\u00f3n que representa un flujo de datos pero no una estructura de datos, ya que los elementos no son almacenados en el stream, sino tan solo procesador por \u00e9l. De hecho, no se puede acceder individualmente a un determinado elemento del stream, sino que se define la fuente de datos origen del stream y la secuencia de operaciones que se deben aplicar sobre sus elementos, especificadas de forma funcional mediante expresiones lambda.</p> <p>M\u00e1s a\u00fan, la fuente de datos de origen del stream no se ve afectada por las operaciones realizadas dentro del stream. Por ejemplo, si se filtran algunos elementos de datos del stream, no se eliminan realmente de la fuente de datos origen, simplemente se omiten en el stream a partir de ese momento y ya no se tienen en cuenta la siguiente operaci\u00f3n incluida en la secuencia de operaciones del stream. Por tanto, los datos con los que trabajamos no se ven afectados por el stream.</p> <p>Los streams solo gestionan datos transitorios en memoria, lo que implica que si la aplicaci\u00f3n falla dichos datos se perder\u00e1n.</p> <p>Un stream puede ser finito, es decir, tener un n\u00famero finito de elementos, o infinito, si genera un n\u00famero infinito de elementos. Algunas operaciones permiten restringir el n\u00famero de elementos procesados, como <code>limit()</code> o <code>findFirst()</code>.</p>"},{"location":"bloque_iii/tema_13/page-1/#pipeline","title":"Pipeline","text":"<p>Una vez hayamos creado un stream a partir de una fuentes de datos, podemos ejecutar sobre \u00e9l cero o m\u00e1s operaciones intermedias, y forzosamente, una operaci\u00f3n final. A esta cadena de operaciones se le conoce como pipeline. Un pipeline tiene los siguientes elementos en el siguiente orden:</p> <ol> <li>Una funci\u00f3n generadora del stream.</li> <li>Cero o m\u00e1s operaciones intermedias.</li> <li>Un operaci\u00f3n terminal.</li> </ol> <p>Debemos tener en cuenta que cada operaci\u00f3n intermedia del pipeline genera un nuevo stream resultante de aplicar la operaci\u00f3n indicada al stream anterior de la cadena.</p> <ul> <li>Operaciones intermedias (aggregate operations): producen como resultado un nuevo stream. Se usan para transformar, filtrar y clasificar los elementos del stream. Puede ser:<ul> <li>Operaciones sin estado: al aplicarlas, el procesamiento de un elemento del stream es independiente de cualquier otro elemento del mismo. Por ejemplo, la operaci\u00f3n de filtrado es sin estado, ya que el filtro de cada elemento s\u00f3lo depende de una condici\u00f3n, no de ning\u00fan otro elemento del stream.</li> <li>Operaciones con estado: al aplicarlas, el procesamiento de un elemento del stream depende de alg\u00fan otro elemento del mismo. Por ejemplo, la operaci\u00f3n de ordenaci\u00f3n es con estado, ya que para posicionar un elemento es necesario compararlo con el resto.</li> </ul> </li> <li>Operaciones terminales (terminal operations): procesan todos los elementos del stream para generar un resultado o un efecto secundario. De hecho, no retornan un stream. Despu\u00e9s de su ejecuci\u00f3n, el stream original no puede ser usado de nuevo, produciendo una excepci\u00f3n si se intenta. De ah\u00ed que se denominen operaciones terminales. Por tanto, un determinado stream puede ser usado una sola vez; si necesitamos procesar la misma fuente de datos, deberemos crear un nuevo stream con ella como origen.</li> </ul> <p>Otra caracter\u00edstica important\u00edsima del pipeline es que es perezoso (lazy), lo que quiere decir que las operaciones intermedias s\u00f3lo son ejecutadas cuando las requiere la operaci\u00f3n terminal que se est\u00e9 ejecutando.</p> <p>Por defecto, los elementos de un stream son procesados secuencialmente de uno en uno en el mismo hilo de ejecuci\u00f3n. Es lo que se conoce como stream secuencial. Sin embargo, podemos convertir un stream secuencial en un stream paralelo con tan s\u00f3lo llamar a su m\u00e9todo <code>parallel()</code>. Los elementos de los streams paralelos son agrupados en conjuntos y se usa un grupo de hilos en ejecuci\u00f3n, denominados common fork-join pool, para procesar estos conjuntos de elementos en hilos de ejecuci\u00f3n independientes.</p> <p>Debemos tener en cuenta que al llamar al m\u00e9todo <code>parallel()</code> se convierte el stream completo en paralelo, no solo desde el punto en el que se llama al m\u00e9todo.</p> <p>Debemos tener en cuenta que las operaciones intermedias con estado no utilizar\u00e1n todas las posibilidades de paralelismo existentes, dada su naturaleza en lo relativo a lo dependencia entre elementos.</p>"},{"location":"bloque_iii/tema_13/page-1/#modelo-mapreduce","title":"Modelo MapReduce","text":"<p>En Java, los streams utilizan el modelo MapReduce, que es un modelo de programaci\u00f3n utilizado para procesar conjuntos de datos muy grandes y que ha sido adoptado por la programaci\u00f3n funcional. Este modelo se basa en los siguientes tipos de operaciones:</p> <ul> <li>Transformaci\u00f3n (map): filtra o crea copias modificadas de los elementos originales. Todas las operaciones intermedias de los streams corresponden a operaciones de transformaci\u00f3n.</li> <li> <p>Reducci\u00f3n (reduce): genera un resultado resumen de todos los elementos, por ejemplo, la suma o la media aritm\u00e9tica. Las operaciones terminales de la clase <code>Stream</code> corresponde a operaciones de reducci\u00f3n. De hecho, la clase <code>Stream</code> implementa dos operaciones de reducci\u00f3n diferentes:</p> <ul> <li>De reducci\u00f3n pura: implementada en las diferentes versiones del m\u00e9todo <code>reduce</code>, que procesa un flujo de elementos para obtener un \u00fanico valor.</li> <li>De reducci\u00f3n mutable: implementada en las diferentes versiones del m\u00e9todo <code>collect</code>, que procesa un flujo de elementos para generar una estructura de datos mutable, como por ejemplo, una colecci\u00f3n.</li> </ul> </li> </ul>"},{"location":"bloque_iii/tema_13/page-1/#creacion-de-un-stream-a-partir-de-una-fuente-de-datos","title":"Creaci\u00f3n de un stream a partir de una fuente de datos","text":"<p>Java permite muchas maneras de crear un stream, dependiendo de la fuente de datos origen deseada. Veamos algunas de estas fuentes:</p> <ul> <li> <p>Colecci\u00f3n: se ejecuta el m\u00e9todo <code>stream()</code> sobre una colecci\u00f3n para crear un stream que tenga como fuente de datos de origen dicha colecci\u00f3n. Tambi\u00e9n tenemos disponible el m\u00e9todo <code>parallelStream()</code> para que los elementos sean procesados en modo paralelo.</p> <p>Podemos crear un stream a partir del cualquier interfaz que extienda de <code>Collection</code>, como <code>List</code>, <code>Set</code> o <code>Queue</code> y cualquiera de las clases que implementen dichas interfaces. Por ejemplo, desde una lista:</p> <pre><code>List&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4);\nStream&lt;Integer&gt; stream = list.stream();\n</code></pre> <p>o desde el <code>Set</code> correspondiente a las entradas de un <code>Map</code>:</p> <pre><code>Map&lt;Integer, String&gt; map = new HashMap&lt;&gt;();\nStream&lt;Map.Entry&lt;Integer, String&gt;&gt; stream = map.entrySet().stream();\n</code></pre> </li> <li> <p>Array: el m\u00e9todo est\u00e1tico <code>Arrays.stream(array)</code> recibe un array, que actuar\u00e1 como fuente de datos origen del stream. Ejemplo:</p> <pre><code>Integer array[] = {1, 2, 3, 4};\nStream&lt;Integer&gt; stream = Arrays.stream(array);\n</code></pre> </li> <li> <p>Conjunto predeterminado de elementos: el m\u00e9todo est\u00e1tico <code>Stream.of()</code> recibe un n\u00famero variable de elementos que actuar\u00e1n como fuente de datos origen del stream. Ejemplo</p> <pre><code>Stream&lt;Integer&gt; stream = Stream.of(1, 2, 3, 4);\n</code></pre> </li> <li> <p>Funci\u00f3n suministradora de objetos (interfaz funcional <code>Supplier</code>): el m\u00e9todo est\u00e1tico <code>Stream.generate()</code> recibe un <code>Supplier</code>, es decir, una funci\u00f3n suministradora de elementos, que actuar\u00e1 como fuente de datos origen infinita para el stream. Ejemplo:</p> <pre><code>Stream&lt;Integer&gt; stream = Stream.generate(new Random()::nextInt);\n</code></pre> </li> <li> <p>Un valor inicial y una funci\u00f3n que obtiene el siguiente elemento a partir del anterior: el m\u00e9todo est\u00e1tico <code>Stream.iterate(seed, unaryOperator)</code> recibe un valor inicial y una funci\u00f3n que recibe el elemento anterior y retorna el valor del nuevo elemento, que debe ser del mismo tipo. Se tratar\u00e1 de un stream infinito.</p> <p>Ejemplo:</p> <pre><code>Stream&lt;Integer&gt; stream = Stream.iterate(0, x -&gt; x + 5);\n</code></pre> <p>Java 9 introdujo una nueva versi\u00f3n de este m\u00e9todo <code>Stream.iterate(seed, predicate, unaryOperator)</code> que recibe un par\u00e1metro intermedia adicional correspondiente a un predicate que al dejar de cumplir hace que el stream no emita m\u00e1s valores, convirti\u00e9ndose en un stream finito. Ejemplo:</p> <pre><code>Stream&lt;Integer&gt; stream = Stream.iterate(0, x -&gt; x &lt; 100, x -&gt; x + 5);\n</code></pre> </li> <li> <p>Detectando patrones en una cadena: el m\u00e9todo <code>splitAsStream(cadena)</code> de la clase <code>Pattern</code> permite dividir una cadena en base a un patr\u00f3n y retornar un stream de subcadenas. Por ejemplo:</p> <pre><code>Stream&lt;String&gt; stream = Pattern.compile(\",\".splitAsStream(\"Luis,Paco,Ricardo\"));\n</code></pre> <p>retorna un stream cuyos elementos ser\u00e1n Luis, Paco y Ricardo.</p> </li> <li> <p>Generador de n\u00fameros aleatorios: el m\u00e9todo <code>ints(limiteInf, limiteSup)</code> de la clase <code>Random</code> retorna un stream (un <code>IntStream</code>) cuya fuente de datos origen es el generador de n\u00fameros aleatorios contenidos entre <code>limiteInf</code> y <code>limiteSup</code>. Es especialmente \u00fatil para hacer pruebas. Ejemple:</p> <pre><code>IntStream stream = new Random().ints(1, 100);\n</code></pre> </li> <li> <p>M\u00e9todos est\u00e1ticos de la clase IntStream:</p> <ul> <li> <p><code>IntStream.range(start, end)</code>: retorna un <code>IntStream</code> ordenado cuyos elementos corresponden a los enteros que van desde <code>start</code> hasta <code>end - 1</code>, es decir, <code>end</code> est\u00e1 excluido. Ejemplo:</p> <pre><code>IntStream stream = IntStream.range(1,8);\n</code></pre> </li> <li> <p><code>IntStream.rangeClosed(start, end)</code>: retorna un <code>IntStream</code> ordenado cuyos elementos corresponden a los enteros que van desde <code>start</code> hasta <code>end</code> incluido. Ejemplo:</p> <pre><code>IntStream stream = IntStream.rangeClosed(1, 8);\n</code></pre> </li> </ul> </li> <li> <p>M\u00e9todo chars() de String: retorna un <code>IntStream</code> cuyos elementos corresponden a los caracteres de la cadena. Ejemplo:</p> <pre><code>IntStream stream = \"Programaci\u00f3n\".chars();\n</code></pre> </li> <li> <p>Un valor inicial: Java 9 incorpora el m\u00e9todo est\u00e1tico <code>Stream.ofNullable(T value)</code> que retorna un <code>Stream&lt;T&gt;</code> con el valor indicado o vac\u00edo si el valor proporcionado es <code>null</code>.</p> </li> <li>Un Optional: Java 9 incorpora el m\u00e9todo <code>stream()</code> que retorna un <code>Stream&lt;T&gt;</code> con un \u00fanico valor correspondiente al valor contenido en el optional o un stream vac\u00edo si el optional no tiene valor presente.</li> <li>Un stream vac\u00edo: podemos crear un stream vac\u00edo mediante el m\u00e9todo est\u00e1tico <code>empty()</code> de la interfaz <code>Stream&lt;T&gt;</code>.</li> <li>Un stream builder: podemos crear un stream a partir de un objeto <code>Stream.Builder&lt;T&gt;</code> al que podamos agregar elementos mediante el m\u00e9todo <code>add(item)</code> y posteriormente usar el m\u00e9todo <code>build()</code> del mismo para obtener el objeto <code>Stream&lt;T&gt;</code>.</li> <li> <p>La concatenaci\u00f3n de dos streams: El m\u00e9todo est\u00e1tico <code>Stream.concat(stream1, stream2)</code> retorna un stream resultante de la concatenaci\u00f3n de los dos streams recibidos. Ejemplo:</p> <pre><code>Stream&lt;String&gt; stream1 = Stream.of(\"Luis\", \"Paco\", \"Ricardo\");\nStream&lt;String&gt; stream2 = Stream.of(\"Ana\", \"Lidia\", \"Esther\");\nStream&lt;String&gt; stream = Stream.concat(stream1, stream2);\n</code></pre> </li> </ul>"},{"location":"bloque_iii/tema_13/page-1/#tratamiento-individual-de-los-elementos","title":"Tratamiento individual de los elementos","text":"<p>En algunas ocasiones necesitamos realizar alg\u00fan tratamiento sobre cada uno de los elementos del stream. En dicho caso debemos diferenciar entre operaciones terminales y no terminales. Las operaciones terminales no producir\u00e1n un nuevo stream mientras que las operaciones intermedias s\u00ed que lo producir\u00e1n.</p> <ul> <li><code>void forEach(Consumer&lt;? super T&gt; action)</code>: operaci\u00f3n terminal para tratar cada uno de los elementos del stream. Aplica la acci\u00f3n recibida en forma de Consumer a cada uno de los elementos del stream.</li> <li><code>Stream&lt;T&gt; peek(Consumer&lt;? super T&gt; action)</code>: tambi\u00e9n se aplica la acci\u00f3n recibida en forma de Consumer a cada uno de los elementos del stream pero retorna un nuevo stream con los mismos elementos que el original, por lo que se trata de una operaci\u00f3n intermedia. Este m\u00e9todo se utiliza para tratar individualmente cada uno de los elementos del stream sin tener por ello que terminar la cadena de operaciones.</li> </ul>"},{"location":"bloque_iii/tema_13/page-2/","title":"2 Operaciones intermedias","text":""},{"location":"bloque_iii/tema_13/page-2/#filtrado","title":"Filtrado","text":"<p>Otra de las operaciones intermedias que se pueden realizar sobre un stream es el filtrado de sus elementos, es decir, la generaci\u00f3n de un nuevo stream que s\u00f3lo contenga algunos de los elementos del stream original. Java nos proporciona distintos m\u00e9todos:</p> <ul> <li> <p><code>Stream&lt;T&gt; distinct()</code>: retorna un nuevo stream con los elementos del stream original, excepto aquellos que estuvieran repetidos. Para determinar que dos elementos son iguales se usar\u00e1 al m\u00e9todo <code>equals()</code> del elemento. Ejemplo:</p> MainSalida <pre><code>import java.util.stream.Stream;\npublic class Distinct{\npublic void show(){\nStream.of(1, 3, 2, 3, 1)\n.distinct()\n.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew Distinct().show();\n}\n}\n</code></pre> <pre><code>1\n3\n2\n</code></pre> <ul> <li><code>Stream&lt;T&gt; limit(long maxSize)</code>: retorna un nuevo stream con tan s\u00f3lo maxSize elementos del stream original, atendiendo al orden intr\u00ednseco del mismo. Tiene un mal rendimiento en streams paralelos ordenados. Ejemplo:</li> </ul> MainSalida <pre><code>public class Limit{\npublic void show(){\nStream.of(\"Ricardo\", \"Luis\", \"Paco\")\n.limit(2)\n.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew Limit().show();\n}\n}\n</code></pre> <pre><code>Ricardo\nLuis\n</code></pre> <ul> <li><code>Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</code>: retorna un nuevo stream que s\u00f3lo incorpora los elementos del stream original que cumplan el predicado recibido. Ejemplo:</li> </ul> MainSalidas <pre><code>public class Filter{\npublic void show(){\nStream.of(9, 12, 15, 24, 37, 6)\n.filter(n -&gt; n % 2 == 0)\n.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew Filter().show();\n}\n}\n</code></pre> <pre><code>12\n24\n6\n</code></pre> <ul> <li><code>Stream&lt;T&gt; skip(long n)</code>: retorna un nuevo stream en el que no se incluyen los primeros n elementos del stream original pero s\u00ed se incluye el resto. No proporciona un buen rendimiento en streams paralelos ordenados. Ejemplo:</li> </ul> MainSalida <pre><code>public class Skip{\npublic void show(){\nStream.of(9, 12, 15, 24, 27, 6)\n.skip(3)\n.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew Skip().show();\n}\n}\n</code></pre> <pre><code>24\n37\n6\n</code></pre> <ul> <li><code>default Stream&lt;T&gt; dropWhile(Predicate &lt;? super T&gt; predicate)</code>: retorna un nuevo stream con el primer elemento que no cumpla el predicado y el resto de elementos, independientemente de si cumplen el predicado o no. Proporciona un mal rendimiento con streams paralelos ordenados:</li> </ul> MainSalida <pre><code>public class DropWhile{\npublic void show(){\nStream.of(9, 13, 15, 24, 37, 6)\n.dropWhile(n -&gt; n % 2 != 0)\n.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew DropWhile().show();\n}\n}\n</code></pre> <pre><code>24\n37\n6\n</code></pre> <ul> <li><code>default Stream&lt;T&gt; takeWhile(Predicate&lt;? super T&gt; predicate)</code>: mientras los elementos cumplan el predicado se van incluyendo en el stream, pero en cuanto se encuentra un elemento que no cumple el predicado se deja de incluir el resto de elementos, incluso aunque cumplan el predicado. Ejemplo:</li> </ul> MainSalida <pre><code>public class TakeWhile{\npublic void show(){\nStream.of(9, 13, 15, 24, 37, 6)\n.takeWhile(n -&gt; n % 2 != 0)\n.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew TakeWhile().show();\n}\n}\n</code></pre> <pre><code>9\n13\n15\n</code></pre> </li> </ul>"},{"location":"bloque_iii/tema_13/page-2/#ordenacion","title":"Ordenaci\u00f3n","text":"<p>Algunos streams son ordenados, es decir, que sus elementos poseen un determinado orden intr\u00ednseco significativo, conocido como encounter order. Por ejemplo, un stream cuya fuente de datos corresponda a una lista crear\u00e1 un stream ordenado, cuyo encounter order ser\u00e1 el orden en el que los elementos est\u00e1n situados en la lista. Sin embargo, otros streams no son ordenados, en el sentido de que sus elementos no tienen un orden intr\u00ednseco significativo. Por ejemplo, un stream cuya fuente de datos sea un conjunto (Set) ser\u00e1 un stream sin encounter order, ya que un conjunto los elementos no tienen un orden preestablecido.</p> <p>El hecho de que un stream sea ordenado o no depender\u00e1 del tipo de fuente de datos asociada y de las operaciones intermedias anteriores que hayamos realizado mediante las que se ha obtenido el stream.</p> <p>Algunas operaciones trabajan por defecto en base a este encounter order, imponiendo una restricci\u00f3n acerca del orden en el que los elementos deben ser procesados, como por ejemplo las operaciones intermedias limit o skip.</p> <p>Sin embargo, existen otras operaciones que no tienen en cuenta el encounter order, como por ejemplo forEach. Si se ejecuta sobre un stream paralelo, no hay ninguna garant\u00eda sobre en que orden se aplica la acci\u00f3n a los elementos. Si queremos que s\u00ed se tenga en cuenta el orden, entonces tendr\u00edamos que usar el m\u00e9todo <code>void forEachOrdered(Consumer&lt;? super T&gt; action)</code>. Normalmente se usa encadenado despu\u00e9s de llamar a un m\u00e9todo de ordenaci\u00f3n que habr\u00e1 ordenado el stream. La ventaja de este m\u00e9todo es que se garantiza que la acci\u00f3n se aplica a los elementos en el orden intr\u00ednseco del stream, incluso aunque \u00e9ste se trate de un stream paralelo, aunque conlleve un peor rendimiento.</p> <p>Al trabajar con streams secuenciales, el encounter order no afecta al rendimiento de la aplicaci\u00f3n, pero si trabajamos con streams paralelos, el empleo del encounter order por parte de algunos operadores pueden afectar en gran medida al rendimiento general de la aplicaci\u00f3n. Dependiendo de la operaci\u00f3n de la que se trate, ser\u00e1 necesario procesar a la vez m\u00e1s de un elemento del stream a partir del anterior, en el que no se tenga en cuenta el encounter order. Al ejecutar el m\u00e9todo <code>unordered()</code>, tan solo se est\u00e1 creando un nuevo stream en el que se ha borrado el indicador de que el encounter order debe tenerse en cuenta. Normalmente, esta operaci\u00f3n de desactivaci\u00f3n del encounter order se realiza con el objetivo de mejorar el rendimiento en streams paralelos.</p> <p>Por otra parte, si queremos obtener un stream ordenado a partir de otro desordenado o a partir de otro stream ordenado pero por un orden distinto, podemos usar el m\u00e9todo <code>sorted()</code>, en cuyo caso los elementos del stream deben implementar la interfaz <code>Comparable</code> para determinar el orden en el que deben ser ordenados. Otra posibilidad es usar una versi\u00f3n sobrecargada de dicho m\u00e9todo que recibe un objeto <code>Comparator</code> como argumento. Ejemplo:</p> MainSalida <pre><code>public class Sorted{\npublic void show(){\nStream.of(\"Ricardo\", \"Luis\", \"Paco\")\n.sorted()\n.limit(2)\n.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew Sorted().show();\n}\n}\n</code></pre> <pre><code>Luis\nPaco\n</code></pre> <p>Ejemplo utilizando <code>Comparator</code>:</p> MainSalida <pre><code>public class SortedReverseOrder{\npublic void show(){\nStream.of(\"Ricardo\", \"Luis\", \"Paco\")\n.sorted(Comparator.reverseOrder())\n.limit(2)\n.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew SortedReverseOrder().show();\n}\n}\n</code></pre> <pre><code>Ricardo\nPaco\n</code></pre>"},{"location":"bloque_iii/tema_13/page-2/#transformacion","title":"Transformaci\u00f3n","text":"<p>Java nos proporciona distintos m\u00e9todos:</p> <ul> <li> <p><code>&lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper)</code>: retorna un nuevo stream obtenido a partir de aplicar la funci\u00f3n de transformaci\u00f3n indicada a cada uno de los elementos del stream original. El tipo del stream resultante corresponder\u00e1 al tipo de retorno de la funci\u00f3n de transformaci\u00f3n, que puede ser distinto al tipo del stream original, pero contendr\u00e1 tantos elementos como \u00e9ste.</p> MainSalida <pre><code>public class Map{\npublic void show(){\nStream.of(20, 27, 31)\n.map(n -&gt; \"N\u00famero \" + n)\n.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew Map().show();\n}\n}\n</code></pre> <pre><code>N\u00famero 20\nN\u00famero 27\nN\u00famero 31\n</code></pre> </li> <li> <p>M\u00e9todos que permiten obtener un stream de un tipo primitivo a partir de uno que no lo sea:</p> <ul> <li> <p><code>DoubleStream mapToDouble(ToDoubleFunction&lt;? super T&gt; mapper)</code>: retorna un <code>DoubleStream</code> correspondiente de aplicar a cada elemento del stream original la funci\u00f3n a double recibida:</p> MainSalida <pre><code>public class MapToDouble{\npublic void show(){\nStream.of(20, 27, 31)\n.mapToDouble(n -&gt; n * 0.5)\n.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew MapToDouble().show();\n}\n}\n</code></pre> <pre><code>10.0\n13.5\n15.5\n</code></pre> </li> <li> <p><code>IntStream mapToInt(ToIntFunction&lt;? super T&gt; mapper)</code>: retorna un <code>IntStream</code> correspondiente de aplicar a cada elemento del stream original la funci\u00f3n de conversi\u00f3n a int recibida. Ejemplo:</p> MainSalida <pre><code>public class MapToInt{\npublic void show(){\nStream.of(\"Ricardo\", \"Luis Miguel\", \"Paco\")\n.mapToInt(n -&gt; n.length)\n.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew MapToInt().show();\n}\n}\n</code></pre> <pre><code>7\n11\n4\n</code></pre> </li> <li> <p><code>LongStream mapToLong(ToLongFunction&lt;? super T&gt; mapper)</code>: retorna un <code>LongStream</code> correspondiente de aplicar a cada elemento del stream original la funci\u00f3n de conversi\u00f3n a long recibida.</p> MainSalida <pre><code>public class MapToLong{\npublic void show(){\nStream.of(55000, 60000, 72500)\n.mapToLong(n -&gt; (long)n * n)\n.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew MapToLong().show();\n}\n}\n</code></pre> <pre><code>3025000000\n3600000000\n5256250000\n</code></pre> </li> </ul> </li> <li> <p><code>&lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper)</code>: cuando una funci\u00f3n de transformaci\u00f3n retorna un stream y se aplica esta funci\u00f3n con el m\u00e9todo map, el stream resultante es un <code>Stream&lt;Stream&lt;Tipo&gt;&gt;</code>. En estos casos, es m\u00e1s \u00f3ptimo obtener un \u00fanico <code>Stream&lt;Tipo&gt;</code> que contuviera concatenados todos los elementos de todos los substreams. A este proceso se le conoce como aplanado (flat) de substreams.</p> MainSalida <pre><code>public class FlatMap{\npublic void show(){\nStream.of(1, 2, 3)\n.flatMap(n -&gt; IntStream.rangeClosed(1, n).boxed())\n.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew FlatMap().show();\n}\n}\n</code></pre> <pre><code>1\n1\n2\n1\n2\n3\n</code></pre> <p>En el ejemplo, muestra los valores <code>1</code> (proveniente del primer substream), <code>1</code>, <code>2</code> (provenientes del segundo substream) y <code>1</code>, <code>2</code> y <code>3</code>, provenientes del tercer substream, en este orden.</p> <p>Si nos interesa que el tipo del stream resultante fuera primitivo, podemos usar los m\u00e9todos <code>flatMapToDouble</code>, <code>flatMapToInt</code> o <code>flatMapToLong</code>.</p> MainSalida <pre><code>public class FlatMapToInt{\npublic void show(){\nStream.of(1, 2, 3)\n.flatMapToInt(n -&gt; IntStream.rangeClosed(1, n))\n.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew FlatMapToInt().show();\n}\n}\n</code></pre> <pre><code>1\n1\n2\n1\n2\n3\n</code></pre> </li> </ul>"},{"location":"bloque_iii/tema_13/page-3/","title":"3 Operaciones terminales","text":""},{"location":"bloque_iii/tema_13/page-3/#reduccion-pura","title":"Reducci\u00f3n pura","text":""},{"location":"bloque_iii/tema_13/page-3/#metodos-estandar-de-reduccion","title":"M\u00e9todos est\u00e1ndar de reducci\u00f3n","text":"<ul> <li> <p><code>long count()</code>: retorna el n\u00famero de elementos de un stream. Ejemplo:</p> <pre><code>public class Count{\npublic void show(){\nlong howManyAreEven;\nhowManyAreEven = Stream.of(30, 23, 24, 57, 8, 15)\n.filter(n -&gt; n % 2 == 0)\n.count();\nSystem.out.println(howManyAreEven); // 3\n}\npublic static void main(String[] args){\nnew Count().show();\n}\n}\n</code></pre> </li> <li> <p>Las clases <code>IntStream</code>, <code>LongStream</code> y <code>DoubleStream</code>, correspondientes a streams de elementos de tipos primitivos num\u00e9ricos, disponen del m\u00e9todo <code>sum()</code> para calcular la suma de los elementos del stream:</p> <pre><code>public class Sum{\npublic void show(){\nint sumEvenNumbers;\nsumEvenNumbers = IntStream.of(30, 23, 24, 57, 8, 15)\n.filter(n -&gt; n % 2 == 0)\n.sum();\nSystem.out.println(sumEvenNumbers); // 62\n}\npublic static void main(String[] args){\nnew Sum().show();\n}\n}\n</code></pre> <p>Si disponemos de un stream gen\u00e9rico de elementos y no de un stream y no de un stream de alguna de las clases mencionadas anteriormente, podemos usar alguno de los m\u00e9todos <code>mapToInt()</code>, <code>mapToLong()</code>, <code>mapToDouble()</code>, <code>flatMapToInt()</code>, etc., para obtener un stream de un tipo espec\u00edfico. Ejemplo:</p> <pre><code>public class SumMapToInt{\npublic void show(){\nint sumEvenNumbers = Stream.of(30, 23, 24, 47, 8, 15)\n.filter(n -&gt; n % 2 == 0)\n.mapToInt(n -&gt; n)\n.sum();\nSystem.out.println(sumEvenNumbers); // 62\n}\npublic static void main(String[] args){\nnew SumMapToInt().show();\n}\n}\n</code></pre> </li> <li> <p>Estas clases de streams de elementos de tipo primitivo num\u00e9rico tambi\u00e9n disponen de m\u00e9todos para obtener el valor m\u00e1xima, <code>max()</code>, el valor m\u00ednimo, <code>min()</code> y la media aritm\u00e9tica, <code>average()</code>, de los elementos num\u00e9ricos del stream. Dado que el stream sobre el que se apliquen puede estar vac\u00edo, estos m\u00e9todos retornan un Optional.</p> <pre><code>public class MaxMinAverage{\npublic void show(){\nOptionalInt minEvenNumbers, maxEvenNumbers;\nOptionalDouble averageEvenNumbers;\nminEvenNumbers = IntStream.of(30, 23, 24, 57, 8, 15)\n.filter(n -&gt; n % 2 == 0)\n.min();\nminEvenNumbers.ifPresent(System.out::println); // 8\nmaxEvenNumbers = IntStream.of(30, 23, 24, 57, 8, 15)\n.filter(n -&gt; n % 2 == 0)\n.max();\nmaxEvenNumbers.ifPresent(System.out::println); // 30\naverageEvenNumbers = IntStream.of(30, 23, 24, 57, 8, 15)\n.filter(n -&gt; n % 2 == 0)\n.average();\naverageEvenNumbers.ifPresent(n -&gt; System.out.printf(\"%.2f\", n)); //20,67\n}\npublic static void main(String[] args){\nnew MaxMinAverage().show();\n}\n}\n</code></pre> <p>Si se trata de un stream gen\u00e9rico, tenemos disponibles m\u00e9todos para calcular el m\u00e1ximo y el m\u00ednimo que reciben un Comparator para comparar los elementos del stream y as\u00ed obtener en cada caso el valor m\u00ednimo o el m\u00e1ximo:</p> <ul> <li><code>Optional&lt;T&gt; max(Comparator&lt;? super T&gt; comparator)</code></li> <li><code>Optional&lt;T&gt; min(Comparator&lt;? super T&gt; comparator)</code></li> </ul> <pre><code>public class MaxMinComparator{\npublic void show(){\nOptional&lt;Vehicle&gt; minVehicle;\nOptional&lt;Vehicle&gt; maxVehicle;\nList&lt;Vehicle&gt; list = new ArrayList&lt;&gt;();\nlist.add(new Vehicle(\"1705UBG\", 4, \"blanco\"));\nlist.add(new Vehicle(\"1235GTR\", 2, \"rojo\"));\nSystem.out.println(\"Veh\u00edculo con menor n\u00famero de ruedas: \");\nminVehicle = list.stream()\n.min(Comparator.comparingInt(Vehicle::getWheelCount));\nminVehicle.ifPresent(System.out::println);\nSystem.out.println(\"Veh\u00edculo con mayor matr\u00edcula alfab\u00e9ticamente\");\nmaxVehicle = list.stream()\n.max(Comparator.comparing(Vehicle::getRegistration));\nmaxVehicle.ifPresent(System.out::println);\n}\npublic static void main(String[] args){\nnew MaxMinComparator().show();\n}\n}\n</code></pre> </li> </ul>"},{"location":"bloque_iii/tema_13/page-3/#metodos-reduce","title":"M\u00e9todos reduce","text":"<p>\u00bfY si queremos realizar una operaci\u00f3n de reducci\u00f3n distinta a las anteriores? Para casos m\u00e1s gen\u00e9ricos usaremos el m\u00e9todo <code>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator)</code> que recibe una funci\u00f3n acumuladora. La funci\u00f3n acumuladora debe ser una funci\u00f3n asociativa, es decir, da igual en qu\u00e9 orden se opere con los elementos porque siempre se va a obtener el mismo resultado. Se trata de una regla que se cumple en la suma y en la multiplicaci\u00f3n. Por ejemplo, <code>1+2+3</code> da el mismo resultado que <code>2+3+1</code>.</p> <p>En este caso, el proceso de reducci\u00f3n comienza cuando se obtiene el segundo elemento, ya que necesitamos al menos dos elementos para hacer la primera reducci\u00f3n. Por este motivo, el m\u00e9todo retorna un <code>Optional</code>, dado que si el stream no tiene elementos suficientes no se puede realizar la reducci\u00f3n ni producir ning\u00fan valor.</p> <pre><code>public class Reduce{\npublic void show(){\nOptionalInt integerSum = IntStream.of(30, 23, 24, 57, 8, 15)\n.reduce((subtotal, element) -&gt; subtotal + element);\nintegerSum.ifPresent(System.out::println); // 157\nintegerSum = IntStream.of(30, 23, 24, 57, 8, 15)\n.reduce(Integer::sum);\nintegerSum.ifPresent(System.out::println); // 157\nintegerSum = IntStream.empty()\n.reduce(Integer::sum);\nSystem.out.println(integerSum); // OptionalInt.empty\nintegerSum.ifPresent(System.out::println); // No hace nada\n}\npublic static void main(String[] args){\nnew Reduce().show();\n}\n}\n</code></pre> <p>Este m\u00e9todo est\u00e1 sobrecargado para pasarle como primer par\u00e1metro un valor conocido como identidad (identity), que es usado como valor inicial de la operaci\u00f3n de reducci\u00f3n y el resultado por defecto si el stream est\u00e1 vac\u00edo: <code>T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</code>.</p> <p>Debemos elegir cuidadosamente el valor de identity atendiendo a la operaci\u00f3n que se lleve a cada en la funci\u00f3n binaryOperator. El valor de identity debe ser una identidad para la funci\u00f3n acumuladora, es decir, si se aplica la funci\u00f3n acumuladora a cualquier elemento con la identidad, debe devolver el mismo elemento. Por ejemplo, si utilizamos como operaci\u00f3n una suma, la identidad debe ser 0 ya que cualquier n\u00famero al que le sumemos 0, nos devuelve el mismo n\u00famero. Por el mismo razonamiento, si la operaci\u00f3n es una multiplicaci\u00f3n, la identidad sobre ser 1.</p> <pre><code>public class ReduceIdentity{\npublic void show(){\nInteger sum, mult;\nsum = IntStream.of(30, 23, 24, 57, 8, 15)\n.reduce(0, Integer::sum);\nSystem.out.println(sum); // 157\nsum = IntStream.empty()\n.reduce(0, Integer::sum);\nSystem.out.println(sum); // 0\nmult = IntStream.of(2, 3, 4)\n.reduce(1, (subtotal, element) -&gt; subtotal * element);\nSystem.out.println(mult); // 24\nmult = IntStream.of(2, 3, 4)\n.reduce(1, Math::multiplyExact);\nSystem.out.println(mult); // 24\nmult = IntStream.empty()\n.reduce(1, Math::multiplyExact);\nSystem.out.println(mult); // 1\n}\npublic static void main(String[] args){\nnew ReduceIdentity().show();\n}\n}\n</code></pre> <p>Tenemos disponible una tercera versi\u00f3n del m\u00e9todo, <code>&lt;U&gt; U reduce(U identity, BiFunction&lt;U, ? super T, u&gt; accumulator, BinaryOperator&lt;U&gt; combiner)</code>, especialmente \u00fatil para streams paralelos, que se usa cuando queremos que el m\u00e9todo retorne un valor de tipo diferente al del stream original. La funci\u00f3n combiner es necesaria para indicar c\u00f3mo se deben combinar acumuladores parciales realizadas en distintos hilos en streams paralelos.</p> <pre><code>public class ReduceCombiner{\npublic void show(){\nint count = Stream.of(\"Juan\", \"Pepe\", \"Luis\", \"Ricardo\", \"Laura\")\n.reduce(0, (subtotal, element) -&gt; {\nif(element.length() % 2 == 0){\nreturn subtotal + 1;\n} else {\nreturn subtotal;\n}\n}, Integer::sum);\nSystem.out.printf(\"Cu\u00e1ntos nombres con n\u00famero de caracteres pares: %d\", count); // 3\n}\npublic static void main(String[] args){\nnew ReduceCombiner().show();\n}\n}\n</code></pre> <p>Debemos tener encuentra que la funci\u00f3n <code>reduce()</code> en cualquiera de sus versiones respeta el orden del stream a la hora de combinar los c\u00e1lculos intermedios.</p>"},{"location":"bloque_iii/tema_13/page-3/#operaciones-terminales-de-consulta","title":"Operaciones terminales de consulta","text":"<p>La clase <code>Stream</code> tambi\u00e9n proporciona una serie de m\u00e9todos de consulta sobre los elementos de un stream, denominadas operaciones de cortocircuito (short-circuit terminal operators). Se llaman as\u00ed porque se deja de procesar el resto de elementos si con los elementos que ya han sido procesados se es capaz de determinar el resultado.</p> <p>Tenemos un conjunto de m\u00e9todos que permiten consultar, respectivamente, si todos, ninguno o algunos de los elementos del stream cumplen con un determinado predicado, retornado un valor booleano:</p> <ul> <li><code>boolean allMatch(Predicate&lt;? super T&gt; predicate)</code></li> <li><code>boolean noneMatch(Predicate&lt;? super T&gt; predicate)</code></li> <li><code>boolean anyMatch(Predicate&lt;? super T&gt; predicate)</code></li> </ul> <pre><code>public class Match{\npublic void show(){\nboolean match;\nmatch = IntStream.of(1, 2, 4).allMatch(n -&gt; n % 2 == 0);\nSystem.out.println(match); // false\nmatch = IntStream.of(2, 4, 6).allMatch(n -&gt; n % 2 == 0);\nSystem.out.println(match); // true\nmatch = IntStream.of(1, 2, 4).noneMatch(n -&gt; n % 2 == 0);\nSystem.out.println(match); // false\nmatch = IntStream.of(1, 3, 5).noneMatch(n -&gt; n % 2 == 0);\nSystem.out.println(match); // true\nmatch = IntStream.of(1, 3, 5).anyMatch(n -&gt; n % 2 == 0);\nSystem.out.println(match); // false\nmatch = IntStream.of(2, 3, 5).anyMatch(n -&gt; n % 2 == 0);\nSystem.out.println(match); // true\n}\npublic static void main(String[] args){\nnew Match().show();\n}\n}\n</code></pre> <p>Por otro lado tenemos los m\u00e9todos <code>findFirst()</code> y <code>findAny()</code>, que retornan un <code>Optional&lt;T&gt;</code> con, respectivamente, el primer elemento del stream, o alg\u00fan elemento del stream (no est\u00e1 indicado cu\u00e1l), si es que existe. Un aspecto curioso es que estos m\u00e9todos no reciben ning\u00fan predicado con el que indicar la condici\u00f3n de b\u00fasqueda por lo que normalmente se usan despu\u00e9s de haber ejecutarlo el m\u00e9todo <code>filter</code> sobre el stream.</p> <pre><code>public class Find{\npublic void show(){\nOptional&lt;Integer&gt; find;\nfind = Stream.of(1, 2, 4)\n.filter(n -&gt; n % 2 == 0)\n.findFirst();\nfind.ifPresent(System.out::println); // 2\nfind = Stream.of(6, 2, 4)\n.filter(n -&gt; n % 2 == 0)\n.findAny();\nfind.ifPresent(System.out::println); // 6\n}\npublic static void main(String[] args){\nnew Find().show();\n}\n}\n</code></pre> <p>Un aspecto curioso es que no se proporciona ning\u00fan m\u00e9todo para obtener el \u00faltimo elemento de un stream. sin embargo, podemos obtenerlo usando el m\u00e9todo <code>skip</code> (siempre y cuando se trate de un stream finito):</p> <pre><code>public class LastElement{\npublic void show(){\nList&lt;Integer&gt; list = List.of(30, 23, 24, 57, 8, 15);\nlong count = list.stream().count();\nOptional&lt;Integer&gt; last = list.stream()\n.skip(count - 1)\n.findFirst();\nlast.ifPresent(System.out::println); // 15\n}\npublic static void main(String[] args){\nnew LastElement().show();\n}\n}\n</code></pre> <p>Otra manera de hacerlo es mediante la reducci\u00f3n en la que siempre nos quedemos con el segundo elemento:</p> <pre><code>public class LastReduce{\npublic void show(){\nOptionalInt last;\nlast = IntStream.of(30, 23, 24, 57, 8, 15)\n.reduce((first, second) -&gt; second);\nlast.ifPresent(System.out::println); // 15\n}\npublic static void main(String[] args){\nnew LastElement().show();\n}\n}\n</code></pre> <p>Debemos tener en cuenta que si ejecutamos estos m\u00e9todos sobre streams paralelos el resultado puede ser distinto entre distintas llamadas.</p>"},{"location":"bloque_iii/tema_13/page-4/","title":"4 Reducci\u00f3n mutable","text":""},{"location":"bloque_iii/tema_13/page-4/#introduccion","title":"Introducci\u00f3n","text":"<p>La operaci\u00f3n de recolecci\u00f3n es una operaci\u00f3n terminal que permite crear una estructura de datos con los resultados del procesamiento de datos asociado a un stream. La operaci\u00f3n de recolecci\u00f3n tambi\u00e9n recibe el nombre de operaci\u00f3n de reducci\u00f3n mutable. Para llevarla a cabo usaremos el m\u00e9todo <code>&lt;R, A&gt; R collect(Collector&lt;? super T, A, R&gt; collector)</code></p> <p>El m\u00e9todo recibe un objeto de una clase que implemente la interfaz <code>Collector</code>. Aunque podemos crear nuestras propias clases que implementen dicha interfaz, en la mayor\u00eda de las ocasiones podremos utilizar alguno de los recolectores est\u00e1ndar proporcionados por Java a trav\u00e9s de la clase auxiliar <code>Collectors</code>, que contiene m\u00e9todos est\u00e1ticos que retornan objetos <code>Collector</code> correspondientes a los recolectores m\u00e1s habituales. Todos estos m\u00e9todos est\u00e1n dise\u00f1ados para funcionar de manera \u00f3ptima incluso con streams paralelos.</p>"},{"location":"bloque_iii/tema_13/page-4/#recolectores-a-estructuras-de-datos-clasicas","title":"Recolectores a estructuras de datos cl\u00e1sicas","text":"<p>La clase <code>Collectors</code> tiene un conjunto de m\u00e9todos est\u00e1ticos que nos permiten recolectar los elementos de un stream y almacenarlos en una estructura de datos:</p> <ul> <li><code>public static &lt;T&gt; Collector&lt;T, ?, List&lt;T&gt;&gt; toList()</code>: retorna una lista con los elementos del stream. En Java 16, se ha incorporada tambi\u00e9n un m\u00e9todo <code>toList()</code> a la interfaz <code>Stream&lt;T&gt;</code>.</li> <li><code>public static &lt;T&gt; Collector&lt;T, ?, List&lt;T&gt;&gt; toUnmodifiableList()</code>: retorna una lista inmutable de los elementos del stream en el orden en que son producidos (encounter order).</li> <li> <p><code>public static &lt;T, C extends Collection&lt;T&gt;&gt; Collector&lt;T, ?, C&gt; toCollection(Supplier&lt;C&gt; collectionFactory)</code>: el problema de <code>toList()</code> y <code>toSet()</code> es que no podemos especificar la implementaci\u00f3n concreta que queremos que se use. Por ejemplo, no podemos indicar que se use un <code>LinkedList</code>, en el caso de <code>toList()</code>, o un <code>TreeSet</code>, en el caso de <code>toSet()</code>.</p> <p>Para solucionar este problema, el m\u00e9todo recibe un supplier que retorna la estructura de datos concreta en la que queremos que se recolecte el stream.</p> <pre><code>public class CollectorsClassicDataStructures{\npublic void show(){\nList&lt;Integer&gt; list = List.of(3, 6, 1, 2, 4, 5);\nList&lt;Integer&gt; listEvenNumbers = list.stream()\n.filter(n -&gt; n % 2 == 0)\n.collect(Collectors.toList());\nlistEvenNumbers.forEach(System.out::println);\nSortedSet&lt;Integer&gt; tree = list.stream()\n.filter(n -&gt; n % 2 == 0)\n.collect(Collectors.toCollection(TreeSet::new));\ntree.forEach(System.out::println);\n}\npublic static void main(String[] args){\nnew CollectorsClassicDataStructures().show();\n}\n}\n</code></pre> </li> <li> <p><code>public static &lt;T, K, V&gt; Collector&lt;T, ?, Map&lt;K, U&gt;&gt; toMap(Function&lt;? super T, ? extends K&gt; keyMapper, Function&lt;? super T, ? extends U&gt; valueMapper)</code>: retorna un mapa obtenido de la siguiente manera:</p> <ul> <li>Con el <code>Function</code> keyMapper obtiene la clave, de manera que su valor de retorno ser\u00e1 usado como clave del elemento en el mapa resultante. Como el mapa resultante no puede tener claves repetidas, si retoma el mismo valor para dos elementos distintos del stream, se lanzar\u00e1 la excepci\u00f3n <code>IllegalStateException</code></li> <li>Con el <code>Function</code> valueMapper se obtiene el valor del elemento en el mapa resultante.</li> </ul> <pre><code>public class CollectorsToMap{\npublic void show(){\nMap&lt;String, Vehicle&gt; map;\nVehicle[] vehicles = new Vehicle[6];\nvehicles[0] = new Vehicle(\"9685KMX\", 4, \"azul\");\nvehicles[1] = new Vehicle(\"1235GTR\", 2, \"rojo\");\nvehicles[2] = new Vehicle(\"7314QWE\", 4, \"verde\");\nvehicles[3] = new Vehicle(\"5930POI\", 2, \"negro\");\nvehicles[4] = new Vehicle(\"1705UBG\", 4, \"blanco\");\nvehicles[5] = new Vehicle(\"3495JZA\", 2, \"naranja\");\nmap = Arrays.stream(vehicles)\n.collect(Collectors.toMap(Vehicle::getRegistration, vehicle-&gt; vehicle));\nmap.forEach((k, v) -&gt; System.out.printf(\"Clave:%s Valor:%s\\n\", k, v));\n}\npublic static void main(String[] args){\nnew CollectorsToMap().show();\n}\n}\n</code></pre> <p>Si nos fijamos en el <code>Function</code> valueMapper (vehicle -&gt; vehicle), tambi\u00e9n podemos usar el m\u00e9todo est\u00e1tico <code>static &lt;T&gt; Function&lt;T,T&gt; identity()</code>, que es una funci\u00f3n que siempre devuelve su argumento de entrada:</p> <pre><code>public class FunctionIdentity{\npublic void show(){\nMap&lt;String, Vehicle&gt; map;\nVehicle[] vehicles = new Vehicle[6];\nvehicles[0] = new Vehicle(\"9685KMX\", 4, \"azul\");\nvehicles[1] = new Vehicle(\"1235GTR\", 2, \"rojo\");\nvehicles[2] = new Vehicle(\"7314QWE\", 4, \"verde\");\nvehicles[3] = new Vehicle(\"5930POI\", 2, \"negro\");\nvehicles[4] = new Vehicle(\"1705UBG\", 4, \"blanco\");\nvehicles[5] = new Vehicle(\"3495JZA\", 2, \"naranja\");\nmap = Arrays.stream(vehicles)\n.collect(Collectors.toMap(Vehicle::getRegistration, Function.identity()));\nmap.forEach((k, v) -&gt; System.out.printf(\"Clave:%s Valor:%s\\n\", k, v));\n}\npublic static void main(String[] args){\nnew FunctionIdentity().show();\n}\n}\n</code></pre> <p>Tenemos disponible una segunda versi\u00f3n del m\u00e9todo para que en lugar de lanzar una excepci\u00f3n, proporcionemos una funci\u00f3n de combinaci\u00f3n de elementos con la misma clave:</p> </li> <li> <p><code>public static &lt;T, K, U&gt; Collector&lt;T, ?, Map&lt;K, U&gt;&gt; yoMap(Function&lt;? super T, ? extends K&gt; keyMapper, Function&lt;? super T, ? extends U&gt; valueMapper, BinaryOperator&lt;U&gt; mergeFunction)</code>: el tercer par\u00e1metro indica c\u00f3mo de deben combinar dos elementos con la misma clave.</p> MainSALIDA <pre><code>public class CombinationRepeatedKeys{\npublic void show(){\nMap&lt;String, String&gt; map;\nVehicle[] vehicles = new Vehicle[6];\nvehicles[0] = new Vehicle(\"9685KMX\", 4, \"azul\");\nvehicles[1] = new Vehicle(\"1235GTR\", 2, \"rojo\");\nvehicles[2] = new Vehicle(\"7314QWE\", 4, \"verde\");\nvehicles[3] = new Vehicle(\"5930POI\", 2, \"rojo\");\nvehicles[4] = new Vehicle(\"1705UBG\", 4, \"blanco\");\nvehicles[5] = new Vehicle(\"3495JZA\", 2, \"azul\");\nmap = Arrays.stream(vehicles)\n.collect(Collectors.toMap(\nVehicle::getColour, Vehicle::getRegistration,\n(r1, r2) -&gt; String.format(\"Clave:%-7s Valor: %s\\n\", r1, r2)\n)\n);\nmap.forEach((k, v) -&gt; System.out.printf(\"Clave:%-7s Valor:%s\\n\", k, v));\n}\npublic static void main(String[] args){\nnew CombinationRepeatedKeys().show();\n}\n}\n</code></pre> <pre><code>Clave:rojo Valor:1235GTR-5930POI\nClave:blanco Valor:1705UBG\nClave:verde Valor:7314QWE\nClave:azul Valor:9685KMX-3495JZA\n</code></pre> <p>Estas dos versiones del m\u00e9todo <code>toMap</code> retornan por defecto un <code>HashMap</code>, por lo que existe una tercera versi\u00f3n para obtener una implementaci\u00f3n distinta de la interfaz <code>Map</code>, como por ejemplo <code>LinkedHashMap</code> o <code>TreeMap</code>:</p> </li> <li> <p><code>public static &lt;T, K, U, M extends Map&lt;K, U&gt;&gt; Collector &lt;T, ?, M&gt; toMap(Function&lt;? super T, ? extends K&gt; keyMapper, Function&lt;? super T, ? extends U&gt; valueMapper, BinaryOperator&lt;U&gt; mergeFunction, Supplier&lt;M&gt; mapFactory)</code>: recibe un <code>Supplier</code> como cuarto par\u00e1metro para indicar el tipo de mapa que se quiere obtener:</p> <pre><code>public class CombinationRepeatedKeysSupplier{\npublic void show(){\nMap&lt;String, Vehicle&gt; map;\nVehicle[] vehicles = new Vehicle[6];\nvehicles[0] = new Vehicle(\"9685KMX\", 4, \"azul\");\nvehicles[1] = new Vehicle(\"1235GTR\", 2, \"rojo\");\nvehicles[2] = new Vehicle(\"7314QWE\", 4, \"verde\");\nvehicles[3] = new Vehicle(\"5930POI\", 2, \"rojo\");\nvehicles[4] = new Vehicle(\"1705UBG\", 4, \"blanco\");\nvehicles[5] = new Vehicle(\"3495JZA\", 2, \"azul\");\nmap = Arrays.stream(vehicles)\n.collect(Collectors.toMap(Vehicle::getColour, Vehicle::getRegistration,\n(r1, r2) -&gt; String.format(\"%s-%s\", r1, r2), TreeMap::new));\nmap.forEach((k, v) -&gt; System.out.printf(\"Clave:%-7s Valor:%s\\n\", k,v));\n}\npublic static void main(String[] args){\nnew CombinationRepeatedKeys().show();\n}\n}\n</code></pre> </li> <li> <p>Recolecci\u00f3n de un stream hacia un array: no se realizar\u00e1 a trav\u00e9s de ning\u00fan recolector, ni del m\u00e9todo <code>collect</code>, sino directamente a trav\u00e9s del m\u00e9todo <code>toArray()</code>de la clase <code>Stream</code>, que retorna un <code>Object[]</code>, es decir un array de elementos de la clase <code>Objecto</code>, debido a que los arrays no usan gen\u00e9ricos.</p> <pre><code>public class ToArray{\npublic void show(){\nList&lt;Vehicle&gt; list = new ArrayList&lt;&gt;();\nlist.add(new Vehicle(\"9685KMX\", 4, \"azul\"));\nlist.add(new Vehicle(\"1235GTR\", 2, \"rojo\"));\nlist.add(new Vehicle(\"7314QWE\", 4, \"verde\"));\nlist.add(new Vehicle(\"5930POI\", 2, \"negro\"));\nlist.add(new Vehicle(\"1705UBG\", 4, \"blanco\"));\nlist.add(new Vehicle(\"3495JZA\", 2, \"naranja\"));\nObject vehiclesArray[] = list.stream().toArray();\nfor(Object v: vehiclesArray){\nSystem.out.println(v);\n}\n}\npublic static void main(String[] args){\nnew ToArray().show();\n}\n}\n</code></pre> </li> </ul>"},{"location":"bloque_iii/tema_13/page-4/#recolectores-de-operaciones-de-reduccion-basicas","title":"Recolectores de operaciones de reducci\u00f3n b\u00e1sicas","text":"<p>La clase <code>Collectors</code> dispone adem\u00e1s de una serie de m\u00e9todos est\u00e1ticos que retornan recolectores parecidos a las operaciones de reducci\u00f3n:</p> <ul> <li> <p><code>counting()</code>: Para obtener el n\u00fameros de elementos.</p> <pre><code>public class CollectorsCounting{\npublic void show(){\nlong howManyAreEven = Stream.of(30, 23, 24, 57, 8, 15)\n.filter(n -&gt; n % 2 == 0)\n.collect(Collectors.counting());\n}\npublic static void main(String[] args){\nnew CollectorsCounting().show();\n}\n}\n</code></pre> </li> <li> <p>Para obtener la sumar de los elementos que son convertidos al tipo indicado mediante la funci\u00f3n suministrada:</p> <ul> <li><code>public static &lt;T&gt; Collector&lt;T, ?, Integer&gt; summingInt(ToIntFunction&lt;? super T&gt; mapper)</code></li> <li><code>public static &lt;T&gt; Collector&lt;T, ?, Long&gt; summingLong(ToLongFunction&lt;? super T&gt; mapper)</code></li> <li><code>public static &lt;T&gt; Collector&lt;T, ?, Double&gt; summingDouble(ToDoubleFunction&lt;? super T&gt; mapper)</code></li> </ul> <pre><code>public class CollectorsSumming{\npublic void show(){\nList&lt;Vehicles&gt; list = new ArrayList&lt;&gt;();\nlist.add(new Vehicle(\"9685KMX\", 4, \"azul\"));\nlist.add(new Vehicle(\"1235GTR\", 2, \"rojo\"));\nlist.add(new Vehicle(\"7314QWE\", 4, \"verde\"));\nlist.add(new Vehicle(\"5930POI\", 2, \"negro\"));\nlist.add(new Vehicle(\"1705UBG\", 4, \"blanco\"));\nlist.add(new Vehicle(\"3495JZA\", 2, \"naranja\"));\nint sumWheels = list.stream()\n.collect(Collectors.summingInt(Vehicle::getWheelCount));\nSystem.out.println(sumWheels); // 18\n}\npublic static void main(String[] args){\nnew CollectorsSumming().show();\n}\n}\n</code></pre> </li> <li> <p>Para obtener el valor m\u00ednimo y el m\u00e1ximo atendiendo a un comparador pasado como argumento.</p> <ul> <li><code>public static &lt;T&gt; Collector&lt;T, ?, Optional&lt;T&gt;&gt; minBy(Comparator&lt;? super T&gt; comparator)</code></li> <li><code>public static &lt;T&gt; Collector&lt;T, ?, Optional&lt;T&gt;&gt; maxBy(Comparator&lt;? super T&gt; comparator)</code></li> </ul> <pre><code>public class CollectorsMinMax{\npublic void show(){\nOptional&lt;Integer&gt; min, max;\nList&lt;Integer&gt; list = List.of(30, 23, 24, 57, 8, 15);\nmin = list.stream()\n.collect(Collectors.minBy(Comparator.naturalOrder()));\nmin.ifPresent(System.out::println); // 8\nmax = list.stream()\n.collect(Collectors.maxBy(Comparator.naturalOrder()));\nmax.ifPresent(System.out::println); // 57\n}\npublic static void main(String[] args){\nnew CollectorsMinMax().show();\n}\n}\n</code></pre> </li> <li> <p>Para obtener la media aritm\u00e9tica de los valores (que son convertidos al tipo indicado mediante la funci\u00f3n suministrada). Si el stream no tiene elementos retorna cero:</p> <ul> <li><code>public static &lt;T&gt; Collector&lt;T, ?, Double&gt; averagingInt(ToIntFunction&lt;? super T&gt; mapper)</code></li> <li><code>public static &lt;T&gt; Collector&lt;T, ?, Double&gt; averagingLong(ToLongFunction&lt;? super T&gt; mapper)</code></li> <li><code>public static &lt;T&gt; Collector&lt;T, ?, Double&gt; averagingDouble(ToDoubleFunction&lt;? super T&gt; mapper)</code></li> </ul> <pre><code>public class CollectorsAveraging{\npublic void show(){\ndouble average;\nList&lt;Integer&gt; list = List.of(30, 23, 24, 57, 8, 15);\naverage = list.stream()\n.collect(Collectors.averagingInt(Integer::intValue));\nSystem.out.printf(\"%.2f\", average); //26,17\n}\npublic static void main(String[] args){\nnew CollectorsAveraging().show();\n}\n}\n</code></pre> </li> <li> <p>Para obtener todo lo anterior (n\u00famero de elementos, suma, m\u00ednimo, m\u00e1ximo y la media) de una sola vez:</p> <ul> <li><code>public static&lt;T&gt; Collector(T, ?, IntSummaryStatistics&gt; summarizingInt(ToIntFunction&lt;? super T&gt; mapper)</code></li> <li><code>public static&lt;T&gt; Collector(T, ?, LongSummaryStatistics&gt; summarizingLong(ToLongFunction&lt;? super T&gt; mapper)</code></li> <li><code>public static&lt;T&gt; Collector(T, ?, DoubleSummaryStatistics&gt; summarizingDouble(ToDoubleFunction&lt;? super T&gt; mapper)</code></li> </ul> MainSALIDA <pre><code>    public class Summarizing{\npublic void show(){\nIntSummaryStatistics oddStatistics = Stream.of(30, 23, 24, 57, 8, 15)\n.filter(n -&gt; n % 2 != 0)\n.collect(Collectors.summarizingInt(Integer::intValue));\nSystem.out.println(oddStatistics);\n}\npublic static void main(String[] args){\nnew Summarizing().show();\n}\n}\n</code></pre> <pre><code>IntSummaryStatistics{count=3, sum=95, min=15, average=31,666667,max=57}\n</code></pre> </li> <li> <p>Para recolectar con una operaci\u00f3n de reducci\u00f3n distinta de las anteriores: <code>public static &lt;T&gt; Collector&lt;T,?,Optional&lt;T&gt;&gt; reducing(BinaryOperator&lt;T&gt; op)</code></p> <pre><code>public class CollectorsReducing {\npublic void show() {\nOptional&lt;Integer&gt; integerSum = Stream.of(30, 23, 24, 57, 8, 15)\n.collect(Collectors.reducing((subtotal,element) -&gt; subtotal + element));//Con lambda\nintegerSum.ifPresent(System.out::println);//157\nintegerSum = Stream.of(30, 23, 24, 57, 8, 15)\n.collect(Collectors.reducing(Integer::sum));//Con referencia a m\u00e9todo\nintegerSum = Stream.&lt;Integer&gt;empty().collect(Collectors.reducing(Integer::sum));//Optional.empty\nintegerSum.ifPresent(System.out::println);//No hace nada\n}\npublic static void main(String[] args) {\nnew CollectorsReducing().show();\n}\n}\n</code></pre> </li> </ul> <p>Tambi\u00e9n tenemos otra versi\u00f3n del m\u00e9todo que recibe como primer par\u00e1metro el valor correspondiente a la identidad: <code>public static &lt;T&gt; Collector&lt;T,?,T&gt; reducing(T identity, BinaryOperator&lt;T&gt; op)</code></p> <pre><code>public class CollectorsReducingIdentity {\npublic void show() {\nInteger sum,mult;\nsum = Stream.of(30, 23, 24, 57, 8, 15).collect(Collectors.reducing(0, Integer::sum));\nSystem.out.println(sum);//157\nsum = Stream.&lt;Integer&gt;empty().collect(Collectors.reducing(0, Integer::sum));\nSystem.out.println(sum);//0\nmult = Stream.of(2,3,4).collect(Collectors.reducing(1, Math::multiplyExact));\nSystem.out.println(mult);//24\nmult = Stream.&lt;Integer&gt;empty().collect(Collectors.reducing(1,Math::multiplyExact));\nSystem.out.println(mult);//1\n}\npublic static void main(String[] args) {\nnew CollectorsReducingIdentity().show();\n}\n}\n</code></pre> <p>Existe adem\u00e1s una tercera versi\u00f3n del m\u00e9todo que recibe como segundo par\u00e1metro una funci\u00f3n de transformaci\u00f3n que ser\u00e1 ejecutada sobre cada elemento antes de realizar la recolecci\u00f3n: <code>public static &lt;T, U&gt; Collector&lt;T,?,U&gt; reducing(U identity, Function&lt;? super T,? extends U&gt; mapper, BinaryOperator&lt;U&gt; op)</code>:</p> <pre><code>public class CollectorsReducingCombiner {\npublic void show() {\nint count = Stream.of(\"Juan\", \"Pepe\", \"Luis\", \"Ricardo\", \"Laura\").collect(Collectors.reducing(0, element -&gt; {\nif(element.length() % 2 == 0) {\nreturn 1;\n}\nelse {\nreturn 0;\n}\n}, Integer::sum));\nSystem.out.printf(\"Cu\u00e1ntos nombres con n\u00famero de caracteres pares: %d\", count);//3\n}\npublic static void main(String[] args) {\nnew CollectorsReducingCombiner().show();\n}\n}\n</code></pre> <p>Como podemos apreciar, todos los recolectores vistos en este apartado son muy similares (casi iguales) a los m\u00e9todos est\u00e1ndar de reducci\u00f3n que vimos en un apartado anterior. Entonces, \u00bfpor qu\u00e9 existen estos recolectores? El motivo es que, como veremos m\u00e1s adelante, Java nos va a ofrecer la oportunidad de encadenar varios recolectores, de manera que usaremos los recolectores vistos en este apartado normalmente como acompa\u00f1ante de alg\u00fan otro recolector. De hecho, no se recomienda usar estos recolectores si no es en conjunci\u00f3n con otro recolector. Si se va a emplear de forma aislada, es m\u00e1s \u00f3ptimo emplear los m\u00e9todos est\u00e1ndar de recolecci\u00f3n que vimos en un apartado anterior.</p>"},{"location":"bloque_iii/tema_13/page-4/#recolectores-de-transformacion","title":"Recolectores de transformaci\u00f3n","text":"<ul> <li> <p><code>public  static  Collector&lt;CharSequence,?,String&gt;  joining()</code>:  permite obtener un  <code>String</code>  correspondiente a la concatenaci\u00f3n de los elementos del stream. Solo podremos usar este recolector sobre un stream de elementos de tipo <code>CharSequence</code> , por lo que es posible que antes hayamos tenido que aplicar una operaci\u00f3n de transformaci\u00f3n mediante el m\u00e9todo map  para obtener un stream adecuado.  <code>CharSequence</code>  es una interfaz que representa una secuencia de caracteres. Esta interfaz no impone la mutabilidad, por lo tanto, nos podemos encontrar con clases inmutables y mutables que implementen esta interfaz. Por ejemplo, <code>String</code>  es inmutable y <code>StringBuilder</code>  y <code>StringBuffer</code>  son mutables</p> <pre><code>public class CollectorsJoining {          public void show() {\nString result = Stream.of(\"Juan\", \"Pepe\", \"Luis\",\"Ricardo\", \"Laura\")\n.collect(Collectors.joining());\nSystem.out.println(result);     }\npublic static void main(String[] args) {         new CollectorsJoining().show();     } }\n</code></pre> <p>Existe una segunda versi\u00f3n para concatenar los elementos de entrada separados por  un  delimitador  que  se  pasa  por  par\u00e1metro: <code>public  static Collector&lt;CharSequence,?,String&gt; joining(CharSequence delimiter)</code></p> <pre><code>public class CollectorsJoiningDelimiter {     public void show() {\nString result = Stream.of(\"Juan\", \"Pepe\", \"Luis\",\"Ricardo\", \"Laura\")\n.collect(Collectors.joining(\" - \"));\nSystem.out.println(result);\n}\npublic static void main(String[] args) {         new CollectorsJoiningDelimiter().show();     } }\n</code></pre> <p>Existe una tercera versi\u00f3n del m\u00e9todo que permite indicar el prefijo y el sufijo que queremos poner a la cadena resultante de la concatenaci\u00f3n: <code>public  static Collector&lt;CharSequence,?,String&gt; joining(CharSequence  delimiter, CharSequence prefix,  CharSequence suffix)</code></p> <pre><code>public class CollectorsJoiningPrefixSuffix{\npublic void show(){\nString result = Stream.of(\"Juan\", \"Pepe\", \"Luis\", \"Ricardo\", \"Laura\")\n.collect(Collectors.joining(\" - \", \"Lista de nombres: \", \".\"));\nSystem.out.println(result);\n}\npublic static void main(String[] args){\nnew CollectorsJoiningPrefixSuffix().show();\n}\n}\n</code></pre> </li> <li> <p><code>public static &lt;T, U, A, R&gt; Collector&lt;T,?,R&gt; mapping(Function&lt;? super T,?  extends  U&gt;  mapper,    Collector&lt;?  super  U,A,R&gt;  downstream)</code>: realiza alguna operaci\u00f3n de transformaci\u00f3n sobre los elementos justo antes de aplicarles un recolector que se pasa por par\u00e1metro.</p> <pre><code>public class CollectorsMapping{\npublic void show(){\nVehicle vehicles[] = new Vehicle[6];\nvehicles[0] = new Vehicle(\"9685KMX\", 4, \"azul\");\nvehicles[1] = new Vehicle(\"1235GTR\", 2, \"rojo\");\nvehicles[2] = new Vehicle(\"7314QWE\", 4, \"verde\");\nvehicles[3] = new Vehicle(\"5930POI\", 2, \"negro\");\nvehicles[4] = new Vehicle(\"1705UBG\", 4, \"blanco\");\nvehicles[5] = new Vehicle(\"3495JZA\", 2, \"naranja\");\nString result = Arrays.stream(vehicles)\n.collect(Collectors.mapping(Vehicle::getRegistration, Collectors.joining(\", \")));\nSystem.out.println(result);\n}\npublic static void main(String[] args){\nnew CollectorsMapping().show();\n}\n}\n</code></pre> </li> </ul>"},{"location":"bloque_iii/tema_13/page-4/#recolectores-de-agrupacion","title":"Recolectores de agrupaci\u00f3n","text":"<p><code>public  static  &lt;T,  K&gt;  Collector&lt;T,?,Map&lt;K,List&lt;T&gt;&gt;&gt;  groupingBy(Function&lt;? super T,? extends K&gt; classifier)</code>: permite obtener un mapa  <code>Map&lt;K, List&lt;T&gt;&gt;</code> donde las claves son los valores resultantes de aplicar la funci\u00f3n de clasificaci\u00f3n a los elementos de entrada y los valores son listas que contienen los elementos de entrada que al aplicarles la funci\u00f3n de clasificaci\u00f3n se obtiene la clave correspondiente, es decir, todos aquellos elementos del stream original que al aplicarles la funci\u00f3n clasificadora retornen el mismo valor, dicho valor ser\u00e1 la clave y los elementos ser\u00e1n agrupados en la misma lista con dicha clave. Veamos un ejemplo: vamos a crear un mapa donde la clave ser\u00e1 el n\u00famero de ruedas del veh\u00edculo. El mapa tendr\u00e1 dos entradas, una para los veh\u00edculos de 2 ruedas y otra para los veh\u00edculos de 4 ruedas. Cada clave tendr\u00e1 una lista con los veh\u00edculos que correspondan con dicho n\u00famero de ruedas:</p> <pre><code>public class CollectorsGroupingBy{\npublic void show(){\nMap&lt;Integer, List&lt;Vehicle&gt;&gt; map;\nVehicle[] vehicles = new Vehicle[6];\nvehicles[0] = new Vehicle(\"9685KMX\", 4, \"azul\");\nvehicles[1] = new Vehicle(\"1235GTR\", 2, \"rojo\");\nvehicles[2] = new Vehicle(\"7314QWE\", 4, \"verde\");\nvehicles[3] = new Vehicle(\"5930POI\", 2, \"negro\");\nvehicles[4] = new Vehicle(\"1705UBG\", 4, \"blanco\");\nvehicles[5] = new Vehicle(\"3495JZA\", 2, \"naranja\");\nmap = Arrays.stream(vehicles)\n.collect(Collectors.groupingBy(Vehicle::getWheelCount));\nmap.forEach((k, v) -&gt; {\nSystem.out.printf(\"Veh\u00edculos con %d ruedas: \\n\", k);\nv.forEach(vehicle -&gt; System.out.printf(\"%s\\n\", vehicle));\n})\n}\npublic static void main(String[] args){\nnew CollectorsGroupingBy().show();\n}\n}\n</code></pre> <p>Sin embargo, ser\u00e1 muy habitual que queramos realizar alg\u00fan c\u00e1lculo sobre la lista de elementos de cada grupo. Para hacernos m\u00e1s sencilla dicha tarea, tenemos disponible otra versi\u00f3n del m\u00e9todo: <code>public  static  &lt;T, K,  A,  D&gt;  Collector&lt;T,?,Map&lt;K,D&gt;&gt; groupingBy(Function&lt;?  super  T,?  extends  K&gt;  classifier,  Collector&lt;?  super T,A,D&gt; downstream)</code>, que recibe un recolector que queremos que se le aplique a la lista de elementos de cada grupo. Para este cometido, podemos usar los recolectores de operaciones de reducci\u00f3n b\u00e1sicas que vimos en el apartado anterior. Si lo aplicamos al ejemplo anterior, podemos obtener cu\u00e1ntos veh\u00edculos hay con 2 ruedas y cu\u00e1ntos hay con 4 ruedas:</p> <pre><code>public class CollectorsGroupingByDownstream{\npublic void show(){\nMap&lt;Integer, Long&gt; map;\nVehicle[] vehicles = new Vehicle[6];\nvehicles[0] = new Vehicle(\"9685KMX\", 4, \"azul\");\nvehicles[1] = new Vehicle(\"1235GTR\", 2, \"rojo\");\nvehicles[2] = new Vehicle(\"7314QWE\", 4, \"verde\");\nvehicles[3] = new Vehicle(\"5930POI\", 2, \"negro\");\nvehicles[4] = new Vehicle(\"1705UBG\", 4, \"blanco\");\nvehicles[5] = new Vehicle(\"3495JZA\", 2, \"naranja\");\nmap = Arrays.stream(vehicles)\n.collect(Collectors.groupingBy(Vehicle::getWheelCount, Collectors.counting()));\nmap.forEach((k, v) -&gt; System.out.printf(\"N\u00famero de veh\u00edculos con %d ruedas: %d\\n\", k, v));\n}\npublic static void main(String[] args){\nnew CollectorsGroupingByDownstream().show();\n}\n}\n</code></pre> <p>Estas dos versiones del m\u00e9todo <code>groupingBy</code>  retornan por defecto un <code>HashMap</code>, por lo que existe una tercera versi\u00f3n para obtener una implementaci\u00f3n distinta de la interfaz <code>Map</code>, como por ejemplo <code>LinkedHashMap</code> o <code>TreeMap</code> : <code>public static &lt;T, K, D, A, M  extends  Map&lt;K,  D&gt;&gt;  Collector&lt;T,?,M&gt;  groupingBy(Function&lt;?  super  T,? extends K&gt; classifier,  Supplier&lt;M&gt; mapFactory,  Collector&lt;? super T,A,D&gt; downstream)</code>:</p> <pre><code>public class CollectorsGroupingBySupplier{\npublic void show(){\nMap&lt;Integer, Long&gt; map;\nVehicle[] vehicles = new Vehicle[6];\nvehicles[0] = new Vehicle(\"9685KMX\", 4, \"azul\");\nvehicles[1] = new Vehicle(\"1235GTR\", 2, \"rojo\");\nvehicles[2] = new Vehicle(\"7314QWE\", 4, \"verde\");\nvehicles[3] = new Vehicle(\"5930POI\", 2, \"negro\");\nvehicles[4] = new Vehicle(\"1705UBG\", 4, \"blanco\");\nvehicles[5] = new Vehicle(\"3495JZA\", 2, \"naranja\");\nmap = Arrays.stream(vehicles)\n.collect(Collectors.groupingBy(Vehicle::getWheelCount, LinkedHashMap::new,\nCollectors.counting()));\nmap.forEach((k, v) -&gt; System.out.printf(\"N\u00famero de veh\u00edculos con %d ruedas: %d\\n\", k, v));\n}\npublic static void main(String[] args){\nnew CollectorsGroupingBySupplier().show();\n}\n}\n</code></pre> <p>\u00bfY si queremos realizar alguna operaci\u00f3n de conversi\u00f3n sobre los elementos de la lista de cada grupo antes de aplicarle el recolector downstream? Podemos usar el m\u00e9todo <code>Collectors.mapping</code> que ya conocemos:</p> <pre><code>public class CollectorsGroupingByMapping{\npublic void show(){\nMap&lt;Integer, String&gt; map;\nVehicle[] vehicles = new Vehicle[6];\nvehicles[0] = new Vehicle(\"9685KMX\", 4, \"azul\");\nvehicles[1] = new Vehicle(\"1235GTR\", 2, \"rojo\");\nvehicles[2] = new Vehicle(\"7314QWE\", 4, \"verde\");\nvehicles[3] = new Vehicle(\"5930POI\", 2, \"negro\");\nvehicles[4] = new Vehicle(\"1705UBG\", 4, \"blanco\");\nvehicles[5] = new Vehicle(\"3495JZA\", 2, \"naranja\");\nmap = Arrays.stream(vehicles)\n.collect(Collectors.groupingBy(Vehicle::getWheelCount, TreeMap::new,\nCollectors.mapping(Vehicle::getRegistration, Collectors.joining(\" - \"))));\nmap.forEach((k, v) -&gt; System.out.printf(\"Matr\u00edculas con %d ruedas: %s\\n\", k, v));\n}\npublic static void main(String[] args){\nnew CollectorsGroupingByMapping().show();\n}\n}\n</code></pre> <p>Si la funci\u00f3n de transformaci\u00f3n retorna un stream, podemos usar <code>public static &lt;T, U, A, R&gt; Collector&lt;T,?,R&gt; flatMapping(Function&lt;? super T,? extends Stream&lt;? extends U&gt;&gt; mapper,  Collector&lt;? super U,A,R&gt; downstream)</code> disponible a partir de Java 9.</p> <p>Por ejemplo, vamos a cambiar la clase Vehicle para registrar modelos de coches con un determinado n\u00famero de ruedas y una lista de todos los colores en los que est\u00e1 disponible dicho modelo, y si quisi\u00e9ramos obtener de cada n\u00famero de ruedas cu\u00e1ntos colores hay disponible podr\u00edamos hacer lo siguiente:</p> VehicleMainSalida <pre><code>public class Vehicle{\nprivate String model;\nprivate int wheelCount;\nprivate List&lt;String&gt; colors;\npublic Vehicle(String model, int wheelCount, List&lt;String&gt; colors){\nthis.model = model;\nthis.wheelCount = wheelCount;\nthis.colors = colors;\n}\npublic String getModel(){\nreturn model;\n}\npublic int getWheelCount(){\nreturn wheelCount;\n}\npublic List&lt;String&gt; getColors(){\nreturn colors;\n}\n}\n</code></pre> <pre><code>public class CollectorsGroupingByMapping{\npublic void show(){\nMap&lt;Integer, List&lt;Object&gt;&gt; map;\nVehicle[] vehicles = new Vehicle[4];\nvehicles[0] = new Vehicle(\"Audi\", 4, List.of(\"azul\", \"rojo\", \"blanco\"));\nvehicles[1] = new Vehicle(\"Ford\", 4, List.of(\"naranja\", \"blanco\"));\nvehicles[2] = new Vehicle(\"Audi\", 2, List.of(\"negro\", \"verde\"));\nvehicles[3] = new Vehicle(\"Ford\", 2, List.of(\"negro\", \"blanco\"));\nmap = Arrays.stream(vehicles)\n.collect(Collectors.groupingBy(Vehicle::getWheelCount, TreeMap::new,\nCollectors.mapping(v -&gt; v.getColors(), Collectors.toList())));\nmap.forEach((k,v) -&gt; System.out.printf(\"N\u00famero de ruedas: %d Colores: %s\\n\", k, v));\n}\npublic static void main(String[] args){\nnew CollectorsGroupingByMapping().show();\n}\n}\n</code></pre> <pre><code>N\u00famero de ruedas: 2 Colores: [[negro, verde], [negro, blanco]]\nN\u00famero de ruedas: 4 Colores: [[azul, rojo, blanco], [naranja, blanco]]\n</code></pre> <p>Si nos fijamos en la salida de consola, salen las sublistas. Para quitarlas, podemos pasar estas listas a streams y luego utilizar el m\u00e9todo flatMapping  para aplanarlas:</p> MainSalida <pre><code>public class CollectorsGroupingByFlatMapping{\npublic void show(){\nMap&lt;Integer, String&gt; map;\nVehicle[] vehicles = new Vehicle[4];\nvehicles[0] = new Vehicle(\"Audi\", 4, List.of(\"azul\", \"rojo\", \"blanco\"));\nvehicles[1] = new Vehicle(\"Ford\", 4, List.of(\"naranja\", \"blanco\"));\nvehicles[2] = new Vehicle(\"Audi\", 2, List.of(\"negro\", \"verde\"));\nvehicles[3] = new Vehicle(\"Ford\", 2, List.of(\"negro\", \"blanco\"));\nmap = Arrays.stream(vehicles)\n.collect(Collectors.groupingBy(Vehicle::getWheelCount, TreeMap::new,\nCollectors.flatMapping(v -&gt; v.getColors().stream(), Collectors.joining(\"-\"))));\nmap.forEach((k,v) -&gt; System.out.printf(\"N\u00famero de ruedas: %d Colores: %s\\n\", k, v));\n}\npublic static void main(String[] args){\nnew CollectorsGroupingByFlatMapping().show();\n}\n}\n</code></pre> <pre><code>N\u00famero de ruedas: 2 Colores: negro-verde-negro-blanco\nN\u00famero de ruedas: 4 Colores: azul-rojo-blanco-naranja-blanco\n</code></pre> <p>Ahora nos encontramos con colores repetidos. Para quitarlos, podemos hacer uso del m\u00e9todo  <code>public  static  &lt;T,  A,  R,  RR&gt;  Collector&lt;T,A,RR&gt; collectingAndThen(Collector&lt;T,A,R&gt;  downstream,  Function&lt;R,RR&gt;  finisher)</code>.Este  m\u00e9todo recolecta y despu\u00e9s se puede realizar un Function sobre el resultado de la recolecci\u00f3n.</p> MainSalida <pre><code>public class CollectorsGroupingByCollectingAndThen{\npublic void show(){\nMap&lt;Integer, String&gt; map;\nVehicle[] vehicles = new Vehicle[4];\nvehicles[0] = new Vehicle(\"Audi\", 4, List.of(\"azul\", \"rojo\", \"blanco\"));\nvehicles[1] = new Vehicle(\"Ford\", 4, List.of(\"naranja\", \"blanco\"));\nvehicles[2] = new Vehicle(\"Audi\", 2, List.of(\"negro\", \"verde\"));\nvehicles[3] = new Vehicle(\"Ford\", 2, List.of(\"negro\", \"blanco\"));\nmap = Arrays.stream(vehicles)\n.collect(Collectors.groupingBy(Vehicle::getWheelCount, TreeMap::new,\nCollectors.collectingAndThen(Collectors.flatMapping(v -&gt;\nv.getColors().stream(), Collectors.toList()),\nlist -&gt; list.stream().distinct().collect(Collectors.joining(\"-\")))));\nmap.forEach((k,v) -&gt; System.out.printf(\"N\u00famero de ruedas: %d Colores: %s\\n\", k, v));\n}\npublic static void main(String[] args){\nnew CollectorsGroupingByCollectingAndThen().show();\n}\n}\n</code></pre> <pre><code>N\u00famero de ruedas: 2 Colores: negro-verde-blanco\nN\u00famero de ruedas: 4 Colores: azul-rojo-blanco-naranja\n</code></pre> <p>En otras ocasiones, lo que queremos es filtrar los elementos de cada lista en base a alg\u00fan criterio, antes de aplicarle el recolector downstream. Para ello, Java 9 incorpor\u00f3 el m\u00e9todo <code>public  static  &lt;T,  A,  R&gt;  Collector&lt;T,?,R&gt;  filtering(Predicate&lt;? super T&gt; predicate, Collector&lt;? super T,A,R&gt; downstream)</code>:</p> MainSalida <pre><code>public class CollectorsGroupingByFiltering{\npublic void show(){\nMap&lt;String, List&lt;Vehicle&gt;&gt; map;\nList&lt;Vehicle&gt; vehicles = new ArrayList&lt;&gt;();\nvehicles.add(new Vehicle(\"Audi\", 4, List.of(\"azul\", \"rojo\")));\nvehicles.add(new Vehicle(\"Ford\", 4, List.of(\"naranja\", \"blanco\")));\nvehicles.add(new Vehicle(\"Audi\", 2, List.of(\"negro\", \"verde\")));\nvehicles.add(new Vehicle(\"Ford\", 2, List.of(\"amarillo\", \"blanco\")));\nmap = vehicles.stream()\n.collect(Collectors.groupingBy(Vehicle::getModel,\nCollectors.filtering(v -&gt; v.getWheelCount() == 4, Collectors.toList())));\nmap.forEach((k,v) -&gt; System.out.printf(\"Modelo: %s Veh\u00edculos de 4 ruedas: %s\\n\", k, v));\n}\npublic static void main(String[] args){\nnew CollectorsGroupingByFiltering().show();\n}\n}\n</code></pre> <pre><code>Modelo:Audi Veh\u00edculos de 4 ruedas: [Vehicle [model=Audi, wheelCount=4,\nspeed=0.0, colors=[azul, rojo]]]\nModelo:Ford Veh\u00edculos de 4 ruedas: [Vehicle [model=Ford, wheelCount=4,\nspeed=0.0, colors=[naranja, blanco]]]\n</code></pre> <p>Se pueden crear varios niveles de agrupamiento, aplicando  groupingBy  como recolector downstream de los elementos de cada grupo:</p> MainSalida <pre><code>public class CollectorsVariousLevelsOfGroupingBy{\npublic void show(){\nMap&lt;String, Map&lt;Integer, Long&gt;&gt; map;\nList&lt;Vehicle&gt; vehicles = new ArrayList();\nvehicles.add(new Vehicle(\"Audi\", 4, List.of(\"azul\", \"rojo\")));\nvehicles.add(new Vehicle(\"Ford\", 4, List.of(\"naranja\", \"blanco\", \"verde\")));\nvehicles.add(new Vehicle(\"Seat\", 4, List.of(\"amarillo\", \"verde\")));\nvehicles.add(new Vehicle(\"Audi\", 2, List.of(\"negro\")));\nvehicles.add(new Vehicle(\"Ford\", 2, List.of(\"rojo\", \"blanco\")));\nvehicles.add(new Vehicle(\"Seat\", 2, List.of(\"amarillo\", \"morado\")));\nmap = vehicles.stream()\n.collect(Collectors.groupingBy(Vehicle::getModel,\nCollectors.groupingBy(Vehicle::getWheelCount,\nCollectors.flatMapping(v -&gt; v.getColors().stream(),\nCollectors.counting()))));\nmap.forEach((k,v) -&gt; {\nv.forEach((k2, v2) -&gt; {\nSystem.out.printf(\"Modelo %s con %d ruedas est\u00e1 disponible en %d %s\\n\", k, k2, v2,\nv2 == 1 ? \"color\" : \"colores\");\n});\n});\n}\npublic static void main(String[] args){\nnew CollectorsVariousLevelsOfGroupingBy().show();\n}\n}\n</code></pre> <pre><code>Modelo Seat con 2 ruedas est\u00e1 disponible en 2 colores\nModelo Seat con 4 ruedas est\u00e1 disponible en 2 colores\nModelo Audi con 2 ruedas est\u00e1 disponible en 1 color\nModelo Audi con 4 ruedas est\u00e1 disponible en 2 colores\nModelo Ford con 2 ruedas est\u00e1 disponible en 2 colores\nModelo Ford con 4 ruedas est\u00e1 disponible en 3 colore\n</code></pre>"},{"location":"bloque_iii/tema_13/page-4/#recolectores-de-particionado","title":"Recolectores de particionado","text":"<p><code>public  static  &lt;T&gt;  Collector&lt;T,?,Map&lt;Boolean,List&lt;T&gt;&gt;&gt; partitioningBy(Predicate&lt;?  super  T&gt;  predicate)</code>: aplica  el  predicado proporcionado a cada uno de los elementos del stream y crea dos grupos, uno con los que cumplen el predicado y otro con los que no lo cumplen:</p> MainSALIDA <pre><code>public class CollectorsPartitionBy{\npublic void show(){\nMap&lt;Boolean, Long&gt; map;\nList&lt;Vehicle&gt; vehicles = new ArrayList&lt;&gt;();\nvehicles.add(new Vehicle(\"Audi\", 4, List.of(\"azul\", \"rojo\")));\nvehicles.add(new Vehicle(\"Ford\", 4, List.of(\"naranja\", \"blanco\", \"verde\")));\nvehicles.add(new Vehicle(\"Seat\", 4, List.of(\"amarillo\", \"verde\")));\nvehicles.add(new Vehicle(\"Audi\", 2, List.of(\"negro\")));\nvehicles.add(new Vehicle(\"Ford\", 2, List.of(\"rojo\", \"blanco\")));\nmap = vehicles.stream()\n.collect(Collectors.partitioningBy(vehicle -&gt; vehicle.getWheelCount() == 4, Collectors.counting()));\nmap.forEach((k, v) -&gt; {\nSystem.out.printf(\"%s hay en %d modelos\\n\", k ? \"Veh\u00edculos de 4 ruedas\" : \"Veh\u00edculos que no son de 4 ruedas: \", v);\n});\n}\npublic static void main(String[] args){\nnew CollectorsPartitionBy().show();\n}\n}\n</code></pre> <pre><code>Veh\u00edculos que no son de 4 ruedas:\nVehicle [model=Audi, wheelCount=2, colours=[negro, verde]]\nVehicle [model=Ford, wheelCount=2, colours=[amarillo, blanco]]\nVeh\u00edculos de 4 ruedas:\nVehicle [model=Audi, wheelCount=4, colours=[azul, rojo]]\nVehicle [model=Ford, wheelCount=4, colours=[naranja, blanco]\n</code></pre> <p>Existe otra versi\u00f3n del m\u00e9todo que recibe como segundo argumento un recolector para que sea ejecutado sobre la lista de cada grupo:</p> MainSALIDA <pre><code>public class CollectorsPartitioningByDownstream{\npublic void show(){\nMap&lt;Boolean, List&lt;Vehicle&gt;&gt; map;\nList&lt;Vehicle&gt; vehicles = new ArrayList&lt;&gt;();\nvehicles.add(new Vehicle(\"Audi\", 4, List.of(\"azul\", \"rojo\")));\nvehicles.add(new Vehicle(\"Ford\", 4, List.of(\"naranja\", \"blanco\")));\nvehicles.add(new Vehicle(\"Audi\", 2, List.of(\"negro\", \"verde\")));\nvehicles.add(new Vehicle(\"Ford\", 2, List.of(\"amarillo\", \"blanco\")));\nmap = vehicles.stream()\n.collect(Collectors.partitioningBy(v -&gt; v.getWheelCount() == 4));\nmap.forEach((k, v) -&gt; {\nSystem.out.printf(\"%s\\n\", k ? \"Veh\u00edculos de 4 ruedas\" : \"Veh\u00edculos que no son de 4 ruedas: \");\nv.forEach(System.out::println);\n});\n}\npublic static void main(String[] args){\nnew CollectorsPartitioningByDownstream().show();\n}\n}\n</code></pre> <pre><code>Veh\u00edculos que no son de 4 ruedas:\nVehicle [model=Audi, wheelCount=2, colours=[negro, verde]]\nVehicle [model=Ford, wheelCount=2, colours=[amarillo, blanco]]\nVeh\u00edculos de 4 ruedas:\nVehicle [model=Audi, wheelCount=4, colours=[azul, rojo]]\nVehicle [model=Ford, wheelCount=4, colours=[naranja, blanco]\n</code></pre>"},{"location":"bloque_iii/tema_13/page-4/#combinacion-de-dos-recolectores","title":"Combinaci\u00f3n de dos recolectores","text":"<p><code>public  static  &lt;T,  R1,  R2,  R&gt;  Collector&lt;T,?,R&gt;  teeing(Collector&lt;?  super T,?,R1&gt; downstream1,  Collector&lt;? super T,?,R2&gt; downstream2,  BiFunction&lt;? super R1,? super R2,R&gt; merger)</code>: ejecuta ambos recolectores sobre los elementos y despu\u00e9s ejecuta sobre los resultados la <code>BiFunction</code> proporcionada, que combinar\u00e1 ambos resultados, de manera que la combinaci\u00f3n ser\u00e1 el producto final de la recolecci\u00f3n</p> ResultMainSALIDA <pre><code>public class Result{\nprivate Optional&lt;Vehicle&gt; min;\nprivate Optional&lt;Vehicle&gt; max;\npublic Result(Optional&lt;Vehicle&gt; min, Optional&lt;Vehicle&gt; max){\nthis.min = min;\nthis.max = max;\n}\npublic Optional&lt;Vehicle&gt; getMin(){\nreturn min;\n}\npublic Optional&lt;Vehicle&gt; getMax(){\nreturn max;\n}\n@Override\npublic String toString(){\nreturn String.format(\"El veh\u00edculo que tiene el m\u00ednimo n\u00famero de colores es %s\\nEl veh\u00edculo que tiene el m\u00e1ximo n\u00famero de colores es %s\\n\", min, max);\n}\n}\n</code></pre> <pre><code>public class CollectorsTeeing{\npublic void show(){\nResult result;\nList&lt;Vehicle&gt; vehicles = new ArrayList&lt;&gt;();\nvehicles.add(new Vehicle(\"Audi\", 4, List.of(\"azul\", \"rojo\")));\nvehicles.add(new Vehicle(\"Ford\", 4, List.of(\"naranja\", \"blanco\", \"verde\")));\nvehicles.add(new Vehicle(\"Seat\", 4, List.of(\"amarillo\", \"verde\")));\nvehicles.add(new Vehicle(\"Audi\", 2, List.of(\"negro\")));\nvehicles.add(new Vehicle(\"Ford\", 2, List.of(\"rojo\", \"blanco\")));\nvehicles.add(new Vehicle(\"Seat\", 2, List.of(\"amarillo\", \"morado\")));\nresult = vehicles.stream()\n.collect(Collectors.teeing(Collectors.minBy(Comparator.comparing(v -&gt; v.getColors().size())),\nCollectors.maxBy(Comparator.comparing(v -&gt; v.getColors().size())),\nResult::new));\nSystem.out.println(result);\n}\npublic static void main(String[] args){\nnew CollectorsTeeing().show();\n}\n}\n</code></pre> <pre><code>El veh\u00edculo que tiene el m\u00ednimo n\u00famero de colores es Vehicle [model=Audi, wheelCount=2, colours=[negro]]\nEl veh\u00edculo que tiene el m\u00e1ximo n\u00famero de colores es Vehicle [model=Ford, wheelCount=4, colours=[naranja, blanco, verde]]\n</code></pre> <p>Este m\u00e9todo es de la versi\u00f3n 12 de Java. En versiones anteriores, ser\u00eda necesario operar dos  veces  sobre  el  stream,  almacenar  los  resultados  intermedios  en  variables temporales y despu\u00e9s combinar las variables temporales.</p>"},{"location":"bloque_iii/tema_13/page-4/#streams-y-checked-exceptions","title":"Streams y checked exceptions","text":"<p>Las checked exceptions de Java no congenian demasiado bien con la programaci\u00f3n funcional y los stream. En el siguiente  ejemplo  vemos  como  nuestro  c\u00f3digo  queda  m\u00e1s  ofuscado  debido  a  que  estamos  obligados  a capturar la checked exception generada por el constructor de la clase <code>URL</code>:</p> <pre><code>List&lt;URL&gt; urls = Stream.of(\"www.iessaladillo.com/api\", \"www.iessaladillo.com/css\")\n.map(s -&gt; s.replace(\"iessaladillo.com\", \"iessaladillo.es\"))\n.map(url -&gt; {\ntry{\nreturn new URL(url);\n} catch(Exception e){\n// ...\n}\n}).collect(toList());\n</code></pre> <p>Con el objeto de mejorar la claridad de nuestro c\u00f3digo, podemos crear m\u00e9todos que capturen la checked exception y la relancen como una runtime exception, tal y como hace la siguiente librer\u00eda https://gist.github.com/jomoespe/ea5c21722b693c09c38bf6286226cd92</p> <pre><code>List&lt;URL&gt; urls = Stream.of(\"www.iessaladillo.com/api\", \"www.iessaladillo.com/css\")\n.map(s -&gt; s.replace(\"iessaladillo.com\", \"iessaladillo.es\"))\n.map(rethrowFunction(URL::new))\n.collect(toList());\n</code></pre>"},{"location":"bloque_iii/tema_13/page-5/","title":"Ejercicios","text":"Ejercicio 1 <p>Realiza una nueva versi\u00f3n del proyecto del tema anterior eliminando la clase <code>Stream&lt;T&gt;</code> y haciendo uso de los streams</p> Ejercicio 2 <p>En un Udemy se desea guardar informaci\u00f3n referente a los cursos que se tienen almacenado:</p> <ul> <li>El t\u00edtulo del curso</li> <li>La duraci\u00f3n expresada en horas. Si un curso dura una hora y 15 minutos se representar\u00e1 como 1,25.</li> <li>Cantidad de videos que contiene el curso</li> <li>Cantidad de alumnos subscritos al curso</li> </ul> <p>Teniendo en cuenta la siguiente informaci\u00f3n de los cursos:</p> T\u00edtulo Duraci\u00f3n Vides Alumnos Curso profesional de Java 6,5 50 200 Curso profesional de Python 8,5 60 800 Curso profesional de DB 4,5 700 700 Curso profesional de Android 7,5 10 400 Curso profesional de Escritura 1,5 10 300 <ul> <li>Obtener la cantidad de cursos con una duraci\u00f3n mayor a 5 horas.</li> <li>Obtener la cantidad de cursos con una duraci\u00f3n menor a 2 horas.</li> <li>Listar t\u00edtulo de todos aquellos cursos con una cantidad de v\u00eddeos mayor a 50.</li> <li>Mostrar en consola el t\u00edtulo de los 3 primeros cursos con mayor duraci\u00f3n.</li> <li>Mostrar en consola la duraci\u00f3n total de todos los cursos.</li> <li>Mostrar en consola todos aquellos libros que superen el promedio en cuanto a duraci\u00f3n se refiere.</li> <li>Mostrar en consola la duraci\u00f3n de todos aquellos cursos que tengan una cantidad de alumnos inscritos menor a 500.</li> <li>Obtener el curso con mayor duraci\u00f3n.</li> <li>Crear una lista con todos los t\u00edtulos de los cursos.</li> </ul> Ejercicio 3 <p>Crea una aplicaci\u00f3n Java que defina las siguientes clases:</p> <ul> <li>Student: Representa a un alumno. Dispone de los campos:<ul> <li>id: identificador de tipo long</li> <li>name: nombre del alumno de tipo String</li> <li>age: edad del alumno de tipo int</li> <li>group: grupo del alumno de tipo String</li> <li>grant: cantidad de la beca concedida de tipo Integer</li> <li>grades: notas del alumno de tipo List <li>Grade: Representa una nota. Dispone de los campos:<ul> <li>subject: nombre de la asignatura de tipo String</li> <li>mark: nota de dicha asignatura de tipo float</li> </ul> </li> <li>Database: Representa la base de datos con la que trabajaremos. Dispondr\u00e1 de un campo privado correspondiente a la lista de estudiantes. Adem\u00e1s tendr\u00e1 un m\u00e9todo p\u00fablico denominado queryAllStudents() que retornar\u00e1 la lista de alumnos.</li> <p>Inicializa la base de datos con los siguientes datos de los alumnos (en este orden):</p> ID Name Age Group Grant Grades 1 Germ\u00e1n Gin\u00e9s 23 1\u00ba CFGS DAM 2000 [PROGR, 8], [LM, 3] 2 Baldomero 21 1\u00ba CFGS DAM 0 [PROGR, 5], [LM, 4] 3 Ana Guerra 17 1\u00ba CFGS SMR 4000 [PROGR, 8] <p>Realiza en Java los m\u00e9todos necesarios para mostrar por pantalla el resto de las siguientes consultas, usando streams (y optionals cuando sea necesario).</p> <ul> <li> <p>showLegalAgeStudentCount(): Debe mostrar los alumnos que sean mayores de edad. La salida ser\u00eda:</p> <pre><code>N\u00famero de alumnos mayores de edad: 2\n</code></pre> </li> <li> <p>showStudentNamesOrderAlphabetically(): Debe mostrar los nombre de los alumnos ordenados alfab\u00e9ticamente. La salida ser\u00eda:</p> <pre><code>Nombre los alumnos (orden alfab\u00e9tico):\nAna Guerra\nBaldomero\nGerm\u00e1n Gin\u00e9s\n</code></pre> </li> <li> <p>showFirstTwoStudentsNames(): Debe mostrar los nombres de los dos primeros alumnos. La salida ser\u00eda:</p> <pre><code>Nombre de los dos primeros alumnos:\nGerm\u00e1n Gin\u00e9s\nBaldomero\n</code></pre> </li> <li> <p>showStudentsNamesExceptTheFirstOne(): Debe mostrar los nombres de todos los alumnos menos del primero, La salida ser\u00eda:</p> <pre><code>Nombres de alumnos (excepto el primero):\nBaldomero\nAna Guerra\n</code></pre> </li> <li> <p>showStudentsNamesUntilFirstNotLegalAgeOne(): Debe mostrar los nombres de todos los alumnos hasta que encuentre uno menor de edad. \u00c9ste ya no lo mostrar\u00e1. La salida ser\u00eda:</p> <pre><code>Nombres de alumnos (hasta que encontramos uno menor de edad):\nGerm\u00e1n Gin\u00e9s\nBaldomero\n</code></pre> </li> <li> <p>showStudentsSinceFirstNotLegalAgeOne(): Debe mostrar los nombres de todos los alumnos desde que encontremos uno menor de edad. \u00c9ste si lo mostrar\u00e1. La salida ser\u00eda:</p> <pre><code>Nombres de alumnos (desde que encontramos uno menor de edad):\nAna Guerra\n</code></pre> </li> <li> <p>showDifferentSubjectsOrderedAlphabetically(): Debe mostrar las asignaturas de las que hay alg\u00fan alumno matriculado, ordenadas alfab\u00e9ticamente. La salida ser\u00eda:</p> <pre><code>Asignaturas:\nLM\nPROGR\n</code></pre> </li> <li> <p>showStudentsGrantsAndSum(): Debe mostrar la beca de cada alumno y adem\u00e1s la suma de todas las becas. La salida ser\u00eda:</p> <pre><code>Becas:\nGerm\u00e1n Gin\u00e9s: 2000\nBaldomero: 0\nAna Guerra: 4000\nSuma de becas: 6000\n</code></pre> </li> <li> <p>getStudentsOlderThan20(): Debe retornar una lista con los nombres de los alumnos mayores de 20 a\u00f1os. El retorno deber\u00eda la lista:</p> <pre><code>[Germ\u00e1n Gin\u00e9s, Baldomero]\n</code></pre> </li> <li> <p>showYoungestStudentName(): Debe mostrar el nombre de alumna m\u00e1s joven. La salida ser\u00eda:</p> <pre><code>Alumno m\u00e1s joven: Ana Guerra\n</code></pre> </li> <li> <p>showOldestStudentOlderThan23(): Debe mostrar el nombre del alumnos m\u00e1s veterano de entre los que tengan m\u00e1s de 23 a\u00f1os. La salida ser\u00eda:</p> <pre><code>Alumno m\u00e1s veterano mayor de 23: No encontrado\n</code></pre> </li> <li> <p>showStudentNamesWithCommasOrderedByAge(): Debe mostrar una cadena con los nombres de los alumnos separados por coma, ordenados por su edad. La salida ser\u00eda:</p> <pre><code>Alumnos: Ana Guerra, Baldomero, Germ\u00e1n Gin\u00e9s\n</code></pre> </li> <li> <p>showStudentCountInEachGroup(): Debe mostrar el n\u00famero de alumnos de cada grupo-clase, ordenados por nombre del grupo. La salida ser\u00eda:</p> <pre><code>N\u00famero de alumnos en cada grupo:\n1\u00ba CFGS DAM: 2 alumnos\n1\u00ba CFGM SMR: 1 alumno\n</code></pre> <p>Intenta hacer que el listado salga ordenado por el nombre del grupo-clase, a ver si lo consigues.</p> </li> <li> <p>showGrantSummary(): Debe mostrar la estad\u00edstica de becas de los alumnos, es decir, la beca m\u00e1xima, la m\u00ednima y la media (haciendo todos los c\u00e1lculos de una sola vez). La salida ser\u00eda:</p> <pre><code>Estad\u00edstica de becas:\nM\u00e1xima: 4000, M\u00ednima: 0, Media: 2000,00\n</code></pre> </li> <li> <p>showAreAnyStudentUnderLegalAge(): Debe mostrar si hay alg\u00fan alumno menor de edad. La salida ser\u00eda:</p> <pre><code>\u00bfAlg\u00fan alumno menor de edad? S\u00ed\n</code></pre> </li> <li> <p>showAllStudentHaveGrant(): Debe mostrar si todos los alumnos tienen beca. La salida ser\u00eda:</p> <pre><code>\u00bfTodos los alumnos tienen beca?: No\n</code></pre> </li> <li> <p>showFirstStudentWithoutGrant(): Debe mostrar el nombre del primer alumno que no tenga beca. La salida ser\u00eda:</p> <pre><code>Nombre del primer alumno sin beca: Baldomero\n</code></pre> </li> <li> <p>showHowManyStudentWithOrWithoutGrant(): Debe mostrar cu\u00e1ntos alumnos hay con beca y cu\u00e1ntos sin beca. La salida ser\u00eda:</p> <pre><code>Alumnos con o sin beca\nSin beca: 1\nCon beca: 2\n</code></pre> </li> <li> <p>showNumberOfSubjectsOfEachStudent(): Debe mostrar el n\u00famero de asignaturas de las que est\u00e1 matriculado cada alumnos. La salida ser\u00eda:</p> <pre><code>N\u00famero de asignaturas de cada alumno:\nBaldomero: 2\nAna Guerra: 1\nGerm\u00e1n Gin\u00e9s: 2\n</code></pre> </li> <li> <p>showNumberOfPassersStudentsOfEachSubject() (NIVEL PRO): Debe mostrar el n\u00famero de alumnos aprobados en cada asignatura (mark &gt;= 5). La salida ser\u00eda:</p> <pre><code>N\u00famero de aprobados por asignatura:\nPROGR - 3 aprobados\nLM - 0 aprobados\n</code></pre> <p>Intenta hacer que el listado salga ordenado por nombre de la asignatura.</p> </li> </ul>"},{"location":"bloque_iii/tema_13/page-6/","title":"Proyecto","text":"<p>En una tienda se desea almacenar la siguiente informaci\u00f3n sobre los productos:</p> <ul> <li>Un identificador</li> <li>El nombre del producto</li> <li>La marca del producto</li> <li>El modelo del producto, si \u00e9ste tuviese</li> <li>Precio individual del producto</li> <li>Cantidad de stock</li> <li>Fecha de caducidad, si el producto lo require</li> <li>Peso del producto en gramos</li> </ul> <p>El identificador se forma con las dos primeras letras del nombre del producto, seguido de las 3 siguientes de la marca, seguido del hashCode de ambas.</p> <p>La cesta de la compra estar\u00e1 formada por una colecci\u00f3n de productos y la cantidad de \u00e9stos que contiene. Cada vez que se a\u00f1ade un producto, se deber\u00e1 comprobar si \u00e9ste ya existe en la cesta. Si es as\u00ed, aumentar\u00e1 la cantidad de producto que hay en la cesta, por el contrario a\u00f1adir\u00e1 el producto a la cesta con la cantidad de 1.</p> <p>Una vez que se realice la compra se guardar\u00e1 la informaci\u00f3n en las Facturas, de cada factura se desea conocer:</p> <ul> <li>El identificador de la factura (ser\u00e1 una hash de la fecha de la factura)</li> <li>Fecha de la factura</li> <li>Detalle de la factura (compuesta por el producto, cantidad y precio)</li> <li>Descuentos</li> <li>Precio total</li> </ul> <p>Realiza una aplicaci\u00f3n Java teniendo en cuenta lo siguiente:</p> <ul> <li>Cuando un usuario va a comprar el contenido de la cesta, \u00e9sta se quedar\u00e1 vac\u00eda, adem\u00e1s se deber\u00e1 decrementar la cantidad de stock del producto comprado.</li> <li>Se realizar\u00e1 un descuento del 5% si supera un precio total de 100\u20ac en la factura o si tiene m\u00e1s de 10 productos diferentes</li> </ul> <p>La aplicaci\u00f3n tendr\u00e1 las siguientes opciones:</p> <ul> <li>Mostrar lista de productos</li> <li>Localizar producto por marca, nombre o identificador.</li> <li>A\u00f1adir producto a la cesta (solo haciendo uso del identificador, en caso de que no encuentre dicho producto mostrar\u00e1 un mensaje de error)</li> <li>Mostrar la cesta</li> <li>Eliminar producto de la cesta</li> <li>Realizar compra (si la cesta est\u00e1 vac\u00eda mostrar\u00e1 un mensaje de error)</li> <li>Mostrar facturas</li> <li>Filtrar factura por fechas (mes, a\u00f1o y d\u00eda) o por nombre.</li> </ul> <p>Para realizar este proyecto se tendr\u00e1 en cuenta:</p> <ul> <li>Se deber\u00e1 entregar un diagrama de clase que represente las relaciones entre las clases y las interfaces.</li> <li>Todo las operaciones posibles se har\u00e1 haciendo uso de streams</li> <li>Se podr\u00e1 usar la librer\u00eda common realiza en proyectos anteriores, haciendo uso de JARs.</li> <li>El nombre de las funciones ser\u00e1 en ingl\u00e9s y deber\u00e1n ser lo suficiente claras para poder identificarlas con facilidad.</li> <li>El c\u00f3digo se comentar\u00e1 haciendo uso de los comentarios JavaDoc adem\u00e1s, de comentarios normales para dar una explicaci\u00f3n a la parte del c\u00f3digo m\u00e1s importante.</li> <li>El repositorio de GitHub tendr\u00e1 el siguiente nombre pr13java-NOMBRE-streams siendo NOMBRE el nombre del alumno.</li> <li>Se declarar\u00e1 aquellas variables que sean necesarias inicializ\u00e1ndolas si es necesario, indicando el tipo correspondiente.</li> <li>Se har\u00e1 uso de funciones y procedimientos donde sea oportuno.</li> <li>La entrega de este proyecto se realizar\u00e1 a trav\u00e9s de un enlace a un repositorio de GitHub, realizando siempre m\u00e1s de un commit.</li> <li>Se valorar\u00e1 la limpieza, la claridad, y la estructura del proyecto.</li> </ul>"},{"location":"bloque_iv/tema_14/page-1/","title":"1 Introducci\u00f3n al Manejo de Ficheros","text":""},{"location":"bloque_iv/tema_14/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>Un fichero o archivo es un conjunto de bits almacenados en un dispositivo. Los ficheros son no vol\u00e1tiles, es decir, que los datos que almacenados permanecen en el dispositivo incluso cuando se apaga el ordenador.</p> <p>Los ficheros tienen un nombre y se ubican en directorios o carpetas, Dicho nombre ha de ser \u00fanico y no se debe repetir en el mismo directorio.</p> <p>Por lo general, los ficheros cuenta con diferentes extensiones, que por lo general suele ser 3 letras y nos permiten saber el tipo de fichero.</p> <p>Un fichero est\u00e1 formado por un conjunto de registros o l\u00edneas y cada registro por un conjunto de campos relacionados, por ejemplo, un fichero de empleados puede contener datos de los empleados de una empresa, un fichero de texto puede contener l\u00edneas de texto correspondientes a l\u00edneas impresas en una hoja de papel.</p>"},{"location":"bloque_iv/tema_14/page-1/#clases-asociadas-a-las-operaciones-de-gestion-de-ficheros","title":"Clases asociadas a las operaciones de Gesti\u00f3n de Ficheros","text":"<p>El paquete java.io contiene las clases para manejar la entrada/salida en Java, por tanto, necesitaremos importar dicho paquete cuando trabajemos con ficheros.</p> <p>La clase File proporciona un conjunto de utilidades relacionadas con los ficheros que nos van a proporcionar informaci\u00f3n acerca de los mimos (su nombre, atributos, directorios, etc)</p> <p>Para crear un objeto de tipo File se puede usar cualquiera de estos tres constructores.</p> <ul> <li>File(String directoryFile). Usa como argumento el directorio del fichero en forma de cadena.</li> <li>File(String directorio, String nombreFichero). Usa como argumento el directorio padre (directorio que contiene el fichero) del fichero y su nombre, ambas en forma de cadena.</li> <li>File(File directorio, String fichero). Usa como argumento el directorio padre en forma de tipo File y el nombre del fichero en cadena.</li> </ul> <p>En Linux se utiliza como prefijo de una ruta absoluta \"/\", En Microsoft Windows, el prefijo de un nombre de ruta consiste en la letra de la unidad seguida de \":\" y seguida por \"\\\\\" si la ruta es absoluta</p> <pre><code>//Windows\nFile ficherol = new File(\"C:\\\\EJERCICIOS\\\\UNil\\\\ejemplol.txt\");\n//Linux\nFile ficherol = new File(\"/home/ejercicios/unil/ejemplol.txt\");\nString directorio= \"C:/EJERCICIOS/UNil\";\nFile fichero2 = new File(directorio, \"emplo2.txt\");\nFile direc = new File(directorio);\nFile fichero3 = new File(directorio);\n</code></pre> <p>Algunos de los m\u00e9todos m\u00e1s importantes de la clase File son los siguientes:</p> M\u00e9todo Funci\u00f3n String[] list() Devuelve un array de String con los nombre de los ficheros y directorios asociados al objeto File. File[] listFiles() Devuelve un array de objetos File conteniendo de los ficheros que est\u00e9n dentro del directorio representado por el objeto File. String getName() Devuelve el nombre del fichero o directorio. String getPath() Devuelve la ruta relativa String getAbsolutePath() Devuelve la ruta absoluta boolean exists() Devuelve true si el fichero o directorio existe. boolean canWrite() Devuelve true si el fichero se puede escribir. boolean canRead() Devuelve true si el fichero se puede leer. boolean isFile() Devuelve true si el objeto File corresponde a un fichero normal. boolean isDirectory() Devuelve true si el objeto File corresponde a un directorio. long legth() Devuelve el tama\u00f1o del fichero en bytes. boolean mkdir() Crea un directorio con el nombre indicado en la creaci\u00f3n del objeto File. Solo se crear\u00e1 si no existe. boolean renameTo(File nuevoNombre) Renombra el fichero representando por el objeto File asign\u00e1ndole nuevo nombre. boolean delete() Borra el fichero o directorio asociado al objeto File. boolean createNewFile() Crea un nuevo fichero, vac\u00edo, asociado File si y solo si no existe un fichero con ese nombre String getParent() Devuelve el nombre del directorio padre, o null  si no existe. <pre><code>public class ListDir {\npublic void show() {\nString dir = \".\"; // directorio actual\nFile f = new File(dir);\nString[] files = f.list();\nSystem.out.printf(\"Ficheros en el directorio actual: %d \\n\",\nfiles != null ? files.length : 0);\nfor (String archivo : files) {\nFile f2 = new File(f, archivo);\nSystem.out.printf(\"Nombre: %s, es fichero?: %b, es directorio?: %b \\n\",\narchivo, f2.isFile(), f2.isDirectory());\n}\n}\npublic static void main(String[] args) {\nnew ListDir().show();\n}\n}\n</code></pre> <p>En el siguiente ejemplo mostramos informaci\u00f3n referente a un fichero:</p> <pre><code>public class FileInfo {\npublic void show() {\nSystem.out.println(\"INFORMACI\u00d3N SOBRE EL FICHERO\");\nFile f = new   File(\"src/exercises/bloque_iv/tema_14/FileInfo.java\");\nif(f.exists()){\nSystem.out.println(\"Nombre del fichero          : \" + f.getName());\nSystem.out.println(\"Ruta            : \" + f.getPath());\nSystem.out.println(\"Ruta Absoluta             : \" + f.getAbsolutePath());\nSystem.out.println(\"Se puede leer             : \" + f.canRead());\nSystem.out.println(\"Se puede escribir           : \" + f.canWrite());\nSystem.out.println(\"Tama\u00f1o               : \" + f.length());\nSystem.out.println(\"Es un directorio         : \" + f.isDirectory());\nSystem.out.println(\"Es un fichero             : \" + f.isFile());\nSystem.out.println(\"Nombre del directorio padre :\" + f.getParent());\n}\n}\npublic static void main(String[] args) {\nnew FileInfo().show();\n}\n}\n</code></pre> <p>Por \u00faltimo, vemos un ejemplo para crear directorios  y ficheros y renombrarlos:</p> <pre><code>public class RenameFile {\npublic void show() {\nFile d = new File(\"DIR\");\nFile f1 = new File(d,\"file1.txt\");\nFile f2 = new File(d,\"file2.txt\");\nFile f3 = new File(\"DIR/file3.txt\");\nFile renameFile = new File(d, \"file1_change.txt\");\nboolean success;\nsuccess = d.mkdir();\nSystem.out.printf(\"La carpeta %s%s ha sido creada con \u00e9xito\\n\", d.getName(), success ? \"\" : \"no\");\ntry{\nsuccess = f1.createNewFile();\nSystem.out.printf(\"Fichero %s%s ha sido creado con \u00e9xito\\n\", f1.getName(), success ? \"\" : \"no\");\nsuccess = f2.createNewFile();\nSystem.out.printf(\"Fichero %s%s ha sido creado con \u00e9xito\\n\", f2.getName(), success ? \"\" : \"no\");\n} catch (IOException e) {\nSystem.err.println(\"Error de entrada y salida\");\n}\nsuccess = f1.renameTo(renameFile);\nSystem.out.printf(\"%s ha cambiado el fichero %s a %s\\n\", success ? \"Se\" : \"No se\", f1.getName(), f3.getName());\ntry {\nsuccess = f3.createNewFile() ;\nSystem.out.printf(\"Fichero %s%s ha sido creado con \u00e9xito\\n\", f3.getName(), success ? \"\" : \"no\");\n} catch (IOException ioe) {\nSystem.err.println(\"Error de entrada y salida\");\n}\n}\npublic static void main(String[] args) {\nnew RenameFile().show();\n}\n}\n</code></pre> <p>El m\u00e9todo createNewFile() puede lanzar la excepci\u00f3n IOException, por ello se introduce en un bloque try-catch.</p> <p>Por \u00faltimo, vamos a ver un ejemplo de como eliminar un fichero:</p> <pre><code>public class DeleteFile {\npublic void show() {\nFile f = new File(\"DIR/file3.txt\");\nboolean success = f.delete();\nSystem.out.printf(\"%s ha eliminado correctamente el fichero %s\\n\", success ? \"Se\" : \"No\",\nf.getName());\n}\npublic static void main(String[] args) {\nnew DeleteFile().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-1/#flujos-o-streams-tipos","title":"Flujos o Streams: Tipos","text":"<p>El sistema de entrada/salida en Java presenta una gran cantidad de clases que se implementan el paquete java.io. Usa la abstracci\u00f3n del flujo (stream) para tratar la comunicaci\u00f3n de informaci\u00f3n entre una fuente y un destino.</p> <p>Cualquier programa que tenga que obtener informaci\u00f3n de cualquier fuente necesita abrir in stream, si necesita evitar informaci\u00f3n abrir\u00e1 un stream y se escribir\u00e1 la informaci\u00f3n en serie. Se define dos tipos de flujos:</p> <ul> <li>Flujos de bytes (8 bits): Realizan operaciones de entradas y salidas de bytes y su uso est\u00e1 orientado a la lectura/escritura de datos binarios. Todas las clases de flujos de bytes descienden de las clases InputStream y OutputStream, cada vez una de estas clases tienen varias subclases que controlan las diferencias entre los distintos dispositivos de entrada/salida que se pueden utilizar.</li> <li>Flujos de caracteres (16 bits): Realizan operaciones de entradas y salidas de caracteres. El flujo de caracteres viene gobernado por las clases Reader y Writer.</li> </ul>"},{"location":"bloque_iv/tema_14/page-1/#flujos-de-bytes","title":"Flujos de Bytes","text":"<p>La clase InputStream representa las clases que producen entradas de distintas fuentes, estas fuentes pueden ser: un array de bytes, un objeto de String, un fichero, una \"tuber\u00eda\", una secuencia de otros flujos, otras fuentes.</p> <p>La clase InputFileStream  es el flujo de entrada hacia un fichero, y se usa para leer la informaci\u00f3n de un fichero.</p> <p>Los tipos de OutputStream incluyen clases que deciden d\u00f3nde ir\u00e1 la salida: a un array de bytes. un fichero o una tuber\u00eda.</p> <p>La clase OutputFileStream es el flujo de salida hacia un fichero, y se usa para enviar informaci\u00f3n a un fichero.</p> <p>FileInputStream y FileOutputStream manipulan los flujos de bytes provenientes o dirigidos en disco.</p>"},{"location":"bloque_iv/tema_14/page-1/#flujo-de-caracteres","title":"Flujo de Caracteres","text":"<p>Las clases Reader y Writer manejan flujos de caracteres Unicode. Hay ocasiones en las que hay que usar las clases que manejan bytes en combinaci\u00f3n con las clases que manejas caracteres. Para lograr esto hay clases puentes: InputStreamReader que convierte un InputStream en un Reader y OutputStreamWriter que convierte un OutputStream en un Writer.</p> <p>Las clases de flujos de caracteres m\u00e1s importantes son:</p> <ul> <li>Para acceso a ficheros, lectura y escritura de caracteres en ficheros: FileReader y FileWriter.</li> <li>Para acceso a caracteres, leen y escribe un flujo de caracteres en un array de caracteres: CharArrayReader y CharArrayWriter.</li> <li>Para bufferizaci\u00f3n de datos: BufferedReader y BufferedWriter, se utilizan para evitar que cada lectura o escritura acceda directamente al fichero, ya que utilizan un buffer intermedio entre la memoria y el stream.</li> </ul>"},{"location":"bloque_iv/tema_14/page-1/#formas-de-acceso-a-un-fichero","title":"Formas de Acceso a un fichero","text":"<p>Hay dos formas de acceso a la informaci\u00f3n almacenada en un fichero: acceso secuencial y acceso directo o aleatorio:</p> <ul> <li>Acceso secuencial: los datos o registros se leen y se escriben en orden, del mismo modo que se hace en una antigua cinta de audio (cassette). Si se quiere acceder a un dato o un registro que est\u00e1 hacia la mitad del fichero es necesario leer antes todos los anteriores. La escritura de datos se har\u00e1 a partir del \u00faltimo dato escrito, no es posible hacer inserciones entre los datos que ya hay escritos.</li> <li>Acceso directo o aleatorio: permite acceder directamente a un dato o registro sin necesidad de leer los anteriores y se puede acceder a la informaci\u00f3n en cualquier orden. Los datos est\u00e1n almacenados en registros de tama\u00f1o conocido, nos podemos mover de un registro a otro de forma aleatoria para leerlos o modificarlos, como uno de los CDs actuales.</li> </ul> <p>En Java el acceso secuencial m\u00e1s com\u00fan en ficheros puede ser binario o a caracteres. Para el acceso binario: se usan las clases FileInputStream y FileOutputStream; para el acceso a caracteres (texto) se usan las clases FileReader y FileWriter. En el acceso aleatorio se utiliza la clase RandomAccessFile.</p>"},{"location":"bloque_iv/tema_14/page-10/","title":"10 Ficheros JSON","text":""},{"location":"bloque_iv/tema_14/page-10/#introduccion","title":"Introducci\u00f3n","text":"<p>JSON (JavaScript Object Notation - Notaci\u00f3n de Objetos de JavaScript) es un formato ligero de intercambio de datos. Leerlo y escribirlo es simple para humanos, mientras que para las m\u00e1quinas es simple interpretarlo y generarlo. Est\u00e1 basado en un subconjunto del Lenguaje de Programaci\u00f3n JavaScript.</p> <p>JSON es un formato de texto que es completamente independiente del lenguaje pero utiliza convenciones que son ampliamente conocidos por los programadores de la familia de lenguajes C, incluyendo C, C++, C#, Java, JavaScript, Perl, Python, y muchos otros. Estas propiedades hacen que JSON sea un lenguaje ideal para el intercambio de datos.</p> <p>JSON est\u00e1 constituido por dos estructuras:</p> <ul> <li>Una colecci\u00f3n de pares de nombre/valor. En varios lenguajes esto es conocido como un objeto, registro, estructura, diccionario, tabla hash, lista de claves o un arreglo asociativo.</li> <li>Una lista ordenada de valores. En la mayor\u00eda de los lenguajes, esto se implementa como arreglos, vectores, listas o secuencias.</li> </ul> <p>Estas son estructuras universales; virtualmente todos los lenguajes de programaci\u00f3n las soportan de una forma u otra. Es razonable que un formato de intercambio de datos que es independiente del lenguaje de programaci\u00f3n se base en estas estructuras.</p>"},{"location":"bloque_iv/tema_14/page-10/#objetos-json","title":"Objetos JSON","text":"<p>Un objeto es un conjunto desordenado de pares nombre/valor. Un objeto comienza con <code>{</code>, llave de apertura y termine con <code>}</code>, llave de cierre. Cada nombre es seguido por <code>:</code>, dos puntos y los pares nombre/valor est\u00e1n separados por <code>,</code>, coma.</p>"},{"location":"bloque_iv/tema_14/page-10/#arreglo-json","title":"Arreglo JSON","text":"<p>Un arreglo es una colecci\u00f3n de valores. Un arreglo comienza con <code>[</code>corchete izquierdo y termina con <code>]</code>corchete derecho. Los valores se separan por <code>,</code>coma.</p> <p> Figura 2 - Array JSON</p>"},{"location":"bloque_iv/tema_14/page-10/#valor","title":"Valor","text":"<p>Un valor puede ser una cadena de caracteres con comillas dobles, o un n\u00famero, o <code>true</code> o <code>false</code> o <code>null</code>, o un objeto o un arreglo. Estas estructuras pueden anidarse.</p> <p> Figura 3 - Value JSON</p>"},{"location":"bloque_iv/tema_14/page-10/#cadena-de-caracteres","title":"Cadena de Caracteres","text":"<p>Una cadena de caracteres es una colecci\u00f3n de cero o m\u00e1s caracteres Unicode, encerrados entre comillas dobles, usando barras divisorias invertidas como escape. Un car\u00e1cter est\u00e1 representado por una cadena de caracteres de un \u00fanico car\u00e1cter. Una cadena de caracteres es parecida a una cadena de caracteres C o Java.</p> <p> Figura 3 - String JSON</p>"},{"location":"bloque_iv/tema_14/page-10/#numero","title":"N\u00famero","text":"<p>Un n\u00famero es similar a un n\u00famero C o Java, excepto que no se usan los formatos octales y hexadecimales.</p> <p> Figura 4 - Number JSON</p>"},{"location":"bloque_iv/tema_14/page-10/#espacios-en-blancos","title":"Espacios en blancos","text":"<p>Los espacios en blanco pueden insertarse entre cualquier par de s\u00edmbolos. Exceptuando peque\u00f1os detalles de encoding, esto describe completamente el lenguaje.</p> <p> Figura 5 - Whitespace JSON</p>"},{"location":"bloque_iv/tema_14/page-10/#ejemplos-json","title":"Ejemplos JSON","text":"OBJETOArrays <pre><code>{\n\"squadName\": \"Super hero squad\",\n\"homeTown\": \"Metro City\",\n\"formed\": 2016,\n\"secretBase\": \"Super tower\",\n\"active\": true,\n\"members\": [\n{\n\"name\": \"Molecule Man\",\n\"age\": 29,\n\"secretIdentity\": \"Dan Jukes\",\n\"powers\": [\n\"Radiation resistance\",\n\"Turning tiny\",\n\"Radiation blast\"\n]\n},\n{\n\"name\": \"Madame Uppercut\",\n\"age\": 39,\n\"secretIdentity\": \"Jane Wilson\",\n\"powers\": [\n\"Million tonne punch\",\n\"Damage resistance\",\n\"Superhuman reflexes\"\n]\n},\n{\n\"name\": \"Eternal Flame\",\n\"age\": 1000000,\n\"secretIdentity\": \"Unknown\",\n\"powers\": [\n\"Immortality\",\n\"Heat Immunity\",\n\"Inferno\",\n\"Teleportation\",\n\"Inter dimensional travel\"\n]\n}\n]\n}\n</code></pre> <pre><code>[\n{\n\"name\": \"Molecule Man\",\n\"age\": 29,\n\"secretIdentity\": \"Dan Jukes\",\n\"powers\": [\n\"Radiation resistance\",\n\"Turning tiny\",\n\"Radiation blast\"\n]\n},\n{\n\"name\": \"Madame Uppercut\",\n\"age\": 39,\n\"secretIdentity\": \"Jane Wilson\",\n\"powers\": [\n\"Million tonne punch\",\n\"Damage resistance\",\n\"Superhuman reflexes\"\n]\n}\n]\n</code></pre> <p>Info</p> <p>Al final de esta p\u00e1gina, https://www.json.org/json-es.html se puede ver las grandes cantidades de librer\u00edas para poder trabajar con JSON.</p> <p>Gson es una de ellas y esta desarrollada por Google.</p>"},{"location":"bloque_iv/tema_14/page-11/","title":"11 Gson","text":""},{"location":"bloque_iv/tema_14/page-11/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Puede darse la situaci\u00f3n de que en nuestra aplicaci\u00f3n Java, necesitemos atender peticiones representadas en JSON, transformarlas a Java, tratar los datos y devolver una respuesta en JSON. Los servicios REST o los Websockets son un buen ejemplo de esto.</p> <p>Para resolver este problema podemos implementar \u00aba mano\u00bb la l\u00f3gica de negocio para serializar y deserializar nuestro JSON, lo que supondr\u00e1 un esfuerzo considerable. O podr\u00edamos hacer uso de alguna librer\u00eda dise\u00f1ada para este prop\u00f3sito como puede ser Gson.</p>"},{"location":"bloque_iv/tema_14/page-11/#gson","title":"Gson","text":"<p>Antes de nada necesitaremos a\u00f1adir la siguiente dependencia a nuestra aplicaci\u00f3n:</p> <pre><code>&lt;dependency&gt;\n&lt;groupid&gt;com.google.code.gson&lt;/groupid&gt;\n&lt;artifactid&gt;gson&lt;/artifactid&gt;\n&lt;version&gt;2.2.2&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Tambi\u00e9n se puede descargar desde aqu\u00ed</p> <p>El uso de esta librer\u00eda se basa en el uso de una instancia de la clase Gson. Dicha instancia se puede crear de manera directa (<code>new Gson()</code>) para transformaciones sencillas o de forma m\u00e1s compleja con <code>GsonBuilder</code> para a\u00f1adir distintos comportamientos. Lo veremos en los ejemplos.</p> <p>Una instancia de la clase Gson no mantiene ning\u00fan tipo de estado, por lo que el mismo objeto puede reutilizarse para m\u00faltiples serializaciones/deserializaciones.</p>"},{"location":"bloque_iv/tema_14/page-11/#serializando-objetos","title":"Serializando objetos","text":"<p>En este ejemplo, tenemos una clase Empleado que queremos convertir en un JSON.</p> EmployeeMainSalida <pre><code>public class Employee {\nprivate final int id;\nprivate final String name;\nprivate final String business;\npublic Employee(int id, String name, String business) {\nthis.id = id;\nthis.name = name;\nthis.business = business;\n}\n}\n</code></pre> <pre><code>public class ToJson {\npublic void show() {\nfinal Employee employee = new Employee(32, \"Marta\", \"Avon\");\nfinal Gson gson = new Gson();\nfinal String json = gson.toJson(employee);\nSystem.out.println(json);\n}\npublic static void main(String[] args) {\nnew ToJson().show();\n}\n}\n</code></pre> <pre><code>{\"id\":32,\"name\":\"Marta\",\"business\":\"Avaon\"}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-11/#deserializando-objetos","title":"Deserializando objetos","text":"<p>Con el m\u00e9todo fromJson podemos pasar una cadena JSON a un objeto de una clase espec\u00edfica.</p> <pre><code>public class FromJson {\npublic void show() {\nfinal String json = \"{\\\"id\\\":32,\\\"name\\\":\\\"Marta\\\",\\\"business\\\":\\\"Avon\\\"}\\n\";\nfinal Gson gson = new Gson();\nfinal Employee employee = gson.fromJson(json, Employee.class);\nSystem.out.println(employee);\n}\npublic static void main(String[] args) {\nnew FromJson().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-11/#5-gsonbuilder","title":"5. GsonBuilder","text":"<p>A veces, usando el constructor de la clase Gson no podemos tener configuraciones especificas. La librer\u00eda Gson tiene una clase que sigue el patr\u00f3n de dise\u00f1o builder. A un objeto de esta clase, puede llamar a m\u00e9todos para configurar la clase Gson y finalmente al m\u00e9todo create() que es la que creara el objeto Gson con las configuraciones realizadas.</p> <p>Por ejemplo, si tuvi\u00e9semos que almacenar, varios datos, la cadena de salida predeterminada por el objeto, no es visualmente la m\u00e1s conveniente, por ello la clase GsonBuilder, tiene un m\u00e9todo setPrettyPrinting() que sirve para que la cadena de salida, salga formateada.</p> MainSalida <pre><code>public class PrettyPrinting {\npublic void show() {\nfinal Employee employee = new Employee( 32, \"Marta\", \"Avon\");\nfinal Gson gson = new GsonBuilder().setPrettyPrinting().create();\nfinal String prettyJson = gson.toJson(employee);\nSystem.out.println(prettyJson);\n}\npublic static void main(String[] args) {\nnew PrettyPrinting().show();\n}\n}\n</code></pre> <pre><code>{\n\"id\": 32,\n\"name\": \"Marta\",\n\"business\": \"Avon\"\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-11/#array-de-objetos","title":"Array de Objetos","text":"<p>Tenemos una lista de empleados y queremos serializarla en una cadena JSON, en ese caso, la configuraci\u00f3n sigue la misma que todo lo visto anteriormente.</p> Main <pre><code>List&lt;Employee&gt; employeeList = List.of(\npublic class ArrayJSON {\npublic void show() {\nList&lt;Employee&gt; employeeList = List.of(\nnew Employee( 32, \"Marta\", \"Avon\"),\nnew Employee(25, \"Mar\u00eda\", \"Fresh\"),\nnew Employee(38, \"Juan\", \"Pop\")\n);\nfinal Gson gson = new GsonBuilder().setPrettyPrinting().create();\nfinal String json = gson.toJson(employeeList);\nSystem.out.println(json);\n}\npublic static void main(String[] args) {\nnew ArrayJSON().show();\n}\n}\n</code></pre> Salida <pre><code>[\n{\n\"id\": 32,\n\"name\": \"Marta\",\n\"business\": \"Avaon\"\n},\n{\n\"id\": 25,\n\"name\": \"Mar\u00eda\",\n\"business\": \"Fresh\"\n},\n{\n\"id\": 38,\n\"name\": \"Juan\",\n\"business\": \"Pop\"\n}\n]\n</code></pre> <p>Para deserializarlo, ser\u00e1 necesario decirle al Gson el tipo de lista que se va a deserializar, por eso al m\u00e9todo fromGson(), en vez de pasarle la clase, se le pasar\u00e1 un objeto de clase Type.</p> <p>La librer\u00eda Gson contiene la clase TypeToke con la cu\u00e1l podemos indicar el tipo de lista con el que se va a trabajar. <pre><code>public class FromArrayJson {\npublic void show() {\nfinal String json = \"\"\"\n    [\n    {\n        \"id\": 32,\n        \"name\": \"Marta\",\n        \"business\": \"Avon\"\n    },\n    {\n        \"id\": 25,\n        \"name\": \"Mar\u00eda\",\n        \"business\": \"Fresh\"\n    },\n    {\n        \"id\": 38,\n        \"name\": \"Juan\",\n        \"business\": \"Pop\"\n    }\n]\"\"\";\nfinal Gson gson = new Gson();\nfinal Type typeOfEmployeeList = new TypeToken&lt;List&lt;Employee&gt;&gt;(){}.getType();\nfinal List&lt;Employee&gt; employeeList = gson.fromJson(json, typeOfEmployeeList);\nSystem.out.println(employeeList);\n}\npublic static void main(String[] args) {\nnew FromArrayJson().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-11/#genericos","title":"Gen\u00e9ricos","text":"<p>Al igual que las listas, si queremos pasar extraer de JSON una clase gen\u00e9rica, debemos usar la clase TypeToken</p> <pre><code>public class Generics {\npublic void show() {\nfinal String json = \"{\\\"object\\\":{\\\"id\\\":46,\\\"name\\\":\\\"Miguel\\\",\" +\n\"\\\"business\\\":\\\"Autentia\\\"}}\";\nfinal Type typeWrapper = new TypeToken&lt;Wrapper&lt;Employee&gt;&gt;(){}.getType();\nfinal Gson gson = new Gson();\nfinal Wrapper&lt;Employee&gt; wrapperEmployee = gson.fromJson(json, typeWrapper);\nSystem.out.println(wrapperEmployee);\n}\npublic static void main(String[] args) {\nnew Generics().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-11/#fechas","title":"Fechas","text":"<p>Para tratar con fechas ser\u00e1 necesario usar el m\u00e9todo de configuraci\u00f3n setDateFormat().</p> ClaseMain <pre><code>public class VacationRequest {\nprivate final Date init;\nprivate final Date end;\nprivate final int totalDays;\npublic VacationRequest(Date init, Date end, int totalDays) {\nthis.init = init;\nthis.end = end;\nthis.totalDays = totalDays;\n}\n}\n</code></pre> <pre><code>public class VacationRequest {\npublic void show() {\nfinal String STRING_FORMATTER = \"dd/MM/yyyy\";\nfinal String json = \"{\\\"init\\\":\\\"06/08/2012\\\",\\\"end\\\":\\\"10/08/2012\\\",\\\"totalDays\\\":\\\"4\\\"}\";\nfinal Gson gson = new GsonBuilder().setDateFormat(STRING_FORMATTER).create();\nfinal VacationRequest vacationRequest = gson.fromJson(json, VacationRequest.class);\nSystem.out.println(vacationRequest);\n}\npublic static void main(String[] args) {\nnew VacationRequest().show();\n}\n}\n</code></pre> <p>El problema de este m\u00e9todo ocurre en las versiones recientes de Java, no es posible usando este m\u00e9todo en las fechas de Java 8, por lo que ser\u00e1 necesario parsearlo.</p>"},{"location":"bloque_iv/tema_14/page-11/#mapeando-propiedades","title":"Mapeando propiedades","text":"<p>Realizamos la deserializaci\u00f3n del objeto JSON al objeto Java directamente con fromJson, \u00e9sta se realizar\u00e1 propiedad a propiedad entre el objeto JSON y el Java de manera autom\u00e1tica si las propiedades y atributos tienen el mismo nombre. Sin embargo, podemos hacer que esto no sea as\u00ed.</p> <p>Para poder mapear dichas propiedades podemos usar en la clase la anotaci\u00f3n SerializedName.</p> <pre><code>@SerializedName(\"d\")\nprivate final int totalDias;\n</code></pre>"},{"location":"bloque_iv/tema_14/page-11/#objeto-java-con-una-lista","title":"Objeto Java con una lista","text":"<p>Este parece un caso especial, y que habr\u00eda que indicar el tipo de la lista, pero en este caso, no es necesario realizar esto, se har\u00eda exactamente igual:</p> EmployeeVacationsMain <pre><code>public class EmployeeVacations {\nprivate final int id;\nprivate final String name;\nprivate final String business;\nprivate final List&lt;VacationRequest&gt; vacation;\npublic EmployeeVacations(int id, String name, String business, List&lt;VacationRequest&gt; vacation) {\nthis.id = id;\nthis.name = name;\nthis.business = business;\nthis.vacation = vacation;\n}\n@Override\npublic String toString() {\nreturn \"EmployeeVacations{\" +\n\"id=\" + id +\n\", name='\" + name + '\\'' +\n\", business='\" + business + '\\'' +\n\", vacation=\" + vacation +\n'}';\n}\n}\n</code></pre> <pre><code>public class ObjectWithList {\npublic void show() {\nfinal String json = \"\"\"\n{\n    \"id\" : 46,\n    \"name\" : \"Miguel\",\n    \"business\" : \"Autentia\",\n    \"vacation\":[\n        {\n            \"init\" : \"06/08/2012\",\n            \"end\" : \"10/08/2012\",\n            \"d\" : 5\n        },\n        {\n            \"init\" : \"23/08/2012\",\n            \"end\" : \"29/08/2012\",\n            \"d\" : 7\n        }\n    ]\n}\"\"\";\nfinal Gson gson = new GsonBuilder().setDateFormat(\"dd/MM/yyyy\").create();\nfinal EmployeeVacations employee = gson.fromJson(json, EmployeeVacations.class);\nSystem.out.println(employee);\n}\npublic static void main(String[] args) {\nnew ObjectWithList().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-11/#obtener-json-de-un-fichero","title":"Obtener JSON de un fichero","text":"<p>Nuestro objeto Gson no solo acepta un String como representaci\u00f3n JSON del objeto a deserializar. Tambi\u00e9n puede leerlo desde un fichero y realizar la mista tarea. Imaginemos que tenemos un fichero employee.json con el objeto JSON del ejemplo anterior. Lo \u00fanico que tenemos que hacer es pasar a nuestro objeto Gson un Reader (java.io.Reader) con la informaci\u00f3n de ese fichero y Gson har\u00e1 el resto.</p>"},{"location":"bloque_iv/tema_14/page-12/","title":"Ejercicios","text":"Ejercicio 1 <p>Realiza un programa que dado un fichero que se le solicite al usuario, muestre su nombre, si es un ejecutable, si est\u00e1 oculto, la ruta relativa, la ruta absoluta y el tama\u00f1o.</p> Ejercicio 2 <p>Realiza un programa que cree un directorio en el directorio actual, luego cree tres ficheros en dicho directorio donde uno se borre y otro se renombre. Crearle tambi\u00e9n un subdirectorio con un fichero dentro. Despu\u00e9s mostrar la ruta absoluta de ambos directorios y sus contenidos.</p> Ejercicio 3 <p>Realiza un programa que muestre el nombre y tipo (fichero o directorio) de los ficheros y subdirectorios contenidos en un directorio solicitado al usuario. Mostrar tambi\u00e9n el contenido de todos los subdirectorios y si \u00e9stos contienen subdirectorios tambi\u00e9n...y as\u00ed sucesivamente hasta mostrar todo el contenido de dicho directorio.</p> Ejercicio 4 <p>Un filtro sirve para que el m\u00e9todo list devuelva solo aquellos archivos o carpetas que  cumplan una condici\u00f3n (que tengan una extensi\u00f3n determinada, contengan en su nombre una cadena concreta, empiecen por un car\u00e1cter, etc). Un filtro es un objeto de una clase que implementa el interface FilenameFilter. Realiza un programa que muestre los archivos de un directorio que posean una extensi\u00f3n concreta. Tanto la extensi\u00f3n como el directorio se solicita al usuario.</p> Ejercicio 5 <p>Realiza un programa que dadas dos rutas, origen y destino, copie el archivo origen(fichero de texto) en el destino de la siguiente manera:</p> <ul> <li>Si el destino es un directorio, se crear\u00e1 un archivo con el mismo nombre donde se copiar\u00e1 el archivo origen l\u00ednea a l\u00ednea(una l\u00ednea se considera hasta que se encuentre un salto de l\u00ednea). Utilizar Stream de la clase BufferedReader.</li> <li>Si el destino es un archivo, habr\u00e1 varias opciones seg\u00fan un booleano:  <ul> <li>Si el booleano es verdadero y el destino es un archivo existente, se reemplazar\u00e1 su contenido por el del archivo origen copiando car\u00e1cter a car\u00e1cter.</li> <li>Si el booleano es verdadero y el destino es un archivo inexistente, se lanzar\u00e1 una excepci\u00f3n.</li> <li>Si el booleano es falso y el destino es un archivo existente, se reemplazar\u00e1 su contenido por el del archivo origen copiandolo usando un buffer(array) sin desplazamiento de 20 caracteres. En el caso de la \u00faltima escritura, si no se llena el buffer, utilizar el desplazamiento para no dejar basura.</li> <li>Si el booleano es falso y el destino es un archivo inexistente, no se har\u00e1 nada con el archivo y se le dar\u00e1 un mensaje al usuario de que la copia no se puede realizar.</li> </ul> </li> </ul> Ejercicio 6 <p>Realiza un programa que dado un fichero de texto, se copie en tres ficheros diferentes de tal  manera que copie en el primer fichero los primeros 5 caracteres, en el segundo, los 5 siguientes y en el tercero los 5 siguientes, y as\u00ed sucesivamente hasta copiar todo el fichero. Utilizar lectura sin desplazamiento y escrituras con desplazamiento de un buffer de 15 caracteres. Despu\u00e9s, hacer justamente lo contrario. Dados los 3 ficheros, construir uno como el fichero original. Utilizar ahora lecturas con desplazamiento y escritura sin desplazamiento de un buffer de 15 caracteres. Comprobar por c\u00f3digo que ambos son iguales. En el caso de la \u00faltima lectura/escritura, si no se llena el buffer, utilizar el desplazamiento para no dejar basura.</p> Ejercicio 7 <p>Dise\u00f1ar un programa para encriptar y desencriptar los datos de un fichero de texto. Se introduce una cadena por teclado que ser\u00e1 la clave a aplicar para la encriptaci\u00f3n y desencriptaci\u00f3n. A cada car\u00e1cter del fichero de texto original se le sumar\u00e1 una letra de la clave (el c\u00f3digo Unicode), cuando se hayan acabado las letras de la palabra clave y a\u00fan no se hayan acabado los caracteres del fichero, se volver\u00e1 al principio de la cadena para seguir aplicando la encriptaci\u00f3n. Los datos encriptados se escribir\u00e1n en un fichero destino, que ser\u00e1 usado como origen para desencriptar. Para desencriptar se aplicar\u00e1 la f\u00f3rmula a la inversa. Por ejemplo, si el fichero origen contiene \u201cabcdef\u201d y la palabra clave es \u201crosa\u201d, en el fichero destino se escribir\u00e1n los siguientes caracteres: \u201d\u00d3\u00d1\u00d6\u00c5\u00d7\u00d5\u201d.  Es decir, \u00d3 es el resultado de sumar a y r, \u00d1 es el resultado de sumar b y o, y as\u00ed sucesivamente.</p> Ejercicio 8 <p>Queremos hacer una agenda telef\u00f3nica con los siguientes datos:</p> <ul> <li>Nombre de contacto</li> <li>Tel\u00e9fono</li> <li>Direcci\u00f3n</li> <li>C\u00f3digo postal</li> <li>Fecha de Nacimiento</li> <li>Si le debo dinero o no</li> <li>Cantidad de dinero que le debo</li> </ul> <p>Realiza un programa que almacene los datos en un fichero binario. A continuaci\u00f3n, lee el fichero y muestra el contenido contenido por consola. Haz dos versiones, una sin serializaci\u00f3n de objetos y otras con serializaci\u00f3n.</p> <p>Almacena unos cuantos contactos, luego cierra el programa y vuelve a ejecutarlo a\u00f1adiendo unos cuantos contactos m\u00e1s.</p> Ejercicio 9 <p>Haz un programa que lea los contactos del fichero del ejercicio 8 (la versi\u00f3n con serializaci\u00f3n de objetos) y los guarde en un fichero aleatorio. En el fichero aleatorio tienes que a\u00f1adir un identificador a cada contacto antes de los datos. El identificador empieza en 1. A\u00f1\u00e1dele tambi\u00e9n en el fichero a cada contacto un indicador para comprobar si el usuario ha sido eliminado. A continuaci\u00f3n, hazle el siguiente men\u00fa al fichero aleatorio:</p> <ul> <li>Consultar todos los contactos.</li> <li>Consultar un contacto (pedirle al usuario el identificador)</li> <li>A\u00f1adir un contacto<ul> <li>Por el final</li> <li>En la primera posici\u00f3n libre</li> </ul> </li> <li>Eliminar un contacto de forma de forma l\u00f3gica o suave.</li> <li>Modificar si le debo dinero y la cantidad (pedirle al usuario el identificador)</li> <li>Compactaci\u00f3n del fichero</li> </ul> <p>Realiza dos versiones del ejercicio, usando <code>writeChars</code> y otra usando <code>writeUTF</code>.</p> Ejercicio 10 <p>Haz un programa que lea los contactos del fichero binario de la agenda telef\u00f3nica con serializaci\u00f3n de objetos del ejercicio 8 y los escriba en un fichero XML usando la librer\u00eda XStream.</p> Ejercicio 11 <p>Dado el XML del ejercicio anterior, utilizando XStream, p\u00e1salo a un fichero binario sin serializaci\u00f3n de objetos. Compara que sea igual al fichero binario sin serializaci\u00f3n de objetos obtenido en el ejercicio 8. Haz la comparaci\u00f3n en binario.</p> Ejercicio 12 <p>Dado el fichero XML, a\u00f1\u00e1dele los siguientes atributos utilizando un editor de textos:</p> <ul> <li>Prefijo del pa\u00eds en el tel\u00e9fono.</li> <li>Localidad en la direcci\u00f3n</li> <li>Tipo de moneda en el dinero</li> </ul> <p>Proc\u00e9salo con SAX y guarda los datos en un fichero de texto. Guarda cada contacto en una l\u00ednea. Los datos deben estar alineados por columnas.</p> Ejercicio 13 <p>Crea una plantilla XSL para dar una presentaci\u00f3n al fichero XML de la agenda telef\u00f3nica. Realiza un programa para transformarlo en HTML.</p> Ejercicio 14 <p>A partir del fichero XML de la agenda telef\u00f3nica, obtener un fichero JSON utilizando la librer\u00eda GSON.</p> Ejercicio 15 <p>Dado el fichero JSON del ejercicio anterior, obtener un fichero de texto con el siguiente formato:</p> <p> Resultado del ejercicio 15 </p> Ejercicio 16 <p>Dado el fichero JSON anterior, mostrar todos los datos de los contactos cuyo nombre nos indique el usuario. La b\u00fasqueda se har\u00e1 directamente en el fichero JSON. NO utilizar GSON</p> Ejercicio 17 <p>Realiza una funci\u00f3n que te permita buscar en un JSON por un n\u00famero indeterminado de campos.</p>"},{"location":"bloque_iv/tema_14/page-2/","title":"2 Operaciones sobre ficheros","text":""},{"location":"bloque_iv/tema_14/page-2/#introduccion","title":"Introducci\u00f3n","text":"<p>Las operaciones b\u00e1sicas que se realizan sobre cualquier fichero independientemente de la forma de acceso al mismo son las siguientes:</p> <ul> <li>Creaci\u00f3n del fichero. El fichero se crea en el disco con un nombre que despu\u00e9s se debe utilizar para acceder a \u00e9l. La creaci\u00f3n es un proceso que se realiza una vez.</li> <li>Apertura del fichero. Para que un programa pueda operar con un fichero, la primera operaci\u00f3n que tiene que realizar es la apertura del mismo. El programa utilizar\u00e1 alg\u00fan m\u00e9todo para identificar el fichero con el que quiere trabajar, por ejemplo, asignar a una variable el descriptor del fichero.</li> <li>Cierre del fichero. El fichero se debe cerrar cuando el programa no lo vaya a utilizar. Normalmente suele ser la \u00faltima instrucci\u00f3n del programa.</li> <li>Lectura de los datos del fichero. Este proceso consiste en transferir informaci\u00f3n del fichero a la memoria principal, normalmente a trav\u00e9s de alguna variable o variables de nuestro programa en las que se depositar\u00e1n los datos extra\u00eddos del fichero.</li> <li>Escritura de datos en el fichero. En este caso el proceso consiste en transferir informaci\u00f3n de la memoria (por medio de las variables del programa) al fichero.</li> </ul> <p>Normalmente las operaciones t\u00edpicas que se realizan sobre un fichero una vez abierto son las siguientes:</p> <ul> <li>Altas: Consiste en a\u00f1adir un nuevo registro al fichero.</li> <li>Bajas: Consiste en eliminar del fichero un registro ya existente. La eliminaci\u00f3n puede ser l\u00f3gica, cambiando el valor de alg\u00fan campo del registro que usemos para controlar dicha situaci\u00f3n; o f\u00edsica, eliminando f\u00edsicamente el registro del fichero. El borrado f\u00edsico consiste muchas veces en reescribir de nuevo el fichero en otro fichero sin los datos que se desean eliminar y luego renombrarlo al fichero original.</li> <li>Modificaciones: Consiste en cambiar parte del contenido de un registro. Antes de realizar la modificaci\u00f3n ser\u00e1 necesario localizar el registro a modificar dentro del fichero; y una vez localizarlo se realizan los cambios y se reescribe el registro.</li> <li>Consultas: Consiste en buscar en el fichero un registro determinado.</li> </ul>"},{"location":"bloque_iv/tema_14/page-2/#operaciones-sobre-ficheros-secuenciales","title":"Operaciones sobre ficheros secuenciales","text":"<p>En los ficheros secuenciales los registros se insertan en orden cronol\u00f3gico, es decir, un registro se inserta a continuaci\u00f3n del \u00faltimo insertado. Si hay que a\u00f1adir nuevos registros estos se a\u00f1aden a partir del final del fichero.</p> <p>Veamos c\u00f3mo se realizan las operaciones t\u00edpicas:</p> <ul> <li>Consultas: Para consultar un determinado registro es necesario empezar la lectura desde el primer registro, y continuar leyendo secuencialmente hasta localizar el registro buscado. Por ejemplo, si el registro a buscar es el 90 dentro del fichero, ser\u00e1 necesario leer secuencialmente los 89 que le preceden.</li> <li>Altas: En un fichero secuencial las altas se realizan al final del \u00faltimo registro insertado, es decir, solo se permite a\u00f1adir datos al final del fichero.</li> <li>Bajas: Para dar de baja un registro de un fichero es necesario leer todos los registros uno a uno y escribirlos en un fichero auxiliar, salvo el que deseamos dar de baja. Una vez reescritos hemos de borrar el fichero inicial y renombrar el fichero auxiliar d\u00e1ndole el nombre del fichero original.</li> <li>Modificaciones: Consiste en localizar el registro a modificar, efectuar la modificaci\u00f3n y reescribir el fichero inicial en otro fichero auxiliar que incluya el registro modificado. El proceso es similar a las bajas.</li> </ul> <p>Los ficheros secuenciales se usan t\u00edpicamente en aplicaciones de proceso por lotes como, por ejemplo, en el respaldo de los datos o back-up, y son \u00f3ptimos en dichas aplicaciones si se procesan todos los registros. La ventaja de estos ficheros es la r\u00e1pida capacidad de acceso al siguiente registro (son r\u00e1pidos cuando se accede a los registros de forma secuencial) y que aprovechan mejor la utilizaci\u00f3n del espacio. Tambi\u00e9n son sencillos de usar y aplicar.</p> <p>La desventaja es que no se puede acceder directamente a un registro determinado, hay que leer antes todos los anteriores; es decir, no soporta acceso aleatorio. Otra desventaja es el proceso de actualizaci\u00f3n, la mayor\u00eda de los ficheros secuenciales no pueden ser actualizados, habr\u00e1 que reescribirlos totalmente. Para las aplicaciones interactivas que incluyen peticiones o actualizaciones de registros individuales, los ficheros secuenciales ofrecen un rendimiento pobre.</p>"},{"location":"bloque_iv/tema_14/page-2/#operaciones-sobre-los-ficheros-aleatorios","title":"Operaciones sobre los ficheros aleatorios","text":"<p>Las operaciones en ficheros aleatorios son las vistas anteriormente, pero teniendo en cuenta que para acceder a un registro hay que localizar la posici\u00f3n o direcci\u00f3n donde se encuentra. Los ficheros de acceso aleatorio en disco manipulan direcciones relativas en lugar de direcciones absolutas (n\u00famero de pista y n\u00famero de sector en el disco), lo que hace al programa independiente de la direcci\u00f3n absoluta del fichero en el disco.</p> <p>Normalmente para posicionamos en un registro es necesario aplicar una funci\u00f3n de conversi\u00f3n, que usualmente tiene que ver con el tama\u00f1o del registro y con la clave del mismo (la clave es el campo o campos que identifica de forma un\u00edvoca a un registro). Por ejemplo, disponemos de un fichero de empleados con tres campos: identificador, apellido y salario. Usamos el identificador como campo clave del mismo, y le damos el valor 1 para el primer empleado, 2 para el segundo empleado y as\u00ed sucesivamente; entonces, para localizar al empleado con identificador X necesitamos acceder a la posici\u00f3n tama\u00f1o*(X-1) para acceder a los datos de dicho empleado.</p> <p>Puede ocurrir que al aplicar la funci\u00f3n al campo clave nos devuelva una posici\u00f3n ocupada por otro registro, en ese caso, habr\u00eda que buscar una nueva posici\u00f3n libre en el fichero para ubicar dicho registro o utilizar una zona de excedentes dentro del mismo para ir ubicando estos registros.</p> <p>Veamos c\u00f3mo se realizan las operaciones t\u00edpicas:</p> <ul> <li>Consultas: para consultar un determinado registro necesitamos saber su clave, aplicar la funci\u00f3n de conversi\u00f3n a la clave para obtener la direcci\u00f3n y leer el registro ubicado en esa posici\u00f3n. Habr\u00eda que comprobar si el registro buscado est\u00e1 en esta posici\u00f3n si no est\u00e1, se buscar\u00eda en la zona de excedentes.</li> <li>Altas: para insertar un registro necesitamos saber su clave, aplicar la funci\u00f3n de conversi\u00f3n a la clave para obtener la direcci\u00f3n y escribir el registro en la posici\u00f3n devuelta. Si la posici\u00f3n est\u00e1 ocupada por otro registro, en ese caso el registro se insertar\u00eda en la zona de excedentes.</li> <li>Bajas: !as bajas suelen realizarse de forma l\u00f3gica, es decir, se suele utilizar un campo del registro a modo de switch que tenga el valor 1 cuando el registro exista y le damos el valor O para darle de baja, f\u00edsicamente el registro no desaparece del disco. Habr\u00eda que localizar el registro a dar de baja a partir de su campo clave y reescribir en este campo el valor O.</li> <li>Modificaciones: para modificar un registro hay que localizarlo, necesitamos saber su clave para aplicar la funci\u00f3n de conversi\u00f3n y as\u00ed obtener la direcci\u00f3n, modificar los datos que nos interesen y reescribir el registro en esa posici\u00f3n.</li> </ul> <p>Una de las principales ventajas de los ficheros aleatorios es el r\u00e1pido acceso a una posici\u00f3n determinada para leer o escribir un registro. El gran inconveniente es establecer la relaci\u00f3n entre la posici\u00f3n que ocupa el registro y su contenido; ya que a veces al aplicar la funci\u00f3n de conversi\u00f3n para obtener la posici\u00f3n se obtienen posiciones ocupadas y hay que recurrir a la zona de excedentes. Otro inconveniente es que se puede desaprovechar parte del espacio destinado al fichero, ya que se pueden producir huecos (posiciones no ocupadas) entre un registro y otro.</p>"},{"location":"bloque_iv/tema_14/page-3/","title":"3 Ficheros de Textos","text":""},{"location":"bloque_iv/tema_14/page-3/#introduccion","title":"Introducci\u00f3n","text":"<p>En Java podemos utilizar dos tipos de ficheros: de texto o binarios; y el acceso a los mismos se puede realizar de forma secuencial o aleatoria. Los ficheros de texto est\u00e1n compuestos de caracteres legibles, mientras que los binarios pueden almacenar cualquier tipo de dato (int, float, boolean, etc.)</p>"},{"location":"bloque_iv/tema_14/page-3/#ficheros-de-texto","title":"Ficheros de texto","text":"<p>Los ficheros de texto, los que normalmente se generan con un editor, almacenan caracteres alfanum\u00e9ricos en un formato est\u00e1ndar (ASCII, UNICODE, UTF8, etc.) Para trabajar con ellos usaremos las clases <code>FileReader</code> para leer caracteres y <code>FileWriter</code> para escribir los caracteres en el fichero. Cuando trabajamos con ficheros, cada vez que leemos o escribimos en uno debemos hacerlo dentro de un manejador de excepciones try-catch. Al usar la clase FileReader se puede generar la excepci\u00f3n <code>FileNotFoundException</code>, ya que el nombre del fichero no exista o no sea v\u00e1lida, y al usar la clase FileWriter la excepci\u00f3n IOException, ya que el disco est\u00e9 lleno o protegido contra escritura.</p>"},{"location":"bloque_iv/tema_14/page-3/#lectura-de-ficheros-de-texto","title":"Lectura de ficheros de texto","text":"<p>Los m\u00e9todos que proporciona la clase FileReader para la lectura son los siguientes:.</p> M\u00e9todo Funci\u00f3n int read() Lee un car\u00e1cter y lo devuelve int read(char[] buf) Lee hasta buf.length caracteres de datos de una matriz de caracteres (buf). Los caracteres le\u00eddos del fichero se van almacenando en buf. int read(char[] buf, int desplazamiento, int n) Lee hasta n caracteres de datos de la matriz buf comenzando por buf[desplazamiento] y devuelve el n\u00famero le\u00eddo de caracteres. <p>En un programa Java para crear o abrir un fichero se invoca a la clase File y a continuaci\u00f3n se crea el flujo de entrada hacia el fichero con la clase FileReader. Despu\u00e9s se realizan las operaciones de lectura o escritura y cuando terminemos de usarlo lo cerraremos mediante el m\u00e9todo close().</p> <pre><code>public class ReadFile {\npublic void show() throws IOException {\nFile file = new File(\"src/exercises/bloque_iv/tema_14/text_files/ReadFile.java\");\nFileReader reader = new FileReader(file);\nint i;\nwhile ((i = reader.read()) != -1) { //se va leyendo un car\u00e1cter\nSystem.out.println((char) i);\nreader.close();\n}\n}\npublic static void main(String[] args) throws IOException {\nnew ReadFile().show();\n}\n}\n</code></pre> <p>En el ejemplo, la expresi\u00f3n (char) i convierte el valor entero recuperado por el m\u00e9todo read() a car\u00e1cter, es decir, hacemos un cast a char. Se llega al final del fichero cuando el m\u00e9todo read() devuelve -1. Tambi\u00e9n se puede declarar el fichero de la siguiente manera:</p> <pre><code>FileReader reader = new FileReader(\"src/exercises/bloque_iv/tema_14/text_files/ReadFile.java\");\n</code></pre> <p>Si en vez de leer de car\u00e1cter a car\u00e1cter queremos ir leyendo en mayores cantidades, ser\u00e1 necesario crearse un buffer con la cantidad a leer:</p> <pre><code>char b[]= new char[20];\nwhile ((i = fic.read(b)) != -1) System.out.println(b);\n</code></pre>"},{"location":"bloque_iv/tema_14/page-3/#bufferedreader","title":"BufferedReader","text":"<p>FileReader no contiene m\u00e9todos que nos permita leer l\u00edneas completas, pero <code>BufferedReader</code> s\u00ed; dispone del m\u00e9todo <code>readLine()</code> que lee una l\u00ednea del fichero y la devuelve, o devuelve null si no hay nada que leer o se llega al final del fichero.</p> <p>Tambi\u00e9n dispone del m\u00e9todo <code>read()</code> para leer un car\u00e1cter. Para construir un BufferedReader es necesario un FileReader.</p> <pre><code>public class BufferRead {\npublic void show() {\ntry{\nBufferedReader buffer = new BufferedReader(new FileReader(\n\"src/exercises/bloque_iv/tema_14/text_files/ReadFile.java\"));\nString linea;\nwhile((linea = buffer.readLine()) != null){\nSystem.out.println(linea);\n}\nbuffer.close();\n} catch(FileNotFoundException fn){\nSystem.out.println(\"No se encuentra el fichero\");\n} catch(IOException e){\nSystem.out.println(\"Error de E/S\");\n}\n}\npublic static void main(String[] args) {\nnew BufferRead().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-3/#escritura-de-ficheros-de-textos","title":"Escritura de Ficheros de Textos","text":"<p>La clase FileWriter es la que se usa para poder escribir en ficheros de textos. Los m\u00e9todos que proporciona son:</p> M\u00e9todo Funci\u00f3n void write(int c) Escribe un car\u00e1cter. void write(char[] buf) Escribe un array de car\u00e1cteres. void write(char[] buf, int desplazamiento, int n) Escribe n caracteres de datos en la matriz buf comenzando por buf[desplazamiento] void write(String str) Escribe una cadena de caracteres void append(char c) A\u00f1ade un car\u00e1cter a un fichero. <p>Estos m\u00e9todos tambi\u00e9n pueden lanzar la excepci\u00f3n IOException. Igual que antes declaramos el fichero mediante la clase File y a continuaci\u00f3n se crea el flujo de salida hacia el fichero con la clase FileWriter.</p> <pre><code>public class Write {\npublic void show() throws IOException {\nFile fichero = new File(\"file.txt\"); //declarar fichero\nFileWriter fic = new FileWriter(fichero);\nString cadena = \"Esto es una prueba con FileWriter\";\nchar[] cad  = cadena.toCharArray();\nfor (char c : cad) {\nfic.write(c); // se va escribiendo un car\u00e1cter\n}\nfic.append('*'); //se a\u00f1ade al final un *\nfic.close(); //cerrar fichero\n}\npublic static void main(String[] args) {\nnew Write().show();\n}\n}\n</code></pre> <p>Warning</p> <p>Si el fichero a escribir no existe, se crear\u00e1 de forma autom\u00e1tica. Adem\u00e1s, hay que tener en cuenta que si el fichero existe cuando vayamos a escribir caracteres sobre \u00e9l, todo lo que ten\u00eda almacenado anteriormente se borrar\u00e1. Si queremos a\u00f1adir caracteres al final, usaremos la clase FileWriter a\u00f1adiendo un valor booleano, de tal forma que si es true, a\u00f1adir\u00e1 caracteres al final, si es false, lo sobrescribir\u00e1, de la misma forma como si no ponemos dicho valor.</p> <pre><code>FileWrite fic = new FileWriter(fichero, true);\n</code></pre>"},{"location":"bloque_iv/tema_14/page-3/#bufferedwriter","title":"BufferedWriter","text":"<p>La clase <code>BufferedWriter</code> tambi\u00e9n deriva de la clase Writer. Esta clase a\u00f1ade un buffer para realizar una escritura eficiente de caracteres. Para construir un BufferedWriter necesitamos la clase FileWriter. El m\u00e9todo <code>newLine()</code> sirve para escribir un salto de l\u00ednea.</p> <pre><code>public class BufferWrite {\npublic void show() {\ntry{\nBufferedWriter fichero = new BufferedWriter(\nnew FileWriter(\"file.txt\"));\nfor(int i = 1; i &lt; 11; i++){\nfichero.write(\"Fila numero: \" + i); //escribe una l\u00ednea\nfichero.newLine(); // escribe un salto de l\u00ednea\n}\nfichero.close();\n} catch (FileNotFoundException fn){\nSystem.out.println(\"No se encuentra el fichero\");\n} catch (IOException io){\nSystem.out.println(\"Error de E/S\");\n}\n}\npublic static void main(String[] args) {\nnew BufferWrite().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-3/#printwriter","title":"PrintWriter","text":"<p>La clase PrintWriter, que tambi\u00e9n deriva de Writer, posee los m\u00e9todos print(String), println(String), printf(String, Object) para escribir en un fichero.</p> <p>Los tres m\u00e9todos reciben una String y lo escriben en un fichero, pero el segundo m\u00e9todo a\u00f1ade un salto de l\u00ednea y el tercero la cadena formateada.</p> <pre><code>public class PrintWrite {\npublic void show() throws IOException {\nPrintWriter fichero = new PrintWriter(new FileWriter(\"file.txt\"));\nfor(int i = 1; i &lt; 11; i++){\nfichero.println(\"Fila numero: \" + i);\n}\nfichero.close();\n}\npublic static void main(String[] args) throws IOException {\nnew PrintWrite().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-4/","title":"4 Ficheros Binarios","text":""},{"location":"bloque_iv/tema_14/page-4/#introduccion","title":"Introducci\u00f3n","text":"<p>Los ficheros binarios almacenan secuencias de d\u00edgitos binarios que no son legibles directamente por el usuario. Tienen la ventaja de que ocupan menos espacio en disco.</p> <p>En Java, las dos clases que que nos permiten trabajar con ficheros son <code>FileInputStream</code>, para entrada de datos, y <code>FileOutputStream</code>, para salida. Estas dos clases trabajan con flujos de bytes y crean un enlace entre el flujo de bytes y el fichero.</p>"},{"location":"bloque_iv/tema_14/page-4/#fileinputstream","title":"FileInputStream","text":"<p>Los m\u00e9todos que proporciona la clase <code>FileInputStream</code> para lectura son similares a los vistos para la clase FileReader, estos m\u00e9todos devuelven el n\u00famero de bytes le\u00eddos o -1 si se ha llegado al final.</p> M\u00e9todo Funci\u00f3n int read() Lee un byte y lo devuelve int read(byte[] b) Lee hasta b.length bytes de datos de una matriz de bytes int read(byte[] b, int desplazamiento, int n) Lee hasta n bytes de la matriz b comenzando por b[desplazamiento] y devuelve el n\u00famero le\u00eddo de bytes. <pre><code>public class ReadFile {\npublic void show() throws IOException {\nFile file = new File(\"src/exercises/bloque_iv/tema_14/binary_files/ReadFile.java\");\nFileInputStream reader = new FileInputStream(file);\nint i;\nwhile ((i = reader.read()) != -1) { System.out.println((char) i);\nreader.close();\n}\n}\npublic static void main(String[] args) throws IOException {\nnew ReadFile().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-4/#fileoutputstream","title":"FileOutputStream","text":"<p>Los m\u00e9todos que proporciona la clase <code>FileOutputStream</code> para escritura son:</p> M\u00e9todo Funci\u00f3n void write() Escribe un byte void write(byte[] b) Escribe b.length bytes void write(byte[] b, int desplazamiento, int n) Escribe n bytes de la matriz b comenzando por b[desplazamiento]. <p>Para a\u00f1adir bytes al final del fichero usaremos FileOutputStream colocando en el segundo par\u00e1metro del constructor el valor true.</p> <pre><code>public class WriteFile {\npublic void show() throws IOException {\nFile fichero = new File(\"file.txt\"); //declarar fichero\nFileOutputStream fic = new FileOutputStream(fichero);\nString cadena = \"Esto es una prueba con FileWriter\";\nchar[] cad  = cadena.toCharArray();\nfor (char c : cad) {\nfic.write(c); // se va escribiendo un car\u00e1cter\n}\nfic.close(); //cerrar fichero\n}\npublic static void main(String[] args) {\nnew WriteFile().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-4/#lectura-y-escritura-de-datos-primitivos","title":"Lectura y escritura de datos primitivos","text":"<p>Para leer y escribir datos de tipos primitivos: int, float, long, etc usaremos las clases <code>DataInputStream</code> y <code>DataOutputStream</code>. Estas clases definen diversos m\u00e9todos <code>readXXX</code> y <code>writeXXX</code> que son variaciones de los m\u00e9todos read() y write() de la clase base para leer y escribir datos de tipo primitivo. Algunos de los m\u00e9todos se muestran en la siguiente tabla:</p> M\u00c9TODOS PARA LECTURA M\u00c9TODOS PARA ESCRITURA boolean readBoolean(); void writeBoolean(boolean v); byte readByte(); void writeByte(int v); int readUnsignedByte(); void writeBytes(String s); int readUnsignedShort(); void writeShort(int v); short readShort(); void writeChars(String s); char readChar(); void writeChar(int v); int readInt(); void writeInt(int v); long readLong(); void writeLong(long v); float readFloat(); void writeFloat(float v); double readDouble(); void writeDouble(double v); String readUTF(); void writeUTF(String str); <p>Para crear un objeto det tipo DataInputStream o DataOutputStream es necesario pasarle como argumento en el constructor un FileInputStream y un FileOutputStream, respectivamente.</p> <p>El siguiente ejemplo inserta datos en el fichero data_file.dat, los datos los toma de dos arrays, uno contiene los nombres de una serie de personas y el otro sus edades, recorremos los arrays y vamos escribiendo en el fichero el nombre y la edad.</p> <pre><code>public class DataWrite {\npublic void show() throws IOException {\nFile f = new File(\"FilesData.dat\");\nFileOutputStream file = new FileOutputStream(f);\nDataOutputStream writer = new DataOutputStream(file);\nString[] nombres = {\"Ana\", \"Luis Miguel\", \"Alicia\", \"Pedro\", \"Manuel\", \"Andr\u00e9s\", \"Julio\", \"Antonio\", \"Mar\u00eda Jes\u00fas\"};\nint[] edades = {14, 15, 13, 15, 16, 12, 16, 14, 13};\nfor (int i = 0; i &lt; edades.length; i++) {\nwriter.writeUTF(nombres[i]); // escribe nombre\nwriter.writeInt(edades[i]); // escribe edad\n}\nwriter.close(); // cierre\n}\npublic static void main(String[] args) throws IOException {\nnew DataWrite().show();\n}\n}\n</code></pre> <p>En el siguiente ejemplo visualiza los datos grabados anteriormente en el fichero, se deben recuperar en el mismo orden en el que se escribieron, es decir, primero obtenemos el nombre y luego la edad.</p> <pre><code>public class DataRead {\npublic void show() throws IOException {\nFile f = new File(\"FilesData.dat\");\nFileInputStream file = new FileInputStream(f);\nDataInputStream reader = new DataInputStream(file);\nString n;\nint e;\ntry{\nwhile(true){\nn = reader.readUTF(); // recupera el nombre\ne = reader.readInt(); // recupera la edad\nSystem.out.println(\"Nombre: \" + n + \", edad: \" + e );\n}\n} catch(EOFException ignored){}\nreader.close();\n}\npublic static void main(String[] args) throws IOException {\nnew DataRead().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-5/","title":"5 Escritura y Lectura de Objeto","text":""},{"location":"bloque_iv/tema_14/page-5/#introduccion","title":"Introducci\u00f3n","text":"<p>Si se quiere guardar en archivo un objeto con varios atributos, se podr\u00eda guardar en un fichero, guardando cada atributo por separado como un dato primitivo. Pero esto se puede volver engorroso si hay una gran cantidad de objetos.</p> <p>Para ello, Java permite guardar objetos en ficheros binarios, por lo que la clase tiene que implementar la interfaz <code>Serializable</code>.</p>"},{"location":"bloque_iv/tema_14/page-5/#interfaz-serializable","title":"Interfaz Serializable","text":"<p>La interfaz serializable es un interfaz que permite guardar objetos en fichero binarios. Para que un objeto pueda ser escrito en un fichero binario, la clase de dicho objeto debe implementar dicha interfaz.</p> <p>La interfaz dispone de una serie de m\u00e9todos con los que podremos guardar y leer objetos en ficheros binarios. Lo m\u00e1s importantes son:</p> <ul> <li><code>Object readObject()</code>: Se utiliza para leer un objeto del ObjectInputStream. Puede lanzar las excepciones IOException y ClassNotFoundException.</li> <li><code>void writeObject(Object obj)</code>: Se utiliza para escribir el objeto especificado en el objeto ObjectOutputStream. Puede lanzar la excepci\u00f3n IOException.</li> </ul> <p>La serializaci\u00f3n de objetos de Java permite tomar cualquier objeto que implemente la interfaz Serializable y convertido en una secuencia de bits que puede ser posteriormente restaurada para regenerar el objeto original.</p> <p>Para leer y escribir objetos serializables a un stream se utilizan las clases de Java ObjectInputStream y ObjectOutputStream respectivamente.</p> <pre><code>import java.io.Serializable;\npublic class Person implements Serializable{\nprivate String name;\nprivate int age;\npublic Person(String name, int age){\nthis.name = name;\nthis.age = age;\n}\npublic Person(){\nthis.name = null;\n}\npublic void setName(String name){this.name = name;}\npublic void setAge(int age){this.age = age;}\npublic String getName(){return this.name;}\npublic int getAge(){return this.age;}\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-5/#escritura-con-objetos","title":"Escritura con objetos","text":"<p>Para escribir un objeto en un fichero, ser\u00e1 necesario crear un flujo de salida a disco con FileOutputStream y crear el flujo de salida ObjectOutputStream que es el que procesa los datos y se ha de vincular al fichero de FileOutputStream</p> <p>El m\u00e9todo writeObject() escribe los objetos al flujo de salida y los guarda en el fichero en disco.</p> <pre><code>public class WriteObjects {\npublic void show() throws IOException {\nPerson p; // Define la variable persona\nFile f = new File(\"person.dat\"); // Declara el fichero\nFileOutputStream file = new FileOutputStream(f); // Crea el flujo de salida\nObjectOutputStream writer = new ObjectOutputStream(file);\nString[] names = {\"Ana\", \"Luis Miguel\", \"Alicia\", \"Pedro\", \"Manuel\", \"Andr\u00e9s\", \"Julio\", \"Antonio\", \"Mar\u00eda Jes\u00fas\"};\nint[] ages = {14,15,13,15,16,12,16,14,13};\nfor(int i = 0; i &lt; ages.length; i++){\np = new Person(names[i], ages[i]);\nwriter.writeObject(p); // Escribe la persona en el fichero\n}\nwriter.close(); // Cierra el stream de salida\n}\npublic static void main(String[] args) throws IOException {\nnew WriteObjects().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-5/#lectura-con-objetos","title":"Lectura con objetos","text":"<p>Para leer los objetos de un fichero se necesita el flujo de entrada a disco FileInputStream y a continuaci\u00f3n crear el flujo de entrada ObjectInputStream que es el que procesa los datos y se ha de vincular al fichero de FileInputStream</p> <p>El m\u00e9todo readObject() lee los objetos del flujo de entrada, puede lanzar la excepci\u00f3n ClassNotFoundException e IOException, por lo que habr\u00e1 que controlarlas. El proceso de lectura se hace en un bucle while(true), este se encierra en un bloque try-catch ya que la lectura finalizar\u00e1 cuando llegue al final del fichero, por lo que lanzar\u00e1 la excepci\u00f3n EOFException.</p> <pre><code>public class ReadObjects {\npublic void show() throws IOException, ClassNotFoundException {\nPerson p; // Define la variable persona\nFile f = new File(\"files/PersonFile.dat\");\nFileInputStream file = new FileInputStream(f); // Crea el flujo de entrada\nObjectInputStream object = new ObjectInputStream(file); // Conecta el flujo de bytes al flujo de datos\ntry{\nwhile(true){\np = (Person) object.readObject();\nSystem.out.printf(\"Nombre: %s, edad: %d \\n\", p.getName(), p.getAge());\n}\n} catch (EOFException eo){\nSystem.out.println(\"Fin de Lectura\");\n}\nobject.close(); // Cerrar stream de entrada\n}\npublic static void main(String[] args) throws IOException, ClassNotFoundException {\nnew ReadObjects().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-5/#problema-con-los-ficheros-de-objetos","title":"Problema con los ficheros de objetos","text":"<p>Existe un problema con los ficheros de objetos. Al crear un fichero de objetos se crea una cabecera inicial con informaci\u00f3n y a continuaci\u00f3n se a\u00f1aden los objetos. Si el fichero se utiliza de nuevo para a\u00f1adir m\u00e1s registros, se crea una nueva cabecera y se a\u00f1aden los objetos a partir de esa cabecera. El problema surge al leer el fichero cuando en la lectura se encuentra con la segunda cabecera, y aparece la excepci\u00f3n StreamCorruptedException y no se puede leer m\u00e1s objetos.</p> <p>La cabecera se crea cada vez que se pone crea un objeto de la clase ObjectOutputStream(f).</p> <p>Para que no se a\u00f1adan dichas cabeceras se suele redefinir la clase ObjectOutputStream creando una nueva clase que la herede, y dentro de dicha clase se redefine el m\u00e9todo writeStreamHeader(), que se encarga de escribir las cabeceras.</p> <p>De esta forma, si el fichero ya se ha creado se llamar\u00e1 a ese m\u00e9todo de la clase redefinida.</p> <pre><code>public class MyObjectOutputStream extends ObjectOutputStream{\npublic MyObjectOutputStream(OutputStream out) throws IOException{\nsuper(out);\n}\nprotected MyObjectOutputStream() throws IOException, SecurityException{\nsuper();\n}\n@Override\nprotected void writeStreamHeader(){}\n}\n</code></pre> <p>A la hora de usarlo dentro de nuestro programa, a la hora de abrir el fichero para a\u00f1adir nuevos objetos se pregunta si ya existe, en caso afirmativo crea el objeto, y si no existe se crea con la clase ObjectOutputStream</p> <pre><code>File f = new File(\"files/PersonFile.dat\");\npublic class WriteObject {\npublic void show() throws IOException {\nFile f = new File(\"files/PersonFile.dat\");\nObjectOutputStream writer;\nPerson p;\nif(!f.exists()){\nFileOutputStream file = new FileOutputStream(f);\nwriter = new ObjectOutputStream(file);\n} else {\nwriter = new MyObjectOutputStream(new FileOutputStream(f, true));\n}\nString[] names = {\"Ana\", \"Luis Miguel\", \"Alicia\", \"Pedro\", \"Manuel\", \"Andr\u00e9s\",\n\"Julio\", \"Antonio\", \"Mar\u00eda Jes\u00fas\"};\nint[] ages = {14,15,13,15,16,12,16,14,13};\nfor(int i = 0; i &lt; ages.length; i++){\np = new Person(names[i], ages[i]);\nwriter.writeObject(p); // Escribe la persona en el fichero\n}\nwriter.close(); // Cierra el stream de salida\n}\npublic static void main(String[] args) {\nnew WriteObject().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-6/","title":"6 Fichero de Acceso Aleatorio","text":""},{"location":"bloque_iv/tema_14/page-6/#introduccion","title":"Introducci\u00f3n","text":"<p>Hasta ahora, todas las operaciones que se han realizado sobre los ficheros se realizaban de forma secuencial, es decir, se empezaba la lectura en el primer dato (byte, car\u00e1cter u objeto), y seguidamente se le\u00edan los siguientes uno a continuaci\u00f3n del otro hasta terminar el fichero. De la misma forma se hac\u00eda la escritura.</p> <p>Una de las desventajas que supone esto es que si se desea acceder a uno los elementos intermedios o se quiere insertar un elemento en medio del fichero, habr\u00eda que leer o escribir de forma secuencial el fichero hasta la posici\u00f3n de inserci\u00f3n o lectura, y luego realizar la operaci\u00f3n, lo que lo hace bastante trabajoso.</p> <p>Java dispone de la clase <code>RandomAccessFile</code> que dispone de m\u00e9todos para acceder al contenido de un fichero binario de forma aleatoria, es decir, no secuencial; para posicionarnos en una posici\u00f3n concreta del mismo. Esta clase no hereda de InputStream/OutputStream, ya que su comportamiento es totalmente distinto puesto que se puede avanzar y retroceder dentro de un fichero.</p>"},{"location":"bloque_iv/tema_14/page-6/#clase-randomaccessfile","title":"Clase RandomAccessFile","text":"<p>La clase RandomAccessFile es una clase de Java que permite acceder al contenido de un fichero posicion\u00e1ndose en una posici\u00f3n concreta del mismo. Se dice que se accede de forma aleatoria y no secuencial.</p> <p>La clase dispone de dos constructores para crear el fichero de acceso aleatorio (puede lanzar la excepci\u00f3n FileNotFoundException):</p> <ul> <li><code>RandomAccessFile(String nombreFichero, String modoAcceso)</code>: Contiene la cadena del nombre del fichero incluido en el path.</li> <li><code>RandomAccessFile(File file, String modoAcceso)</code>: Contiene el objeto File asociado a un fichero.</li> </ul> <p>El argumento modoAcceso puede tener dos valores:</p> <ul> <li>r \u2192 Abre el fichero en modo de solo lectura, por lo que debe existir. Una operaci\u00f3n de escritura en este fichero lanzar\u00e1 la excepci\u00f3n IOException.</li> <li>rw \u2192 Abre el fichero en modo lectura y escritura. En caso de que no exista dicho fichero, se crea.</li> </ul> <p>Una vez abierto el fichero pueden usarse los m\u00e9todos <code>readXXX</code> y <code>writeXXX</code> de las clases DataInputStream y DataOutputStream.</p> <p>La clase RandomAccessFile maneja un puntero que indica la posici\u00f3n actual en el fichero. Cuando el fichero se crea el puntero al fichero se coloca en 0, apuntando al principio del mismo. Las sucesivas llamadas a los m\u00e9todos read() y write() ajustan el puntero seg\u00fan la cantidad de bytes le\u00eddos o escritos.</p> <p>Los m\u00e9todos m\u00e1s importantes son:</p> M\u00e9todo Funci\u00f3n long getFilePointer() Devuelve la posici\u00f3n actual del puntero del fichero. void seek(long posici\u00f3n) Coloca el puntero del fichero en una posici\u00f3n determinada desde el comienzo del mismo. long length() Devuelve el tama\u00f1o del fichero en bytes. La posici\u00f3n length() marca el final del fichero. int skipBytes(int desplazamiento) Desplaza el puntero desde la posici\u00f3n actual el n\u00famero de bytes indicados en desplazamientos."},{"location":"bloque_iv/tema_14/page-6/#escritura-de-archivos-de-acceso-aleatorio","title":"Escritura de archivos de acceso aleatorio","text":"<p>Este ejemplo inserta datos de empleados en un fichero aleatorio. Los datos a insertar son: apellido, departamento y salario, que se obtienen de arrays que se llenan en el programa, los datos se van introduciendo de forma secuencial por lo que no va a ser necesario usar m\u00e9todo seek(). Por cada empleado tambi\u00e9n se insertar\u00e1 un identificador (mayor que 0) que coincidir\u00e1 con el \u00edndice +1 con el que se recorren los arrays. La longitud del registro de cada empleado es la misma (36 bytes) y los tipos se insertan y su tama\u00f1o en bytes es el siguiente:</p> <ul> <li>Se inserta en primer lugar un entero, que es el identificador, ocupa 4 bytes.</li> <li>A continuaci\u00f3n una cadena de 10 caracteres, es el apellido. Como Java utiliza caracteres UNICODE, cada car\u00e1cter de una cadena de caracteres ocupa 16 bits (2 bytes), por lo tanto, el apellido ocupa 20 bytes.</li> <li>Un tipo entero que es el departamento, ocupa 4 bytes.</li> <li>Un tipo double que es el salario, ocupa 8 bytes.</li> </ul> <p>Tama\u00f1os de otros tipos: short (2 bytes), byte (1 byte), long (8 bytes), boolean (1 byte), float (4 bytes), etc.</p> <p>El fichero se abre en modo \"rw\" para lectura y escritura.</p> <pre><code>public class Write {\npublic void show() throws IOException {\nFile f = new File(\"employee.dat\");\nRandomAccessFile randomFile = new RandomAccessFile(f, \"rw\");\nString[] apellido = { \"FERNANDEZ\", \"GIL\", \"LOPEZ\", \"RAMOS\", \"SEVILLA\", \"CASILLA\", \"REY\"};\nint[] dep = {10,20,10,10,30,30,20};\ndouble[] salario = {1000.45, 2400.60, 3000.0, 1500.56, 2200.0, 1435.87, 2000.0};\nStringBuilder buffer = null;\nint n = apellido.length;\nfor(int i = 0; i &lt; n; i++){ // Se recorre los arrays\nrandomFile.writeInt(i+1); // Uso i+1 para identificar al empleado\nbuffer = new StringBuilder(apellido[i]);\nbuffer.setLength(10); // 10 caracteres para el apellido\nrandomFile.writeChars(buffer.toString()); // Insertar apellido\nrandomFile.writeInt(dep[i]); // Insertar departamento\nrandomFile.writeDouble(salario[i]); // Insertar salario\n}\nrandomFile.close(); // Cierre de fichero\n}\npublic static void main(String[] args) throws IOException {\nnew Write().show();\n}\n}\n</code></pre> <p>Para acceder a un registro espec\u00edfico, podemos usar la siguiente formula siendo n el n\u00famero de registro que quiero acceder.</p> <p>F\u00f3rmula de acceso $$ (n-1)*36 $$</p>"},{"location":"bloque_iv/tema_14/page-6/#lectura-de-ficheros-de-acceso-aleatorio","title":"Lectura de ficheros de acceso aleatorio","text":"<p>Ahora se visualiza todos los registros. El posicionamiento para empezar a recorrer los registros empieza en 0, para recuperar los siguientes registros hay que sumar 36 (tama\u00f1o del registro) a la variable utilizada para el posicionamiento.</p> <pre><code>public class Read {\npublic void show() throws IOException {\nFile f = new File(\"files/EmployerRandom.dat\");\nRandomAccessFile randomFile = new RandomAccessFile(f, \"r\"); // Solo lectura\nint id, dep, posicion;\ndouble salario;\nchar[] apellido = new char[10];\nString apellidos;\nchar aux;\nposicion = 0; //  se sit\u00faa al principio\ndo {\nrandomFile.seek(posicion); // se posiciona en posici\u00f3n\nid = randomFile.readInt(); // se obtiene id del empleado\n// se recorre uno a uno los caracteres del apellido\nfor (int i = 0; i &lt; apellido.length; i++) {\naux = randomFile.readChar();\napellido[i] = aux;\n}\n// convierte a String el array\napellidos = new String(apellido);\ndep = randomFile.readInt(); // obtiene el departamento\nsalario = randomFile.readDouble(); // obtiene el salario\nif (id &gt; 0) {\nSystem.out.printf(\"ID: %s, Apellido: %s, Departamento: %d, Salario: %.2f \\n\",\nid, apellidos.trim(), dep, salario);\n}\n// se posiciona para el siguiente empleado\nposicion = posicion + 36;\n// si se ha recorrido TO DO los bytes se sale del bucle\n} while (randomFile.getFilePointer() != randomFile.length());\nrandomFile.close();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-6/#consultar-datos","title":"Consultar datos","text":"<p>Para consultar datos determinados de un fichero no es necesario recorrer todos los registros del fichero, conociendo su identificador se puede acceder a la posici\u00f3n que ocupa dentro del mismo y as\u00ed obtener sus datos.</p> <p>OJO</p> <p>Es recomendable que si se va a leer/escribir de forma secuencial NO se maneje el puntero</p> <p>Por ejemplo, se supone que se desean obtener los datos del empleado con identificador 5, para calcular la posici\u00f3n se ha de tener en cuenta los bytes que ocupa cada registro, en este caso 36:</p> <pre><code>public class Select {\npublic void show() throws IOException {\nFile f = new File(\"files/EmployerRandom.dat\");\nRandomAccessFile file = new RandomAccessFile(f, \"r\"); // Solo lectura\nint id, dep;\ndouble salario;\nchar[] apellido = new char[10];\nString apellidos;\nchar aux;\nint identificador = 5;\nint position = (identificador - 1) * 36;\nif (position &gt;= file.length()) {\nSystem.out.printf(\"ID: %d, NO EXISTE EMPLEADO...\\n\", identificador);\n} else {\nfile.seek(position); // se posiciona\nid = file.readInt(); // obtengo el id del empleado\n// se recorre uno a uno los caracteres del apellido\nfor (int i = 0; i &lt; apellido.length; i++) {\naux = file.readChar();\napellido[i] = aux;\n}\n// convierto a String el array\napellidos = new String(apellido);\ndep = file.readInt(); // obtiene el departamento\nsalario = file.readDouble(); // obtiene el salario\nif (id &gt; 0) {\nSystem.out.printf(\"ID: %s, Apellido: %s, Departamento: %d, Salario: %.2f \\n\",\nid, apellidos.trim(), dep, salario);\n}\n}\n}\npublic static void main(String[] args) throws IOException {\nnew Select().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-6/#insertar-datos","title":"Insertar datos","text":"<p>Para a\u00f1adir un registro a partir del \u00faltimo insertado, hay que posicionarse al final del fichero.</p> <pre><code>long posicion = file.length();\nfile.seek(posicion);\n</code></pre> <p>Para insertar un nuevo registro se aplica la funci\u00f3n al identificador para calcular la posici\u00f3n.</p> <pre><code>StringBuffer buffer = null; // buffer para almacenar el apellido\nString apellido = \"GONZALEZ\"; // apellido a insertar\ndouble salario = 1230.97; // salario\nint id = 20; // id del empleado\nint dep = 10; // departamento del empleado\nlong posicion = (id -1)*36; // se calcula la posici\u00f3n\nfile.seek(posicion); // se posiciona\nfile.writeInt(id); // escribe la id\nbuffer = new StringBuffer(apellido);\nbuffer.setLength(10); // 10 caracteres para el apellido\nfile.writeChars(buffer.toString()); // inserta el apellido\nfile.writeInt(dep); // inserta el departamento\nfile.writeDouble(salario); //inserta salario\nfile.close(); // cierra el fichero\n</code></pre>"},{"location":"bloque_iv/tema_14/page-6/#modificar-un-registro","title":"Modificar un registro","text":"<p>Para modificar un registro, se accede a la posici\u00f3n y se efect\u00faa las modificaciones. Es necesario que el fichero se abra en modo rw.</p> <pre><code>int registro = 4; // id a modificar\nlong posicion = (registro - 1) * 36; // calculo la posicion\nposicion = posicion + 4 + 20;// sumo el tama\u00f1o de ID + apellido\nfile.seek(posicion); // se posiciona\nfile.writeInt(40); // modifico el departamento\nfile.writeDouble(4000.87); // modifico el salario\n</code></pre>"},{"location":"bloque_iv/tema_14/page-6/#writeutf","title":"writeUTF","text":"<p>El m\u00e9todo <code>writeUTF()</code> me permite escribir una cadena completa en un fichero aleatorio. Tenemos que tener en cuenta que para cadena ocupar\u00e1 siempre 2 bytes de m\u00e1s, ya que tambi\u00e9n almacenada el tama\u00f1o de la cadena.</p> <pre><code>int stringSize = 10;\nint intSize = 2;\nint totalSize = stringSize+intSize+2;\nrandomAccess.writeUTF(String.format(\"%-\"+stringSize\"s\", \"Holaa\"));\n</code></pre> <p>\u00a1Importante!</p> <p>Cuando el tama\u00f1o m\u00e1ximo a escribir, es mayor que el tama\u00f1o real de la cadena, se escribir\u00e1n null. En el ejemplo anterior el tama\u00f1o m\u00e1ximo de cadena es de 10, mientras que la cadena \"Holaa\", es de tama\u00f1o 5, por lo que se escribir\u00eda \"HolaaNULLNULLNULLNULLNULL\", 5 null para poder llegar al m\u00e1ximo, aunque esto puede ser un problema.</p> <p>Si queremos escribir una cadena con writeUTF tendremos que formatear la cadena de tal forma que me escriba espacios en blanco en vez de null, para ello ser\u00eda \u00fatil usar String.format(), con el tama\u00f1o de la cadena, en negativo, para que ponga los espacios a la derecha de la cadena.</p>"},{"location":"bloque_iv/tema_14/page-7/","title":"7 Introducci\u00f3n a los ficheros XML","text":""},{"location":"bloque_iv/tema_14/page-7/#introduccion","title":"Introducci\u00f3n","text":"<p>XML (eXtensible Markup Language) es un metalenguaje, es decir, un lenguaje para la definici\u00f3n de lenguajes de marcado. Este tipo de fichero permite jerarquizar y estructurar la informaci\u00f3n y describir los contenidos dentro del propio documento.</p> <p>Los ficheros XML son ficheros de texto escritos en este lenguaje, donde la informaci\u00f3n est\u00e1 organizada de forma secuencial y en orden jer\u00e1rquico.</p> <p>Existen unas marcas especiales que sirven para delimitar las marcas que dan estructuran al documento (&lt; y &gt;). Cada marca tiene un nombre y puede contener varios atributos.</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Empleados&gt;\n&lt;empleado&gt;\n&lt;iD&gt;1&lt;/iD&gt;\n&lt;apellido&gt;FERNANDEZ&lt;/apellido&gt;\n&lt;departamento&gt;10&lt;/departamento&gt;\n&lt;salario&gt;1000.45&lt;/salario&gt;\n&lt;/empleado&gt;\n&lt;empleado&gt;\n&lt;iD&gt;2&lt;/iD&gt;\n&lt;apellido&gt;GIL&lt;/apellido&gt;\n&lt;departamento&gt;20&lt;/departamento&gt;\n&lt;salario&gt;2400.6&lt;/salario&gt;\n&lt;/empleado&gt;\n&lt;empleado&gt;\n&lt;iD&gt;3&lt;/iD&gt;\n&lt;apellido&gt;LOPEZ&lt;/apellido&gt;\n&lt;departamento&gt;10&lt;/departamento&gt;\n&lt;salario&gt;3000.0&lt;/salario&gt;\n&lt;/empleado&gt;\n&lt;/Empleados&gt;\n</code></pre>"},{"location":"bloque_iv/tema_14/page-7/#acceso-a-ficheros-xml","title":"Acceso a ficheros XML","text":"<p>Los ficheros XML se pueden utilizar para proporcionar datos a una base de datos o para almacenar copias de partes del contenido de una base de datos. Tambi\u00e9n se utilizan para escribir ficheros de configuraci\u00f3n de programas o en el protocolo SOAP (Simple Object Access Protocol) para ejecutar comandos en servidores remotos.</p> <p>Para leer los ficheros XML y acceder a su contenido y estructura se utiliza un procesador de XML o parse. El procesador lee los documentos y proporciona un acceso a su contenido y estructura. Alguno de los procesadores m\u00e1s usados son:</p> <ul> <li>DOM (Modelo de Objetos de Documento). Almacena toda la estructura del documento en memoria en forma del \u00e1rbol con nodos padre, nodos hijos y nodos finales (no tienen descendientes). Este tipo de procesamiento necesita m\u00e1s recursos de memoria y tiempo sobre todo si los ficheros XML a procesar son bastante grandes y complejos.</li> <li>SAX (API Simple para XML). Lee un fichero en forma secuencial y produce una secuencia de eventos (comienzo/fin del documento, de la etiqueta, etc) en funci\u00f3n de los resultados de la lectura. Este tipo de procesamiento pr\u00e1cticamente no consume memoria, pero por otra parte, impide tener una visi\u00f3n global del documento por el que navegar.</li> </ul>"},{"location":"bloque_iv/tema_14/page-8/","title":"8 Serializaci\u00f3n de Objetos a XML","text":""},{"location":"bloque_iv/tema_14/page-8/#introduccion","title":"Introducci\u00f3n","text":"<p>Para serializar de forma sencilla objetos Java a XML y viceversa, se suele usar la librer\u00eda XStream.</p> <p>Para usarla hay que descargarse los JAR desde el sitio web https://x-stream.github.io/</p> <p>Se descomprime y se inserta al proyecto los JAR xstream-X.X.X.jar ubicada dentro de la carpeta lib. Tambi\u00e9n ser\u00e1 necesario el fichero kxml-X.X.X.jar que se localiza en la carpeta lib/xstream.</p> <p>Otra manera de poder usar es a trav\u00e9s de los gestores de paquetes Maven o Gradle, entre otros.</p>"},{"location":"bloque_iv/tema_14/page-8/#escritura-de-ficheros-xml","title":"Escritura de ficheros XML","text":"<p>Para escribir un fichero XML usando la librer\u00eda XStream, deberemos crear una clase que contenga una lista de los datos que queremos insertar, y despu\u00e9s deberemos insertamos dicha lista en un XML usando la funci\u00f3n toXML() que me permitir\u00e1 parsear la lista a XML.</p> <p>En est\u00e1 librer\u00eda encontramos los siguientes m\u00e9todos \u00fatiles:</p> <ul> <li>alias(): Este m\u00e9todo sirve para cambiar el nombre de la etiqueta de la clase en XML. Por ejemplo, si tenemos una clase ListProduct, la etiqueta XML por defecto ser\u00e1 <code>&lt;ListProduct&gt;&lt;/ListProduct&gt;</code>, si queremos cambiar dicha etiqueta usaremos dicho m\u00e9todo con el nombre de la etiqueta y la clase necesaria.</li> <li>aliasField(): Es igual que el m\u00e9todo anterior pero para los atributos de la clase.</li> <li>addImplicitCollection(). Este m\u00e9todo no a\u00f1ade la etiqueta del atributo de la lista que contiene la lista de objetos que queremos parsear.</li> </ul> ListaContactosMain <pre><code>public class ListaContactos {\nprivate final List&lt;Person&gt; list = new ArrayList&lt;&gt;();\npublic ListaContactos() {}\npublic List&lt;Person&gt; getList() {\nreturn list;\n}\npublic void add(Person person){\nlist.add(person);\n}\n}\n</code></pre> <pre><code>public class WriteXML {\npublic void show() {\nXStream xStream = new XStream();\nListaContactos listaContactos = new ListaContactos();\nFile destino = new File(\"person.xml\");\nlistaContactos.add(new Person(\"Mar\u00eda\", 25));\nlistaContactos.add(new Person(\"Juli\u00e1n\", 33));\ntry{\nxStream.alias(\"ListaPersonas\", ListaContactos.class);\nxStream.alias(\"Contactos\", Person.class);\nxStream.addImplicitCollection(ListaContactos.class, \"list\");\nxStream.aliasField(\"NombreContacto\", Person.class, \"name\");\nxStream.aliasField(\"Tel\u00e9fonoContacto\", Person.class, \"age\");\nxStream.toXML(listaContactos, new FileOutputStream(destino));\n} catch (FileNotFoundException e) {\ne.printStackTrace();\n}\n}\npublic static void main(String[] args) {\nnew WriteXML().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-8/#lectura-de-ficheros-xml","title":"Lectura de ficheros XML","text":"<p>Para leer un fichero serializado XML con XStream ser\u00e1 necesario volver a indicarle las al\u00edas, en caso de haberlo hecho.</p> <p>\u00a1Importante!</p> <p>En algunas ocasiones para leer un fichero, ser\u00e1 necesario darle permiso, por lo que usaremos la funci\u00f3n <code>addPermission()</code></p> <pre><code>public class ReadXML {\npublic void show() {\nXStream xStream = new XStream();\nListaContactos listaContactos;\nFile file = new File(\"person.xml\");\ntry {\nxStream.addPermission(AnyTypePermission.ANY);\nxStream.alias(\"ListaPersonas\", ListaContactos.class);\nxStream.alias(\"Contactos\", Person.class);\nxStream.addImplicitCollection(ListaContactos.class, \"list\");\nxStream.aliasField(\"NombreContacto\", Person.class, \"name\");\nxStream.aliasField(\"Tel\u00e9fonoContacto\", Person.class, \"age\");\nlistaContactos = (ListaContactos) xStream.fromXML(new FileInputStream(file));\nfor (Person person : listaContactos.getList()) {\nSystem.out.println(person);\n}\n} catch (FileNotFoundException e) {\ne.printStackTrace();\n}\n}\npublic static void main(String[] args) {\nnew ReadXML().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-9/","title":"9 Acceso a ficheros XML con SAX","text":""},{"location":"bloque_iv/tema_14/page-9/#introduccion","title":"Introducci\u00f3n","text":"<p>SAX (API Simple para XML) es un conjunto de clases e interfaces que ofrecen una herramienta muy \u00fatil para el procesamiento de documentos XML. Permite analizar los documentos de forma secuencial, lo que implica poco consumo de memoria aunque los documentos sean de gran tama\u00f1o. Pero por lo contrario, impide tener una visi\u00f3n global del documento que se va a analizar.</p> <p>SAX es m\u00e1s complejo de programar que DOM, ya que es una API totalmente escrita en Java e incluida dentro del JRE que nos permite crear nuestro propio parser de XML.</p>"},{"location":"bloque_iv/tema_14/page-9/#lectura-de-un-documento-xml","title":"Lectura de un documento XML","text":"<p>La lectura de un documento XML produce eventos que ocasiona la llamada a m\u00e9todos, los eventos son encontrar la etiqueta de inicio y fin del documento (startDocument() y endDocument()), la etiqueta de inicio y fin de un elemento (startElement() y endElement()), los caracteres entre etiquetas (characters()), etc.</p> Documentos XML M\u00e9todos asociados a eventos del documento &lt;?xml version=\"1.o\"?&gt;<code>&lt;listadealumnos&gt;</code> <code>&lt;alumno&gt;</code> <code>&lt;nombre&gt;</code>   Juan <code>&lt;/nombre&gt;</code> <code>&lt;edad&gt;</code>   19 <code>&lt;/edad&gt;</code> <code>&lt;/alumno&gt;</code> <code>&lt;alumno&gt;&lt;br/&gt;</code> <code>&lt;nombre&gt;</code>   Mar\u00eda <code>&lt;/nombre&gt;</code> <code>&lt;edad&gt;</code>   20 <code>&lt;/edad&gt;</code> <code>&lt;/alumno&gt;</code><code>&lt;/listadealumnos&gt;</code> starDocument()starElement() startElement()  startElement()   characters()  endElement()  startElement()   characters()  endElement() endElement()starElement() startElement()  startElement()   characters()  endElement()  startElement()   characters()  endElement() endElement()endDocument() <p>Para leer un documento se crea un objeto procesador de XML, un XMLReader, que puede producir un excepci\u00f3n SAXException que es necesario capturar.</p> <p>A continuaci\u00f3n hay que indicar al XMLReader que objetos poseen los m\u00e9todos que tratar\u00e1n los eventos. Estos objetos ser\u00e1n normalmente implementaciones de las siguientes interfaces:</p> <ul> <li>ContentHandler: Recibe las notificaciones de los eventos que ocurren en el documento.</li> <li>DTDHandler: Recoge eventos relacionados con la DTD.</li> <li>ErrorHandle: Define los m\u00e9todos de tratamientos de errores.</li> <li>EntityResolver: Sus m\u00e9todos se llaman cada vez que se encuentra una referencia a una entidad.</li> <li>DefaultHandler: Clase que provee una implementaci\u00f3n por defecto para todos sus m\u00e9todos, el programador definir\u00e1 los m\u00e9todos que sean utilizados por el programa. Esta clase es de la que se extender\u00e1 para poder crear una clase parser de XML:</li> <li>startDocument(): se produce al comenzar el procesado del documento XML.</li> <li>endDocument(): se produce al finalizar el procesado del documento XML.</li> <li>startElement(): se produce al finalizar el procesado del documento XML.</li> <li>endElement(): se produce al finalizar el procesado de una etiqueta XML.</li> <li>characters(): se produce al encontrar una cadena de texto.</li> </ul> <p>Para indicar al procesador XML los objetos que realizar\u00e1n el tratamiento se utilizan alguno de los siguientes m\u00e9todos incluidos dentro de los objetos XMLReader: setContentHandler(), setDTDHandler(), setEntityResolver() y setErrorHandler(); cada uno trata un tipo de evento asociado a una interfaz determinada. Despu\u00e9s se lee mediante el objeto InputSource.</p> Gestor de ContenidoMain <pre><code>public class GestorDeContenidos extends DefaultHandler {\npublic GestorDeContenidos() { super(); }\n@Override\npublic void startDocument() throws SAXException {\nSystem.out.println(\"Comienzo del Documento XML\");\n}\n@Override\npublic void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {\nSystem.out.printf(\"\\tPrincipio Elemento: %s\\n\", localName);\n}\n@Override\npublic void characters(char[] ch, int start, int length) throws SAXException {\nString car = new String(ch, start, length);\ncar = car.replaceAll(\"[\\t\\n]\", \"\");\nSystem.out.printf(\"\\tCaracteres: %s\\n\", car);\n}\n@Override\npublic void endElement(String uri, String localName, String qName) throws SAXException {\nSystem.out.printf(\"\\tFin Elemento: %s\\n\", localName);\n}\n@Override\npublic void endDocument() throws SAXException {\nSystem.out.println(\"Final del Documento\");\n}\n}\n</code></pre> <pre><code>public class ReadSax {\npublic void show() throws SAXException, IOException, ParserConfigurationException {\nXMLReader procesadorXML = SAXParserFactory.newInstance().newSAXParser().getXMLReader(); //XMLReaderFactory.createXMLReader();\nHandlerContent handler = new HandlerContent();\nprocesadorXML.setContentHandler(handler);\nInputSource fileXML = new InputSource(\"file.xml\");\nprocesadorXML.parse(fileXML);\n}\npublic static void main(String[] args) throws IOException, SAXException, ParserConfigurationException {\nnew ReadSax().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-9/#atributos-xml","title":"Atributos XML","text":"<p>Un fichero XML puede contener atributos, por lo que podemos recorrerlos al recorrer el elemento:</p> <pre><code>public void startElement(String uri, String localName, String name,\nAttributes attributes) throws SAXException {\nint i;\nSystem.out.println(\"\\nProcesando etiqueta...\");\nSystem.out.println(\"\\tNamespace uri: \"+uri);\nSystem.out.println(\"\\tNombre: \"+localName);\nSystem.out.println(\"\\tNombre con prefijo: \"+name);\n//Recorremos los atributos\nSystem.out.println(\"\\tProcesando \"+attributes.getLength()+\" atributos...\");\nfor(i=0;i&lt;attributes.getLength();i++){\nSystem.out.println(\"\\t\\tNombre: \"+attributes.getQName(i));\nSystem.out.println(\"\\t\\tValor: \"+attributes.getValue(i));\n}\n// Tambi\u00e9n podemos obtener los atributos por nombre\nString valorId = attributes.getValue(\"id\");\nif(valorId!=null){\nSystem.out.println(\"\\tId: \"+valorId);\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_14/page-9/#estilos-con-xsl","title":"Estilos con XSL","text":"<p>XSL (Extensible Stylesheet Language) es una recomendaci\u00f3n para expresar hojas de estilo en lenguaje XML. Una hoja de estilo XSL describe el proceso de presentaci\u00f3n a trav\u00e9s de un peque\u00f1o conjunto de elementos XML.</p> <p>Una hoja de estilo XSL describe el proceso de presentaci\u00f3n a trav\u00e9s de un peque\u00f1o conjunto de elementos XML. Esta hoja, puede contener elementos de reglas que representan a las reglas de construcci\u00f3n y elementos de reglas de estilo que representan a las reglas de mezcla de estilos.</p> <pre><code>&lt;?xml version=\"1.0\" encoding='ISO-8859-1'?&gt;\n&lt;xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n&lt;xsl:template match='/'&gt;\n&lt;html&gt;&lt;xsl:apply-templates /&gt;&lt;/html&gt;\n&lt;/xsl:template&gt;\n&lt;xsl:template match='listadealumnos'&gt;\n&lt;head&gt;&lt;title&gt;LISTADO DE ALUMNOS&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt; &lt;h1&gt;LISTA DE ALUMNOS&lt;/h1&gt;\n&lt;table border='1'&gt;\n&lt;tr&gt;&lt;th&gt;Nombre&lt;/th&gt;&lt;th&gt;Edad&lt;/th&gt;&lt;/tr&gt;\n&lt;xsl:apply-templates select='alumno' /&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/xsl:template&gt;\n&lt;xsl:template match='alumno'&gt;\n&lt;tr&gt;&lt;xsl:apply-templates /&gt;&lt;/tr&gt;\n&lt;/xsl:template&gt;\n&lt;xsl:template match='nombre|edad'&gt;\n&lt;td&gt;&lt;xsl:apply-templates /&gt;&lt;/td&gt;\n&lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</code></pre> <p>Para realizar la transformaci\u00f3n se necesita obtener un objeto Transformer que se obtiene creando una instancia de TransformerFactory y aplicando el m\u00e9todo newTransformer(Source source) a la fuente XSL que se va a utilizar para aplicar la transformaci\u00f3n, o lo que es lo mismo, para aplicar la hoja de estilos XSL al fichero XML.</p> <pre><code>public class XLS {\npublic void show() throws IOException {\nString hojaEstilo = \"alum_template.xsl\";\nString datosAlumnos = \"alum.xml\";\nFile pagHTML = new File(\"page.html\");\nFileOutputStream os = new FileOutputStream(pagHTML);\nSource estilos = new StreamSource(hojaEstilo); // fuenteXSL\nSource datos = new StreamSource(datosAlumnos); // fuenteXML\nResult result = new StreamResult(os);\ntry{\nTransformer transformer = TransformerFactory.newInstance().newTransformer(estilos);\ntransformer.transform(datos, result);\n} catch (Exception e){\nSystem.err.println(\"Error: \"+ e);\n}\nos.close();\n}\npublic static void main(String[] args) throws IOException {\nnew XLS().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_15/page-1/","title":"1 Introducci\u00f3n a las bases de datos","text":""},{"location":"bloque_iv/tema_15/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>Una base de datos es una recopilaci\u00f3n organizada de informaci\u00f3n o datos estructurados que normalmente se almacenan de forma electr\u00f3nica en un sistema inform\u00e1tico.</p> <p>Acceso a datos es el proceso de recuperaci\u00f3n o manipulaci\u00f3n de datos extra\u00eddos de un origen de datos local o remoto. Alguno de los or\u00edgenes de datos con los que podemos encontrarnos son: base de datos relacional remota a un servidor o local, una hoja de c\u00e1lculo, un fichero de texto en nuestro ordenador, un servicio de informaci\u00f3n online, etc.</p> <p>Un conector es un software que se encargar\u00e1 de las conexiones desde el programa Java con una base de datos relacional.</p> <p>Existen diferentes tipos de bases de datos:</p> <ul> <li>Relacionales o SQL. Son las m\u00e1s usadas como tecnolog\u00eda de las industrias. Est\u00e1n dise\u00f1adas para almacenar datos estructurados en tablas relacionadas entre s\u00ed. Las tablas est\u00e1n organizadas en filas y columnas y utilizan claves para relacionar los datos entre ellas. Las bases de datos relacionales son muy escalables y ofrecen una gran flexibilidad en cuanto a la forma en que se pueden consultar los datos. Son ideales para aplicaciones que requieren transacciones en tiempo real, como sistemas de gesti\u00f3n de inventario, ventas o finanzas.      Figura 1 - Gestores de Bases de Datos SQL </li> <li>No Relacionales o no SQL. Son una alternativa a las bases de datos relacionales. No utilizan tablas y claves como las bases de datos relacionales, sino que utilizan una variedad de estructuras de datos, como documentos, gr\u00e1ficos y pares clave-valor. Las bases de datos NoSQL son muy escalables y ofrecen un rendimiento excelente para grandes conjuntos de datos no estructurados, como datos de redes sociales o de Internet de las cosas (IoT).      Figura 2 - Gestores de Bases de Datos NpSQL </li> <li>Bases de datos de Objetos. Las bases de datos de objetos son un tipo de base de datos NoSQL que almacenan datos como objetos. Est\u00e1n dise\u00f1adas para trabajar con lenguajes de programaci\u00f3n orientados a objetos, como Java o Python. Las bases de datos de objetos son ideales para aplicaciones que necesitan almacenar y manipular objetos complejos y jer\u00e1rquicos, como aplicaciones de modelado 3D o simulaci\u00f3n de f\u00edsica.</li> <li>Bases de datos de grafos. Las bases de datos de grafos est\u00e1n dise\u00f1adas para trabajar con datos relacionales complejos, como las relaciones sociales o las redes de transporte. Utilizan un modelo de datos basado en nodos y relaciones, lo que les permite almacenar y acceder a datos relacionales complejos con facilidad. Las bases de datos de grafos son ideales para aplicaciones que necesitan an\u00e1lisis complejos y b\u00fasqueda de patrones en grandes conjuntos de datos relacionales.</li> <li>Bases de datos en memoria. Las bases de datos en memoria son una forma de base de datos que almacena datos directamente en la memoria de la computadora, en lugar de en el disco duro. Esto les permite ofrecer un rendimiento excepcionalmente r\u00e1pido para aplicaciones que requieren acceso instant\u00e1neo a los datos, como juegos en l\u00ednea o aplicaciones de trading de alta frecuencia.</li> </ul> <p>Elegir el tipo de base de datos adecuado es una parte importante del proceso de dise\u00f1o de cualquier sistema de informaci\u00f3n. Cada tipo de base de datos tiene sus propias fortalezas y debilidades, y elegir el tipo adecuado para la tarea en cuesti\u00f3n puede marcar una gran diferencia en la eficiencia y eficacia del sistema. Al elegir la base de datos adecuada, es importante tener en cuenta los requisitos del sistema en cuanto al rendimiento, escalabilidad, estructura de datos y seguridad, as\u00ed como la experiencia del usuario.</p>"},{"location":"bloque_iv/tema_15/page-1/#2-el-desfase-objecto-relacional","title":"2. El desfase Objecto-Relacional","text":"<p>Actualmente las bases de datos orientadas a objetos est\u00e1n ganando cada vez  m\u00e1s aceptaci\u00f3n frente a las bases de datos relacionales, ya que solucionan las necesidades de aplicaciones m\u00e1s sofisticadas para dise\u00f1o y fabricaci\u00f3n.</p> <p>Las bases de datos relacionales no est\u00e1n dise\u00f1adas para almacenar objetos, ya que existe un desfase entre las construcciones t\u00edpicas que proporciona el modelo de datos relacional y las proporcionadas por los ambientes de programaci\u00f3n basados en objetos, es decir, al guardar los datos de un programa bajo el enfoque orientado a objetos se incrementa la complejidad del programa, dando lugar a m\u00e1s c\u00f3digo y m\u00e1s esfuerzo de programaci\u00f3n debido a la diferencia de esquemas entre los elementos a almacenar (objetos) y las caracter\u00edsticas del repositorio de la base de datos (Tablas)</p> <p>Info</p> <p>Para saber m\u00e1s sobre las bases de datos relacionales visite la siguiente p\u00e1gina:"},{"location":"bloque_iv/tema_15/page-2/","title":"2 Bases de datos embebidas","text":""},{"location":"bloque_iv/tema_15/page-2/#introduccion","title":"Introducci\u00f3n","text":"<p>Las bases de datos como Oracle o MySQL sirven para almacenar grandes cantidades de informaci\u00f3n. Si por el contrario, no es necesario almacenar tanta informaci\u00f3n se puede utilizar una base de datos embebida donde el motor est\u00e9 incrustado a la aplicaci\u00f3n, y termina cuando se cierra la aplicaci\u00f3n.</p> <p>Estas bases de datos son dependientes de su aplicaci\u00f3n y que no pueden iniciar un servicio independiente de esta en la maquina. Estos gestores de bases de datos, suplen las necesidades que los grandes no pueden cumplir, como la portabilidad, rapidez, rendimiento, integridad referencial, la concurrencia, escasa memoria, entre otras</p>"},{"location":"bloque_iv/tema_15/page-2/#2-sqlite","title":"2 SQLite","text":"<p>SQLite es un sistema gestor de base de datos multiplataforma escrito en C que proporciona un motor muy ligero. Las bases de datos se guardan en forma de ficheros por lo que es f\u00e1cil trasladar la base de datos con la aplicaci\u00f3n que la usa. Cuanta con una utilidad que nos permitir\u00e1 ejecutar comandos SQL en modo consola. Es un proyecto de dominio p\u00fablico.</p> <p>La biblioteca implementa la mayor parte del est\u00e1ndar SQL-92 incluyendo transacciones de base de datos at\u00f3micas, consistencias de base de datos, aislamiento y durabilidad, triggers (o disipadores) y la mayor parte de la consultas complejas.</p> <p>SQLite se puede utilizar desde programas en C/C++, PHP, Visual Basic, Perl, Delphi, Java, etc. Para poder instalarlo accedemos a su p\u00e1gina http://sqlite.org/download.html</p> <p>Alguno de los comandos de consola interesantes de SQLite son:</p> <ul> <li>.help para ayudas.</li> <li>.tables para mostrar las tablas creadas.</li> <li>.quit para salir de la terminal de sql.</li> </ul>"},{"location":"bloque_iv/tema_15/page-3/","title":"3 Protocolos de Acceso a Bases de Datos","text":""},{"location":"bloque_iv/tema_15/page-3/#introduccion","title":"Introducci\u00f3n","text":"<p>En tecnolog\u00edas de base de datos podemos encontrarnos con dos normas de conexi\u00f3n a una base de datos SQL:</p> <ul> <li>ODBC (Open Database Connectivity) define una API (Application Program Interface) que pueden usar las aplicaciones para abrir una conexi\u00f3n con una base de datos, enviar consultas, actualizaciones y obtener los resultados. Las aplicaciones pueden usar esta API para conectarse a cualquier servidor de base de datos compatible con ODBC. Est\u00e1 escrito en C.</li> <li>JDBC (Java Database Connectivity) define una API que pueden usar los programas Java para conectarse a los servidores de bases de datos relacionales.</li> </ul>"},{"location":"bloque_iv/tema_15/page-3/#acceso-a-datos-mediante-jdbc","title":"Acceso a Datos mediante JDBC","text":"<p>JDBC proporciona una librer\u00eda est\u00e1ndar para acceder a fuentes de datos principalmente orientados a bases de datos relacionales que usan SQL. No solo provee una interfaz sino que tambi\u00e9n define una arquitectura est\u00e1ndar, para que los fabricantes puedan crear los drivers que permitan a los aplicaciones Java el acceso a los datos. JDBC dispone de una interfaz distinta para cada base de datos, es lo que llamamos driver (controlador o conector). Esto permite que las llamadas a los m\u00e9todos Java de las clases JDBC se correspondan con el API de la base de datos.</p> <p>JDBC consta de un conjunto de clases e interfaces que nos permite escribir aplicaciones Java para gestionar las siguientes tareas con una base de datos relacional:</p> <ul> <li>Conectarse a la base de datos</li> <li>Enviar consultas e instrucciones de actualizaci\u00f3n a la base de datos</li> <li>Recuperar y procesar los resultados recibidos de la base de datos en respuesta a las consultas</li> </ul>"},{"location":"bloque_iv/tema_15/page-3/#dos-modelos-de-acceso-a-bases-de-datos","title":"Dos modelos de acceso a bases de datos","text":"<p>La API JDBC es compatible con los modelos tanto de dos como de tres capas para el acceso a la base de datos.</p> <p>En el modelo de dos capas, un applet o aplicaci\u00f3n Java hablan directamente con la base de datos, esto requiere un driver JDBC residiendo en el mismo lugar que la aplicaci\u00f3n. Desde el programa Java se env\u00edan las sentencias SQL al sistema gestor de Base de datos  para que las procese y los resultados se env\u00edan de vuelta al programa. La base de datos puede encontrarse en otra m\u00e1quina diferente a la de la aplicaci\u00f3n y las solicitudes se hacen a trav\u00e9s de la red. El driver ser\u00e1 encargado de manejar la comunicaci\u00f3n a trav\u00e9s de la red de forma transparente al programa.</p> <p> Figura 3 - Modelo de dos capas</p> <p>En el modelo de tres capas, los comandos se env\u00edan a una capa intermedia que se encargar\u00e1 de enviar los comandos SQL a la base de datos y de recoger los resultados de la ejecuci\u00f3n de las sentencias. En este caso los drivers no tienen que residir en la m\u00e1quina cliente.</p> <p> Figura 4 - Modelo de tres capas</p> <p>Un servidor de aplicaciones es una implementaci\u00f3n de la especificaci\u00f3n J2EE (Java 2 Platform Enterprise Edition). J2EE es un entorno centrado en Java para desarrollar, construir y desplegar aplicaciones empresariales multicapa basadas en la Web. Existen diversas implementaciones, cada una con sus propias caracter\u00edsticas. Algunas de ellas son las siguientes: BEA WebLogic, IBM WebSphere, Oracle IAS, Borland AppServer, etc</p>"},{"location":"bloque_iv/tema_15/page-3/#tipos-de-drivers","title":"Tipos de drivers","text":"<p>Existen 4 tipos de drivers JDBC:</p> <ul> <li>Tipo 1. JDBC-ODBC Bridge Permite el acceso a bases de datos JDBC mediante un driver ODBC. Convierte las llamadas al API de JDBC en llamadas ODBC. Exige la instalaci\u00f3n y configuraci\u00f3n de ODBC en la m\u00e1quina cliente.</li> <li>Tipo 2. Native Controlador escrito parcialmente en Java y en c\u00f3digo nativo de la base de datos. Traduce las llamadas al API de JDBC Java en llamadas propias del motor de base de datos. Exige instalar en la m\u00e1quina cliente c\u00f3digo binario propio del cliente de base de datos y del sistema operativo.</li> <li>Tipo 3. Network Controlador de Java puro que utiliza un protocolo de red (HTTP) para comunicarse con el servidor de base de datos. Traduce las llamadas al API de JDBC Java en llamadas propias del protocolo de red independiente de la base de datos y a continuaci\u00f3n son traducidas por un software intermedio (Middleware) al protocolo usado por el motor de base de datos. El driver JDBC no comunica directamente con la base de datos, comunica con el software intermedio, que a su vez comunica con la base de datos. Son \u00fatiles para aplicaciones que necesitan interactuar con diferentes formatos de bases de datos, ya que usan el mismo driver JDBC sin importar la base de datos espec\u00edfica. No exige la instalaci\u00f3n en cliente.</li> <li>Tipo 4. Thin Controlador de Java puro con protocolo nativa. Traduce las llamadas al API de JDBC Java en llamadas propias del protocolo de red usado por el motor de base de datos. No exige instalaci\u00f3n en el cliente</li> </ul> <p>Warning</p> <p>Los tipos 3 y 4 son la mejor forma para acceder a bases de datos JDBC. Los tipos 1 y 2 se usan normalmente cuando no queda otro remedio, porque el \u00fanico sistema de acceso final al gestor de bases de datos es ODBC. En la mayor\u00eda de los casos la opci\u00f3n m\u00e1s adecuada ser\u00e1 el tipo 4.</p>"},{"location":"bloque_iv/tema_15/page-4/","title":"4 Funcionamiento del JDBC","text":""},{"location":"bloque_iv/tema_15/page-4/#introduccion","title":"Introducci\u00f3n","text":"<p>JDBC define carias interfaces que permite realizar operaciones con base de datos. Est\u00e1n definidas en el paquete java.sql.</p> Clase e Interfaz Descripci\u00f3n Driver Permite conectarse a una base de datos: cada gestor de base de datos requiere un driver distinto. DriverManager Permite gestionar todos los drivers instalados en el sistema. DriverPropertyInfo Proporciona diversa informaci\u00f3n acerca de un driver Connection Representa una conexi\u00f3n con una base de datos, Una aplicaci\u00f3n puede tener m\u00e1s de una conexi\u00f3n. DatabaseMetadata Proporciona informaci\u00f3n acerca de una base de datos, como las tablas que contiene... Statement Permite ejecutar sentencias SQL sin par\u00e1metros PreparedStatement Permite ejecutar sentencias SQL con par\u00e1metros de entrada CallableStatement Permite ejecutar sentencias SQL con par\u00e1metros de entrada y salida, como llamadas a procedimientos almacenados. ResultSet Contiene las filas resultantes de ejecutar una orden SELECT. ResultSetMetadata Permite obtener informaci\u00f3n sobre un ResultSet, como el n\u00famero de columnas, su nombres, etc <p>El trabajo con JDBC comienza con la clase DriverManager que es la encargada de establecer las conexiones con los or\u00edgenes de datos a trav\u00e9s de los drivers JDBC. El funcionamiento es el siguiente:</p> <ol> <li>Importar las clases necesarias</li> <li>Cargar el drivers JDBC</li> <li>Identificar el origen de datos</li> <li>Crear un objeto Connection</li> <li>Crear un objeto Statement</li> <li>Ejecutar una consulta con el objeto Statement</li> <li>Recuperar los datos del objeto ResultSet</li> <li>Liberar el objeto ResultSet</li> <li>Liberar el objeto Statement</li> <li>Liberar el objeto Connection</li> </ol> <p> Figura 4 - Funcionamiento de JDBC</p>"},{"location":"bloque_iv/tema_15/page-4/#conexion-a-una-bd","title":"Conexi\u00f3n a una BD","text":"<p>En una base de datos MySQL tenemos una base de datos llamada empresa y un usuario llamado usuario con la misma contrase\u00f1a. El usuario tendr\u00e1 todos los privilegios sobre esta base de datos.</p> <pre><code>create database empleados;\nCREATE USER 'usuario'@'localhost' identified by 'usuario';\nGRANT ALL PRIVILEGES ON empleados.* TO 'usuario'@localhost;\nFLUSH PRIVILEGES;\n</code></pre> <p>Tenemos las siguientes tablas: empleados y departamentos con los siguientes datos:</p> <pre><code>CREATE TABLE departamentos(\ndept_no TINYINT(2) NOT NULL PRIMARY KEY,\ndnombre VARCHAR(15),\nloc VARCHAR(15)\n) ENGINE=InnoDB;\nCREATE TABLE empleados(\nemp_no SMALLINT(4) NOT NULL PRIMARY KEY,\napellido VARCHAR(10),\noficio VARCHAR(10),\ndir SMALLINT,\nfecha_alt DATE,\nsalario FLOAT(6,2),\ncomision FLOAT(6,2),\ndept_no TINYINT(2) NOT NULL,\nCONSTRAINT FK_DEP FOREIGN KEY (dept_no) REFERENCES departamentos(dept_no)\n) ENGINE=InnoDB;\nINSERT INTO departamentos VALUES (10, 'CONTABILIDAD', 'SEVILLA'),\n(20, 'INVESTIGACI\u00d3N', 'BARCELONA'),\n(30, 'VENTAS', 'BARCELONA'),\n(40, 'PRODUCCI\u00d3N', 'BILBAO');\nINSERT INTO empleados VALUES\n(1, 'GARC\u00cdA', 'ANALISTA', 2, '2018-06-06', 2500, 1500, 10),\n(2, 'MORENO', 'CONTABLE', 2, '2019-12-12', 1500, 100, 10),\n(3, 'GOMEZ', 'DEPENDIENTE', 2, '2010-01-12', 1500, 500, 30)\n</code></pre> <p>En el siguiente programa mostramos el contenido de la tabla departamentos:</p> <pre><code> package com.irudev.examples.bloque_iv.tema_15;\nimport java.sql.*;\npublic class ShowDepartamentos {\npublic void show() {\ntry{\n// Carga el driver\nClass.forName(\"com.mysql.cj.jdbc.Driver\");\n// Establece conexi\u00f3n con la BD\nConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost/empleados\", \"acdat\", \"acdat\");\n// Se prepara la consulta\nStatement sentence = connection.createStatement();\nString sql = \"SELECT * FROM departamentos\";\nResultSet result = sentence.executeQuery(sql);\n// Recorremos el resultado para visualizar cada filza\n// Se hace un bucle mientras haya registros y se van mostrando\nwhile(result.next()){\nSystem.out.printf(\"%d, %s, %s\\n\", result.getInt(1), result.getString(2), result.getString(3));\n}\nresult.close(); // Cerrar ResultSet\nsentence.close(); // Cerrar Statement\nconnection.close(); // Cerrar conexi\u00f3n\n} catch (ClassNotFoundException | SQLException e) {\nSystem.out.println(\"Something went wrong\");\n}\n}\npublic static void main(String[] args) {\nnew ShowDepartamentos().show();\n}\n}\n</code></pre> <p>En el m\u00e9todo getConnection() de la clase DriverManager le pasamos como argumentos la URL de conexi\u00f3n a base de datos. Siendo en general: <code>jdbc:mysql://&lt;host&gt;:&lt;puerto&gt;/&lt;bd&gt;</code></p> <p>Donde:</p> <ul> <li>jdbc:mysql indica el driver JDBC para MySQL</li> <li>host indica el nombre del servidor d\u00f3nde se encuentra la base de datos. Se puede poner una IP el nombre de la m\u00e1quina en la que est\u00e1 la red. Si indicamos localhost indicamos que el servidor se encuentra en la misma m\u00e1quina d\u00f3nde se ejecuta el programa Java.</li> <li>puerto es el puerto predeterminado para las bases de datos MySQL, por defecto es 3306</li> <li>bd nombre de la base de datos a la que nos vamos a conectar y que debe existir en MySQL.</li> </ul> <p>Se indica el nombre de usuario y la contrase\u00f1a, como segundo y tercer par\u00e1metro respectivamente.</p>"},{"location":"bloque_iv/tema_15/page-4/#obtener-resultados-de-una-consulta","title":"Obtener resultados de una consulta","text":"<p>Para obtener resultados de una consulta ser\u00e1 necesario llamar al m\u00e9todo <code>executeQuery()</code> de la clase <code>Statement</code>. Este m\u00e9todo retornar\u00e1 un <code>ResultSet</code> que contiene internamente un puntero que apunta al primer registro de la lista.</p> <p>ResultSet dispone varios m\u00e9todos para mover dicho puntero:</p> M\u00e9todo Definici\u00f3n boolean next() Mueve el puntero del objeto ResultSet una fila hacia adelante a partir de la posici\u00f3n actual. Devuelve true si el puntero se posiciona correctamente y false si no hay registros en el ResultSet boolean first() Mueve el puntero al primer registro de la lista. Devuelve true si se posiciona correctamente y false si no hay registros. boolean last() Mueve el puntero al \u00faltimo registro anterior de la lista. Devuelve true si se posiciona correctamente y false si no hay registros. boolean previous() Mueve el puntero al registro anterior de la lista. Devuelve true si el puntero se posiciona correctamente y false si se coloca antes del primer registro. void beforeFirst() Mueve el puntero del objeto justo antes del primer registro int getRow() Devuelve el n\u00famero de registro actual."},{"location":"bloque_iv/tema_15/page-5/","title":"5 Ejecuci\u00f3n de sentencias de descripci\u00f3n de datos","text":""},{"location":"bloque_iv/tema_15/page-5/#introduccion","title":"Introducci\u00f3n","text":"<p>Normalmente cuando desarrollamos una aplicaci\u00f3n JDBC conocemos la estructura de las tablas y datos que estamos manejando, es decir, conocemos, las columnas que tienen y c\u00f3mo est\u00e1n relacionadas entre s\u00ed. Es posible que no conozcamos la estructura de las tablas de una base de datos, en este caso la informaci\u00f3n de la base de datos se puede obtener a trav\u00e9s de los meta objetos, que no son m\u00e1s que objetos que proporcionan informaci\u00f3n sobre las bases de datos.</p> <p>La interfaz <code>DatabaseMetaData</code> proporciona informaci\u00f3n sobre la base de datos a trav\u00e9s de m\u00faltiples m\u00e9todos de los cu\u00e1les es posible obtener gran cantidad de informaci\u00f3n. Muchos de estos m\u00e9todos devuelven un <code>ResultSet</code>, algunos son:</p> M\u00e9todo Descripci\u00f3n getTables() Proporciona informaci\u00f3n sobre las tablas y vistas de la base de datos getColumns() Devuelve informaci\u00f3n sobre las columnas de una tabla getPrimaryKeys() Proporciona informaci\u00f3n sobre las columnas que forman la clave primaria de una tabla getExportedKeys() Devuelve informaci\u00f3n sobre las claves ajenas que utilizan la clave primaria de una tabla getImportedKeys() Devuelve informaci\u00f3n sobre las claves ajenas existentes en una tabla getProcedures() Devuelve informaci\u00f3n sobre los procedimientos almacenados <p>El siguiente ejemplo conecta con la base de datos MySQL de nombre empleados y muestra informaci\u00f3n sobre el producto de base de datos, el driver, la URL para acceder a la base de datos, el nombre de usuario y las tablas y vistas del esquema actual. Un esquema se corresponde generalmente con un usuario de la base de datos. El M\u00e9todo <code>getMetaData()</code> de la interfaz <code>Connection</code> devuelve un objeto <code>DataBaseMetaData</code> que contiene informaci\u00f3n sobre la base de datos representada por el objeto <code>Connection</code>:</p> <pre><code>public class MetaData {\npublic void show() {\ntry{\nClass.forName(\"com.mysql.cj.jdbc.Driver\");\n// Se establece conexi\u00f3n con la bases de datos\nConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost/empleados\",\n\"acdat\", \"acdat\");\nDatabaseMetaData dbmd = connection.getMetaData();\nResultSet result = null;\nString name   = dbmd.getDatabaseProductName();\nString driver = dbmd.getDriverName();\nString url    = dbmd.getURL();\nString user   = dbmd.getUserName();\nSystem.out.println(\"INFORMACI\u00d3N SOBRE LA BASE DE DATOS\");\nSystem.out.println(\"==================================\");\nSystem.out.printf(\"Nombre : %s\\n\", name);\nSystem.out.printf(\"Driver : %s\\n\", driver);\nSystem.out.printf(\"URL    : %s\\n\", url);\nSystem.out.printf(\"User   : %s\\n\", user);\n// Obtener informaci\u00f3n de las tablas y vistas que hay\nresult = dbmd.getTables(null, \"empleados\", null,\nnull);\nwhile(result.next()){\nString catalogue = result.getString(1);\nString schema = result.getString(2);\nString table = result.getString(3);\nString type = result.getString(4);\nSystem.out.printf(\"%s - Catalogo: %s, Esquema: %s, Nombre: %s\\n\",\ntype, catalogue, schema, table);\n}\nconnection.close();\n} catch (ClassNotFoundException | SQLException e) {\ne.printStackTrace();\n}\n}\npublic static void main(String[] args) {\nnew MetaData().show();\n}\n}\n</code></pre> <p>Los m\u00e9todos usados son los siguientes:</p> M\u00e9todo Descripci\u00f3n int getColumnCount() Devuelve el n\u00famero de columnas devueltas por la consulta String getColumnName(int indice) Devuelve el nombre de la columna cuya posici\u00f3n se indica en indice String getColumnTypeName(int indice) Devuelve el nombre del tipo de dato especifico del sistema de bases de datos que contiene la columna indicada en indice int isNullable(int indice) Devuelve 0 si la columna no puede contener valores nulos. int getColumnDisplaySize(int indice) Devuelve el m\u00e1ximo ancho de caracteres de la columna indicada en indice"},{"location":"bloque_iv/tema_15/page-5/#ejecucion-de-sentencias-de-manipulacion-de-datos","title":"Ejecuci\u00f3n de sentencias de manipulaci\u00f3n de datos","text":"<p>En ejemplos anteriores vimos como se pod\u00edan ejecutar sentencias SQL mediante la interfaz  <code>Statement</code> (sentencia), esta proporciona m\u00e9todos para ejecutar sentencias SQL y obtener los  resultados. Como <code>Statement</code> es una interfaz no se pueden crear objetos directamente, en su lugar  los objetos se obtienen con una llamada al m\u00e9todo <code>createStatement()</code> de un objeto <code>Connection</code>  v\u00e1lido: <code>Statement sentencia = connection.createStatement();</code></p> <p>Al crearse un objeto <code>Statement</code> se crea un espacio de trabajo para crear consultas SQL,  ejecutarlas y para recibir los resultados de las consultas. Una vez creado el objeto se pueden usar  los siguientes m\u00e9todos:  </p> <ul> <li><code>ResultSet executeQuery(String)</code>: se utiliza para sentencias SQL que recuperan datos  de un \u00fanico objeto <code>ResultSet</code>, se utiliza para las sentencias SELECT.  </li> <li><code>int executeUpdate(String)</code>: se utiliza para sentencias que no devuelven un <code>ResultSet</code> como son las sentencias de manipulaci\u00f3n de datos (DML): INSERT, UPDATE y  DELETE; y las sentencias de definici\u00f3n de datos (DDL): CREATE, DROP y ALTER.  El m\u00e9todo devuelve un entero indicando el n\u00famero de filas que se vieron afectadas y  en el caso de las sentencias DDL devuelve el valor 0.</li> <li><code>boolean execute(String)</code>: se puede utilizar para ejecutar cualquier sentencia SQL. Tanto para las que devuelven un <code>ResultSet</code> (por ejemplo, SELECT), como para las  que devuelven el n\u00famero de filas afectadas (por ejemplo, INSERT, UPDATE,  DELETE) y para las de definici\u00f3n de datos como por ejemplo, CREATE. El m\u00e9todo  devuelve true si devuelve un <code>ResultSet</code> (para recuperar las filas ser\u00e1 necesario llamar  al m\u00e9todo <code>getResultSet()</code>) y false si se trata de un recuento de actualizaciones o no  hay resultados; en este caso se usar\u00e1 el m\u00e9todo <code>getUpdateCount()</code> para recuperar el  valor devuelto.</li> </ul> <p>En este ejemplo <code>execute()</code> ejecuta una sentencia SELECT, devuelve true; por tanto, es necesario recuperar las filas devueltas usando el m\u00e9todo  <code>getResultSet()</code></p> <pre><code>public class Execute {\npublic void show() {\ntry{\nClass.forName(\"com.mysql.cj.jdbc.Driver\");\nConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost/empleados\",\n\"acdat\", \"acdat\");\nString sql = \"SELECT * FROM departamentos\";\nStatement sentence = connection.createStatement();\nboolean valor = sentence.execute(sql);\nif(valor){\nResultSet result = sentence.getResultSet();\nwhile(result.next()){\nSystem.out.printf(\"%d, %s, %s\\n\",\nresult.getInt(1),\nresult.getString(2),\nresult.getString(3));\n}\nresult.close();\n} else {\nint f = sentence.getUpdateCount();\nSystem.out.printf(\"Filas afectadas: %d\\n\", f);\n}\n} catch (ClassNotFoundException | SQLException e) {\nSystem.out.println(\"Something went wrong\");\n}\n}\npublic static void main(String[] args) {\nnew Execute().show();\n}\n}\n</code></pre> <p>A trav\u00e9s de un objeto <code>ResultSet</code> se puede acceder al valor de cualquier columna de la fila actual por nombre o por posici\u00f3n, tambi\u00e9n se puede obtener informaci\u00f3n sobre las columnas como el n\u00famero de columnas o su tipo. Algunos son:</p> M\u00e9todo Tipo de Java devuelto getString(int index)getString(String nombre) String getBoolean(int index)getBoolean(String nombre) boolean getByte(int index)getByte(String nombre) byte getShort(int index)getShort(String nombre) short getInt(int index)getInt(String nombre) int getLong(int index)getLong(String nombre) long getFloat(int index)getFloat(String nombre) float getDouble(int index)getDouble(String nombre) double getBytes(int index)getBytes(String nombre) byte[] getDate(int index)getDate(String nombre) Date getTime(int index)getTime(String nombre) Time getTimestamp(int index)getTimestamp(String nombre) Timestamp <p>Ahora, en los siguientes ejemplo, mostraremos una sentencia de inserci\u00f3n, actualizaci\u00f3n y eliminaci\u00f3n.</p> INSERTUPDATEDELETE <pre><code>public class Insert {\npublic void show() {\ntry {\nClass.forName(\"com.mysql.cj.jdbc.Driver\");\nConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost/empleados\",\n\"acdat\", \"acdat\");\nint dep = 50;\nString dName = \"RRHH\";\nString loc = \"BILBAO\";\nString sql = String.format(\"INSERT INTO departamentos VALUES (%d, '%s', '%s')\",\ndep, dName, loc);\nSystem.out.println(sql);\nStatement sentence = connection.createStatement();\nint rows = sentence.executeUpdate(sql);\nSystem.out.printf(\"Filas afectadas: %d\\n\", rows);\nsentence.close();\nconnection.close();\n} catch (ClassNotFoundException | SQLException e) {\nSystem.out.println(\"Something went wrong\");\n}\n}\npublic static void main(String[] args) {\nnew Insert().show();\n}\n}\n</code></pre> <pre><code>public class Update {\npublic void show() {\ntry {\nClass.forName(\"com.mysql.cj.jdbc.Driver\");\nConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost/empleados\",\n\"acdat\", \"acdat\");\nint dep = 50;\ndouble update = 10;\nString sql = String.format(\"UPDATE empleados SET salario = salario + %.0f WHERE dept_no = %d\", update, dep);\nSystem.out.println(sql);\nStatement sentence = connection.createStatement();\nint rows = sentence.executeUpdate(sql);\nSystem.out.printf(\"Filas afectadas: %d\\n\", rows);\nsentence.close();\nconnection.close();\n} catch (ClassNotFoundException | SQLException e) {\nSystem.out.println(\"Something went wrong\");\n}\n}\npublic static void main(String[] args) {\nnew Update().show();\n}\n}\n</code></pre> <pre><code>public class Delete {\npublic void show() {\ntry {\nClass.forName(\"com.mysql.cj.jdbc.Driver\");\nConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost/empleados\",\n\"acdat\", \"acdat\");\nint dep = 50;\nString sql = String.format(\"DELETE FROM departamentos WHERE dept_no = %d\", dep);\nSystem.out.println(sql);\nStatement sentence = connection.createStatement();\nint rows = sentence.executeUpdate(sql);\nSystem.out.printf(\"Filas afectadas: %d\\n\", rows);\nsentence.close();\nconnection.close();\n} catch (ClassNotFoundException | SQLException e) {\nSystem.out.println(\"Something went wrong\");\n}\n}\npublic static void main(String[] args) {\nnew Delete().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_15/page-5/#ejecucion-de-scripts","title":"Ejecuci\u00f3n de Scripts","text":"<p>Algunas bases de datos admiten la ejecuci\u00f3n de varias sentencias DDL y/o DML en una misa cadena. Por ejemplo, m\u00faltiples insert. Para ello es necesario indicarlo en la conexi\u00f3n a\u00f1adiendo la propiedad allowMultiQueries=true, tal que as\u00ed:</p> <pre><code>Connection connection = DriverManager.getConnection(\"jdbc:mysql://localhost/empleados?allowMultiQueries=true\", \"usuario\", \"usuario\");\n</code></pre> <p>A continuaci\u00f3n, vamos a insertar el siguiente script a la base de datos a trav\u00e9s de un programa java:</p> SQLJava <pre><code>SET FOREIGN_KEY_CHECKS = 0;\ndrop table if EXISTS notas;\ndrop table if EXISTS alumnos;\ndrop table if EXISTS asignaturas;\nCREATE TABLE IF NOT EXISTS ALUMNOS(\nDNI VARCHAR(10) NOT NULL primary key,\nAPENOM VARCHAR(30),\nDIREC VARCHAR(15),\nPOBLA VARCHAR(15),\nTELEF VARCHAR(10)\n);\nCREATE TABLE IF NOT EXISTS ASIGNATURAS(\nCOD int NOT NULL primary key,\nNOMBRE VARCHAR(25)\n);\nCREATE TABLE IF NOT EXISTS NOTAS(\nDNI VARCHAR(10) NOT NULL,\nCOD int NOT NULL,\nNOTA int,\nprimary key(DNI, COD)\n);\n/*Create Foreign Keys*/\nALTER TABLE NOTAS\nADD CONSTRAINT FKNOTASALUM FOREIGN KEY (DNI)\nREFERENCES ALUMNOS (DNI) ON UPDATE CASCADE ON DELETE RESTRICT;\nALTER TABLE NOTAS\nADD CONSTRAINT FKNOTASASIG FOREIGN KEY (COD)\nREFERENCES ASIGNATURAS (COD) ON UPDATE CASCADE ON DELETE RESTRICT;\n/*Rellenar Datos*/\nINSERT IGNORE INTO ASIGNATURAS VALUES (1, 'Prog. Leng. Estr.');\nINSERT IGNORE INTO ASIGNATURAS VALUES (2, 'Sist. Inform\u00e1ticos');\nINSERT IGNORE INTO ASIGNATURAS VALUES (3, 'An\u00e1lisis');\nINSERT IGNORE INTO ASIGNATURAS VALUES (4, 'FOL');\nINSERT IGNORE INTO ASIGNATURAS VALUES (5, 'RET');\nINSERT IGNORE INTO ALUMNOS VALUES('12344345', 'Alcalde Garc\u00eda, Elena', 'C/Las Matas, 24', 'Madrid', '917766545');\nINSERT IGNORE INTO ALUMNOS VALUES('4448242', 'Cerrato Vela, Luis', 'C/Minas 28 - 3A', 'Madrid', '916566545');\nINSERT IGNORE INTO ALUMNOS VALUES('56882942', 'D\u00edaz Fern\u00e1ndez, Mar\u00eda', 'C/Luis Vives 25', 'M\u00f3stoles', '915577545');\nINSERT IGNORE INTO NOTAS VALUES('12344345', 1, 6);\nINSERT IGNORE INTO NOTAS VALUES('12344345', 2, 5);\nINSERT IGNORE INTO NOTAS VALUES('4448242', 4, 6);\nINSERT IGNORE INTO NOTAS VALUES('4448242', 5, 8);\nINSERT IGNORE INTO NOTAS VALUES('56882945', 1, 8);\nINSERT IGNORE INTO NOTAS VALUES('56882942', 3, 7);\nCOMMIT;\n</code></pre> <pre><code>public class ImportScript {\npublic void show() {\nFile scriptFile = new File(\"src/main/resources/sql.sql\");\nSystem.out.println(\"\\n\\nFichero de consulta: \" + scriptFile.getName());\nSystem.out.println(\"Convirtiendo el fichero a cadena...\");\ntry (BufferedReader entrada = new BufferedReader(new FileReader(scriptFile));\nConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost/empleados?allowMultiQueries=true\",\n\"acdat\", \"acdat\");\nStatement sentence = connection.createStatement()\n){\nStringBuilder stringBuilder;\nString line;\nstringBuilder = new StringBuilder();\nString jump = System.getProperty(\"line.separator\");\nwhile ((line = entrada.readLine()) != null) {\nstringBuilder.append(line);\nstringBuilder.append(jump);\n}\nString consulta = stringBuilder.toString();\nSystem.out.println(consulta);\nint res = sentence.executeUpdate(consulta);\nSystem.out.println(\"Script creado con \u00e9xito, res = \" + res);\n} catch (FileNotFoundException e) {\nSystem.err.println(\"ERROR NO HAY FILE: \" + e.getMessage());\n} catch (IOException e) {\nSystem.err.println(\"I/O Error\");\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\npublic static void main(String[] args) {\nnew ImportScript().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_15/page-5/#sentencias-preparadas","title":"Sentencias preparadas","text":"<p>La interfaz <code>PreparedStatement</code> nos va a permitir construir una cadena de caracteres SQL con placeholder o marcadores de posici\u00f3n, que representar\u00e1n los datos que ser\u00e1n asignados m\u00e1s tarde, el placeholder se representa mediante el s\u00edmbolo interrogaci\u00f3n (<code>?</code>)</p> <p>Cada placeholder tiene un \u00edndice, el 1 corresponder\u00eda al primero que se encuentre en la cadena,el 2 al segundo y as\u00ed sucesivamente. Solo se pueden utilizar para ocupar el sitio de los datos en la cadena SQL, no se pueden usar para representar una columna o un nombre de una tabla, por ejemplo <code>select * from ?</code> ser\u00eda incorrecto.</p> <p>Antes de ejecutar un <code>PreparedStatement</code> es necesario asignar los datos para que cuando se ejecute la base de datos asigne variables de uni\u00f3n con estos datos y ejecute la orden SQL. Los objetos <code>PreparedStatement</code> se pueden preparar o pre-compilar una sola vez y ejecutar las veces que queramos asignado diferentes valores a los marcadores de posici\u00f3n, en cambio en los objetos Statement, la sentencia SQL se suministra en el momento de ejecutar.</p> <p>Los m\u00e9todos de <code>PreparedStatement</code> tienen los mismos nombres que en <code>Statement</code>: <code>executeQuery()</code>, <code>executeUpdate()</code>, <code>execute()</code> pero no necesita enviar la cadena de caracteres con la orden SQL en la llamada ya que lo hace el m\u00e9todo <code>prepareStatement(String)</code>.</p> <p>Para asignar valor a cada uno de los marcadores de posici\u00f3n se utilizan los m\u00e9todos <code>setXXX(int index, Tipo valor)</code>.</p> M\u00e9todo Tipo SQL void setString(int index, String valor) VARCHAR void setBoolean(int index, boolean valor) BIT void setByte(int index, byte valor) TINYINT void setShort(int index, short valor) SMALLINT void setInt(int index, int valor) INTEGER void setLong(int index, long valor) BIGINT void setFloat(int index, float valor) FLOAT void setDouble(int index, double valor) DOUBLE void setBytes(int index, byte[] valor) VARBINARY void setDate(int index, Date valor) DATE void setTime(int index, Time valor) TIME <p>Para asignar valores NULL a un par\u00e1metro se usa el m\u00e9todo <code>setNull()</code> el formato es: <code>void setNull(int index, int tipoSQL)</code>, siento <code>tipoSQL</code> una constante definida en la librer\u00eda <code>java.sql.Types</code>, que son: ARRAY, BIGINT, BIT, BLOB, BOOLEAN, CHAR, CLOB, DATALINK, DATE, DECIMAL, DISTINCT, DOUBLE, FLOAT, INTEGER, JAVA_OBJECT, LONGVARCHAR, LONGVARBINARY, LONGVARCHAR, NCHAR, NCLOB, NULL, NUMERIC, NVARCHAR, OTHER, REAL, REF, REF_CURSOR, ROWID, SMALLINT, SQLXML, STRUCT, TIME, TIME_WITH_TIMEZONE, TIMESTAMP, TIMESTAMP_WITH_TIMEZONE, TINYINT, VARBINARY, VARCHAR</p> <pre><code>public class PlaceholderQueries {\npublic void show() throws ClassNotFoundException {\nClass.forName(\"com.mysql.cj.jdbc.Driver\");\nString sql = \"INSERT INTO departamentos VALUES (?,?,?)\";\ntry (\nConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost/empleados\",\n\"acdat\", \"acdat\");\nPreparedStatement sentence = connection.prepareStatement(sql);\n) {\nsentence.setInt(1, 60);\nsentence.setString(2, \"DERECHO\");\nsentence.setString(3, \"C/ Bilbao\");\nint rows = sentence.executeUpdate();\nSystem.out.println(\"Filas: \" + rows);\n} catch (SQLException ex) {\nSystem.out.println(\"Something went wrong\");\n}\n}\npublic static void main(String[] args) throws ClassNotFoundException {\nnew PlaceholderQueries().show();\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_15/page-5/#ejecucion-de-procedimientos","title":"Ejecuci\u00f3n de Procedimientos","text":"<p>Los procedimientos almacenados en la base de datos consisten en un conjunto de sentencias SQL y del lenguaje procedural utilizado por el sistema gestor de base de datos que se pueden llamar por su nombre para llevar a cabo alguna tarea en la base de datos. Pueden definirse con par\u00e1metros de entrada (IN), de salida (OUT), de entrada/salida (INOUT) o sin ning\u00fan par\u00e1metro. Tambi\u00e9n pueden devolver un valor, en este caso se tratar\u00eda de una funci\u00f3n.</p> <pre><code>delimiter //\nCREATE PROCEDURE subida_sal(d INT, subida INT)\nBEGIN\nUPDATE empleados SET salario = salario + subida WHERE dept_no = d;\nCOMMIT;\nEND;\n//\ndelimiter //\nCREATE FUNCTION nombre_dep(d int) RETURNS VARCHAR(15)\nBEGIN\nDECLARE nom VARCHAR(15);\nSET nom = 'INEXISTENTE';\nSELECT dnombre INTO nom FROM departamentos\nWHERE dept_no=d;\nRETURN nom;\nEND;\n//\nDELIMITER //\nCREATE PROCEDURE datos_dep(d int, OUT nom VARCHAR(15), OUT locali VARCHAR(15))\nBEGIN\nSET locali = 'INEXISTENTE';\nSET nom = 'INEXISTENTE';\nSELECT nombre, loc INTO nom, locali FROM departamentos\nWHERE dept_no=d;\nEND;\n//\n</code></pre> <p>La interfaz <code>CallableStatement</code> permite que se pueda llamar desde Java a los procedimientos almacenados. Para crear un objeto se llama al m\u00e9todo <code>prepareCall(String)</code> del objeto <code>Connection</code>. En el String se declara la llamada al procedimiento o funci\u00f3n, tiene dos formatos, uno incluye el par\u00e1metro de resultado (usado para las funciones) y el otro no: <code>{? = call &lt;nombre_procedure&gt;[(&lt;arg1\\&gt;, &lt;arg2\\&gt;, ...)]}</code> o <code>{call &lt;nombre_procedure&gt;[(&lt;arg1\\&gt;, &lt;arg2\\&gt;, ...)]}</code></p> <p>Si los procedimientos y funciones incluyen par\u00e1metros de entrada y salida es necesario indicarlos en forma de marcadores de posici\u00f3n. El par\u00e1metro de resultado y los par\u00e1metros de salida deben ser registrados antes de realizar la llamada.</p> <pre><code>String sql = \"{call subida_sal (?, ?)}\";\nCallableStatement llamada = connection.prepareCall(sql);\n</code></pre> <p>Hay 4 formas de declarar las llamadas a los procedimientos y funciones que dependen del uso u omisi\u00f3n de par\u00e1metros, y de la devoluci\u00f3n de valores. Son las siguientes:</p> <ul> <li>{call procedimiento}: para un procedimiento almacenado sin par\u00e1metros.</li> <li>{ ? = call funci\u00f3n}: para una funci\u00f3n almacenada que devuelve un valor no recibe par\u00e1metros, el valor se recibe a la izquierda del igual y es el primer par\u00e1metro de resultado.</li> <li>{ call procedimientos(?, ?,...)}: para un procedimiento almacenado que recibe par\u00e1metros</li> <li>{? = call funci\u00f3n (?,?,...)}: para una funci\u00f3n almacenada que devuelve un valor (primer par\u00e1metro) y recibe varios par\u00e1metros.</li> </ul> <pre><code>public class ProcedureCall {\npublic void show() {\ntry{\nClass.forName(\"com.mysql.cj.jdbc.Driver\");\nConnection connection = DriverManager.getConnection(\"jdbc:mysql://localhost/empleados\",\n\"root\", \"\");\nint dep = 10;\nfloat subida = 100;\n//construir orden de llamada\nString sql = \"{call subida_sal(?,?)}\";\n// Preparar la llamada\nCallableStatement call = connection.prepareCall(sql);\n// Dar valor a los argumentos\ncall.setInt(1, dep);\ncall.setFloat(2, subida);\n// Ejecutar procedimiento\ncall.executeUpdate();\nSystem.out.println(\"Subida realizada...\");\ncall.close();\nconnection.close();\n} catch (ClassNotFoundException | SQLException cn){\nSystem.out.println(\"Something went wrong\");\ncn.printStackTrace();\n}\n}\npublic static void main(String[] args) {\nnew ProcedureCall().show();\n}\n}\n</code></pre> <p>En MySQL al ejecutarlo puede que se muestre el siguiente error: <code>java.sql.SQLException: User does not have access to metadata required to determinate stored procedure parameter types...</code>, si el usuario no tiene permisos para ejecutar procedimientos. En este caso debemos darle privilegio SELECT sobre la tabla de sistema mysql.proc que contiene la informaci\u00f3n sobre todos los procedimientos: <code>GRANT SELECT ON mysql.proc TO 'usuario'@'localhost'</code></p> <p>Cuando un procedimiento o funci\u00f3n tiene par\u00e1metros de salida (OUT) deben ser registrados antes de que la llamada tenga lugar, si no se registra se producir\u00e1 un error. El m\u00e9todo que se utilizar\u00e1 es registerOutParameter(int index, int tipoSQL), siendo el primer par\u00e1metro es la posici\u00f3n y el siguiente es una constante definida en la clase java.sql.Types.</p> <p>Una vez ejecutada la llamada al procedimiento, los valores de los par\u00e1metros OUT e INOUT se obtienen con los m\u00e9todos getXXX() similares a los utilizados para obtener los valores de las columnas en un ResultSet.</p> <pre><code>try{\nClass.forName(driver);\nConnection connection = DriverManager.getConnection(url);\nint dep = 10;\nString sql = \"{? = call nombre_dep (?, ?)}\";\nCallableStatement call = connection.prepareCall(sql);\ncall.registerOutParameter(1, Types.VARCHAR); // registro de parametro OUT\ncall.setInt(2, dep);\ncall.registerOutParameter(3, Types.VARCHAR);\ncall.executeUpdate();\nSystem.out.printf(\"Nombre Dep: %s, Localidad: %s\\n\", call.getString(1), call.getString(3));\ncall.close();\nconnection.close();\n} catch (ClassNotFoundException cn){\ncn.printStackTrece();\n} catch (SQLException e) {\ne.printStackTrace();\n}\n</code></pre>"},{"location":"bloque_iv/tema_15/page-6/","title":"Ejercicios","text":"<p>Queremos hacer una aplicaci\u00f3n para organizar los horarios de los ciclos formativos del IES Saladillo. En dicho instituto, la oferta educativa es la siguiente:</p> <ol> <li>Ciclo formativo de grado medio: Sistemas microinform\u00e1ticos y redes.</li> <li>Ciclo formativo de grado superior: Desarrollo de aplicaciones multiplataforma.</li> </ol> Grado medioGrado superior <p>En el ciclo de grado medio, las asignaturas est\u00e1n organizadas en dos cursos con la siguiente distribuci\u00f3n horaria semanal:</p> Asignaturas 1\u00ba Curso Horas Totales Horas semanales Montaje y mantenimiento de equipos 224 7 y 3 de desdoble Sistemas operativos monopuesto 160 5 Aplicaciones ofim\u00e1ticas 256 8 y 4 de desdoble Redes locales 224 7 y 3 de desdoble Formaci\u00f3n y orientaci\u00f3n laboral 96 3 TOTALES 960 30 Asignaturas 2\u00ba Curso Horas Totales Horas semanales Sistemas operativos en red 147 7 Seguridad inform\u00e1tica 105 5 Servicios en red 147 7 Aplicaciones web 84 4 Empresa e iniciativa emprendedora 84 4 Horas de libre configuraci\u00f3n 63 3 TOTALES 630 30 <p>En el ciclo de grado superior, las asignaturas est\u00e1n organizadas en dos cursos con la siguiente distribuci\u00f3n horario semanal:</p> Asignaturas 1\u00ba Curso Horas Totales Horas semanales Sistemas inform\u00e1ticos 192 6 y 3 de desdoble Bases de datos 192 6 y 3 de desdoble Programaci\u00f3n 256 8 y 6 de desdoble Entorno de desarrollo 96 3 Lenguaje de marcas y sistemas de gesti\u00f3n de informaci\u00f3n 96 3 Formaci\u00f3n y orientaci\u00f3n laboral 96 3 TOTALES 960 30 Asignaturas 2\u00ba Curso Horas Totales Horas semanales Acceso a datos 105 5 Desarrollo de interfaces 147 7 Programaci\u00f3n de servicios y procesos 63 3 Programaci\u00f3n multimedia y dispositivos m\u00f3viles 84 4 Empresa e iniciativa emprendedora 84 4 Horas de libre configuraci\u00f3n 63 3 TOTALES 630 30 <p>Los tramos horarios son de lunes a viernes los siguientes: 8:15-9:15, 9:15-10:15, 10:15-11:15, 11:45-12:45, 12:45-13:45 y 13:45-14:45. En cada tramo horario, una asignatura es impartida en un curso por un profesor o ambos en el caso de los desdobles.</p> <p>Existen asignaturas que se imparten en cursos diferentes, como por ejemplo, Horas de libre configuraci\u00f3n y Formaci\u00f3n y orientaci\u00f3n laboral. Dichas asignaturas se deben considerar la misma asignatura pero que se imparte en m\u00e1s de un curso.</p> <p>El curso se identificar\u00e1 con la oferta educativa. Adem\u00e1s, tiene asociado un profesor que es el tutor de dicho curso.</p> <p>De la oferta educativa, se necesita conocer una descripci\u00f3n de la misma y la fecha en que la ley correspondiente entr\u00f3 en vigor.</p> <p>De los profesores, interesa conocer su nombre y apellidos y la fecha de alta en el instituto.</p> <p>Para dicha aplicaci\u00f3n, necesitamos que la base de datos almacene los horarios de todos los cursos junto con los profesores que imparten cada asignatura en cada tramo horario.</p> Ejercicio 1 <p>Dado la informaci\u00f3n anterior:</p> <ol> <li>Realiza el esquema entidad/relaci\u00f3n.</li> <li>Realiza el paso a tablas seg\u00fan el modelo relacional.</li> <li>Comprobar que est\u00e1 normalizado hasta terce forma norma (3FN) utilizando las dependencias funcionales.</li> <li>Crear la base de datos en un gestor de base de datos. Para ello, dise\u00f1ar un script con:<ul> <li>Creaci\u00f3n de las tablas con las claves primarias y ajenas. En el caso de las claves ajenas, controlar el caso de actualizaci\u00f3n o borrado de la clave a la que hacen referencia.</li> <li>Introducci\u00f3n de datos reales con el horario de este curso.</li> </ul> </li> </ol> Ejercicio 2 <p>Realiza un programa que ejecute el script de la BD Horario, creada en el ejercicio anterior.</p> Ejercicio 3 <p>Mostrar informaci\u00f3n sobre las columnas de una tabla, sus claves primarias, las claves ajenas existentes en la tabla y las claves ajenas que utilizan la clave primaria de esta tabla.</p> Ejercicio 4 <p>Insertar la siguiente oferta educativa</p> <p>cod_OE: FPB nombre: FP b\u00e1sica inform\u00e1tica y comunicaciones descripci\u00f3n: La formaci\u00f3n profesional b\u00e1sica de inform\u00e1tica y comunicaciones tiene una duraci\u00f3n de 2000 horas repartidas entre dos cursos acad\u00e9micos incluyendo 240 horas de Formaci\u00f3n en centros de trabajo (FCT) en empresas del Sector</p> Ejercicio 5 <p>A\u00f1ade el primer curso de la FP B\u00e1sica con la tutora Lola Enr\u00edquez Lara y las siguientes asignaturas. Utiliza sentencias preparadas.</p> Asignaturas 1\u00ba Curso Horas semanales Horas Totales Profesor Operaciones auxiliares para la configuraci\u00f3n y la explotaci\u00f3n 7 245 Antonio D\u00edaz Sanamar\u00eda Montaje y mantenimiento de sistemas y componentes inform\u00e1ticos 9 315 Lola Enr\u00edquez Lara Ejercicio 6 <p>Aumenta las horas semanales y las horas totales en un 10% de aquellas asignaturas de la FP B\u00e1sica que empiecen por M.</p> Ejercicio 7 <p>La FP B\u00e1sica desaparece del IES Saladillo. Borra de la base de datos todo lo que sea de dicha oferta educativa.</p> Ejercicio 8 <p>Mostrar todos los datos de los profesores ordenados por:</p> <ul> <li>Apellidos en orden ascendente</li> <li>Fecha de alta en el instituto en orden descendente</li> </ul> Ejercicio 9 <p>Mostrar todos los datos de los profesores y de los cursos en los que son tutores. Si no son tutores, que aparezca \"Este profesor no es tutor\" en lugar de los datos del curso.</p> Ejercicio 10 <p>Del resultado de la consulta del ejercicio anterior, muestra el nombre de la columna, el tipo de dato de dicha columna, si puede contener valores nulos y el m\u00e1ximo de caracteres de la columna.</p> Ejercicio 11 <p>Mostrar de todos los cursos el nombre de la oferta educativa, la clave primaria del curso y el nombre del tutor.</p> Ejercicio 12 <p>Mostrar cu\u00e1ndo se imparte una asignatura en un curso concreto.</p> Ejercicio 13 <p>Mostrar qu\u00e9 asignaturas imparte un profesor.</p> Ejercicio 14 <p>Mostrar el horario de un curso en modo tabla. A\u00f1adir un asterisco en aquellos tramos horarios donde haya un desdoble.</p> Ejercicio 15 <p>Mostrar d\u00f3nde se encuentra un profesor en un tramo horario concreto.</p> Ejercicio 16 <p>Mostrar d\u00f3nde se encuentra un profesor ahora, es decir, en el momento actual.</p> Ejercicio 17 <p>Mostrar de cada asignatura el nombre, el n\u00famero de horas a la semana, el n\u00famero de cursos distintos donde se imparte, el n\u00famero de ofertas educativas distintas donde se imparte, de aquellas asignaturas que tengan 3 o m\u00e1s horas a la semana.</p> Ejercicio 18 <p>Realiza un funci\u00f3n en MySQL que dado un curso, devuelva el nombre del tutor. Haz un programa en Java que llame a dicha funci\u00f3n y muestre por consola el resultado.</p> Ejercicio 19 <p>Realiza un procedimiento en MySQL que dado un curso y una asignatura, devuelva el n\u00famero de horas semanales que tiene la asignatura y el nombre del profesor que la imparte. Haz un programa en Java que llame al procedimiento y muestre por consola los resultados.</p>"},{"location":"bloque_iv/tema_16/page-1/","title":"1 Introducci\u00f3n a las ORM","text":""},{"location":"bloque_iv/tema_16/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>En la mayor\u00eda de las aplicaciones actuales se requiere acceso al menos a una fuente de datos. Dichas fuentes son, por lo general, base de datos relacionales. En principio, esto no debe suponer ning\u00fan problema y podremos realizar operaciones y consultas sobre la base de datos SQL, pero en ciertas ocasiones podemos tener m\u00e1s de un fuente de datos a la vez o la fuente que tenemos pude sufrir ciertos cambios. Todo esto puede dar lugar a una refactorizaci\u00f3n de gran parte del c\u00f3digo.</p> <p>Supongamos que tenemos una fuente de datos que corresponde a una base de datos MySQL llamada students. La base de datos tiene la siguiente estructura:</p> <pre><code>+-------------+       +--------------+       +--------+\n| Estudiante  |-------| Inscripci\u00f3n  |-------| Curso  |\n+-------------+       +--------------+       +--------+\n| id          |       | id           |       | id     |\n| nombre      |       | idEstudiante |       | nombre |\n| edad        |       | idCurso      |       | cr\u00e9ditos|\n+-------------+       +--------------+       +--------+\n</code></pre> <p>De todo ello, obtenemos el siguiente script:</p> <pre><code>CREATE DATABASE IF NOT EXISTS `students` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\nUSE `students`;\nCREATE TABLE `course` (\n`id` int(11) NOT NULL,\n`name` varchar(30) NOT NULL,\n`credits` int(11) DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\nINSERT INTO `course` (`id`, `name`, `credits`) VALUES\n(1, 'Matem\u00e1ticas', 3),\n(2, 'Historia', 4),\n(3, 'Programaci\u00f3n', 5),\n(4, 'Literatura', 3),\n(5, 'Qu\u00edmica', 4),\n(6, 'F\u00edsica', 5),\n(7, 'Ingl\u00e9s', 3),\n(8, 'Econom\u00eda', 4),\n(9, 'Biolog\u00eda', 5),\n(10, 'Arte', 3);\nCREATE TABLE `inscription` (\n`id` int(11) NOT NULL,\n`idStudent` int(11) NOT NULL,\n`idCourse` int(11) NOT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\nINSERT INTO `inscription` (`id`, `idStudent`, `idCourse`) VALUES\n(1, 1, 1),\n(2, 2, 3),\n(3, 3, 2),\n(4, 4, 4),\n(5, 5, 5),\n(6, 6, 6),\n(7, 7, 8),\n(8, 8, 7),\n(9, 9, 9),\n(10, 10, 10);\nCREATE TABLE `student` (\n`id` int(11) NOT NULL,\n`name` varchar(30) NOT NULL,\n`age` int(11) DEFAULT NULL\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\nINSERT INTO `student` (`id`, `name`, `age`) VALUES\n(1, 'Juan P\u00e9rez', 20),\n(2, 'Mar\u00eda L\u00f3pez', 22),\n(3, 'Carlos Rodr\u00edguez', 21),\n(4, 'Laura Garc\u00eda', 23),\n(5, 'Pedro S\u00e1nchez', 22),\n(6, 'Ana Mart\u00ednez', 24),\n(7, 'Miguel Gonz\u00e1lez', 20),\n(8, 'Elena Ram\u00edrez', 21),\n(9, 'Javier Fern\u00e1ndez', 23),\n(10, 'Sof\u00eda D\u00edaz', 22);\nALTER TABLE `course`\nADD PRIMARY KEY (`id`);\nALTER TABLE `inscription`\nADD PRIMARY KEY (`id`),\nADD KEY `fk_insc_stu` (`idStudent`),\nADD KEY `fk_insc_cour` (`idCourse`);\nALTER TABLE `student`\nADD PRIMARY KEY (`id`);\nALTER TABLE `course`\nMODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;\nALTER TABLE `inscription`\nMODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;\nALTER TABLE `student`\nMODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;\nALTER TABLE `inscription`\nADD CONSTRAINT `fk_insc_cour` FOREIGN KEY (`idCourse`) REFERENCES `course` (`id`),\nADD CONSTRAINT `fk_insc_stu` FOREIGN KEY (`idStudent`) REFERENCES `student` (`id`);\nCOMMIT;\n</code></pre>"},{"location":"bloque_iv/tema_16/page-1/#proyecto-jpaexample","title":"Proyecto JPAExample","text":"<p>Supongamos que vamos a crear una aplicaci\u00f3n para poder registrar las compras que se hacen en una librer\u00eda. Teniendo en cuenta las siguientes clases POJOs:</p> DiagramaStudentCourseInscription <pre><code>classDiagram\n    class Student{\n        -Integer id\n        -String name\n        -int age\n        +Student copy(String name)\n    }\n    class Course{\n        -Integer id\n        -String name\n        -int credits\n        +Course copy(String name)\n    }\n    class Inscription{\n        -Integer id\n        -Student student\n        -Course course\n    }\n\n    Inscription \"1..\" *-- \"1\" Student\n    Inscription \"1\" *-- \"1\" Course</code></pre> <pre><code>public class Student implements Comparable&lt;Student&gt;{\nprivate Integer id;\nprivate String name;\nprivate int age;\npublic Student(Integer id, String name, int age){\nthis.id = id;\nthis.name = name;\nthis.age = age;\n}\npublic Student(String name, int age){\nthis(null, name, age);\n}\npublic static Student of(ResultSet result) throws SQLException {\nreturn new Student(result.getInt(\"id\"), result.getString(\"name\"), result.getInt(\"age\"));\n}\npublic Integer getId() {\nreturn id;\n}\npublic void setId(Integer id) {\nthis.id = id;\n}\npublic String getName() {\nreturn name;\n}\npublic void setName(String name) {\nthis.name = name;\n}\npublic int getAge() {\nreturn age;\n}\npublic void setAge(int age) {\nthis.age = age;\n}\n@Override\npublic boolean equals(Object o) {\nif (this == o) return true;\nif (o == null || getClass() != o.getClass()) return false;\nStudent student = (Student) o;\nreturn age == student.age &amp;&amp; student.id.equals(id) &amp;&amp; name.equalsIgnoreCase(student.name);\n}\n@Override\npublic int hashCode() {\nreturn id.hashCode() + name.hashCode() + Integer.hashCode(age);\n}\n@Override\npublic String toString() {\nreturn \"Student{\" +\n\"id=\" + id +\n\", name='\" + name + '\\'' +\n\", age=\" + age +\n'}';\n}\n@Override\npublic int compareTo(Student o) {\nreturn id.compareTo(o.id);\n}\npublic Student copy(String newName) {\nreturn new Student(id, newName, age);\n}\n}   </code></pre> <pre><code>public class Course implements Comparable&lt;Course&gt;{\nprivate Integer id;\nprivate String name;\nprivate int credits;\npublic Course(Integer id, String name, int credits) {\nthis.id = id;\nthis.name = name;\nthis.credits = credits;\n}\npublic Course(String name, int credits) {\nthis(null, name, credits);\n}\npublic static Course of(ResultSet result) throws SQLException {\nreturn new Course(result.getInt(\"id\"), result.getString(\"name\"), result.getInt(\"credits\"));\n}\npublic Integer getId() {\nreturn id;\n}\npublic void setId(Integer id) {\nthis.id = id;\n}\npublic String getName() {\nreturn name;\n}\npublic void setName(String name) {\nthis.name = name;\n}\npublic int getCredits() {\nreturn credits;\n}\npublic void setCredits(int credits) {\nthis.credits = credits;\n}\n@Override\npublic boolean equals(Object o) {\nif (this == o) return true;\nif (o == null || getClass() != o.getClass()) return false;\nCourse course = (Course) o;\nreturn credits == course.credits &amp;&amp; id.equals(course.id) &amp;&amp; name.equalsIgnoreCase(course.name);\n}\n@Override\npublic int hashCode() {\nreturn id.hashCode() + name.hashCode() + Integer.hashCode(credits);\n}\n@Override\npublic String toString() {\nreturn \"Course{\" +\n\"id=\" + id +\n\", name='\" + name + '\\'' +\n\", credits=\" + credits +\n'}';\n}\n@Override\npublic int compareTo(Course o) {\nreturn id.compareTo(o.id);\n}\npublic Course copy(String newName) {\nreturn new Course(id, newName, credits);\n}\n}\n</code></pre> <pre><code>public class Inscription implements Comparable&lt;Inscription&gt;{\nprivate Integer id;\nprivate Student student;\nprivate Course course;\npublic Inscription(Integer id, Student student, Course course) {\nthis.id = id;\nthis.student = student;\nthis.course = course;\n}\npublic Inscription(Student student, Course course) {\nthis(null, student, course);\n}\npublic static Inscription of(ResultSet result) throws SQLException {\nreturn new Inscription(result.getInt(\"id\"), Student.of(result), Course.of(result));\n}\npublic Integer getId() {\nreturn id;\n}\npublic void setId(Integer id) {\nthis.id = id;\n}\npublic Student getStudent() {\nreturn student;\n}\npublic void setStudent(Student student) {\nthis.student = student;\n}\npublic Course getCourse() {\nreturn course;\n}\npublic void setCourse(Course course) {\nthis.course = course;\n}\n@Override\npublic boolean equals(Object o) {\nif (this == o) return true;\nif (o == null || getClass() != o.getClass()) return false;\nInscription that = (Inscription) o;\nreturn id.equals(that.id) &amp;&amp; student.equals(that.student) &amp;&amp; course.equals(that.course);\n}\n@Override\npublic int hashCode() {\nreturn id.hashCode() + student.hashCode() + course.hashCode();\n}\n@Override\npublic String toString() {\nreturn \"Inscription{\" +\n\"id=\" + id +\n\", student=\" + student +\n\", course=\" + course +\n'}';\n}\n@Override\npublic int compareTo(Inscription o) {\nreturn 0;\n}\n}\n</code></pre> <p>Adem\u00e1s el proyecto contiene un interfaz que servir\u00e1 para cada uno de los modelos de nuestras clases POJOs, en la cual se encuentras los m\u00e9todos necesarios para trabajar con las consultas comunes de cada una de nuestras clases:</p> <pre><code>public interface Source&lt;T&gt; {\nT getById(Integer id);\nList&lt;T&gt; getAll();\nboolean save(T t);\nboolean update(T t);\nboolean delete(T t);\n}\n</code></pre> <p>Es una interfaz gen\u00e9rica, donde T es el tipo de clase POJO con la que estamos trabajando.</p> <p>Haciendo uso del patr\u00f3n de dise\u00f1o Singleton, crearemos una clase que trabaje con la conexi\u00f3n a nuestra base de datos:</p> <pre><code>public class Database {\nprivate static Database database;\nprivate Connection connection;\nprivate Database(){\ntry{\nClass.forName(DRIVER);\nconnection = DriverManager.getConnection(URL, USER, PASSWORD);\n} catch (ClassNotFoundException e) {\nthrow new RuntimeException(e);\n} catch (SQLException e) {\nSystem.out.println(RED + \"Connection to MySQL DB failed: \" + e.getMessage() + RESET);\n}\n}\npublic PreparedStatement query(String sql) throws SQLException {\nreturn connection.prepareStatement(sql);\n}\npublic Statement query() throws SQLException {\nreturn connection.createStatement();\n}\npublic static Database instance(){\nif(database == null){\ndatabase = new Database();\n}\nreturn database;\n}\n}\n</code></pre> <p>Una vez creada la clase para trabajar con la conexi\u00f3n creamos los modelos que implementen la interfaz que hemos creado anteriormente:</p> StudentModelCourseModelInscriptionModel <pre><code>public class StudentModel implements Source&lt;Student&gt; {\nprivate final Database db;\npublic StudentModel(Database db) {\nthis.db = db;\n}\n@Override\npublic Student getById(Integer id) {\ntry(PreparedStatement statement = db.query(\"select * from student where id = ?\")) {\nstatement.setInt(1, id);\nResultSet result = statement.executeQuery();\nif(!result.next())  return null;\nreturn Student.of(result);\n} catch (SQLException e) {\nSystem.out.println(e.getMessage());\nreturn null;\n}\n}\n@Override\npublic List&lt;Student&gt; getAll() {\nfinal List&lt;Student&gt; students = new ArrayList&lt;&gt;();\ntry(Statement statement = db.query()) {\nResultSet result = statement.executeQuery(\"select * from student\");\nwhile (result.next()){\nstudents.add(Student.of(result));\n}\n} catch (SQLException e) {\nSystem.out.println(e.getMessage());\n}\nreturn students;\n}\n@Override\npublic boolean save(Student student) {\ntry(PreparedStatement statement = db.query(\"insert into student (name, age) values (?, ?)\")) {\nstatement.setString(1, student.getName());\nstatement.setInt(2, student.getAge());\nreturn statement.executeUpdate() &gt; 0;\n} catch (SQLException e) {\nSystem.out.println(e.getMessage());\nreturn false;\n}\n}\n@Override\npublic boolean update(Student student) {\ntry(PreparedStatement statement = db.query(\"update student set name = ?, age = ? where id = ?\")) {\nstatement.setString(1, student.getName());\nstatement.setInt(2, student.getAge());\nstatement.setInt(3, student.getId());\nreturn statement.executeUpdate() &gt; 0;\n} catch (SQLException e) {\nSystem.out.println(e.getMessage());\nreturn false;\n}\n}\n@Override\npublic boolean delete(Student student) {\ntry(PreparedStatement statement = db.query(\"delete from student where id = ?\")) {\nstatement.setInt(1, student.getId());\nreturn statement.executeUpdate() &gt; 0;\n} catch (SQLException e) {\nSystem.out.println(e.getMessage());\nreturn false;\n}\n}\n}\n</code></pre> <pre><code>public class CourseModel implements Source&lt;Course&gt; {\nprivate final Database db;\npublic CourseModel(Database db) {\nthis.db = db;\n}\n@Override\npublic Course getById(Integer id) {\ntry(PreparedStatement statement = db.query(\"select * from course where id = ?\")) {\nstatement.setInt(1, id);\nResultSet result = statement.executeQuery();\nif(!result.next())  return null;\nreturn Course.of(result);\n} catch (SQLException e) {\nSystem.out.println(e.getMessage());\nreturn null;\n}\n}\n@Override\npublic List&lt;Course&gt; getAll() {\nfinal List&lt;Course&gt; courses = new ArrayList&lt;&gt;();\ntry(Statement statement = db.query()) {\nResultSet result = statement.executeQuery(\"select * from course\");\nwhile (result.next()){\ncourses.add(Course.of(result));\n}\n} catch (SQLException e) {\nSystem.out.println(e.getMessage());\n}\nreturn courses;\n}\n@Override\npublic boolean save(Course course) {\ntry(PreparedStatement statement = db.query(\"insert into course (name, credits) values (?, ?)\")) {\nstatement.setString(1, course.getName());\nstatement.setInt(2, course.getCredits());\nreturn statement.executeUpdate() &gt; 0;\n} catch (SQLException e) {\nSystem.out.println(e.getMessage());\nreturn false;\n}\n}\n@Override\npublic boolean update(Course course) {\ntry(PreparedStatement statement = db.query(\"update course set name = ?, age = ? where id = ?\")) {\nstatement.setString(1, course.getName());\nstatement.setInt(2, course.getCredits());\nstatement.setInt(3, course.getId());\nreturn statement.executeUpdate() &gt; 0;\n} catch (SQLException e) {\nSystem.out.println(e.getMessage());\nreturn false;\n}\n}\n@Override\npublic boolean delete(Course course) {\ntry(PreparedStatement statement = db.query(\"delete from course where id = ?\")) {\nstatement.setInt(1, course.getId());\nreturn statement.executeUpdate() &gt; 0;\n} catch (SQLException e) {\nSystem.out.println(e.getMessage());\nreturn false;\n}\n}\n}\n</code></pre> <pre><code>public class InscriptionModel implements Source&lt;Inscription&gt; {\nprivate final Database db;\npublic InscriptionModel(Database db) {\nthis.db = db;\n}\n@Override\npublic Inscription getById(Integer id) {\ntry(PreparedStatement statement = db.query(\"select i.id, s.*, c.* from inscription i JOIN student s on i.idStudent = s.id join course c on i.idCourse = c.id where i.id = ?\")) {\nstatement.setInt(1, id);\nResultSet result = statement.executeQuery();\nif(!result.next())  return null;\nreturn Inscription.of(result);\n} catch (SQLException e) {\nSystem.out.println(e.getMessage());\nreturn null;\n}\n}\n@Override\npublic List&lt;Inscription&gt; getAll() {\nfinal List&lt;Inscription&gt; inscriptions = new ArrayList&lt;&gt;();\ntry(Statement statement = db.query()) {\nResultSet result = statement.executeQuery(\"select i.id, s.*, c.* from inscription i JOIN student s on i.idStudent = s.id join course c on i.idCourse = c.id\");\nwhile (result.next()){\ninscriptions.add(Inscription.of(result));\n}\n} catch (SQLException e) {\nSystem.out.println(e.getMessage());\n}\nreturn inscriptions;\n}\n@Override\npublic boolean save(Inscription inscription) {\ntry(PreparedStatement statement = db.query(\"insert into inscription (idStudent, idCourse) values (?, ?)\")) {\nstatement.setInt(1, inscription.getStudent().getId());\nstatement.setInt(2, inscription.getCourse().getId());\nreturn statement.executeUpdate() &gt; 0;\n} catch (SQLException e) {\nSystem.out.println(e.getMessage());\nreturn false;\n}\n}\n@Override\npublic boolean update(Inscription inscription) {\nreturn false;\n}\n@Override\npublic boolean delete(Inscription inscription) {\ntry(PreparedStatement statement = db.query(\"delete from inscription where id = ?\")) {\nstatement.setInt(1, inscription.getId());\nreturn statement.executeUpdate() &gt; 0;\n} catch (SQLException e) {\nSystem.out.println(e.getMessage());\nreturn false;\n}\n}\n}\n</code></pre> <p>Info</p> <p>Puedes encontrar este proyecto en: https://github.com/irubenboy/jpaexample</p>"},{"location":"bloque_iv/tema_16/page-1/#problemas-de-carencia-de-orm","title":"Problemas de carencia de ORM","text":"<p>Al usar esta estructura de proyecto, podemos evitar el error de cambio de fuente de forma sencilla, pero a\u00fan as\u00ed tenemos muchos otros problemas, como por ejemplo, si queremos a\u00f1adir m\u00e1s queries, o si quisi\u00e9ramos cambiar la estructura de una clase POJO habr\u00eda que cambiar tambi\u00e9n su modelo.</p>"},{"location":"bloque_iv/tema_16/page-2/","title":"2 Persistencia","text":""},{"location":"bloque_iv/tema_16/page-2/#introduccion","title":"Introducci\u00f3n","text":"<p>La persistencia se refiere a la capacidad de almacenar y recuperar datos de forma duradera a trav\u00e9s de diversas fuentes, como bases de datos, archivos, o incluso memoria, es decir, se trata de mantener la informaci\u00f3n m\u00e1s all\u00e1 de la ejecuci\u00f3n del programa para que pueda ser utilizada en sesiones posteriores o compartida entre diferentes aplicaciones.</p> <p>La persistencia es una de las soluciones posibles al problema planteado en el proyecto anterior.</p>"},{"location":"bloque_iv/tema_16/page-2/#patron-de-diseno-dao","title":"Patr\u00f3n de dise\u00f1o DAO","text":"<p>El patr\u00f3n de dise\u00f1o DAO (Data Access Object) es un patr\u00f3n de dise\u00f1o que se utiliza en programaci\u00f3n para separar la l\u00f3gica de acceso a datos de la l\u00f3gica de negocio. Su objetivo principal es proporcionar una capa de abstracci\u00f3n entre la aplicaci\u00f3n y la fuente de datos, lo que facilita la gesti\u00f3n de la base de datos y permite cambios en la base de datos sin afectar la l\u00f3gica de la aplicaci\u00f3n.</p> <p>Este patr\u00f3n tiene los siguientes componentes:</p> <ul> <li> <p>Interfaz DAO: Define los m\u00e9todos que representan operaciones de acceso a datos, como insertar, actualizar, eliminar y recuperar datos. Esta interfaz sirve como contrato para las clases concretas que implementar\u00e1n la l\u00f3gica de acceso a datos.</p> <pre><code>public interface StudentDAO {\nStudent getById(int id);\nList&lt;Student&gt; getAll();\nvoid insert(Student student);\nvoid update(Student student);\nvoid delete(int id);\n}\n</code></pre> </li> <li> <p>Clase DAO: Implementa la interfaz DAO y proporciona la l\u00f3gica real para interactuar con la fuente de datos, como una base de datos. Esta clase realiza operaciones de lectura y escritura en la fuente de datos, como consultas SQL en una base de datos relacional.</p> <pre><code>public class StudentDAOImpl implements StudentDAO {\n// Implementaci\u00f3n de los m\u00e9todos definidos en la interfaz\n// Aqu\u00ed se realizar\u00edan las operaciones de acceso a la base de datos.\n}\n</code></pre> </li> <li> <p>Modelo de datos (POJO): Representa los objetos de datos que se almacenan o recuperan de la fuente de datos. Los objetos de este tipo son simples y contienen propiedades que mapean a las columnas de la base de datos.</p> <pre><code>public class Student {\nprivate int id;\nprivate String name;\nprivate int age;\n// Getters y setters\n}\n</code></pre> </li> </ul> <p>De esta forma podemos realizar las operaciones de una base de datos de forma m\u00e1s sencilla:</p> <pre><code>public class Main {\npublic static void main(String[] args) {\n// Crear una instancia del DAO\nStudentDAO studentDAO = new StudentDAOImpl();\n// Insertar un estudiante en la base de datos\nStudent student = new Student();\nstudent.setName(\"John Doe\");\nstudent.setAge(20);\nstudentDAO.insert(student);\n// Recuperar un estudiante por ID\nStudent retrievedStudent = studentDAO.getById(1);\nSystem.out.println(\"Nombre del estudiante: \" + retrievedStudent.getName());\n// Actualizar un estudiante\nretrievedStudent.setName(\"Jane Smith\");\nstudentDAO.update(retrievedStudent);\n// Eliminar un estudiante\nstudentDAO.delete(1);\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_16/page-2/#implementacion-del-patron-de-diseno-dao-al-proyecto-students","title":"Implementaci\u00f3n del patr\u00f3n de dise\u00f1o DAO al proyecto students","text":"<p>El primer cambio que sufre nuestro proyecto es la eliminaci\u00f3n de la interfaz <code>Source&lt;T&gt;</code> por un interfaz especifica para cada tipo de dato:</p> StudentDAOCourseDAOInscriptionDAO <pre><code>public interface StudentDAO {\nStudent getById(Integer id);\nList&lt;Student&gt; getAll();\nboolean save(Student student);\nboolean update(Student student);\nboolean delete(Student student);\n}\n</code></pre> <pre><code>public interface CourseDAO {\nCourse getById(Integer id);\nList&lt;Course&gt; getAll();\nboolean save(Course course);\nboolean update(Course course);\nboolean delete(Course course);\n}\n</code></pre> <pre><code>public interface InscriptionDAO {\nInscription getById(Integer id);\nList&lt;Inscription&gt; getAll();\nboolean save(Inscription inscription);\nboolean delete(Inscription inscription);\n}\n</code></pre> <p>De esta forma tendremos una interfaz para cada modelo de datos, y as\u00ed cada implementaci\u00f3n realizar\u00e1 la misma operaciones, sin importar el tipo de fuente de datos que usemos.</p> <p>Otro de los cambios a seguir, l\u00f3gicamente, son nuestras clases l\u00f3gicas, anteriormente llamadas Model, las cuales implementaban la interfaz <code>Source</code> y ahora implementar\u00e1n las interfaces DAO que tenemos:</p> StudentDAOImplCourseDAOImplOderDAOImpl <pre><code>public class StudentDAOImpl implements StudentDAO {\n//...\n@Override\npublic Student getById(Integer id) {\n// ...\n}\n@Override\npublic List&lt;Student&gt; getAll() {\n// ...\n}\n@Override\npublic boolean save(Student student) {\n//...\n}\n@Override\npublic boolean update(Student student) {\n// ...\n}\n@Override\npublic boolean delete(Student student) {\n//...\n}\n}\n</code></pre> <pre><code>public class CourseDAOImpl implements CourseDAO {\n//...\n@Override\npublic Course getById(Integer id) {\n// ...\n}\n@Override\npublic List&lt;Course&gt; getAll() {\n// ...\n}\n@Override\npublic boolean save(Course Course) {\n// ...\n}\n@Override\npublic boolean update(Course Course) {\n// ...\n}\n@Override\npublic boolean delete(Course Course) {\n// ...\n}\n}\n</code></pre> <pre><code>public class InscriptionDAOImpl implements InscriptionDAO {\n//...\n@Override\npublic Inscription getById(Integer id) {\n// ...\n}\n@Override\npublic List&lt;Inscription&gt; getAll() {\n// ...\n}\n@Override\npublic boolean save(Inscription inscription) {\n// ...\n}\n@Override\npublic boolean delete(Inscription inscription) {\n// ...\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_16/page-2/#patron-de-diseno-repository","title":"Patr\u00f3n de dise\u00f1o repository","text":"<p>El patr\u00f3n de dise\u00f1o Repository es un patr\u00f3n de dise\u00f1o de software que se utiliza para abstraer y centralizar la l\u00f3gica de acceso a datos en una aplicaci\u00f3n. Proporciona una interfaz com\u00fan para acceder a datos, independientemente de la fuente de datos subyacente, como una base de datos, un servicio web o incluso una memoria cach\u00e9. El patr\u00f3n Repository tambi\u00e9n se utiliza para separar la l\u00f3gica de acceso a datos de la l\u00f3gica de negocio de una aplicaci\u00f3n.</p> <p>Los componentes de este patr\u00f3n son:</p> <ul> <li> <p>Interfaz Repository: Define m\u00e9todos para acceder a los datos, como guardar, recuperar, actualizar y eliminar objetos. Esta interfaz act\u00faa como un contrato que las clases concretas deben implementar.</p> <pre><code>public interface BookRepository {\nBook getById(int id);\nList&lt;Book&gt; getAll();\nvoid save(Book book);\nvoid update(Book book);\nvoid delete(int id);\n}\n</code></pre> </li> <li> <p>Clase Repository concreta: Implementa la interfaz Repository y proporciona la l\u00f3gica de acceso a datos real. Puede interactuar con una base de datos, un servicio web, un sistema de archivos u otra fuente de datos.</p> <pre><code>public class JdbcBookRepository implements BookRepository {\n// Implementaci\u00f3n de los m\u00e9todos definidos en la interfaz\n// Aqu\u00ed se realizar\u00edan las operaciones de acceso a la base de datos.    \n}\n</code></pre> </li> <li> <p>Modelo de datos (POJO): Representa los objetos de datos que se almacenan o recuperan. Los objetos de este tipo son simples y contienen propiedades que mapean a los datos almacenados.</p> <pre><code>public class Book {\nprivate int id;\nprivate String title;\nprivate String author;\n// Getters y setters\n}\n</code></pre> </li> </ul>"},{"location":"bloque_iv/tema_16/page-2/#dao-vs-repository","title":"DAO vs Repository","text":"<p>Aparentemente ambos patrones de dise\u00f1o son bastantes parecido, pero a\u00fan as\u00ed hay algunas diferencias entre ellos:</p> <ol> <li> <p>Abstracci\u00f3n de la fuente de datos: En el patr\u00f3n Repository, se busca proporcionar una capa de abstracci\u00f3n que abarque m\u00faltiples fuentes de datos, como bases de datos, servicios web, sistemas de archivos, etc. El patr\u00f3n DAO generalmente se asocia m\u00e1s estrechamente con la interacci\u00f3n con bases de datos, aunque tambi\u00e9n puede utilizarse para otros tipos de fuentes de datos.</p> </li> <li> <p>Mapeo objeto-relacional: El patr\u00f3n Repository a menudo incluye un mapeo objeto-relacional (ORM) para facilitar la conversi\u00f3n entre los objetos de la aplicaci\u00f3n y los datos almacenados. En contraste, el patr\u00f3n DAO tiende a tener una relaci\u00f3n m\u00e1s directa con las consultas SQL o la interacci\u00f3n con la base de datos.</p> </li> <li> <p>Centralizaci\u00f3n de la l\u00f3gica de acceso a datos: El patr\u00f3n Repository se centra en centralizar la l\u00f3gica de acceso a datos, mientras que el patr\u00f3n DAO puede ser m\u00e1s flexible en t\u00e9rminos de c\u00f3mo se organiza la l\u00f3gica de acceso a datos.</p> </li> </ol> <p>En resumen, el patr\u00f3n Repository se centra en proporcionar una capa de abstracci\u00f3n m\u00e1s amplia para acceder a datos desde diversas fuentes, mientras que el patr\u00f3n DAO se enfoca m\u00e1s espec\u00edficamente en la l\u00f3gica de acceso a datos en el contexto de una base de datos. La elecci\u00f3n entre estos patrones depender\u00e1 de las necesidades y la arquitectura de tu aplicaci\u00f3n.</p>"},{"location":"bloque_iv/tema_16/page-3/","title":"3 Java Persistence API (JPA)","text":""},{"location":"bloque_iv/tema_16/page-3/#introduccion","title":"Introducci\u00f3n","text":"<p>En nuestro entorno existen muchas aplicaciones que realizan operaciones con la base de almacenar y recuperar grandes cantidades de datos.</p> <p>Tal y como hemos visto hasta ahora para poder realizar dichas operaciones hemos tenido que utilizar una gran cantidad de c\u00f3digo, a pesar de haber mejorado la t\u00e9cnica haciendo uso de patrones.</p> <p>Java Persistence API es un conjunto de clases y m\u00e9todos que persistentemente almacena una gran cantidad de datos a una base de datos proporcionada.</p> <p>Para poder reducir la carga en la gesti\u00f3n de los objetos en los modelos relaciones, se sigue el marco Proveedor JPA que nos permite de forma f\u00e1cil una interacci\u00f3n con la instancia de la base de datos.</p> <p> Figura 2 - JPA Provider</p>"},{"location":"bloque_iv/tema_16/page-3/#arquitectura","title":"Arquitectura","text":"<p>JPA es una fuente para almacenar entidades relaciones y muestra c\u00f3mo definir una clase POJO como una entidad y la forma de gestionar las relaciones con las entidades.</p> <p> Figura 3 - Arquitectura JPA</p> Unidad Descripci\u00f3n EntityManagerFactory Esta es una clase de f\u00e1brica de EntityManager. Crea y gestiona m\u00faltiples instancias EntityManager. EntityManager Es una interfaz, que gestiona la persistencia de objetos. Funciona como instancia de consulta. Entidad Las entidades son los objetos de persistencia, tiendas como registros en la base de datos. EntityTransaction Tiene una relaci\u00f3n de uno a uno con EntityManager. Para cada m\u00e9todo EntityManager, se mantienen las operaciones de la clase EntityTransaction. Persistence Esta clase contiene m\u00e9todos est\u00e1ticos para obtener EntityManagerFactory. Query Esta interfaz es implementada por cada proveedor JPA relacional para obtener objetos que cumplan los criterios. <p>En la arquitectura, las relaciones entre las clases e interfaces pertenecen a la clase <code>javax.persistence</code> paquete. El siguiente diagrama muestra la relaci\u00f3n entre ellos.</p> <p>JPA package</p> <p>https://mvnrepository.com/artifact/javax.persistence/javax.persistence-api</p> <p> Figura 4 - JPA Relaci\u00f3n de clases</p> <ul> <li>La relaci\u00f3n entre EntityManagerFactory y EntityManager es de uno a varios. Se trata de una clase de f\u00e1brica a instancias EntityManager.</li> <li>La relaci\u00f3n entre EntityManager y EntityTransaction es uno a uno. EntityManager para cada operaci\u00f3n, hay un EntityTransaction.</li> <li>La relaci\u00f3n entre EntityManager y Query es de uno a varios. Un n\u00famero de consultas puede ser ejecutado mediante una instancia EntityManager.</li> <li>La relaci\u00f3n entre Entidad y EntityManager es uno de muchos. Un EntityManager puede administrar varias entidades.</li> </ul>"},{"location":"bloque_iv/tema_16/page-3/#object-relational-mapping-orm","title":"Object Relational Mapping (ORM)","text":"<p>Object Relational Mapping es una capacidad de programaci\u00f3n para convertir un objeto relacional devuelto de una consulta a un objeto entidad. Su principal caracter\u00edstica es enlazar un objeto a sus respectivos similares en la base de datos, as\u00ed como sus relaciones con las entidades en cualquier otra tabla.</p> <p>El uso de ORM tiene una serie de ventajas:</p> <ul> <li>Persistencias idiom\u00e1ticas: le permite escribir persistencia utilizando las clases orientadas a objetos.</li> <li>Alto rendimiento: tiene un alto rendimiento a la ahora de realizar t\u00e9cnicas de bloqueo.</li> <li>Fiable: es muy estable y usado.</li> </ul> <p>La arquitectura ORM es similar a la siguiente</p> <p> Figura 5 - Arquitectura ORM</p>"},{"location":"bloque_iv/tema_16/page-3/#fase-1","title":"Fase 1","text":"<p>La primera fase, denominada fases de datos del objeto, contiene las clases POJO, interfaces y el resto de clases. Es el principal componente de la capa empresarial que contiene operaciones y atributos de l\u00f3gica de negocios. Por ejemplo, podemos tener la clase POJO, Employee con la informaci\u00f3n referente a almacenar de los empleados, as\u00ed como su interfaz DAO que contendr\u00e1 los m\u00e9todos necesarios para trabajar con la base de datos.</p> <p>Es importante que las clases POJOs sigan el principio Bean para poder trabajar con ellas a trav\u00e9s del proveedor.</p> EmployeeEmployeeDAO <pre><code>public class Employee{\nprivate int id;\nprivate String name;\nprivate double salary;\nprivate String deg;\npublic Employee(int id, String name, double salary, String deg){\nthis.id = id;\nthis.name = name;\nthis.salary = salary;\nthis.deg = deg;\n}\n// Getters and setters\n}\n</code></pre> <pre><code>public interface EmployeeDAO{\nEmployee get(int id);\nList&lt;Employee&gt; getAll();\nboolean insert(Employee employee);\nboolean update(int id, Employee employee);\nboolean delete(int id);\n}\n</code></pre>"},{"location":"bloque_iv/tema_16/page-3/#fase-2","title":"Fase 2","text":"<p>La fase 2, o fase de mapeo o persistencia, contiene el proveedor JPA, as\u00ed como el archivo de configuraci\u00f3n, el JPA loader, y el object Grid.</p> <ul> <li>JPA Provider: es el proveedor que contiene el JPA.</li> <li>Archivo de asignaci\u00f3n: es el archivo que contiene la configuraci\u00f3n de la asignaci\u00f3n entre los datos de la clase POJO y los datos de una base de datos relacional.</li> <li>JPA Loader: Carga los datos de la base de datos en una especie de memoria cach\u00e9, para as\u00ed interactuar con las clases servicios de datos.</li> <li>Object Grid: es una ubicaci\u00f3n temporal que puede almacenar una copia de los datos relacionales, como una memoria cach\u00e9. Todas las consultas en la base de datos se efectuar\u00e1n, primero en los datos del objeto grid. S\u00f3lo despu\u00e9s de que se ha comprometido, afectar\u00e1 a la base de datos principal.</li> </ul>"},{"location":"bloque_iv/tema_16/page-3/#fase-3","title":"Fase 3","text":"<p>La tercera fase es la fase de datos relacionales, que contiene los datos relacionales que est\u00e1n conectados al componente empresarial. Como se ha indicado anteriormente, s\u00f3lo cuando el componente empresarial se compromete con los datos, que se almacenan en la base de datos b\u00e1sicamente. Hasta entonces, los datos modificados se almacenan en una memoria cach\u00e9 como un formato de cuadr\u00edcula. El proceso de obtenci\u00f3n de los datos es id\u00e9ntico a la de almacenar los datos.</p> <p>El mecanismo de la interacci\u00f3n mediante programaci\u00f3n por encima de tres fases se denomina asignaci\u00f3n objeto-relacional .</p>"},{"location":"bloque_iv/tema_16/page-3/#mapeoxml","title":"Mapeo.xml","text":"<p>La asignaci\u00f3n del archivo.xml consiste en indicar al JPA Provider la relaci\u00f3n entre las clases de entidad con las tablas de la base de datos relacional.</p> <p>Para la clase Employee y la tabla empleado tenemos la siguiente asignaci\u00f3n:</p> <pre><code>&lt;? xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm    \n   http://java.sun.com/xml/ns/persistence/orm_1_0.xsd\"\nversion=\"1.0\"&gt;\n&lt;description&gt; XML Mapping file&lt;/description&gt;\n&lt;entity class=\"Employee\"&gt;        &lt;table name=\"empleado\"/&gt;\n&lt;attributes&gt;\n&lt;id name=\"id\"&gt;\n&lt;generated-value strategy=\"TABLE\"/&gt;\n&lt;/id&gt;\n&lt;basic name=\"name\"&gt;\n&lt;column name=\"nombre\" length=\"100\"/&gt;\n&lt;/basic&gt;\n&lt;basic name=\"salary\"&gt;\n&lt;/basic&gt;\n&lt;basic name=\"deg\"&gt;\n&lt;/basic&gt;\n&lt;/attributes&gt;\n&lt;/entity&gt;\n&lt;/entity-mappings&gt;\n</code></pre> <p>Del archivo anterior podemos destacar:</p> <ul> <li><code>&lt;entity-mappings&gt;</code>: esta etiqueta define el esquema ORM que permitir\u00e1 reconocer a las etiquetas siguientes.</li> <li><code>&lt;description&gt;</code>: ofrece una descripci\u00f3n acerca de la aplicaci\u00f3n.</li> <li><code>&lt;entity&gt;</code>: define la clase entidad que se desea relacionar con la tabla de la base de datos. El atributo <code>class</code> define el nombre del la clase POJO. Tambi\u00e9n se puede definir el atributo <code>access</code> que indica el modo de acceso. El valor <code>FIELD</code> accede directamente a la propiedad mientras que el valor <code>PROPERTY</code> hace uso de los m\u00e9todos getters and setters.</li> <li><code>&lt;table&gt;</code>: define el nombre de la tabla indic\u00e1ndola con el atributo <code>name</code>. En caso de que el nombre de la clase POJO y el nombre de la tabla sean el mismo, no ser\u00eda necesario indicar esta etiqueta.</li> <li><code>&lt;attributes&gt;</code>: define los atributos/campos de una clase/tabla.</li> <li><code>&lt;id&gt;</code>: define la clave principal de la tabla. Con el atributo <code>name</code> se indica el nombre del atributo de la clase con la que se relaciona.</li> <li> <p><code>&lt;generated-value&gt;</code>: define c\u00f3mo se le asignar\u00e1 el valor a la clave principal. Siempre va en el interior de la etiqueta <code>id</code>. Sus posibles valores son</p> <ul> <li>IDENTITY: El valor se genera autom\u00e1ticamente por la base de datos. Este estrategia se usa para bases de datos que permitan la autoincrementaci\u00f3n como MySQL.</li> <li>SEQUENCE: El valor se genera secuencialmente.Esta estrategia se usa en base de datos donde permita la asignaci\u00f3n de valores secuenciales como en Oracle.</li> <li>TABLE: JPA crea una tabla adicional en la base de datos para generar valores de clave primaria. Es menos eficiente que IDENTITY o SEQUENCE.</li> <li>AUTO: Permite que el proveedor de persistencia elija la forma m\u00e1s adecuada seg\u00fan la base de datos. En la mayor\u00eda de los casos, esto se traducir\u00e1 en IDENTITY o SEQUENCE, si son compatibles.</li> <li>NONE: Esta opci\u00f3n significa que no se generar\u00e1 ning\u00fan valor autom\u00e1ticamente para la clave primaria. Debes proporcionar el valor de la clave primaria manualmente en tu c\u00f3digo.</li> </ul> <p>Cada estrategia tiene sus propias ventajas y limitaciones, y la elecci\u00f3n de la estrategia adecuada depende de la base de datos subyacente y los requisitos espec\u00edficos de tu aplicaci\u00f3n. Por ejemplo, si trabajas con una base de datos que admite autoincremento, IDENTITY es una elecci\u00f3n com\u00fan. Si est\u00e1s en una base de datos que utiliza secuencias, entonces SEQUENCE es apropiado. La estrategia AUTO es una opci\u00f3n conveniente si deseas que el proveedor de JPA elija la estrategia m\u00e1s adecuada en funci\u00f3n de la base de datos subyacente. Por otro lado, TABLE puede ser \u00fatil en situaciones donde ninguna de las otras estrategias es aplicable. La estrategia NONE se utiliza cuando deseas controlar completamente la generaci\u00f3n de valores por ti mismo. - <code>&lt;basic&gt;</code>: se utiliza para indicar los atributos de la clase. - <code>&lt;column-name&gt;</code>: se utiliza para indicar a que columna de la tabla hace referencia el atributo de la clase. Siempre van dentro de la etiqueta <code>basic</code>. En caso de que el atributo de la clase y el campo de la tabla sea el mismo, no es necesario indicarlo. - <code>&lt;many-to-many&gt;</code>: se utiliza para indicar un atributo for\u00e1neo que tiene relaci\u00f3n con otra tabla. - <code>&lt;join-table&gt;</code>: se utiliza para indicar con que tabla esta relacionada. - <code>&lt;join-column&gt;</code>: se utiliza para indicar el nombre de la columna a la que se una.</p> </li> </ul>"},{"location":"bloque_iv/tema_16/page-3/#anotaciones","title":"Anotaciones","text":"<p>Por lo general, se utilizan los archivos XML para configurar los componentes espec\u00edficos. Esto a veces supone un poco trillado, porque debemos conocer los atributos de la clase con los de la base de datos. Gracias a las anotaciones, podemos indicar dicha configuraci\u00f3n en las clases y atributos en Java. Todas las anotaciones est\u00e1n en el paquete <code>javax.persistence</code>.</p> <ul> <li><code>@Entity</code>: Esta anotaci\u00f3n se utiliza para marcar una clase como una entidad que se puede mapear a una tabla en la base de datos. Las instancias de esta clase se pueden administrar mediante JPA.</li> <li><code>@Table</code>: Se usa para especificar detalles espec\u00edficos de la tabla de la base de datos que corresponde a una entidad. Puedes definir el nombre de la tabla, el esquema y otras propiedades relacionadas con la tabla.</li> <li><code>@Id</code>: Indica que un atributo es la clave primaria de la entidad. Este atributo se asocia con la columna de clave primaria en la tabla de la base de datos.</li> <li><code>@GeneratedValue</code>: Se utiliza junto con @Id para especificar la estrategia de generaci\u00f3n de valores para la clave primaria. Puedes utilizar valores como IDENTITY, SEQUENCE, TABLE, AUTO, etc.</li> <li><code>@Column</code>: Se usa para personalizar la asignaci\u00f3n de atributos de entidad a columnas de la tabla de la base de datos. Puedes especificar el nombre de la columna, su tipo de datos, su longitud, y m\u00e1s.</li> <li><code>@ManyToOne</code> y <code>@OneToMany</code>: Estas anotaciones se utilizan para mapear relaciones entre entidades en una asociaci\u00f3n muchos a uno o uno a muchos. Por ejemplo, si tienes una entidad Author y una entidad Book, puedes utilizar estas anotaciones para definir la relaci\u00f3n entre autores y libros.</li> <li><code>@JoinColumn</code>: Esta anotaci\u00f3n se utiliza junto con @ManyToOne y @OneToMany para personalizar la columna que se utiliza para realizar la asociaci\u00f3n entre entidades.</li> <li><code>@OneToOne</code> y <code>@ManyToMany</code>: Estas anotaciones se utilizan para definir relaciones de uno a uno y muchos a muchos entre entidades.</li> <li><code>@NamedQuery</code> y <code>@NamedQueries</code>: Estas anotaciones se utilizan para definir consultas JPQL que se pueden reutilizar en varias partes de la aplicaci\u00f3n.</li> <li><code>@NamedNativeQuery</code> y <code>@NamedNativeQueries</code>: Similar a las anotaciones @NamedQuery, pero se utilizan para definir consultas SQL nativas en lugar de consultas JPQL.</li> <li><code>@Version</code>: Se usa para marcar un atributo que se utiliza para el control de versiones de una entidad. Ayuda a evitar problemas de concurrencia al realizar actualizaciones en registros.</li> <li><code>@Temporal</code>: Se utiliza para especificar el tipo de fecha y hora que se almacena en una columna, como DATE, TIME, o TIMESTAMP.</li> <li><code>@Lob</code>: Esta anotaci\u00f3n se usa para marcar un atributo que almacena datos grandes (como objetos binarios largos, como im\u00e1genes o documentos) en la base de datos.</li> <li><code>@PrePersist</code> y <code>@PreUpdate</code>: Estas anotaciones se utilizan para marcar m\u00e9todos que se ejecutar\u00e1n antes de la persistencia y antes de una actualizaci\u00f3n de una entidad, respectivamente.</li> <li><code>@PostLoad</code>, <code>@PostPersist</code>, <code>@PostUpdate</code>, y <code>@PostRemove</code>: Estas anotaciones se utilizan para marcar m\u00e9todos que se ejecutar\u00e1n despu\u00e9s de cargar una entidad, despu\u00e9s de la persistencia, despu\u00e9s de una actualizaci\u00f3n y despu\u00e9s de eliminar una entidad, respectivamente.</li> </ul> <pre><code>@Entity\n@Table(name = \"empleados\")\npublic class Employee{\n@Id\n@GeneratedValue(strategy = GenerationType.IDENTITY)\nprivate Long id;\n@Column(name=\"nombre\")\nprivate String name;\n@ManyToOne\n@JoinColumn(name=\"department_id\")\nprivate Department department;\n}\n@Entity\npublic Department{\n@OneToMany(mappedBy = \"department\")\nprivate List&lt;Employee&gt; employee;\n//...\n}\n</code></pre>"},{"location":"bloque_iv/tema_16/page-3/#persistencexml","title":"Persistence.xml","text":"<p>El archivo <code>persistence.xml</code> es un archivo de configuraci\u00f3n esencial en el contexto de JPA. Se utiliza para definir la configuraci\u00f3n de la unidad de persistencia de una aplicaci\u00f3n Java que emplea JPA. Este archivo cumple varias funciones clave:</p> <ul> <li>Definici\u00f3n de la Unidad de Persistencia: El archivo persistence.xml define una o varias unidades de persistencia que representan las conexiones a bases de datos y las configuraciones de mapeo objeto-relacional (ORM) en la aplicaci\u00f3n. Cada unidad de persistencia se identifica por un nombre \u00fanico y agrupa configuraciones relacionadas.</li> <li>**Configuraci\u00f3n del Proveedor de JP**A: En el archivo persistence.xml, puedes especificar el proveedor de JPA que deseas utilizar en tu aplicaci\u00f3n. Los proveedores comunes incluyen Hibernate, EclipseLink y otros. La elecci\u00f3n del proveedor depende de tus necesidades y preferencias.</li> <li>Configuraci\u00f3n de la Fuente de Datos: Puedes definir la fuente de datos (generalmente una conexi\u00f3n a la base de datos) que la unidad de persistencia utilizar\u00e1 para interactuar con la base de datos. Esto incluye informaci\u00f3n como la URL de conexi\u00f3n, el nombre de usuario y la contrase\u00f1a.</li> <li>Definici\u00f3n de Clases de Entidad: El archivo persistence.xml enumera todas las clases de entidad que se administrar\u00e1n en la unidad de persistencia. Las clases de entidad son objetos Java que se mapean a tablas de bases de datos y se utilizan para realizar operaciones de persistencia.</li> <li>Configuraci\u00f3n Adicional: Puedes proporcionar propiedades de configuraci\u00f3n adicionales, como dialectos de SQL, estrategias de creaci\u00f3n de tablas, configuraci\u00f3n de cach\u00e9, y m\u00e1s, seg\u00fan las necesidades de tu aplicaci\u00f3n.</li> </ul> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;persistence xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd\"\nversion=\"2.2\"&gt;\n&lt;persistence-unit name=\"MyPersistenceUnit\"&gt;\n&lt;!-- Configuraci\u00f3n del proveedor de JPA --&gt;\n&lt;provider&gt;org.hibernate.jpa.HibernatePersistenceProvider&lt;/provider&gt;\n&lt;!-- Configuraci\u00f3n de la fuente de datos --&gt;\n&lt;jta-data-source&gt;java:jboss/datasources/MyDataSource&lt;/jta-data-source&gt;\n&lt;!-- Lista de clases de entidad que se gestionar\u00e1n --&gt;\n&lt;class&gt;com.example.Product&lt;/class&gt;\n&lt;class&gt;com.example.Customer&lt;/class&gt;\n&lt;!-- Configuraci\u00f3n adicional de JPA --&gt;\n&lt;properties&gt;\n&lt;property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.MySQLDialect\" /&gt;\n&lt;property name=\"hibernate.hbm2ddl.auto\" value=\"update\" /&gt;\n&lt;/properties&gt;\n&lt;mapping-file&gt;path/to/orm.xml&lt;/mapping-file&gt;\n&lt;/persistence-unit&gt;\n&lt;/persistence&gt;\n</code></pre> <p>Destacamos las siguientes etiquetas:</p> <ul> <li><code>&lt;persistence-unit&gt;</code>: define la unidad de persistencia, indicando su nombre con el atributo name.</li> <li><code>&lt;class&gt;</code>: define la clase de entidad con nombre del paquete. Puede haber tantas como clases vamos a trabajar.</li> <li><code>&lt;provider&gt;</code>: Proveedor de persistencia.</li> <li><code>&lt;properties&gt;</code>: define las propiedades del provider y cada propiedad dentro de la etiqueta <code>&lt;property&gt;</code>.</li> <li><code>&lt;mapping-file&gt;</code>: define la ruta donde se encuentra el fichero de mapeo, en caso de que se tenga alguno.</li> </ul> <p>Este fichero se debe almacenar en el directorio <code>META_INF</code> localizado en el directorio principal del proyecto.</p>"},{"location":"bloque_iv/tema_16/page-3/#operaciones-de-persistencia","title":"Operaciones de persistencia","text":"<p>Para realizar operaciones de persistencia ser\u00e1 necesario crear un <code>EntityManager</code> (para ello ser\u00e1 necesario tener un <code>EntityManagerFactory</code>). El m\u00e9todo <code>Persistence.createEntityManagerFactory(\"MyPersistence\")</code> creamos un objeto <code>EntityManagerFactory</code> e invocamos el m\u00e9todo <code>createEntityManager</code> para crear un <code>EntityManager</code>.</p> <pre><code>EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"MyPersistenceUnit\");\nEntityManager em = emf.createEntityManager();\n</code></pre> <p>Para realizar cada tipo de operaci\u00f3n ser\u00e1 necesario obtener la transacci\u00f3n, comenzar y ejecutarla a trav\u00e9s de los siguientes m\u00e9todos:</p> <ul> <li><code>Transaction getTransaction()</code>: obtiene el objeto transacci\u00f3n de la <code>EntityManager</code>.</li> <li><code>begin()</code>: inicia la transacci\u00f3n.</li> <li><code>persist()</code>: crea un objeto en la persistencia.</li> <li><code>commit()</code>: actualiza los datos en la base de datos original.</li> <li><code>rollback()</code>: deshace la transacci\u00f3n en caso de error.</li> <li><code>find()</code>: busca un elemento de la Entidad dado un id.</li> <li><code>remove()</code>: elimina un elemento.</li> </ul> <p>Una vez realiza las operaciones es necesario cerrar la <code>EntityManagerFactory</code>y la <code>EntityManager</code>.</p> <pre><code>// Crear una EntityManagerFactory basada en persistence.xml\nEntityManagerFactory emf = Persistence.createEntityManagerFactory(\"MyPersistenceUnit\");\n// Crear un EntityManager a partir de EntityManagerFactory\nEntityManager em = emf.createEntityManager();\n// Operaci\u00f3n de creaci\u00f3n (Persistencia)\nEmployee employee = new Employee(123, \"John Doe\", 50000, \"Developer\");\nem.getTransaction().begin();\nem.persist(employee);\nem.getTransaction().commit();\n// Operaci\u00f3n de lectura (B\u00fasqueda)\nem.getTransaction().begin();\nEmployee retrievedEmployee = em.find(Employee.class, 123);\nem.getTransaction().commit();\nSystem.out.println(\"Empleado recuperado: \" + retrievedEmployee);\n// Operaci\u00f3n de actualizaci\u00f3n\nem.getTransaction().begin();\nretrievedEmployee.setSalary(55000);\nem.getTransaction().commit();\n// Operaci\u00f3n de eliminaci\u00f3n\nem.getTransaction().begin();\nem.remove(retrievedEmployee);\nem.getTransaction().commit();\n// Cerrar EntityManager y EntityManagerFactory\nem.close();\nemf.close();\n</code></pre>"},{"location":"bloque_iv/tema_16/page-4/","title":"4 Java Persistence Query Language (JPQL)","text":""},{"location":"bloque_iv/tema_16/page-4/#introduccion","title":"Introducci\u00f3n","text":"<p>Java Persistence Query Language (JPQL) es un lenguaje de consulta que se utiliza en el contexto de Java Persistence API (JPA) para realizar consultas en bases de datos relacionales de una manera orientada a objetos. JPQL se basa en conceptos de programaci\u00f3n orientada a objetos y abstrae las diferencias entre los diversos sistemas de bases de datos, permitiendo a los desarrolladores realizar consultas de manera independiente del sistema de gesti\u00f3n de bases de datos subyacente. A continuaci\u00f3n, se detallan los aspectos m\u00e1s importantes de JPQL:</p> <ul> <li>Sintaxis Similar a SQL: JPQL tiene una sintaxis similar a SQL, lo que facilita la transici\u00f3n para aquellos familiarizados con SQL. Sin embargo, en lugar de referirse a tablas y columnas, se hace referencia a clases y atributos de entidades.</li> <li>Consulta de Entidades: JPQL permite realizar consultas en las entidades de tu aplicaci\u00f3n en lugar de tablas de la base de datos. Las entidades se mapean a tablas en la base de datos, y JPQL ofrece una abstracci\u00f3n para interactuar con estas entidades.</li> </ul>"},{"location":"bloque_iv/tema_16/page-4/#consultas-jpql","title":"Consultas JPQL","text":"<p>En JPQL encontramos los tipos de consultas similares a SQL:</p> <ul> <li>SELECT: Se utiliza para recuperar datos de la base de datos en forma de objetos de entidad.</li> <li>UPDATE: Permite realizar actualizaciones en los registros de la base de datos.</li> <li>DELETE: Permite eliminar registros de la base de datos.</li> <li>INSERT (rara vez utilizado en JPQL): Se usa para insertar nuevos registros.</li> </ul> <p>Al hacer un <code>SELECT</code> tenemos que tener en cuenta las siguientes cl\u00e1usulas</p> <ul> <li>SELECT: Indica qu\u00e9 atributos o entidades se deben recuperar.</li> <li>FROM: Especifica la entidad (o alias) desde la que se realizar\u00e1 la consulta.</li> <li>WHERE: Define condiciones para filtrar los resultados.</li> <li>ORDER BY: Ordena los resultados de la consulta.</li> <li>GROUP BY y HAVING: Utilizados para agrupar y filtrar resultados, respectivamente.</li> </ul> <pre><code>SELECT p FROM Product p\n</code></pre> <p>En el ejemplo anterior obtenemos todos los registros de la entidad Producto, siendo P un alias para indicar todos los atributos de la entidad producto</p> <p>En JPQL, podemos hacer uso de los par\u00e1metros de tal forma que facilita la creaci\u00f3n de consultas din\u00e1micas. Un par\u00e1metro va precedidos por dos puntos <code>:</code> y el nombre del par\u00e1metro (<code>:par\u00e1metro</code>). Hay que indicarle el valor del par\u00e1metro antes de ejecutar la consulta.</p> <pre><code>SELECT p FROM Product p WHERE p.name = :productName\n</code></pre> <p>JPQL tambi\u00e9n admite funciones de agregaci\u00f3n comunes como, <code>COUNT</code>, <code>SUM</code>, <code>AVG</code>, <code>MIN</code> y <code>MAX</code>, as\u00ed como las palabras claves para las asociaciones: <code>join</code>, <code>inner join</code>, etc.</p> <pre><code>SELECT p, c FROM Product p JOIN p.category c\n</code></pre> <p>A trav\u00e9s de JPQL puedes realizar subconsultas al igual que en SQL:</p> <pre><code>SELECT COUNT(p) FROM Product p WHERE p.category.name = 'Electr\u00f3nicos'\n</code></pre>"},{"location":"bloque_iv/tema_16/page-4/#interfaz-query-y-typequery","title":"Interfaz Query y TypeQuery <p>En Java Persistence API (JPA), TypedQuery y Query son dos interfaces relacionadas que se utilizan para ejecutar consultas, pero tienen diferencias clave en t\u00e9rminos de seguridad de tipos y conveniencia.</p> <ol> <li><code>TypeQuery&lt;T&gt;</code>:<ul> <li>Es una interfaz gen\u00e9rica que se utiliza para consultas JPQL que deben devolver resultados tipados</li> <li>Proporciona seguridad de tipos, lo que significa que el tipo de resultado se conoce en tiempo de compilaci\u00f3n y se garantiza que coincida con el tipo especificado en la consulta</li> <li>Mejora la legibilidad y el mantenimiento del c\u00f3digo al permitir el uso de resultados tipados en lugar de objetos gen\u00e9ricos.</li> <li>Es preferible cuando se espera un tipo de resultado espec\u00edfico y se desea evitar conversiones manuales.</li> </ul> </li> <li><code>Query</code>:<ul> <li>Es una interfaz no gen\u00e9rica que se utiliza para consultas JPQL que pueden devolver resultados no tipados o cuando el tipo de resultado no se conoce de antemano.</li> <li>No proporciona seguridad de tipos en tiempo de compilaci\u00f3n, lo que significa que los resultados se devuelven como objetos gen\u00e9ricos (Object).</li> <li>Es menos seguro en t\u00e9rminos de tipos y puede requerir conversiones manuales para trabajar con los resultados.</li> <li>Es \u00fatil en casos donde la estructura de los resultados es desconocida o cuando se desea una mayor flexibilidad.</li> </ul> </li> </ol> <p>En resumen, la principal diferencia entre TypedQuery y Query radica en la seguridad de tipos. TypedQuery se utiliza cuando se espera un tipo de resultado espec\u00edfico y se desea seguridad de tipos, mientras que Query se utiliza cuando la estructura de los resultados es menos predecible o no se necesita seguridad de tipos. La elecci\u00f3n entre ambas depende de los requisitos de tu consulta y de cu\u00e1nto control deseas tener sobre los tipos de resultados.</p> <p>Es importante resaltar que <code>TypeQuery</code>es hijo directo de <code>Query</code>.</p>","text":""},{"location":"bloque_iv/tema_16/page-4/#ejecucion-de-consultas","title":"Ejecuci\u00f3n de consultas <p>Para poder ejecutar las consultas en Java, se podr\u00e1 usar el m\u00e9todo <code>createQuery(query)</code> que recibe la query como par\u00e1metro. Algunos de sus m\u00e9todos importantes son:</p> <ul> <li><code>Query getResultList()</code>: Ejecuta la consulta y devuelve una lista con los registros resultados.</li> <li><code>Query getSingleResult()</code>: Ejecuta la consulta y devuelve un \u00fanico resultado. Lanza la excepci\u00f3n <code>NoResultException</code> si la consulta no devuelve ning\u00fan resultado y la excepci\u00f3n <code>NonUniqueResultException</code> si la consulta devuelve m\u00e1s de un resultado.</li> <li><code>Query setParameter(String name, Object value)</code>: establece los valores de los par\u00e1metros creados en la consulta. Si hemos creado un par\u00e1metro en la consulta <code>:name</code> en el par\u00e1metro del m\u00e9todo se indica unicamente el nombre y no los dos puntos. Existe un versi\u00f3n sobrecargada que en vez de recibir el nombre del par\u00e1metro recibe la posici\u00f3n del mismo.</li> <li><code>Query setFirstResult(int startPosition)</code>: se utiliza para establecer el primer resultado que se debe recuperar. Es \u00fatil para la paginaci\u00f3n de resultados.</li> <li><code>Query setMaxResults(int maxResult)</code>: Este m\u00e9todo se utiliza para limitar el n\u00famero de resultados recuperados. Tambi\u00e9n es \u00fatil para paginaci\u00f3n.</li> <li><code>int executeUpdate()</code>: Este m\u00e9todo se utiliza para ejecutar una consulta de modificaci\u00f3n (por ejemplo, UPDATE o DELETE). Devuelve el n\u00famero de registros afectados por la consulta.</li> </ul> <p>En JPQL podemos ejecutar consultas nombradas. Una consulta nombradas es un consulta ya creada e identificada con un nombre, por lo que primero debe estar definida en el archivo de mapeo, o por el contrario a trav\u00e9s de las anotaciones:</p> XMLAnotaciones   <pre><code>&lt;named-query name=\"Product.findByName\"&gt;\n    &lt;query&gt;\n        SELECT p FROM Product p WHERE p.name = :productName\n    &lt;/query&gt;\n&lt;/named-query&gt;\n</code></pre>   <pre><code>@Entity\n@NamedQuery(\n    name = \"Product.findByName\",\n    query = \"SELECT p FROM Product p WHERE p.name = :productName\"\n)\npublic class Product {\n    // Atributos, constructores y m\u00e9todos de la entidad\n}\n</code></pre>    <p>Para usarlo en java hacemos uso del m\u00e9todo <code>createNamedQuery('name')</code>, siendo name el nombre de la consultada creada:</p> <pre><code>TypedQuery&lt;Product&gt; query = entityManager.createNamedQuery(\"Product.findByName\", Product.class);\nquery.setParameter(\"productName\", \"Laptop\");\nList&lt;Product&gt; products = query.getResultList();\n</code></pre>","text":""},{"location":"bloque_iv/tema_16/page-4/#consultas-nativas","title":"Consultas nativas <p>Las consultas nativas en JPA permiten ejecutar consultas SQL directamente en la base de datos utilizando SQL nativo en lugar de JPQL. Las consultas nativas son \u00fatiles cuando necesitas ejecutar consultas SQL espec\u00edficas de tu base de datos o realizar operaciones que no se pueden expresar f\u00e1cilmente en JPQL.</p> <p>Para ejecutar una consulta nativa en JPA, puedes usar el m\u00e9todo <code>createNativeQuery()</code> proporcionado por la interfaz <code>EntityManager</code>. A continuaci\u00f3n, se muestra un ejemplo de c\u00f3mo ejecutar una consulta SQL nativa en JPA:</p> <pre><code>EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"MyPersistenceUnit\");\nEntityManager em = emf.createEntityManager();\n\n// Ejecutar una consulta SQL nativa para seleccionar todos los productos con un precio mayor a 50\nString sql = \"SELECT * FROM Product WHERE price &gt; 50\";\nList&lt;Object[]&gt; results = em.createNativeQuery(sql).getResultList();\n\nfor (Object[] row : results) {\n    Long id = (Long) row[0];\n    String name = (String) row[1];\n    double price = (Double) row[2];\n    System.out.println(\"Product ID: \" + id + \", Name: \" + name + \", Price: \" + price);\n}\n\nem.close();\nemf.close();\n</code></pre>","text":""},{"location":"bloque_iv/tema_16/page-5/","title":"5 Estrategias de herencia","text":""},{"location":"bloque_iv/tema_16/page-5/#introduccion","title":"Introducci\u00f3n","text":"<p>Java Persistence API (JPA) proporciona varias estrategias para mapear la herencia en un modelo de objetos a una estructura de base de datos relacional. Estas estrategias permiten definir c\u00f3mo se representan las jerarqu\u00edas de clases en la base de datos. A continuaci\u00f3n, se describen las estrategias de herencia comunes en JPA con ejemplos y esquemas:</p> <p>Supongamos que tenemos una jerarqu\u00eda de clases de productos con una clase base <code>Product</code> y dos subclases <code>Book</code> y <code>Electronics</code>. Cada una de las estrategias a continuaci\u00f3n se ilustrar\u00e1 utilizando esta jerarqu\u00eda.</p>"},{"location":"bloque_iv/tema_16/page-5/#herencia-de-tabla-unica-single-table-inheritance","title":"Herencia de tabla \u00fanica (Single Table Inheritance)","text":"<p>En esta estrategia, se utiliza una sola tabla para almacenar todas las entidades de la jerarqu\u00eda. Se agrega una columna discriminadora (generalmente una columna de tipo) para indicar la clase concreta de cada fila.</p> <p>Una columna discriminadora es una columna en una tabla de base de datos que se utilizar para identificar la clase concreta de una entidad en una jerarqu\u00eda de herencia. Por ejemplo, en una tabla producto, en la columna product_type se indica el tipo de producto que es, y ese tipo est\u00e1 relacionado con una subclase de la clase Product.</p> <p>Un valor discriminado es el valor que se le dar\u00e1 en esa columna discriminadora en caso de ser del tipo espec\u00edfico.</p> XMLAnotacionesEsquema <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;entity-mappings xmlns=\"http://xmlns.jcp.org/xml/ns/persistence/orm\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_2.xsd\"\nversion=\"2.2\"&gt;\n&lt;entity class=\"com.example.model.Product\"&gt;\n&lt;table name=\"Product\"/&gt;\n&lt;inheritance strategy=\"SINGLE_TABLE\"/&gt;\n&lt;attributes&gt;\n&lt;id name=\"id\"&gt;\n&lt;generated-value strategy=\"IDENTITY\"/&gt;\n&lt;/id&gt;\n&lt;basic name=\"name\"/&gt;\n&lt;!-- Otros campos y mapeos espec\u00edficos de Product --&gt;\n&lt;/attributes&gt;\n&lt;discriminator-column name=\"product_type\" length=\"1\"/&gt;\n&lt;/entity&gt;\n&lt;entity class=\"com.example.model.Book\"&gt;\n&lt;table name=\"Product\"/&gt;\n&lt;attributes&gt;\n&lt;discriminator-value&gt;B&lt;/discriminator-value&gt;\n&lt;basic name=\"author\"/&gt;\n&lt;!-- Otros campos y mapeos espec\u00edficos de Book --&gt;\n&lt;/attributes&gt;\n&lt;/entity&gt;\n&lt;entity class=\"com.example.model.Electronics\"&gt;\n&lt;table name=\"Product\"/&gt;\n&lt;attributes&gt;\n&lt;discriminator-value&gt;E&lt;/discriminator-value&gt;\n&lt;basic name=\"manufacturer\"/&gt;\n&lt;!-- Otros campos y mapeos espec\u00edficos de Electronics --&gt;\n&lt;/attributes&gt;\n&lt;/entity&gt;\n&lt;/entity-mappings&gt;\n</code></pre> <pre><code>@Entity\n@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n@DiscriminatorColumn(name = \"product_type\")\npublic class Product {\n@Id\n@GeneratedValue\nprivate Long id;\nprivate String name;\n// Otros campos y m\u00e9todos\n}\n@Entity\n@DiscriminatorValue(\"B\")\npublic class Book extends Product {\nprivate String author;\n// Otros campos y m\u00e9todos espec\u00edficos de Book\n}\n@Entity\n@DiscriminatorValue(\"E\")\npublic class Electronics extends Product {\nprivate String manufacturer;\n// Otros campos y m\u00e9todos espec\u00edficos de Electronics\n}\n</code></pre> <pre><code>| ID | NAME    | PRODUCT_TYPE | AUTHOR         | MANUFACTURER   |\n|----|---------|--------------|----------------|----------------|\n| 1  | BookA   | B            | John Doe       |                |\n| 2  | Laptop  | E            |                | Lenovo         |\n</code></pre>"},{"location":"bloque_iv/tema_16/page-5/#herencia-de-tabla-por-clase-table-per-class-inheritance","title":"Herencia de tabla por clase (Table per Class Inheritance)","text":"<p>En esta estrategia, cada clase concreta en la jerarqu\u00eda de herencia tiene su propia tabla en la base de datos. Se crea una tabla separada para cada clase, y todas las tablas comparten una clave principal.</p> XMLAnotacionesEsquema <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;entity-mappings xmlns=\"http://xmlns.jcp.org/xml/ns/persistence/orm\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_2.xsd\"\nversion=\"2.2\"&gt;\n&lt;entity class=\"com.example.model.Product\"&gt;\n&lt;table name=\"Product\"/&gt;\n&lt;inheritance strategy=\"TABLE_PER_CLASS\"/&gt;\n&lt;attributes&gt;\n&lt;id name=\"id\"&gt;\n&lt;generated-value strategy=\"IDENTITY\"/&gt;\n&lt;/id&gt;\n&lt;basic name=\"name\"/&gt;\n&lt;!-- Otros campos y mapeos espec\u00edficos de Product --&gt;\n&lt;/attributes&gt;\n&lt;/entity&gt;\n&lt;entity class=\"com.example.model.Book\"&gt;\n&lt;attributes&gt;\n&lt;basic name=\"author\"/&gt;\n&lt;!-- Otros campos y mapeos espec\u00edficos de Book --&gt;\n&lt;/attributes&gt;\n&lt;/entity&gt;\n&lt;entity class=\"com.example.model.Electronics\"&gt;\n&lt;attributes&gt;\n&lt;basic name=\"manufacturer\"/&gt;\n&lt;!-- Otros campos y mapeos espec\u00edficos de Electronics --&gt;\n&lt;/attributes&gt;\n&lt;/entity&gt;\n&lt;/entity-mappings&gt;\n</code></pre> <pre><code>@Entity\n@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\npublic class Product {\n@Id\n@GeneratedValue\nprivate Long id;\nprivate String name;\n// Otros campos y m\u00e9todos\n}\n@Entity\npublic class Book extends Product {\nprivate String author;\n// Otros campos y m\u00e9todos espec\u00edficos de Book\n}\n@Entity\npublic class Electronics extends Product {\nprivate String manufacturer;\n// Otros campos y m\u00e9todos espec\u00edficos de Electronics\n}\n</code></pre> <pre><code>Product Table:\n| ID | NAME    |\n|----|---------|\n| 1  | BookA   |\n| 2  | Laptop  |\n\nBook Table:\n| ID | AUTHOR         |\n|----|----------------|\n| 1  | John Doe       |\n\nElectronics Table:\n| ID | MANUFACTURER   |\n|----|----------------|\n| 2  | Lenovo         |\n</code></pre>"},{"location":"bloque_iv/tema_16/page-5/#herencia-de-tabla-por-subclase-table-per-subclass-inheritance","title":"Herencia de tabla por subclase (Table per Subclass Inheritance)","text":"<p>En esta estrategia, se crea una tabla para la clase base y una tabla separada para cada subclase. Las tablas de las subclases tienen una relaci\u00f3n uno a uno con la tabla de la clase base utilizando una clave for\u00e1nea.</p> XMLAnotacionesEsquema <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;entity-mappings xmlns=\"http://xmlns.jcp.org/xml/ns/persistence/orm\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_2.xsd\"\nversion=\"2.2\"&gt;\n&lt;entity class=\"com.example.model.Product\"&gt;\n&lt;table name=\"Product\"/&gt;\n&lt;inheritance strategy=\"JOINED\"/&gt;\n&lt;attributes&gt;\n&lt;id name=\"id\"&gt;\n&lt;generated-value strategy=\"IDENTITY\"/&gt;\n&lt;/id&gt;\n&lt;basic name=\"name\"/&gt;\n&lt;!-- Otros campos y mapeos espec\u00edficos de Product --&gt;\n&lt;/attributes&gt;\n&lt;/entity&gt;\n&lt;entity class=\"com.example.model.Book\"&gt;\n&lt;attributes&gt;\n&lt;basic name=\"author\"/&gt;\n&lt;!-- Otros campos y mapeos espec\u00edficos de Book --&gt;\n&lt;/attributes&gt;\n&lt;/entity&gt;\n&lt;entity class=\"com.example.model.Electronics\"&gt;\n&lt;attributes&gt;\n&lt;basic name=\"manufacturer\"/&gt;\n&lt;!-- Otros campos y mapeos espec\u00edficos de Electronics --&gt;\n&lt;/attributes&gt;\n&lt;/entity&gt;\n&lt;/entity-mappings&gt;\n</code></pre> <pre><code>@Entity\n@Inheritance(strategy = InheritanceType.JOINED)\npublic class Product {\n@Id\n@GeneratedValue\nprivate Long id;\nprivate String name;\n// Otros campos y m\u00e9todos\n}\n@Entity\npublic class Book extends Product {\nprivate String author;\n// Otros campos y m\u00e9todos espec\u00edficos de Book\n}\n@Entity\npublic class Electronics extends Product {\nprivate String manufacturer;\n// Otros campos y m\u00e9todos espec\u00edficos de Electronics\n}\n</code></pre> <pre><code>Product Table:\n| ID | NAME    |\n|----|---------|\n| 1  | BookA   |\n| 2  | Laptop  |\n\nBook Table:\n| ID | AUTHOR         |\n|----|----------------|\n| 1  | John Doe       |\n\nElectronics Table:\n| ID | MANUFACTURER   |\n|----|----------------|\n| 2  | Lenovo         |\n</code></pre> <p>Estas son tres de las estrategias de herencia m\u00e1s comunes en JPA. La elecci\u00f3n de la estrategia de herencia depende de tus necesidades espec\u00edficas y del dise\u00f1o de tu base de datos. Cada estrategia tiene sus ventajas y desventajas, por lo que debes seleccionar la que mejor se adapte a tu aplicaci\u00f3n y modelo de datos.</p>"},{"location":"bloque_iv/tema_16/page-6/","title":"6 Relaciones de Entidades","text":"<p>En Java Persistence API (JPA), las relaciones de entidad son una parte fundamental para modelar las relaciones entre las clases de entidad en tu aplicaci\u00f3n y, en \u00faltima instancia, mapearlas a la base de datos. Las relaciones de entidad permiten definir c\u00f3mo las entidades se relacionan entre s\u00ed y c\u00f3mo se almacenan y recuperan en la base de datos.</p> <p>Los tipos de relaciones entre entidades son similares a las relaciones que existen entre entidades en las bases de datos, tenemos relaci\u00f3n de uno a uno, relaci\u00f3n de uno a muchos, relaci\u00f3n de muchos a uno y relaci\u00f3n de muchos a muchos.</p> <p>Cuando se trabaja con relaciones en JPA, una de las entidades involucradas se considera la entidad propietaria de la relaci\u00f3n, mientras que la otra se considera la entidad inversa o no propietaria. La entidad propietaria es la que controla c\u00f3mo se mapea la relaci\u00f3n en la base de datos y, por lo general, es la que contiene la clave for\u00e1nea que establece la relaci\u00f3n.</p>"},{"location":"bloque_iv/tema_16/page-6/#one-to-one","title":"One to one","text":"<p>Es una relaci\u00f3n uno a uno, es decir una entidad se relaciona con exactamente una entidad en el otro lado de la relaci\u00f3n.</p> <p>Con la anotaci\u00f3n <code>@OneToOne</code> (o su etiqueta equivalente <code>&lt;one-to-one&gt;</code>) indicamos el atributo de la clase que tiene relaci\u00f3n.</p> <p>El atributo <code>mappedBy</code> se utiliza en una relaci\u00f3n bidireccional entre entidades en JPA para indicar cu\u00e1l es el campo en la entidad inversa que mapea la relaci\u00f3n. Cuando se establece mappedBy, se est\u00e1 definiendo que la entidad actual no es la propietaria de la relaci\u00f3n y que la propiedad de la relaci\u00f3n se encuentra en la entidad que se especifica en mappedBy.</p> <p>En el ejemplo, tenemos una relaci\u00f3n One-to-One entre las entidades Student y Address. La entidad Student contiene una referencia a la entidad Address, y viceversa, para representar una relaci\u00f3n de estudiante a direcci\u00f3n. Aqu\u00ed, <code>mappedBy</code> no se utiliza en la entidad Student, lo que indica que Student es el propietario de la relaci\u00f3n y es responsable de la clave for\u00e1nea en la tabla de la base de datos.</p> <p>En el caso de la entidad Address, <code>mappedBy = \"address\"</code> indica que la entidad Address no es la propietaria de la relaci\u00f3n. En cambio, la relaci\u00f3n se mapea a trav\u00e9s del campo address en la entidad Student. Esto significa que la entidad Student es la propietaria de la relaci\u00f3n y contiene la clave for\u00e1nea en la tabla de la base de datos que se utiliza para relacionar un estudiante con una direcci\u00f3n.</p> <p>La etiqueta <code>&lt;join-column&gt;</code> se utiliza para personalizar la configuraci\u00f3n de la columna de clave for\u00e1nea en una relaci\u00f3n, pero no es necesaria si deseas utilizar la configuraci\u00f3n predeterminada.</p> AnotacionesXML <pre><code>@Entity\npublic class Student {\n@Id\n@GeneratedValue\nprivate Long id;\nprivate String name;\n@OneToOne\n@JoinColumn(name = \"address_id\")\nprivate Address address;\n// Getters y setters\n}\n@Entity\npublic class Address {\n@Id\n@GeneratedValue\nprivate Long id;\nprivate String street;\nprivate String city;\n@OneToOne(mappedBy = \"address\")\nprivate Student student;\n// Getters y setters\n}\n</code></pre> <pre><code>&lt;entity-mappings xmlns=\"http://xmlns.jcp.org/xml/ns/persistence/orm\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_2.xsd\"\nversion=\"2.2\"&gt;\n&lt;entity class=\"com.example.model.Student\"&gt;\n&lt;attributes&gt;\n&lt;id name=\"id\"&gt;\n&lt;generated-value strategy=\"IDENTITY\"/&gt;\n&lt;/id&gt;\n&lt;basic name=\"name\"/&gt;\n&lt;one-to-one name=\"address\"&gt;\n&lt;join-column name=\"address_id\"/&gt; &lt;/one-to-one&gt;\n&lt;/attributes&gt;\n&lt;/entity&gt;\n&lt;entity class=\"com.example.model.Address\"&gt;\n&lt;attributes&gt;\n&lt;id name=\"id\"&gt;\n&lt;generated-value strategy=\"IDENTITY\"/&gt;\n&lt;/id&gt;\n&lt;basic name=\"street\"/&gt;\n&lt;basic name=\"city\"/&gt;\n&lt;one-to-one name=\"student\" mapped-by=\"address\"/&gt;\n&lt;/attributes&gt;\n&lt;/entity&gt;\n&lt;/entity-mappings&gt;\n</code></pre>"},{"location":"bloque_iv/tema_16/page-6/#one-to-many","title":"One to many","text":"<p>En la relaci\u00f3n uno a muchos, un registro de una entidad se relaciona con varios registros de otra entidad.</p> <p>Con la anotaci\u00f3n <code>@OneToMany</code> (o su etiqueta equivalente <code>&lt;one-to-many&gt;</code>) indicamos el atributo de la clase que tiene relaci\u00f3n de uno a muchos. En la otra entidad (la no propietaria), indicamos la anotaci\u00f3n contraria <code>@ManyToOne</code> (o su equivalente <code>&lt;many-to-one&gt;</code>)</p> AnotacionesXML <pre><code>@Entity\npublic class Department {\n@Id\n@GeneratedValue\nprivate Long id;\nprivate String name;\n@OneToMany(mappedBy = \"department\")\nprivate List&lt;Employee&gt; employees;\n// Getters y setters\n}\n@Entity\npublic class Employee {\n@Id\n@GeneratedValue\nprivate Long id;\nprivate String name;\n@ManyToOne\n@JoinColumn(name = \"department_id\") // Nombre de la columna de clave for\u00e1nea\nprivate Department department;\n// Getters y setters\n}\n</code></pre> <pre><code>&lt;entity-mappings xmlns=\"http://xmlns.jcp.org/xml/ns/persistence/orm\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_2.xsd\"\nversion=\"2.2\"&gt;\n&lt;entity class=\"com.example.model.Department\"&gt;\n&lt;attributes&gt;\n&lt;id name=\"id\"&gt;\n&lt;generated-value strategy=\"IDENTITY\"/&gt;\n&lt;/id&gt;\n&lt;basic name=\"name\"/&gt;\n&lt;one-to-many name=\"employees\"&gt;\n&lt;map-key-column name=\"department_id\"/&gt; &lt;!-- Nombre de la columna de clave for\u00e1nea --&gt;\n&lt;/one-to-many&gt;\n&lt;/attributes&gt;\n&lt;/entity&gt;\n&lt;entity class=\"com.example.model.Employee\"&gt;\n&lt;attributes&gt;\n&lt;id name=\"id\"&gt;\n&lt;generated-value strategy=\"IDENTITY\"/&gt;\n&lt;/id&gt;\n&lt;basic name=\"name\"/&gt;\n&lt;many-to-one name=\"department\"&gt;\n&lt;join-column name=\"department_id\"/&gt; &lt;!-- Nombre de la columna de clave for\u00e1nea --&gt;\n&lt;/many-to-one&gt;\n&lt;/attributes&gt;\n&lt;/entity&gt;\n&lt;/entity-mappings&gt;\n</code></pre> <p>En el ejemplo anterior, Employee es la entidad propietaria de la relaci\u00f3n One-to-Many y la entidad Department usa la anotaci\u00f3n con el <code>mappedBy</code>. La entidad Employee contiene una clave for\u00e1nea llamada department_id que referencia al departamento al que pertenece.</p>"},{"location":"bloque_iv/tema_16/page-6/#many-to-many","title":"Many to many","text":"<p>En la relaci\u00f3n muchos a muchos, varios registros de una entidad se relacionan con varios registros de otra entidad.</p> <p>Con la anotaci\u00f3n <code>@ManyToMany</code> (o su etiqueta equivalente <code>&lt;many-to-many&gt;</code>) indicamos el atributo de la clase que tiene relaci\u00f3n de muchos a muchos.</p> AnotacionesXML <pre><code>@Entity\npublic class Student {\n@Id\n@GeneratedValue\nprivate Long id;\nprivate String name;\n@ManyToMany\n@JoinTable(name = \"student_course\",\njoinColumns = @JoinColumn(name = \"student_id\"),\ninverseJoinColumns = @JoinColumn(name = \"course_id\"))\nprivate List&lt;Course&gt; courses;\n// Getters y setters\n}\n@Entity\npublic class Course {\n@Id\n@GeneratedValue\nprivate Long id;\nprivate String name;\n@ManyToMany(mappedBy = \"courses\")\nprivate List&lt;Student&gt; students;\n// Getters y setters\n}\n</code></pre> <pre><code>&lt;entity-mappings xmlns=\"http://xmlns.jcp.org/xml/ns/persistence/orm\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_2.xsd\"\nversion=\"2.2\"&gt;\n&lt;entity class=\"com.example.model.Student\"&gt;\n&lt;attributes&gt;\n&lt;id name=\"id\"&gt;\n&lt;generated-value strategy=\"IDENTITY\"/&gt;\n&lt;/id&gt;\n&lt;basic name=\"name\"/&gt;\n&lt;many-to-many name=\"courses\"&gt;\n&lt;join-table name=\"student_course\"&gt;\n&lt;join-column name=\"student_id\"/&gt;\n&lt;inverse-join-column name=\"course_id\"/&gt;\n&lt;/join-table&gt;\n&lt;/many-to-many&gt;\n&lt;/attributes&gt;\n&lt;/entity&gt;\n&lt;entity class=\"com.example.model.Course\"&gt;\n&lt;attributes&gt;\n&lt;id name=\"id\"&gt;\n&lt;generated-value strategy=\"IDENTITY\"/&gt;\n&lt;/id&gt;\n&lt;basic name=\"name\"/&gt;\n&lt;many-to-many name=\"students\" mapped-by=\"courses\"/&gt;\n&lt;/attributes&gt;\n&lt;/entity&gt;\n&lt;/entity-mappings&gt;\n</code></pre> <p>En este ejemplo, tanto Student como Course son propietarios de la relaci\u00f3n Many-to-Many. La anotaci\u00f3n <code>@ManyToMany</code> se utiliza en ambas entidades para establecer la relaci\u00f3n, y se utiliza <code>@JoinTable</code> para especificar la tabla de uni\u00f3n (student_course) que asocia las dos entidades. Esta anotaci\u00f3n permite especificar el nombre de la tabla intermedia, as\u00ed como las columnas de clave for\u00e1nea (join columns) que conectan las tablas de las entidades relacionadas.</p> <p>Explicaci\u00f3n de los atributos de <code>@JoinTable</code>:</p> <ul> <li><code>name</code>: Especifica el nombre de la tabla intermedia que se crea para la relaci\u00f3n Many-to-Many. En este caso, la tabla intermedia se llama \"student_course\".</li> <li><code>joinColumns</code>: Especifica las columnas de clave for\u00e1nea en la tabla intermedia que hacen referencia a la entidad actual (Student). En este caso, la columna de clave for\u00e1nea en la tabla intermedia \"student_course\" que se relaciona con la entidad Student se llama \"student_id\".</li> <li><code>inverseJoinColumns</code>: Especifica las columnas de clave for\u00e1nea en la tabla intermedia que hacen referencia a la entidad relacionada (Course). En este caso, la columna de clave for\u00e1nea en la tabla intermedia \"student_course\" que se relaciona con la entidad Course se llama \"course_id\".</li> </ul> <p>La anotaci\u00f3n @JoinTable se utiliza en una de las dos entidades que participan en una relaci\u00f3n Many-to-Many para configurar la tabla de uni\u00f3n (tabla intermedia) que conecta las dos entidades. Generalmente, se coloca en la entidad propietaria de la relaci\u00f3n o en la entidad que tiene m\u00e1s control sobre la configuraci\u00f3n de la tabla de uni\u00f3n.</p> <p>La otra entidad, aunque a\u00fan se considera propietaria de la relaci\u00f3n, no necesariamente contendr\u00e1 <code>@JoinTable</code>, ya que asumir\u00e1 la configuraci\u00f3n definida en la entidad principal propietaria. En su lugar, la otra entidad puede utilizar <code>mapped-by</code> para establecer la relaci\u00f3n inversa y, por lo tanto, no necesita especificar nuevamente los detalles de la tabla de uni\u00f3n.</p>"},{"location":"bloque_iv/tema_16/page-7/","title":"7 Proyecto Students con JPA","text":""},{"location":"bloque_iv/tema_16/page-7/#introduccion","title":"Introducci\u00f3n","text":"<p>Una vez conocido todos los conceptos y relaciones pertinentes, es momento de aplicar dichos conocimientos a nuestro proyecto Bookstore, que en la \u00faltima versi\u00f3n hab\u00eda sido a\u00f1adida el patr\u00f3n de dise\u00f1o Repository. En esta versi\u00f3n, es indiferente el tipo de patr\u00f3n de dise\u00f1o a usar, ya que para lo que nos compete el funcionamiento es bastante similar.</p>"},{"location":"bloque_iv/tema_16/page-7/#configuracion-de-dependencias","title":"Configuraci\u00f3n de dependencias","text":"<p>Si usamos un gestor de dependencias como Maven o Gradle, es necesario importar los artifacts, tanto de Hibernate como de JPA, as\u00ed como el conector de la base de datos:</p> MavenGradle <pre><code>&lt;dependencies&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;mysql&lt;/groupId&gt;\n&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n&lt;version&gt;8.0.33&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;javax.persistence&lt;/groupId&gt;\n&lt;artifactId&gt;javax.persistence-api&lt;/artifactId&gt;\n&lt;version&gt;2.2&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.hibernate&lt;/groupId&gt;\n&lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;\n&lt;version&gt;6.2.7.Final&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <pre><code>dependencies {\nimplementation 'javax.persistence:javax.persistence-api:2.2'\nimplementation 'org.hibernate:hibernate-core:5.5.6.Final'\n}\n</code></pre>"},{"location":"bloque_iv/tema_16/page-7/#configuracion-de-las-orm","title":"Configuraci\u00f3n de las ORM","text":"<p>Podemos usar nuestras clases POJOs con anotaciones o haciendo uso del XML:</p> StudentCourseInscription ORMAnnotation <pre><code>&lt;entity-mappings xmlns=\"https://jakarta.ee/xml/ns/persistence/orm\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"https://jakarta.ee/xml/ns/persistence/orm https://jakarta.ee/xml/ns/persistence/orm/orm_3_0.xsd\"\nversion=\"3.0\"&gt;\n&lt;entity class=\"com.irudev.data.entity.Student\" &gt;\n&lt;table name=\"student\"/&gt;\n&lt;attributes&gt;\n&lt;id name=\"id\"&gt;\n&lt;column name=\"id\"/&gt;\n&lt;generated-value strategy=\"IDENTITY\"/&gt;\n&lt;/id&gt;\n&lt;basic name=\"name\"&gt;\n&lt;column name=\"name\"/&gt;\n&lt;/basic&gt;\n&lt;basic name=\"age\"&gt;\n&lt;column name=\"age\"/&gt;\n&lt;/basic&gt;\n&lt;/attributes&gt;\n&lt;/entity&gt;\n&lt;/entity-mappings&gt;\n</code></pre> <pre><code>@Entity\npublic class Student implements Comparable&lt;Student&gt;{\n@Id\n@GeneratedValue(strategy = GenerationType.IDENTITY)\nprivate Integer id;\nprivate String name;\nprivate int age;\npublic Student(){}\npublic Student(Integer id, String name, int age){\nthis.id = id;\nthis.name = name;\nthis.age = age;\n}\n// ...\n}\n</code></pre> ORMAnnotation <pre><code>&lt;entity-mappings xmlns=\"http://xmlns.jcp.org/xml/ns/persistence/orm\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence/orm\n                                     http://xmlns.jcp.org/xml/ns/persistence/orm_2_2.xsd\"\nversion=\"2.2\"&gt;\n&lt;entity class=\"com.irudev.data.entity.Course\"&gt;\n&lt;table name=\"course\"/&gt;\n&lt;attributes&gt;\n&lt;id name=\"id\"&gt;\n&lt;column name=\"id\"/&gt;\n&lt;generated-value strategy=\"IDENTITY\"/&gt;\n&lt;/id&gt;\n&lt;basic name=\"name\"&gt;\n&lt;column name=\"name\"/&gt;\n&lt;/basic&gt;\n&lt;basic name=\"credits\"&gt;\n&lt;column name=\"credits\"/&gt;\n&lt;/basic&gt;\n&lt;/attributes&gt;\n&lt;/entity&gt;\n&lt;/entity-mappings&gt;\n</code></pre> <pre><code>@Entity\npublic class Course implements Comparable&lt;Course&gt;{\n@Id\n@GeneratedValue(strategy = GenerationType.IDENTITY)\nprivate Integer id;\nprivate String name;\nprivate int credits;\npublic Course(){}\n// ...\n}\n</code></pre> ORMAnnotation <pre><code>&lt;entity-mappings xmlns=\"http://xmlns.jcp.org/xml/ns/persistence/orm\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence/orm\n                                     http://xmlns.jcp.org/xml/ns/persistence/orm_2_2.xsd\"\nversion=\"2.2\"&gt;\n&lt;entity class=\"com.irudev.data.entity.Inscription\"&gt;\n&lt;table name=\"inscription\"/&gt;\n&lt;attributes&gt;\n&lt;id name=\"id\"&gt;\n&lt;column name=\"id\"/&gt;\n&lt;generated-value strategy=\"IDENTITY\"/&gt;\n&lt;/id&gt;\n&lt;many-to-one name=\"student\" fetch=\"EAGER\"&gt;\n&lt;join-column name=\"idStudent\"/&gt;\n&lt;/many-to-one&gt;\n&lt;many-to-one name=\"course\" fetch=\"EAGER\"&gt;\n&lt;join-column name=\"idCourse\"/&gt;\n&lt;/many-to-one&gt;\n&lt;/attributes&gt;\n&lt;/entity&gt;\n&lt;/entity-mappings&gt;\n</code></pre> <pre><code>@Entity\npublic class Inscription implements Comparable&lt;Inscription&gt;{\n@Id\n@GeneratedValue(strategy = GenerationType.IDENTITY)\nprivate Integer id;\n@ManyToOne(fetch = FetchType.EAGER)\n@JoinColumn(name = \"idStudent\")\nprivate Student student;\n@ManyToOne(fetch = FetchType.EAGER)\n@JoinColumn(name = \"idCourse\")\nprivate Course course;\npublic Inscription(){}\n// ...\n}\n</code></pre>"},{"location":"bloque_iv/tema_16/page-7/#archivo-de-configuracion","title":"Archivo de configuraci\u00f3n","text":"<p>Debemos de crear el archivo de configuraci\u00f3n persistence xml</p> <pre><code>&lt;!-- persistence.xml --&gt;\n&lt;persistence version=\"3.0\" xmlns=\"https://jakarta.ee/xml/ns/persistence\"\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"https://jakarta.ee/xml/ns/persistence https://jakarta.ee/xml/ns/persistence/persistence_3_0.xsd\"&gt;\n&lt;persistence-unit name=\"myPersistenceUnit\"&gt;\n&lt;!-- Asignaci\u00f3n de Hibernate como JPA Provider --&gt;\n&lt;provider&gt;org.hibernate.jpa.HibernatePersistenceProvider&lt;/provider&gt;\n&lt;!-- Mapeo ORM --&gt;\n&lt;mapping-file&gt;META-INF/orm/Student.xml&lt;/mapping-file&gt;\n&lt;mapping-file&gt;META-INF/orm/Course.xml&lt;/mapping-file&gt;\n&lt;mapping-file&gt;META-INF/orm/Inscription.xml&lt;/mapping-file&gt;\n&lt;!-- Configuraci\u00f3n de las propiedades --&gt;\n&lt;properties&gt;\n&lt;!-- Configuraci\u00f3n de la fuente de datos para MySQL --&gt;\n&lt;property name=\"javax.persistence.jdbc.driver\" value=\"com.mysql.cj.jdbc.Driver\"/&gt;\n&lt;property name=\"javax.persistence.jdbc.url\" value=\"jdbc:mysql://localhost:3306/students?useSSL=false&amp;amp;serverTimezone=UTC\"/&gt;\n&lt;property name=\"javax.persistence.jdbc.user\" value=\"root\"/&gt;\n&lt;property name=\"javax.persistence.jdbc.password\" value=\"\"/&gt;\n&lt;!-- Configuraci\u00f3n de Hibernate --&gt;\n&lt;property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.MySQLDialect\"/&gt;\n&lt;property name=\"hibernate.show_sql\" value=\"true\"/&gt;\n&lt;property name=\"hibernate.hbm2ddl.auto\" value=\"update\"/&gt;\n&lt;/properties&gt;\n&lt;/persistence-unit&gt;\n&lt;/persistence&gt;\n</code></pre> <p>Importante</p> <p>En el fichero persistence.xml ser\u00e1 obligatorio indicar el <code>mapping-file</code> si se usa archivos xml para la ORM en lugar de anotaciones</p>"},{"location":"bloque_iv/tema_16/page-7/#modelos","title":"Modelos","text":"<p>Al no utilizar los m\u00e9todos ni crear las conexiones, los modelos deben cambiar:</p> StudentCourseInscription <pre><code>public class JDBCStudentRepository implements StudentRepository {\nprivate final EntityManager manager;\npublic JDBCStudentRepository(EntityManager manager){\nthis.manager = manager;\n}\n@Override\npublic Student getById(Integer id) {\nreturn manager.find(Student.class, id);\n}\n@Override\npublic List&lt;Student&gt; getAll() {\nreturn manager.createQuery(\"select s from Student s\", Student.class).getResultList();\n}\n@Override\npublic boolean save(Student student) {\ntry{\nmanager.getTransaction().begin();\nmanager.persist(student);\nmanager.getTransaction().commit();\nreturn true;\n}catch (Exception e){\nreturn false;\n}\n}\n@Override\npublic boolean update(Student student) {\ntry{\nmanager.getTransaction().begin();\nmanager.merge(student);\nmanager.getTransaction().commit();\nreturn true;\n}catch (Exception e){\nreturn false;\n}\n}\n@Override\npublic boolean delete(Student student) {\ntry{\nmanager.getTransaction().begin();\nmanager.remove(student);\nmanager.getTransaction().commit();\nreturn true;\n}catch (Exception e){\nreturn false;\n}\n}\n}\n</code></pre> <pre><code>public class JDBCCourseRepository implements CourseRepository {\nprivate final EntityManager manager;\npublic JDBCCourseRepository(EntityManager manager) {\nthis.manager = manager;\n}\n@Override\npublic Course getById(Integer id) {\nreturn manager.find(Course.class, id);\n}\n@Override\npublic List&lt;Course&gt; getAll() {\nreturn manager.createQuery(\"select c from Course c\", Course.class).getResultList();\n}\n@Override\npublic boolean save(Course course) {\ntry{\nmanager.getTransaction().begin();\nmanager.persist(course);\nmanager.getTransaction().commit();\nreturn true;\n}catch (Exception e){\nreturn false;\n}\n}\n@Override\npublic boolean update(Course course) {\ntry{\nmanager.getTransaction().begin();\nmanager.merge(course);\nmanager.getTransaction().commit();\nreturn true;\n}catch (Exception e){\nreturn false;\n}\n}\n@Override\npublic boolean delete(Course course) {\ntry{\nmanager.getTransaction().begin();\nmanager.remove(course);\nmanager.getTransaction().commit();\nreturn true;\n}catch (Exception e){\nreturn false;\n}\n}\n}\n</code></pre> <pre><code>public class JDBCInscriptionRepository implements InscriptionRepository {\nprivate final EntityManager manager;\npublic JDBCInscriptionRepository(EntityManager manager) {\nthis.manager = manager;\n}\n@Override\npublic Inscription getById(Integer id) {\nreturn manager.find(Inscription.class, id);\n}\n@Override\npublic List&lt;Inscription&gt; getAll() {\nreturn manager.createQuery(\"select i from Inscription i\", Inscription.class).getResultList();\n}\n@Override\npublic boolean save(Inscription inscription) {\ntry{\nmanager.getTransaction().begin();\nmanager.persist(inscription);\nmanager.getTransaction().commit();\nreturn true;\n}catch (Exception e){\nreturn false;\n}\n}\n@Override\npublic boolean delete(Inscription inscription) {\ntry{\nmanager.getTransaction().begin();\nmanager.remove(inscription);\nmanager.getTransaction().commit();\nreturn true;\n}catch (Exception e){\nreturn false;\n}\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_16/page-8/","title":"8 Hibernate","text":""},{"location":"bloque_iv/tema_16/page-8/#introduccion","title":"Introducci\u00f3n","text":"<p>Hibernate es un proveedor de JPA, uno de los m\u00e1s populares y ampliamente utilizados en la comunidad de desarrollo de Java. Act\u00faa como una implementaci\u00f3n de la especificaci\u00f3n JPA, permitiendo a los desarrolladores interactuar con bases de datos relacionales utilizando entidades mapeadas en objetos Java.</p> <p>Hibernate ofrece una serie de caracter\u00edsticas poderosas para el mapeo objeto-relacional, incluyendo:</p> <ol> <li>Mapeo de entidades: Hibernate permite mapear clases Java a tablas en la base de datos y atributos de clase a columnas en esas tablas.</li> <li>Consultas JPQL: Proporciona un lenguaje de consulta llamado JPQL (Java Persistence Query Language) que permite realizar consultas orientadas a objetos en lugar de escribir SQL directamente.</li> <li>Gesti\u00f3n de transacciones: Hibernate facilita la gesti\u00f3n de transacciones en aplicaciones JPA, lo que garantiza la consistencia y la integridad de los datos.</li> <li>Cach\u00e9 de primer y segundo nivel: Ofrece mecanismos de cach\u00e9 que pueden mejorar el rendimiento de las consultas y reducir la carga en la base de datos.</li> <li>Relaciones: Hibernate admite una variedad de tipos de relaciones, incluyendo relaciones uno a uno, uno a muchos y muchos a muchos, lo que facilita el modelado de datos complejos.</li> <li>Herencia: Permite mapear jerarqu\u00edas de clases y herencia de manera eficiente.</li> <li>Integraci\u00f3n con Java EE y Spring: Hibernate se puede integrar con entornos de desarrollo empresarial como Java EE y marcos de desarrollo como Spring.</li> </ol> <p>Es importante destacar que Hibernate no es el \u00fanico proveedor de JPA disponible. Otros proveedores, como EclipseLink y Apache OpenJPA, tambi\u00e9n implementan la especificaci\u00f3n JPA y proporcionan funcionalidades similares. La elecci\u00f3n de un proveedor espec\u00edfico depende de los requisitos del proyecto y las preferencias del desarrollador. Hibernate es popular debido a su amplia comunidad de usuarios, su amplia adopci\u00f3n y su rico conjunto de caracter\u00edsticas.</p>"},{"location":"bloque_iv/tema_16/page-8/#arquitectura-hibernate","title":"Arquitectura Hibernate","text":"<p>Hibernate parte de la filosof\u00eda de mapear objetos Java (POJO). Para almacenar y recuperar estos objetos de la base de datos, el desarrollador debe mantener una conversaci\u00f3n con el motor de Hibernate mediante un objeto especial que es la sesi\u00f3n (equiparable al concepto de conexi\u00f3n de JDBC). Igual que con las conexiones JDBC, las sesiones se deben crear y cerrar.</p> <p> Figura 6 - Arquitectura hibernate</p> <p>La clase <code>Session</code> pertenece al paquete <code>org.hibernate.Session</code> y ofrece m\u00e9todos como <code>save(Object object)</code>, <code>createQuery(String sql)</code>, <code>beginTransaction()</code>, <code>close()</code>, etc, para interactuar con la base de datos.</p> <p>Por ejemplo, podemos insertar un objeto con <code>save(Object o)</code> sin necesidad de especificar una sentencia SQL. Una instancia de <code>Session</code> no consume mucha memoria y su creaci\u00f3n y destrucci\u00f3n es muy eficiente, lo que es muy importante ya que podemos crear y destruir sesiones todo el tiempo, quiz\u00e1s en cada petici\u00f3n.</p> <p>Las interfaces de hibernate son las siguientes:</p> <ul> <li>La interfaz <code>SessionFactory</code> permite obtener instancias <code>Session</code>. Esta interfaz debe compartirse entre muchos hilos de ejecuci\u00f3n. Por regla general hay una \u00fanica <code>SessionFactory</code> para toda la aplicaci\u00f3n, creada durante la inicializaci\u00f3n de la misma, y se utilizar para crear todas las sesiones relacionadas con un contexto dado. Si la aplicaci\u00f3n accede a varias bases de datos se necesitar\u00e1 una <code>SessionFactory</code> por cada base de datos.</li> <li>La interfaz <code>Configuration</code> se utiliza para configurar Hibernate. La aplicaci\u00f3n la utiliza para especificar la ubicaci\u00f3n de los documentos que indican el mapeado de los objetos y propiedades especificas de Hibernate, y a continuaci\u00f3n crea la <code>SessionFactory</code>.</li> <li>La interfaz <code>Query</code> permite realizar consultar a la base de datos y controla c\u00f3mo se ejecutan dichas consultas. Las consultas se escriben en HQL o en el dialecto SQL nativo de la base de datos que estemos utilizando. Una instancia de esta interfaz se utiliza para enlazar los par\u00e1metros de la consulta, limitar el n\u00famero de resultados devueltos y para ejecutar dicha consulta.</li> <li> <p>La interfaz <code>Transaction</code> nos permite asegurar que cualquier error que ocurra entre el inicio y el final de la transacci\u00f3n produzca el fallo de la misma.</p> <p> <pre><code>flowchart\n    cfg[\"Configuration\n    Configuration cfg = new Configuration().configure();\"]\n    factory[\"SessionFactory\n    SessionFactory sessionFactory = cfg.buildSessionFactory();\"]\n    db[(Database)]\n    session1[\"Session\n    Session session = sessionFactory.openSession();\"]\n    session2[\"Session\n    Session session = sessionFactory.openSession();\"]\n\n    subgraph one\n    trans1[\"Transaction\n    Transaction tx = session.beginTransaction\"]\n    subgraph two LR\n    save1[\"save\"]\n    load1[\"load\"]\n    delete1[\"delete\"]\n    get1[\"get\"]\n    update1[\"update\"]\n    end\n    subgraph three LR \n    commit1[\"tx.commit();\"]\n    rollback1[\"tx.rollback();\"]\n    end\n    close1[\"session.close();\"]\n    end\n\n    subgraph four\n    trans1[\"**Transaction**\n    Transaction tx = session.beginTransaction\"]\n    subgraph five LR\n    save2[\"save\"]\n    load2[\"load\"]\n    delete2[\"delete\"]\n    get2[\"get\"]\n    update2[\"update\"]\n    end\n    subgraph six LR \n    commit2[\"tx.commit();\"]\n    rollback2[\"tx.rollback();\"]\n    end\n    close2[\"session.close();\"]\n    end\n\n    cfg --&gt; factory\n    factory --&gt; session1\n    factory --&gt; session2\n    factory --&gt; db\n    session1 --&gt; one\n    session2 --&gt; four</code></pre> Figura 7 - Aplicaci\u00f3n con Hibernate </p> </li> </ul>"},{"location":"bloque_iv/tema_16/page-8/#configuracion","title":"Configuraci\u00f3n","text":"<p>El fichero de configuraci\u00f3n de Hibernate es un archivo XML que contiene una serie de elemento que indican sus propiedad, como el protocolo a seguir, y los datos de conexi\u00f3n.</p> <p>El fichero de configuraci\u00f3n debe ir en la ra\u00edz del proyecto o en la carpeta resources si se usa un gestor de proyectos. El nombre del fichero debe ser hibernate.cfg.xml</p> <pre><code>&lt;hibernate-configuration&gt;\n&lt;session-factory name=\"MyConnection\"&gt;\n&lt;property name=\"hibernate.connection.drive_class\"&gt;com.mysql.jdbc.Driver&lt;/property&gt;\n&lt;property name=\"hibernate.connection.username\"&gt;root&lt;/property&gt;\n&lt;property name=\"hibernate.connection.password\"&gt;&lt;/property&gt;\n&lt;property name=\"hibernate.connection.url\"&gt;jdbc:mysql://localhost/horario&lt;/property&gt;\n&lt;property name=\"hibernate.dialect\"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;\n&lt;/session-factory&gt;\n&lt;/hibernate-configuration&gt;\n</code></pre> <p>En el ejemplo anterior vemos como tenemos una factor\u00eda de sesi\u00f3n llama MyConnection con las propiedades pertinentes para una conexi\u00f3n a la base de datos horario.</p> <p>Este archivo de configuraci\u00f3n servir\u00e1 como sustituto del archivo de configuraci\u00f3n de la JPA est\u00e1ndar (persistence.xml).</p> <p>Para poder indicar el mapeo de una entidad, se usar\u00e1 la etiqueta <code>&lt;mapping&gt;</code>. Se utilizar\u00e1 junto el atributo <code>class</code> cuando el mapeo de una entidad viene determinado por una clase, mientras que con el atributo <code>resource</code> se indicar\u00e1 el archivo ORM que define el mapeo.</p> <pre><code>&lt;mapping class=\"com.package.CLASS\"/&gt;\n&lt;mapping resource=\"url/to/ORM.xml\"/&gt;\n</code></pre> <p>Importante</p> <p>Las clases que funcione como entidades deben implementar la interfaz <code>Serializable</code>. Adem\u00e1s se recomiendan los est\u00e1ndares de renombrado de JavaBean.</p>"},{"location":"bloque_iv/tema_16/page-8/#archivos-de-mapeo","title":"Archivos de mapeo","text":"<p>A la hora de realizar el mapeo de una entidad a trav\u00e9s de anotaciones, no es necesario realizar ning\u00fan cambio, ya que Hibernate usa las anotaciones del paquete de JPA. Mientras que si queremos mapear una entidad a trav\u00e9s un archivo XML, podemos usar la nomenclatura est\u00e1ndar ed la JPA o una espec\u00edfica para Hibernate (recomendado).</p> <p>Un ejemplo de una configuraci\u00f3n espec\u00edfica es:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"&gt;\n&lt;hibernate-mapping&gt;\n&lt;class name=\"ejemplo01.Profesor\" table=\"Profesor\" &gt;\n&lt;id column=\"Id\" name=\"id\" type=\"integer\"&gt;\n&lt;generator class=\"identity\"/&gt;\n&lt;/id&gt;\n&lt;property name=\"nombre\" /&gt;\n&lt;property name=\"ape1\" /&gt;\n&lt;property name=\"ape2\" /&gt;\n&lt;/class&gt;\n&lt;/hibernate-mapping&gt;\n</code></pre> <p>De este ejemplo podemos destacar las siguientes etiqueta:</p> <ul> <li><code>class</code>: indica la clase que hace de entidad. Con el atributo <code>name</code> indicamos la ruta de paquetes del fichero Java y con el atributo <code>table</code> indica el nombre de la tabla de la base de datos con la que est\u00e1 relacionada.</li> <li><code>id</code>: indica el atributo de la clase que act\u00faa como primary key. Con el atributo <code>column</code> indicamos el nombre de la columna de la base de datos a la que hace referencia, y con el atributo <code>name</code> el nombre del atributo de la clase. Adem\u00e1s con <code>type</code> podemos indicar el tipo de dato.</li> <li><code>property</code>: indica los atributos de las clases. Tambi\u00e9n tiene el atributo <code>access</code> al igual que en los archivos ORM est\u00e1ndar pero en esta ocasi\u00f3n se usa por defecto el valor property</li> <li><code>generator</code>: indica la forma en la que se va a generar la clave primaria. Los valores posibles son:<ul> <li>increment: genera identificadores.</li> <li>identity: admite columnas de identidad de DB2, MySQL, MS SQL Server, Sybase y HypersonicSQL.</li> <li>sequence: usa una secuencia en DB2, PostgreSQL, Oracle, SAP DB, McKoi o un generador en Interbase.</li> </ul> </li> </ul> <p>Info</p> <p>Para m\u00e1s informaci\u00f3n de las etiquetas y de los atributos visite: http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd</p> <p>Para las relaciones tenemos las siguientes etiquetas:</p> <ul> <li><code>many-to-one</code>: indica una relaci\u00f3n de muchos a uno. Algunos de sus atributos m\u00e1s comunes son: <code>name</code>, <code>column</code>, <code>class</code>.</li> <li><code>one-to-one</code>: indica una relaci\u00f3n de uno a uno.</li> <li><code>join</code>: mapea las propiedades de una clase a varias tablas que tengan relaci\u00f3n uno-a-uno.</li> </ul> <p>Para poder indicar una relaci\u00f3n <code>many-to-many</code> hacemos uso de las etiquetas <code>set</code>, <code>list</code> o <code>map</code>. Los atributos m\u00e1s comunes son:</p> <ul> <li><code>name</code>: indica el nombre del atributo de la clase que representa la lista.</li> <li><code>table</code>: indica el nombre de la tabla que representa la relaci\u00f3n. Por ejemplo, si tenemos una tabla product y otra customer, la tabla que representa la relaci\u00f3n puede ser cart.</li> </ul> <p>Dentro de estas etiquetas podemos encontrar otras como:</p> <ul> <li><code>key</code>: indica la clave de la relaci\u00f3n, normalmente representa a la clave primaria de la entidad. En su interior se debe usar la etiqueta <code>column</code> para indicar a que columna hace referencia.</li> <li><code>many-to-many</code>: indica la otra clase identidad que debe mapear, si la relaci\u00f3n es many to many.</li> <li><code>one-to-many</code>: indica la clase a la que hace referencia, pero en esta ocasi\u00f3n la relaci\u00f3n es one to many.</li> </ul> <p>Este ejemplo trata dos entidad, Stock y StockDailyRecord, cuya relaci\u00f3n es de uno a muchos. La clase Stock representa el stock de un producto, mientras que StockDailyRecord representa los cambios de stock diarios:</p> StockStockDailyRecord <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n\"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd\"&gt;\n&lt;hibernate-mapping&gt;\n&lt;class name=\"com.example.stock.Stock\" table=\"stock\" catalog=\"example_db\"&gt;\n&lt;id name=\"stockId\" type=\"java.lang.Integer\"&gt;\n&lt;column name=\"STOCK_ID\" /&gt;\n&lt;generator class=\"identity\" /&gt;\n&lt;/id&gt;\n&lt;property name=\"stockCode\" type=\"string\"&gt;\n&lt;column name=\"STOCK_CODE\" length=\"10\" not-null=\"true\" unique=\"true\" /&gt;\n&lt;/property&gt;\n&lt;property name=\"stockName\" type=\"string\"&gt;\n&lt;column name=\"STOCK_NAME\" length=\"20\" not-null=\"true\" unique=\"true\" /&gt;\n&lt;/property&gt;\n&lt;set name=\"stockDailyRecords\" table=\"stock_daily_record\"\ninverse=\"true\" lazy=\"true\" fetch=\"select\"&gt;\n&lt;key&gt;\n&lt;column name=\"STOCK_ID\" not-null=\"true\" /&gt;\n&lt;/key&gt;\n&lt;one-to-many class=\"com.example.stock.StockDailyRecord\" /&gt;\n&lt;/set&gt;\n&lt;/class&gt;\n&lt;/hibernate-mapping&gt;\n</code></pre> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n\"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd\"&gt;\n&lt;hibernate-mapping&gt;\n&lt;class name=\"com.example.stock.StockDailyRecord\" table=\"stock_daily_record\" catalog=\"example_db\"&gt;\n&lt;id name=\"recordId\" type=\"java.lang.Integer\"&gt;\n&lt;column name=\"RECORD_ID\" /&gt;\n&lt;generator class=\"identity\" /&gt;\n&lt;/id&gt;\n&lt;many-to-one name=\"stock\" class=\"com.example.stock.Stock\" fetch=\"select\"&gt;\n&lt;column name=\"STOCK_ID\" not-null=\"true\" /&gt;\n&lt;/many-to-one&gt;\n&lt;property name=\"priceOpen\" type=\"java.lang.Float\"&gt;\n&lt;column name=\"PRICE_OPEN\" precision=\"6\" /&gt;\n&lt;/property&gt;\n&lt;property name=\"priceClose\" type=\"java.lang.Float\"&gt;\n&lt;column name=\"PRICE_CLOSE\" precision=\"6\" /&gt;\n&lt;/property&gt;\n&lt;property name=\"priceChange\" type=\"java.lang.Float\"&gt;\n&lt;column name=\"PRICE_CHANGE\" precision=\"6\" /&gt;\n&lt;/property&gt;\n&lt;property name=\"volume\" type=\"java.lang.Long\"&gt;\n&lt;column name=\"VOLUME\" /&gt;\n&lt;/property&gt;\n&lt;property name=\"date\" type=\"date\"&gt;\n&lt;column name=\"DATE\" length=\"10\" not-null=\"true\" unique=\"true\" /&gt;\n&lt;/property&gt;\n&lt;/class&gt;\n&lt;/hibernate-mapping&gt;\n</code></pre>"},{"location":"bloque_iv/tema_16/page-8/#sessions-y-objetos-hibernate","title":"Sessions y objetos hibernate","text":"<p>Para trabajar con hibernate se recomienda tener una clase que se encargue de crear una <code>SessionFactory</code>, se recomienda hacerlo con un patr\u00f3n Singleton:</p> <pre><code>public class HibernateUtil{\nprivate static final SessionFactory sessionFactory = buildSessionFactory();\nprivate static SessionFactory buildSessionFactory(){\ntry{\nConfiguration configuration = new Configuration().configure()\nreturn configuration.buildSessionFactory(new StandardServiceRegistryBuilder().configure().build());\n} catch (Throwable ex){\nSystem.err.println(\"Initial SessionFactory creation failed.\" + ex);\nthrow new ExceptionInInitializerError(ex);\n}\n}\npublic static SessionFactory getSessionFactory(){\nreturn sessionFactory;\n}\n}\n</code></pre> <p>Para poder obtener la sesi\u00f3n actual, ser\u00e1 necesario cargar el fichero de configuraci\u00f3n hibernate.cfg.xml. Para ello se llama a <code>new Configuration().configure()</code>, y de esta forma se inicializa el entorno de Hibernate. Se necesita crear un objeto <code>StandardServiceRegistry</code>que contiene una lista de servicios que utiliza Hibernate para crear el <code>SessionFactory</code>.</p>"},{"location":"bloque_iv/tema_16/page-8/#transacciones","title":"Transacciones","text":"<p>Un objeto <code>Session</code> de Hibernate representa una \u00fanica unidad de trabajo para un almac\u00e9n de datos dado y lo abre un ejemplar de <code>SessionFactory</code> (<code>openSession()</code>). Al crear la sesi\u00f3n se crea la transacci\u00f3n para dicha sesi\u00f3n (<code>close()</code>). Se deben cerrar las sesiones cuando se haya completado todo el trabajo de una transacci\u00f3n:</p> <pre><code>// Obtener la sesi\u00f3n\nSessionFactory factory = HibernateUtil.getSessionFactory();\n// Crear la sesi\u00f3n\nSession session = factory.openSession();\n// Crear transacci\u00f3n\nTransaction tx = session.beginTransaction();\n// Operaciones\ntx.commit();\nsession.close(); // Se cierra la sesi\u00f3n\n</code></pre> <p>El m\u00e9todo <code>beginTransaction()</code> marca el comienzo de una transacci\u00f3n y el m\u00e9todo <code>commit</code>valida una transacci\u00f3n. Mientras que el m\u00e9todo, <code>rollback()</code> deshace la transacci\u00f3n.</p>"},{"location":"bloque_iv/tema_16/page-8/#estados-de-un-objeto-hibernate","title":"Estados de un objeto Hibernate","text":"<p>Hibernate define y soporta los siguientes estados de objeto:</p> <ul> <li> <p>Transitorio (Transient): Un objeto es transitorio si ha sido reci\u00e9n instanciando utilizando el operador new, y no est\u00e1 asociado a una sesi\u00f3n de Hibernate- No tiene una representaci\u00f3n persistente en la base de datos y no se le ha asignado un valor identificador. Las instancias transitorias ser\u00e1n destruidas por el recolector de basura si la aplicaci\u00f3n no mantiene m\u00e1s de una referencia. Utiliza la sesi\u00f3n de Hibernate para hacer un objeto persistente y deja que Hibernate se ocupe de las declaraciones SQL que necesitan ejecutarse para esta transici\u00f3n. Las instancias reci\u00e9n instanciadas de una clase persistente, Hibernate las considera como transitorias. Podemos hacer una instancia transitoria persistente asoci\u00e1ndola con una sesi\u00f3n.</p> <pre><code>Department dep = new Department();\ndep.setDeptNo((byte) 60);\ndep.setDName(\"MARKETING\");\ndep.setLoc(\"GUADALAJARA\");\nsession.save(dep); // (1)!\n</code></pre> <ol> <li><code>save()</code> hace que la instancia sea persistente</li> </ol> </li> <li> <p>Persistente (Persistent). Un objeto estar\u00e1 en este estado cuando ya est\u00e1 almacenado en la base de datos. Puede haber sido guardado o cargado, sin embargo, por definici\u00f3n, se encuentra en el \u00e1mbito de una sesi\u00f3n. Hibernate detectar\u00e1 cualquier cambio realizado a un objeto en estado persistente y sincronizar\u00e1 el estado con la base de datos cuando se complete la unidad de trabajo. En definitiva, los objetos transitorios solo existen en memoria y no en un almac\u00e9n de datos, han ido instanciados por el desarrollador sin haberlos almacenado mediante una sesi\u00f3n. Los persistentes se caracterizan por haber sido ya creados y almacenados en una sesi\u00f3n o bien devueltos en una consulta realizada con la sesi\u00f3n.</p> </li> <li>Separado (Detached). Un objeto est\u00e1 en este estado cuando cerramos la sesi\u00f3n mediante el m\u00e9todo <code>close()</code>. Una instancia separada es un objeto que se ha hecho persistente, pero su sesi\u00f3n ha sido cerrada. La referencia al objeto todav\u00eda es v\u00e1lida, por supuesto, y la instancia separada podr\u00eda incluso ser modificada en este estado. Una instancia separada puede ser asociada a una nueva sesi\u00f3n m\u00e1s tarde, haci\u00e9ndola persistente de nuevo (con todas las modificaciones).</li> </ul>"},{"location":"bloque_iv/tema_16/page-8/#carga-de-objetos","title":"Carga de objetos","text":"<p>Para cargar objetos usaremos lo siguientes m\u00e9todos de la clase <code>Session</code>:</p> M\u00e9todo Descripci\u00f3n <code>&lt;T&gt; T load(Class&lt;T&gt; clase, Serializable id)</code> Devuelve la instancia persistente de la clase indicada con el identificador dado. La instancia tiene que existir, si no existe el m\u00e9todo lanza una excepci\u00f3n <code>ObjectNotFound</code>. <code>Object load(String className, Serializable id)</code> Similar al m\u00e9todo anterior, pero en este caso indicamos en el primer par\u00e1metro el nombre de la case en formato <code>String</code>. <code>&lt;T&gt; T get(Class&lt;T&gt; class, Serializable id)</code> Devuelve la instancia persistente de la clase indicada con el identificador dado. Si la instancia no existe, devuelve null. <code>Object get(String className, Serializable id)</code> Similar al m\u00e9todo anterior, pero en este caso indicamos en el primer par\u00e1metro el nombre de la clase <p>Si queremos obtener un objeto y que se lance una clase en caso de que no exista, se usar\u00eda el m\u00e9todo <code>load()</code>:</p> <pre><code>try{\nDepartment dep = (Department) session.load(Department.class, (byte) 20);\n// ...\n} class (ObjectNotFoundException o){\n// ...\n}\n</code></pre> <p>Por el contrario, si no queremos que lance una excepci\u00f3n usaremos el m\u00e9todo <code>get()</code>:</p> <pre><code>Department dep = (Department) session.get(Department.class, (byte) 11);\nif(dep == null){\nSystem.out.println(\"No existe el departamento con id \" + 11);\n} else {\n//...\n}\n</code></pre>"},{"location":"bloque_iv/tema_16/page-8/#operaciones-basicas-de-objetos","title":"Operaciones b\u00e1sicas de objetos","text":"<p>Para almacenamiento, modificaci\u00f3n y borrado de objetos usamos los siguiente m\u00e9todos:</p> M\u00e9todos Descripci\u00f3n <code>Serializable persist(Object o)</code> Guarda el objeto que se pasa como argumento en la base de datos. Hace que la instancia transitoria del objeto sea persistente. <code>void merge(Object o)</code> Actualiza en la base de datos el objeto que se pasa como argumento. El objeto a modificar debe ser cargado con el m\u00e9todo <code>load()</code> o <code>get()</code>. <code>void remove(Object o)</code> Elimina de la base de datos el objeto que se pasa como argumento. El Objeto a eliminar debe ser cargado con el m\u00e9todo <code>load()</code> o <code>get()</code>. <p>Al insertar un objeto puede producirse una excepci\u00f3n en caso de que se cree un objeto que necesite de otro, como Inscription necesita un estudiante y un curso (<code>TransientPropertyValueException</code>, al hacer el m\u00e9todo <code>persist()</code>)</p> <p>Adem\u00e1s dichas operaciones puede dar una excepci\u00f3n en caso de que se intente actualizar o eliminar un objeto que no exista en la base de datos, o se intente almacenar un objeto ya existente (<code>ConstraintViolationException</code>). Esta excepci\u00f3n se lanza en el m\u00e9todo <code>commit()</code>.</p> SaveUpdateDelete <pre><code>SessionFactory factory = HibernateUtil.getSessionFactory();\nSession session = factory.openSession();\nTransaction tx = session.beginTransaction();\ntry{\nDepartment dep = new Department();\ndep.setDeptNo((byte) 70);\ndep.setDName(\"INFORM\u00c1TICA\");\ndep.setLoc(\"TOLEDO\");\nsession.save(dep);\ntx.commit();\n} catch(ConstraintViolationException e){\n//...\n}\nsession.close();\n</code></pre> <pre><code>SessionFactory factory = HibernateUtil.getSessionFactory();\nSession session = factory.openSession();\nTransaction tx = session.beginTransaction();\ntry{\nEmployee em = (Employee) session.load(Employee.class, (short) 7369);\nem.setSalary(em.getSalary() + 1000);\nsession.update(em);\ntx.commit();\n} catch(ObjectNotFoundException o){\n// ...\n} catch(ConstraintViolationException c){\n// ...\n}\nsession.close();\n</code></pre> <pre><code>SessionFactory factory = HibernateUtil.getSessionFactory();\nSession session = factory.openSession();\nTransaction tx = session.beginTransaction();\ntry{\nEmployee em = (Employee) session.load(Employee.class, (short) 7369);\nsession.delete(em);\ntx.commit();\n} catch(ObjectNotFoundException o){\n// ...\n} catch(ConstraintViolationException c){\n// ...\n}\nsession.close();\n</code></pre>"},{"location":"bloque_iv/tema_16/page-8/#consultas","title":"Consultas","text":"<p>Hibernate soporta un lenguaje de consulta orientado a objetos denominado HQL (Hibernate Query Language) f\u00e1cil de usar pero potente a la vez. Este lenguaje es una extensi\u00f3n orientada a objetos de SQL. Las consultas HQL y SQL nativas son representadas con una instancia de la interfaz <code>Query</code> (del paquete <code>org.hibernate</code>). Esta interfaz ofrece m\u00e9todos para ligar par\u00e1metros, manejo del conjunto resultado, y para la ejecuci\u00f3n de la consulta real. Siempre obtiene una <code>Query</code> utilizando el objeto <code>Session</code> actual.</p> <p>Para crear una query se utilizar\u00eda el m\u00e9todo <code>createQuery(String sql)</code> de la interfaz <code>SharedSessionContract</code> que implementa la <code>Session</code>:</p> <pre><code>Query q = session.createQuery(\"from Department\");\n</code></pre> <p>Algunos m\u00e9todos importantes de esta interfaz son:</p> M\u00e9todo Descripci\u00f3n <code>Iterator iterate()</code> Devuelve en un objeto <code>Iterator</code> el resultado de la consulta. <code>List list()</code> Devuelve el resultado de la consulta en un <code>List</code> <code>Query setFetchSize(int size)</code> Fija el n\u00famero de resultados a recuperar en cada acceso a la base de datos al valor indicado en size. <code>int executeUpdate()</code> Ejecuta la sentencia de modificaci\u00f3n o borrado. Devuelve el n\u00famero de entidades afectadas <code>String getQueryString()</code> Devuelva la consulta en un String <code>Object uniqueResult()</code> Devuelve un objeto (cuando sabemos que la consulta devuelve un objeto) o nulo si la consulta no devuelve resultados <code>Query setCharacter(int position, char value)</code><code>Query setCharacter(String name, char value)</code> Asigna el value indicado en el m\u00e9todo a un par\u00e1metro de tipo char.position indica la posici\u00f3n del par\u00e1metro dentro de la consulta, empieza en 0.name es el nombre (se indica <code>:name</code>) del par\u00e1metro dentro de la consulta <code>Query setDate(int position, Date value)</code><code>Query setDate(String name, Date value)</code> Asigna un value a un par\u00e1metro de tipo <code>Date</code>. <code>Query setDouble(int position, double value)</code><code>Query setDouble(String name, double value)</code> Asigna value a un par\u00e1metro de tipo decimal. <code>Query setInteger(int position, int value)</code><code>Query setInteger(String name, int value)</code> Asigna value a uin par\u00e1metro de tipo entero <code>Query setString(int position, String value)</code><code>Query setString(String name, String value)</code> Asigna un value a un par\u00e1metro de tipo <code>VARCHAR</code> <code>Query setParameterList(String name, Collection values)</code> Asigna una colecci\u00f3n de valores al par\u00e1metro cuyo nombre se indica en name <code>Query setParameter(String name, Object value)</code> Asigna un valor al par\u00e1metro indicado en name <p>Consulta la API de Hibernate</p> <p>https://docs.jboss.org/hibernate/orm/current/javadocs/</p>"},{"location":"bloque_iv/tema_16/page-8/#hql","title":"HQL","text":"<p>Hibernate Query Language (HQL) es un lenguaje bastante similar a SQL, pero en lugar de tablas se trata de clases y en lugar de columnas se trata de propiedades o atributos de una clase.</p> <p>Las consultas HQL son consultas independientes de la base de datos porque las consultas HQL se convierten internamente en consultas SQL espec\u00edficas de la base de datos utilizando la clase <code>Dialect</code> mencionada en el archivo hibernate-cfg.xml.</p> <p>Usar este lenguaje puede tener las siguientes ventajas:</p> <ol> <li>Independiente de la base de datos</li> <li>F\u00e1cil de aprender para el programador Java</li> <li>HQL soporta totalmente las consultas polim\u00f3rficas. Es decir, junto con el objeto que se devuelve como resultado de una consulta, se devolver\u00e1n todos los objetos secundarios (objetos de subclases) del objeto dado. Se tiene todo el modelo.</li> </ol> <p>Las siguientes clausulas a usar en HQL son:</p> Clausula Ejemplo Descripci\u00f3n FROM <code>FROM Employee</code> Devuelve el objeto completo que representa la clase AS <code>FROM Employee AS E</code> Indica un alias para acceder de forma sencilla a las propiedades de la clase (se puede omitir e indicar directamente el alias) SELECT <code>SELECT e.firstName FROM Employee as e</code> Devuelve las propiedades de la clase espec\u00edficas del objeto WHERE <code>FROM Employee AS E WHERE E.firstName like 'A%'</code> Indica una condici\u00f3n para filtrar el conjunto de objetos. ORDER BY <code>FROM Person P WHERE P.id &gt; 10 ORDER  BY P.salary DESC</code> Se indica para ordenar la consulta. Puede ir seguido de <code>ASC</code> si se desea un orden ascendente (se puede omitir ya que es el valor por defecto) o <code>DESC</code> si, por el contrario, se quiere un orden descendente GROUP BY <code>SELECT SUM(P.salary), P.firstName FROM Person P GROUP BY P.firstName</code> Se usa para agrupar los datos de una consulta. Normalmente se usa para a\u00f1adir un valor agregado. INSERT <code>INSERT INTO Employee (Salary, Loc) VALUES (1000, 'C\u00e1diz')</code> Crea objetos de una entidad UPDATE <code>UPDATE Employee E SET E.salary = E.salary * 1000 WHERE E.ID = 10</code> Actualiza los objetos DELETE <code>DELETE Employee E WHERE E.ID = 10</code> Elimina objetos <p>Se puede utilizar diferentes entidades separadas por coma <code>,</code> lo que producir\u00e1 un cross join: <code>from Department d, Employee e</code>.</p> <p>Las funciones de agregaci\u00f3n, que normalmente van con la clausula <code>GROUP BY</code>, son:</p> <ul> <li>COUNT: Se utiliza para contar el n\u00famero de objetos resultantes: <code>SELECT COUNT(*) FROM Employee E GROUP BY E.Loc</code>.</li> <li>SUM: Suma los valores de una propiedad espec\u00edfica: <code>SELECT SUM(E.salary) FROM Employee E GROUP BY E.Loc</code>.</li> <li>AVG: Calcula el valor promedio de una columna espec\u00edfica: <code>SELECT AVG(E.salary) FROM Employee E GROUP BY E.Loc</code>.</li> <li>MIN/MAX: Encuentra el valor m\u00ednimo/m\u00e1ximo: <code>SELECT MIN(E.salary) FROM Employee E</code>.</li> <li>COALESCE: Comprueba si el primer valor indicado es null, en caso de serlo, comprueba el segundo valor, y s\u00ed este lo es, devuelve el siguiente, as\u00ed sucesivamente. Por ejemplo, en la expresi\u00f3n <code>coalesce(e.salary, null, 0)</code>, comprueba si salary es null, si no lo es devuelve su valor, y en caso de serlo comprueba el siguiente valor, que si es null, comprueba el siguiente valor, hasta encontrar uno de no es null, como en este caso, que si salary es null, devolver\u00e1 0, ya que el segundo argumento es null.</li> </ul> <p>HQL tambi\u00e9n admite las consultas <code>JOIN</code> con las clausulas <code>INNER JOIN</code>, <code>LEFT JOIN</code>, <code>RIGHT JOIN</code>, <code>FETCH JOIN</code>, etc.</p> <p>En el siguiente ejemplo se va a recorrer a todos los empleados que tengan un salario mayor al indicado como par\u00e1metro:</p> <pre><code>String hql = \"FROM Employee e where e.salary &gt; :salary\";\nQuery&lt;Employee&gt; = session.createQuery(hql, Employee.class);\nquery.setInteger(\"salary\", 1000);\nList&lt;Employee&gt; = query.list();\n</code></pre>"},{"location":"bloque_iv/tema_16/page-8/#consultas-con-parametros","title":"Consultas con par\u00e1metros","text":"<p>Hibernate soporta par\u00e1metros con nombres y par\u00e1metros de estilo JDBC (<code>?</code>) en las consultas HQL. Los par\u00e1metros son enumerados desde 0, es decir, el primer par\u00e1metro que aparece estar\u00e1 en la posici\u00f3n 0, el siguiente en el 1, as\u00ed sucesivamente. El uso de par\u00e1metros nombrados tiene una serie de ventajas:</p> <ul> <li>son insensibles al orden en que aparecen en la cadena de consulta.</li> <li>pueden aparecer m\u00faltiples veces en la misma petici\u00f3n.</li> <li>son autodocumentados.</li> </ul> <p>Para asignar valores a los par\u00e1metros se utilizan los m\u00e9todos <code>setXXX</code>, vistos en la anterior tabla., siendo <code>setParameter()</code> la sintaxis simple.</p> <pre><code>String hql = \"from Employees emp where emp.department.deptNo = ? and emp.oficio = ?\";\nQuery q = session.createQuery(hql);\nq.setParameter(0, (byte) 10);\nq.setParameter(1, \"Director\");\n</code></pre> <p>El ejemplo anterior se puede hacer con par\u00e1metros nombrados y con sus m\u00e9todos espec\u00edficos para cada dato:</p> <pre><code>String hql = \"from Employees emp where emp.department.deptNo = :ndep and emp.oficio = :ofi\";\nQuery q = session.createQuery(hql);\nq.setInteger('ndep', (byte) 10);\nq.setString('ofi', \"Director\");\n</code></pre> <p>Incluso podemos pasarle una lista de par\u00e1metros:</p> <pre><code>List&lt;Byte&gt; numbers = new ArrayList&lt;&gt;();\nnumbers.add((byte) 20);\nnumbers.add((byte) 20);\nString hql = \"from Employees emp where emp.department.deptNo in (:listaDep) order by emp.department.deptNo\";\nQuery q = session.createQuery(hql);\nq.setParameterList(\"listDep\", numbers);\n</code></pre>"},{"location":"bloque_iv/tema_16/page-8/#consultas-sobre-clases-no-asociadas","title":"Consultas sobre clases no asociadas","text":"<p>Si queremos recuperar los datos de una consulta en la que intervienen varias tablas y los atributos no est\u00e1n asociados a ninguna clase podemos utilizar la clase object. Los resultados se reciben en un array de objetos, donde el primer elemento del array se corresponde con la primera clase que ponemos a la derecha de FROM, el siguiente elemento con la siguiente clase, y as\u00ed sucesivamente.</p> <pre><code>String hql = \"from Employee e, Department d where e.department.deptNo = d.deptNo order by apellido\"\nQuery q = session.createQuery(sql);\nIterator iterate = q.iterate();\nObject[] par;\nEmployee employee;\nDepartment department;\nwhile(q.hasNext()){\npar = (Object[]) iterate.next();\nemployee = (Employee) par[0];\ndepartment = (Department) par[1];\n// ...\n}\n</code></pre> <p>Supongamos, ahora, que se desea obtener el nombre de departamento, su n\u00famero de empleados y el salario medio. Como los datos de esta consulta no est\u00e1n asociados a ninguna clase, se puede crear una y utilizarla sin la necesidad de mapearla.</p> TOTALESMain <pre><code>public class Totales{\nprivate Long nEmployees;\nprivate Byte nDepartment;\nprivate Double avgSalary;\nprivate String departmentName;\n// Constructores y getter y setters\n}\n</code></pre> <pre><code>String hql = \"select new package.Totales(\" + \" d.deptNo, count(e.empNo), coalasce(ave(e.salario), 0)), d.nombre) \"\n+ \" from Employees as e right join e.departments as d \"\n+ \" group by d.deptNo, d.nombre\";\nQuery q = session.createQuery(hql);\nIterator i = q.iterate();\nTotales t;\nwhile(t.hasNext()){\nt = (Totales) q.next();\nSystem.out.println(t);\n}\n</code></pre>"},{"location":"bloque_iv/tema_16/page-8/#proyecto-students-con-hibernate","title":"Proyecto Students con Hibernate","text":"<p>Vamos ahora a modificar nuestro proyecto Students para a\u00f1adirle todo lo aprendido. En primer lugar, eliminamos el persistence.xml y a\u00f1adimos un fichero hibernate.cfg.xml:</p> <pre><code>&lt;!DOCTYPE hibernate-configuration PUBLIC\n        \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\"\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\"&gt;\n&lt;hibernate-configuration&gt;\n&lt;session-factory name=\"\"&gt;\n&lt;property name=\"hibernate.connection.drive_class\"&gt;com.mysql.jdbc.Driver&lt;/property&gt;\n&lt;property name=\"hibernate.connection.username\"&gt;root&lt;/property&gt;\n&lt;property name=\"hibernate.connection.password\"&gt;&lt;/property&gt;\n&lt;property name=\"hibernate.connection.url\"&gt;jdbc:mysql://localhost/students&lt;/property&gt;\n&lt;property name=\"hibernate.dialect\"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;\n&lt;mapping resource=\"orm/Course.xml\"/&gt;\n&lt;mapping resource=\"orm/Inscription.xml\"/&gt;\n&lt;mapping resource=\"orm/Student.xml\"/&gt;\n&lt;/session-factory&gt;\n&lt;/hibernate-configuration&gt;\n</code></pre> <p>Luego creamos los ficheros xml de mapeo (en caso de usar anotaciones, no se deben modificar):</p> COURSESTUDENTINSCRIPTION <pre><code>&lt;!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n        \"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd\"&gt;\n&lt;hibernate-mapping&gt;\n&lt;class name=\"com.irudev.data.entity.Course\" table=\"course\"&gt;\n&lt;id name=\"id\" type=\"java.lang.Integer\"&gt;\n&lt;column name=\"id\"/&gt;\n&lt;generator class=\"identity\"/&gt;\n&lt;/id&gt;\n&lt;property name=\"name\" type=\"string\"&gt;\n&lt;column name=\"name\"/&gt;\n&lt;/property&gt;\n&lt;property name=\"credits\" type=\"int\"&gt;\n&lt;column name=\"credits\"/&gt;\n&lt;/property&gt;\n&lt;/class&gt;\n&lt;/hibernate-mapping&gt;\n</code></pre> <pre><code>&lt;!-- estudiante.orm.xml --&gt;\n&lt;!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n        \"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd\"&gt;\n&lt;hibernate-mapping&gt;\n&lt;class name=\"com.irudev.data.entity.Student\" table=\"student\"&gt;\n&lt;id name=\"id\" type=\"java.lang.Integer\"&gt;\n&lt;column name=\"id\"/&gt;\n&lt;generator class=\"identity\"/&gt;\n&lt;/id&gt;\n&lt;property name=\"name\" type=\"string\"&gt;\n&lt;column name=\"name\" /&gt;\n&lt;/property&gt;\n&lt;property name=\"age\" type=\"int\"&gt;\n&lt;column name=\"age\"/&gt;\n&lt;/property&gt;\n&lt;/class&gt;\n&lt;/hibernate-mapping&gt;\n</code></pre> <pre><code>&lt;!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n        \"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd\"&gt;\n&lt;hibernate-mapping&gt;\n&lt;class name=\"com.irudev.data.entity.Inscription\" table=\"inscription\"&gt;\n&lt;id name=\"id\" type=\"java.lang.Long\"&gt;\n&lt;column name=\"id\"/&gt;\n&lt;generator class=\"identity\"/&gt;\n&lt;/id&gt;\n&lt;many-to-one name=\"student\" class=\"com.irudev.data.entity.Student\"&gt;\n&lt;column name=\"idStudent\"/&gt;\n&lt;/many-to-one&gt;\n&lt;many-to-one name=\"course\" class=\"com.irudev.data.entity.Course\"&gt;\n&lt;column name=\"idCourse\"/&gt;\n&lt;/many-to-one&gt;\n&lt;/class&gt;\n&lt;/hibernate-mapping&gt;\n</code></pre> <p>A\u00f1adimos nuestro Singleton que controle nuestro acceso a las sesiones de Hibernate:</p> <pre><code>public class HibernateUtil {\nprivate static HibernateUtil instance;\nprivate SessionFactory factory;\nprivate Session session;\nprivate HibernateUtil(){}\nprivate void buildSessionFactory(){\nConfiguration configuration = new Configuration().configure();\nStandardServiceRegistry registry = new StandardServiceRegistryBuilder().configure().build();\nfactory = configuration.buildSessionFactory(registry);\n}\nprivate void openSession(){\nif(factory == null){\nbuildSessionFactory();\n}\nif(session == null || !session.isOpen()){\nsession = factory.openSession();\n}\n}\npublic void closeSession(){\nif(session != null){\nsession.close();\n}\nif(factory != null){\nfactory.close();\n}\n}\npublic Session getCurrentSession(){\nif(session == null){\nopenSession();\n}\nreturn session;\n}\npublic static HibernateUtil getInstance(){\nif(instance == null){\ninstance = new HibernateUtil();\n}\nreturn instance;\n}\n}\n</code></pre> <p>Por \u00faltimo, modificamos nuestros modelos:</p> COURSESTUDENTINSCRIPTION <pre><code>public class JDBCCourseRepository implements CourseRepository {\nprivate final HibernateUtil manager;\npublic JDBCCourseRepository(HibernateUtil manager) {\nthis.manager = manager;\n}\n@Override\npublic Course getById(Integer id) {\nreturn manager.getCurrentSession().get(Course.class, id);\n}\n@Override\npublic List&lt;Course&gt; getAll() {\nreturn manager.getCurrentSession().createQuery(\"from Course c\", Course.class).list();\n}\n@Override\npublic boolean save(Course course) {\ntry{\nTransaction tx = manager.getCurrentSession().beginTransaction();\nmanager.getCurrentSession().persist(course);\ntx.commit();\nreturn true;\n}catch (Exception e){\nreturn false;\n}\n}\n@Override\npublic boolean update(Course course) {\ntry{\nTransaction tx = manager.getCurrentSession().beginTransaction();\nmanager.getCurrentSession().merge(course);\ntx.commit();\nreturn true;\n}catch (Exception e){\nreturn false;\n}\n}\n@Override\npublic boolean delete(Course course) {\ntry{\nTransaction tx = manager.getCurrentSession().beginTransaction();\nmanager.getCurrentSession().remove(course);\ntx.commit();\nreturn true;\n}catch (Exception e){\nreturn false;\n}\n}\n}\n</code></pre> <pre><code>public class JDBCStudentRepository implements StudentRepository {\nprivate final HibernateUtil manager;\npublic JDBCStudentRepository(HibernateUtil manager){\nthis.manager = manager;\n}\n@Override\npublic Student getById(Integer id) {\nreturn manager.getCurrentSession().get(Student.class, id);\n}\n@Override\npublic List&lt;Student&gt; getAll() {\nreturn manager.getCurrentSession().createQuery(\"from Student s\", Student.class).list();\n}\n@Override\npublic boolean save(Student student) {\ntry{\nTransaction tx = manager.getCurrentSession().beginTransaction();\nmanager.getCurrentSession().persist(student);\ntx.commit();\nreturn true;\n}catch (Exception e){\nreturn false;\n}\n}\n@Override\npublic boolean update(Student student) {\ntry{\nTransaction tx = manager.getCurrentSession().beginTransaction();\nmanager.getCurrentSession().merge(student);\ntx.commit();\nreturn true;\n}catch (Exception e){\nreturn false;\n}\n}\n@Override\npublic boolean delete(Student student) {\ntry{\nTransaction tx = manager.getCurrentSession().beginTransaction();\nmanager.getCurrentSession().remove(student);\ntx.commit();\nreturn true;\n}catch (Exception e){\nreturn false;\n}\n}\n}\n</code></pre> <pre><code>public class JDBCInscriptionRepository implements InscriptionRepository {\nprivate final HibernateUtil manager;\npublic JDBCInscriptionRepository(HibernateUtil manager) {\nthis.manager = manager;\n}\n@Override\npublic Inscription getById(Integer id) {\nreturn manager.getCurrentSession().get(Inscription.class, id);\n}\n@Override\npublic List&lt;Inscription&gt; getAll() {\nreturn manager.getCurrentSession().createQuery(\"from Inscription i\", Inscription.class).list();\n}\n@Override\npublic boolean save(Inscription inscription) {\ntry{\nTransaction tx = manager.getCurrentSession().beginTransaction();\nmanager.getCurrentSession().persist(inscription);\ntx.commit();\nreturn true;\n}catch (Exception e){\nreturn false;\n}\n}\n@Override\npublic boolean delete(Inscription inscription) {\ntry{\nTransaction tx = manager.getCurrentSession().beginTransaction();\nmanager.getCurrentSession().remove(inscription);\ntx.commit();\nreturn true;\n}catch (Exception e){\nreturn false;\n}\n}\n}\n</code></pre>"},{"location":"bloque_iv/tema_16/page-9/","title":"Ejercicios","text":"<p>Dado el siguiente diagrama relacional de la base de datos, realiza los siguientes ejercicios:</p> <p> Figura 7 - Modelo Relacional</p> Ejercicio 1 <p>Crea el diagrama UML, y las clases en Java que representas las entidades anteriores, teniendo que el identificador de cada clase ser\u00e1 generado por UUID.</p> <p>Esta ser\u00e1 la versi\u00f3n inicial del proyecto.</p> Ejercicio 2 <p>Haciendo uso del patr\u00f3n Repository y JDBC donde le permita al usuario realizar un CRUD de cada una de las entidades realizadas anteriormente. Esta ser\u00e1 la primera versi\u00f3n del proyecto. </p> <p>A\u00f1ade los m\u00e9todos necesarios para trabajar con cada uno de las entidades para poder realizar las siguientes operaciones:</p> <ul> <li>Se puede insertar actores, g\u00e9neros y pel\u00edculas.</li> <li>Se puede eliminar pel\u00edculas y g\u00e9neros.</li> <li>Se puede localizar actores, g\u00e9neros y pel\u00edculas dado su id.</li> <li>Se puede obtener todos los registros de cada una de las entidades.</li> <li>Se puede obtener una lista de g\u00e9neros dado su nombre.</li> <li>Se puede obtener una lista de actores que hayan nacido despu\u00e9s     de una cierta fecha.</li> <li>Se puede obtener una lista de actores cuyo apellido termina con un valor espec\u00edfico.</li> <li>Se puede obtener una lista de pel\u00edculas por su nombre.</li> <li></li> </ul> Ejercicio 3 <p>En la segunda versi\u00f3n del proyecto, modifica lo necesario para usar JPA con archivos de mapeo.</p> <p>En esta versi\u00f3n del proyecto, y en las posteriores, el proveedor de JPA debe encargarse de la creaci\u00f3n de la base de datos.</p> Ejercicio 4 <p>En la tercera versi\u00f3n del proyecto, modifica lo necesario para hacer uso del framework hibernate, manteniendo los archivos de mapeo.</p> Ejercicio 5 <p>En la cuarta versi\u00f3n del proyecto, modifica lo necesario para usar anotaciones en lugar de un fichero de mapeo.</p>"},{"location":"bloque_iv/tema_17/page-1/","title":"1 Base de datos objeto relacional","text":""},{"location":"bloque_iv/tema_17/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>La base de datos objeto-relacional es una extensi\u00f3n de la base de datos relacional tradicional, a la cual se le proporcionan caracter\u00edsticas de la programaci\u00f3n orientada a objetos (POO).</p> <p>La principal caracter\u00edstica de estas bases de datos es que el usuario puede crear sus propios tipos de datos y los m\u00e9todos necesarios para trabajar con dichos tipos de datos.  Son bases de datos que han evolucionado desde el modelo relacional incorporando conceptos del paradigma orientado a objetos.</p>"},{"location":"bloque_iv/tema_17/page-1/#tipos-de-objetos","title":"Tipos de objetos","text":"<p>En las bases de datos orientadas a objetos podemos encontrar los siguientes tipos at\u00f3micos:</p> <ul> <li>Boolean: un valor booleano es aquel que puede tomar uno de los siguientes valores: verdadero o falso.</li> <li>Short: entero con signo, normalmente de 8 o 16 bits.</li> <li>Long: entero con signo, normalmente de 32 o 64 bits.</li> <li>Unsigned short: entero sin signo, normalmente de 8 o 16 bits.</li> <li>Unsigned long: entero sin signo, normalmente de 32 o 64 bits.</li> <li>Float: valor real en coma flotante de simple precisi\u00f3n.</li> <li>Double: valor real en coma flotante de doble precisi\u00f3n.</li> <li>Octet: almac\u00e9n de 8 bits.</li> <li>Char: car\u00e1cter ASCII o UNICODE.</li> <li>String: cadena de caracteres.</li> <li>Enum: tipo enumerado donde los valores se especifican expl\u00edcitamente cuando se declara el tipo.</li> </ul> <p>Tambi\u00e9n podemos encontrar colecciones, como las siguientes:</p> <ul> <li>Set y bag: grupo desordenado de objetos del mismo tipo. La diferencia est\u00e1 en que set no permite duplicados y bag s\u00ed.</li> <li>List: grupo ordenado de objetos del mismo tipo.</li> <li>Array: grupo ordenado de objetos del mismo tipo. Se puede acceder a ellos mediante su posici\u00f3n.</li> </ul> <p>Adem\u00e1s, tenemos tipos de datos que siguen un estructura:</p> <ul> <li>Date: para las fechas.</li> <li>Time: para las horas.</li> <li>Timestamp: hora de una fecha.</li> <li>Interval: periodos de tiempo.</li> </ul>"},{"location":"bloque_iv/tema_17/page-1/#postgresql","title":"PostgreSQL","text":"<p>PostgreSQL es un sistema de gesti\u00f3n de bases de datos relacional libre que destaca por agilizar la interacci\u00f3n de cliente, servidor y base de datos, ya que realiza la mayor\u00eda del trabajo referente a bases de datos cuando se hacen las peticiones.</p> <p>Una de las caracter\u00edsticas que tiene este gestor de bases de datos es SGBDOR (Sistema de Gesti\u00f3n de Base de Datos Orientado a Objetos), por lo que incluye los mecanismos de una base de datos orientada a objetos.</p> <p>Info</p> <p>Para saber m\u00e1s sobre PostgreSQL orientado a objetos, visita la gu\u00eda: INSERT_LINK</p>"},{"location":"bloque_iv/tema_17/page-2/","title":"2 Base de datos orientadas a objetos","text":""},{"location":"bloque_iv/tema_17/page-2/#introduccion","title":"Introducci\u00f3n","text":"<p>Una base de datos orientada a objetos es un sistema de gesti\u00f3n de base de datos mediante el cual representamos la informaci\u00f3n en forma de objetos que son utilizados en programaci\u00f3n orientada a objetos.</p> <p>La investigaci\u00f3n y el desarrollo de la base de datos orientada a objetos fue impulsada en gran medida por su alto rendimiento en almacenamiento de datos y los requerimientos de acceso que ten\u00edan entornos de soporte de dise\u00f1o tales como el CAD (Computer Aided Design) y el CASE (Computer Aided Software Engineering).</p> <p>A medida que ha ido aumentando el uso de la tecnolog\u00eda web, muchas organizaciones se muestran m\u00e1s interesadas en el concepto de base de datos orientada a objetos, dado que es \u00fatil para mostrar los datos complejos de estas tecnolog\u00edas.</p> <p>Algunas bases de datos orientadas a objetos han sido dise\u00f1adas para trabajar bien con lenguajes de programaci\u00f3n orientados a objetos tales como Delphi, Ruby, Python, Perl, Java, Visual Basic.NET, etc.</p> <p>A partir de 2004, la base de datos orientada a objetos ha vuelto a experimentar un crecimiento debido al surgimiento de bases de datos orientadas a objetos de c\u00f3digo abierto. Son f\u00e1ciles de usar y asequibles. Est\u00e1n totalmente escritas en lenguaje de programaci\u00f3n orientado a objetos, como Smalltalk, Java o C.  </p>"},{"location":"bloque_iv/tema_17/page-2/#caracteristicas","title":"Caracter\u00edsticas","text":"<p>La base de datos orientada a objetos ha encontrado su nicho de aplicaci\u00f3n en \u00e1reas tales como la ingenier\u00eda, las bases de datos espaciales, las telecomunicaciones y en \u00e1reas cient\u00edficas como la f\u00edsica de alta energ\u00eda y la biolog\u00eda molecular.</p> <p>Otro conjunto de bases de datos orientadas a objetos se centra en el uso integrado en dispositivos, paquetes de software y sistemas en tiempo real.</p> <p>Podemos encontrar las siguientes caracter\u00edsticas:</p> <ul> <li>La mayor\u00eda de bases de datos orientadas a objetos incluyen alg\u00fan tipo de lenguaje para realizar consultas, lo cual permite que los objetos sean encontrados utilizando un enfoque de programaci\u00f3n declarativa.</li> <li>En una base de datos orientada a objetos, el acceso a los datos es m\u00e1s r\u00e1pido debido a que los Joins casi nunca son necesarios, a diferencia de lo que ocurre con las bases de datos relacionales. Esto es as\u00ed porque un objeto puede ser recuperado directamente sin una b\u00fasqueda, simplemente siguiendo los punteros.</li> <li>Un \u00e1rea en la que los diferentes productos pueden variar es la forma en la que el esquema de la base de datos es definido. Sin embargo, una caracter\u00edstica general es que el lenguaje de programaci\u00f3n y el esquema de la base de datos utilizan la misma definici\u00f3n de tipos.</li> <li>Las aplicaciones multimedia se agilizan debido a que los m\u00e9todos de clase asociados con los datos son responsables de una correcta interpretaci\u00f3n.</li> <li>Muchas bases de datos orientadas a objetos ofrecen soporte para control de versiones. Un objeto puede ser visto como un conjunto de todas sus versiones. Tambi\u00e9n las versiones de objetos pueden ser tratadas como objetos por derecho propio. Algunas bases de datos orientadas a objetos tambi\u00e9n proporcionan soporte sistem\u00e1tico para triggers y restricciones.</li> <li>La eficiencia de una base de datos orientada a objetos tambi\u00e9n ha mejorado considerablemente en \u00e1reas en las cuales se requieren cantidades masivas de datos sobre un elemento. Por ejemplo, una entidad bancaria podr\u00eda obtener la informaci\u00f3n de la cuenta de un usuario y proporcionarle eficientemente informaci\u00f3n muy extensa conteniendo todas las transacciones, todas las entradas con informaci\u00f3n de la cuenta, etc.</li> </ul> <p>Una base de datos orientada a objetos almacena datos complejos y relaciones entre datos directamente, sin asignar filas y columnas, y esto hace que sean m\u00e1s adecuadas para aplicaciones que tratan con datos muy complejos. Los objetos tienen relaciones \u201cmuchos a muchos\u201d y son accesibles mediante el uso de punteros. Estos punteros se vinculan a los objetos para establecer relaciones. Otro beneficio adicional de una base de datos orientada a objetos es que puede ser programada con peque\u00f1as diferencias de procedimientos sin afectar a todo el sistema.</p>"},{"location":"bloque_iv/tema_17/page-2/#sql-orientado-a-objetos","title":"SQL orientado a objetos","text":"<p>En 1999 fue desarrollado el lenguaje SQL 3, que ven\u00eda a mejorar las anteriores versiones e incorporar la orientaci\u00f3n a objetos. Por tanto, este lenguaje es considerado como la base de la mayor\u00eda de los SGBD. Como principal caracter\u00edstica se puede destacar la posibilidad de definir tipos de datos:</p> <ul> <li>Grandes Objetos.SQL99 define dos tipos de objetos grandes, el llamado BLOB (Binary Large Object), adecuado para almacenar datos binarios como por ejemplo im\u00e1genes, videos,... y CLOB (Character Large Object), ideal para datos extensivos de tipos texto como por ejemplo informes, p\u00e1ginas web...</li> <li>Colecciones: Permite almacenar de forma directa colecciones enteras de datos tanto de tipo b\u00e1sico como de tipo estructurado.</li> <li>Tipos compuestos o estructurados: Gracias a la incorporaci\u00f3n de estos tipos de datos es posible crear tipo de datos definidos por el usuario.</li> <li>Referencia a tipos estructurados: Se trata de un tipo especial que act\u00faa como apuntador de tipos compuestos.</li> </ul> <p>La manipulaci\u00f3n de estos tipos de datos no se realiza volc\u00e1ndolas a tipos de datos est\u00e1ndares, sino que se utilizan unas clases especiales (<code>java.sql.Blob</code>, <code>java.sql.Clob</code> o j<code>ava.sql.Array</code>) que act\u00faan como punteros l\u00f3gicos a la informaci\u00f3n deseada a la base de datos.</p>"},{"location":"bloque_iv/tema_17/page-2/#caracteristica-de-base-de-datos-orientada-a-objeto","title":"Caracter\u00edstica de base de datos orientada a objeto","text":"<p>En una base de datos orientada a objetos, la informaci\u00f3n se representa mediante objetos como los presentes en la programaci\u00f3n orientada a objetos. Un ODBMS hace que los objetos de la base de datos aparezcan como objetos de un lenguaje de programaci\u00f3n en uno o m\u00e1s lenguajes de programaci\u00f3n a los que d\u00e9 soporte.</p> <p>La iniciativa ODMG (Object Database Management Group) proporciona est\u00e1ndares sobre base de datos orientada a objetos, y define:</p> <ul> <li>Un modelo de objetos est\u00e1ndar para el dise\u00f1o de estas BBDD.</li> <li>El lenguaje de definici\u00f3n de objetos u ODL (Object Definition Language).</li> <li>Lenguaje de consultas denominado OQL.</li> </ul>"},{"location":"bloque_iv/tema_17/page-2/#sgbdoo","title":"SGBDOO","text":"<p>Un sistema de gesti\u00f3n de base de datos orientado a objeto es un software que se utiliza para poder trabajar con bases de datos orientadas a objetos. Entre las m\u00e1s destacadas tenemos:</p> <ul> <li>ObjectStore: es una soluci\u00f3n para C++ y Java</li> <li>wakanda y ObjectDB: soluci\u00f3n para Javascript.</li> <li>ObjectDB: soluci\u00f3n para Java.</li> </ul>"},{"location":"bloque_iv/tema_17/page-3/","title":"3 ObjectDB","text":""},{"location":"bloque_iv/tema_17/page-3/#introduccion","title":"Introducci\u00f3n","text":"<p>ObjectDB es un administrador de sistemas de base de datos orientada a objetos (ODBMS), de software propietario, pero que ofrece una versi\u00f3n gratuita limitada para su estudio.</p> <p>Una de las ventajas de este sistema es que ofrece JPA como interfaz para el programador y dispone de un entorno gr\u00e1fico para consultar y actualizar los datos. Este entorno gr\u00e1fico, admite la realizaci\u00f3n de consultas con JPQL.</p>"},{"location":"bloque_iv/tema_17/page-3/#proyecto-objectdb","title":"Proyecto ObjectDB","text":"<p>Para comenzar, configuramos el <code>pom.xml</code> de la siguiente manera:</p> <pre><code>&lt;!-- ... --&gt;\n&lt;repositories&gt;\n&lt;repository&gt;\n&lt;id&gt;objectdb&lt;/id&gt;\n&lt;name&gt;ObjectDB Repository&lt;/name&gt;\n&lt;url&gt;https://m2.objectdb.com&lt;/url&gt;\n&lt;/repository&gt;\n&lt;/repositories&gt;\n&lt;dependencies&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;com.objectdb&lt;/groupId&gt;\n&lt;artifactId&gt;objectdb&lt;/artifactId&gt;\n&lt;version&gt;2.8.1&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;org.eclipse.persistence&lt;/groupId&gt;\n&lt;artifactId&gt;javax.persistence&lt;/artifactId&gt;\n&lt;version&gt;2.1.0&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;javax.transaction&lt;/groupId&gt;\n&lt;artifactId&gt;jta&lt;/artifactId&gt;\n&lt;version&gt;1.1&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;/dependencies&gt;\n&lt;!-- ... --&gt;\n</code></pre> <p>Creamos nuestra clase POJO:</p> <pre><code>@Entity\npublic class Point implements Serializable {\n@Id @GeneratedValue\nprivate long id;\nprivate int x;\nprivate int y;\npublic Point(){}\npublic Point(int x, int y) {\nthis.x = x;\nthis.y = y;\n}\npublic long getId() {\nreturn id;\n}\npublic int getX() {\nreturn x;\n}\npublic int getY() {\nreturn y;\n}\n@Override\npublic String toString() {\nreturn \"Point{\" +\n\"id=\" + id +\n\", x=\" + x +\n\", y=\" + y +\n'}';\n}\n}\n</code></pre> <p>Y nuestro <code>main</code>:</p> <pre><code>public class Main {\npublic void show() {\nEntityManagerFactory emf = Persistence.createEntityManagerFactory(\"p2.odb\");\nEntityManager em = emf.createEntityManager();\n// Guardar punto\nem.getTransaction().begin();\nem.persist(new Point(10, 10));\nem.getTransaction().commit();\n// Query\nQuery q = em.createQuery(\"SELECT p FROM Point p\", Point.class);\nSystem.out.println(q.getResultList());\n}\npublic static void main(String[] args) {\nnew Main().show();\n}\n}\n</code></pre> <p>Como se puede observar no ha sido necesario crear un archivo de configuraci\u00f3n persistence.xml, ya que no necesito decirle al proveedor la relaci\u00f3n de clases. \u00danicamente indico el fichero <code>odb</code> donde se almacenar\u00e1 los datos.</p>"},{"location":"bloque_iv/tema_18/page-1/","title":"1 Introducci\u00f3n a las bases de datos NoSQL","text":""},{"location":"bloque_iv/tema_18/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>Las bases de datos NoSQL son aquellas que no siguen el modelo cl\u00e1sico del sistema de gesti\u00f3n de bases de datos relacionales. Su principal caracter\u00edsticas es que no usan SQL como lenguaje principal de consultas, y adem\u00e1s, en el almacenamiento de los datos no se utilizan estructuras fijas de almacenamiento.</p> <p>El t\u00e9rmino NoSQL surge con la llegada de la web 2.0, ya que hasta ese momento solo sub\u00edan contenidos a la red aquellas empresas que ten\u00edan un portal, pero con la llegada de las diferentes RRSS (Facebook, Twitter, Youtube, etc), en las que el usuario pod\u00eda subir su propio contenido, se produjo as\u00ed un crecimiento exponencial de los datos.</p>"},{"location":"bloque_iv/tema_18/page-1/#soluciones-propuestas","title":"Soluciones propuestas","text":"<p>Esto provocaba problemas para gestionar y acceder a toda esa informaci\u00f3n que se encuentra almacenada en bases de datos relacionales. Las empresas propusieron solucionar dichos problemas con el incremento de m\u00e1quinas, sin embargo, era una soluci\u00f3n cara y no terminaba con el problema.</p> <p>Otra soluci\u00f3n propuesta fue la de crear nuevos sistemas gestores de datos pensados para un uso espec\u00edfico, que con el paso del tiempo han dado lugar a soluciones robustas, apareciendo as\u00ed el movimiento NoSQL.</p> <p>As\u00ed pues, hablar de NoSQL es hablar de estructuras que nos permiten almacenar informaci\u00f3n en aquellas situaciones en las que las bases de datos relacionales generan ciertos problemas.</p>"},{"location":"bloque_iv/tema_18/page-1/#sql-vs-nosql","title":"SQL vs NoSQL","text":"<p>Las bases de datos relacionales focalizan su inter\u00e9s en la fiabilidad de las transacciones bajo el conocido principio ACID (Atomicity, Consistency, Isolation and Durability, Atomicidad, Consistencia, Aislamiento y Durabilidad en espa\u00f1ol).</p> PRINCIPIO ACID - Bases de datos relacionales Atomicity Asegurar de que la transacci\u00f3n se complete o no, sin quedarse a medias ante fallos. Consistency Asegurar el estado de validez de los datos en todo momento. Isolation Asegurar independencia entre transacciones Durability Asegurar la persistencia de la transacci\u00f3n ante cualquier fallo <p>Este principio aporta una robustez y colisiona el rendimiento con la operatividad a medida que los vol\u00famenes de datos crecen.</p> <p>Cuando la magnitud y el dinamismo de los datos cobran importancia, el principio ACID de los modelos relacionales quedan en segundo plano frente al rendimiento, disponibilidad y escalabilidad, las caracter\u00edsticas m\u00e1s propias de las bases de datos NoSQL. Hoy en d\u00eda, los modernos sistemas de datos en internet se ajustan m\u00e1s al tambi\u00e9n conocido principio BASE (Basic Availability, Soft State, Eventually consistency, Disponibilidad como prioridad, la consistencia de datos se delega a gesti\u00f3n externa al motor de la base de datos, intentar lograr la convergencia hacia un estado consistente).</p> PRINCIPIO BASE - Bases de datos NoSQL Basic Availability Prioridad de la disponibilidad de los datos Soft state Se prioriza la propagaci\u00f3n de datos, delegando el control de inconsistencias a elementos externos Eventually consistency Se asume que inconsistencias temporales progresen a un estado final estable"},{"location":"bloque_iv/tema_18/page-1/#ventajas-de-los-sistemas-nosql","title":"Ventajas de los sistemas NoSQL","text":"<p>La gran diferencia de estas bases de datos es c\u00f3mo almacenan los datos. Por ejemplo, en una base del modelo relacional para almacenar una factura, se utilizar\u00edan 4 tablas, cada una con 3 o 4 ajenas, mientras que en NoSQL solo se guarda la factura, por ejemplo, con una clave y el objeto factura.</p> <p>La forma de almacenamiento de informaci\u00f3n en este tipo de bases de datos ofrece ciertas ventajas sobre los modelos relacionales:</p> <ul> <li>Se ejecutan en m\u00e1quinas con pocos recursos: estos sistemas no requieren mucha programaci\u00f3n, por lo que se pueden instalar en m\u00e1quinas de un coste m\u00e1s reducido.</li> <li>Escalabilidad horizontal: para mejorar el rendimiento de estos sistemas simplemente se consigue a\u00f1adiendo m\u00e1s nodos, con la \u00fanica operaci\u00f3n de indicar al sistema cu\u00e1les son los nodos que est\u00e1n disponibles.</li> <li>Pueden manejar gran cantidad de datos: esto es debido a que utiliza una estructura distribuida, en muchos casos mediante tablas Hash.</li> <li>No genera cuellos de botella: el principal problema de los sistemas SQL es que necesitan transcribir cada sentencia para poder ser ejecutada, y cada sentencia compleja requiere, adem\u00e1s, de un nivel de ejecuci\u00f3n a\u00fan m\u00e1s complejos, lo que constituye un punto de entrada en com\u00fan, que ante muchas peticiones puede ralentizar el sistema.</li> </ul>"},{"location":"bloque_iv/tema_18/page-1/#diferencias-con-las-bases-de-datos-sql","title":"Diferencias con las bases de datos SQL","text":"<p>Las diferencias m\u00e1s importantes entre los sistemas NoSQL y los sistemas SQL son:</p> <ul> <li>No utilizan SQL como lenguaje de consultas</li> <li>No utilizan las estructuras filas como tablas para el almacenamiento de los datos. Permiten hacer uso de otros tipos de modelos de almacenamiento de informaci\u00f3n como sistemas clave-valor, objetos o grafos.</li> <li>No suelen permitir operaciones JOIN. Al disponer un volumen de datos tan extremadamente grande suele resultar deseable evitar los JOIN. Esto se debe a que , cuando la operaci\u00f3n no es la b\u00fasqueda de una clave, la sobrecarga puede ser costosa. Las soluciones m\u00e1s directas consisten en desnormalizar los datos, o bien, realizar el JOIN mediante software en la capa de aplicaci\u00f3n.</li> <li>Arquitectura distribuida. Las bases de datos relacionales suelen estar centralizadas en una \u00fanica m\u00e1quina o bien en una estructura m\u00e1ster-esclavo, sin embargo en los casos NoSQL la informaci\u00f3n puede estar compartida en varias m\u00e1quinas mediante mecanismos de tablas Hash distribuidas.</li> </ul>"},{"location":"bloque_iv/tema_18/page-1/#tipos-de-bases-de-datos-nosql","title":"Tipos de bases de datos NoSQL","text":"<p>Seg\u00fan el tipo o modelo escogido para almacenar los datos, las bases de datos NoSQL se agrupan en cuatro categor\u00edas principales:</p> <ul> <li>Clave/Valor. Los datos son almacenados y se localizan e identifican usando una clave \u00fanica y un valor.</li> <li>Columnas. Parecido al modelo clave/valor, pero la clave se basa en una combinaci\u00f3n de columna, fila y marca de tiempo que se utiliza para referenciar conjuntos de columnas. Es una implementaci\u00f3n bastante similar al modelo relacional.</li> <li>Documentos. Los datos se almacenan en documentos que encapsulan la informaci\u00f3n en formato XML, YAML o JSON. Los documentos tienen nombres de campos auto contenidos en el propio documento. La informaci\u00f3n se indexa utilizando esos nombres de campos. Este tipo de implementaci\u00f3n permite, adem\u00e1s de realizar b\u00fasquedas por clave-valor, realizar consultas m\u00e1s avanzadas sobre el contenido del documento.</li> <li>Grafos. Se sigue un modelo de grafos que se extiende entre m\u00faltiples m\u00e1quinas. En este tipo de bases de datos, la informaci\u00f3n se representa como nodos de un grafo y sus relaciones con las artistas del mismo, de manera que se puede hacer uso de la teor\u00eda de los grafos para recorrerla. Es un modelo apropiado para datos cuyas relaciones se ajustan a este modelo, como, por ejemplo, redes de transporte, mapas, etc.</li> </ul>"},{"location":"bloque_iv/tema_18/page-2/","title":"2 Introducci\u00f3n a MongoDB","text":""},{"location":"bloque_iv/tema_18/page-2/#introduccion","title":"Introducci\u00f3n","text":"<p>MongoDB es un sistema de base de datos multiplataforma orientado a documentos, se podr\u00e1 almacenar cualquier tipo de contenido sin obedecer a un modelo o esquema. Est\u00e1 escrito en C++, por lo que es bastante r\u00e1pido. Es un software de licencia libre que funciona en sistemas operativos como Windows, Linux, OS X y Solaris.</p> <p>Una de las caracter\u00edsticas principales es la velocidad y la sencilla forma que tiene para hacer consultas a los contenidos. MongoDB se utiliza para cualquier aplicaci\u00f3n que necesite almacenar datos semi-estructurados, caso de aplicaciones CMS, aplicaciones m\u00f3viles, de juegos, o plataformas e-commerce.</p> <p>MongoDB no soporta JOINS ni transacciones, aunque posee \u00edndices secundarios, un propio lenguaje de consulta muy expresivo, operaciones at\u00f3micas en un solo documento, y lecturas consistentes.</p>"},{"location":"bloque_iv/tema_18/page-2/#diferencia-con-el-modelo-relacional","title":"Diferencia con el modelo relacional","text":"<p>La mayor diferencia entre las bases de datos relacionales y MongoDB es la forma en que se crea el modelo de datos, el modelo relacional es un modelo r\u00edgido y estructurado mientras que el modelo MongoDB es un modelo din\u00e1mico.</p> Modelo Relacional MongoDB Base da datos Base de datos Tabla Colecci\u00f3n Fila Documento Columna Campo \u00cdndice \u00cdndice Join Documento embebido o referencia <p>Con el modelo MongoDB se pasa de un modelo de datos r\u00edgido basado en estructuras bidimensionales, formado por tablas, filas y columnas a un modelo de datos de documentos rico y din\u00e1mico con sub-documentos y matrices embebidas. En MongoDB se pueden crear colecciones sin definir su estructura, tambi\u00e9n se puede alterar la estructura de los documentos simplemente a\u00f1adiendo nuevos campos o borrando los ya existentes. Esta caracter\u00edsticas convierte a Mongo en una BD muy flexible con respecto a las alternativas relacionales.</p> <p>MongoDB almacena documentos JSON en una representaci\u00f3n binaria llamada BSON. BSON es una serializaci\u00f3n codificada en binario de documentos JSON, soporta todas las caracter\u00edsticas JSON e incluye los tipos de datos int, long, float o arrays. El documento representa la unidad b\u00e1sica de datos en MongoDB.</p>"},{"location":"bloque_iv/tema_18/page-2/#instalacion","title":"Instalaci\u00f3n","text":"<p>Para la instalaci\u00f3n de MongDB sigue las instrucciones de esta p\u00e1gina https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/</p> <p>O si lo prefieres, puedes usar la versi\u00f3n en la nube MongoDB Atlas</p>"},{"location":"bloque_iv/tema_18/page-3/","title":"3 Operaciones B\u00e1sicas en MongoDB","text":""},{"location":"bloque_iv/tema_18/page-3/#introduccion","title":"Introducci\u00f3n","text":"<p>Todos los comandos para operar con esta base de datos se escriben en min\u00fasculas, lo m\u00e1s comunes son:</p> <ul> <li>show databases. Listar base de datos.</li> <li>db. Mostrar la base de datos actual.</li> <li>show collections. Mostrar las colecciones de la base de datos actual.</li> <li>use [data name]. Usa una base de datos. Si no existe no importa, porque se crear\u00e1 en el momento que se a\u00f1ada un objeto JSON. use my_data_base</li> <li>count, size, length. Devuelve el n\u00ba de documentos de loas colecciones. db.my_coleccion.count()</li> </ul> <p>\u00a1Cuidado!</p> <p>El m\u00e9todo count est\u00e1 actualmente deprecated, sus alternativas son:</p> <ul> <li><code>db.collection.countDocuments()</code></li> <li><code>db.collection.estimatedDocumentCount()</code></li> </ul> <ul> <li>Para a\u00f1adir comentarios utilizamos los caracteres // de comentario de Java.</li> </ul> <p>Veamos un ejemplo, creamos una base de datos llamada my_first_database</p> <pre><code>use my_first_database\n</code></pre> <p>Listamos las bases de datos para comprar que se ha creado:</p> <pre><code>show databases\n</code></pre> <p>Como puedes comprobar a\u00fan no aparece en la lista, esto se debe porque hasta que no tengamos unos datos no se crea de forma oficial.</p> <p>A continuaci\u00f3n, comprobamos el nombre de la base de datos actual.</p> <pre><code>db\n</code></pre>"},{"location":"bloque_iv/tema_18/page-3/#crear-registros","title":"Crear Registros","text":"<p>M\u00e9todos deprecated</p> <p>En versiones anteriores de MongoDB se usaban los m\u00e9todos save() e insert() para crear registros, actualmente dichos m\u00e9todos est\u00e1n deprecated.</p> <p>Los m\u00e9todos para insertar registros son:</p> <ul> <li><code>db.collection.insertOne()</code>. Para insertar un valor</li> <li><code>db.collection.insertMany()</code>. Para insertar varios valores</li> <li><code>db.collection.bulkWrite()</code>. Toma un array y lo inserta.</li> <li><code>db.collection.updateOne()</code>. Actualiza un \u00fanico elemento.</li> <li><code>db.collection.updateMany().</code> Actualiza varios elementos.</li> <li><code>db.collection.findOneAndUpdate()</code>. Localiza un elemento y luego lo actualiza.</li> </ul>"},{"location":"bloque_iv/tema_18/page-3/#identificador-de-objetos","title":"Identificador de Objetos","text":"<p>Los identificadores de cada registro son \u00fanicos. Se asignan autom\u00e1ticamente al crear el documento, se generan de forma r\u00e1pida y ordenada. Tambi\u00e9n se pueden crear de forma manual. Es un n\u00famero hexadecimal que consta de 12 bytes, los 4 primeros son una marca de tiempo, los 3 siguientes la identificaci\u00f3n de la m\u00e1quina, 2 bytes de identificador de proceso y un contador de 3 bytes empezando en un n\u00famero aleatorio. El ObjectId o _id, es como si fuese la clave del documento, no se repetir\u00e1 en una colecci\u00f3n. Si un documento no tiene _id MongoDB se lo asignar\u00e1 autom\u00e1ticamente, es lo que ocurre cuando insertamos y no indicamos el identificador.</p> <p> Figura 1 - ObjectId</p> <p>Que el ObjectId est\u00e9 compuesto de esa manera, nos da algunas funcionalidades muy \u00fatiles. La primera es que nos puede dar una indicaci\u00f3n de el orden de creaci\u00f3n de los documentos. No es algo del todo fiable si estamos tratando con documentos creados en el mismo margen de tiempo, pero s\u00ed en tramos de tiempo m\u00e1s largos.</p> <p>Tambi\u00e9n nos sirve para obtener la fecha de creaci\u00f3n del documento.</p> <p>Vamos a crear un amigo:</p> <pre><code>friend1 = {name: 'Ana', phone: 658963145, curso: '2DAM', nota: 7.5}\n</code></pre> <p>Insertamos a dicho amigo:</p> <pre><code>db.friends.insertOne(friend1);\n</code></pre> <p>Importante</p> <p>No hemos creado la colecci\u00f3n friends pero al usar uno de los m\u00e9todos de creaci\u00f3n se crea en caso de que no exista.</p> <p>Ahora, volvemos a listar las bases de datos:</p> <pre><code>show databases\n</code></pre> <p>Ahora, en la lista, si aparece la base de datos que hemos creado al principio.</p> <p>Ahora, insertamos usuarios con insertMany:</p> <pre><code>db.friends.insertMany([\n{name: 'Lucas', phone: 722589636, curso: '1DAM', nota: 6.9},\n{name: 'Luc\u00eda', phone: 733256985, curso: '2DAM', nota: 7.0}\n]);\n</code></pre>"},{"location":"bloque_iv/tema_18/page-3/#consultar-registros","title":"Consultar registros","text":"<p>Para consultar todos los elementos de una colecci\u00f3n utilizaremos la orden find(). De esta forma se mostrar\u00e1n los identificativos (_id) de cada objeto JSON, \u00fanicos de cada colecci\u00f3n, y el resto de campos.</p> <p>Si queremos mostrar la salida ordenada por alg\u00fan campo, se usa junto con find() el m\u00e9todo sort({campo: X}), siendo campo el nombre del campo por el que quieres ordenar y X siendo 1, si quieres que se de forma ascendente, o -1, descendente.</p> <p>Si se desean hacer b\u00fasquedas de documentos que cumplan una o varias condiciones, utilizamos el siguiente formato: <code>db.collection.find(filtro, campo)</code></p> <ul> <li>En filtro indicamos la condici\u00f3n de b\u00fasqueda, podemos a\u00f1adir los pares nombre:valor a buscar. Si omitimos este, o pasa un documento vac\u00edo (<code>{}</code>) par\u00e1metro devuelve todos los documentos.</li> <li>En campos se especifican los campos a devolver de los documentos que coinciden con el filtro de la consulta. Para mostrar todos los campos omitimos este par\u00e1metros. Si se desean devolver uno o m\u00e1s campos escribiremos {campo: 1} o {campo: true}, y si no queremos usamos {campo: 0} o {campo: false}.</li> </ul> <p>Se pueden hacer consultas m\u00e1s complejas a\u00f1adiendo selectores de b\u00fasqueda:</p> <ul> <li>$eq, igual a un valor.</li> <li>\\(gt***, mayor que y ***\\)gte mayor o igual que.</li> <li>$lt, menor que, y lte, menor o igual que.</li> <li>$ne, distinto a un valor.</li> <li>\\(in***, entre una lista de valores y ***\\)nin, no est\u00e1 entre la lista de valores.</li> </ul> <p>Tambi\u00e9n podemos realizar b\u00fasquedas con selectores de b\u00fasquedas l\u00f3gicos:</p> <ul> <li>$or. condici\u00f3n1 O condici\u00f3n2. Devuelve todos los documentos que cumplen una de las dos condiciones.</li> <li>$and. condici\u00f3n1 Y condici\u00f3n2. Devuelve todos los registros que cumplen ambas condiciones. Este operador se maneja de forma impl\u00edcita y no es necesario especificarlo.</li> <li>$not. Representa la negaci\u00f3n.</li> <li>$exists. Permite filtrar la b\u00fasqueda tomando en cuenta la existencia de la expresi\u00f3n.</li> </ul> <p>A continuaci\u00f3n, vamos a listar todos los registros de la colecci\u00f3n:</p> <pre><code>db.friends.find();\n</code></pre> <p>Vamos a mostrar la misma salida anterior, pero ordenada por notas, primero de forma ascendente:</p> <pre><code>db.friends.find().sort({nota: 1});\n</code></pre> <p>Luego, descendente:</p> <pre><code>db.friends.find().sort({nota: -1});\n</code></pre> <p>Ahora, vamos a consultar todos los amigos cuyo curso sea \"2DAM\":</p> <pre><code>db.friends.find({curso: \"2DAM\"});\n</code></pre> <p>Bien, ahora vamos a buscar a los amigos, cuyo curso sea \"2DAM\" y su nombre \"Ana\":</p> <pre><code>db.friends.find({curso: \"2DAM\", name: \"Ana\"});\n</code></pre> <p>Vamos a probar la misma b\u00fasqueda anterior pero solo quiero mostrar la nota:</p> <pre><code>db.friends.find({curso: \"2DAM\", name: \"Ana\"}, {nota: true});\n</code></pre> <p>Ahora vamos a mostrar cu\u00e1ntos amigos pertenecen a \"2DAM\":</p> <pre><code>db.friends.find({curso: \"2DAM\"}).size();\n</code></pre> <p>Vamos a mostrar todos los amigos cuyas notas sean igual a 7:</p> <pre><code>db.friends.find({nota: {$eq: 7}});\n</code></pre> <p>Ahora las que sea de mayor o igual que 7:</p> <pre><code>db.friends.find({nota: {$gte: 7}});\n</code></pre> <p>Ahora todos los amigos que no est\u00e9n en segundos:</p> <pre><code>db.friends.find({curso: {$ne: \"2DAM\"}});\n</code></pre> <p>Mostramos todos los amigos cuyas notas sean 6, 7 u 8. Mostramos solo el nombre:</p> <pre><code>db.friends.find({nota: {$in: {6, 7, 8}}}, {name: true})\n</code></pre> <p>Buscamos todos los amigos que sean de 2DAM o se llamen Lucas:</p> <pre><code>db.friends.find({$or: [ {curso: \"2DAM\"}, {name: \"Lucas\"}]});\n</code></pre> <p>Ahora mostramos todos los amigos que sean de 2DAM y se llamen Ana;</p> <pre><code>db.friends.find({$and: [ {name: \"Ana\"}, {curso: \"2DAM\"}]});\n</code></pre> <p>Esta sentencia tambi\u00e9n se puede escribir as\u00ed:</p> <pre><code>db.friends.find({name: \"Ana\", curso: \"2DAM\"});\n</code></pre> <p>Vamos a insertar un amigo con nota null:</p> <pre><code>db.friends.insertOne({name: \"Rub\u00e9n\", phone: 695362523, curso: \"1DAM\", nota: null});\n</code></pre> <p>Ahora otro, sin nota directamente:</p> <pre><code>db.friends.insertOne({name: \"Selena\", phone: 123456789, curso: \"2DAM\"})\n</code></pre> <p>Mostramos los amigos que tienen nota:</p> <pre><code>db.friends.find({nota: {$exists:true}})\n</code></pre> <p>Ahora, aquellos que no tienen, se pueden hacer de dos formas, con <code>$not</code> o con <code>$exists: false</code></p> <pre><code>db.friends.find({nota: {$exists:false}})\n</code></pre> <pre><code>db.friends.find({nota: {$not: {$exists:true}}});\n</code></pre> <p>Podemos entender que un amigo no tiene nota, cuando est\u00e1 no exista o cuando sea null, entonces vamos a mostrar todos los amigos que realmente tengan nota:</p> <pre><code>db.friends.find( {nota: {$exists:true}, nota: {$ne: null}  } )\n</code></pre>"},{"location":"bloque_iv/tema_18/page-3/#actualizar-registros","title":"Actualizar registros","text":"<p>Para actualizar datos utilizaremos el comando .update, con este formato:</p> <pre><code>db.collection.update(\nfilter,\nchanges,\n{\nupsert: boolean,\nmulti: boolean\n}\n)\n</code></pre> <p>En filter, se indica la condici\u00f3n para localizar los registros o documentos a modificar.</p> <p>En changes, se especifican los cambios que se desean hacer. Hay que tener cuidado al utilizar esta orden, ya que cambiar\u00e1 el contenido del documento.</p> <p>\u00a1CUIDADO!</p> <p>Si indicamos solo un campo a modificar y no el resto de campos, el campo indicado se modificar\u00e1 pero los dem\u00e1s SER\u00c1N ELIMINADOS AUTOM\u00c1TICAMENTE.</p> <p>Por ende, nos encontramos con dos tipos de cambios: cambiar el documento completo o modificando solo los campos especificados, para ello utilizamos los par\u00e1metros upsert y multi, ambos son opcionales y su valor por defecto es false.</p> <ul> <li>upsert. Si asignamos true a este par\u00e1metro, se indica que si el filtro de b\u00fasqueda no encuentra ning\u00fan resultado, entonces, el cambio debe ser insertado como un nuevo registro.</li> <li>multi. En caso de que el filtro de b\u00fasqueda devuelva m\u00e1s de un resultado, si lo ponemos a true, el cambio se realizar\u00e1 a todos los resultados, de lo contrario solo se cambiar\u00e1 al primero que encuentre, es decir, al que tenga menor identificativo de objeto, _id.</li> </ul> <p>El comando update cuenta con una serie de operadores para realizar actualizadores m\u00e1s complejas. Algunos de estos operadores son los siguientes:</p> <ul> <li>$set. Permite actualizar con nuevas propiedades a un documento, o conjunto. Si el documento ya tiene ese campo, no lo a\u00f1ade, si no que lo cambia en caso de que sea distinto.</li> <li>$unset. Permite eliminar propiedad de un documento.</li> <li>$inc. Incrementa en una cantidad num\u00e9rica especificada en el valor del campo incrementar</li> <li>$rename. Renombra campos del documento.</li> </ul> <p>Vamos a actualizar los datos de Lucas:</p> <pre><code>db.friends.update({name: \"Lucas\"}, {name: \"Lucas\", phone: 685967412, curso: \"2DAM\"})\n</code></pre> <p>F\u00edjate que el campo de nota de Lucas ha desaparecido.</p> <p>Vamos a actualizar a Sonia cambi\u00e1ndole el tel\u00e9fono a 689234567, como no existe lo crear\u00e1.</p> <pre><code>db.friends.update({name: \"Sonia\"}, {name: \"Sonia\", phone: \"689234567\"}, {upsert: true})\n</code></pre> <p>Vamos a actualizar la edad de Sonia, teniendo en cuenta que es un campo que no existe se debe usar con $set:</p> <pre><code>db.friends.update({name:\"Sonia\"}, { $set: {edad: 24}})\n</code></pre> <p>Vamos a cambiar el curso a Ana y Luc\u00eda, como es una propiedad que ya existe, y es el \u00faltimo campo que se desea cambiar, tambi\u00e9n usaremos $set:</p> <pre><code>db.friends.update({name: \"Ana\"}, { $set: {curso: \"1DAM\"}})\ndb.friends.update({name: \"Luc\u00eda\"}, { $set: {curso: \"1DAM\"}})\n</code></pre> <p>Como podemos observar solo ha cambiado el campo \"curso\" y no el resto de ellos.</p> <p>Ahora, vamos a actualizar al amigo Rub\u00e9n, elimin\u00e1ndole la nota:</p> <pre><code>db.friends.update({name: \"Rub\u00e9n\"}, {$unset: {nota: 7}})\n</code></pre> <p>F\u00edjate, que hemos indicado nota 7, y a pesar que dicho amigo no tiene nota 7 si no null, tambi\u00e9n ser\u00e1 eliminada.</p> <p>Vamos a sumarle uno a la edad de Sonia</p> <pre><code>db.friends.update({name: \"Sonia\"}, {$inc: {edad: 1}})\n</code></pre> <p>Ahora vamos a cambiar el nombre del campo edad de Sonia, y lo ponemos en ingl\u00e9s:</p> <pre><code>db.friends.update({name: \"Sonia\"}, {$rename: {edad: 'age'}})\n</code></pre> <p>Vamos a incrementarle un 1 a todos aquellos amigos que est\u00e9n en el curso 1DAM:</p> <pre><code>db.friends.update({curso: \"1DAM\"}, { $inc: {nota:1}})\n</code></pre> <p>Como podemos observar, solo cambia el primer amigo que encuentra con esa condici\u00f3n, para ello es importante, usar la propiedad multi a true:</p> <pre><code>db.friends.update({curso: \"1DAM\"}, {$inc: {nota: 1}}, {multi: true})\n</code></pre> <p>Ahora si se le ha cambiado a todos, incluso a aquellos amigos que no ten\u00eda el campo nota.</p> <p>Ahora vamos a a\u00f1adirle la poblaci\u00f3n a aquellos alumnos que sean de 2DAM.</p> <pre><code>db.friends.update({curso: \"2DAM\"}, { $set: {poblacion: \"Talavera\"}}, {multi:true})\n</code></pre>"},{"location":"bloque_iv/tema_18/page-3/#operaciones-con-arrays","title":"Operaciones con Arrays","text":"<p>Para consultar un elemento de un campo de tipo array, solo ser\u00e1 necesario escribir el nombre del campo-array y el valor que se desea buscar.</p> <p>Existen tambi\u00e9n operadores de modificaci\u00f3n para los campos que sean arrays:</p> <ul> <li>$push. A\u00f1ade un elemento a un array.</li> <li>$addToSet. Agrega elementos a un array solo s\u00ed estos no existen.</li> <li>***\\(each.*** Se usa en conjunto con *\\)addToSet* o $push para indicar que se a\u00f1aden varios elementos al array.</li> <li>$pop. Elimina el primer o \u00faltimo valor del array. Con valor -1 borra el primero, con otro valor el \u00faltimo.</li> <li>$pull. Elimina los valores de un array que cumplan con el filtro indicado.</li> </ul> <p>Creamos la colecci\u00f3n libro e insertamos tres libros, cada uno de ellos con un campo de tipo array que almacenar\u00e1 los temas del libro:</p> <pre><code>db.books.insertMany(\n[\n{code: 1, name: \"Acceso a Datos\", pvp: 35, editorial: \"Garceta\", temas: [\"Base de datos\", \"Hibernate\", \"Neodatis\"]},\n{code: 2, name: \"Entornos de desarrollo\", pvp: 27, editorial: \"Garceta\", temas: [\"UML\", \"Subversi\u00f3n\", \"ERMaster\"]},\n{code: 3, name: \"Programaci\u00f3n de Servicios\", pvp: 25, editorial: \"Garceta\", temas: [\"SOCKET\", \"Multihilo\"]}\n]\n);\n</code></pre> <p>Consultamos:</p> <ul> <li> <p>Libros que tengan el tema UML:</p> <pre><code>db.books.find({temas: \"UML\"})\n</code></pre> </li> <li> <p>Libros que tengan el tema UML o Neodatis:</p> <pre><code>db.books.find({ $or: [{temas: \"UML\"}, {temas: \"Neodatis\"}]})\n</code></pre> </li> <li> <p>Libros de la editorial Garceta, con pvp mayor que 25 y que tengan el tema UML o Neodatis:</p> <pre><code>db.books.find({ editorial: \"Garceta\", pvp: {$gt: 25}, $or: [{temas: \"UML\"}, {temas: \"Neodatis\"}]})\n</code></pre> </li> </ul> <p>Ahora, vamos a actualizar:</p> <ul> <li> <p>A\u00f1adimos el tema MongoDB al libro que tenga c\u00f3digo 1.</p> <pre><code>db.books.update({codigo: 1}, {$push: {temas: \"MongoDB\"}})\n</code></pre> </li> <li> <p>Vamos a agregar el tema \"Bases de Datos\" a todos los libros que tengan el campo \"temas\":</p> <pre><code>db.books.update({temas: {$exists:true}}, {$addToSet: {temas: \"Bases de Datos\"}}, {multi: true})\n</code></pre> </li> <li> <p>A continuaci\u00f3n a\u00f1adimos al libro de c\u00f3digo 1 los temas \"JSON\" y \"XML\"</p> <pre><code>db.books.update({code:1}, {$push: {temas: {$each: [\"JSON\", \"XML\"]}}})\n</code></pre> </li> <li> <p>Ahora, a\u00f1adimos los temas \"Eclipse\" y \"Developper\" a los libros de c\u00f3digo 2 (usamos $addToSet):</p> <pre><code>db.books.update({code: 2}, {$addToSet: {temas: {$each: [\"Eclipse\", \"Developper\"]}}})\n</code></pre> </li> <li> <p>Ahora eliminamos el primer tema del libro con c\u00f3digo 3:</p> <pre><code>db.books.update({code: 3}, {$pop: {temas: -1}})\n</code></pre> </li> <li> <p>Borramos de todos los libros, los elementos \"Base de Datos y JSON\"</p> <pre><code>db.books.update({}, {$pull: {temas: { $in: [\"Base de datos\", \"JSON\"]}}}, {multi: true})\n</code></pre> </li> </ul>"},{"location":"bloque_iv/tema_18/page-3/#borrar-registros","title":"Borrar registros","text":"<p>Para borrar registros podemos usar las \u00f3rdenes remove o drop. Se puede eliminar documentos que cumplan una condici\u00f3n, o todos los documentos de la colecci\u00f3n o la colecci\u00f3n completa.</p> <ul> <li>Para borrar un documentos o registro que cumpla una condici\u00f3n utilizaremos la orden remove({valor})</li> <li>Para eliminar todos los elementos de la colecci\u00f3n escribimos remove({})</li> <li>Para eliminar una colecci\u00f3n se usa drop()</li> </ul> <p>Eliminamos a Ana:</p> <pre><code>db.friends.remove({name: \"Ana\"})\n</code></pre>"},{"location":"bloque_iv/tema_18/page-4/","title":"4 Agregaci\u00f3n Pipeline","text":""},{"location":"bloque_iv/tema_18/page-4/#introduccion","title":"Introducci\u00f3n","text":"<p>La agregaci\u00f3n pipeline o tuber\u00edas de agregaci\u00f3n se basa en someter una colecci\u00f3n a un conjunto de operaciones o etapas, estas etapas ir\u00e1n convirtiendo y transformando el conjunto de documentos pertenecientes a la colecci\u00f3n, hasta obtener un conjunto de documentos con el resultado deseado.</p> <p>Se le llama tuber\u00eda ya que cada etapa ir\u00e1 modificando, moldeando y calculando la estructura de los documentos para pasarlos a la etapa que le sigue.</p>"},{"location":"bloque_iv/tema_18/page-4/#funciones-de-agregado","title":"Funciones de agregado","text":"<p>Al igual que en otra base de datos, MongoDB dispone de funciones matem\u00e1ticas y de cadenas para utilizaras en las consultas.</p>"},{"location":"bloque_iv/tema_18/page-4/#funciones-aritmeticas","title":"Funciones Aritm\u00e9ticas","text":"Funci\u00f3n Descripci\u00f3n $abs Valor absoluto de un n\u00famero $add A\u00f1ade n\u00fameros a una cantidad o a una fecha, en este caso suma milisegundos. $ceil Devuelve el entero menor, mayor o igual que el n\u00famero especificado. $divide Devuelve el resultado de dividir el primer n\u00famero por el segundo floor Devuelve el entero mayor, menor o igual que el n\u00famero especificado. $mod Devuelve el resto de dividir el primero n\u00famero por el segundo $multiply Multiplica varios n\u00fameros, acepta varios argumentos. $pow Eleva un n\u00famero a la potencia especificada $sqrt Calcula la ra\u00edz cuadrada $subtract Devuelve el resultado de restar el primer n\u00famero menos el segundo. Si los dos valores son fechas devuelve la diferencia en milisegundos. $trunc Trunca un n\u00famero"},{"location":"bloque_iv/tema_18/page-4/#funciones-de-cadenas","title":"Funciones de Cadenas","text":"Funci\u00f3n Descripci\u00f3n $concat Concatena varias cadenas $substr Devuelve una subcadena, a partir de una posici\u00f3n indicada hasta una longitud especificada. $toLower Convierte una cadena a min\u00fasculas $toUpper Convierte una cadena may\u00fasculas $strcasecmp Compara cadenas y devuelve 0 si ambos son iguales, 1 si la primera es mayor que la segunda, o -1 si la primera es menor que la segunda"},{"location":"bloque_iv/tema_18/page-4/#funciones-de-grupo","title":"Funciones de Grupo","text":"Funci\u00f3n Descripci\u00f3n sum Devuelve la sma de los valores num\u00e9ricos, ignorando los no num\u00e9ricos. $avg Devuelve la media de los valores num\u00e9ricos e ignora los no num\u00e9ricos $first Devuelve el primer valor del grupo $last Devuelve el \u00faltimo valor $max Devuelve el valor m\u00e1ximo $min Devuelve el valor m\u00ednimo"},{"location":"bloque_iv/tema_18/page-4/#funciones-de-fecha","title":"Funciones de Fecha","text":"Funci\u00f3n Descripci\u00f3n $dayOfYear Devuelve el d\u00eda del a\u00f1o $dayOfMonth Devuelve el d\u00eda del mes. $dayOfWeek Devuelve el d\u00eda de la semana $year Devuelve el a\u00f1o $month Devuelve el n\u00famero del mes $hour Devuelve la hora $minute Devuelve los minutos $second Devuelve los segundos $dateToString Devuelve la fecha en String"},{"location":"bloque_iv/tema_18/page-4/#uso-de-estas-funciones","title":"Uso de estas funciones","text":"<p>Estas funciones se utilizan en las operaciones de agregaci\u00f3n, o consultas de agregaci\u00f3n, que lo que hacen es procesar los registros y obtener nuevos resultados, calculados o transformados.</p> <p>La agregaci\u00f3n opera con grupos de valores de m\u00faltiples documentos y se puede realizar una variedad de operaciones sobre los datos agrupados para devolver un solo resultado. El objetivo es presentar datos calculados, formateados y/o filtrados de manera diferente a como se encuentra en los documentos.</p> <p>MongoDB ofrece tres formas de realizar la agregaci\u00f3n:  la agregaci\u00f3n pipeline, la funci\u00f3n de map-reduce y la agregaci\u00f3n de prop\u00f3sito \u00fanico.</p>"},{"location":"bloque_iv/tema_18/page-4/#etapas-pipeline","title":"Etapas Pipeline","text":"<p>Las etapas son las siguientes:</p> Etapa Descripci\u00f3n Multiplicidad $match Filtra los resultado. Permite filtrar los resultados de los documentos que cumplen cierto criterios. Se puede filtrar antes o despu\u00e9s de agregar resultados. n:1 $group Agrupaci\u00f3n. Permite agrupar distintos documentos seg\u00fan compartan el valor de uno o varios de sus atributos, y realizar operaciones sobre los elementos de cada uno de los grupos. Se utilizan las funciones de grupo n:1 $sort Ordenaci\u00f3n de los documentos 1:1 $skip Salta N documentos n:1 $limit Elige N elementos para el resultado n:1 $unwind Normaliza arrays 1:n $out Env\u00eda el resultado a una salida, se almacena en la BD como una nueva colecci\u00f3n 1:1 <p>La multiplicidad se refiere a cu\u00e1ntos documentos obtenemos como resultado despu\u00e9s de aplicar la etapa. De esta forma 1:1 se aplica a un documento y se obtiene otro, n:1 se aplica a n documentos y se obtiene 1, y 1:n se aplica a un documentos y se obtienen n.</p>"},{"location":"bloque_iv/tema_18/page-4/#formato-pipeline","title":"Formato pipeline","text":"<p>El formato de pipe line es la siguiente:</p> <pre><code>db.collection.aggregate([\n{\n$etapa1: {\n//...\n}\n}, {\n$etapa2: {\n//...\n}\n},\n])\n</code></pre> <p>Por ejemplo:</p> <p>Tenemos la colecci\u00f3n articulos, cada registro est\u00e1 formado por los campos: c\u00f3digo, denominaci\u00f3n, pvp, categor\u00eda, uv, y stock.</p> <p>Vamos a obtener los articulos de los art\u00edculos y la categor\u00eda convertida a may\u00fasculas. Se utiliza la etapa $project pues cambiamos el aspecto del documento.</p> <p>\u00a1Importante!</p> <p>Para referirnos a los campos del documento los ponemos entre comillas y con el prefijo $.</p> <pre><code>db.articulos.aggregate([\n{\n$project:\n{\ndenominacion: {$toUpper: \"$denominacion\"}\ncetegoria: {$toUpper: \"$categoria\"}\n}\n}\n])\n</code></pre> <p>Si dicha salida se desea a\u00f1adir a la base de datos, se le a\u00f1ade la etapa out:</p> <pre><code>db.articulos.aggregate([\n{\n$project:\n{\ndenominacion: {$toUpper: \"$denominacion\"}\ncetegoria: {$toUpper: \"$categoria\"}\n}\n},\n{ $out: \"salidanueva\"}\n])\n</code></pre> <p>Vamos a obtener la denominaci\u00f3n en may\u00fasculas, el importe de las ventas que ser\u00e1n las uv * pvp, y el stock actual que ser\u00e1 stock - uv.</p> <p>Las etapas a usar en este caso son: project, multiply, substract.</p> <pre><code>db.articulos.aggregate([\n{\n$project: {\narticulo: {$toUpper: \"$denominacion\"},\nimporte: { $multiply: [\"$pvp\", \"$uv\"]},\nstockactual: {$subtract: [\"$stock\", \"$uv\"]}\n}\n}\n])\n</code></pre>"},{"location":"bloque_iv/tema_18/page-4/#condiciones-de-agregacion","title":"Condiciones de agregaci\u00f3n","text":"<p>Podemos a\u00f1adir las siguientes condiciones a las consultas de agregaci\u00f3n</p> Name Descripci\u00f3n $cond Este operador eval\u00faa una expresi\u00f3n y dependiendo del resultado, devuelve el valor de una de las otras dos expresiones. Recibe tres expresiones en una lista ordenada: {$cond: [ \\, \\, \\]} $ifNull Devuelve o bien el resultado no nulo de la primera expresi\u00f3n o el resultado de la segunda expresi\u00f3n si la primera expresi\u00f3n da como resultado un resultado nulo. El resultado de la segunda expresi\u00f3n puede ser nulo. { $ifNull: [ \\, &lt;expresionsiesnull&gt;]} <p>Ejemplo: A la consulta anterior, vamos a preguntar si el stock actual es negativo, asignaremos a un campo nuevo llamado reponer true si es menor que 0 y false si no lo es:</p> <pre><code>db.articulos.aggregate([\n{\n$project: {\narticulo: {$toUpper: \"$denominacion\"},\nimporte: { $multiply: [\"$pvp\", \"$uv\"]},\nstockactual: {$subtract: [\"$stock\", \"$uv\"]},\nreponer: {\n$cond: [\n{$lte: [{$substract: [\"stock\", \"uv\"]}, 0]}, true, false\n] }\n}}\n])\n</code></pre> <p>En la siguiente consulta, obtenemos por cada categor\u00eda el n\u00famero de art\u00edculos, el total unidades vendidas de art\u00edculos, y el total importe, la suma de los pvp*unidades. Se utiliza la etapa <code>$group</code>, cuando se usa esta etapa se debe a\u00f1adir el identificador de objeto _id, en este caso como agrupamos por categor\u00eda lo indicamos en el _id. Para contar art\u00edculos se utiliza la funci\u00f3n   <code>$sum</code></p> <pre><code>db.articulos.aggregate([\n{\n$group:{\n_id: \"$categoria\",\ncontador: {$sum: 1},\nsumaunidades: {$sum: \"$uv\"},\ntotalimporte: {$sum: {$multiply: [\"$pvp\", \"$uv\"]}}\n}\n}\n])\n</code></pre> <p>En la siguiente consulta obtenemos el n\u00famero de documentos de la categor\u00eda Deportes, el total de unidades vendidas de sus art\u00edculos, el total del importe y la media de unidades vendidas. Se utilizan las etapas <code>$match</code> para seleccionar la categor\u00eda, y luego <code>$group</code> para obtener resultados agrupados</p> <pre><code>db.articulos.aggregate([\n{$match: {categoria: \"Deportes\"}},\n{$group: {\n_id: \"Deportes\",\ncontador: {$sum: 1},\nsumaunidades: { $sum: \"$uv\"},\nmedia: { $avg: \"$uv\"},\ntotalimporte: { $sum: { $multiply: [\"$pvp\", \"$uv\"]}}\n}}\n])\n</code></pre> <p>Obtenemos, ahora el precio m\u00e1s caro:</p> <pre><code>db.articulos.aggreate([\n{$group: {\n_id: null,\nmaximo: { $max: \"$pvp\"}\n}}\n])\n</code></pre> <p>\u00bfY s\u00ed, queremos obtener el art\u00edculo con el precio m\u00e1s caro?</p> <p>En primer lugar, debemos obtener los datos pvp y denominaci\u00f3n, de todos los articulos ordedanos descendentemente por el precio y denominaci\u00f3n. ($sort)</p> <p>Despu\u00e9s, el resultado obtenido se agrupa para luego coger el primero con la funci\u00f3n $first</p> <pre><code>db.articulos.aggregate([\n{ $sort: { pvp: -1, denominacion: -1}}\n{\n$group:{\n_id:null,\nmascaro: {$first: \"$denominacion\"}\nprecio: {$first: \"$pvp\"}\n}\n}\n])\n</code></pre> <p>Ahora, queremos obtener la suma del importe de los art\u00edculos cuya denominaci\u00f3n empieza por M o P.</p> <p>Primero, debemos obtener el primer car\u00e1cter de todos los art\u00edculos utilizando la funci\u00f3n $substr:</p> <pre><code>{\n$project: {\nprimercarac: { $substr: [\"$denominacion\", 0, 1]},\nimpor: { $multiply: [\"$pvp\", \"$uv\"]}\n}\n}\n</code></pre> <p>Despu\u00e9s seleccionamos, de los datos obtenidos, lo que tienen en primercarac P o M:</p> <pre><code>{$match: {\"primercarac\": {$in: [\"M\", \"P\"]}}}\n</code></pre> <p>Finalmente, se agrupa el resultado y se suma los importes:</p> <pre><code>{\n$group:{\n_id: 1,\ntotalimporte: { $sum: \"$impor\"}\n}\n}\n</code></pre> <p>La consulta completa ser\u00eda:</p> <pre><code>db.articulos.aggregate([\n{\n$project: {\nprimercarac: { $substr: [\"$denominacion\", 0, 1]},\nimpor: { $multiply: [\"$pvp\", \"$uv\"]}\n}\n},\n{$match: {\"primercarac\": {$in: [\"M\", \"P\"]}}},\n{\n$group:{\n_id: 1,\ntotalimporte: { $sum: \"$impor\"}\n}\n}\n])\n</code></pre> <p>En la siguiente consulta, obtenemos por cada categor\u00eda el art\u00edculo con el precio m\u00e1s caro. Para ello primero ordenamos descendentemente por pcategor\u00eda, pvp y denominaci\u00f3n, utilizando la etapa <code>$sort</code>. Y el resultado obtenido se agrupa con <code>$group</code> para luego obtener el primero de cada categor\u00eda con la funci\u00f3n <code>$first</code></p> <pre><code>db.articulos.aggregate([\n{$sort: {categoria: -1, pvp: -1, denominacion: -1}},\n{\n$group:{\n_id: \"$categoria\",\nmascaro: { $first: \"$denominacion\"},\nprecio: {$first: \"$pvp\"}\n}\n}\n])\n</code></pre>"},{"location":"bloque_iv/tema_18/page-4/#utilizacion-de-arrays-campos-compuestos-y-agregados","title":"Utilizaci\u00f3n de Arrays, Campos compuestos y agregados","text":"<p>Las siguientes funciones sirve trabajar con arrays:</p> Nombre Descripci\u00f3n $arrayElemAt Devuelve el elemento especificado en el \u00edndice $concatArrays Devuelve un array concatenado en una cadena $filter Selecciona elementos de un array y devuelve otro array con esos elementos. $isArray Determina si el operando es un array o no. Devuelve true o false $size Devuelve el n\u00famero de elementos del array $slice Devuelve un sub-set de elementos del array, especificando el n\u00famero <p>Vamos a usar ahora la colecci\u00f3n Trabajadores.  Vamos a insertar un nuevo trabajador</p> <pre><code>db.trabajadores.insert(\n{\nnombre: {nom: \"Alicia\", ape1: \"Ramos\", ape2: \"Mart\u00edn\"},\ndireccion: {poblacion: \"Madrid\", calle: {\"Avda Toledo 10\", }},\nsalario: 1200,\noficios: [\"Profesora\", \"Analista\"],\nprimas: [20,30,40],\nedad: 50\n}\n)\n</code></pre> <p>Como podemos observar un empleado, tiene dos campos compuestos, nombre y direcci\u00f3n, y adem\u00e1s dos listas: oficios  y primas.</p> <p>Vamos a consultar la poblaci\u00f3n, el nombre descompuesto en nombre, ape1 y ape2, el primer oficio, el segundo y el \u00faltimo. En caso de no tenerlas no devuelve nada. Adem\u00e1s lo vamos a ordenar de forma ascendente</p> <p>Importante</p> <p>Para acceder a los campos compuestos navegamos como si fuese un objeto. Por ejemplo, si quiero acceder al campo nom del nombre o al campo poblacion de la direcci\u00f3n, ser\u00eda: nombre.nom o direccion.poblacion</p> <pre><code>db.trabajadores.find({direccion.poblacion: \"Toledo\"})\n</code></pre> <pre><code>db.trabajadores.aggregate([\n{$sort: {direccion.poblacion: 1}},\n{$project: {\npoblacion: \"$direccion.poblacion\",\nnombre: \"$nombre.nom\",\nape1: \"$nombre.ape1\",\nape2: \"$nombre.ape2\",\noficio1: {$arrayElementAt: [\"$oficios\", 0]},\noficio2: {$arrayElementAt: [\"$oficios\", 1]},\noficio3: {$arrayElementAt: [\"$oficios\", -1]}\n}\n}\n])\n</code></pre> <p>Ahora, obtenemos los elementos que tienen los arrays de los trabajadores, y los arrays concatenados. Se utiliza la funci\u00f3n $ifNull para comprobar que los arrays existan en los trabajadores, y evitar errores de salida. Se pregunta si es null, si lo es devuelve el array vacio.</p> <pre><code>db.trabajadores.aggregate([\n{\n$project:\n{\nnombre: \"$nombre.nom\",\nnumerooficios: {$size: {\"$ifNull\": [\"$oficios\", []]}},\nnumeroprimas: { $size: { \"$ifNull\": [\"$primas\", []]}},\noficiosconcatenados: {$concatArrays: [\"$oficios\", \"$primas\"]}\n}\n}\n])\n</code></pre> <p>Por \u00faltimo, devolvemos el n\u00famero de trabajadores y la media de edad de los trabajadores que han tenido el oficio de Analista</p> <pre><code>db.trabajadores.aggregate([\n{$match: {oficios: \"Analista\"}},\n{$group: {\n_id: \"analista\",\ncontador: { $sum:1 },\nmedia: {$avg: \"$edad\"}\n}}\n])\n</code></pre> Ejercicio <p>Utilizando la colecci\u00f3n trabajadores realiza las siguientes consultas:</p> <ul> <li>Visualiza la edad media, la media del salario y el n\u00famero de trabajadores que hayan tenido una prima de 30 o de 80.</li> <li>Visualiza por poblaci\u00f3n el n\u00famero de trabajadores, el salario medio y el m\u00e1ximo salario.</li> <li>Visualiza el nombre, ape1, ape2, del empleado que tiene m\u00e1ximo salario</li> <li>A partir de la consulta anterior, obt\u00e9n ahora el nombre, ape1, ape2 y salario del empleado que tiene m\u00e1ximo salario por cada poblaci\u00f3n.</li> </ul>"},{"location":"bloque_iv/tema_18/page-5/","title":"5 Relaciones entre documentos","text":""},{"location":"bloque_iv/tema_18/page-5/#introduccion","title":"Introducci\u00f3n","text":"<p>MongoDB utiliza 2 m\u00e9todos o patrones que nos van a permitir establecer la estructura de los documentos y sus relaciones. Vamos a ver c\u00f3mo como son las relaciones entre documentos compar\u00e1ndolas con el modelo relacional.</p>"},{"location":"bloque_iv/tema_18/page-5/#referencias-manuales","title":"Referencias Manuales","text":"<p>Este m\u00e9todo consiste en almacenar el campo _id de un documento como referencia de un documento. Este m\u00e9todo es similar al concepto de clave ajena del modelo relacional.</p> <p>En el modelo relacional se debe realizar una segunda consulta para devolver los datos relaciones. Este es el m\u00e9todo m\u00e1s utilizado.</p> <p>Por ejemplo, creamos la colecciones emple y depart, cada elemento con su _id credo manualmente. Tenemos en cuenta que es como si fuese una relaci\u00f3n 1:N, es decir, un departamento puede tener varios empleados.</p> <pre><code>db.emple.insertMany([\n{_id: \"emp1\", nombre: \"Juan\", salario: 1000, fechaalta: \"10/10/199\"},\n{_id: \"emp2\", nombre: \"Alicia\", salario: 1400, fechaalta: \"07/08/2000\", oficio: \"Profesora\"},\n{_id: \"emp3\", nombre: \"Mar\u00eda Jes\u00fas\", salario: 1500, fechaalta: \"05/01/2005\", oficio: \"Analista\", comision: 100},\n{_id: \"emp4\", nombre: \"Alberto\", salario: 1100, fechaalta: \"15/11/2001\"}\n])\n</code></pre> <p>En la colecci\u00f3n depart, con dos departamentos, asignamos los dos primeros empleados al primer departamento, y los dos siguientes al segundo. Para asignar los empleados ponemos el nombre de la colecci\u00f3n y entre corchetes dentro de un array de referencias los _id de los empleados a incluir, por ejemplo emple:['emp1', 'emp2']</p> <pre><code>db.depart.insertMany([\n{_id:'dep1', nombre: 'Inform\u00e1tica', loc: 'Madrid', emple:['emp1', 'emp2']},\n{_id: 'dep2', nombre: \"Gesti\u00f3n\", loc: \"Talavera\", emple: ['emp3', 'emp4']}\n])\n</code></pre> <p>Para visualizar los datos de la combinaci\u00f3n de las colecciones necesitaremos hacer dos consultas, una para obtener el departamento a consultar, y la otra para obtener los empleados de ese departamento, que est\u00e1n dentro del array del departamento. Por ejemplo, se desea visualizar los empleados del departamento con identificativo _id igual a dep1</p> <p>Para ello primero cargamos el departamento con _id:dep1 en una variable, utilizamos el m\u00e9todo findOne. Dicho m\u00e9todo siempre incluye  el campo __id incluso si el campo no se especifica expl\u00edcitamente en el par\u00e1metro de consulta:</p> <pre><code>departrabajo = db.depart.findOne({_id: 'dep1'})\n</code></pre> <p>Despu\u00e9s recuperamos los empleados cuyo _id se encuentre enlazado a este departamento</p> <pre><code>emplesdep = db.emple.find({_id: {$in: departrabajo.emple}})\n</code></pre> <p>Podemos a\u00f1adir el m\u00e9todo toArray() los datos se devuelven en una matriz que contiene todos los documentos de la consulta, es decir, devuelve un array de documentos:</p> <pre><code>emplesdep = db.emple.find({_id: {$in: departrabajo.emple}}).toArray()\n</code></pre> <p>Ahora vamos a obtener los empleados del departamento 2 cuyo salario sea mayor de 1400</p> <pre><code>departrabajo = db.depart.findOne({_id: 'dep2'})\n</code></pre> <pre><code>emplesdep = db.emple.find({_id: { $in: departrabajo.emple}, salario: {$gt: 1400}}).toArray()\n</code></pre>"},{"location":"bloque_iv/tema_18/page-5/#dbrefs","title":"DBRefs","text":"<p>Son referencias de un documento a otro utilizando el valor del campo _id del primer documento, el nombre de la colecci\u00f3n y, opcionalmente, el nombre de la base de datos. Con la inclusi\u00f3n de estos nombres, los DBRefs permiten que documentos que se encuentran en varias colecciones sean vinculados para ser documentos de una sola colecci\u00f3n.</p> <p>Los DBRefs proporcionan en esencia una sem\u00e1ntica com\u00fan para la representaci\u00f3n de los v\u00ednculos entre documentos. Los DBRefs tambi\u00e9n requieren consultas adicionales para devolver los documentos de referencia.</p> Ejercicio <p>Crea la colecci\u00f3n sucursales y cuentas y realiza las siguientes consultas:</p> <ul> <li>Visualiza las cuentas de las sucursales de Madrid.</li> <li>Visualiza las cuentas son saldohaber &gt; 10000 cuyo director sea Fernando Rato.</li> <li>Sube 300 el saldohaber de las cuentas de la sucursal con c\u00f3digo SUCI</li> </ul>"},{"location":"bloque_iv/tema_18/page-6/","title":"6 MongoDB en Java","text":""},{"location":"bloque_iv/tema_18/page-6/#introduccion","title":"Introducci\u00f3n","text":"<p>Para trabajar en Java con MongoDB necesitamos descargar el driver desde la URL de MongoDB https://mongodb.github.io/mongo-java-driver</p>"},{"location":"bloque_iv/tema_18/page-6/#bson","title":"BSON","text":"<p>BSON es un formato de serializaci\u00f3n binaria, se utiliza para almacenar documentos y hacer llamadas a procedimientos en MongoDB. La especificaci\u00f3n BSON se encuentra en <code>bsonspec.org</code>. BSON soporta los siguientes tipos de datos como valores en los documentos, cada tipo de dato tiene un n\u00famero y un alias que se pueden utilizar con el operador <code>$type</code> para consultar los documentos por tipo BSON. Algunos de los tipos BSON son los siguientes:</p> Tipo N\u00famero Al\u00edas Double 1 \"double\" String 2 \"string\" Object 3 \"object\" Array 4 \"array\" Binary data 5 \"binData\" ObjectId 7 \"objectId\" Boolean 8 \"bool\" Date 9 \"date\" Null 10 \"null\" Symbol 14 \"symbol\" Timestamp 17 \"timestamp\" <p>Al comparar los valores de los diferentes tipos BSON, MongoDB utiliza el siguiente orden de comparaci\u00f3n, de menor a mayor: <code>Null</code>, <code>Numbers(int, long, double)</code>, <code>Symbol</code>, <code>String</code>, <code>Object</code>, <code>Array</code>, <code>BinData</code>, <code>ObjectId</code>, <code>Boolean</code>, <code>Date</code>, <code>Timestamp</code></p>"},{"location":"bloque_iv/tema_18/page-6/#conexion-a-la-bd","title":"Conexi\u00f3n a la BD","text":"<p>Para conectarnos a la base de datos creamos una instancia de <code>MongoClient</code>, por defecto crea una conexi\u00f3n con la base de datos local, y escucha por el puerto 27017. Todos los m\u00e9todos relacionados con operaciones CRUD (C*reate, R*ead, U*pdate and *D*elete) en Java se accede a trav\u00e9s de la interfaz ***MongoCollection. Las instancias de MongoCollection se pueden obtener a partir de la interfaz MongoClient por medio de una MongoDatabase</p> <pre><code>MongoClient client = MongoClients.create(URI);\nMongoDatabase db = client.getDatabase(DB);\nMongoCollection&lt;Document&gt; collection = db.getCollection(COLLECTION);\nclient.close(); // Close connection\n</code></pre> <p><code>MongoCollection</code> es una interfaz gen\u00e9rica: el par\u00e1metro de tipo TDocument es la clase que los clientes utilizan para insertar o modificar los documentos de una colecci\u00f3n, y es el tipo predeterminado para devolver b\u00fasqueda y agregados. El m\u00e9todo de un solo argumento <code>getCollection</code> devuelve una instancia de <code>MongoCollection&lt;Document&gt;</code>, y as\u00ed podemos trabajar con instancias de la clase de documento.</p>"},{"location":"bloque_iv/tema_18/page-6/#visualizar-los-datos-de-una-coleccion","title":"Visualizar los datos de una colecci\u00f3n","text":"<p>Los datos de una colecci\u00f3n se pueden cargar en una lista utilizando el m\u00e9todo <code>find().into()</code> de la siguiente manera:</p> <pre><code>List&lt;Document&gt; query = collection.find().into(new ArrayList&lt;&gt;());\nfor (Document document : query) {\nSystem.out.println(document);\n}\n</code></pre> <p>Con el m\u00e9todo <code>find()</code> se realiza la consulta, mientras que con el m\u00e9todo <code>into</code> pasamos dicha consulta a la colecci\u00f3n de datos que deseemos.</p> <p>Tambi\u00e9n podemos recuperar los valor de los campos del documento, utilizando los m\u00e9todos <code>get</code> del objeto Document, que recibe como par\u00e1metro el nombre de la clave. Si se sabe el tipo de dato de la clave elegiremos el m\u00e9todo correspondiente, y si no utilizamos <code>get()</code> que devuelve un objeto. Primero cargamos el elemento de la lista en un Document. Si la clave no existe en el documento visualizar\u00e1 null</p> <pre><code> for (Document document : query) {\nSystem.out.printf(\"Nombre: %s \", document.getString(\"nombre\"));\nSystem.out.printf(\"Edad: %d \", document.getInteger(\"edad\", 0));\nSystem.out.printf(\"On: %b\\n\", document.getBoolean(\"on\", false));\n}\n</code></pre>"},{"location":"bloque_iv/tema_18/page-6/#insertar-documentos","title":"Insertar documentos","text":"<p>Para insertar documentos, creamos un objeto Document, con el m\u00e9todo <code>put</code> asignamos los pares clave-valor, donde el primer par\u00e1metro es el nombre del campo o la clave, y el segundo el valor. Y con el m\u00e9todo <code>insertOne</code> se inserta en la colecci\u00f3n.</p> <pre><code>Document doc = new Document();\ndoc.put(\"nombre\", \"Mar\u00eda\");\ndoc.put(\"edad\", 18);\ncollection.insertOne(doc);\n</code></pre> <p>Tambi\u00e9n se puede insertar documentos utilizando el m\u00e9todo append de Document. Por ejemplo, se va a insertar el siguiente documento, se crea en curso un nuevo documento con dos pares clave-valor:</p> <pre><code>Document doc = new Document(\"nombre\", \"Marcos\")\n.append(\"edad\", 18)\n.append(\"cursos\", new Document()\n.append(\"curso1\", \"1DAM\")\n.append(\"curso2\", \"2DAM\")\n);\ncollection.insertOne(doc);\n</code></pre> <p>Dicho documento se visualizar\u00eda de la siguiente forma:</p> <pre><code>{\n\"Nombre\": \"Pedro\",\n\"tel\u00e9fono\": 12345,\n\"curso\": {\n\"curso1\": \"1DAM\",\n\"curso2\": \"2DAM\",\n}\n}\n</code></pre> <p>A la hora de visualizar el curso utilizaremos el m\u00e9todo <code>get()</code> en lugar de <code>getString()</code>.</p> <p>Se puede insertar en la base de datos una lista de documentos en una colecci\u00f3n utilizando el m\u00e9todo <code>insertMany</code></p> <p>Si se desea saber los documentos de una colecci\u00f3n se puede utilizar el m\u00e9todo <code>countDocuments</code>:</p> <pre><code>System.out.println(\"N\u00ba documentos: \" + collection.countDocuments());\n</code></pre>"},{"location":"bloque_iv/tema_18/page-6/#iterable","title":"Iterable","text":"<p>El m\u00e9todo <code>find()</code> devuelve un cursor de una instancia <code>FindIterable</code>. Podemos utilizar el m\u00e9todo <code>iterator()</code> para recorrer el cursor.</p> <pre><code>MongoCursor&lt;Document&gt; cursor = collection.find().iterator();\nDocument document;\nwhile(cursor.hasNext()){\ndocument = cursor.next();\nSystem.out.println(document.toJson());\n}\ncursor.close();\n</code></pre> <p>Si solo se desea obtener el primer documento utilizamos el m\u00e9todo <code>first()</code>:</p> <pre><code>Document first = collection.find().first();\nSystem.out.println(first.toJson());\n</code></pre>"},{"location":"bloque_iv/tema_18/page-6/#utilizar-filtros","title":"Utilizar filtros","text":"<p>El m\u00e9todo <code>find()</code> admite la utilizaci\u00f3n de filtros. Para utilizar los m\u00e9todos de la clase <code>Filters</code> hacemos un <code>import static</code> de la clase <code>Filters</code> de la siguiente manera:</p> <pre><code>import static com.mongodb.client.model.Filters.*;\n</code></pre> <p>Podemos usar sus diferentes m\u00e9todos como, <code>eq</code> para poder localizar los documentos cuyo elementos sean igual a lo indicado</p> <pre><code>Document document1 = collection.find(eq(\"nombre\", \"prueba\")).first();\nif(document1 == null) {\nSystem.out.println(\"Documento con nombre 'prueba' no encontrado\");\n} else {\nSystem.out.println(document1);\n}\n</code></pre> <p>Si el filtro devuelve varios documentos los recuperamos con un cursor, o bien con una lista.</p> <p>Si se desea extraer los objetos BSON de un documento, utilizaremos los filtros:</p> <pre><code>System.out.println(\"-------------------------OBJETOS BSON---------------------------\");\nMongoCursor&lt;Document&gt; cursor2 = collection.find().iterator();\nDocument document2;\nwhile(cursor2.hasNext()){\ndocument2 = cursor2.next();\nBson id = eq(\"_id\", document2.get(\"_id\"));\nBson nombre = eq(\"nombre\", document2.get(\"nombre\"));\nBson curso = eq(\"curso\", document2.get(\"curso\"));\nSystem.out.println(\"Id: \" + id + \". Nombre: \" + nombre + \". Curso: \" + curso);\n}\ncursor2.close();\n</code></pre>"},{"location":"bloque_iv/tema_18/page-6/#ordenar-resultados","title":"Ordenar resultados","text":"<p>Para ordenar el resultado de una consulta importamos los m\u00e9todos de la clase Sorts:</p> <pre><code>import static com.mongodb.client.model.Sorts.*;\n</code></pre> <p>De esta forma podemos obtener todos los documentos que tenga 2\u00baDAM, ordenados de forma descendiente por el nombre:</p> <pre><code>collection.find(eq(\"curso\", \"2DAM\")).sort(descending(\"nombre\"));\n</code></pre>"},{"location":"bloque_iv/tema_18/page-6/#utilizar-proyecciones","title":"Utilizar proyecciones","text":"<p>A veces no se necesitan todos los datos contenidos en un documento, se pueden utilizar proyecciones para cambiar las salidas. Se necesitan importar los m\u00e9todos de la clase <code>Projection</code>, estos m\u00e9todos devuelven un tipo BSON, que podr\u00e1 ser utilizado en otro m\u00e9todo. El import debe ser el siguiente:</p> <pre><code>import static com.mongodb.client.model.Projections.*;\n</code></pre> <p>De esta manera, solo vamos a obtener el nombre y la edad de cada persona:</p> <pre><code>MongoCursor&lt;Document&gt; cursor3 = collection.find()\n.sort(ascending(\"nombre\"))\n.projection(Projections.include(\"nombre\", \"edad\"))\n.iterator();\nwhile (cursor3.hasNext()){\nSystem.out.println(cursor3.next().toJson());\n}\ncursor3.close();\n</code></pre> <p>El m\u00e9todo <code>include</code> se utiliza para indicar los elementos que se desea visualizar, con el m\u00e9todo <code>exclude</code>, se indica los elementos que no se desea visualizar.</p>"},{"location":"bloque_iv/tema_18/page-6/#utilizar-agregaciones","title":"Utilizar agregaciones","text":"<p>Para utilizar los agregados se necesitan importar los m\u00e9todos de la clase <code>Aggregates</code>. Cada m\u00e9todo devuelve una instancia del tipo BSON, que a su vez se puede pasar al m\u00e9todo de agregado de MongoCollection. El import debe ser:</p> <pre><code>import static com.mongodb.client.model.Aggregates.*;\n</code></pre> <p>De esta manera:</p> <pre><code>MongoCursor&lt;Document&gt; cursor4 = collection.aggregate(\nList.of(match(eq(\"curso\", \"1DAM\")))\n).iterator();\nwhile (cursor4.hasNext()){\nSystem.out.println(cursor4.next().toJson());\n}\ncursor4.close();\n</code></pre>"},{"location":"bloque_iv/tema_18/page-6/#actualizar-documentos","title":"Actualizar documentos","text":"<p>Para actualizar las propiedad de un documento, podemos usar los m\u00e9todo <code>updateOne</code> y <code>updateMany</code>, para actualizar uno o varios documentos. Para poder actualizar un documento ser\u00e1 necesario:</p> <ul> <li>el filtro de consulta para localizar el/los elementos a actualizar, que puede ser un objeto Bson de la clase <code>Filters</code> o puede ser un nuevo Documento.</li> <li>la actualizaci\u00f3n de las propiedades con los m\u00e9todos de la clase de utilidad <code>Updates</code>, por ejemplo, el m\u00e9todo <code>set(prop, value)</code> indica un nuevo valor para dicha propiedad (o a\u00f1ade la propiedad si no existe), <code>inc(prop, value)</code> incrementa el valor  en la propiedad indicada, o <code>unset(prop)</code>, elimina la propiedad del documento. Se puede combinar varias actualizaciones haciendo uso del m\u00e9todo <code>combine</code>.</li> <li>opciones de actualizaci\u00f3n, como por ejemplo indicar que se inserte el documento en caso de que no exista, con el m\u00e9todo <code>upsert(true)</code> de la clase <code>UpdateOptions</code>.</li> </ul> <p>La actualizaci\u00f3n devuelve un objeto de tipo <code>UpdateResult</code> en el que podemos comprobar cuando documentos han sido modificados (<code>getModifiedCount()</code>) y cuantos elementos han sido seleccionados (<code>getMatchedCount()</code>).</p> <pre><code>collection.updateOne(eq(\"nombre\", \"Ana\"), set(\"nota\", 5));\nUpdateResult updateResult = collection.updateMany(eq(\"curso\", \"1DAM\"), inc(\"nota\", 1));\nSystem.out.println(\"Se han modificado: \" + updateResult.getModifiedCount());\nSystem.out.println(\"Se han seleccionado: \" + updateResult.getMatchedCount());\n</code></pre> <p>Tambi\u00e9n existe el m\u00e9todo <code>findOneAndUpdate()</code>, que localiza el documento a actualizar y lo actualiza y en lugar de devolverle un <code>UpdateResult</code> devuelve el documento de la forma indicada en las opciones de actualizaci\u00f3n (de la clase <code>FindOneAnUpdateOptions</code>). Con el m\u00e9todo <code>returnDocument(value)</code> podemos indicar que retorne el documento antes de actualizar (<code>ReturnDocument.BEFORE</code>) o despu\u00e9s de actualizar (<code>ReturnDocument.AFTER</code>)</p>"},{"location":"bloque_iv/tema_18/page-6/#reemplazar-documentos","title":"Reemplazar documentos","text":"<p>Con <code>replaceOne</code> se puede reemplazar un documento, indic\u00e1ndole la consulta de filtrado, el nuevo documento a reemplazar y las opciones de reemplazado (como por ejemplo <code>upsert</code> de la clase <code>ReplaceOptions</code>).</p> <pre><code>Bson query = eq(\"title\", \"Music of the Heart\");\nDocument replaceDocument = new Document().\nappend(\"title\", \"50 Violins\").\nappend(\"fullplot\", \" A dramatization of the true story of Roberta Guaspari who co-founded the Opus 118 Harlem School of Music\");\nReplaceOptions opts = new ReplaceOptions().upsert(true);\nUpdateResult result = collection.replaceOne(query, replaceDocument, opts);\n</code></pre> <p>La diferencia entre reemplazar y actualizar, es que actualizar me permite realizar actualizaciones de propiedades espec\u00edficas, mientras que reemplazar, reemplaza (o actualiza) el documento completo.</p> <p>Tambi\u00e9n existe el m\u00e9todo <code>findOneAndReplace()</code>, que localiza el documento a reemplazar y lo reemplaza y en lugar de devolverle un <code>UpdateResult</code> devuelve el documento de la forma indicada en las opciones de reemplazo (de la clase <code>FindOneAndReplaceOptions</code>). Con el m\u00e9todo <code>returnDocument(value)</code> podemos indicar que retorne el documento antes de reemplazar (<code>ReturnDocument.BEFORE</code>) o despu\u00e9s de reemplazar (<code>ReturnDocument.AFTER</code>)</p>"},{"location":"bloque_iv/tema_18/page-6/#borrar-un-documento-de-la-coleccion","title":"Borrar un documento de la colecci\u00f3n","text":"<p>Para eliminar un documento se usar\u00e1 <code>deleteOne</code> y para borrar varios <code>deleteMany</code>. Ambos devuelve un <code>DeleteResult</code></p> <pre><code>DeleteResult result1 = collection.deleteMany(eq(\"nombre\", \"Mar\u00eda\"));\nSystem.out.println(\"Se han eliminado: \" + result1.getDeletedCount());\n</code></pre>"},{"location":"bloque_iv/tema_18/page-6/#crear-y-borrar-una-coleccion","title":"Crear y borrar una colecci\u00f3n","text":"<p>Para crear una colecci\u00f3n utilizamos el m\u00e9todo <code>createCollection</code>, asociado a la base de datos y para eliminarla, usamos el m\u00e9todo <code>drop</code> asociado a la colecci\u00f3n:</p> <pre><code>MongoClient client = MongoClients.create(URI);\nMongoDatabase db = client.getDatabase(DB);\ndb.createCollection(\"new_collection\");\nMongoCollection&lt;Document&gt; collection = db.getCollection(\"new_collection\");\ncollection.drop();\n</code></pre>"},{"location":"bloque_iv/tema_18/page-6/#listar-colecciones-de-la-base-de-datos","title":"Listar colecciones de la base de datos","text":"<p>El m\u00e9todo listCollectionNames devuelve las colecciones de la base de datos en un MongoIterable:</p> <pre><code>db.listCollectionNames()\n.forEach(System.out::println);\n</code></pre>"},{"location":"bloque_iv/tema_18/page-6/#crear-listar-y-borrar-bases-de-datos","title":"Crear, listar y borrar bases de datos","text":"<p>Para crear una base de datos se llama al m\u00e9todo <code>getDatabase()</code> desde el objeto <code>MongoClient</code>, sin embargo, la base de datos no se crear\u00e1 hasta que no se inserte un documento.</p> <p>Con el m\u00e9todo <code>listDatabaseNames()</code> sirve para listar las bases de datos, y con el m\u00e9todo <code>drop</code> se elimina</p>"},{"location":"bloque_iv/tema_18/page-6/#pasar-de-mongodb-a-fichero","title":"Pasar de MongoDB a Fichero","text":"<p>Podemos crear un fichero JSON consultando todos los documentos y a\u00f1adi\u00e9ndolos a un fichero con la clase <code>BufferedWriter</code></p> <pre><code>MongoClient client = MongoClients.create(URI);\nMongoDatabase db = client.getDatabase(DB);\nMongoCollection&lt;Document&gt; collection = db.getCollection(COLLECTION);\ntry(BufferedWriter writer = new BufferedWriter(\nnew FileWriter(\"src/main/resources/doc.json\"))){\nList&lt;Document&gt; query = collection.find().into(new ArrayList&lt;&gt;());\nfor (Document document :\nquery) {\nwriter.write(document.toJson());\nwriter.newLine();\n}\n} catch (IOException e) {\nSystem.out.println(\"Error\");\n}\nclient.close();\n</code></pre> <p>Por el contrario, si tengo un fichero JSON y quiero almacenarlo, deber\u00eda leer dicho fichero con BufferedReader y insertar cada documento. Para pasar de una cadena en formato JSON a un documento, podemos usar el m\u00e9todo est\u00e1tico <code>parse</code> de la clase <code>Document</code>:</p> <pre><code>MongoClient client = MongoClients.create(URI);\nMongoDatabase db = client.getDatabase(DB);\nMongoCollection&lt;Document&gt; collection = db.getCollection(COLLECTION);\ntry(BufferedReader reader = new BufferedReader(\nnew FileReader(\"src/main/resources/doc.json\"))){\nString str;\nDocument doc;\nList&lt;Document&gt;  documents = new ArrayList&lt;&gt;();\nwhile((str = reader.readLine()) != null){\ndoc = Document.parse(str);\ndocuments.add(doc);\n}\ncollection.insertMany(documents);\n} catch (IOException e) {\nSystem.out.println(\"Error\");\n}\nclient.close();\n</code></pre>"},{"location":"bloque_iv/tema_18/page-6/#clases-pojos","title":"Clases POJOs","text":"<p>A veces, lo interesante de utilizar una base de datos es poder realizar conversiones con clases POJOs de un lenguaje de programaci\u00f3n. Para ello, se debe crear la clase POJO que representar\u00eda un documento de la base de datos. Teniendo el siguiente esquema de documentos, puede ser representada por la siguiente clase POJO:</p> DocumentClass GradeClass Score <pre><code>{\n\"_id\": \"ObjectId\",\n\"student_id\": \"number\",\n\"scores\": [\n{\n\"type\": \"string\",\n\"score\": \"double\"\n}\n],\n\"class_id\": \"number\"\n}\n</code></pre> <pre><code>public class Grade {\nprivate ObjectId id;\n@BsonProperty(\"student_id\")\nprivate Double studentId;\n@BsonProperty(\"class_id\")\nprivate Integer classId;\nprivate List&lt;Score&gt; scores;\npublic ObjectId getId() {\nreturn id;\n}\npublic void setId(ObjectId id) {\nthis.id = id;\n}\npublic Double getStudentId() {\nreturn studentId;\n}\npublic void setStudentId(Double studentId) {\nthis.studentId = studentId;\n}\npublic Integer getClassId() {\nreturn classId;\n}\npublic void setClassId(Integer classId) {\nthis.classId = classId;\n}\npublic List&lt;Score&gt; getScores() {\nreturn scores;\n}\npublic void setScores(List&lt;Score&gt; scores) {\nthis.scores = scores;\n}\n@Override\npublic boolean equals(Object o) {\nif (this == o) return true;\nif (o == null || getClass() != o.getClass()) return false;\nGrade grade = (Grade) o;\nreturn id.equals(grade.id) &amp;&amp; studentId.equals(grade.studentId)\n&amp;&amp; classId.equals(grade.classId) &amp;&amp; scores.equals(grade.scores);\n}\n@Override\npublic int hashCode() {\nreturn id.hashCode() + studentId.hashCode() + classId.hashCode() + scores.hashCode();\n}\n}\n</code></pre> <pre><code>public class Score {\nprivate String type;\nprivate Double score;\npublic String getType() {\nreturn type;\n}\npublic void setType(String type) {\nthis.type = type;\n}\npublic Double getScore() {\nreturn score;\n}\npublic void setScore(Double score) {\nthis.score = score;\n}\n@Override\npublic String toString() {\nreturn \"Score{\" +\n\"type='\" + type + '\\'' +\n\", score=\" + score +\n'}';\n}\n@Override\npublic boolean equals(Object o) {\nif (this == o) return true;\nif (o == null || getClass() != o.getClass()) return false;\nScore score1 = (Score) o;\nreturn score1.type.equals(type) &amp;&amp; score1.score.equals(score);\n}\n@Override\npublic int hashCode() {\nreturn type.hashCode() + score.hashCode();\n}\n}\n</code></pre> <p>Utilizamos la anotaci\u00f3n <code>BsonProperty(name)</code> para hacer coincidir un atributo de la clase con una propiedad del documento, que tienen nombres diferentes.</p> <p>Una vez definida la clase POJO, podemos empezar a realizar conexiones. En primer lugar, crearemos la conexi\u00f3n, pero en este caso en lugar de usar la ruta por defecto (tal y como hemos hecho hasta hora), necesitaremos especificarle una configuraci\u00f3n POJO, es decir, debemos incluirle una configuraci\u00f3n de codificaci\u00f3n de los POJO, adem\u00e1s de una codificaci\u00f3n para los tipos de Java:</p> <pre><code>ConnectionString string = new ConnectionString(URI);\nCodecRegistry pojoCodeRegistry = CodecRegistries.fromProviders(PojoCodecProvider.builder().automatic(true).build());\nCodecRegistry codecRegistry = CodecRegistries.fromRegistries(MongoClientSettings.getDefaultCodecRegistry(), pojoCodeRegistry);\nMongoClientSettings settings = MongoClientSettings.builder()\n.applyConnectionString(string)\n.codecRegistry(codecRegistry)\n.build();\nMongoClient client = MongoClients.create(settings);\n</code></pre> <p>Analicemos cada una de las l\u00edneas del ejemplo anterior:</p> <ul> <li>La primera l\u00ednea crea una cadena de conexi\u00f3n, que ser\u00e1 necesaria para crear los settings del cliente de MongoDB.</li> <li>La segunda l\u00ednea configura un registro de codificaci\u00f3n para las clases POJOs de forma autom\u00e1tica. De esta forma, se puede aceptar cualquier clase POJO.</li> <li>La tercera l\u00ednea a\u00f1ade a la configuraci\u00f3n de codificaci\u00f3n los registros de codificaci\u00f3n por defecto para los tipos de Java, adem\u00e1s para las clases POJOs.</li> <li>En la cuarta l\u00ednea creamos la configuraci\u00f3n para el cliente de MongoDB, el cual le aplicamos la cadena de conexi\u00f3n (debe de ser de tipo <code>ConnectionString</code>, de ah\u00ed, que en la primera l\u00ednea se cree la cadena con dicha clase), e indic\u00e1ndole los registro de codificaci\u00f3n.</li> <li>Por \u00faltimo, creamos el cliente MongoDB con toda la configuraci\u00f3n realizada.</li> </ul> <p>Una vez creado nuestro cliente, podemos acceder a la base de datos y a nuestra colecci\u00f3n, tal y como hemos hecho hasta hora. Sin embargo, en lugar de utilizar el tipo gen\u00e9rico <code>Document</code> para la clase <code>MongoCollection</code>, se usar\u00eda como tipo gen\u00e9rico el tipo de la clase creada, adem\u00e1s que al m\u00e9todo <code>getCollection</code> se le indica tambi\u00e9n la clase a la que debe parsear:</p> <pre><code>MongoDatabase db = client.getDatabase(DB);\nMongoCollection&lt;Grade&gt; collection = db.getCollection(COLLECTION, Grade.class);\n</code></pre> <p>Para poder insertar un nuevo objeto, se crea el objeto de dicha clase y se inserta haciendo uso del m\u00e9todo <code>insertOne</code>. Si por el contrario, se quiere insertar varios elementos de dicha clase, se crea una lista de con los objetos de la clase y se inserta con el el m\u00e9todo <code>insertMany</code>. El resto de operaciones, funcionar\u00eda exactamente igual, pero en lugar de usar objetos de clase <code>Document</code>, se usar\u00eda objetos de la clase <code>Grade</code>. Ejemplo completo:</p> <pre><code>ConnectionString string = new ConnectionString(URI);\nCodecRegistry pojoCodeRegistry = fromProviders(PojoCodecProvider.builder().automatic(true).build());\nCodecRegistry codecRegistry = fromRegistries(MongoClientSettings.getDefaultCodecRegistry(), pojoCodeRegistry);\nMongoClientSettings settings = MongoClientSettings.builder()\n.applyConnectionString(string)\n.codecRegistry(codecRegistry)\n.build();\nMongoClient client = MongoClients.create(settings);\nMongoDatabase db = client.getDatabase(DB);\nMongoCollection&lt;Grade&gt; collection = db.getCollection(COLLECTION, Grade.class);\nScore score = new Score(\"exam\", 7.5);\nGrade grade = new Grade(10003.0, 10, List.of(score));\ncollection.insertOne(grade);\nGrade findGrade = collection.find(eq(\"student_id\", 10003d)).first();\nSystem.out.println(\"Grade found:\\t\" + grade);\nif(findGrade == null){\nSystem.out.println(\"No se encuentra\");\nreturn;\n}\nList&lt;Score&gt; newScores = new ArrayList&lt;&gt;(findGrade.getScores());\nScore newScore = new Score(\"exam\", 42d);\nnewScores.add(newScore);\ngrade.setScores(newScores);\nDocument filterByGradeId = new Document(\"_id\", grade.getId());\nFindOneAndReplaceOptions returnDocAfterReplace = new FindOneAndReplaceOptions()\n.returnDocument(ReturnDocument.AFTER);\nGrade updatedGrade = collection.findOneAndReplace(filterByGradeId, grade, returnDocAfterReplace);\nSystem.out.println(\"Grade replaced:\\t\" + updatedGrade);\nSystem.out.println(collection.deleteOne(filterByGradeId));\nclient.close();\n</code></pre>"},{"location":"bloque_iv/tema_18/page-7/","title":"Proyecto","text":"<p>Se quiere crear una base de datos y un sistema gestor de la misma para trabajar con los ex\u00e1menes tipo test de una universidad de prestigio. Para ello, se quiere almacenar informaci\u00f3n de los siguientes datos:</p> Ex\u00e1menesPreguntasRespuestas <p>Se desea almacenar informaci\u00f3n de los ex\u00e1menes que se van a realizar, almacenando los siguientes datos:</p> <ul> <li>T\u00edtulo del examen (por ejemplo, \"Examen parcial del patr\u00f3n MVC\").</li> <li>Materia a la que va dirigida el examen.</li> <li>Profesor/a titular del examen.</li> <li>Tiempo del examen (la ley obliga que un examen no pueda ser superior a 2 horas y media).</li> <li>Puntuaci\u00f3n m\u00e1xima a obtener.</li> </ul> <p>De las preguntas solo se desea guardar su t\u00edtulo y su puntuaci\u00f3n. Has de tener en cuenta que una pregunta solo puede pertenecer a un examen. Dentro de un mismo examen. Tambi\u00e9n se desea saber si la pregunta es de m\u00faltiple opci\u00f3n o no.</p> <p>De las respuestas se desea conocer, el valor de la respuesta como un indicador de s\u00ed la respuesta es correcta o no.</p> Ejercicio 1 <p>Una vez definida la estructura de los datos, realiza el modelo entidad relaci\u00f3n y el modelo de datos. Adem\u00e1s crea las clases POJOs necesarias haciendo uso del diagrama de clases.</p> Ejercicio 2 <p>Crea la estructura de datos nuestra aplicaci\u00f3n haciendo uso del patr\u00f3n Repository.</p> Ejercicio 3 <p>Crea un men\u00fa que tenga las siguientes opciones:</p> <ol> <li>Crear un examen. Debe solicitar los datos necesarios del examen al usuario, crear e insertarlo en la base de datos.</li> <li>A\u00f1adir preguntas a un examen. El usuario deber\u00e1 insertar todas las preguntas que sean necesarias hasta que indique como t\u00edtulo de la pregunta que ya no desea insertar ninguna pregunta m\u00e1s (haciendo uso de la palabra exit). Para insertar una pregunta se le solicitar\u00e1 al usuario:<ul> <li>La informaci\u00f3n relevante para la pregunta. Debes tener en cuenta la puntuaci\u00f3n del examen, en caso de que la nota supere el m\u00e1ximo esperado, dejando como nota la cantidad necesaria hasta llegar al m\u00e1ximo sin importar lo indicado por el usuario, es decir, si el examen tiene una puntuaci\u00f3n m\u00e1xima de 10 y tiene 3 preguntas con 3 puntos cada una, la pregunta a insertar no puede superar el 1, en caso de hacerlo, har\u00e1 caso omiso, y escribir\u00e1 1.</li> <li>El n\u00famero de respuestas a introducir y el valor de la respuesta, teniendo en cuenta que si la pregunta es de una sola respuesta correcta y se inserta m\u00e1s respuestas correctas, solo tomar\u00e1 como correcta, la primera de ellas.</li> <li>El examen a insertar.</li> </ul> </li> <li>Consultar examen. Podr\u00e1 ver las pregunta (sin respuestas) del examen solicitado por el usuario.</li> <li>Actualizar pregunta. Podr\u00e1 modificar preguntas del examen solicitado. Solo puede modificar el t\u00edtulo y la puntuaci\u00f3n.</li> <li>Eliminar pregunta. Eliminar\u00e1 la pregunta indicada.</li> <li>Consultar pregunta. Mostrar\u00e1 las respuestas del examen solicitado.</li> <li>Actualizar respuesta. Podr\u00e1 actualizar una respuesta de la pregunta solicitada, pudiendo modificar tanto el valor de la respuesta como si es correcta o no.</li> <li>A\u00f1adir respuesta. Solicitar\u00e1 informaci\u00f3n de una respuesta y la introducir\u00e1 en la pregunta.</li> <li>Eliminar respuesta. Eliminar\u00e1 la respuesta de la pregunta eliminada.</li> <li>Ver examen completo. Se le solicitar\u00e1 el usuario el examen a ver y el modo de verlo, alumno o profesor. Si elige la opci\u00f3n modo alumno, mostrar\u00e1 el examen imprimido con el formato (indicado despu\u00e9s), mientras que si el usuario elige el modo profesor, mostrar\u00e1 el examen con las respuestas correctas indicadas en verdes.</li> <li>Realizar back up. Se almacenar\u00e1 en un fichero JSON, una copia de seguridad de la base de datos. </li> <li>Imprimir examen. Imprimir\u00e1 el examen en su formato en un fichero de texto. Ten en cuenta, que el examen no ser\u00e1 imprimido si le faltan preguntas o si una pregunta no tiene respuestas. </li> </ol>"},{"location":"bloque_v/tema_19/page-1/","title":"1 Programa vs Proceso","text":""},{"location":"bloque_v/tema_19/page-1/#aplicacion","title":"Aplicaci\u00f3n","text":"<p>A simple vista, parece que con los t\u00e9rminos aplicaci\u00f3n, ejecutable y proceso, hacen referencia al mismo concepto, pero en realidad no es as\u00ed.</p> <p>En general, conocemos como software el conjunto de programas inform\u00e1ticos que se ejecutan sobre el hardware del equipo.</p> <p>Programa</p> <p>Un programa es el conjunto de instrucciones que ejecutadas en un ordenador realizar\u00e1n una tarea o ayudar\u00e1n al usuario a realizarla.</p> <p>Este conjunto de programas se puede subdividir en dos grandes grupos:</p> <ul> <li>Los programas para la gesti\u00f3n del hardware: sistema operativo, controladores de dispositivos, etc.</li> <li>Las aplicaciones de usuario, que son los que resuelven problemas espec\u00edficos del usuario, como por ejemplo editar una imagen, enviar un e-mail, etc.</li> </ul> <p>Aplicaci\u00f3n</p> <p>Una aplicaci\u00f3n es un tipo de programa inform\u00e1tico, dise\u00f1ado como herramienta para resolver de manera autom\u00e1tica un problema espec\u00edfico del usuario.</p> <p>Desde el punto de vista de los sistemas operativos, llamamos programa a la representaci\u00f3n en disco de una aplicaci\u00f3n, que contiene tanto el c\u00f3digo como los datos que maneja.</p> <p>Una aplicaci\u00f3n es un tipo de programa inform\u00e1tico, dise\u00f1ado como herramienta para resolver de manera autom\u00e1tica un problema espec\u00edfico del usuario.</p>"},{"location":"bloque_v/tema_19/page-1/#ejecutable","title":"Ejecutable","text":"<p>Nosotros, como programadores y programadoras, creamos un programa, escribiendo su c\u00f3digo fuente. Con ayuda de un compilador, obtenemos su c\u00f3digo binario o interpretado. Este c\u00f3digo binario o interpretado, lo guardamos en un fichero. Este fichero, es un fichero ejecutable.</p> <p>Ejecutable</p> <p>Un ejecutable es un fichero que contiene el c\u00f3digo binario o interpretado que puede ser ejecutado en un ordenador.</p> <p>En sistemas operativos Windows, podemos reconocer un fichero ejecutable porque su extensi\u00f3n suele ser <code>.exe</code>. En otros sistemas operativos, como los basados en GNU/Linux, los ficheros ejecutables se identifican como ficheros que tienen activado su permiso de ejecuci\u00f3n y no tienen que tener una extensi\u00f3n determinada.</p> <p>Seg\u00fan el tipo de c\u00f3digo que contenga, podemos clasificar ejecutables en:</p> <ul> <li>Binarios: Formados por un conjunto de instrucciones que directamente son ejecutadas por el procesador del ordenador. Este c\u00f3digo se obtiene al compilar el c\u00f3digo fuente de un programa y se guarda en un fichero ejecutable. Este c\u00f3digo s\u00f3lo se ejecutar\u00e1 correctamente en equipos cuya plataforma sea compatible con aquella para la que ha sido compilado (no es multiplataforma).</li> <li>Interpretados. C\u00f3digo que suele tratarse como un ejecutable, pero no es c\u00f3digo binario (m\u00e1quina), sino otro tipo de c\u00f3digo, como por ejemplo el bytecode de Java. Est\u00e1 formado por c\u00f3digos de operaci\u00f3n que tomar\u00e1 el int\u00e9rprete, en el caso de Java la m\u00e1quina virtual Java o JRE. Ese int\u00e9rprete ser\u00e1 el encargado de traducirlos al lenguaje m\u00e1quina que ejecutar\u00e1 el procesador. El c\u00f3digo interpretado es m\u00e1s susceptible de ser multiplataforma o independiente de la m\u00e1quina f\u00edsica en la que se haya compilado.</li> </ul> <p>Un tipo especial de ejecutables interpretados, son los llamados scripts. Estos ficheros, contienen las instrucciones que ser\u00e1n ejecutadas una detr\u00e1s de otra por el int\u00e9rprete. Se diferencian de otros lenguajes interpretados porque no son compilados. Por lo que los podremos abrir y ver el c\u00f3digo que contienen con un editor de texto plano (cosa que no pasa con los binarios e interpretados compilados). Los int\u00e9rpretes de este tipo de lenguajes se suelen llamar motores. Ejemplos de lenguajes de script son JavaScript, PHP, Python, ficheros .BAT en MS-DOS, Powershell en Windows, bash scripts en GNU/Linux, etc.</p> <p>Las librer\u00edas, por su parte, contienen c\u00f3digo ejecutable que es de utilidad para varios programas, que pueden invocar las funciones que contienen. El conjunto de funciones que incorpora una librer\u00eda suele ser altamente reutilizable y \u00fatil para los programadores, evitando que tengan que reescribir una y otra vez el c\u00f3digo que realiza la misma tarea.</p>"},{"location":"bloque_v/tema_19/page-1/#proceso","title":"Proceso","text":"<p>Desde el punto de vista del sistema operativo, un programa no deja de ser un conjunto de ficheros almacenados en un disco. Entre dichos archivos, al menos uno de ellos ser\u00e1 un archivo ejecutable, pero no deja de ser un archivo en disco.</p> <p>Sin embargo, cuando ejecutamos el fichero ejecutable de un programa aparece un nuevo concepto, el de proceso.</p> <p>Proceso</p> <p>Podr\u00edamos definir proceso como la representaci\u00f3n en el sistema operativo de un programa en ejecuci\u00f3n.</p> <p>Un proceso no se refiere \u00fanicamente al c\u00f3digo y a los datos gestionados por el programa correspondiente, sino tambi\u00e9n toda la informaci\u00f3n necesaria para que el sistema operativo pueda ejecutar el programa.</p> <p>Siempre que lancemos la ejecuci\u00f3n de un programa, se crear\u00e1, al menos, un proceso nuevo en nuestro sistema.</p> <p>Debemos tener en cuenta que podemos tener dos procesos distintos que provengan del mismo programa. Por ejemplo, si ejecutamos el mismo programa dos veces, a trav\u00e9s de su fichero ejecutable, tendremos dos procesos distintos, con un contador, imagen de memoria y estado del procesador diferentes, aunque ambos procesos est\u00e9n basados en el mismo programa.</p> <p>Otra posibilidad es que un programa, al ponerse en ejecuci\u00f3n, de lugar a m\u00e1s de un proceso, cada uno de ellos ejecutando una parte del programa. Por ejemplo, al ejecutar el navegador puede dar lugar a m\u00e1s de un proceso: uno que controla la interacci\u00f3n del usuario con la interfaz, otro que lleva a cabo las peticiones web solicitadas por el usuario, etc.</p>"},{"location":"bloque_v/tema_19/page-1/#demonios-y-servicios","title":"Demonios y servicios","text":"<p>Demonio</p> <p>Llamamos demonio a un proceso que est\u00e1 ejecut\u00e1ndose continuamente en segundo plano, sin interactuar con el usuario. Se dedican normalmente a ofrecer un servicio b\u00e1sico al sistema. De hecho, en algunos sistemas operativos, como Windows, a los demonios se les denomina servicios.</p> <p>Un servicio es un proceso que, normalmente, es cargado durante el arranque del sistema operativo. Recibe el nombre de servicio, ya que es un proceso que queda a la espera de que otro le pida que realice una tarea. Por ejemplo, tenemos el servicio de impresi\u00f3n con su t\u00edpica cola de trabajos a imprimir. Nuestra impresora imprime todo lo que recibe del sistema. El servicio de impresi\u00f3n, es el encargado de ir enviando los datos de forma correcta a la impresora para que el resultado sea el esperado. Adem\u00e1s, las impresoras, no siempre tienen suficiente memoria para guardar todos los datos de impresi\u00f3n de un trabajo completo, por lo que el servicio de impresi\u00f3n se los dar\u00e1 conforme vaya necesit\u00e1ndolos. Cuando finalice cada trabajo, puede notific\u00e1rselo al usuario. Si en la cola de impresi\u00f3n, no hay trabajos pendientes, el servicio de impresi\u00f3n quedar\u00e1 a la espera y podr\u00e1 avisar a la impresora para que quede en standby.</p> <p>Normalmente hay muchos servicios activos o en ejecuci\u00f3n en el sistema, y no todos son servicios del sistema operativo, tambi\u00e9n hay servicios de aplicaci\u00f3n, instalados por el usuario y que pueden lanzarse al arrancar el sistema operativo o no, dependiendo de su configuraci\u00f3n.</p>"},{"location":"bloque_v/tema_19/page-2/","title":"2 Computaci\u00f3n Concurrente","text":""},{"location":"bloque_v/tema_19/page-2/#computacion-concurrente-y-multitarea","title":"Computaci\u00f3n concurrente y multitarea","text":"<p>Como sabemos, en nuestro sistema operativo, se est\u00e1n ejecutando al mismo tiempo muchos procesos. Por ejemplo, podemos estar escuchando m\u00fasica con nuestro reproductor multimedia favorito, y al mismo tiempo tener abierto el navegador web, o cualquier otra aplicaci\u00f3n. De igual manera, se estar\u00e1n ejecutando tambi\u00e9n procesos del propio sistema operativo.</p> <p>Computaci\u00f3n concurrente</p> <p>Llamamos computaci\u00f3n concurrente al hecho de que varios procesos se est\u00e9n ejecutando concurrentemente en el sistema operativo.</p> <p>Se dice que dos procesos son concurrentes cuando la primera instrucci\u00f3n de uno de ellos se ejecuta despu\u00e9s de la primera instrucci\u00f3n del otro y antes de la \u00faltima. Es decir, cuando existe un solapamiento en la ejecuci\u00f3n de sus instrucciones, no siendo estrictamente necesario que se est\u00e9n ejecutando a la vez en un instante dado.</p> <p>Multitarea</p> <p>Desde el punto de vista del usuario, la computaci\u00f3n concurrente es conocida como multitarea, ya que permite al usuario estar realizando varias tareas de manera concurrente.</p> <p>Todos los sistema operativos actuales, como Windows, MacOS o Linux, son multitarea.</p>"},{"location":"bloque_v/tema_19/page-2/#paralelismo-y-multiprogramacion","title":"Paralelismo y multiprogramaci\u00f3n","text":"<p>Para entender la computaci\u00f3n concurrente lo primero que debemos hacer es comprender la diferencia entre paralelismo y multiprogramaci\u00f3n.</p> <p>Paralelismo</p> <p>Para que exista paralelismo es necesario que el sistema disponga de al menos dos n\u00facleos de procesamiento, ya sean dentro de un \u00fanico procesador, o en varios procesadores, que ejecuten de manera simult\u00e1nea (paralela) ese mismo n\u00famero de instrucciones, una en cada n\u00facleo.</p> <p>Pero entonces, \u00bfc\u00f3mo podemos lograr la computaci\u00f3n concurrente si s\u00f3lo disponemos de un \u00fanico n\u00facleo de procesamiento? Mediante la t\u00e9cnica conocida como multiprogramaci\u00f3n.</p> <p>Multiprogramaci\u00f3n</p> <p>La multiprogramaci\u00f3n consiste en asignar por turnos el n\u00facleo de procesamiento durante un corto periodo de tiempo (milisegundos) a cada uno de los procesos en ejecuci\u00f3n, siguiendo un determinado m\u00e9todo de planificaci\u00f3n.</p> <p>En cada cambio de turno el sistema lleva a cabo el denominado cambio de contexto, que consiste en guardar la informaci\u00f3n del proceso saliente (su contador, su imagen y el estado de los registro del procesador) y recuperar la informaci\u00f3n correspondiente del proceso entrante.</p> <p>Debemos tener en cuenta que la t\u00e9cnica de multiprogramaci\u00f3n no mejora el tiempo de ejecuci\u00f3n global de los procesos, sino que lo empeora, ya que hay que tener en cuenta el tiempo necesario para llevar a cabo los m\u00faltiples cambios de contexto. Como contrapartida, la multiprogramaci\u00f3n consigue la percepci\u00f3n para el usuario de que los programas se est\u00e1n ejecutando simult\u00e1neamente.</p> <p>Cuando varios procesos se ejecutan concurrentemente puede haber procesos que colaboren para un determinado fin mientras que otros compitan por los recursos del sistema. Incluso aquellos procesos que colaboran deber\u00e1n competir a la hora de obtener tiempo de procesador. Para llevar a cabo las tareas de colaboraci\u00f3n y competencia por los recursos se hace necesaria la introducci\u00f3n de mecanismos de comunicaci\u00f3n y sincronizaci\u00f3n entre procesos.</p>"},{"location":"bloque_v/tema_19/page-2/#multiprocesamiento-y-procesamiento-distribuido","title":"Multiprocesamiento y procesamiento distribuido","text":"<p>Dentro de los sistemas con paralelismo, es decir con varios n\u00facleos de procesamiento, tenemos dos tipos:</p> <p>Multiprocesamiento</p> <p>En los sistemas con varios n\u00facleos de procesamiento hablaremos de multiprocesamiento cuando \u00e9stos compartan memoria.</p> <p>Los sistemas de multiprocesamiento se caracterizan porque los procesos que se est\u00e9n ejecutando en los diferentes n\u00facleos pueden comunicarse entre as\u00ed a trav\u00e9s de la memoria com\u00fan.</p> <p>Procesamiento distribuido</p> <p>En los sistemas con varios n\u00facleos de procesamiento que NO compartan memoria hablaremos de procesamiento distribuido.</p> <p>En los sistemas de procesamiento distribuido la comunicaci\u00f3n entre las procesos en ejecuci\u00f3n NO se podr\u00e1 llevar a cabo a trav\u00e9s de la memoria, ya que no poseen una memoria com\u00fan, por lo que ser\u00e1 necesario usar obligatoriamente otros mecanismos de comunicaci\u00f3n m\u00e1s complejos. Un ejemplo t\u00edpico de este tipo de sistema es la cooperaci\u00f3n de varios ordenadores distribuidos en red en la ejecuci\u00f3n de una serie de tareas. Cada uno de estos ordenadores posee su propio procesador y su propia memoria.</p>"},{"location":"bloque_v/tema_19/page-3/","title":"3 Procesos en el sistema operativo","text":""},{"location":"bloque_v/tema_19/page-3/#gestion-de-procesos-en-multiprogramacion","title":"Gesti\u00f3n de procesos en multiprogramaci\u00f3n","text":"<p>Si el sistema tiene que repartir el uso del microprocesador entre los distintos procesos, \u00bfqu\u00e9 le sucede a un proceso cuando no se est\u00e1 ejecutando? Y, si un proceso est\u00e1 esperando datos, \u00bfpor qu\u00e9 el equipo hace otras cosas mientras que un proceso queda a la espera de datos?</p> <p>Los procesos nuevos van entrando en una cola de procesos activos, a la espera de que llegue su turno y el sistema operativo les conceda el uso de la CPU.</p> <p>Cuando llega su turno, el sistema operativo concede la CPU al proceso durante un tiempo determinado y equitativo, denominado quantum.</p> <p>Cuando un proceso que consume su quantum, el proceso es pausado y enviado al final de la cola.</p> <p> Figura 1 - Estados de un proceso</p> <p>Si, teniendo asignada la CPU, un un proceso finaliza su ejecuci\u00f3n, sale del sistema de gesti\u00f3n de procesos, liberando la CPU.</p> <p>Si, teniendo asignada la CPU, el proceso realiza una operaci\u00f3n de E/S, como obtener leer o escribir de un archivo o una entrada de datos que deba suministrar el usuario, el proceso queda bloqueado hasta que haya finalizado dicha operaci\u00f3n de E/S, liberando la CPU.</p> <p>El proceso es bloqueado porque los dispositivos de E/S son mucho m\u00e1s lentos que la CPU, por lo que, mientras que uno de ellos est\u00e1 esperando una E/S, se puede asignar la CPU a otros procesos para que ejecuten sus instrucciones.</p> <p>Cuando termina la operaci\u00f3n de E/S que tenga un proceso bloqueado, el sistema operativo volver\u00e1 a colocar al proceso en la cola de procesos activos, para que recoja los datos y contin\u00fae con su tarea cuando se le conceda su quantum.</p> <p>Todo proceso en ejecuci\u00f3n, tiene que estar cargado en la RAM f\u00edsica del equipo o memoria principal, as\u00ed como todos los datos que necesite.</p> <p>Cuando la memoria RAM del equipo est\u00e1 llena, algunos procesos deber\u00e1n pasar a disco para dejar espacio en RAM que permita la ejecuci\u00f3n de otros procesos. A esta operaci\u00f3n se le conoce como suspender un proceso.</p> <p>Hay procesos en el equipo cuya ejecuci\u00f3n es cr\u00edtica para el sistema, como por ejemplo los correspondientes al propio sistema operativo, por lo que estos procesos tendr\u00e1n prioridad frente a los procesos de usuario.</p>"},{"location":"bloque_v/tema_19/page-3/#creacion-de-un-proceso","title":"Creaci\u00f3n de un proceso","text":"<p>Cuando se lanza la ejecuci\u00f3n de un ejecutable, el cargador de procesos del sistema operativo es el encargado de crear el proceso correspondiente. Para ello, en primer lugar reserva para el proceso un determinado espacio en la memoria RAM del sistema, que recibe el nombre de espacio de direcciones de memoria del proceso. En dicho espacio de memoria se copia desde el fichero ejecutable situado en disco todas las instrucciones de la aplicaci\u00f3n, y se determina una determinada cantidad de espacio de memoria para los datos de la aplicaci\u00f3n y su pila de llamadas.</p> <p> Figura 2 - Proceso en memoria</p> <p>Un proceso, durante su ejecuci\u00f3n, no podr\u00e1 hacer referencia a direcciones que se encuentren fuera de su espacio de memoria; si lo intentara, el sistema operativo lo detectar\u00e1 y generar\u00e1 una excepci\u00f3n (produciendo, por ejemplo, los t\u00edpicos pantallazos azules de Windows).</p> <p>Despu\u00e9s, el cargador crea una estructura de datos para proceso, denominada PCB (Process Control Block, Bloque de Control de Proceso). La informaci\u00f3n del PCB, es \u00fanica para cada proceso y permite controlarlo. Esta informaci\u00f3n, tambi\u00e9n la utilizar\u00e1 el planificador (scheduler) del sistema operativo.</p> <p>Entre otros datos, el PCB estar\u00e1 formado por:</p> <ul> <li>Identificador del proceso o PID. Es un n\u00famero \u00fanico para cada proceso.</li> <li>Estado actual del proceso: en ejecuci\u00f3n, listo, bloqueado, suspendido, finalizando.</li> <li>Espacio de direcciones de memoria: d\u00f3nde comienza la zona de memoria reservada para el proceso y cu\u00e1l es su tama\u00f1o.</li> <li>Informaci\u00f3n para la planificaci\u00f3n: prioridad, quantum, estad\u00edsticas, etc.</li> <li>Informaci\u00f3n para el cambio de contexto, es decir para poder cambiar la ejecuci\u00f3n de un proceso a otro. Incluye:</li> <li>El contador del programa: Indica la instrucci\u00f3n por donde se est\u00e1 ejecutando el proceso.</li> <li>El estado del procesador: Valores actuales de los registros del procesador sobre el que se est\u00e1 ejecutando el proceso.</li> <li>El puntero de pila de llamadas: En cada instante apunta a la parte superior de la pila del proceso en ejecuci\u00f3n.</li> <li>Recursos utilizados. Ficheros abiertos, conexiones, etc.</li> </ul>"},{"location":"bloque_v/tema_19/page-3/#planificacion-de-procesos","title":"Planificaci\u00f3n de procesos","text":"<p>Una vez que el proceso ya est\u00e1 cargado en memoria, ser\u00e1 el planificador (scheduler) el encargado de tomar las decisiones relacionadas con la ejecuci\u00f3n de los procesos.</p> <p>Planificador</p> <p>El planificador (scheduler) es un proceso del sistema operativo encargado de decidir qu\u00e9 proceso se ejecuta en cada momento y durante cu\u00e1nto tiempo.</p> <p>La pol\u00edtica en la toma de decisiones del planificador se denomina algoritmo de planificaci\u00f3n (scheduling algorithm). Existen distintos tipos de algoritmos de planificaci\u00f3n (que estudiasteis en en el curso anterior), con distintas caracter\u00edsticas, pero todos buscan conciliar los siguientes objetivos lo mejor posible:</p> <ul> <li>Equidad: que todos los procesos deben poder ejecutarse.</li> <li>Eficacia: que la CPU se mantenga ocupada el 100% del tiempo.</li> <li>Tiempo de respuesta: que el tiempo de respuesta al usuario sea el m\u00ednimo posible.</li> <li>Tiempo de finalizaci\u00f3n: que el tiempo de finalizaci\u00f3n del proceso sea el m\u00ednimo posible.</li> <li>Rendimiento: que el n\u00famero de tareas procesadas en una determinada unidad de tiempo sea el m\u00e1ximo posible.</li> </ul> <p>Una vez que el algoritmo de planificaci\u00f3n ha decidido el siguiente proceso que debe usar la CPU, entra en acci\u00f3n el m\u00f3dulo conocido como dispatcher (despachador).</p> <p>Dispatcher</p> <p>El dispatcher (despachador) del el m\u00f3dulo del planificador que realiza el cambio de contexto, de manera que el proceso elegido por el planificador pueda hacer uso de la CPU.</p> <p>El dispatcher debe ser lo m\u00e1s r\u00e1pido posible en realizar el cambio de contexto, ya que durante dicho tiempo, conocido como latencia, la CPU no est\u00e1 siendo usada.</p>"},{"location":"bloque_v/tema_19/page-3/#herramientas-de-gestion-de-procesos","title":"Herramientas de gesti\u00f3n de procesos","text":"<p>Todos los sistemas operativos con interfaz gr\u00e1fica disponen de alguna aplicaci\u00f3n de gesti\u00f3n de procesos. En Windows tenemos el Administrador de tareas, en Linux el Monitor del sistema y en MacOS Monitor de actividad. Todos son bastante parecidos, y nos ofrecen funcionalidad similares:</p> <ul> <li>Listado de todos los procesos que se encuentran activos en el sistema, mostrando su PID, usuario y ubicaci\u00f3n de su fichero ejecutable.</li> <li>Posibilidad de finalizar procesos.</li> <li>Informaci\u00f3n sobre el uso de CPU, memoria principal y virtual, red, \u2026</li> <li>Posibilidad de cambiar la prioridad de ejecuci\u00f3n de los procesos</li> </ul> <p>Sin embargo, es interesante que conozcamos los comandos (\u00f3rdenes) de consola para la gesti\u00f3n de procesos en los distintos sistemas operativos.</p> <p>As\u00ed, en Windows tenemos:</p> <ul> <li><code>tasklist</code>: para listar los procesos presentes en el sistema. Mostrar\u00e1 el nombre del ejecutable, su correspondiente identificador de proceso (PID) y el porcentaje de uso de memoria, entre otros datos.</li> <li><code>taskkill pid</code>: que nos permite finalizar (matar) el proceso especificado.</li> </ul> <p>En sistemas Linux, tenemos los siguiente comandos relacionados con los procesos:</p> <ul> <li><code>ps</code>: Lista los procesos presentes en el sistema. Con la opci\u00f3n <code>aux</code> muestra todos los procesos del sistema independientemente del usuario que los haya lanzado.</li> <li><code>pstree</code>: Muestra un listado de procesos en forma de \u00e1rbol, mostrando qu\u00e9 procesos han creado otros. Con la opci\u00f3n <code>AGu</code> construir\u00e1 el \u00e1rbol utilizando l\u00edneas gu\u00eda y mostrar\u00e1 el nombre de usuario propietario del proceso.</li> <li><code>kill</code>: Manda se\u00f1ales a los procesos. La se\u00f1al <code>-9</code>, matar\u00e1 al proceso. Se utiliza <code>kill -9 pid</code>.</li> <li><code>killall</code>: Mata procesos por su nombre. Se utiliza como <code>killall nombreDeAplicacion</code>.</li> <li><code>nice</code>: Cambia la prioridad de un proceso. <code>nice -n 5 comando</code> ejecutar\u00e1 el comando con una prioridad 5. Por defecto la prioridad es 0. Las prioridades est\u00e1n entre -20 (m\u00e1s alta) y 19 (m\u00e1s baja).</li> </ul>"},{"location":"bloque_v/tema_19/page-4/","title":"4 T\u00e9cnicas de programaci\u00f3n concurrente","text":""},{"location":"bloque_v/tema_19/page-4/#tecnicas-de-programacion-relacionadas-con-la-computacion-concurrente","title":"T\u00e9cnicas de programaci\u00f3n relacionadas con la computaci\u00f3n concurrente","text":"<p>La programaci\u00f3n concurrente es la disciplina que se encarga del estudio de las notaciones que permiten subdividir un programa en distintos procesos que se ejecuten concurrentemente en el sistema, as\u00ed como las t\u00e9cnicas para resolver los problemas inherentes a la ejecuci\u00f3n concurrente de \u00e9stos, que son b\u00e1sicamente comunicaci\u00f3n y sincronizaci\u00f3n. Como puede intuirse, el trabajar con procesos concurrentes va a a\u00f1adir complejidad a la tarea de programar.</p> <p>La programaci\u00f3n paralela es un tipo de programaci\u00f3n concurrente en el que se crean programas especialmente dise\u00f1ados para ejecutarse en sistemas con multiprocesamiento, esto es, en los que existen varios n\u00facleos de procesamiento y \u00e9stos comparten memoria.</p> <p>La programaci\u00f3n distribuida es un tipo de programaci\u00f3n concurrente en el que se crean programas especialmente dise\u00f1ados para ejecutarse en sistemas de procesamiento distribuido, esto es, en los que existen varios n\u00facleos de procesamiento que NO comparten memoria y est\u00e1n conectados en red.</p> <p>Warning</p> <p>Durante este curso estudiaremos la programaci\u00f3n concurrente, y de manera muy somera la programaci\u00f3n paralela. No trataremos nada sobre programaci\u00f3n distribuida.</p>"},{"location":"bloque_v/tema_19/page-4/#interaccion-entre-procesos-concurrentes","title":"Interacci\u00f3n entre procesos concurrentes","text":"<p>En un sistema con multiprogramaci\u00f3n, podemos distinguir los siguientes tipos b\u00e1sicos de interacci\u00f3n entre procesos concurrentes:</p> <ul> <li>Independientes: los procesos s\u00f3lo interfieren en el uso de la CPU.</li> <li>Cooperantes: Un proceso genera la informaci\u00f3n o proporciona un servicio que otro necesita.</li> <li>Competidores: Procesos que necesitan usar los mismos recursos de forma exclusiva.</li> </ul> <p>En el segundo y tercer caso, necesitamos componentes que nos permitan establecer acciones de sincronizaci\u00f3n y comunicaci\u00f3n entre los procesos, de manera que los procesos sigan funcionando de forma correcta.</p>"},{"location":"bloque_v/tema_19/page-5/","title":"5 Orden en Ejecuci\u00f3n","text":""},{"location":"bloque_v/tema_19/page-5/#orden-en-ejecucion","title":"Orden en Ejecuci\u00f3n","text":"<p>En un programa secuencial el orden de ejecuci\u00f3n de las instrucciones est\u00e1 establecido por el c\u00f3digo del mismo y los datos que maneja. Es decir, si ejecutamos varias veces el mismo programa con los mismos datos, sus instrucciones se ejecutar\u00e1n en el mismo orden. A esto se le conoce como orden total.</p> <p>Sin embargo, los programas concurrentes tiene un orden parcial. Si un programa tiene varios procesos concurrentes, el orden en el que se intercala la ejecuci\u00f3n de dichos procesos NO puede ser establecido de antemano, ya que depende de la planificaci\u00f3n del procesador y de a qu\u00e9 proceso se le conceda en cada momento. Dentro de cada proceso si sabemos el orden de ejecuci\u00f3n, pero NO sabemos como se intercalar\u00e1 respecto a otros procesos concurrentes.</p> <p>Si no dise\u00f1amos nuestros programas concurrentes con cuidado este hecho puede hacer que posean un comportamiento indeterminista (data race), es decir, que puedan arrojar resultados distintos ante distintas ejecuciones del programa con los mismos datos de entrada.</p> <p>Son las conocidas como condiciones de carrera (race conditions), que ocurren cuando el hecho de que un programa funcione correctamente depende de la secuencia o timing en el que el procesador ejecuta sus hilos. En el siguiente apartado vemos un ejemplo de este comportamiento.</p>"},{"location":"bloque_v/tema_19/page-6/","title":"6 Sincronizaci\u00f3n","text":""},{"location":"bloque_v/tema_19/page-6/#sincronizacion-de-tareas","title":"Sincronizaci\u00f3n de tareas","text":"<p>En sistemas concurrentes, podemos hablar de sincronizaci\u00f3n como la coordinaci\u00f3n de dos o m\u00e1s tareas para obtener el resultado deseado. Tenemos dos tipos de sincronizaci\u00f3n:</p> <ul> <li>Sincronizaci\u00f3n de acceso a datos: Cuando dos o m\u00e1s tareas tienen acceso a una variable compartida y en un momento dado s\u00f3lo una de las tareas deber\u00eda estar accediendo a ella. Se dice que un determinado c\u00f3digo es thread-safe (seguro para uso con hilos) si est\u00e1 protegido por mecanismos de sincronizaci\u00f3n que aseguran el acceso concurrente a los datos (o los objetos son inmutables y por tanto no hay problema con acceder concurrentemente a ellos).</li> <li>Sincronizaci\u00f3n de control: Cuando, por ejemplo, la continuidad de la ejecuci\u00f3n de una tarea depende de la terminaci\u00f3n de otra tarea.</li> </ul>"},{"location":"bloque_v/tema_19/page-6/#exclusion-mutua","title":"Exclusi\u00f3n mutua","text":"<p>Bernstein determin\u00f3 que dos conjuntos de instrucciones pueden ejecutarse concurrentemente siempre y cuando cumplan las siguientes condiciones:</p> <ul> <li>Que no haya intersecci\u00f3n entre el conjunto de variables le\u00eddas por el conjunto de instrucciones 1 y el conjunto de variables escritas por el conjunto de instrucciones 2 (y viceversa).</li> <li>Que no haya intersecci\u00f3n entre el conjunto de variables escritas por el conjunto de instrucciones 1 y el conjunto de variables escritas por el conjunto de instrucciones 2.</li> </ul> <p>Empecemos con la primera condici\u00f3n. Se pueden producir conflictos si un hilo est\u00e1 leyendo un objeto compartido mientras otro hilo lo est\u00e1 escribiendo, porque el objeto compartido puede quedar en un estado inconsistente.</p> <p>Para demostrarlo, supongamos que dos procesos en ejecuci\u00f3n comparten memoria y ambos quieren ejecutar la instrucci\u00f3n <code>x = x + 1</code>. Cuando dicha instrucci\u00f3n se traduce a lenguaje ensamblador se convierte en tres instrucciones independientes:</p> <ol> <li>Cargar desde memoria el valor de <code>x</code> en un registro (<code>LOAD X R1</code>).</li> <li>Incrementar el valor del registro (<code>ADD R1 1</code>).</li> <li>Almacenar el contenido del registro en la posici\u00f3n de memoria de <code>x</code> (<code>STORE R1 X</code>).</li> </ol> <p>Como hemos dicho anteriormente, no podemos determinar de antemano el orden exacto en el que se ejecutar\u00e1n ambos procesos. Esto implica que es posible que exista alg\u00fan orden de ejecuci\u00f3n entrelazado de las 6 l\u00edneas de c\u00f3digo (las 3 de cada proceso) que NO produzca el valor esperado. En principio el resultado de ejecutar ambos procesos concurrentemente deber\u00eda de producir un incremento de dos unidades en la variable <code>x</code>, sin embargo existen trazas (ordenes de ejecuci\u00f3n) que har\u00e1n que se pierda uno de los incrementos, por ejemplo si ambas instrucciones <code>LOAD X R1</code> se ejecutan antes de cualquiera de las instrucciones <code>ADD R1 1</code>.</p> <p>El motivo por el que ambos procesos no puedan ejecutarse concurrentemente es que no cumplen las condiciones de Bernstein, ya que existe solapamiento entre el conjunto de variables que escriben. El problema radica en que dos procesos distintos est\u00e1n accediendo al mismo tiempo a una variable compartida entre ambos para actualizarla. Pero \u00bfqu\u00e9 ocurrir\u00eda si esas tres instrucciones en ensamblador se ejecutaran seguidas de forma indivisible en un solo paso, sin ning\u00fan tipo de intercalado con las instrucciones del otro proceso? La respuesta es que no se habr\u00eda producido el problema.</p> <p>La secuencia de instrucciones que queremos que se ejecute de forma indivisible se denomina secci\u00f3n cr\u00edtica. Se llama as\u00ed porque es cr\u00edtico que dicha secci\u00f3n de c\u00f3digo se ejecute de forma at\u00f3mica, indivisible.</p> <p>La segunda condici\u00f3n de Berntein establece que se pueden producir conflictos si varios hilos escriben el mismo objeto compartido, porque el resultado pueden ser inconsistente. Estos problemas pueden ocurrir en procesadores con varios n\u00facleos que trabajen con cach\u00e9s para cada n\u00facleo que permitan la carga y almacenamiento de valores sin asegurar que no est\u00e9n siendo actualizados en otro n\u00facleo (ver).</p> <p> Figura 3 - Memory ordering</p> <p>Como consecuencia de estos conflictos, el de lectura-escritura y el de escritura-escritura, deberemos establecer alg\u00fan mecanismo para que cuando un proceso inicie la ejecuci\u00f3n de una secci\u00f3n cr\u00edtica, dicha ejecuci\u00f3n se realice en exclusi\u00f3n mutua, es decir que ning\u00fan otro proceso pueda ejecutar concurrentemente instrucciones problem\u00e1ticas para con la secci\u00f3n cr\u00edtica.</p> <p>Se denomina exclusi\u00f3n mutua porque no podemos determinar de antemano cu\u00e1l de los dos procesos ejecutar\u00e1n dichas instrucciones antes, pero lo que s\u00ed podemos asegurar es que en cuanto el primero que llegue comience la ejecuci\u00f3n de la secci\u00f3n cr\u00edtica el otro quedar\u00e1 excluido hasta que el primero termine de ejecutarla. Al fin y al cabo son dos procesos compitiendo por un recurso com\u00fan, que se conceder\u00e1 primero a uno o a otro, dependiendo del orden de ejecuci\u00f3n, pero NO a los dos a la vez. A esta competici\u00f3n por acceder a la secci\u00f3n cr\u00edtica se le conoce como lock contention.</p> <p>Los lenguajes de programaci\u00f3n que nos permiten crear programas concurrentes proporcionan distintos mecanismo que nos permitan asegurar la exclusi\u00f3n mutua.</p>"},{"location":"bloque_v/tema_19/page-6/#condicion-de-sincronizacion","title":"Condici\u00f3n de Sincronizaci\u00f3n","text":"<p>Otro de los problemas inherentes a la programaci\u00f3n concurrente es el hecho de que un recurso compartido por varios procesos, y por tanto protegido por exclusi\u00f3n mutua, como por ejemplo una estructura de datos como un array o una cola, se encuentre en un estado en el que un proceso que ha conseguido entrar en la secci\u00f3n cr\u00edtica no pueda llevar a cabo una determinada acci\u00f3n con la estructura de datos hasta que no cambie su estado. Es decir, que el proceso no puede continuar hasta que no se cumpla una determinada condici\u00f3n de sincronizaci\u00f3n. El principal inconveniente es que mientras no se d\u00e9 dicha condici\u00f3n, el proceso sigue estando en la secci\u00f3n cr\u00edtica y el recurso permanece inaccesible a otros procesos por exclusi\u00f3n mutua.</p> <p>El problema se agrava a\u00fan m\u00e1s si para que se cumpla dicha condici\u00f3n de sincronizaci\u00f3n es imprescindible que otro proceso pueda ejecutar una secci\u00f3n cr\u00edtica que acceda al mismo recurso (estructura de datos), lo cual es imposible dado que el primero proceso no ha abandonado la secci\u00f3n cr\u00edtica y por tanto el recurso est\u00e1 en exclusi\u00f3n mutua. Este hecho se conoce como el problema de productor-consumidor.</p> <p>La soluci\u00f3n a este problema consiste en que el lenguaje de programaci\u00f3n proporcione mecanismos que permitan suspender temporalmente la ejecuci\u00f3n de un proceso que est\u00e9 a la espera de que se cumpla la condici\u00f3n de sincronizaci\u00f3n, lo que har\u00e1 que se libere el recurso protegido por la secci\u00f3n cr\u00edtica. Cuando se produzca alg\u00fan evento que haga que la condici\u00f3n de sincronizaci\u00f3n se cumpla, se deber\u00e1 notificar al proceso que hab\u00eda sido suspendido, para que compita de nuevo por el recurso y si lo obtiene pueda continuar la ejecuci\u00f3n de su secci\u00f3n cr\u00edtica y finalmente abandonarla, liberando el recurso correspondiente.</p>"},{"location":"bloque_v/tema_19/page-7/","title":"7 Comunicaci\u00f3n","text":""},{"location":"bloque_v/tema_19/page-7/#comunicacion-de-tareas","title":"Comunicaci\u00f3n de Tareas","text":"<p>Las distintas tareas de un programa concurrente se pueden comunicar de dos maneras distintas:</p> <ul> <li>A trav\u00e9s de memoria compartida, habitualmente cuando las tareas se est\u00e1n ejecutando en el mismo ordenador. Requieren de mecanismos de sincronizaci\u00f3n de acceso a datos.</li> <li>A trav\u00e9s de paso de mensajes, normalmente cuando las tareas se est\u00e1n ejecutando en ordenadores distintos, aunque no necesariamente.</li> </ul> <p>El intercambio de mensajes, se puede realizar de dos formas:</p> <ul> <li>Utilizar un buffer de memoria: Se crea un canal de comunicaci\u00f3n entre dos procesos utilizando la memoria principal del sistema.</li> <li>Utilizar un socket: Se utilizan para intercambiar informaci\u00f3n entre procesos en distintas m\u00e1quinas a trav\u00e9s de la red.</li> </ul>"},{"location":"bloque_v/tema_19/page-7/#tipos-de-comunicacion","title":"Tipos de Comunicaci\u00f3n","text":"<p>En cualquier comunicaci\u00f3n, vamos a tener los siguientes elementos:</p> <ul> <li>Mensaje: Informaci\u00f3n que es el objeto de la comunicaci\u00f3n.</li> <li>Emisor: Entidad que emite, genera o es origen del mensaje.</li> <li>Receptor: Entidad que recibe, recoge o es destinataria del mensaje.</li> <li>Canal: Medio por el que viaja o es enviado y recibido el mensaje.</li> </ul> <p>Podemos clasificar el canal de comunicaci\u00f3n seg\u00fan su capacidad, y los sentidos en los que puede viajar la informaci\u00f3n:</p> <ul> <li>Simplex (s\u00edmplex): La comunicaci\u00f3n se produce en un s\u00f3lo sentido. El emisor es origen del mensaje y el receptor escucha el mensaje al final del canal. Por ejemplo, la reproducci\u00f3n de una pel\u00edcula en una sala de cine.</li> <li>Full duplex (d\u00faplex): Pueden viajar mensajes en ambos sentidos simult\u00e1neamente entre emisor y receptor. El emisor es tambi\u00e9n receptor y el receptor es tambi\u00e9n emisor. Por ejemplo, las comunicaciones telef\u00f3nicas.</li> <li>Half duplex (semid\u00faplex): El mensaje puede viajar en ambos sentidos, pero no al mismo tiempo. Por ejemplo, la comunicaci\u00f3n con walkie-talkies.</li> </ul> <p> Figura 4 - Comunicaci\u00f3n duplex</p>"},{"location":"bloque_v/tema_19/page-7/#tipos-de-canales-de-comunicacion","title":"Tipos de canales de comunicaci\u00f3n","text":"<p>Otra clasificaci\u00f3n dependiendo de la sincron\u00eda que mantengan el emisor y el receptor durante la comunicaci\u00f3n, ser\u00e1:</p> <ul> <li>S\u00edncrona: El emisor queda bloqueado hasta que el receptor recibe el mensaje. Ambos se sincronizan en el momento de la recepci\u00f3n del mensaje.</li> <li>As\u00edncrona: El emisor contin\u00faa con su ejecuci\u00f3n inmediatamente despu\u00e9s de emitir el mensaje, sin quedar bloqueado.</li> <li>Invocaci\u00f3n remota: El proceso emisor queda suspendido hasta que recibe la confirmaci\u00f3n de que el receptor ha recibido correctamente el mensaje. Despu\u00e9s emisor y receptor ejecutar\u00e1n s\u00edncronamente un segmento de c\u00f3digo com\u00fan.</li> </ul> <p>Dependiendo del comportamiento que tengan los interlocutores que intervienen en la comunicaci\u00f3n, tendremos comunicaci\u00f3n:</p> <ul> <li>Sim\u00e9trica: Todos los procesos pueden enviar y recibir informaci\u00f3n.</li> <li>Asim\u00e9trica: S\u00f3lo un proceso act\u00faa de emisor, el resto s\u00f3lo escuchar\u00e1n el o los mensajes.</li> </ul>"},{"location":"bloque_v/tema_19/page-8/","title":"8 Propiedad de Correcci\u00f3n en los programas concurrentes","text":""},{"location":"bloque_v/tema_19/page-8/#introduccion","title":"Introducci\u00f3n","text":"<p>El orden parcial e indeterminismo en la ejecuci\u00f3n de las instrucciones conllevan que conseguir que un programa concurrente sea correcto es m\u00e1s dif\u00edcil que en un programa secuencial.</p> <p>Para que un programa concurrente sea correcto, adem\u00e1s de satisfacer los requisitos funcionales correspondientes, debe cumplir una serie de propiedades inherentes a la concurrencia: las propiedades de seguridad y las propiedades de viveza.</p>"},{"location":"bloque_v/tema_19/page-8/#propiedades-de-seguridad","title":"Propiedades de Seguridad","text":"<p>Relacionadas con que no debe producirse algo que haga entrar al programa en un estado err\u00f3neo:</p>"},{"location":"bloque_v/tema_19/page-8/#exclusion-mutua","title":"Exclusi\u00f3n mutua","text":"<p>Hay recursos en el sistema que deben ser accedidos en exclusi\u00f3n mutua tal y como hemos visto anteriormente, garantizando que si un proceso adquiere el recurso, el resto deber\u00e1 esperar a que sea liberado.</p> <p> Figura 5 - Exclusi\u00f3n mutua</p>"},{"location":"bloque_v/tema_19/page-8/#condicion-de-sincronizacion","title":"Condici\u00f3n de sincronizaci\u00f3n","text":"<p>Hay situaciones en las que un proceso debe esperar por la ocurrencia de un evento para poder seguir ejecut\u00e1ndose. Cuando esto ocurre, hay que garantizar que el proceso no prosigue hasta que no se produce el evento. De lo contrario, el resultado puede ser imprevisto.</p> <p> Figura 6 - Condici\u00f3n de sincronizaci\u00f3n</p>"},{"location":"bloque_v/tema_19/page-8/#interbloqueo-deadlock","title":"Interbloqueo (deadlock)","text":"<p>Se produce una situaci\u00f3n de interbloqueo o interbloqueo pasivo cuando todos los procesos est\u00e1n suspendidos esperando en una condici\u00f3n de sincronizaci\u00f3n a un evento que nunca se producir\u00e1, dado que hay una espera circular. Hay que garantizar que la condici\u00f3n de sincronizaci\u00f3n llegar\u00e1 a cumplirse en alg\u00fan momento. Se suele conocer tambi\u00e9n como abrazo mortal. Por ejemplo la tarea 1 obtiene en exclusi\u00f3n mutua el recurso A, y es bloqueado hasta que obtenga el recurso B, mientras que la tarea 2 obtiene el recurso B y es suspendido hasta que obtenga el recurso A. La condici\u00f3n necesaria para que alguno de ellos termina de ejecutar su cometido nunca va a darse y ambas tareas terminar\u00e1n suspendidas indefinidamente.</p> <p>  Figura 7 - Interbloqueo</p> <p>Coffman defini\u00f3 las cuatros condiciones que deben darse simult\u00e1neamente en el sistema que para se produzca un interbloqueo:</p> <ul> <li>Que los recursos se encuentren en exclusi\u00f3n mutua.</li> <li>Que la tareas no libere un recurso obtenido en exclusi\u00f3n mutua mientras espera otro recurso.</li> <li>Que los recursos s\u00f3lo puedan ser liberados por las tareas que los han obtenido en exclusi\u00f3n mutua.</li> <li>Que se produzca una espera circular.</li> </ul> <p>Para evitar el interbloqueo, la estrategia m\u00e1s habitual es analizar los recursos que deben ser obtenidos por las tareas, de manera que podamos decidir en qu\u00e9 orden se obtienen y si deben obtener dependiendo de ciertas condiciones. Otra alternativa es que a la hora de tratar de adquirir un recurso se establezca un tiempo m\u00e1ximo transcurrido el cu\u00e1l se liberen todos los recursos que hubi\u00e9ramos adquirido.</p>"},{"location":"bloque_v/tema_19/page-8/#propiedades-de-viveza","title":"Propiedades de viveza","text":"<p>Relacionados con que cada sentencia que se ejecute conduce en alg\u00fan modo a un avance constructivo para alcanzar el objetivo funcional del programa. Son, en general, muy dependientes de la pol\u00edtica de planificaci\u00f3n que se utilice:</p>"},{"location":"bloque_v/tema_19/page-8/#interbloqueo-activo-livelock","title":"Interbloqueo activo (livelock)","text":"<p>Se produce un interbloqueo activo cuando varios procesos se est\u00e1n ejecutando pero ninguno es capaz de finalizar su ejecuci\u00f3n. Por ejemplo imaginemos que la tarea 1, obtiene el recurso A y la tarea 2 obtiene el recurso B. Como la tarea 1 necesita tambi\u00e9n el recurso B y \u00e9ste est\u00e1 siendo usado por la tarea 2, la tarea 1 libera el recurso A. Sin embargo, a la vez, como la tarea 2 necesita tambi\u00e9n el recurso A y \u00e9ste est\u00e1 siendo (en ese momento) usado por la tarea 1, la tarea 2 libera el recurso B. Y ambas tareas vuelven a intentar otra vez lo mismo, produci\u00e9ndose el mismo efecto indefinidamente. Se diferencia del deadlock en que en el livelock las tareas est\u00e1n siempre ejecut\u00e1ndose y cambiando de estado, aunque a pesar de ello no pueden terminar su cometido. Sin embargo en el deadlock las tareas est\u00e1n suspendidas (no en ejecuci\u00f3n), esperando algo que no va a suceder. La detecci\u00f3n de los livelock es muy compleja.</p> <p> Figura 8 - Interbloqueo activo</p>"},{"location":"bloque_v/tema_19/page-8/#inanicion-starvation","title":"Inanici\u00f3n (starvation)","text":"<p>Se produce cuando un proceso nunca tiene acceso a un recurso que necesita, ya que el sistema siempre se lo concede a alg\u00fan otro proceso. Para evitar la inanici\u00f3n se suele aplicar en los algoritmos el concepto de fairness (justicia), que implica que cualquier proceso que requiera un recurso lo obtendr\u00e1 en alg\u00fan momento, para lo que normalmente el sistema tiene en cuenta el momento en el que el proceso realiz\u00f3 la solicitud del mismo.</p> <p> Figura 9 - Inanici\u00f3n</p>"},{"location":"bloque_v/tema_19/page-8/#inversion-de-prioridad-priority-inversion","title":"Inversi\u00f3n de prioridad (priority inversion)","text":"<p>Se produce cuando una tarea de poca prioridad obtiene un recurso por delante de una de mayor prioridad, de manera que la menos prioritaria siempre termina su ejecuci\u00f3n antes que la m\u00e1s prioritaria.</p> <p> Figura 10 - Inversi\u00f3n de prioridad</p>"},{"location":"bloque_v/tema_20/page-1/","title":"2 Runtime","text":""},{"location":"bloque_v/tema_20/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>Como sabemos, desde el punto de vista de los sistemas operativos, llamamos programa a la representaci\u00f3n en disco de una aplicaci\u00f3n, que contiene tanto el c\u00f3digo como los datos que maneja.</p> <p>Por otra parte, podr\u00edamos definir proceso como la representaci\u00f3n en el sistema de un programa en ejecuci\u00f3n. Cuando se inicia la ejecuci\u00f3n de un programa, por ejemplo por indicaci\u00f3n del usuario, el sistema operativo crea un proceso que representa la ejecuci\u00f3n de dicho programa en dicho sistema operativo.</p> <p>El proceso recibe un identificador \u00fanico conocido como PID (process identification), y contiene no s\u00f3lo el c\u00f3digo a ejecutar y los datos que gestiona, sino tambi\u00e9n toda la informaci\u00f3n necesaria para que el sistema operativo pueda ejecutar el programa, como vimos en el apartado anterior.</p> <p>Cuando un proceso finaliza su ejecuci\u00f3n puede indicar lo que se conoce como valor de terminaci\u00f3n (exit value), con el que el proceso puede indicar al sistema operativo si su ejecuci\u00f3n concluy\u00f3 con normalidad, representado normalmente por un exit value de <code>0</code>, o si se produjo alg\u00fan tipo de error.</p> <p>Toda aplicaci\u00f3n Java en ejecuci\u00f3n posee una instancia de la clase <code>Runtime</code>, que representa al entorno en el que se est\u00e1 ejecutando, que puede ser obtenida mediante su m\u00e9todo est\u00e1tico <code>Runtime.getRuntime()</code>. El m\u00e9todo <code>exit(exitValue)</code> del objeto <code>Runtime</code> permite terminar expl\u00edcitamente la ejecuci\u00f3n del proceso indicando un exit value. Por convenci\u00f3n, un exit value distinto de cero es indicativo de que se ha producido terminaci\u00f3n anormal, sintom\u00e1tica de alg\u00fan error. Si un proceso nunca llama a este m\u00e9todo, su ejecuci\u00f3n terminar\u00e1 con un exit value de cero.</p> <p>Note</p> <p>Existe un m\u00e9todo est\u00e1tico <code>System.exit(exitValue)</code>, que es que se utiliza tradicionalmente para indicar un exit value distinto de cero, que internamente simplemente llama a <code>Runtime.getRuntime().exit(exitValue)</code>.</p>"},{"location":"bloque_v/tema_20/page-1/#creacion-de-subprocesos-con-runtime","title":"Creaci\u00f3n de subprocesos con Runtime","text":"<p>Un proceso puede comenzar la ejecuci\u00f3n de otro proceso, al que denominaremos subproceso o proceso hijo, y ambos procesos, padre e hijo, podr\u00e1n comunicarse.</p> <p>Podemos utilizar el objeto <code>Runtime</code> para iniciar, desde nuestra aplicaci\u00f3n, la ejecuci\u00f3n de otro programa, para lo que utilizaremos su m\u00e9todo <code>exec()</code>, que recibe, en su forma m\u00e1s simple, el nombre del fichero ejecutable del programa u orden del sistema operativo que queremos que se ejecute, y que retorna un objeto de la clase <code>Process</code>, que representa el subproceso reci\u00e9n iniciado. Si se produce alg\u00fan error de entrada /salida se genera la excepci\u00f3n <code>IOException</code>, y si el gestor de seguridad no nos permite ejecutar la orden se lanzar\u00e1 la excepci\u00f3n <code>SecurityException</code>.</p> <p>Para ejecutar en Windows una orden (comando) de MS-DOS utilizaremos el int\u00e9rprete de comandos <code>CMD</code> con la sintaxis <code>CMD /C comando</code> si queremos el int\u00e9rprete de cierre tras ejecutar la orden o <code>CMD /K comando</code> si queremos que permanezca en ejecuci\u00f3n. En el caso de Linux/Mac podemos usar directamente el comando deseado o mediante el int\u00e9rprete de comandos <code>/bin/sh -c comando</code>.</p> <pre><code>Runtime runtime = Runtime.getRuntime();\nString command = \"CMD /C DIR\";\nProcess process = runtime.exec(command);\n</code></pre> <p>El m\u00e9todo <code>exec()</code> est\u00e1 sobrecargado, pudiendo recibir otros par\u00e1metros:</p> <ul> <li>Orden y argumentos (cmdarray): Array de cadenas correspondientes al nombre del fichero ejecutable u orden que debe ser invocado y sus argumentos. Debe ser v\u00e1lida para el sistema operativo en el que se ejecute el programa.</li> <li>Entorno (environment): variables de entorno con el que debe ejecutarse el programa, normalmente las mismas que las del programa llamador.</li> <li>Directorio de trabajo (dir): El directorio desde el que se debe ejecutar el programa. Por defecto el mismo que el del programa llamador.</li> </ul> <p>Por ejemplo, con <code>exec(\"CMD /C DIR\", null, new File(\"C:/WINDOWS\"))</code> estamos indicando que se liste el directorio de trabajo, especificando que \u00e9ste sea <code>C:\\WINDOWS</code>.</p>"},{"location":"bloque_v/tema_20/page-2/","title":"2 ProcessBuilder","text":""},{"location":"bloque_v/tema_20/page-2/#creacion-de-subprocesos-con-processbuilder","title":"Creaci\u00f3n de subprocesos con ProcessBuilder","text":"<p>A partir de la versi\u00f3n Java 5, el m\u00e9todo recomendado para crear un proceso desde nuestro programa consiste en crear un objeto de la clase <code>ProcessBuilder</code> (lanzador de procesos), cuyo constructor <code>ProcessBuilder(commandWords...)</code>, o <code>ProcessBuilder(commandWordsList)</code>, recibe una lista de cadenas con los atributos necesarios para iniciar un proceso (no pueden contener espacios).</p> <p>Una vez creado el objeto <code>ProcessBuilder</code>, podemos lanzar la ejecuci\u00f3n del subproceso llamando a su m\u00e9todo <code>start()</code>, que, al igual que el m\u00e9todo <code>exec()</code> de <code>Runtime</code>, nos retornar\u00e1 un objeto de la clase <code>Process</code> que representa el subproceso hijo reci\u00e9n iniciado.</p> <pre><code>ArrayList&lt;String&gt; command = new ArrayList&lt;&gt;(Arrays.asList(\"CMD\", \"/C\", \"DIR\"));\nProcessBuilder processBuilder = new ProcessBuilder(command);\nProcess process = processBuilder.start();\n</code></pre> <p>El m\u00e9todo <code>environment()</code> de la clase <code>ProcessBuilder</code> retorna un mapa <code>Map&lt;String, String&gt;</code> donde cada par corresponde a una variable de entorno, donde la clave es el nombre de la variable. El mapa inicialmente contendr\u00e1 una copia del valor de las variables de entorno del proceso actual, correspondiente al valor retornado por <code>System.getenv()</code>.</p> <p>El m\u00e9todo <code>directory(file)</code> permite establecer el directorio de trabajo del proceso.</p> <pre><code>ProcessBuilder processBuilder =\nnew ProcessBuilder(\"/bin/sh\", \"-c\", \"echo $horse $dog $HOME\");\nprocessBuilder.environment().put(\"horse\", \"oats\");\nprocessBuilder.environment().put(\"dog\", \"treats\");\nProcess process = pb.start()\n</code></pre>"},{"location":"bloque_v/tema_20/page-2/#obtener-informacion-sobre-el-subproceso","title":"Obtener informaci\u00f3n sobre el subproceso","text":"<p>Desde el punto de visto de Java un proceso (o subproceso) es representado por la clase <code>Process</code>. Esta clase ofrece distintos m\u00e9todos informativos sobre el proceso que representa:</p> <ul> <li><code>pid()</code>: Retorna al process ID (PID) que el sistema operativo le ha asignado al proceso. Disponible a partir de Java 9.</li> <li><code>info()</code>: Retorna un objeto de la clase <code>ProcessHandle.Info</code> con informaci\u00f3n sobre el proceso. Disponible a partir de Java 9.</li> <li><code>isAlive()</code>: Retorna un booleano indicativo de si el proceso est\u00e1 vivo, es decir, no ha terminado a\u00fan su ejecuci\u00f3n.</li> <li><code>exitValue()</code>: Cuando un proceso termina su ejecuci\u00f3n puede indicar un valor indicativo de si todo ha ido bien o no. El m\u00e9todo <code>exitValue()</code> retorna el valor que indic\u00f3 el proceso como valor de terminaci\u00f3n, que normalmente corresponde al valor 0 si todo ha ido bien.</li> <li><code>children</code>: Retorna un <code>Stream&lt;ProcessHandle&gt;</code>, un stream de objetos <code>ProcessHandle</code> asociados a los procesos que sean hijos directos del proceso, es decir que hayan sido creados directamente por \u00e9l. Disponible a partir de Java 9.</li> <li><code>descendants()</code>: Similar al anterior, pero retorna un stream de todos los subprocesos del proceso, incluyendo los que no hayan sido creados directamente por \u00e9l, sino por sus hijos, nietos, etc. Disponible a partir de Java 9.</li> </ul> <p>Como acabamos de comentar, el m\u00e9todo <code>info()</code> de la clase <code>Process</code> retorna un objeto de la clase <code>ProcessHandler.Info</code>, del que podemos extraer informaci\u00f3n adicional sobre el proceso, a trav\u00e9s de sus m\u00e9todos (disponibles a partir de Java 9):</p> <ul> <li><code>arguments()</code>: Retorna un <code>Optional&lt;String[]&gt;</code> con los argumentos del comando con el que se inici\u00f3 el subproceso.</li> <li><code>command()</code>: Retorna un <code>Optional&lt;String&gt;</code> con el nombre del comando con el que se inici\u00f3 el subproceso.</li> <li><code>commandLine()</code>: Retorna un <code>Optional&lt;String&gt;</code> con la l\u00ednea de comandos con la que se inici\u00f3 el subproceso.</li> <li><code>startInstant()</code>: Retorna un <code>Optional&lt;Instant&gt;</code> con el instante de inicio del subproceso.</li> <li><code>totalCpuDuration()</code>: Retorna un <code>Optional&lt;Direction&gt;</code> con el tiempo total de CPU acumulado por el subproceso.</li> <li><code>user()</code>: Retorna un <code>Optional&lt;String&gt;</code> con el usuario del subproceso.</li> </ul> <p>La disponibilidad de acceso a los atributos d un proceso var\u00eda dependiendo del sistema operativo y de los privilegios del proceso que est\u00e9 realizando la consulta. Por este motivo, todos los m\u00e9todos anteriores retornan un <code>Optional&lt;T&gt;</code>, por lo que deberemos siempre comprobar si realmente se nos ha proporcionado o no el valor.</p> <p>Veamos un ejemplo:</p> <pre><code>void getInfoTest() throws IOException {\nProcessBuilder processBuilder = new ProcessBuilder(\"echo\", \"Hello World!\");\nString notAvailable = \"&lt;not available&gt;\";\nProcess process = processBuilder.start();\nProcessHandle.Info info = process.info();\nSystem.out.printf(\"Process ID: %s\\n\", process.pid());\nSystem.out.printf(\"Command name: %s\\n\", info.command().orElse(notAvailable));\nSystem.out.printf(\"Command line: %s\\n\", info.commandLine().orElse(notAvailable));\nSystem.out.printf(\"Start time: %s\\n\",\ninfo.startInstant().map(i -&gt; i.atZone(ZoneId.systemDefault())\n.toLocalDateTime().toString())\n.orElse(notAvailable));\nSystem.out.printf(\"Arguments: %s\\n\",\ninfo.arguments().map(arguments -&gt; Stream.of(arguments)\n.collect(Collectors.joining(\" \")))\n.orElse(notAvailable));\nSystem.out.printf(\"User: %s\\n\", info.user().orElse(notAvailable));\n}\n</code></pre>"},{"location":"bloque_v/tema_20/page-3/","title":"3 Flujos de comunicaci\u00f3n","text":""},{"location":"bloque_v/tema_20/page-3/#flujos-de-comunicacion-entre-proceso-padre-y-subproceso","title":"Flujos de comunicaci\u00f3n entre proceso padre y subproceso","text":"<p>Por defecto, los subprocesos hijos creados por un proceso padre no tienen su propio terminal y console. Todas la operaciones con le entrada y salida est\u00e1ndar (stdin, stdout, stderr) realizadas por el subproceso hijo ser\u00e1 redirigidas hacia el proceso padre, a trav\u00e9s de una tuber\u00eda (pipe) entre ambos.</p> <p>Para acceder a la salida del subproceso hijo desde el proceso padre, debemos leer del flujo de entrada (ojo, no el de salida) que va del subproceso hijo al proceso padre, que puede obtener mediante el m\u00e9todo <code>getInputStream()</code> del objeto <code>Process</code> correspondiente al subproceso hijo.</p> <p>De igual forma, si queremos que el subproceso hijo reciba alguna informaci\u00f3n desde el proceso padre, \u00e9ste deber\u00e1 escribir en el flujo de salida (ojo, no el de entrada) que va del proceso padre al subproceso hijo, que puede obtener mediante el m\u00e9todo <code>getOutputStream()</code> del objeto <code>Process</code> correspondiente al subproceso hijo.</p> <p>Finalmente, podremos leer del flujo de error que va desde el subproceso hijo al proceso padre, que podemos obtener mediante el m\u00e9todo <code>getErrorStream()</code> del objeto <code>Process</code> correspondiente al subproceso hijo.</p> <p>En el siguiente ejemplo construimos un programa que al ejecutarse crea un subproceso que usa el int\u00e9rprete de comandos de Windows para listar el directorio actual. El proceso padre leer\u00e1 la salida del subproceso y la escribir\u00e1 por pantalla.</p> <pre><code>void showLibrary() throws IOException {\nArrayList&lt;String&gt; command = new ArrayList&lt;&gt;(Arrays.asList(\"ls\", \"-ltra\", \"/Library\"));\nProcessBuilder processBuilder = new ProcessBuilder(command);\nProcess process = null;\nprocess = processBuilder.start();\nSystem.out.printf(\"Receiving from command %s ...\\n\\n\", String.join(\" \", command));\ntry (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(\nprocess.getInputStream()))) {\nbufferedReader.lines().forEach(System.out::println);\n}\n}\n</code></pre> <p>Un aspecto muy importante de los flujos de comunicaci\u00f3n entre proceso padre y subproceso es que la escritura y lectura en dichos flujos son bloqueantes, es decir, que cuando el proceso padre realiza una operaci\u00f3n de lectura sobre el flujo de salida del subproceso hijo a trav\u00e9s su <code>InputStream</code> queda bloqueado hasta que el hijo le devuelve los datos requeridos, lo que permite que para la comunicaci\u00f3n no sea necesario establecer mecanismos adicionales de sincronizaci\u00f3n (de hecho en el ejemplo anterior no los hemos establecido).</p>"},{"location":"bloque_v/tema_20/page-3/#redireccion-de-los-flujos-del-subproceso","title":"Redirecci\u00f3n de los flujos del subproceso","text":"<p>Antes de comenzar la ejecuci\u00f3n de un subproceso, podemos hacer que su entrada, salida o salida de error sea redirigida autom\u00e1ticamente a otro destino. Para ello, la clase <code>ProcessBuilder</code> proporciona los m\u00e9todos <code>redirectInput(redirect)</code>, <code>redirectOutput(redirect)</code> y <code>redirectError(redirect)</code>, disponibles desde Java 7. Estos m\u00e9todos reciben un objeto de la clase <code>ProcessBuilder.Redirect</code>, que representa un destino de la redirecci\u00f3n.</p> <p>La clase <code>ProcessBuilder.Redirect</code> define una serie de valor especiales:</p> <ul> <li><code>Redirect.PIPE</code>: El destinatario ser\u00e1 el proceso padre. Es el valor por defecto.</li> <li><code>Redirect.INHERIT</code>: El destinatario ser\u00e1 el mismo que el del proceso padre.</li> <li><code>Redirect.DISCARD</code>: No habr\u00e1 destinatario. El flujo ser\u00e1 descartado.</li> </ul> <p>Y tambi\u00e9n proporciona una serie de m\u00e9todos factor\u00eda para crear una redirecci\u00f3n a partir de un archivo:</p> <ul> <li><code>Redirect.from(file)</code>: El destinatario ser\u00e1 un fichero del que se leer\u00e1.</li> <li><code>Redirect.to(File)</code>: El destinatario ser\u00e1 un fichero en el que se escribir\u00e1.</li> <li><code>Redirect.appendTo(File)</code>: El destinatario ser\u00e1 un fichero en el que se escribir\u00e1 al final sin machacar el contenido original.</li> </ul> <p>La clase <code>ProcessBuilder</code> tiene sobrecargados los m\u00e9todos <code>redirectInput(file)</code>, <code>redirectOutput(file)</code> y <code>redirectError(file)</code>, de manera que puedan recibir directamente un fichero, siendo equivalentes, respectivamente, a <code>redirectInput(Redirect.from(file))</code>, <code>redirectOutput(Redirect.to(file))</code> y <code>redirectError(Redirect.to(file))</code>.</p> <p>Si queremos redireccionar tanto la entrada, com la salida y la salida de error a los mismos destinatarios que tenga el proceso padre, podemos usar el m\u00e9todo <code>inheritIO()</code> de la clase <code>ProcessBuilder</code>, que es equivalente a llamar a <code>redirectInput(Redirect.INHERIT)</code>, <code>.redirectOutput(Redirect.INHERIT)</code>y <code>.redirectError(Redirect.INHERIT)</code>.</p> <p>Como hemos visto, por defecto, la salida est\u00e1ndar y la salida de error del subprocesos son enviadas a dos flujos distintos. Sin embargo, podemos establecer que ambas salidas se env\u00eden combinadas al mismo flujo, para lo que utilizaremos el m\u00e9todo <code>redirectErrorStream(true)</code> del objeto <code>ProcessBuilder</code>. El flujo combinado ser\u00e1 accesible a trav\u00e9s del m\u00e9todo <code>getInputStream()</code> del objeto <code>Process</code>, y el m\u00e9todo <code>getErrorStream()</code> retornar\u00e1 un flujo nulo. Si hemos combinado salida est\u00e1ndar y salida de error, el flujo combinado puede ser redirigido mediante <code>redirectOutput(redirect)</code> o <code>redirectOutput(file)</code>.</p> <p>Veamos un ejemplo en el que se redirecciona el flujo de salida hacia un fichero y el flujo de error hacia el mismo destino que el del padre:</p> <pre><code>void redirectToFileTest() throws IOException {\nFile outFile = new File(\"out.tmp\");\nProcess p = new ProcessBuilder(\"ls\", \"-la\")\n.redirectOutput(outFile)\n.redirectError(ProcessBuilder.Redirect.INHERIT)\n.start();\n}\n</code></pre>"},{"location":"bloque_v/tema_20/page-4/","title":"4 Finalizaci\u00f3n","text":""},{"location":"bloque_v/tema_20/page-4/#esperando-la-finalizacion-de-un-subproceso","title":"Esperando la finalizaci\u00f3n de un subproceso","text":"<p>Si queremos que el proceso padre espere a que un subproceso hijo finalice su ejecuci\u00f3n, llamaremos desde el proceso padre al m\u00e9todo <code>waitFor()</code> del objeto <code>Process</code> correspondiente al subproceso hijo. Como consecuencia el proceso padre permanece bloqueado hasta que el subproceso hijo finaliza su ejecuci\u00f3n, retornando el valor de finalizaci\u00f3n del subproceso (valor retornado por el main o por el m\u00e9todo <code>System.exit()</code> desde el hijo).</p> <p>Si para cuando se ejecuta el m\u00e9todo <code>waitFor()</code> en el padre el subproceso hijo ya ha finalizado su ejecuci\u00f3n, se retorna inmediatamente, y se puede obtener el valor de finalizaci\u00f3n del subproceso hijo mediante el m\u00e9todo <code>exitValue()</code> del objeto <code>Process</code> correspondiente. Aunque debemos tener cuidado con este m\u00e9todo porque si se utiliza sin que el subproceso haya finalizado su ejecuci\u00f3n se lanzar\u00e1 la excepci\u00f3n <code>IllegalThreadStateException</code>.</p> <p>El m\u00e9todo <code>waitFor()</code> lanza la excepci\u00f3n <code>InterruptedException</code> si el proceso padre es interrumpido mientras estaba esperando a la finalizaci\u00f3n del proceso hijo.</p> <p>Veamos un ejemplo, en el que se lanza un subproceso en el que se redir\u00edge su salida a un fichero y se espera a que dicho subproceso concluya, para posteriormente lanzar un segundo subproceso que usa el fichero generado por el primero. Finalmente se espera a que finalice este segundo subproceso:</p> <pre><code>void redirectToFileTest() throws IOException, InterruptedException {\nFile outFile = new File(\"out.tmp\");\nProcess p = new ProcessBuilder(\"ls\", \"-la\")\n.redirectOutput(outFile)\n.redirectError(ProcessBuilder.Redirect.INHERIT)\n.start();\nint status = p.waitFor();\nif (status == 0) {\np = new ProcessBuilder(\"cat\" , outFile.toString())\n.inheritIO()\n.start();\np.waitFor();\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_20/page-4/#finalizacion-de-subprocesos","title":"Finalizaci\u00f3n de subprocesos","text":"<p>Una de las caracter\u00edsticas de la m\u00e1quina virtual de Java es que los subprocesos hijos creados por un proceso padre no finalizan autom\u00e1ticamente cuando \u00e9ste lo hace (terminaci\u00f3n en cascada), sino que pueden seguir ejecut\u00e1ndose incluso aunque el padre haya terminado su ejecuci\u00f3n.</p> <p>Sin embargo, el proceso padre puede finalizar la ejecuci\u00f3n de un subproceso que haya iniciado previamente, haciendo uso del m\u00e9todo <code>destroy()</code> del objeto <code>Process</code> correspondiente.</p> <p>Dependiendo de la plataforma en la que se est\u00e9 ejecutando (Windows, Linux, etc.), dicha finalizada podr\u00e1 ser ser normal o forzada. Para saber si el sistema permite la terminaci\u00f3n con normalidad, desde Java 9 podemos usar el m\u00e9todo <code>supportsNormalTermination()</code>, que retornar\u00e1 un booleano indicativo de si es posible o no.</p> <p>Si queremos forzar la terminaci\u00f3n del subproceso, podemos llamar al m\u00e9todo <code>destroyForcibly()</code>.</p>"},{"location":"bloque_v/tema_20/page-4/#ejecucion-asincrona-de-operaciones-tras-la-finalizacion-de-un-subproceso","title":"Ejecuci\u00f3n as\u00edncrona de operaciones tras la finalizaci\u00f3n de un subproceso","text":"<p>Si queremos ejecutar de forma as\u00edncrona alguna operaci\u00f3n cuando un subproceso termine su ejecuci\u00f3n, podemos usar su m\u00e9todo <code>onExit()</code> de la clase <code>Process</code>, que retorna un <code>CompletableFuture&lt;Process&gt;</code>, que ser\u00e1 marcado como \"completado\" cuando el subproceso haya finalizado su ejecuci\u00f3n, ya sea normalmente o porque lo hayamos destruido usando cualquiera de los m\u00e9todos anteriores.</p> <p>Si, en momento dado, queremos esperar la finalizaci\u00f3n del subproceso, podemos llamar al m\u00e9todo <code>get()</code> del <code>CompetableFuture&lt;Process&gt;</code> retornado por <code>onExit()</code>. Si llamamos a <code>cancel()</code> sobre el completableFuture, no tendr\u00e1 efecto sobre la ejecuci\u00f3n del subproceso.</p> <p>Veamos un ejemplo:</p> <pre><code>void startProcessesTest() throws IOException, InterruptedException {\nProcessBuilder processBuilder = new ProcessBuilder(\"ls\", \"-la\");\nProcess process = processBuilder.start();\nprocess.onExit().thenAccept(p -&gt; printResults(p));\n// The parent process can go on executing other things.\n// ...\nSystem.out.println(\"\\nPress enter to continue ...\\n\");\nSystem.in.read();\n}\nprivate void printResults(Process p) {\ntry {\nSystem.out.printf(\"Exit %d, status %d%n%s%n%n\",\np.pid(), p.exitValue(), output(p.getInputStream()));\n} catch (IOException e) {\nSystem.out.println(\"Error printing results\");\n}\n}\nprivate String output(InputStream inputStream) throws IOException {\ntry (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream))) {\nreturn\nbr.lines().collect(Collectors.joining(System.getProperty(\"line.separator\")));\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_20/page-5/","title":"5 ProcessHandle","text":""},{"location":"bloque_v/tema_20/page-5/#acceso-a-procesos-vivos-del-sistema-no-creados-por-nosotros","title":"Acceso a procesos vivos del sistema no creados por nosotros","text":"<p>La interfaz <code>ProcessHandle</code>, disponible a partir de Java 9, nos permite identificar y controlar procesos que no hayan sido creados por nosotros a trav\u00e9s de <code>Runtime.exec()</code> o <code>ProcessBuilder.start()</code>.</p> <p>Por ejemplo, podemos listar todos los procesos actualmente vivos en el sistema que sean visibles para nuestro proceso usando el m\u00e9todo est\u00e1tico <code>ProcessHandle.allProcesses()</code>, que retorna un <code>Stream&lt;ProcessHandle&gt;</code>, con los <code>ProcessHandle</code> de dichos procesos.</p> <p>Si queremos obtener el <code>ProcessHandle</code> del proceso actual, podemos ejecutar el m\u00e9todo est\u00e1tico <code>ProcessHandle.current()</code>, y si queremos el del proceso con un determinado pid, podemos llamar el m\u00e9todo est\u00e1tico <code>ProcessHandle.of(pid)</code>, que retornar\u00e1 un <code>Optional&lt;ProcessHandle&gt;</code>, por si no existe ning\u00fan proceso con dicho pid.</p> <p>Una vez obtenido un objeto <code>ProcessHandle</code> podemos usar m\u00e9todos similares a los de la clase <code>Process</code>, como por ejemplo: <code>isAlive()</code>, <code>pid()</code>, <code>info()</code>, <code>children()</code>, <code>descendants()</code>, <code>destroy()</code>, <code>destroyForcibly()</code> y <code>onExit()</code>, con el mismo significado que en la clase <code>Process</code>.</p> <p>Tambi\u00e9n tenemos disponible el m\u00e9todo <code>parent()</code>, que retorna un <code>Optional&lt;ProcessHandle&gt;</code> con el objeto <code>ProcessHandle</code> del proceso padre a \u00e9ste.</p> <p>Por ejemplo, podemos mostrar todos los procesos vivos en el sistema que pertenezcan al mismo usuario que el proceso actual de la siguiente manera:</p> <pre><code>void showUserProcesses() {\nOptional&lt;String&gt; currUser = ProcessHandle.current().info().user();\nProcessHandle.allProcesses()\n.filter(ph -&gt; ph.info().user().equals(currUser))\n.forEach(ph -&gt; showProcess(ph));\n}\nvoid showProcess(ProcessHandle ph) {\nProcessHandle.Info info = ph.info();\nSystem.out.printf(\"pid: %d, user: %s, cmd: %s%n\",\nph.pid(), info.user().orElse(\"none\"),    info.command().orElse(\"none\"));\n}\n</code></pre>"},{"location":"bloque_v/tema_20/page-6/","title":"6 Alternativas de comunicaci\u00f3n","text":""},{"location":"bloque_v/tema_20/page-6/#alternativas-para-la-comunicacion-entre-procesos","title":"Alternativas para la comunicaci\u00f3n entre procesos","text":"<p>Adem\u00e1s de mediante flujos de datos, los procesos se pueden comunicar mediante otros m\u00e9todos:</p> <ul> <li>Los sockets de comunicaci\u00f3n (ya los veremos m\u00e1s adelante).</li> <li>La JNI (Java Native Interface, Intefaz Nativa de Java), que permite incluso acceder desde Java a aplicaciones desarrolladas en otros lenguajes de programaci\u00f3n de m\u00e1s bajo nivel, como C.</li> <li>Librer\u00edas de comunicaci\u00f3n no est\u00e1ndares, como por ejemplo CLIPC, que usa internamente JNI y permite utilizar m\u00e9todos m\u00e1s cercanos al sistema operativo, como el establecimiento de una regi\u00f3n de memoria compartida, la creaci\u00f3n de pipes (tuber\u00edas) entre los procesos y sincronizaci\u00f3n mediante sem\u00e1foros.</li> </ul> <p>Referencias</p> <ul> <li>https://docs.oracle.com/en/java/javase/11/core/process-api1.html</li> <li>https://www.baeldung.com/java-process-api</li> <li>https://www.baeldung.com/java-9-process-api</li> </ul>"},{"location":"bloque_v/tema_21/page-1/","title":"1 Introducci\u00f3n a la Gesti\u00f3n de Hilos","text":""},{"location":"bloque_v/tema_21/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>En el mundo de los ordenadores, cuando hablamos de concurrencia nos referimos a una serie de tareas que se ejecutan simult\u00e1neamente en un ordenador. Esta simultaneidad puede ser real, si el ordenador tiene m\u00e1s de un procesador o un procesador con varios n\u00facleos, o simulada, si s\u00f3lo dispone de un \u00fanico n\u00facleo de procesamiento.</p> <p>Proceso</p> <p>Un proceso es una unidad de reserva de memoria y de protecci\u00f3n, desde el punto de vista del sistema operativo.</p> <p>Todos los sistemas operativos modernos permiten la ejecuci\u00f3n de tareas concurrentes. Por ejemplo, podemos leer nuestros emails mientras escuchamos m\u00fasica o leemos las noticias en una p\u00e1gina web. Podr\u00edamos decir que este tipo de concurrencia corresponde a una concurrencia a nivel de proceso.</p> <p>Pero dentro de un proceso tambi\u00e9n podemos tener varias tareas simult\u00e1neas que se ejecutan dentro de \u00e9l, a las que llamamos hilos o hebras (threads en ingl\u00e9s).</p> <p> Figura 1 - Procesos e hilos</p> <p>Hilos</p> <p>Los hilos son unidades de ejecuci\u00f3n de conjuntos de instrucciones, de manera que dichos conjuntos pueden ejecutarse de forma concurrente en n\u00facleos de procesamiento (ver).</p> <p>Los procesos y los hilos mantienen una serie de diferencias importantes:</p> <ul> <li>Los hilos comparten el espacio de memoria del usuario, incluyendo datos, c\u00f3digo y recursos, mientras que los procesos generalmente disponen de espacios de memoria independientes e interact\u00faan a trav\u00e9s de mecanismos de sincronizaci\u00f3n dados por el sistema. Cada hilo dispone de su propio contador de programa, estado de los registros de la CPU y pila, para poder guardar el punto actual de ejecuci\u00f3n.</li> <li>El cambio de estado de un hilo es mucho menos costoso que el de un proceso.</li> <li>Los hilos no pueden ejecutarse por s\u00ed solos, necesitan estar contenidos en un proceso padre. Cuando se crea un proceso (cuando se lanza la ejecuci\u00f3n de un programa), se crea dentro de \u00e9l un hilo principal, que puede, a su vez, crear tantos hilos como desee, que pasar\u00e1n a ejecutarse contenidos dentro del proceso.</li> </ul> <p>Los hilos son usados normalmente para, dentro de un proceso, llevar a cabo distintas tareas simult\u00e1neamente, o para realizar tareas costosas en tiempo sin detener el resto del programa.</p> <p>Por ejemplo en un proceso correspondiente a un editor de textos, podemos tener un hilo encargado de estar llevando a cabo la comprobaci\u00f3n ortogr\u00e1fica del texto, o guardando autom\u00e1ticamente en documento en segundo plano cada cierto tiempo. Otro ejemplo t\u00edpico es el de un servidor web que cada vez que recibe una petici\u00f3n crea uno nuevo para atenderla, permitiendo seguir recibiendo peticiones en el hilo principal.</p> <p>En los entornos gr\u00e1ficos el hilo principal de una aplicaci\u00f3n corresponde normalmente a lo que se conoce como hilo de la interfaz de usuario, cuya misi\u00f3n es actualizar la interfaz cada vez que haya cambios y detectar las interacciones del usuario. En estos sistemas es muy importante, que dicho hilo no quede bloqueado por una operaci\u00f3n costosa, dado que el usuario tendr\u00e1 la sensaci\u00f3n de que la aplicaci\u00f3n no responde, dado que el hilo principal no podr\u00e1 atender a las interacciones del usuario. Por este motivo, en estos entornos, todas las tareas que no sean pr\u00e1cticamente inmediatas deben llevarse a cabo en un hilo secundario o hilo trabajador, de manera que puedan quedar bloqueados sin afectar a la capacidad de respuesta del hilo de la UI.</p> <p>Los hilos aportan una serie de beneficios:</p> <ul> <li>Mejoran el rendimiento de la aplicaci\u00f3n en hardware con varios n\u00facleos de procesamiento, ya que se ejecutan en paralelo.</li> <li>Incrementan el rendimiento de la aplicaci\u00f3n, ya que una llamada de E/S solamente bloquear\u00e1 el hilo en el que se realiza.</li> <li>Aumentan la capacidad de respuesta de la aplicaci\u00f3n, ya que un hilo de la UI puede estar atendiendo siempre las peticiones de usuario mientras otros hilos realizan otras tareas m\u00e1s costosas. El resultado es que el usuario no adquiere la sensaci\u00f3n de que el programa est\u00e9 \"colgado\".</li> <li>La comunicaci\u00f3n entre hilos se puede realizar mediante variables, ya que todos los hilos del proceso comparten la memoria y los recursos asignados a \u00e9ste. Sin embargo, este tipo de comunicaci\u00f3n hace necesario el establecimiento de m\u00e9todos de sincronizaci\u00f3n entre los hilos. En otros casos se lleva a cabo la comunicaci\u00f3n entre hilos a trav\u00e9s de paso de mensajes, como en el caso de entornos con un hilo dedicado a la IU.</li> <li>La creaci\u00f3n de nuevos hilos no conlleva la reserva adicional de memoria, ya que utilizan la del proceso al que pertenecen. Sin embargo, s\u00ed que necesitan una pila espec\u00edfica para cada uno de ellos.</li> </ul>"},{"location":"bloque_v/tema_21/page-1/#comunicacion-entre-hilos","title":"Comunicaci\u00f3n entre hilos","text":"<p>La comunicaci\u00f3n entre hilos de un mismo proceso se puede llevar a cabo de dos maneras distintas:</p> <p> Figura 2 - Comunicaci\u00f3n mediante objetos compartidos en memoria</p>"},{"location":"bloque_v/tema_21/page-1/#a-traves-de-objetos-compartidos-en-memoria","title":"A trav\u00e9s de objetos compartidos en memoria","text":"<p>As\u00ed, un hilo puede escribir en un objeto y otro hilo puede leer dicho objeto.</p> <p>Como consecuencia del acceso concurrente desde distintos hilos, ser\u00e1 necesario establecer mecanismos de sincronizaci\u00f3n de acceso a datos.</p> <p> Figura 3 - Paso de mensajes</p>"},{"location":"bloque_v/tema_21/page-1/#a-traves-de-paso-de-mensajes-entre-hilos","title":"A trav\u00e9s de paso de mensajes entre hilos","text":"<p>El hilo posee una cola de mensajes accesible desde ambos hilos.</p> <p>As\u00ed, un hilo enviar\u00e1 un mensaje a la cola de mensajes, que se insertar\u00e1 por un extremo, y otro hilo ir\u00e1 leyendo los mensajes de la cola, que los ir\u00e1 extrayendo del otro extremo.</p> <p>Este es el tipo de comunicaci\u00f3n que se utiliza habitualmente en los sistemas en lo que el hilo principal corresponde al hilo de la interfaz de usuario, que es el \u00fanico que puede actualizarla. Es el caso por ejemplo de Android.</p>"},{"location":"bloque_v/tema_21/page-1/#estados-de-un-hilo","title":"Estados de un hilo","text":"<p>A lo largo de su ejecuci\u00f3n, un hilo puede pasar por los siguientes estados:</p> <p> Figura 4 - Diagrama de estados de un hilo</p> <ul> <li>Nuevo / Naciendo (new): Se ha creado el objeto correspondiente al hilo (se ha hecho el <code>new</code>), pero a\u00fan NO se ha iniciado su ejecuci\u00f3n.</li> <li>Listo (runnable): El hilo est\u00e1 preparado para ser ejecutado, pero el planificador del sistema operativo no le ha asignado todav\u00eda el procesador para ejecutarse.</li> <li>Corriendo / En ejecuci\u00f3n (running): El hilo est\u00e1 ejecut\u00e1ndose en el procesador.</li> <li>Bloqueado (blocked): El hilo est\u00e1 bloqueado al intentar acceder a un recurso vigilado por un objeto monitor que no est\u00e1 libre.</li> <li>Suspendido (waiting): El hilo ha sido suspendido mediante c\u00f3digo en espera de que se le notifique desde c\u00f3digo que puede continuar.</li> <li>Suspendido por tiempo (timed waiting): El hilo ha sido suspendido mediante c\u00f3digo en espera de que pase un determinado tiempo.</li> <li>Terminado (terminated): El hilo ha finalizado su ejecuci\u00f3n ya sea naturalmente, al finalizar su m\u00e9todo <code>run()</code>, o abruptamente, por alguna excepci\u00f3n que se haya producido en dicho m\u00e9todo. El entorno de ejecuci\u00f3n de Java puede liberar los recursos asociados al hilo, como por ejemplo su memoria</li> </ul>"},{"location":"bloque_v/tema_21/page-10/","title":"10 ThreadGroup","text":""},{"location":"bloque_v/tema_21/page-10/#creacion-de-un-grupo-de-hilos","title":"Creaci\u00f3n de un grupo de hilos","text":"<p>Una funcionalidad interesante que nos ofrece Java es la posibilidad de agrupar hilos. Esto nos permite tratar los hilos de un grupo como una sola unidad a la hora de llevar a cabo ciertas operaciones con ellos. Por ejemplo, si tenemos varios hilos que est\u00e9n llevando a cabo una tarea conjunta podremos agruparlos bajo un grupo de manera que con una sola llamada se puedan, por ejemplo, interrumpir todos los hilos de dicho grupo.</p> <p>Java nos proporciona la clase <code>ThreadGroup</code> para trabajar con grupos de hilos. Un objeto <code>ThreadGroup</code> puede estar formado por objetos <code>Thread</code> o por otros objetos <code>ThreadGroup</code>, generando un grupo con estructura de \u00e1rbol.</p> <p>Si queremos crear un hilo y agregarlo a un determinado grupo de hilos existente, simplemente tendremos que especificar como primer par\u00e1metro del constructor el objeto correspondiente al grupo. El constructor de la clase <code>Thread</code> est\u00e1 sobrecargado para este cometido con las siguientes posibles sintaxis:</p> <ul> <li><code>Thread(ThreadGroup grupo, Runnable objeto)</code>.</li> <li><code>Thread(ThreadGroup grupo, Runnable objeto, String nombreHilo)</code>.</li> </ul> <p>La clase <code>ThreadGroup</code> proporciona el m\u00e9todo <code>interrupt()</code> para marcar para interrupci\u00f3n todos los hilos del grupo de una vez. Adem\u00e1s, pone a nuestra disposici\u00f3n algunos m\u00e9todos informativos, como <code>activeCount()</code>, que retorna el n\u00famero de hilos del grupo activos (en ejecuci\u00f3n), <code>list()</code>, que muestra por la salida est\u00e1ndar informaci\u00f3n sobre los hilos del grupo y <code>enumerate(Thread[] lista)</code>, que nos permite almacenar en un array pasado como argumento el conjunto de hilos activos del grupo.</p> <p>Por otro lado, como mencionamos cuando hablamos de <code>UncaughtExceptionHandler</code>, en caso se producirse una uncaught exception dentro del m\u00e9todo <code>run()</code> de un hilo, la JVM sigue el siguiente procedimiento trata de llamar al m\u00e9todo <code>uncaughtException()</code> del objeto manejador establecido individualmente para dicho hilo. Pero si no se ha establecido en el hilo un manejador para ese tipo de excepciones, la JVM llamar\u00e1 al m\u00e9todo <code>uncaughtException(Thread t, Throwable e)</code> del <code>ThreadGroup</code> grupo de hilos al que pertenezca el hilo. Por tanto si queremos manejar este tipo de excepciones a nivel de <code>ThreadGroup</code> simplemente tendremos que sobrescribir en el <code>TheadGroup</code> dicho m\u00e9todo.</p>"},{"location":"bloque_v/tema_21/page-10/#proyecto-grupo-de-hilos","title":"Proyecto Grupo de Hilos","text":"<p>En este proyecto crearemos 10 hilos que pertenecer\u00e1n a un mismo grupo de hilos. La tarea de estos hilos ser\u00e1 simular que se realiza una b\u00fasqueda en Internet, por lo que generaremos aleatoriamente el n\u00famero de segundos que tarda en realizarse la b\u00fasqueda (y que el hilo pasar\u00e1 durmiendo en la simulaci\u00f3n). Cuando cualquiera de los hilos finaliza la b\u00fasqueda, almacena el resultado en un objeto creado espec\u00edficamente para ello (que en nuestra simulaci\u00f3n contendr\u00e1 el nombre del hilo que ha finalizado la b\u00fasqueda). Cuando detectemos que uno de los hilos del grupo ha finalizado interrumpiremos a todos los hilos del grupo, ya que no tiene sentido que sigan ejecut\u00e1ndose una vez encontrado el resultado.</p> MainResultadoBuscador <pre><code>public class Main {\npublic static void main(String[] args) {\n// Crea un nuevo grupo de hilos llamado Buscadores.\nThreadGroup searchThreads = new ThreadGroup(\"Search threads\");\nResultado result=new Resultado();\n// Crea un objeto buscador.\nBuscador buscador = new Buscador(result);\n// Crea e inicia cinco hilos que ejecutan el mismo objeto buscador\n// a\u00f1adi\u00e9ndolo al grupo de hilo Buscadores.\nfor (int i = 0; i &lt; 10; i++) {\nThread hilo = new Thread(grupoBuscadores, buscador);\nhilo.start();\n// Espero 1 segundo entre la creaci\u00f3n de un hilo y la siguiente.\ntry {\nTimeUnit.SECONDS.sleep(1);\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\n}\n// Espera la finalizaci\u00f3n de todos los hilos del grupo.\nesperarHiloGrupo(grupoBuscadores);\n// Interrumpe todos los hilos del grupos.\ngrupoBuscadores.interrupt();\n}\n// Espera la finalizaci\u00f3n de alg\u00fan hilo del grupo\nprivate static void esperarHiloGrupo(ThreadGroup grupoHilos) {\n// Mientras todos los hilos del grupo est\u00e9n activos\n// duerme durante un segundo.\nwhile (grupoHilos.activeCount() &gt; 9) {\ntry {\nTimeUnit.SECONDS.sleep(1);\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\n}\n}\n}\n</code></pre> <pre><code>// Almacena el resultado de la consulta (en la simulaci\u00f3n el nombre\n// del hilo que ha terminado antes de hacer la b\u00fasqueda).\npublic class Resultado {\nprivate String name;    // Nombre del hilo.\npublic String getName() {\nreturn name;\n}\npublic void setName(String name) {\nthis.name = name;\n}\n}\n</code></pre> <pre><code>// Simula una operaci\u00f3n de b\u00fasqueda\npublic class Buscador implements Runnable {\nprivate Resultado resultado; // Resultado de la b\u00fasqueda.\n// Recibe el objeto donde se almacenar\u00e1 el resultado.\npublic Buscador(Resultado resultado) {\nthis.resultado = resultado;\n}\n@Override\npublic void run() {\nString nombreHilo = Thread.currentThread().getName();\nSystem.out.printf(\"Hilo %s: Comenzando b\u00fasqueda\\n\", nombreHilo);\ntry {\nbuscar();\n// Establezce el resultado como el nombre del hilo.\nresultado.setName(nombreHilo);\n} catch (InterruptedException e) {\n// Si el hilo es interrumpido mientras duerme se produce\n// esta excepci\u00f3n, que se aprovecha para finalizar el hilo.\nSystem.out.printf(\"Hilo %s: Ha sido interrumpido\\n\", nombreHilo);\n// Finaliza la ejecuci\u00f3n del hilo.\nreturn;\n}\n// Informa de que este hilo ha finalizado la b\u00fasqueda.\nSystem.out.printf(\"Hilo %s: B\u00fasqueda finalizada\\n\", nombreHilo);\n}\n// Simula la operaci\u00f3n de b\u00fasqueda durmiendo durante un n\u00famero aleatorio \n// de segundos (como m\u00e1ximo 30)\nprivate void buscar() throws InterruptedException {\n// Obtiene aleatoriamente el n\u00famero de segundos que va a dormir el hilo.\nRandom aleatorio = new Random();\nint segundos = aleatorio.nextInt(30);\n// Informa al usuario y duerme.\nSystem.out.printf(\"Hilo %s: La b\u00fasqueda tardar\u00e1 %d segundos\\n\",\nThread.currentThread().getName(), segundos);\n// Si es interrumpido mientras duerme lanza la excepci\u00f3n InterruptedException.\nTimeUnit.SECONDS.sleep(segundos);\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_21/page-11/","title":"11 ThreadFactory","text":""},{"location":"bloque_v/tema_21/page-11/#crear-hilos-mediante-una-fabrica-de-hilos","title":"Crear hilos mediante una f\u00e1brica de hilos","text":"<p>Uno de los patrones de dise\u00f1o m\u00e1s usados en el mundo de la programaci\u00f3n orientada a objetos es el conocido como f\u00e1brica de objetos (factory pattern, en ingl\u00e9s). Un objeto F\u00e1brica tiene la misi\u00f3n de crear otros objetos de uno o varias clases. Cuando queremos crear un objeto de una de esas clases usaremos un m\u00e9todo de la f\u00e1brica en vez de usar directamente el operador de instanciaci\u00f3n <code>new</code>.</p> <p>El hecho de centralizar la creaci\u00f3n de los objetos tiene algunas ventajas:</p> <ul> <li>Es f\u00e1cil cambiar la clase de los objetos creados o la forma en la que se crean.</li> <li>Es sencillo limitar el n\u00famero de objetos creados que usen un mismo recurso limitado. Por ejemplo, limitar que s\u00f3lo puedan crearse <code>n</code> objetos de una cierta clase.</li> <li>Nos facilita la generaci\u00f3n de datos estad\u00edsticos sobre la creaci\u00f3n de los objetos.</li> </ul> <p>Java nos proporciona la interfaz <code>ThreadFactory</code> para implementar una f\u00e1brica de objetos <code>Thread</code>, es decir, una f\u00e1brica de hilos.</p> <pre><code>package java.util.concurrent;\npublic interface ThreadFactory {\nThread newThread(Runnable r);\n}\n</code></pre> <p>La interfaz <code>ThreadFactory</code> posee un s\u00f3lo m\u00e9todo llamado <code>newThread()</code>, que deberemos implementar forzosamente. Este m\u00e9todo recibe el objeto <code>Runnable</code> que queremos que ejecute el hilo y retorna el objeto <code>Thread</code> correspondiente al hilo creado.</p> <p>Si utilizamos una f\u00e1brica de hilos, lo l\u00f3gico es asegurarnos de que todos los hilos de nuestro programa son creados a trav\u00e9s de dicha f\u00e1brica.</p>"},{"location":"bloque_v/tema_21/page-11/#proyecto-threadfactory","title":"Proyecto ThreadFactory","text":"<p>En el siguiente ejemplo crearemos un f\u00e1brica de hilos que construye los hilos con un nombre base personalizado y almacena un registro de la creaci\u00f3n de hilos. Al terminar de ejecutarse todos los hilos se muestra el registro de la f\u00e1brica de hilos.</p> MainTaskMyThreadFactory <pre><code>import java.util.ArrayList;\nimport java.util.concurrent.TimeUnit;\npublic class Main {\npublic static void main(String[] args) {\nfinal MyThreadFactory threadFactory = new MyThreadFactory(\"MyThreadFactory\");\nArrayList&lt;Thread&gt; threads = new ArrayList&lt;&gt;();\nfor (int i = 0; i &lt; 3; i++) {\nThread thread = threadFactory.newThread(new Task());\nthreads.add(thread);\nthread.start();\ntry {\nTimeUnit.SECONDS.sleep(1);\n} catch (InterruptedException exception) {\nreturn;\n}\n}\nfor (Thread thread : threads) {\ntry {\nthread.join();\n} catch (InterruptedException exception) {\nreturn;\n}\n}\nSystem.out.printf(\"\\n\\nMyThreadFactory Log\\n\\n%s\", threadFactory.getLog());\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TimeUnit;\npublic class Task implements Runnable {\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\n@Override\npublic void run() {\ntry {\nSystem.out.printf(\"%s -&gt; %s started\\n\",\nLocalTime.now().format(dateTimeFormatter), Thread.currentThread().getName());\n// Simulate task working.\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5) + 1);\nSystem.out.printf(\"%s -&gt; %s finished\\n\",\nLocalTime.now().format(dateTimeFormatter), Thread.currentThread().getName());\n} catch (InterruptedException ignored) {\n}\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.ArrayList;\nimport java.util.concurrent.ThreadFactory;\npublic class MyThreadFactory implements ThreadFactory {\nprivate int count = 0;\nprivate final String baseName;\nprivate final ArrayList&lt;String&gt; log = new ArrayList&lt;&gt;();\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\npublic MyThreadFactory(String baseName) {\nthis.baseName = baseName;\n}\n@Override\npublic Thread newThread(Runnable runnable) {\nThread thread = new Thread(runnable, baseName + \"-\" + count++);\nlog.add(LocalTime.now().format(dateTimeFormatter) + \" -&gt; \" + thread.getName() + \" created\");\nreturn thread;\n}\npublic String getLog() {\nreturn String.join(\"\\n\", log);\n}\n}\n</code></pre> <p>Si ejecutamos el programa veremos que los hilos se crean usando la factor\u00eda y que se guarda un registro con la hora de creaci\u00f3n de los hilos:</p>"},{"location":"bloque_v/tema_21/page-12/","title":"12 ThreadLocal","text":""},{"location":"bloque_v/tema_21/page-12/#threadlocal","title":"ThreadLocal","text":"<p>Si creamos un objeto de una clase que implementa la interface <code>Runnable</code> e iniciamos varios hilos que hagan uso de dicho mismo objeto, por defecto los hilos creados compartir\u00e1n los mismos atributos, por lo que al cambiar cualquier atributo todos los hilos correspondientes se ver\u00e1n afectados.</p> <p>Sin embargo algunas veces desearemos que algunos atributos NO sean compartidos entre todos los hilos que hacen uso del objeto <code>Runnable</code>, sino que cada hilo disponga de su propia copia del atributo, de manera que al cambiar su valor NO se vean afectados el resto de hilos. Para ello la API de concurrencia de Java proporciona el mecanismo conocido como variables thread-local (locales al hilo), a trav\u00e9s de la clase <code>ThreadLocal&lt;T&gt;</code>. Al crear el objeto se suele suministrar el c\u00f3digo del m\u00e9todo <code>initialValue()</code> para establecer el valor inicial de la variable.</p> <p>El mecanismo de variables thread-local almacena un valor de la variable para cada hilo que la use, y nos proporciona una serie de m\u00e9todos para trabajar con dicho valor:</p> <ul> <li><code>get()</code>: Permite obtener el valor de la variable en el hilo en el que se ejecuta.</li> <li><code>set(valor)</code>: Permite establecer el valor de la variable en el hilo en el que se ejecuta.</li> <li><code>initialValue()</code>: La primera vez que se accede al valor de la variable si \u00e9sta no tiene valor se llamar\u00e1 a este m\u00e9todo para asignarle el valor inicial para el hilo en el que se ejecuta.</li> <li><code>remove()</code>: Elimina el valor de la variable para el hilo en el que se ejecuta, de manera que si posteriormente se trata de obtener, se llamar\u00e1 al m\u00e9todo <code>initialValue()</code>.</li> </ul> <pre><code>ThreadLocal&lt;Integer&gt; threadLocalValue = new ThreadLocal&lt;&gt;();\nthreadLocalValue.set(1);\nInteger result = threadLocalValue.get();\n</code></pre> <p>Tambi\u00e9n podeos crear una instancia de ThreadLocal usando el m\u00e9todo est\u00e1tico withInitial(), que recibe un supplier que es ejecutado para establecer el valor inicial:</p> <pre><code>ThreadLocal&lt;Integer&gt; threadLocal = ThreadLocal.withInitial(() -&gt; 1);\n</code></pre> <p>Debemos tener en cuenta que las variables thread-local mantendr\u00e1n su valor mientras el hilo est\u00e9 vivo, lo que puede resultar problem\u00e1tico cuando reusemos hilos.</p> <p>La API de concurrencia de Java The Java Concurrency tambi\u00e9n incluye la clase <code>InheritableThreadLocal</code> para crear variables thread-local que puedan ser heredadas cuando un hilo crea otro hilo. Por defecto el hilo hijo tendr\u00e1 como valor inicial de la variable el valor que tuviera dicha variable en el hilo padre. Sin embargo, podemos sobrescribir el m\u00e9todo <code>childValue()</code> para establecer el valor inicial de la variable en el hilo hijo. Dicho m\u00e9todo recibir\u00e1 como par\u00e1metro el valor que posee la variable en el hilo padre.</p> <p>ThreadLocal se usa sobre todo en frameworks para almacenar un determinado contexto asoci\u00e1ndolo a cada hilo. De esta manera se reduce la necesidad de pasar dicho contexto a cada m\u00e9todo que lo necesita, ya que podr\u00e1 acceder a \u00e9l a trav\u00e9s del ThreadLocal, aunque tiene el inconveniente de que acopla el c\u00f3digo que lo usa al framework. Por tanto no debemos abusar del uso de ThreadLocal, al igual que no debemos abusar del uso de variable globales.</p>"},{"location":"bloque_v/tema_21/page-12/#proyecto-threadlocal","title":"Proyecto ThreadLocal","text":"<p>En este proyecto crearemos un programa que crear un \u00fanico objeto Tarea que es ejecutado por varios hilos. Crearemos dos versiones de la tarea, una err\u00f3nea, en cuyo caso los resultados mostrados por pantalla son incorrectos, dado que los hilos modifican el atributo compartido de la Tarea, y otra versi\u00f3n correcta, en la que cada hilo dispone de su propia copia del atributo.</p> MainTareaErroneaTareaCorrecta <pre><code>public class Main {\nprivate static int NUM_HILOS = 10;\npublic static void main(String[] args) {\nTareaCorrecta tarea = new TareaCorrecta();\nThread[] hilos = new Thread[NUM_HILOS];\n// Se crean hilos que ejecutan la tarea insegura.\nfor (int i = 0; i &lt; NUM_HILOS; i++) {\nhilos[i] = new Thread(tarea);\nhilos[i].start();\ntry {\nTimeUnit.SECONDS.sleep(2);\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\n}\n}\n}\n</code></pre> <pre><code>public class TareaErronea implements Runnable {\nprivate String mNombre;\n@Override\npublic void run() {\n// Se obtiene la hora de inicio. \n// PROBLEMA: SE EST\u00c1 CAMBIANDO EL NOMBRE EN TODOS LOS HILOS.\nmNombre = Thread.currentThread().getName();\nSystem.out.printf(\"Hilo: %s - Nombre inicio: %s\\n\", Thread.currentThread().getId(), mNombre);\n// Se simula el trabajo de la tarea.\ntry {\nTimeUnit.SECONDS.sleep((int) Math.rint(Math.random() * 5));\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\nSystem.out.printf(\"Hilo: %s - Nombre fin: %s\\n\", Thread.currentThread().getId(), mNombre);\n}\n}\n</code></pre> <pre><code>public class TareaCorrecta implements Runnable {\nprivate ThreadLocal&lt;String&gt; mNombre;\n@Override\npublic void run() {\n// Se obtiene el nombre del hilo. SOLO SE ACTUALIZA LA COPIA DEL HILO CORRESPONDIENTE.\nmNombre = new ThreadLocal&lt;String&gt;(){\n@Override\nprotected String initialValue() {\nreturn Thread.currentThread().getName();\n}\n};\nSystem.out.printf(\"Hilo: %s - Nombre Inicio: %s\\n\", Thread.currentThread().getId(), mNombre.get());\n// Se simula el trabajo de la tarea.\ntry {\nTimeUnit.SECONDS.sleep((int) Math.rint(Math.random() * 5));\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\nSystem.out.printf(\"Hilo: %s - Nombre Fin: %s\\n\", Thread.currentThread().getId(), mNombre.get());\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_21/page-13/","title":"Ejercicios","text":"Ejercicio 1 <p>\u00bfPara qu\u00e9 sirve UncaughtExceptionHandler?</p> Soluci\u00f3n <p>Es una interfaz que sirve para evitar que un hilo se finalice cuando se comete un <code>unchecked exception</code></p> Ejercicio 2 <p>\u00bfPara qu\u00e9 sirve ThreadGroup?***</p> Soluci\u00f3n <p>Es una clase que nos permite agrupar varios hilos y tratarlos como uno solo.</p> Ejercicio 3 <p>\u00bfPara qu\u00e9 sirve una ThreadFactory?***</p> Soluci\u00f3n <p>Sirve para crear varios objetos de una clase o de varias clases.</p> Ejercicio 4 <p>\u00bfPara qu\u00e9 sirve ThreadLocal? \u00bfCu\u00e1ndo tiene sentido usarla?***</p> Soluci\u00f3n <p>Sirve cuando deseamos que todos los hilos de un objeto Runnable no compartan atributos. Tiene sentido usarla en frameworks para almacenar un determinado contexto asoci\u00e1ndolo a cada hilo.</p> Ejercicio 5 <p>Crea un programa en Java que muestre la tabla de potencias de los n\u00fameros del 1 al 10. Haz uso de los hilos</p> Ejercicio 6 <p>Realiza el mismo programa anterior, pero d\u00e1ndole prioridad a los n\u00fameros pares. La salida debe ser como la siguiente: <code>NombreHilo: 2 ^ 1 = 1</code></p>"},{"location":"bloque_v/tema_21/page-2/","title":"2 Thread","text":""},{"location":"bloque_v/tema_21/page-2/#la-clase-thread","title":"La clase Thread","text":"<p>En Java un hilo de ejecuci\u00f3n est\u00e1 representado por la clase <code>Thread</code>. Si queremos crear un hilo que ejecute un determinado c\u00f3digo deberemos definir una clase que extienda de la la clase <code>Thread</code> y sobrescribir su m\u00e9todo <code>run()</code>. Dicho m\u00e9todo ser\u00e1 ejecutado autom\u00e1ticamente por el sistema cuando iniciemos la ejecuci\u00f3n del hilo.</p> <p>Debemos tener en cuenta que si simplemente instanciamos la clase <code>Thread</code> usando su constructor vac\u00edo, <code>new Thread()</code> estaremos creando un hilo que no ejecuta ning\u00fan c\u00f3digo.</p> <p>De cara al sistema operativo, el nuevo hilo de ejecuci\u00f3n se crea cuando se llama a m\u00e9todo <code>start()</code> del objeto <code>Thread</code>, no cuando se crea la instancia (objeto) de la clase que extiende <code>Thread</code>. El entorno de ejecuci\u00f3n de Java, despu\u00e9s de obtener los recursos necesarios para el hilo, llama internamente al m\u00e9todo <code>run()</code>, ejecut\u00e1ndose de forma concurrente al hilo desde el que se llam\u00f3 a <code>start()</code>.</p> <pre><code>class MyThread extends Thread {\n@Override\npublic void run() {\n// ...\n}\n}\n</code></pre> <p>Para iniciar un objeto de dicha clase deberemos instanciarlo y llamar a su m\u00e9todo <code>start()</code>:</p> <pre><code>public class Main {\npublic static void main(String[] args) {\nnew MyThread().start();\n}\n}\n</code></pre> <p>Nunca hagas esto</p> <p>Debemos tener en cuenta que si llamamos directamente al m\u00e9todo <code>run()</code> de un objeto de una clase que extiende de <code>Thread</code> NO se crea un nuevo hilo de ejecuci\u00f3n, sino que se ejecuta su c\u00f3digo en el mismo hilo desde el que se ha llamado.</p> <p>Dentro del m\u00e9todo <code>run()</code> podemos ejecutar pr\u00e1cticamente cualquier c\u00f3digo. Sin embargo los entornos visuales con UI salen restringir los hilos que pueden acceder a los componentes de la UI, permitiendo que s\u00f3lo el hilo principal pueda acceder a ellos, como por ejemplo en el caso de Android.</p> <p>Un hilo finaliza su ejecuci\u00f3n en cuanto se retorne de su m\u00e9todo <code>run()</code>, ya sea por una salida anticipada mediante <code>return</code> o simplemente porque se haya ejecutado su \u00faltima instrucci\u00f3n. Tambi\u00e9n puede terminar con una excepci\u00f3n si el c\u00f3digo del m\u00e9todo <code>run()</code> lanza o produce una excepci\u00f3n que no es gestionada.</p> <p>Warning</p> <p>Un hilo se finaliza cuando termina de ejecutarse su m\u00e9todo <code>run()</code></p> <p>Por su parte, el planificador interno de hilos puede suspender y resumir la ejecuci\u00f3n de un hilo muchas veces durante su ciclo de vida, algunas veces atendiendo a determinadas sentencias especificadas por el desarrollador dentro del c\u00f3digo del hilo, y que estudiaremos m\u00e1s adelante, como <code>sleep()</code>, <code>wait()</code>, <code>notify()</code>, <code>join()</code>, etc.</p> <p>Debemos tener en cuenta que una vez que finaliza la ejecuci\u00f3n de hilo el entorno de ejecuci\u00f3n de Java recicla los recursos que fueron obtenidos para \u00e9l, como por ejemplo el almacenamiento reservado para \u00e9l, o su pila de ejecuci\u00f3n. Esto implica que no podemos reutilizar el objeto <code>Thread</code> correspondiente a un hilo ya finalizado (se ha retornado de <code>run()</code>) para ejecutar alguna otra tarea.</p> <p>Cuando un programa Java crea distintos hilos de ejecuci\u00f3n no debemos olvidar que dicho programa seguir\u00e1 en ejecuci\u00f3n mientras alguno de sus hilos est\u00e9 en ejecuci\u00f3n (a no ser que se trate de un hilo demonio, como veremos m\u00e1s adelante). Si el hilo principal, esto es, el que ejecuta el m\u00e9todo <code>main()</code>, termina, el resto de los hilos continuar\u00e1n su ejecuci\u00f3n hasta que terminen. Si uno de los hilos usa la instrucci\u00f3n <code>System.exit()</code> para terminar la ejecuci\u00f3n de un programa, finalizar\u00e1 la ejecuci\u00f3n de todos sus hilos.</p> <p>La clase <code>Thread</code> almacena ciertos atributos de informaci\u00f3n que nos pueden ayudar a identificar un hilo o conocer su estado. Veamos dichos atributos:</p> <ul> <li>ID: Identificador \u00fanico para el hilo.</li> <li>Name: Nombre del hilo.</li> <li>Priority: Prioridad del hilo (de <code>1</code> a <code>10</code>, donde <code>10</code> es la m\u00e1xima prioridad).</li> <li>Status: Estado del hilo. Puede ser uno de los siguientes: <code>new</code> (nuevo), <code>runnable</code> (ejecutable), <code>blocked</code> (bloqueado), <code>waiting</code> (esperando a otro hilo), <code>timed waiting</code> (esperando a otro hilo un tiempo determinado), o <code>terminated</code> (terminado).</li> </ul> <p>La M\u00e1quina Virtual de Java (JVM) usa la prioridad de los hilos para seleccionar el que debe usar la CPU en cada momento y actualiza autom\u00e1ticamente el estado de cada hilo dependiendo de su situaci\u00f3n. Entre todos los hilos en estado \"listo\", se escoge para ser ejecutado el hilo con mayor prioridad. Si hay dos o m\u00e1s hilos con dicha prioridad, se elige uno de ellos siguiendo un algoritmo round-robin.</p> <p>Si no se especifica un nombre para el hilo, la JVM le asigna autom\u00e1ticamente uno con el formato <code>Thread-XX</code> donde <code>XX</code> es un n\u00famero.</p> <p>Warning</p> <p>No se puede modificar los atributos <code>ID</code> o <code>Status</code> desde c\u00f3digo</p> <p>Debemos tener en cuenta que no es posible modificar los atributos <code>ID</code> o <code>Status</code> de un hilo desde c\u00f3digo. De hecho, la clase <code>Thread</code> no implementa los setters correspondientes.</p> <p>El m\u00e9todo <code>setPriority()</code> puede lanzar una excepci\u00f3n <code>IllegalArgumentException</code> si se intenta establecer una prioridad que no est\u00e9 entre <code>1</code> y <code>10</code>.</p> <p>Para asignar un determinado nombre a un hilo podemos pasarlo como argumento al constructor de la clase <code>Thread</code>.</p>"},{"location":"bloque_v/tema_21/page-2/#proyecto-thread","title":"Proyecto Thread","text":"<p>En el siguiente proyecto crearemos una aplicaci\u00f3n que muestra la tabla de multiplicar de los n\u00fameros desde el 1 al 10, usando para cada tabla un hilo de ejecuci\u00f3n distinto. Para representar la tabla de multiplicar de un n\u00famero definiremos una clase que extienda de la clase <code>Thread</code>.</p> <p>El c\u00f3digo corresponde a las clases descritas en los ejemplos anterior.</p> MainMultiplicationTable <pre><code>public class Main {\npublic static void main(String[] args) {\nfor (int i = 1; i &lt;= 10; i++) {\nnew MultiplicationTable(i).start();\n}\n}\n}\n</code></pre> <pre><code>class MultiplicationTable extends Thread {\nprivate final int number;\nMultiplicationTable(int number) {\nthis.number = number;\n}\n@Override\npublic void run() {\nfor (int i = 1; i &lt;= 10; i++) {\nSystem.out.printf(\"%s: %d * %d = %d\\n\", getName(), number, i, i * number);\n}\n}\n}\n</code></pre> <p>Al ejecutar el proyecto podemos comprobar como el orden en que se muestran las l\u00edneas de las diferentes tablas de multiplicar no es igual al de un programa con un \u00fanico hilo, e incluso puede ser diferentes en distintas ejecuciones.</p>"},{"location":"bloque_v/tema_21/page-3/","title":"3 Runnable","text":""},{"location":"bloque_v/tema_21/page-3/#la-interfaz-runnable","title":"La interfaz Runnable","text":"<p>La t\u00e9cnica anterior de definir una clase que extiende de <code>Thread</code> tiene un inconveniente: como sabemos Java no permite la herencia m\u00faltiple, por lo que si queremos que extienda de <code>Thread</code> no podr\u00e1 extender de ninguna otra clase. Para solucionar este problema, Java nos proporciona la interfaz <code>Runnable</code> que representa el comportamiento de una tarea (un conjunto de l\u00edneas de c\u00f3digo) que pueda ser ejecutada en un hilo de ejecuci\u00f3n.</p> <pre><code>package java.lang;\n@FunctionalInterface\npublic interface Runnable {\nvoid run();\n}\n</code></pre> <p>De esta manera, en vez de definir una clase que extienda de <code>Thread</code>, definiremos una clase que implemente la interfaz <code>Runnable</code>, permiti\u00e9ndonos que la clase extienda de cualquier otra clase que nos interese.</p> <p>La interfaz <code>Runnable</code> posee un \u00fanico m\u00e9todo: el m\u00e9todo <code>run()</code>, que sobrescribiremos para indicar el c\u00f3digo que debe ser ejecutado. De hecho, la clase <code>Thread</code> implementa la interfaz <code>Runnable</code>, y por eso dispone del m\u00e9todo <code>run()</code>.</p> <p>Sin embargo, un objeto de una clase que implemente <code>Runnable</code> no puede ejecutarse por s\u00ed s\u00f3lo, sino que debe hacerlo dentro de un objeto <code>Thread</code>. Para que esto sea posible, la clase <code>Thread</code> nos proporciona un constructor que recibe como par\u00e1metro el objeto <code>Runnable</code> (la tarea) que queremos que ejecute dicho hilo cuando se inicie su ejecuci\u00f3n.</p> <p>As\u00ed, definiremos una clase que represente la \"tarea\" y que implementar\u00e1 la interfaz <code>Runnable</code>:</p> <pre><code>class MyRunnable implements Runnable {\n// ...\n@Override\npublic void run() {\n// ...\n}\n}\n</code></pre> <p>Para ejecutar la tarea en un nuevo hilo de ejecuci\u00f3n haremos:</p> <pre><code>public class Main {\npublic static void main(String[] args) {\nnew Thread(new MyRunnable()).start();\n}\n}\n</code></pre> <p>Dado que la interfaz <code>Runnable</code> corresponde a una interfaz funcional, es decir, aquella que tiene un \u00fanico m\u00e9todo abstracto, si estamos empleando Java 8+ podemos usar una expresi\u00f3n lambda o una referencia a m\u00e9todo para representar el objeto <code>Runnable</code>. Por ejemplo:</p> <pre><code>public class Main {\npublic static void main(String[] args) {\nnew Thread(() -&gt; {\n// ...\n}).start();\n}\n}\n</code></pre> <p>Debemos tener en cuenta que el m\u00e9todo si queremos pasar argumentos al c\u00f3digo que debe ejecutarse dentro de <code>run()</code> deberemos pasarlos como argumentos del constructor de la clase que implemente <code>Runnable</code> o mediante un setter, de manera que el argumento recibido se establezca como valor de un campo definido en tal clase. Estas dos t\u00e9cnicas son incompatibles con el empleo de lambdas, dadas las caracter\u00edsticas de \u00e9stas.</p> <p>La t\u00e9cnica de pasar argumento mediante el constructor se describe en el Proyecto Runnable que desarrollaremos a continuaci\u00f3n.</p> <p>Acceso al hilo desde el Runnable</p> <p><code>Thread.currentThread()</code> retorna el objeto <code>Thread</code> en el que nos estamos ejecutando</p> <p>Si desde el objeto <code>Runnable</code> necesitamos acceder a informaci\u00f3n sobre el hilo de ejecuci\u00f3n en el que se est\u00e1 ejecutando, podemos usar el m\u00e9todo est\u00e1tico <code>Thread.currentThread()</code>, que retorna el objeto <code>Thread</code> en el que est\u00e1 ejecutando dicha l\u00ednea de c\u00f3digo.</p> <p>En general, el uso de la interfaz <code>Runnables</code> es m\u00e1s flexible que heredar de <code>Thread</code>, ya que, como estudiaremos m\u00e1s adelante, podremos usarlos en otras clases Java, como por ejemplo con los executors (ejecutores).</p> <p>Un \u00faltimo aspecto curioso es que el m\u00e9todo <code>run()</code> de la interfaz <code>Runnable</code> no retorna nada. Entonces \u00bfc\u00f3mo podemos hace que un hilo secundario calcule un resultado y lo devuelva? No podemos hacer que lo retorne, pero s\u00ed que podemos almacenar el resultado en alguna variable compartida entre el hilo llamador y el hilo secundario, o incluso definir un campo en el <code>Runnable</code> y almacenar en \u00e9l el resultado. Cuando termine la ejecuci\u00f3n del hilo secundario el hilo que lo inici\u00f3 podr\u00e1 acceder al resultado a trav\u00e9s del campo del <code>Runnable</code>.</p>"},{"location":"bloque_v/tema_21/page-3/#proyecto-runnable","title":"Proyecto Runnable","text":"<p>En el siguiente proyecto crearemos una aplicaci\u00f3n que muestra la tabla de multiplicar de los n\u00fameros desde el 1 al 10, usando para cada tabla un hilo de ejecuci\u00f3n distinto. Para representar la tabla de multiplicar de un n\u00famero definiremos una clase que implemente la interfaz <code>Runnable</code>.</p> <p>El c\u00f3digo corresponde a las clases descritas en los ejemplos anterior.</p> MainMultiplicationTable <pre><code>public class Main {\npublic static void main(String[] args) {\nfor (int i = 1; i &lt;= 10; i++) {\nnew Thread(new MultiplicationTable(i)).start();\n}\n}\n}\n</code></pre> <pre><code>class MultiplicationTable implements Runnable {\nprivate final int number;\nMultiplicationTable(int number) {\nthis.number = number;\n}\n@Override\npublic void run() {\nfor (int i = 1; i &lt;= 10; i++) {\nSystem.out.printf(\"%s: %d * %d = %d\\n\", Thread.currentThread()\n.getName(), number, i, i * number);\n}\n}\n}\n</code></pre> <p>Al ejecutar el proyecto podemos comprobar como el orden en que se muestran las l\u00edneas de las diferentes tablas de multiplicar no es igual al de un programa con un \u00fanico hilo, e incluso puede ser diferentes en distintas ejecuciones.</p>"},{"location":"bloque_v/tema_21/page-4/","title":"4 Prioridad de los hilos","text":""},{"location":"bloque_v/tema_21/page-4/#prioridad-en-los-hilos","title":"Prioridad en los hilos","text":"<p>Como hemos visto anteriormente cuando hablamos de la clase <code>Thread</code>, uno de los datos gestionados internamente por un hilo es su prioridad. Mediante el m\u00e9todo <code>setPriority(priority)</code> podemos establecer la prioridad de un determinado hilo.</p> <p>La clase <code>Thread</code> nos proporciona una serie de constantes con los valores de prioridad m\u00ednima, normal y m\u00e1xima, denominadas respectivamente <code>Thread.MIN_PRIORITY</code>, <code>Thread.NORM_PRIORITY</code> y <code>Thread.MAX_PRIORITY</code>.</p> <p>Sin embargo, no es recomendable cambiar la prioridad de los hilos porque los problemas de inanici\u00f3n que puede producir.</p> <p>Warning</p> <p>Debemos tener en cuenta que al establecer la prioridad de un hilo tan s\u00f3lo estaremos haciendo una sugerencia al sistema operativo, sin ninguna garant\u00eda de que dicha sugerencia sea tenida en cuenta.</p>"},{"location":"bloque_v/tema_21/page-4/#proyecto-priority","title":"Proyecto Priority","text":"<p>Similar al proyecto anterior, pero a cada hilo se le asigna una prioridad. Estableceremos la prioridad m\u00e1xima para los hilos pares y la prioridad m\u00ednima para los impares y comprobaremos el orden en el que se ejecutan los hilos.</p> MainMultiplicationTable <pre><code>public class Main {\npublic static void main(String[] args) {\nfor (int i = 1; i &lt;= 10; i++) {\nThread thread = new Thread(new MultiplicationTable(i));\nif ((i % 2) == 0) {\nthread.setPriority(Thread.MAX_PRIORITY);\n} else {\nthread.setPriority(Thread.MIN_PRIORITY);\n}\nthread.start();\n}\n}\n}\n</code></pre> <pre><code>class MultiplicationTable implements Runnable {\nprivate final int number;\nMultiplicationTable(int number) {\nthis.number = number;\n}\n@Override\npublic void run() {\nfor (int i = 1; i &lt;= 10; i++) {\nSystem.out.printf(\"%s: %d * %d = %d\\n\", Thread.currentThread()\n.getName(), number, i, i * number);\n}\n}\n}\n</code></pre> <p>Al ejecutar el proyecto podemos comprobar como el orden en que se muestran las l\u00edneas de las diferentes tablas de multiplicar no es igual al de un programa con un \u00fanico hilo, e incluso puede ser diferentes en distintas ejecuciones. Adem\u00e1s vemos como establecer la prioridad no es ninguna garant\u00eda de ejecuci\u00f3n temprana.</p>"},{"location":"bloque_v/tema_21/page-5/","title":"5 Interrumpir","text":""},{"location":"bloque_v/tema_21/page-5/#interrumpir-un-hilo","title":"Interrumpir un hilo","text":"<p>Como hemos visto, un programa Java con m\u00e1s de un hilo de ejecuci\u00f3n finaliza solamente cuando ha finalizado la ejecuci\u00f3n de todos sus hilos (que no sean demonios) o cuando uno de sus hilos usa el m\u00e9todo <code>System.exit()</code>.</p> <p>Algunas veces, sin embargo, es necesario finalizar un hilo concreto, ya sea porque se quiera cancelar la tarea que el hilo est\u00e1 llevando a cabo o porque sea el \u00fanico hilo que queda en ejecuci\u00f3n y queramos finalizar el programa.</p> <p>Para ello Java proporciona un mecanismo de interrupci\u00f3n para indicar a un hilo que queremos que finalice su ejecuci\u00f3n. Este mecanismo tiene la peculiaridad de que es el propio hilo el que debe comprobar si ha sido interrumpido o no, y decidir si aceptar la solicitud de finalizaci\u00f3n o ignorarla y seguir con su ejecuci\u00f3n, aunque no es el comportamiento que se espera de \u00e9l. Si decide finalizar, simplemente retornar\u00e1 (har\u00e1 <code>return</code>) del m\u00e9todo <code>run()</code>.</p> <p>La clase <code>Thread</code> tiene un atributo que almacena un valor booleano que indica si el hilo ha sido interrumpido o no (flag o bandera). Cuando se llama al m\u00e9todo <code>interrupt()</code> de un hilo, se establece dicho atributo a <code>true</code>. Podemos usar el m\u00e9todo <code>isInterrupted()</code> para conocer el valor de dicho atributo.</p> <p>Nunca hagas esto</p> <p>Nunca uses el m\u00e9todo <code>stop()</code> de la clase Thread</p> <p>La clase <code>Thread</code> dispone de un m\u00e9todo <code>stop()</code>, que fuerza que un hilo deje de ejecutarse inmediatamente. Sin embargo, esta forma de actuar es totalmente insegura, ya que no permite al hilo liberar antes de terminar su ejecuci\u00f3n los recursos que hubiera adquirido. Por tanto no se recomienda bajo ninguna circunstancia el uso de el m\u00e9todo <code>stop()</code>, y de hecho se trata de un m\u00e9todo deprecated (obsoleto).</p> <p>Existe otro m\u00e9todo en la clase <code>Thread</code>, en este caso est\u00e1tico, llamado <code>interrupted()</code> que retorna si el hilo que se est\u00e1 ejecutando ha sido interrumpido o no, y establece dicho atributo a <code>false</code>.</p> <p>La diferencia entre <code>isInterrupted()</code> y <code>Thread.interrupted()</code> es que este \u00faltimo borra el estado de interrupci\u00f3n del hilo, mientras que el otro no.</p> <p>Si el c\u00f3digo que comprueba el estado de la interrupci\u00f3n es el \"propietario\" del hilo, en ciertos casos muy concretos puede ser apropiado borrar la bandera de interrumpido, siempre y cuando el propietario est\u00e1 implementando la pol\u00edtica de cancelaci\u00f3n del hilo.</p> <p>Tips</p> <p>En general se prefiere usar <code>isInterrupted()</code> frente a <code>Thread.interrupted()</code>.</p> <p>Sin embargo, en la gran mayor\u00eda de los casos, incluyendo cuando el c\u00f3digo ejecutado por el hilo corresponde a un Runnable, el c\u00f3digo en cuesti\u00f3n no es el propietario del hilo y por tanto no debe borrar la bandera de interrupci\u00f3n, dado que no es quien implementa la pol\u00edtica de cancelaci\u00f3n.</p> <p>Por tanto, dentro del m\u00e9todo <code>run()</code> del hilo deberemos comprobar peri\u00f3dicamente el valor de <code>isInterrupted()</code> para comprobar si se ha solicitado la interrupci\u00f3n del hilo.</p> <pre><code>public class MyRunnable implements Runnable {\n@Override\npublic void run() {\nwhile (!Thread.currentThread().isInterrupted()) {\n// ...\n}\n}\n}\n</code></pre> <p>Un aspecto muy importante de la interrupci\u00f3n es que si el hilo trata de ejecutar alguna operaci\u00f3n bloqueante (que vaya a bloquear el hilo), como por ejemplo las operaciones <code>wait()</code>, <code>join()</code>, <code>sleep()</code> (que veremos m\u00e1s adelante), o las llamadas de E/S bloqueantes, y dicho hilo tiene activado el valor booleano de interrupci\u00f3n, la llamada a dicho m\u00e9todo lanzar\u00e1 autom\u00e1ticamente la excepci\u00f3n <code>InterruptedException</code>, por lo que deberemos capturar la interrupci\u00f3n o hacer que el m\u00e9todo dicha excepci\u00f3n.</p> <p>Igualmente, si el hilo est\u00e1 bloqueado en alguna de estas operaciones bloqueantes y se le activa el valor booleano de interrupci\u00f3n desde otro hilo, el hilo que estaba bloqueado ser\u00e1 desbloqueado inmediatamente y se le lanzar\u00e1 autom\u00e1ticamente la excepci\u00f3n <code>InterruptedException</code>.</p> <pre><code>public class MyRunnable implements Runnable {\n@Override\npublic void run() {\nwhile (!Thread.currentThread().isInterrupted()) {\n// ...\ntry {\nThread.sleep(sleepingTime);\n} catch (InterruptedException e) {\n// The thread has been interrupted\nreturn;\n}\n}\n}\n}\n</code></pre> <p>Cuando el c\u00f3digo de un hilo no es sencillo, como por ejemplo en el caso de que sea recursivo, el m\u00e9todo descrito anteriormente de capturar directamente la interrupci\u00f3n del hilo puede llegar a ser complejo. En estos casos es mejor opci\u00f3n dejar que el propio m\u00e9todo lance la excepci\u00f3n <code>InterruptedException</code> cuando se detecte que se el hilo ha sido marcado como interrumpido, propagando la excepci\u00f3n hacia el llamador. Al final de la cadena de llamadas, en el m\u00e9todo <code>run()</code> capturaremos la excepci\u00f3n.</p> <pre><code>public class MyRunnable implements Runnable {\n@Override\npublic void run() {\ntry {\nrecursiveMethod(initialValue);\n} catch (InterruptedException e) {\n// The thread has been interrupted\nreturn;\n}\n}\nprivate void recursiveMethod(int value) throws InterruptedException {\n// ...\n}\n}\n</code></pre> <p>En general, debemos decidir qu\u00e9 hacer cuando detectamos que el hilo ha sido marcado para interrupci\u00f3n. Tenemos varias opciones:</p> <ul> <li>Propagar la excepci\u00f3n <code>InterruptedException</code> simplemente no captur\u00e1ndola.</li> <li>Capturar la excepci\u00f3n, realizar operaciones de liberaciones de recursos obtenidos por el hilo y despu\u00e9s relanzar la excepci\u00f3n.</li> <li>Capturar la excepci\u00f3n y terminar.</li> <li>Capturar la excepci\u00f3n, restaurar el indicador de interrupci\u00f3n y terminar.</li> </ul>"},{"location":"bloque_v/tema_21/page-5/#proyecto-interrupt","title":"Proyecto Interrupt","text":"<p>En este proyecto desarrollaremos un programa que crea un hilo dedicado a mostrar por pantalla n\u00fameros primeros. Transcurridos unos segundos el hilo principal solicita al hilo impresor de n\u00fameros primos que finalice usando el mecanismo de interrupci\u00f3n descrito anteriormente.</p> MainPrimeNumberPrinter <pre><code>public class Main {\npublic static void main(String[] args) throws InterruptedException {\nThread thread = new Thread(new PrimeNumberPrinter(), \"Prime number printer\");\nthread.start();\n// Sleep for 2 second.\nThread.sleep(2000);\n// Active interruption flag in thread.\nthread.interrupt();\n}\n}\n</code></pre> <pre><code>public class PrimeNumberPrinter implements Runnable {\n@Override\npublic void run() {\n// Print prime numbers until someone interrupts the thread.\nfor (long i = 1L; !Thread.currentThread().isInterrupted(); i++) {\nif (isPrimeNumber(i)) {\nSystem.out.printf(\"%d is a prime number\\n\", i);\n// If the thread is interrupted while sleeping\n// InterruptedException will be thrown.\ntry {\nThread.sleep(50);\n} catch (InterruptedException e) {\nSystem.out.println(\"I've been interrupted while sleeping\");\nreturn;\n}\n}\n}\nSystem.out.println(\"I've been interrupted\");\n}\nprivate boolean isPrimeNumber(long number) {\nif (number &lt; 1) {\nthrow new IllegalArgumentException();\n}\nfor (long i = 2; i * i &lt; number; i++) {\nif (number % i == 0) {\nreturn false;\n}\n}\nreturn true;\n}\n}\n</code></pre> <p>Si ejecutamos el proyecto veremos que tan s\u00f3lo se imprimen n\u00fameros durante dos segundos, dado que transcurrido dicho tiempo el hilo principal interrumpe el hilo secundario.</p>"},{"location":"bloque_v/tema_21/page-5/#proyecto-interruptedrecursivefactorial","title":"Proyecto InterruptedRecursiveFactorial","text":"<p>En este proyecto desarrollaremos un programa que crea un hilo dedicado a mostrar por pantalla el factorial de los n\u00famero naturales. Dicho hilo usa una funci\u00f3n recursiva para calcular el factorial. Transcurridos unos segundos el hilo principal solicita al hilo impresor de factoriales que finalice usando el mecanismo de interrupci\u00f3n descrito anteriormente.</p> MainFactorialPrinter <pre><code>public class Main {\npublic static void main(String[] args) throws InterruptedException {\nThread thread = new Thread(new FactorialPrinter(), \"Factorial printer\");\nthread.start();\nThread.sleep(2000);\nthread.interrupt();\n}\n}\n</code></pre> <pre><code>public class FactorialPrinter implements Runnable {\n@Override\npublic void run() {\n// Print factorials until it is interrupted\nfor (int i = 1; !Thread.currentThread().isInterrupted(); i++) {\ntry {\nSystem.out.printf(\"factorial(%d) = %d\\n\", i, factorial(i));\n} catch (InterruptedException e) {\nSystem.out.println(\"I've been interrupted\");\nreturn;\n}\n}\n}\nprivate int factorial(int number) throws InterruptedException {\nif (number &lt; 0) {\nthrow new IllegalArgumentException();\n}\nThread.sleep(50);\nif (number == 0 || number == 1) {\nreturn 1;\n} else {\nreturn number * factorial(number - 1);\n}\n}\n}\n</code></pre> <p>Si ejecutamos el proyecto veremos que tan s\u00f3lo se imprimen factoriales durante dos segundos, dado que transcurrido dicho tiempo el hilo principal interrumpe el hilo secundario.</p>"},{"location":"bloque_v/tema_21/page-6/","title":"6 Dormir","text":""},{"location":"bloque_v/tema_21/page-6/#dormir-un-hilo","title":"Dormir un hilo","text":"<p>Algunas veces ser\u00e1 interesante suspender la ejecuci\u00f3n de un hilo durante un determinado periodo de tiempo, como por ejemplo en el caso de un hilo que se dedique a comprobar el estado de un sensor cada minuto. Una vez realizada la comprobaci\u00f3n, el hilo debe pasar al estado de dormido durante aproximadamente un minuto, liberando cualquier recurso que estuviera utilizando, incluyendo el procesador. Una vez pasado el minuto, el hilo ser\u00e1 despertado por el sistema y estar\u00e1 listo para continuar con su ejecuci\u00f3n cuando el sistema lo determine.</p> <p>Para dormir un hilo podremos usar el m\u00e9todo <code>sleep(milliseconds)</code> de la clase <code>Thread</code>, que recibe un entero en el que indicamos el n\u00famero de milisegundos que queremos que el hilo suspenda su ejecuci\u00f3n. Cuando concluye el tiempo indicado, el hilo contin\u00faa su ejecuci\u00f3n en la instrucci\u00f3n siguiente a <code>sleep()</code>, cuando el sistema as\u00ed lo determine.</p> <p>Cuando se llama al m\u00e9todo <code>sleep()</code>, el hilo libera la CPU y detiene su ejecuci\u00f3n el tiempo especificado, durante el cual la CPU puede estar ejecutando otras tareas.</p> <p>Uso de sleep()</p> <p>Nosotros usaremos <code>sleep()</code> para simular tareas que tardan un determinado tiempo en ejecutarse</p> <p>En todo caso, debemos tener en cuenta que, no tenemos garant\u00eda de que la cantidad de tiempo que pasamos al m\u00e9todo <code>sleep()</code> sea exactamente el tiempo que est\u00e9 durmiendo el hilo correspondiente, ya que depender\u00e1 de la funcionalidad proporcionada por el sistema operativo.</p> <p>Existe otra posibilidad para dormir un hilo, que consiste en usar el m\u00e9todo <code>sleep()</code> de alg\u00fan elemento de la enumeraci\u00f3n <code>TimeUnit</code>, definida en el paquete <code>java.util.concurrent</code>, que recibir\u00e1 el tiempo de suspensi\u00f3n en la unidad correspondiente a dicha enumeraci\u00f3n, en vez de en milisegundos. Por ejemplo, <code>TimeUnit.SECONDS.sleep(1)</code> duerme el hilo correspondiente durante 1 segundo.</p> <p>Si se trata de echar a dormir un hilo que ha sido marcado como interrupci\u00f3n, o si un hilo est\u00e1 durmiendo y se marca como interrumpido, se lanza inmediatamente en el hilo la excepci\u00f3n <code>InterruptedException</code>, sin esperar a que concluya el tiempo durante el cual el hilo debe estar dormido.</p> <p>En nuestros proyectos usaremos la t\u00e9cnica de dormir un hilo para simular el tiempo que se tarda en realizar una determinada tarea.</p> <p>Warning</p> <p>No se recomienda el uso del m\u00e9todo <code>yield()</code></p> <p>La clase <code>Thread</code> posee otro m\u00e9todo que permite liberar la CPU para que ejecute otra tarea. Se trata del m\u00e9todo <code>yield()</code> (ceder), aunque la JVM no garantiza que dicha cesi\u00f3n se lleve a cabo siempre, por lo que no se recomienda su uso, y s\u00f3lo puede utilizarse cuando estemos depurando nuestro c\u00f3digo.</p>"},{"location":"bloque_v/tema_21/page-6/#proyecto-clock","title":"Proyecto Clock","text":"<p>En este proyecto desarrollaremos un programa que cree un hilo que muestre por pantalla cada segundo la hora actual con horas, minutos y segundos. Haremos uso del m\u00e9todo <code>sleep()</code> para dormir el hilo durante un segundo entre muestra y muestra. Transcurridos unos segundos el hilo principal interrumpir\u00e1 al hilo reloj.</p> MainSecondsHand <pre><code>import java.util.concurrent.TimeUnit;\npublic class Main {\npublic static void main(String[] args) throws InterruptedException {\nThread thread = new Thread(new SecondsHand(), \"Seconds hand\");\nthread.start();\nTimeUnit.SECONDS.sleep(5);\nthread.interrupt();\n}\n}\n</code></pre> <pre><code>import java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.TimeUnit;\npublic class SecondsHand implements Runnable {\nprivate DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\n@Override\npublic void run() {\nwhile (!Thread.currentThread().isInterrupted()) {\nSystem.out.println(LocalDateTime.now().format(dateTimeFormatter));\ntry {\nTimeUnit.SECONDS.sleep(1);\n} catch (InterruptedException e) {\nSystem.out.println(\"I've been interrupted while sleeping\");\nreturn;\n}\n}\nSystem.out.println(\"I've been interrupted\");\n}\n}\n</code></pre> <p>Si ejecutamos el programa veremos que se va mostrando la hora segundo a segundo hasta que pasan 5 segundos, momento en el que el hilo principal interrumpe al hilo secundario.</p>"},{"location":"bloque_v/tema_21/page-7/","title":"7 Esperar la finalizaci\u00f3n","text":""},{"location":"bloque_v/tema_21/page-7/#esperar-la-finalizacion-de-un-hilo","title":"Esperar la finalizaci\u00f3n de un hilo","text":"<p>Imaginemos que dise\u00f1amos un programa que lanza varios hilos que llevan a cabo tareas de inicializaci\u00f3n del programa. Una vez iniciados estos hilos, el hilo principal del programa deber\u00e1 esperar a que concluya la ejecuci\u00f3n de los mismos para poder continuar con su funci\u00f3n, ya que es estrictamente necesario que se haya llevado a cabo completamente la inicializaci\u00f3n antes de seguir con otras tareas. Es evidente que en este caso el hilo principal debe esperar la finalizaci\u00f3n de los otros hilos.</p> <p>Para este cometido la clase <code>Thread()</code> dispone del m\u00e9todo <code>join()</code>. Cuando ejecutamos este m\u00e9todo sobre un objeto hilo, se suspende la ejecuci\u00f3n del hilo llamador hasta que el objeto hilo sobre el que hemos hecho <code>join()</code> concluye su ejecuci\u00f3n. De esta manera podr\u00edamos decir que el hilo llamador espera la uni\u00f3n (join) del hilo llamado. Por ejemplo, si desde el hilo principal de la aplicaci\u00f3n se realiza la llamada <code>hilo2.join()</code>, el hilo principal de la aplicaci\u00f3n suspende su ejecuci\u00f3n hasta que finaliza la ejecuci\u00f3n de <code>hilo2</code>.</p> <p>Sincronizaci\u00f3n final</p> <p><code>join()</code> supone un punto de sincronizaci\u00f3n con la terminaci\u00f3n de otro hilo</p> <p>Java proporciona una sobrecarga adicional del m\u00e9todo <code>join()</code> con el formato <code>join(long milisegundos)</code>, que permite que la espera no sea indefinida, sino que si el hilo llamado no ha finalizado a\u00fan su ejecuci\u00f3n en el n\u00famero de milisegundos indicados, el hilo llamador contin\u00faa su ejecuci\u00f3n. Por ejemplo, si desde el hilo principal de la aplicaci\u00f3n se realiza la llamada <code>hilo2.join(3000)</code>, el hilo principal de la aplicaci\u00f3n suspende su ejecuci\u00f3n hasta que finaliza la ejecuci\u00f3n de <code>hilo2</code> o hasta que hayan transcurrido 3 segundos (lo que ocurra antes). Si pasamos un valor negativo como tiempo m\u00e1ximo de espera se lanza la excepci\u00f3n <code>IllegalArgumentException</code>. Si pasamos el valor <code>0</code> como tiempo m\u00e1ximo de espera, se esperar\u00e1 indefinidamente la finalizaci\u00f3n del hilo sobre el que se ha hecho <code>join()</code>.</p> <p>Como ocurre con la mayor\u00eda de los m\u00e9todos bloqueantes (que bloquean un hilo), si el un hilo ha sido marcado para interrupci\u00f3n y trata de hacer <code>join()</code> sobre otro hilo, o si es marcada para interrupci\u00f3n mientras est\u00e1 bloqueado esperando a que finalice el hilo sobre el que ha hecho <code>join()</code>, se lanzar\u00e1 inmediatamente la excepci\u00f3n <code>InterruptedException</code> sin esperar a que finalice el hilo sobre el que ha hecho <code>join()</code>.</p> <p>No debemos olvidar que cualquier hilo puede esperar la finalizaci\u00f3n de otro hilo, no s\u00f3lo el hilo principal.</p>"},{"location":"bloque_v/tema_21/page-7/#proyecto-join","title":"Proyecto Join","text":"<p>En el siguiente proyecto crearemos una aplicaci\u00f3n que muestra la tabla de multiplicar de los n\u00fameros desde el 1 al 10, usando para cada tabla un hilo de ejecuci\u00f3n distinto. Una vez lanzados los hilos, el hilo principal esperar\u00e1 su finalizaci\u00f3n, tras lo cual mostrar\u00e1 un mensaje en pantalla informativo de que ha concluido la operaci\u00f3n.</p> MainMultiplicationTable <pre><code>public class Main {\nprivate static final int LAST_NUMBER = 10;\npublic static void main(String[] args) throws InterruptedException {\nThread[] threads = new Thread[LAST_NUMBER + 1];\nfor (int i = 1; i &lt;= LAST_NUMBER; i++) {\nthreads[i-1] = new Thread(new MultiplicationTable(i), \"Table of \" + i);\nthreads[i-1].start();\n}\nfor (int i = 1; i &lt;= LAST_NUMBER; i++) {\nthreads[i-1].join();\n}\nSystem.out.println(\"All multiplication tables printed\");\n}\n}\n</code></pre> <pre><code>class MultiplicationTable implements Runnable {\nprivate final int number;\nMultiplicationTable(int number) {\nthis.number = number;\n}\n@Override\npublic void run() {\nfor (int i = 1; i &lt;= 10; i++) {\nSystem.out.printf(\"%s: %d * %d = %d\\n\", Thread.currentThread()\n.getName(), number, i, i * number);\n}\n}\n}\n</code></pre> <p>Si ejecutamos el programa veremos que hasta que no hayan terminado de ejecutarse todos los hilos secundarios el hilo principal no mostrar\u00e1 el mensaje de que todas las tablas se han imprimido.</p>"},{"location":"bloque_v/tema_21/page-8/","title":"8 Daemons","text":""},{"location":"bloque_v/tema_21/page-8/#daemons","title":"Daemons","text":"<p>En Java podemos especificar que un determinado hilo sea considerado como un hilo daemon (demonio), que posee la caracter\u00edstica de que si es el \u00fanico hilo que queda en ejecuci\u00f3n en un programa, la JVM da por finalizado el programa, aunque el hilo demonio siga en ejecuci\u00f3n.</p> <p>Hilo demonio</p> <p>Realizan una determinada tarea y luego se echan a dormir durante un cierto tiempo, en un bucle</p> <p>Por tanto, los hilos demonios se emplean principalmente como hilos proveedores de servicios a otros hilos del programa. Normalmente poseen un bucle infinito que les hace estar siempre en ejecuci\u00f3n, en espera de que le llegue una petici\u00f3n de servicio, o realizando una determinada tarea cada cierto tiempo. Un ejemplo t\u00edpico de este comportamiento es el recolector de basura (garbage collector) de Java.</p> <p>Para indicar que un determinado hilo debe comportarse como hilo demonio deberemos llamar a se m\u00e9todo <code>setDaemon()</code> antes de llamar al m\u00e9todo <code>start()</code>. Una vez que el hilo est\u00e9 en ejecuci\u00f3n no podremos modificar dicho comportamiento, y si llamamos al m\u00e9todo <code>setDaemon()</code> se producir\u00e1 al excepci\u00f3n <code>IllegalThreadStateException</code>.</p> <p>Para saber si un hilo es un hilo demonio podemos llamar al m\u00e9todo <code>isDaemon()</code>.</p>"},{"location":"bloque_v/tema_21/page-9/","title":"9 UncaughtExceptionHandler","text":""},{"location":"bloque_v/tema_21/page-9/#uncaughtexceptionhandler","title":"UncaughtExceptionHandler","text":"<p>Como sabemos, en general en la JVM se pueden producir dos tipos de excepciones:</p> <ul> <li>Checked exceptions (excepciones comprobadas): Son aquellas que deben ser capturadas mediante <code>try-catch</code> o relanzadas incluyendo la cl\u00e1usula <code>throws</code> en la declaraci\u00f3n del m\u00e9todo. Ejemplos de este tipo de excepciones son <code>IOException</code> o <code>ClassNotFoundException</code>.</li> <li>Unchecked exceptions (excepciones no comprobadas): Son aquellas que NO es necesario capturar o relanzar, como por ejemplo <code>NumberFormatException</code>.</li> </ul> <p>Cuando se genera una checked exception dentro del m\u00e9todo <code>run()</code> de un hilo (o de un objeto que implemente <code>Runnable</code>), no tenemos m\u00e1s remedio que capturarla mediante <code>try catch</code>, ya que NO podemos redefinir el m\u00e9todo <code>run()</code> a\u00f1adi\u00e9ndole la cl\u00e1usula <code>throws</code>.</p> <p>Por su parte, si se produce una unchecked exception dentro del m\u00e9todo <code>run()</code> de un hilo, simplemente se mostrar\u00e1 el error en la consola y terminar\u00e1 la ejecuci\u00f3n del programa.</p> <p>Sin embargo, podemos modificar dicho comportamiento por defecto creando un objeto manejador (handler) que implemente la interfaz <code>Thread.UncaughtExceptionHandler</code>, y asign\u00e1ndoselo al hilo mediante el m\u00e9todo <code>setUncaughtExceptionHandler(handler)</code> de la clase <code>Thread</code>.</p> <pre><code>@FunctionalInterface\npublic interface UncaughtExceptionHandler {\nvoid uncaughtException(Thread t, Throwable e);\n}\n</code></pre> <p>De esta manera, cuando se produzca una uncaught exception dentro del m\u00e9todo <code>run()</code> de dicho hilo, la JVM llamar\u00e1 al m\u00e9todo <code>uncaughtException()</code> del objeto manejador, pas\u00e1ndole el objeto <code>Thead</code> y el objeto <code>Exception</code> para que decida c\u00f3mo manejar la situaci\u00f3n, evitando as\u00ed la finalizaci\u00f3n autom\u00e1tica de ejecuci\u00f3n de la aplicaci\u00f3n.</p> <p>La clase <code>Thead</code> proporciona tambi\u00e9n el m\u00e9todo est\u00e1tico <code>Thread.setDefaultUncaughtExceptionHandler(handler)</code> que permite establecer el objeto manejador cuyo m\u00e9todo <code>uncaughtException()</code> debe ser llamado cuando se produzca una unchecked exception en cualquiera de los hilos del programa. De esta manera no ser\u00e1 necesario indicar el manejador individualmente para cada hilo.</p> <p>As\u00ed, en caso se producirse una unchecked exception dentro del m\u00e9todo <code>run()</code> de un hilo, la JVM sigue el siguiente procedimiento:</p> <ol> <li>Llamar\u00e1 al m\u00e9todo <code>uncaughtException()</code> del objeto manejador establecido individualmente para dicho hilo.</li> <li>Si no existe, llamar\u00e1 al m\u00e9todo <code>uncaughtException()</code> del manejador establecido para el grupo de hilos al que pertenezca el hilo (<code>ThreadGroup</code>, lo veremos m\u00e1s adelante).</li> <li>Si no existe, llamar\u00e1 al del manejador por defecto establecido para la aplicaci\u00f3n,</li> <li>Si ninguno de los anteriores existe, mostrar\u00e1 el error en la consola y finalizar\u00e1 la ejecuci\u00f3n de la aplicaci\u00f3n.</li> </ol>"},{"location":"bloque_v/tema_21/page-9/#proyecto-uncaughtexceptionhandler","title":"Proyecto UncaughtExceptionHandler","text":"<p>En este proyecto crearemos un programa que a conciencia produce una unchecked exception en un hilo, para que sea manejada por un objeto <code>UncaughtExceptionHandler</code> que ser\u00e1 asociado al mismo.</p> MainExceptionHandlerTask <pre><code>public class Main {\npublic static void main(String[] args) {\nThread thread = new Thread(new Task());\nthread.setUncaughtExceptionHandler(new ExceptionHandler());\nthread.start();\n}\n}\n</code></pre> <pre><code>import java.lang.Thread.UncaughtExceptionHandler;\npublic class ExceptionHandler implements UncaughtExceptionHandler {\n@Override\npublic void uncaughtException(Thread t, Throwable e) {\nSystem.out.printf(\"Thread: %s\\n\", t.getId());\nSystem.out.printf(\"Exception: %s: %s\\n\", e.getClass().getName(), e.getMessage());\nSystem.out.printf(\"Stack Trace: \\n\");\ne.printStackTrace(System.out);\n}\n}\n</code></pre> <pre><code>public class Task implements Runnable {\n@Override\npublic void run() {\n// Throws a checked exception.\nint num = Integer.parseInt(\"Baldomero\");\n// It will never be executed.\nSystem.out.printf(\"Number: %d \", num);\n}\n}\n</code></pre> <p>Si ejecutamos el programa veremos que se captura la excepci\u00f3n y se muestran datos sobre ella</p>"},{"location":"bloque_v/tema_22/page-1/","title":"1 Introducci\u00f3n a la Sincronizaci\u00f3n","text":""},{"location":"bloque_v/tema_22/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>Uno de los problemas m\u00e1s frecuentes cuando realizamos programaci\u00f3n concurrente consiste en el hecho de que varios hilos compartan un recurso. Es bastante usual que distintos hilos deban leer y escribir sobre las mismas variables de datos o tener acceso al mismo fichero o conexi\u00f3n de base de datos. Estos recursos compartidos pueden provocar errores de acceso o de inconsistencia de datos, por lo que tendremos que implementar mecanismos que los eviten.</p> <p>Para ayudar a los programadores a implementar secciones cr\u00edticas, Java (y la mayor\u00eda de los lenguajes de programaci\u00f3n) ofrecen distintos mecanismos de sincronizaci\u00f3n. En general, llamamos mecanismo de sincronizaci\u00f3n a la palabra reservada o clase que es usada para controlar el flujo de hilos cooperativos en base a su estado (ver).</p> <p>Los distintos mecanismos de sincronizaci\u00f3n incorporan una o varias de las siguientes capacidades:</p> <ul> <li>Visibilidad: Asegura que los cambios realizados por un hilo en un recurso compartido son visibles para el siguiente hilo que acceda a dicho recurso. Si no se cumpliera este requisito, los hilos podr\u00edan estar trabajando con valores inconsistentes para el recurso. La visibilidad no est\u00e1 implementada por defecto en los tipos primitivos de Java.</li> <li>Exclusi\u00f3n mutua: Permite el acceso concurrente y la actuaci\u00f3n de datos compartidos mutables sin producir race conditions. Para ello se implementa el concepto de secci\u00f3n cr\u00edtica, que consiste en un bloque de c\u00f3digo que accede a un recurso compartido y que no puede ser ejecutado a la vez por m\u00e1s de un hilo en un momento dado. Cuando un hilo quiere acceso a una secci\u00f3n cr\u00edtica, usa el mecanismo de sincronizaci\u00f3n para averiguar si ya hay alg\u00fan otro hilo ejecut\u00e1ndola. Si la secci\u00f3n cr\u00edtica est\u00e1 disponible, el hilo entra en ella. Si, por el contrario, ya est\u00e1 ocupada, el hilo es suspendido por el mecanismo de sincronizaci\u00f3n hasta que el hilo que la est\u00e1 ocupando termine la ejecuci\u00f3n de la secci\u00f3n cr\u00edtica. Cuando haya m\u00e1s de un hilo esperando para poder ejecutar la misma secci\u00f3n cr\u00edtica, la JVM elige uno de ellos, y el resto esperan su turno.</li> <li>Coordinaci\u00f3n: Asegura que el c\u00f3digo se ejecuta en el orden correcto, en el momento correcto y bajo las condiciones necesarias.</li> <li>Barrera de sincronizaci\u00f3n: Aseguro que varios hilos deben suspender su ejecuci\u00f3n en un determinado punto de sincronizaci\u00f3n (barrera) hasta que todos los hilos hayan llegado a dicho punto.</li> </ul>"},{"location":"bloque_v/tema_22/page-10/","title":"10 StampedLock","text":""},{"location":"bloque_v/tema_22/page-10/#introduccion","title":"Introducci\u00f3n","text":"<p>En las versiones Java 5 y Java 6 el empleo de la clase <code>ReentrantReadWriteLock</code> presenta el problema de que puede producir inanici\u00f3n (starvation) en alguno de los hilos, es decir, que sea tan frecuente los accesos (por ejemplo de lectura) que un hilo que quiera acceder al recurso para escritura no puedan adquirir nunca el cerrojo. Incluso si no se produce inanici\u00f3n, es probable que la adquisici\u00f3n del cerrojo para escritura se retrase en demas\u00eda.</p> <p>StampedLock</p> <p>Cerrojo que proporciona un modo de adquisici\u00f3n optimista para lectura, adem\u00e1s de los modos pesimistas para lectura y para escritura</p> <p>Para solucionar este problema, Java 8 trajo consigo un nuevo tipo de cerrojo denominado <code>StampedLock</code>, que supone en la pr\u00e1ctica una mejora de las prestaciones proporcionadas por <code>ReentrantReadWriteLock</code>, siendo m\u00e1s eficiente y escalable. Una de dichas prestaciones adicionales es la posibilidad de llevar a cabo una adquisici\u00f3n optimista del cerrojo de lectura, algo que no es posible mediante <code>ReentrantReadWriteLock</code> que siempre emplea una adquisici\u00f3n pesimista.</p> <p>Cabe destacar que la clase <code>StampedLock</code> no implementa las interfaces <code>Lock</code> ni <code>ReadWriteLock</code>, aunque proporciona una funcionalidad muy similar e incluso adicional a esta \u00faltima.</p> <p>Al igual que en el caso de <code>synchronized</code> y los cerrojos \u00edntr\u00ednsecos, y de la interfaz <code>Lock</code>, al usar <code>StampedLock</code> no s\u00f3lo aseguramos la atomicidad sino tambi\u00e9n la visibilidad, por lo que no ser\u00e1 necesario definir las variables protegidas con <code>volatile</code>.</p> <p>La clase <code>StampedLock</code> proporciona tres modos distintos de obtener el cerrojo. En todos estos modos el hecho de la adquisici\u00f3n del cerrojo se retorna de forma de un valor de tipo <code>long</code> conocido como stamp (sello, ticket), de ah\u00ed el nombre de la clase. Dicho stamp contiene internamente un n\u00famero de versi\u00f3n y un modo de adquisici\u00f3n. Veamos los distintos modos de adquisici\u00f3n:</p>"},{"location":"bloque_v/tema_22/page-10/#adquisicion-pesimista-para-escritura","title":"Adquisici\u00f3n pesimista para escritura","text":"<p>Se realiza mediante el m\u00e9todo <code>writeLock()</code>. Si un hilo obtiene el cerrojo para escritura, ning\u00fan otro hilo puede obtener el cerrojo para escritura ni para lectura. Si otro hilo ya hab\u00eda adquirido el cerrojo para escritura, el hilo que llama a <code>writeLock()</code> ser\u00e1 suspendido. Retorna un stamp.</p> <p>Podemos usar tambi\u00e9n el m\u00e9todo <code>tryWriteLock()</code>, que trata de adquirir el cerrojo para escritura y si no puede NO suspende al hilo desde el que se llama, sino que simplemente retorna inmediatamente un sello (stamp) con valor <code>0</code>. Tambi\u00e9n tenemos la versi\u00f3n sobrecargada <code>tryWriteLock(long time, TimeUnit unit)</code>, que trata de adquirir el cerrojo para escritura y si no puede porque otro hilo ya lo ha adquirido para escritura, suspende al hilo desde el que se llama como m\u00e1ximo el tiempo indicado. Si transcurrido dicho tiempo no se ha conseguido adquirir el cerrojo para escritura, retorna un sello con el valor 0.</p> <p>En este caso podemos afirmar que este modo es pesimista, en el sentido de que se asume que puede haber dos hilos intentando acceder para escritura, por lo que se proh\u00edbe que esto suceda, haciendo que la adquisici\u00f3n sea en exclusiva. Como vemos, su funcionamiento es similar al del cerrojo de escritura de la clase <code>ReentrantReadWriteLock</code>.</p>"},{"location":"bloque_v/tema_22/page-10/#adquisicion-pesimista-para-lectura","title":"Adquisici\u00f3n pesimista para lectura","text":"<p>Se realiza mediante el m\u00e9todo <code>readLock()</code> o <code>readLockInterruptibly()</code>. Si un hilo obtiene el cerrojo para lectura, ning\u00fan otro hilo puede obtener el cerrojo para escritura, pero s\u00ed para lectura. Si otro hilo ya hab\u00eda adquirido el cerrojo para escritura, el hilo que llama a <code>readLock()</code> ser\u00e1 suspendido. Estos m\u00e9todos retornan un stamp.</p> <p>Podemos usar tambi\u00e9n el m\u00e9todo <code>tryReadLock()</code>, que trata de adquirir el cerrojo para lectura, y si no puede porque otro hilo ya lo ha adquirido para escritura, NO suspende al hilo desde el que se llama, sino que simplemente retorna inmediatamente un sello (stamp) con valor 0.</p> <p>Tambi\u00e9n tenemos la versi\u00f3n sobrecargada <code>tryReadLock(long time, TimeUnit unit)</code>, que trata de adquirir el cerrojo para lectura. Si no puede porque otro hilo ya lo ha adquirido para escritura, suspende al hilo desde el que se llama como m\u00e1ximo el tiempo indicado. Si transcurrido dicho tiempo no se ha conseguido adquirir el cerrojo para lectura, retorna un sello (stamp) con el valor 0.</p> <p>En este caso podemos afirmar que este modo es pesimista, en el sentido de que se asume que adem\u00e1s del hilo que quiere acceder al cerrojo para lectura puede haber otro hilo intentando acceder para escritura, por lo que se proh\u00edbe que esto suceda, haciendo que la adquisici\u00f3n del cerrojo para escritura s\u00f3lo pueda realizarse cuando se libere el cerrojo de lectura. Como vemos, su funcionamiento es similar al del cerrojo de lectura de la clase <code>ReentrantReadWriteLock</code>.</p>"},{"location":"bloque_v/tema_22/page-10/#adquisicion-optimista-para-lectura","title":"Adquisici\u00f3n optimista para lectura","text":"<p>Se realiza mediante el m\u00e9todo <code>tryOptimisticRead()</code>, que, independientemente de si el cerrojo est\u00e1 realmente disponible, nunca suspende al hilo llamador, sino que retorna un stamp. Si el cerrojo no est\u00e1 disponible porque ha sido adquirido para escritura, el valor retornado ser\u00e1 0.</p> <p>Al obtener optimistamente el cerrojo de lectura, NO se bloquea la adquisici\u00f3n inmediata del cerrojo para para escritura por parte de otro hilo, a diferencia de c\u00f3mo ocurre con <code>readLock()</code>.</p> <p>Se dice que la adquisici\u00f3n es optimista porque estamos presuponiendo que es muy improbable que alg\u00fan otro hilo obtenga el cerrojo para escritura, por lo que ni siquiera nos suspendemos. Si realmente el acceso para escritura es muy poco frecuente entonces el rendimiento de este tipo de adquisici\u00f3n es muy alto, ya que el hilo nunca ser\u00e1 suspendido. Por este motivo, la adquisici\u00f3n optimista es especialmente eficiente si vamos a ejecutar un fragmento de c\u00f3digo corto que s\u00f3lo realice lectura de valores. Cuando m\u00e1s largo sea el fragmento de c\u00f3digo m\u00e1s probable sea que el stamp deje de ser v\u00e1lido porque otro hilo haya adquirido el cerrojo para escritura.</p> <p>Sin embargo, debemos ser conscientes de que, aunque improbable, es posible que despu\u00e9s de haber adquirido el cerrojo para lectura de forma optimista, otro hilo adquiera el cerrojo para escritura, y lo podr\u00e1 hacer sin problema, dado que el acceso optimista para lectura no lo evita. En este caso, el stamp que recibi\u00f3 el hilo como respuesta a la llamada al m\u00e9todo <code>tryOptimisticRead()</code> deja de ser v\u00e1lido y seguir\u00e1 siendo inv\u00e1lido incluso despu\u00e9s de que el hilo libere el cerrojo de escritura.</p> <p>Por este motivo, despu\u00e9s de haber obtenido el cerrojo para lectura de forma optimista ser\u00e1 necesario que validemos el stamp recibido para comprobar que realmente podemos leer del recurso con seguridad. Para ello llamaremos al m\u00e9todo <code>validate(stamp)</code>, que retornar\u00e1 <code>true</code> s\u00f3lo si el stamp sigue siendo v\u00e1lido (seguro de usar), es decir, s\u00f3lo si no se ha adquirido el cerrojo de escritura desde el momento en el que obtuvo dicho stamp.</p> <p>Si tenemos \u00e9xito con el m\u00e9todo <code>validate()</code>, la sobrecarga por sincronizaci\u00f3n habr\u00e1 sido pr\u00e1cticamente inexistente, y ni siquiera deberemos liberar ning\u00fan cerrojo, porque de hecho no se habr\u00e1 obtenido realmente.</p> <p>Si no hemos tenido \u00e9xito con el m\u00e9todo <code>validate()</code> lo normal es que realicemos un segundo intento de adquisici\u00f3n del cerrojo para lectura, pero esta vez de forma pesimista, para asegurarnos de no tener que intentarlo una tercera vez.</p> <p>Como vemos, la adquisici\u00f3n optimista para lectura es inherentemente fr\u00e1gil y obliga a que validemos el stamp despu\u00e9s de haber realizado la lectura.</p> <p>Pese a tener algunas similitudes, la clase <code>StampedLock</code> NO es una extensi\u00f3n de la clase <code>ReentrantReadWriteLock</code>, y de hecho NO implementa la interfaces <code>Lock</code> ni <code>ReadWriteLock</code>. A diferencia de <code>ReadWriteLock</code>, todos los m\u00e9todos de adquisici\u00f3n del cerrojo en la clase <code>StampedLock</code> retornan un stamp, que puede ser usado posteriormente para otras operaciones, como liberar el cerrojo, comprobar si el acceso al cerrojo es a\u00fan v\u00e1lido o convertir el modo de acceso al mismo.</p> <p>Para liberar un cerrojo adquirido previamente de forma pesimista usaremos alguno de los siguientes m\u00e9todos, dependiendo del modo para el que se adquiri\u00f3 el cerrojo. Todos ellos reciben el stamp que representa la adquisici\u00f3n del cerrojo:</p> <ul> <li><code>unlockWrite(stamp)</code>: Para liberar un cerrojo que se adquiri\u00f3 para escritura de forma pesimista.</li> <li><code>unlockRead(stamp)</code>: Para liberar un cerrojo que se adquiri\u00f3 para lectura de forma pesimista.</li> <li><code>unlock(stamp)</code>: Para liberar un cerrojo independientemente del modo para el que se adquiri\u00f3. Es menos eficiente que los anteriores.</li> </ul> <p>Normalmente la llamada a estos m\u00e9todos se incluir\u00e1 dentro de la rama <code>finally</code> de un <code>try finally</code>, para asegurarnos de que el cerrojo es liberado independientemente de si se produce un error o no.</p> <p>Si hemos adquirido el cerrojo para lectura de forma optimista y ha sido validado entonces no ser\u00e1 necesario liberarlo, ya que realmente no se habr\u00e1 suspendido a ning\u00fan hilo.</p> <p>Veamos un ejemplo:</p> <pre><code>class Point {\n// Variables a proteger.\nprivate double x, y;\n// Lock que las protege\nprivate final StampedLock stampedLock = new StampedLock();\n// Desplaza el punto\nvoid move(double deltaX, double deltaY) {\n// Adquiere el cerrojo para escritura (pesimista).\nlong stamp = stampedLock.writeLock();\ntry {\nx += deltaX;\ny += deltaY;\n} finally {\n// Lo libera.\nstampedLock.unlockWrite(stamp);\n}\n}\n// Retorna la distancia respecto al origen.\ndouble distanceFromOrigin() {\n// Obtiene el cerrojo para lectura de forma optimista.\nlong stamp = stampedLock.tryOptimisticRead();\n// Se leen los valores.\ndouble currentX = x, currentY = y;\n// Debe validar que el stamp es a\u00fan v\u00e1lido antes de retornar, porque\n// puede que otro hilo haya llamado mientras tanto al m\u00f3todo move()\n// y haya obtenido el cerrojo para escritura, cambiando los valores\n// x e y.\nif (!stampedLock.validate(stamp)) {\n// Si no es v\u00e1lido debemos volver a leer los valores, pero antes\n// obtenemos el cerrojo de lectura de forma optimista.\nstamp = stampedLock.readLock();\ntry {\ncurrentX = x;\ncurrentY = y;\n} finally {\n// Se libera el cerrojo de lectura.\nstampedLock.unlockRead(stamp);\n}\n}\n// Si hemos llegado aqu\u00ed, es porque hemos leido los valores, ya haya\n// sido de forma optimista o pesimista.\nreturn Math.sqrt(currentX * currentX + currentY * currentY);\n}\n}\n</code></pre> <p>Otra diferencia importante de <code>StampedLock</code> respecto a <code>ReentrantReadWriteLock</code>, que s\u00f3lo permit\u00eda lock downgrading es que <code>StampedLock</code> proporciona m\u00e9todos espec\u00edficos para convertir el modo de adquisici\u00f3n de un cerrojo ya adquirido previamente, permitiendo realizar lock upgrading, es decir cambiar a un modo de adquisici\u00f3n m\u00e1s severo:</p> <ul> <li><code>tryConvertToWriteLock(stamp)</code>: Trata de adquirir para escritura un cerrojo adquirido anteriormente en otro modo. Este m\u00e9todo nunca suspender\u00e1 al hilo llamador, sino que retornar\u00e1 un nuevo stamp, cuyo valor ser\u00e1 0 si la conversi\u00f3n no es posible porque otro hilo ya haya adquirido el cerrojo para escritura.</li> <li><code>tryConvertToReadLock(stamp)</code>: Trata de adquirir para lectura un cerrojo adquirido anteriormente en otro modo. Este m\u00e9todo nunca suspender\u00e1 al hilo llamador, sino que retornar\u00e1 un nuevo stamp, cuyo valor ser\u00e1 0 si la conversi\u00f3n no es posible porque otro hilo ya haya adquirido el cerrojo para escritura.</li> <li><code>tryConvertToOptmisticRead(stamp)</code>: Trata de adquirir optimistamente para lectura un cerrojo adquirido anteriormente en otro modo. Este m\u00e9todo nunca suspender\u00e1 al hilo llamador, sino que retornar\u00e1 un nuevo stamp.</li> </ul> <p>Continuemos el ejemplo anterior, a\u00f1adiendo a la clase <code>Point</code> un nuevo m\u00e9todo en el que primero se adquiere el cerrojo para lectura de forma pesimista y una vez le\u00eddos los datos se trata de convertirlo a un cerrojo de escritura pesimista para poder modificarlos:</p> <pre><code>class Point {\nprivate double x, y;\nprivate final StampedLock stampedLock = new StampedLock();\n// ...\n// Mueve el punto s\u00f3lo si \u00e9ste se encuentra en el origen de coordenadas.\nvoid moveIfAtOrigin(double newX, double newY) { // Obtenemos el cerrojo para lectura de forma pesimista.\n// (tambi\u00e9n lo podr\u00edamos haber hecho de forma optimista).\nlong stamp = stampedLock.readLock();\ntry {\n// Solo intentamos cambiar los datos si el punto se encuentre en el origen\n// de coordenadas. \n// Debe ser un bucle para que volvamos a intentarlo si no\n// ha sido posible la conversi\u00f3n, teniendo en cuenta que otro hilo ha podido\n// cambiar la posici\u00f3n del punto entre las sentencias de las l\u00edneas 39 y 40.\nwhile (x == 0.0 &amp;&amp; y == 0.0) {\n// Intentamos convertir el cerrojo a uno para escritura.\nlong writeStamp = stampedLock.tryConvertToWriteLock(stamp);\nif (writeStamp != 0L) {\n// Si ha sido posible la conversi\u00f3n del cerrojo, se guarda\n// como stamp para luego liberarlo.\nstamp = writeStamp;\n// Se cambia la posici\u00f3n del punto.\nx = newX;\ny = newY;\n// Para que se salga del bucle una vez hechos los cambios.\nbreak;\n}\nelse {\n// Si no ha sido posible la conversi\u00f3n del cerrojo, se libera\n// el cerrojo de lectura y se obtiene el de escritura de forma \n// pesimista.\n// Al tratarse de un bucle while, se vovler\u00e1 a entrar y la conversi\u00f3n\n// obligatoriamente ser\u00e1 posible, ya que estaremos convirtiendo en \n// cerrojo de escrtura uno que ya lo es, por lo que finalmente\n// se cambiar\u00e1 al punto de posici\u00f3n, saliendo del bucle.\nstampedLock.unlockRead(stamp);\nstamp = stampedLock.writeLock();\n}\n}\n} finally {\n// Se libera el cerrojo (el \u00faltimo obtenido, proveniente de la conversi\u00f3n).\nstampedLock.unlock(stamp);\n}\n}\n}\n</code></pre> <p>La clase <code>StampedLock</code> tambi\u00e9n nos proporciona una serie de m\u00e9todos informativos, como <code>isReadLocked()</code> y <code>isWriteLocked()</code>, que retornan si el cerrojo ha sido adquirido, respectivamente, en modo de lectura pesimista o en modo de escritura pesimista.</p> <p>Debemos tener en cuenta que <code>StampedLock</code> no implementa la caracter\u00edstica de readquisici\u00f3n autom\u00e1tica (reentrant) del cerrojo. Cada llamada a un m\u00e9todo de adquisici\u00f3n del cerrojo retorna un nuevo stamp y puede bloquear el hilo incluso aunque \u00e9ste ya hubiera adquirido el cerrojo, por lo que debemos prestar especial atenci\u00f3n a no incurrir en deadlocks.</p> <p>Otra diferencia importante es que <code>StampedLock</code> no tiene noci\u00f3n de propiedad del cerrojo, lo que implica que puede ser adquirido por un hilo y liberado por otro, siempre y cuando se use el mismo stamp.</p> <p>Adem\u00e1s, no se puede aplicar un modo justo (fair mode), porque no se implementa ninguna pol\u00edtica sobre cu\u00e1l es el hilo que debe obtener el cerrojo a continuaci\u00f3n.</p> <p>Por lo general, el empleo de <code>StampedLock</code> hace que nuestro c\u00f3digo se ejecute m\u00e1s r\u00e1pido que si usamos <code>ReentrantReadWriteLock</code>, aunque no en todas las ocasiones. Por otra parte, el uso de cerrojos de lectura y escritura frente al uso de <code>ReentrantLock</code> s\u00f3lo mejora el rendimiento cuando el n\u00famero de hilos lectores es muy superior al de hilos escritores, las operaciones de lectura no sean triviales y dispongamos de bastantes n\u00facleos de procesamiento.</p>"},{"location":"bloque_v/tema_22/page-10/#proyecto-stampedlock","title":"Proyecto StampedLock","text":"<p>En este proyecto crearemos una aplicaci\u00f3n que simula la venta de un producto. Por un lado existir\u00e1n clientes que consultar\u00e1n el precio del producto y por otra parte un hilo que representa la tienda vendedora puede cambiar el precio del producto. Usaremos la clase <code>StampedLock</code> para permitir que varios clientes consulten el precio a la vez de manera optimista.</p> MainProductClientShop <pre><code>import java.util.concurrent.TimeUnit;\npublic class Main {\npublic static void main(String[] args) throws InterruptedException {\nProduct product = new Product(100.00);\nThread[] clientThreads= new Thread[4];\nfor (int i = 0; i &lt; 4; i++) {\nclientThreads[i] = new Thread(new Client(product), \"Client \" + i);\n}\nThread shopThread = new Thread(new Shop(product), \"Shop\");\nshopThread.start();\n// Wait to start some clients.\nTimeUnit.SECONDS.sleep(1);\nfor (int i = 0; i &lt; 2; i++){\nclientThreads[i].start();\n}\n// Wait to start the rest of the clients.\nTimeUnit.SECONDS.sleep(3);\nfor (int i = 2; i &lt; 4; i++){\nclientThreads[i].start();\n}\n// Try to check a client thread blocks the shop thread but not other clients threads.\n// Try to check the shop thread blocks client threads.\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.StampedLock;\npublic class Product {\nprivate double price;\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nprivate final StampedLock stampedLock = new StampedLock();\npublic Product(double initialPrice) {\nthis.price = initialPrice;\n}\npublic double getPrice() throws InterruptedException {\nlong stamp = stampedLock.tryOptimisticRead();\nreturn consultPrice(stamp);\n}\nprivate double consultPrice(long stamp) throws InterruptedException {\nSystem.out.printf(\"%s -&gt; %s - Consulting price...\\n\",\nLocalTime.now().format(dateTimeFormatter),\nThread.currentThread().getName());\nTimeUnit.SECONDS.sleep(3);\ndouble value = price;\nif (!stampedLock.validate(stamp)) {\nstamp = stampedLock.readLock();\ntry {\nvalue = price;\n} finally {\nstampedLock.unlockRead(stamp);\n}\n}\nSystem.out.printf(\"%s -&gt; %s - Price: %.2f\\n\",\nLocalTime.now().format(dateTimeFormatter),\nThread.currentThread().getName(),\nvalue);\nreturn value;\n}\npublic void updatePrice(double increment) throws InterruptedException {\nlong stamp = stampedLock.writeLock();\ntry {\nincrementPrice(increment);\n} finally {\nstampedLock.unlock(stamp);\n}\n}\nprivate void incrementPrice(double increment) throws InterruptedException {\nSystem.out.printf(\"%s -&gt; %s - Updating price...\\n\",\nLocalTime.now().format(dateTimeFormatter),\nThread.currentThread().getName());\nTimeUnit.SECONDS.sleep(1);\nthis.price += increment;\nSystem.out.printf(\"%s -&gt; %s - New price: %.2f\\n\",\nLocalTime.now().format(dateTimeFormatter),\nThread.currentThread().getName(),\nthis.price);\n}\n}\n</code></pre> <pre><code>import java.util.Objects;\npublic class Client implements Runnable {\nprivate final Product product;\npublic Client(Product product) {\nObjects.requireNonNull(product);\nthis.product = product;\n}\n@Override\npublic void run() {\ntry {\n@SuppressWarnings(\"unused\")\ndouble price = product.getPrice();\n} catch (InterruptedException e) {\nSystem.out.println(\"I've been interrupted while consulting the price\");\n}\n}\n}\n</code></pre> <pre><code>import java.util.Objects;\nimport java.util.concurrent.TimeUnit;\npublic class Shop implements Runnable {\nprivate final Product product;\npublic Shop(Product product) {\nObjects.requireNonNull(product);\nthis.product = product;\n}\n@Override\npublic void run() {\nfor (int i = 0; i &lt; 3; i++) {\ntry {\nproduct.updatePrice(20.0);\nTimeUnit.SECONDS.sleep(2);\n} catch (InterruptedException e) {\nSystem.out.println(\"I've been interrupted while updating the price\");\nreturn;\n}\n}\n}\n}\n</code></pre> <p>Si ejecutamos la aplicaci\u00f3n veremos que varios lectores pueden estar leyendo a la vez, pero s\u00f3lo uno puede estar escribiendo. Cambia los tiempos de los <code>sleep()</code> para tratar que un hilo cliente bloquee a un hilo tienda pero no a otros hilos cliente. Despu\u00e9s trata de que un hilo tienda bloquee a hilos clientes.</p>"},{"location":"bloque_v/tema_22/page-11/","title":"11 Semaphore","text":""},{"location":"bloque_v/tema_22/page-11/#semaphore","title":"Semaphore","text":"<p>Un sem\u00e1foro es un contador que protege el acceso a uno o m\u00e1s recursos compartidos. El concepto de sem\u00e1foro fue introducido por Edsger Dijkstra en 1965.</p> <p>Cuando un hilo quiere acceder a uno de estos recursos compartidos, primero debe adquirir (acquire) el sem\u00e1foro. Si el contador interno del sem\u00e1foro es mayor que 0, el sem\u00e1foro decrementa el contador interno y permite el acceso del hilo al recurso compartido. Un valor mayor que 0 en el contador significa que hay recursos libres que pueden ser usados, por lo que el hilo puede acceder y obtener uno de ellos.</p> <p>Si, por el contrario, el contador interno del sem\u00e1foro es 0, el sem\u00e1foro suspende el hilo solicitante hasta que el contador sea mayor que 0. Un valor de 0 en el contador interno del sem\u00e1foro significa que todos los recursos compartidos est\u00e1n siendo usados por otros hilos, por lo que el hilo solicitante debe esperar hasta que se libere uno de ellos.</p> <p>Cuando un hilo termina de usar un recurso compartido, debe liberar el sem\u00e1foro, de manera que su contador interno se incrementa y se reactiva autom\u00e1ticamente alguno de los hilos que estaban esperando uno de los recursos compartidos gestionados por el sem\u00e1foro.</p> <p>Los sem\u00e1foros cuyo valor inicial del contador es 1 reciben el nombre de sem\u00e1foros binarios.</p> <p>La clase <code>Semaphore</code> nos permite crear sem\u00e1foros en nuestras aplicaciones. El constructor de dicha clase recibe el valor inicial para el contador interno del sem\u00e1foro, que deber\u00eda corresponder, en principio, al n\u00famero de instancias del recursos compartido controlados por el sem\u00e1foro. Curiosamente, Java permite proporcionar un valor que no tenga mucho sentido, como por ejemplo <code>-1</code>.</p> <p>Opcionalmente, el constructor puede recibir adem\u00e1s un valor booleano (fair) para indicar si queremos que funcione el modo justo, es decir, que los hilos sean reactivados en el orden en que solicitaron el sem\u00e1foro cuando haya disponible de nuevo un recurso compartido. Por defecto el valor de dicho par\u00e1metro es <code>false</code>. Al usar sem\u00e1foros con el modo justo activado evitaremos la inanici\u00f3n, aunque su rendimiento es peor que el de los sem\u00e1foros no justos.</p> <p>La clase <code>Semaphore</code> nos proporciona distintas formas de adquirir el sem\u00e1foro. La primera de ellas es mediante el m\u00e9todo <code>acquire()</code>, que como la mayor\u00eda de los m\u00e9todos bloqueantes, lanzar\u00e1 la excepci\u00f3n <code>InterruptedException</code> si el hilo es interrumpido mientras se encuentra esperando a poder acceder a alguna instancia del recurso, o si ya hab\u00eda sido marcado para interrupci\u00f3n antes de ejecutar <code>acquire()</code>, reactivando el hilo inmediatamente.</p> <p>Si queremos que no se lance la excepci\u00f3n en dichos casos, deberemos usar el m\u00e9todo <code>acquireUninterruptedly()</code>, que no hace caso al estado de interrupci\u00f3n del hilo.</p> <p>Una tercera forma de adquirir el sem\u00e1foro es mediante el m\u00e9todo <code>tryAcquire()</code>, que no suspende el hilo si no es posible adquirir el sem\u00e1foro, retornando simplemente un valor booleano indicativo de si se ha adquirido o no. Debemos tener en cuenta que a <code>tryAcquire()</code> no le afecta el hecho de que el sem\u00e1foro est\u00e1 funcionando en modo justo o no y puede que el hilo adquiera el sem\u00e1foro si justo en el momento en que llama a <code>tryAcquire()</code> otro hilo libera un recurso, incluso aunque hubiera otros hilos esperando adquirir el sem\u00e1foro.</p> <p>Una cuarta forma de adquirir el sem\u00e1foro es mediante el m\u00e9todo <code>tryAcquire(timeout, timeUnit)</code>, al que pasamos el tiempo m\u00e1ximo que el hilo podr\u00e1 ser suspendido en espera de adquirir el sem\u00e1foro, transcurrido el cu\u00e1l es reactivado inmediatamente, retornando el m\u00e9todo el valor <code>false</code>. Si el hilo consigue adquirir el sem\u00e1foro el m\u00e9todo retornar\u00e1 <code>true</code>. Al igual que con <code>acquire()</code>, si el hilo es interrumpido mientras est\u00e1 suspendido tratando de adquirir el sem\u00e1foro o ya hab\u00eda sido marcado para interrupci\u00f3n antes de llamar al m\u00e9todo <code>tryAcquire(time, timeUnit)</code>, se lanzar\u00e1 la excepci\u00f3n <code>InterruptedException</code> y se reactivar\u00e1 inmediatamente el hilo. Sin embargo, y a diferencia de lo que ocurre con <code>tryAcquire()</code>, <code>tryAcquire(timeout, timeUnit)</code> s\u00ed respeta el hecho de que el sem\u00e1foro sea justo, incluso aunque establezcamos <code>tryAcquire(0, TimeUnit.SECOND</code>).</p> <p>Para liberar un sem\u00e1foro haremos uso del m\u00e9todo <code>release()</code>, que normalmente se incluye dentro de <code>finally</code> para asegurarnos de que la instancia del recurso gestionada por el sem\u00e1foro es liberada independientemente de que se produzca una excepci\u00f3n o no despu\u00e9s de haberlo adquirido, de esta manera que dicha instancia pueda ser m\u00e1s adelante usada por otro hilo.</p> <pre><code>semaphore.acquire();\ntry {\n// ...\n} finally {\nsemaphore.release();\n}\n</code></pre> <p>Debemos tener en cuenta que la llamada a <code>release()</code> incrementar\u00e1 el contador interno del sem\u00e1foro, incluso si \u00e9ste no ha sido adquirido nunca. Esto quiere decir, impl\u00edcitamente, que el valor recibido por el constructor de la clase <code>Semaphore</code> NO corresponde al n\u00famero m\u00e1ximo de instancias gestionadas por el sem\u00e1foro, sino tan s\u00f3lo al valor inicial del contador interno. Como consecuencia es posible que err\u00f3neamente estemos realizando <code>release()</code> cuando no debi\u00e9ramos, ya que Java no nos avisar\u00e1, por lo que hay que ser especialmente cuidadoso.</p> <p>Un aspecto curioso es que Java no exige que el hilo que libere el sem\u00e1foro sea el mismo que lo adquiri\u00f3, aunque lo habitual ser\u00e1 que sea el mismo hilo.</p> <p>Los m\u00e9todos <code>acquire(permits)</code>, <code>tryAcquire(permits)</code>, <code>acquireUninterruptedly(permits)</code> y <code>release(permits)</code> est\u00e1n sobrecargados, de manera que pueden recibir un par\u00e1metro entero que represente el n\u00famero de instancias del recurso compartido que se quieren adquirir o liberar, que corresponder\u00e1 al valor que se decrementar\u00e1 o incrementar\u00e1 el contador interno del sem\u00e1foro. Es preferible usar esta opci\u00f3n frente a hacer un bucle que llame repetidamente a la versi\u00f3n sin par\u00e1metro. Debemos tener en cuenta que en el caso de la adquisici\u00f3n, el hilo ser\u00e1 suspendido hasta que est\u00e9n disponibles al menos el n\u00famero de recursos compartidos pasados en dicho argumento. Todos estos m\u00e9todos lanzar\u00e1n la excepci\u00f3n <code>IllegalArgumentException</code> si se pasa un n\u00famero negativo para el par\u00e1metro <code>permits</code>.</p> <p>Un aspecto muy importante de los sem\u00e1foros es que implementan la sincronizaci\u00f3n necesaria para restringir el acceso al conjunto de instancias del recurso, de decir, que gestionan el n\u00famero de instancias disponibles, pero no qu\u00e9 instancias est\u00e1n disponibles, es decir, que no asegura la consistencia del conjunto de recursos en s\u00ed, para lo que deberemos usar posteriormente alg\u00fan otro sistema que asegure la atomicidad, como por ejemplo un <code>ReentrantLock</code>. Este aspecto es estudiado con m\u00e1s detenimiento en el proyecto Semaphore mostrado a continuaci\u00f3n.</p> <p>La clase <code>Semaphore</code> proporciona una serie de m\u00e9todos informativos que permite realizar un seguimiento de su funcionamiento:</p> <ul> <li><code>availablePermits()</code>: Retorna el n\u00famero de recursos disponibles del sem\u00e1foro (cu\u00e1ntos hilos m\u00e1s podr\u00e1n pasar).</li> <li><code>hasQueuedThreads()</code>: Retorna <code>true</code> si hay hilos esperando un recurso protegido por el sem\u00e1foro.</li> <li><code>getQueueLength()</code>: Retorna el n\u00famero de hilos esperando un recurso protegido por el sem\u00e1foro.</li> <li><code>isFair()</code>: Retorna <code>true</code> si el sem\u00e1foro tiene activado el modo justo, lo que indica que cuando debe seleccionarse uno de los hilos esperando por un recurso, se elige el que lleve m\u00e1s tiempo esperando.</li> </ul> <p>Los sem\u00e1foros son un tipo de sincronizador que no s\u00f3lo sirven para controlar el acceso a un n\u00famero de recursos, sino que adem\u00e1s permiten la coordinaci\u00f3n de hilos, aunque no son muy \u00fatiles cuando la sincronizaci\u00f3n es compleja. En estos casos es mejor usar objetos <code>Condition</code>.</p> <p>En general los sem\u00e1foros son m\u00e1s flexibles que los cerrojos, por dos motivos principales, porque nos permiten adquirir y liberar varias instancias del recurso protegido, y porque se pueden adquirir y liberar las instancias desde hilos distintos (not fully bracket). Dicha flexibilidad supone sin embargo un coste adicional en rendimiento.</p>"},{"location":"bloque_v/tema_22/page-11/#proyecto-semaphore","title":"Proyecto Semaphore","text":"<p>En este proyecto vamos a simular una cola de impresi\u00f3n \u00fanica que recibe los documentos a imprimir por parte de los distintos hilos y que los imprime en alguna de las tres impresoras disponibles. Para gestionar el acceso a las impresoras usaremos un sem\u00e1foro. Para comprobar la disponibilidad de las impresoras usaremos un array protegido con un objeto <code>ReentrantLock</code>.</p> MainPrintingQueuePrinterPrintJob <pre><code>public class Main {\npublic static void main (String[] args){\nPrintingQueue printingQueue = new PrintingQueue(3);\nThread[] printJobThreads = new Thread[10];\nfor (int i = 0; i &lt; 10; i++) {\nprintJobThreads[i] = new Thread(new PrintJob(printingQueue, \"Document #\" + i), \"Print job #\" + i);\n}\nfor (int i = 0; i &lt; 10; i++) {\nprintJobThreads[i].start();\n}\n}\n}\n</code></pre> <pre><code>import java.util.concurrent.Semaphore;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\npublic class PrintingQueue {\nprivate static final int NO_PRINTER = -1;\nprivate final Semaphore semaphore;\nprivate final Lock reentrantLock = new ReentrantLock(true);\nprivate final Printer[] printers;\nprivate final boolean[] printerAvailable;\npublic PrintingQueue(int numberOfPrinters) {\nsemaphore = new Semaphore(numberOfPrinters, true);\nprinters = new Printer[numberOfPrinters];\nprinterAvailable = new boolean[numberOfPrinters];\nfor (int i = 0; i &lt; numberOfPrinters; i++) {\nprinters[i] = new Printer(i);\nprinterAvailable[i] = true;\n}\n}\npublic void addDocument(String document) throws InterruptedException {\ntry {\nsemaphore.acquire();\nint printerNumber = selectPrinter();\nif (printerNumber != NO_PRINTER) {\nprinters[printerNumber].printDocument(document);\n}\nprinterAvailable[printerNumber] = true;\n} finally {\n// This is called even if an exception is thrown.\nsemaphore.release();\n}\n}\nprivate int selectPrinter() {\nreentrantLock.lock();\ntry {\nfor (int i = 0; i &lt; printers.length; i++) {\nif (printerAvailable[i]) {\nprinterAvailable[i] = false;\nreturn i;\n}\n}\n} finally {\nreentrantLock.unlock();\n}\nreturn NO_PRINTER;\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Random;\nimport java.util.concurrent.TimeUnit;\npublic class Printer {\nprivate final int printerNumber;\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nprivate final Random random = new Random();\npublic Printer(int printerNumber) {\nthis.printerNumber = printerNumber;\n}\npublic void printDocument(String document) throws InterruptedException {\nSystem.out.printf(\"%s -&gt; %s: Document printing started on printer %d\\n\",\nLocalTime.now().format(dateTimeFormatter),\nThread.currentThread().getName(), printerNumber);\nSystem.out.printf(\"%s -&gt; %s: %s...\\n\",\nLocalTime.now().format(dateTimeFormatter),\nThread.currentThread().getName(), document);\nTimeUnit.SECONDS.sleep(random.nextInt(5));\nSystem.out.printf(\"%s -&gt; %s: Printing finished on printer %d\\n\",\nLocalTime.now().format(dateTimeFormatter),\nThread.currentThread().getName(), printerNumber);\n}\n}\n</code></pre> <pre><code>import java.util.Objects;\npublic class PrintJob implements Runnable {\nprivate final PrintingQueue printingQueue;\nprivate final String document;\npublic PrintJob(PrintingQueue printingQueue, String document) {\nObjects.requireNonNull(printingQueue);\nObjects.requireNonNull(document);\nthis.printingQueue = printingQueue;\nthis.document = document;\n}\n@Override\npublic void run() {\ntry {\nprintingQueue.addDocument(document);\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s -&gt; I've been interrupted while printing document\\n\",\nThread.currentThread().getName());\n}\n}\n}\n</code></pre> <p>Si ejecutamos el programa veremos que s\u00f3lo tres documentos se pueden estar imprimiendo a la vez, y que se har\u00e1 en impresoras distintas.</p>"},{"location":"bloque_v/tema_22/page-12/","title":"Ejercicios","text":"Proyecto SynchronizedMethod <p>Realiza un proyecto Java haciendo uso de hilos (Runnables) y haciendo uso de los m\u00e9todos sincronizados, en el que se quiere calcular las veces que las caras de un dado son lanzadas al azar. Ten en cuenta que un dado puede ser lanzado un m\u00e1ximo de 10.000 veces por hilo, crea un programa en Java en el que se cree 3 hilos que lancen dados, almacenando el n\u00famero de veces que se obtiene cada una de las caras de un dado (1-6).</p> <p>Adem\u00e1s, deber\u00e1s mostrar:</p> <ul> <li>El resultado obtenido por cada vez que se lanza el dado, mostrando tambi\u00e9n desde que hilo ha sido lanzado.</li> <li>El resultado total de cada una de las caras del dado.</li> <li>El n\u00famero total de tiradas en todos los hilos.</li> </ul> Proyecto SynchronizedStatement <p>Realiza un proyecto en Java con las mismas condiciones que el anterior, pero teniendo en haciendo uso de los bloques sincronizados.</p> Proyecto WaitNotify <p>En una fiesta de cumplea\u00f1os de Julian, tres amigos le han preparado una fiesta sorpresa, Luc\u00eda, Marcos y Andrea. Tras cenar, han decidido hacer una cadena humana para limpiar los platos de la mesa (en total 10 platos sucios). </p> <p>Luc\u00eda se encargar\u00e1 de fregar los platos sucios. Cada vez que limpia un plato lo a\u00f1ade a la pila de platos para secar y suele tardar entre 2 y 4 segundos en fregarlos. Marcos es el encargado de secar los platos fregados y depositarlos en la pila de platos a guardar y suele tardar entre 1 y 3 segundos en secarlos. Por \u00faltimo lugar, Andrea se encargar\u00e1 de obtener los platos fregados y almacenarlos en la alacena, y suele tardar entre 1 y 2 segundos.</p> <p>Solo tiene 60 segundos para limpiar los platos antes de ser interrumpidos por Juli\u00e1n para cantarles cumplea\u00f1os feliz.</p> <p>Crea una simulaci\u00f3n en Java, haciendo uso de los bloques o m\u00e9todos sincronizados y de los m\u00e9todos de espera y notificaci\u00f3n necesarios.</p> Proyecto ReentrantLockCondition <p>Realiza la misma aplicaci\u00f3n del ejercicio anterior pero haciendo uso de la interfaz <code>Condition</code> y la clase <code>ReentrantLock</code></p> Proyecto ReentrantReadWriteLock <p>Un almac\u00e9n se encarga de almacenar diferentes productos. Un consultor es un encargado de un tienda que puede comprobar los stock de los productos que hay en el almac\u00e9n, mientras que un Actualizador es una persona encargada de a\u00f1adir los productos al almac\u00e9n. </p> <p>Crea una aplicaci\u00f3n en Java haciendo uso de hilos y de la clase <code>ReentrantReadWriteLock</code> en la cual permitan consultar de forma concurrente a 3 tiendas diferentes, as\u00ed como poder actualizar los productos.</p> <p>Ten en cuenta lo siguiente:</p> <ul> <li>La consulta del stock de un producto tarda 2 segundos en realizarse.</li> <li>A\u00f1adir un producto al almac\u00e9n es una operaci\u00f3n que dura 3 segundos.</li> <li>El actualizador se encargar\u00e1 de a\u00f1adir productos durante un minuto, luego de \u00e9ste ser\u00e1 interrumpido.</li> <li>Las tiendas podr\u00e1n consultar el n\u00famero de productos que hay en stock hasta pasado veinte segundos posteriores al interrumpirse el actualizador. </li> </ul> Proyecto StampedLock <p>Realiza el proyecto anterior haciendo uso del mecanismo <code>StampedLock</code>.</p> Proyecto Semaphore <p>En un Supermercado hay cuatro cajas diferentes para que los clientes puedan ir pasando por cada una de las cajas a realizar las compras pertinentes. Cada una de las cajas est\u00e1 identificada con un n\u00famero. Cuando una caja no est\u00e1 disponible el cliente deber\u00e1 esperar a que alguna se quede disponible. La acci\u00f3n de comprar de un cliente puede llegar a durar entre 1 y 4 segundos. </p> <p>Se desea crear una aplicaci\u00f3n que simule la situaci\u00f3n en que 50 clientes entran al supermercado a realizar las compras. Mostrando cada instante del cliente, desde que entra al supermercado y realiza la comprar, hasta que la finaliza y abandona. Hay que tener en cuenta que un cliente tarda entre 1 y 3 segundos en realizar la compra. Utiliza el <code>Semaphore</code> para el acceso a las cajas, y un <code>Lock</code> para la comprobar su disponibilidad.</p>"},{"location":"bloque_v/tema_22/page-2/","title":"2 Volatile","text":""},{"location":"bloque_v/tema_22/page-2/#volatile","title":"Volatile","text":"<p>Podemos pensar en las variables volatile como un mecanismo de sincronizaci\u00f3n ligero, ya que requiere poco c\u00f3digo y suponen muy poca sobrecarga en tiempo de ejecuci\u00f3n. El inconveniente es que s\u00f3lo pueden ser usados para resolver un cierto tipo de problemas concretos, un subconjunto de los que pueden ser resueltos con otros tipos de mecanismos de sincronizaci\u00f3n.</p> <p>El motivo es que, de las capacidades descritas en el apartado anterior, las variables volatile s\u00f3lo cumplen con la primera de ellas, la visibilidad, pero no con el resto.</p> <p>Los hilos que accedan a una variables volatile compartida siempre ver\u00e1n autom\u00e1ticamente su \u00faltimo valor actualizado, por lo que cumple con la propiedad de visibilidad. Sin embargo, al no cumplir con la exclusi\u00f3n mutua, las variables volatile s\u00f3lo pueden ser usadas como mecanismo de sincronizaci\u00f3n en aquellos casos en los que no existen restricciones respecto a varias variables a la vez o entre el valor actual de la variable y sus valores futuros.</p> <p> Figura 1 - Conflicto de escritura-lectura</p> <p>Para definir una variable como volatile simplemente debemos comenzar su declaraci\u00f3n con la palabra reservada <code>volatile</code>, como en:</p> <pre><code>public volatile int value;\n</code></pre> <p>En general, para poder utilizar una variable volatile de manera thread-safe, deben cumplirse las siguientes dos condiciones:</p> <ul> <li>Que la escritura de la variable no dependa de su valor actual. El motivo es que el declarar la variable como <code>volatile</code> NO asegura que la operaci\u00f3n de lectura del valor actual m\u00e1s el de escritura del nuevo valor se vaya a realizar de forma at\u00f3mica. Por tanto no deben utilizarse para, por ejemplo, contadores, a no ser que estemos seguros de que s\u00f3lo va a ser modificada por un \u00fanico hilo y que el resto de hilos tan s\u00f3lo va a leer su valor.</li> <li>Que la variable no participa en invariantes (condici\u00f3n que no var\u00eda) con otras variables. El motivo es que si la variable en cuesti\u00f3n, por ejemplo <code>extremo_inferior</code> est\u00e1 relacionada con otra, por ejemplo <code>extremo_superior</code> mediante alguna condici\u00f3n que no puede variar, <code>extremo_inferior &lt;= extremo_superior</code>, definir ambas variables como <code>volatile</code> NO asegura que se siga cumpliendo el invariante, al no realizarse la comprobaci\u00f3n del invariante y la escritura de forma at\u00f3mica.</li> </ul> <p>El uso de variables volatile tiene, sin embargo, una serie de ventajas:</p> <ul> <li>Son mucho m\u00e1s f\u00e1ciles de usar.</li> <li>Como no bloquean los hilos que acceden al recurso, es menos probable que se produzcan problemas de escalabilidad al aumentar el n\u00famero de hilos.</li> <li>Cuando los accesos al recurso es mayoritariamente para lectura y no para escritura, suponen una mejora de rendimiento frente a otros sistemas de sincronizaci\u00f3n.</li> </ul> <p>Algunos casos t\u00edpicos en los que podemos usar variables <code>volatile</code> frente a otros mecanismos de sincronizaci\u00f3n son los siguientes:</p> <ul> <li>Con variables que act\u00faan como flags de estado.</li> <li>Con variables que s\u00f3lo se actualizan una \u00fanica vez.</li> <li>Con variables que son actualizadas desde un \u00fanico hilo, como por ejemplo un hilo en segundo plano que almacena el valor de la temperatura actual y el resto de hilos simplemente leen dicha variable.</li> </ul> <p>Para saber m\u00e1s</p> <ul> <li>http://www.ibm.com/developerworks/java/library/j-jtp06197/index.html</li> <li>https://dzone.com/articles/java-volatile-keyword-0</li> <li>https://www.youtube.com/watch?v=8oafyFFqp38</li> </ul>"},{"location":"bloque_v/tema_22/page-2/#proyecto-volatile","title":"Proyecto Volatile","text":"<p>En este proyecto vamos a realizar un programa que demuestra un caso extremo en el que es necesario el empleo de la palabra reservada <code>volatile</code>. El hilo principal define una variable accesible desde otros dos hilos: uno que simplemente detecta cambios en el valor de la variable y otro cuyo cometido es producir dichos cambios.</p> <pre><code>public class Main {\n// Try and remove volatile keyword and run. See what happens.\nprivate static volatile int value = 0;\npublic static void main(String[] args) {\nnew ChangeListener().start();\nnew ChangeMaker().start();\n}\nstatic class ChangeListener extends Thread {\n@Override\npublic void run() {\nint localValue = value;\n// JVM can't update cache value of \"value\" variable, because is occupied\n// permforming the infinite loop. So we have to define the variable as \n// volatile\n// to ensure it's cache value is updated when updated from another thread.\nwhile (localValue &lt; 5) {\nif (localValue != value) {\nSystem.out.printf(\"Detected new value: %d\\n\", value);\nlocalValue = value;\n}\n}\n}\n}\nstatic class ChangeMaker extends Thread {\n@Override\npublic void run() {\nint localValue = value;\nwhile (value &lt; 5) {\nSystem.out.printf(\"Incrementing value to %d\\n\", localValue + 1);\nvalue = ++localValue;\ntry {\nThread.sleep(500);\n} catch (InterruptedException e) {\nreturn;\n}\n}\n}\n}\n}\n</code></pre> <p>Si ejecutamos el programa veremos que uno de hilos secundarios detecta los cambios producidos en la variable desde el otro hilo secundario. Sin embargo, si quitamos la palabra reservada <code>volatile</code> en la definici\u00f3n de la variable, el hilo secundario no ser\u00e1 capaz de detectar los cambios que produzca el otro hilo sobre la variable.</p>"},{"location":"bloque_v/tema_22/page-3/","title":"3 Cerrojo Intr\u00ednseco","text":""},{"location":"bloque_v/tema_22/page-3/#introduccion","title":"Introducci\u00f3n","text":"<p>La exclusi\u00f3n mutua no est\u00e1 implementada por defecto en los tipos de Java, por lo que tendremos que usar alg\u00fan mecanismo de sincronizaci\u00f3n.</p> <p>El mecanismo b\u00e1sico de sincronizaci\u00f3n para conseguir la exclusi\u00f3n mutua en Java se construye en base a un entidad interna conocida como monitor, cerrojo monitor o cerrojo intr\u00ednseco.</p> <p>Monitor, cerrojo monitor, cerrojo intr\u00ednseco o mutex</p> <p>Objeto que act\u00faa como vigilante de que el acceso a una determinada secci\u00f3n cr\u00edtica se realice en exclusi\u00f3n mutua</p> <p>Los monitores act\u00faan sobre dos propiedades de los mecanismos de sincronizaci\u00f3n: por un lado hacer cumplir el acceso exclusivo al estado de un objeto, es decir, la exclusi\u00f3n mutua, y, por otro lado, asegurar la visibilidad de los cambios en todos los hilos, garantizando que determinadas acciones se llevan a cabo antes que otras (lo que se conoce como relaciones happens-before). Por este motivo, si el acceso a un determinado campo est\u00e1 siendo protegido con un cerrojo intr\u00ednseco no ser\u00e1 necesario definir dicho campo como <code>volatile</code>, debido a que cuando un hilo trata de liberar el cerrojo intr\u00ednseco, los valores cacheados son escritos en las variables compartidas en memoria principal, lo que implica que el siguiente hilo que adquiera el mismo cerrojo siempre ver\u00e1 los valores m\u00e1s recientes de dichas variables compartidas.</p> <p>Cada objeto tiene un cerrojo intr\u00ednseco asociado a \u00e9l. Por convenci\u00f3n, un hilo que necesita acceso exclusivo y consistente a los campos de un objeto tiene que adquirir el bloqueo intr\u00ednseco del objeto antes de acceder a ellos, y luego liberar el cerrojo intr\u00ednseco cuando haya terminado de usarlos. Se dice que un hilo es propietario (est\u00e1n en posesi\u00f3n) del cerrojo intr\u00ednseco en el periodo de tiempo transcurrido desde que adquiere el cerrojo hasta que lo libera. Mientras un hilo posea un el cerrojo intr\u00ednseco, ning\u00fan otro hilo puede adquirir el mismo cerrojo, y al intentarlo quedar\u00e1 bloqueado hasta que el cerrojo haya sido liberado por el hilo que lo pose\u00eda.</p> <p>Cuando un hilo libera un cerrojo intr\u00ednseco, el sistema garantiza que dicha liberaci\u00f3n se realizar\u00e1 antes de que otro hilo que estuviera bloqueado en espera del cerrojo lo adquiera (esta es la relaci\u00f3n happens-before que comentamos anteriormente).</p> <p>En Java, podemos usar la palabra reservada <code>synchronized</code> para controlar el acceso concurrente a un objeto. Cuando declaramos un m\u00e9todo de una clase como <code>synchronized</code>, estamos indicando que cuando un hilo llame a dicho m\u00e9todo en un determinado objeto autom\u00e1ticamente tratar\u00e1 de adquirir el cerrojo intr\u00ednseco asociado a dicho objeto antes de poder ejecutarlo, y que liberar\u00e1 autom\u00e1ticamente el cerrojo intr\u00ednseco cuando se termine de ejecutar el m\u00e9todo, tanto si ha retornado satisfactoriamente como si se ha producido una excepci\u00f3n.</p> <pre><code>public class Account {\n// ...\npublic synchronized void deposit(float amount) {\n// ...\n}\n}\n</code></pre> <p>En la pr\u00e1ctica esto implica que cuando un hilo est\u00e9 ejecutando un m\u00e9todo declarado como <code>synchronized</code> de un determinado objeto, ning\u00fan otro hilo podr\u00e1 ejecutar dicho m\u00e9todo ni cualquier otro m\u00e9todo <code>synchronized</code> del mismo objeto, siendo bloqueado hasta que el hilo que est\u00e1 en posesi\u00f3n del cerrojo intr\u00ednseco asociado al objeto lo libere.</p> <p>M\u00e9todo synchronized</p> <p>Al definir un m\u00e9todo como <code>synchronized</code> convertimos su c\u00f3digo en una secci\u00f3n cr\u00edtica accesible bajo exclusi\u00f3n mutua</p> <p>La definici\u00f3n de m\u00e9todos <code>synchronized</code> no afecta a la ejecuci\u00f3n de otros m\u00e9todos de la clase que no se hayan definido como <code>synchronized</code>, ya que para ejecutar \u00e9stos no es necesario adquirir el cerrojo intr\u00ednseco.</p> <p>De esta manera, al usar la palabra reservada <code>synchronized</code> en la definici\u00f3n de un m\u00e9todo, convertimos su c\u00f3digo en una secci\u00f3n cr\u00edtica accesible bajo exclusi\u00f3n mutua.</p> <p>El cerrojo intr\u00ednseco recibe tambi\u00e9n el nombre de monitor, ya que act\u00faa como \"vigilante\" que monitorea el acceso a sus m\u00e9todos, y recibe el adjetivo de intr\u00ednseco porque no es ning\u00fan elemento externo el que act\u00faa como cerrojo, sino un elemento interno asociado a \u00e9l.</p> <p> Figura 2 - Conflicto de escritura</p> <p>El comportamiento de la palabra reservada <code>synchronized</code> es ligeramente diferente si el m\u00e9todo es adem\u00e1s est\u00e1tico (<code>static</code>), ya que en dicho caso, el cerrojo intr\u00ednseco estar\u00e1 asociada a la clase y no a una determinada instancia (objeto) de la clase. En ese caso, cuando un hijo ejecute un m\u00e9todo <code>static synchronized</code> de la clase estar\u00e1 adquiriendo el cerrojo intr\u00ednseco asociado al objeto <code>Class</code> correspondiente a la clase. Por tanto, el acceso a los campos <code>static synchronized</code> es controlado por un cerrojo intr\u00ednseco distinto al cerrojo intr\u00ednseco asociado a cada instancia de la clase.</p> <p>Como consecuencia, dos hilos no podr\u00e1n estar ejecutando a la vez el mismo m\u00e9todo <code>static synchronized</code> o dos m\u00e9todos distintos <code>static synchronized</code> de la misma clase, pero s\u00ed es posible que un hilo est\u00e9 ejecutando un m\u00e9todo <code>static synchronized</code> de una clase y otro hilo est\u00e9 ejecutando un m\u00e9todo <code>synchronized</code> de una instancia de esa misma clase.</p> <p>Debemos tener en cuenta que el uso de m\u00e9todos sincronizados penaliza en cierta manera el rendimiento de la aplicaci\u00f3n, ya que si tenemos varios hilos llamando a un m\u00e9todo sincronizado, s\u00f3lo uno de ellos podr\u00e1 estar ejecut\u00e1ndolo en un momento dado y los dem\u00e1s tendr\u00e1n que esperar, aumentando el tiempo real de ejecuci\u00f3n de la aplicaci\u00f3n. As\u00ed que la palabra reservada <code>synchronized</code> debe ser usada solamente con m\u00e9todos que sepamos que van a ser llamados por varios hilos y que adem\u00e1s modifiquen datos compartidos por varios hilos en un entorno concurrente.</p> <p>Debemos tener en cuenta que si dentro de un m\u00e9todo <code>synchronized</code> se llama al m\u00e9todo <code>Thread.sleep(milliseconds)</code>, el hilo sigue siendo poseedor del cerrojo intr\u00ednseco durante el tiempo que est\u00e1 durmiendo.</p> <p>En Java, la capacidad de tener asociado un cerrojo intr\u00ednseco y por tanto tener m\u00e9todos <code>synchronized</code> est\u00e1 incorporada en la clase <code>Object</code>, por lo que es heredada por todas las clases, lo que implica que cualquier objeto Java tiene asociado un objeto monitor y contener m\u00e9todos <code>synchronized</code>.</p> <p>Sincronizaci\u00f3n reentrante</p> <p>Si un hilo ejecutando un m\u00e9todo <code>synchronized</code> de un objeto llama internamente a otro m\u00e9todo <code>synchronized</code> del mismo objeto, no tiene que adquirir de nuevo el cerrojo, porque ya lo tiene</p> <p>Una de las caracter\u00edsticas de la sincronizaci\u00f3n mediante la palabra reservada <code>synchronized</code> es que un hilo puede adquirir m\u00e1s de una vez un cerrojo intr\u00ednseco que ya posee. Esta casu\u00edstica se produce en situaciones en las que un c\u00f3digo protegido mediante <code>synchronized</code> invoca directamente o indirectamente a otro m\u00e9todo (o a \u00e9l mismo recursivamente) que tambi\u00e9n contiene c\u00f3digo <code>synchronized</code> protegido por el mismo cerrojo intr\u00ednseco. Se dice por tanto que se trata de una sincronizaci\u00f3n reentrante (reentrant synchronization), con objeto de que un hilo no se bloquee a s\u00ed mismo.</p> <p>Si queremos saber si el hilo en el que nos encontramos tiene adquirido en un momento dado el cerrojo intr\u00ednseco asociado a un determinado objeto, podemos llamar al m\u00e9todo est\u00e1tico <code>Thread.holdsLock(object)</code>.</p> <p>Debemos tener en cuenta que el cerrojo intr\u00ednseco no proporciona ninguna garant\u00eda respecto al orden en el que los hilos que est\u00e9n esperando adquirir el cerrojo finalmente lo adquieren. Esto implica que, te\u00f3ricamente, existe riesgo de que alg\u00fan hilo sufra de inanici\u00f3n, si el cerrojo intr\u00ednseco es adquirido constantemente por otros hilos, lo que no permite a nuestro hilo adquirirlo nunca. La soluci\u00f3n a este problema consiste en usar la clase <code>ReentrantLock</code> y su modo justo (fair mode), como estudiaremos dentro de poco.</p> <p>Info</p> <p>Para saber m\u00e1s visite https://docs.oracle.com/javase/tutorial/essential/concurrency/locksync.php</p>"},{"location":"bloque_v/tema_22/page-3/#proyecto-synchronizedmethod","title":"Proyecto SynchronizedMethod","text":"<p>En este proyecto vamos a realizar un programa que simule una cuenta bancaria en la que un hilo que realiza una serie de abonos a la cuenta y otro hilo realiza una serie de cargos. Debemos recordar que el orden de ejecuci\u00f3n de hilos no est\u00e1 garantizado por la JVM, por lo que podr\u00edan intercalarse las operaciones de manera que el saldo no reflejara el valor correcto. Usaremos m\u00e9todos <code>synchronized</code> para asegurar que el saldo final es el correcto incluso aunque se pretendieran realizar ambas operaciones simult\u00e1neamente.</p> MainAccountAccountConsumerAccountSaver <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\npublic class Main {\npublic static void main(String[] args) throws InterruptedException {\nDateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nAccount account = new Account(0);\n// Show initial balance.\nSystem.out.printf(\"%s -&gt; Initial balance: %.2f\u20ac\\n\",\nLocalTime.now().format(dateTimeFormatter), account.getBalance());\n// Start both saver and consumer threads. Both threads share the same account.\nThread saverThread = new Thread(new AccountSaver(account));\nsaverThread.start();\nThread consumerThread = new Thread(new AccountConsumer(account));\nconsumerThread.start();\n// Wait for both threads to finish.\nsaverThread.join();\nconsumerThread.join();\n// Show final balance.\nSystem.out.printf(\"\\n%s -&gt; Final balance: %.2f\u20ac\\n\",\nLocalTime.now().format(dateTimeFormatter), account.getBalance());\n}\n}\n</code></pre> <pre><code>public class Account {\nprivate float balance;\npublic Account(float initialBalance) {\nthis.balance = initialBalance;\n}\npublic float getBalance() {\nreturn balance;\n}\n// Try and remove synchronized keyword and see what happens.\npublic synchronized void deposit(float amount) {\nbalance += amount;\nSystem.out.print(\".\");\n}\n// Try and remove synchronized keyword and see what happens.\npublic synchronized void debit(float amount) {\nbalance -= amount;\nSystem.out.print(\".\");\n}\n}\n</code></pre> <pre><code>public class AccountConsumer implements Runnable {\nprivate final Account account;\npublic AccountConsumer(Account account) {\nthis.account = account;\n}\n@Override\npublic void run() {\nfor (int i = 0; i &lt; 10000; i++) {\naccount.debit(5);\n}\n}\n}\n</code></pre> <pre><code>public class AccountSaver implements Runnable {\nprivate final Account account;\npublic AccountSaver(Account account) {\nthis.account = account;\n}\n@Override\npublic void run() {\nfor (int i = 0; i &lt; 10000; i++) {\naccount.deposit(10);\n}\n}\n}\n</code></pre> <p>Si ejecutamos el programa veremos que el saldo final es el esperado, es decir <code>50000</code>, pero si no usamos la palabra reservada <code>synchronized</code> en los m\u00e9todos de la clase <code>Account</code> el resultado ser\u00e1 erroneo y diferente en cada ejecuci\u00f3n.</p>"},{"location":"bloque_v/tema_22/page-3/#sentencias-synchronized","title":"Sentencias Synchronized","text":"<p>Con objeto de minimizar en la medida de lo posible la penalizaci\u00f3n en tiempo de ejecuci\u00f3n que pueden producir los m\u00e9todos sincronizados, podemos emplear la t\u00e9cnica consistente en proteger el acceso al bloque de c\u00f3digo conflictivo del m\u00e9todo en vez de al m\u00e9todo completo.</p> <p>Para ello usaremos la palabra reservada <code>synchronized</code> para crear un bloque con acceso protegido que contenga exclusivamente las l\u00edneas de c\u00f3digo del m\u00e9todo que accedan a datos compartidos, dejando el resto de operaciones fuera del bloque, lo que mejora el rendimiento de la aplicaci\u00f3n. El objetivo es hacer la secci\u00f3n cr\u00edtica lo m\u00e1s peque\u00f1a posible.</p> <p>Cuando se usa la palabra reservada <code>synchronized</code> de esta manera la sintaxis que emplea es distinta a cuando se usa en la definici\u00f3n de un m\u00e9todo. De hecho, le tendremos que pasar como par\u00e1metro a <code>synchronized</code> la referencia a un objeto, cuyo cerrojo intr\u00ednseco ser\u00e1 usado para proteger el c\u00f3digo contenido en el bloque.</p> <pre><code>synchronized (intrinsicLockSupplierObject) {\n// Critic section with mutual exclusion.\n// ...\n}\n</code></pre> <p>Antes de ejecutar la primera l\u00ednea de c\u00f3digo del bloque <code>synchronized</code> el hilo que lo ejecuta deber\u00e1 adquirir el cerrojo intr\u00ednseco asociado al objeto proporcionado. Cuando se termine de ejecutar la \u00faltima l\u00ednea de c\u00f3digo del bloque se liberar\u00e1 el cerrojo intr\u00ednseco. Como consecuencia, la JVM garantiza que en un momento dado un \u00fanico hilo podr\u00e1 tener acceso a cualquiera de los bloques de c\u00f3digo protegidos por el cerrojo intr\u00ednseco de dicho objeto.</p> <p>Normalmente usaremos como cerrojo intr\u00ednseco el asociado al propio objeto en el que est\u00e1 ejecutando el m\u00e9todo, para lo que emplearemos la palabra clave <code>this</code>, aunque en realidad podr\u00edamos haber especificado cualquier otro objeto, incluso uno creado expresamente para ello, como veremos m\u00e1s adelante.</p> <pre><code>synchronized (this) {\n// Critic section with mutual exclusion.\n// ...\n}\n</code></pre>"},{"location":"bloque_v/tema_22/page-3/#proyecto-synchronizedstatement","title":"Proyecto SynchronizedStatement","text":"<p>Consiste en el mismo proyecto del enunciado anterior, pero sincronizando solamente el bloque correspondiente a la secci\u00f3n cr\u00edtica en vez de el m\u00e9todo completo.</p> MainAccountAccountConsumerAccountSaver <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\npublic class Main {\npublic static void main(String[] args) throws InterruptedException {\nDateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nAccount account = new Account(0);\n// Show initial balance.\nSystem.out.printf(\"%s -&gt; Initial balance: %.2f\u20ac\\n\",\nLocalTime.now().format(dateTimeFormatter), account.getBalance());\n// Start both saver and consumer threads. Both threads share the same account.\nThread saverThread = new Thread(new AccountSaver(account));\nsaverThread.start();\nThread consumerThread = new Thread(new AccountConsumer(account));\nconsumerThread.start();\n// Wait for both threads to finish.\nsaverThread.join();\nconsumerThread.join();\n// Show final balance.\nSystem.out.printf(\"\\n%s -&gt; Final balance: %.2f\u20ac\\n\",\nLocalTime.now().format(dateTimeFormatter), account.getBalance());\n}\n}\n</code></pre> <pre><code>public class Account {\nprivate float balance;\npublic Account(float initialBalance) {\nthis.balance = initialBalance;\n}\npublic float getBalance() {\nreturn balance;\n}\npublic void deposit(float amount) {\nsynchronized (this) {\nbalance += amount;\n}\n}\npublic void debit(int amount) {\nsynchronized (this) {\nbalance -= amount;\n}\n}\n}\n</code></pre> <pre><code>public class AccountConsumer implements Runnable {\nprivate final Account account;\npublic AccountConsumer(Account account) {\nthis.account = account;\n}\n@Override\npublic void run() {\nfor (int i = 0; i &lt; 10000; i++) {\naccount.debit(5);\n}\n}\n}\n</code></pre> <pre><code>public class AccountSaver implements Runnable {\nprivate final Account account;\npublic AccountSaver(Account account) {\nthis.account = account;\n}\n@Override\npublic void run() {\nfor (int i = 0; i &lt; 10000; i++) {\naccount.deposit(10);\n}\n}\n}\n</code></pre> <p>Si ejecutamos el programa veremos que el saldo final es el esperado, es decir <code>50000</code>, pero si no usamos la palabra reservada <code>synchronized</code> en los m\u00e9todos de la clase <code>Account</code> el resultado ser\u00e1 erroneo y diferente en cada ejecuci\u00f3n.</p>"},{"location":"bloque_v/tema_22/page-4/","title":"4 Sincronizaci\u00f3n independiente (lock Striping)","text":""},{"location":"bloque_v/tema_22/page-4/#sincronizacion-independiente-lock-striping","title":"Sincronizaci\u00f3n independiente (lock Striping)","text":"<p>Cuando usamos la palabra reservada <code>synchronized</code> para proteger un bloque de c\u00f3digo, debemos pasarle como par\u00e1metro la referencia a un objeto cuyo cerrojo intr\u00ednseco act\u00faa como protector. Normalmente, usaremos como par\u00e1metro el propio objeto que est\u00e1 ejecutando el m\u00e9todo, por lo que usaremos la palabra reservada <code>this</code>. Sin embargo, hay ocasiones en las que es conveniente usar como par\u00e1metro un objeto independiente creado espec\u00edficamente para este prop\u00f3sito.</p> <p>De esta manera conseguiremos restringir lo m\u00e1ximo posible el coste de ejecuci\u00f3n asociado a la sincronizaci\u00f3n, haciendo que un cerrojo intr\u00ednseco proteja un \u00fanico campo, lo que se conoce como fine-grained synchronization (sincronizaci\u00f3n de grano fino) o lock striping (cinta de cerrojos).</p> <p>Por ejemplo, supongamos que tenemos en una misma clase dos atributos cuyo acceso debe ser protegido, pero el hecho de que un hilo est\u00e9 accediendo a uno de los atributos no implica problema alguno sobre que otro hilo est\u00e9 accediendo al otro atributo. En este caso no deber\u00edamos usar el mismo objeto (por ejemplo this) para proteger ambos atributos, sino que cada atributo deber\u00eda ser protegido por un objeto distinto, que crearemos expresamente para dicho cometido. Esto permitir\u00e1 que un hilo pueda acceder al primer atributo mientras que otro hilo acceda al segundo, ya que est\u00e1n protegidos por objetos distintos.</p>"},{"location":"bloque_v/tema_22/page-4/#proyecto-movietheater","title":"Proyecto MovieTheater","text":"<p>En este proyecto desarrollaremos una aplicaci\u00f3n que simula el funcionamiento de un cine con dos taquillas y la cola de venta de entradas de cada una de ellas para las salas del cine. El n\u00famero de butacas de cada sala debe ser sincronizada de manera independiente, para que mientras se est\u00e9 realizando la venta de entradas a una sala en una taquilla, en la otra taquilla se puedan vender entradas para otra sala.</p> MainCinemaBoxOffice1QueueBoxOffice2Queue <pre><code>public class Main {\nprivate static final int BOX_OFFICES = 2;\nprivate static final int MOVIE_THEATER_CAPACITY = 20;\npublic static void main(String[] args) {\nint movieTheaters[] = { MOVIE_THEATER_CAPACITY, MOVIE_THEATER_CAPACITY };\nCinema cinema = new Cinema(movieTheaters, BOX_OFFICES);\nThread boxOffice1Thread = new Thread(new BoxOffice1Queue(cinema, 1), \"Box office 1\");\nThread boxOffice2Thread = new Thread(new BoxOffice2Queue(cinema, 2), \"Box office 2\");\nboxOffice1Thread.start();\nboxOffice2Thread.start();\ntry {\nboxOffice1Thread.join();\nboxOffice2Thread.join();\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\nfor (int i = 0; i &lt; movieTheaters.length; i++) {\nSystem.out.printf(\"Movie theater %d: %d seats available\\n\", i + 1,\ncinema.getAvailableSeats(i));\n}\n}\n}\n</code></pre> <pre><code>public class Cinema {\nprivate final int[] movieTheatersCapacity;\nprivate final int boxOffices;\nprivate int[] availableSeats;\nprivate Object[] movieTheatersLock;\npublic Cinema(int[] movieTheatersCapacity, int boxOffices) {\nif (movieTheatersCapacity == null || boxOffices &lt; 1) {\nthrow new IllegalArgumentException();\n}\nfor (int aMovieTheatersCapacity : movieTheatersCapacity) {\nif (aMovieTheatersCapacity &lt; 1) {\nthrow new IllegalArgumentException();\n}\n}\nthis.movieTheatersCapacity = movieTheatersCapacity;\nthis.boxOffices = boxOffices;\navailableSeats = new int[movieTheatersCapacity.length];\nmovieTheatersLock = new Object[movieTheatersCapacity.length];\nfor (int i = 0; i &lt; movieTheatersCapacity.length; i++) {\nmovieTheatersLock[i] = new Object();\n}\nresetMovieTheaters();\n}\nprivate void resetMovieTheaters() {\nSystem.arraycopy(movieTheatersCapacity, 0, availableSeats, 0, movieTheatersCapacity.length);\n}\npublic boolean buyTickets(int boxOffice, int movieTheater, int tickets) throws InterruptedException {\nif (movieTheater &lt; 0 || movieTheater &gt;= availableSeats.length || tickets &lt; 1 || boxOffice &lt; 1 || boxOffice &gt; boxOffices) {\nthrow new IllegalArgumentException();\n}\nsynchronized (movieTheatersLock[movieTheater]) {\nif (tickets &lt;= availableSeats[movieTheater]) {\navailableSeats[movieTheater] -= tickets;\nSystem.out.printf(\n\"Movie theater #%d: %d tickets bought in box office #%d\\n\", movieTheater,\ntickets, boxOffice);\nThread.sleep(1000);\nreturn true;\n} else {\nreturn false;\n}\n}\n}\npublic boolean returnTickets(int boxOffice, int movieTheater, int tickets) {\nif (movieTheater &lt; 0 || movieTheater &gt;= availableSeats.length || tickets &lt; 1 || boxOffice &lt; 1 || boxOffice &gt; boxOffices) {\nthrow new IllegalArgumentException();\n}\nsynchronized (movieTheatersLock[movieTheater]) {\nif (tickets + availableSeats[movieTheater] &lt;= movieTheatersCapacity[movieTheater]) {\navailableSeats[movieTheater] += tickets;\nSystem.out.printf(\n\"Movie theater %d: %d tickets returned in box office #%d\\n\", movieTheater, tickets, boxOffice);\ntry {\nThread.sleep(1000);\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\nreturn true;\n} else {\nreturn false;\n}\n}\n}\npublic int getAvailableSeats(int movieTheater) {\nreturn availableSeats[movieTheater];\n}\n}\n</code></pre> <pre><code>public class BoxOffice1Queue implements Runnable {\nprivate final Cinema cinema;\nprivate final int boxOffice;\npublic BoxOffice1Queue(Cinema cinema, int boxOffice) {\nthis.cinema = cinema;\nthis.boxOffice = boxOffice;\n}\n@Override\npublic void run() {\ntry {\ncinema.buyTickets(boxOffice, 0, 3);\ncinema.buyTickets(boxOffice,0, 2);\ncinema.buyTickets(boxOffice,1, 2);\ncinema.returnTickets(boxOffice,0, 3);\ncinema.buyTickets(boxOffice,0, 5);\ncinema.buyTickets(boxOffice,1, 2);\ncinema.buyTickets(boxOffice,1, 2);\ncinema.buyTickets(boxOffice,1, 2);\n} catch (InterruptedException e) {\nSystem.out.println(\"Box office #%d has been closed\");\n}\n}\n}\n</code></pre> <pre><code>public class BoxOffice2Queue implements Runnable {\nprivate final Cinema cinema;\nprivate final int boxOffice;\npublic BoxOffice2Queue(Cinema cinema, int boxOffice) {\nthis.cinema = cinema;\nthis.boxOffice = boxOffice;\n}\n@Override\npublic void run() {\ntry {\ncinema.buyTickets(boxOffice, 1, 2);\ncinema.buyTickets(boxOffice, 1, 4);\ncinema.buyTickets(boxOffice, 0, 2);\ncinema.buyTickets(boxOffice, 0, 1);\ncinema.returnTickets(boxOffice, 1, 2);\ncinema.buyTickets(boxOffice, 0, 3);\ncinema.buyTickets(boxOffice, 1, 2);\ncinema.buyTickets(boxOffice, 0, 2);\n} catch (InterruptedException e) {\nSystem.out.printf(\"Box office #%d has been closed\\n\", boxOffice);\n}\n}\n}\n</code></pre> <p>Si ejecutamos el programa veremos que a la vez se pueden estar comprando entradas para distintas salas del cine.</p>"},{"location":"bloque_v/tema_22/page-5/","title":"5 Busy Waiting","text":""},{"location":"bloque_v/tema_22/page-5/#espera-activa-busy-waiting","title":"Espera activa (busy-waiting)","text":"<p>En programaci\u00f3n, se denomina espera activa o espera ocupada a una t\u00e9cnica donde un hilo o proceso repetidamente verifica una condici\u00f3n, tal como esperar una entrada de teclado o si se da una determinada condici\u00f3n, en espera de que \u00e9sta se de en alg\u00fan momento futuro debido a la acci\u00f3n de alg\u00fan otro hilo.</p> <p>Como norma general, debe ser evitada, ya que consume tiempo de CPU sin realizar ninguna operaci\u00f3n, ya que el hilo que se encuentra en la espera activa no cede el procesador.</p> <p>Info</p> <p>Con el m\u00e9todo <code>Thread.onSpinWait()</code> de Java 9 indicamos al sistema que estamos en espera activa</p> <p>El m\u00e9todo est\u00e1tico <code>Thread.onSpinWait()</code>, a\u00f1adido en Java 9, permite indicar al entorno de ejecuci\u00f3n que el hilo moment\u00e1neamente no es capaz de progresar, hasta que ocurra alguna condici\u00f3n que se est\u00e1 comprobando en espera activa. Como consecuencia, el entorno de ejecuci\u00f3n puede llevar a cabo determinadas acciones para mejorar el rendimiento del sistema, como asignar m\u00e1s recursos a otros hilos. De esta manera se consigue retrasar la ejecuci\u00f3n de la siguiente instrucci\u00f3n del hilo en espera activa durante un determinado n\u00famero de ciclos de procesador, con la esperanza de que la ejecuci\u00f3n de otros hilos hagan que la condici\u00f3n que lo bloquea deje de producirse y el hilo pueda avanzar, minimizando el consumo de energ\u00eda. El n\u00famero de ciclos de retraso puede variar de una familia de procesadores a otra.</p> <p>En este caso el uso de <code>Thread.onSpinWait()</code> es m\u00e1s efectivo que el de <code>Thread.sleep(milliseconds)</code>, en el que se obliga al hilo a abandonar el procesador durante el tiempo indicado, obligando a un cambio de contexto adicional, que conlleva un coste adicional de tiempo.</p>"},{"location":"bloque_v/tema_22/page-5/#proyecto-busywaiting","title":"Proyecto BusyWaiting","text":"<p>En este proyecto crearemos una aplicaci\u00f3n para simular el inicio de una carrera de f\u00f3rmula 1. As\u00ed, el hilo principal crear\u00e1 un hilo director de carrera y 10 hilos cada uno de los cuales represente un piloto que participa en la carrera. Adem\u00e1s el hilo principal crear\u00e1 un objeto compartido que representa el sistema de luces en forma de sem\u00e1foros que se usa para dar inicio a la carrera, que inicialmente tiene el color rojo. Los pilotos calientan motores en espera de que el sistema de luces est\u00e9 en verde. Transcurridos tres segundos, el director de carrera pone el sistema de luces en amarillo y transcurridos otros tres segundos lo pone en verde. Los pilotos, que se encuentran en una espera activa hasta que el sistema de luces se ponga en verde, en cuento detectan que dicho evento se ha producido, inician la carrera.</p> MainLightSystemRaceDirectorPilot <pre><code>class Main {\nprivate static final int NUMBER_OF_PILOTS = 10;\npublic static void main(String[] args) {\nLightSystem lightSystem = new LightSystem();\nThread raceDirectorThread = new Thread(new RaceDirector(lightSystem), \"Race director\");\nThread[] pilots = new Thread[NUMBER_OF_PILOTS];\nfor (int i = 0; i &lt; NUMBER_OF_PILOTS; i++) {\npilots[i] = new Thread(new Pilot(i, lightSystem), \"Pilot \" + i);\n}\nraceDirectorThread.start();\nfor (int i = 0; i &lt; NUMBER_OF_PILOTS; i++) {\npilots[i].start();\n}\n}\n}\n</code></pre> <pre><code>import java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nclass LightSystem {\npublic enum Color {\nRED, YELLOW, GREEN\n}\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nprivate volatile Color currentColor = Color.RED;\nvoid setColor(Color newColor) {\ncurrentColor = newColor;\nSystem.out.printf(\"%s - Light system in %s\\n\", LocalDateTime.now().format(dateTimeFormatter), newColor);\n}\nColor getColor() {\nreturn currentColor;\n}\n}\n</code></pre> <pre><code>import java.util.Objects;\npublic class RaceDirector implements Runnable {\nprivate final LightSystem lightSystem;\npublic RaceDirector(LightSystem lightSystem) {\nObjects.requireNonNull(lightSystem);\nthis.lightSystem = lightSystem;\n}\n@Override\npublic void run() {\ntry {\nThread.sleep(3000);\nlightSystem.setColor(LightSystem.Color.YELLOW);\nThread.sleep(3000);\nlightSystem.setColor(LightSystem.Color.GREEN);\n} catch (InterruptedException e) {\nreturn;\n}\n}\n}\n</code></pre> <pre><code>import java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Objects;\nclass Pilot implements Runnable {\nprivate final int number;\nprivate final LightSystem lightSystem;\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nPilot(int number, LightSystem lightSystem) {\nObjects.requireNonNull(lightSystem);\nthis.number = number;\nthis.lightSystem = lightSystem;\n}\n@Override\npublic void run() {\nwarmup();\nwhile (!Thread.currentThread().isInterrupted() &amp;&amp; lightSystem.getColor() != LightSystem.Color.GREEN) {\nThread.onSpinWait();\n}\nif (!Thread.currentThread().isInterrupted()) {\nstart();\n}\n}\nprivate void start() {\nSystem.out.printf(\"%s - Pilot %d starts the race!!!\\n\", LocalDateTime.now().format(dateTimeFormatter), number);\n}\nprivate void warmup() {\nSystem.out.printf(\"%s - Pilot %d is warming up car engine\\n\", LocalDateTime.now().format(dateTimeFormatter), number);\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_22/page-6/","title":"6 Wait Notify","text":""},{"location":"bloque_v/tema_22/page-6/#condiciones-en-un-bloque-sincronizado","title":"Condiciones en un bloque sincronizado","text":"<p>Cuando usamos varios bloques sincronizados sobre el mismo cerrojo intr\u00ednseco debemos tener en cuenta que si existe alguna condici\u00f3n por la que el hilo no pueda continuar la ejecuci\u00f3n de la secci\u00f3n cr\u00edtica, el hilo deber\u00eda suspender su ejecuci\u00f3n y liberar cerrojo, en espera de que deje de cumplirse la condici\u00f3n que no le permite continuar. De esta manera, otro hilo podr\u00e1 ejecutar el mismo u otro bloque sincronizado sobre protegido por dicho cerrojo. Esto es de vital importancia cuando el hecho de que la condici\u00f3n que bloquea al hilo deje de cumplirse depende de que otro hilo acceda a otra secci\u00f3n cr\u00edtica protegida por el mismo cerrojo, ya que si el primer hilo no liberara dicho cerrojo, el segundo nunca podr\u00eda entrar en dicha secci\u00f3n cr\u00edtica y por tanto la condici\u00f3n que bloquea al primer hilo nunca dejar\u00eda de cumplirse.</p> <p>Por otra parte, el hecho de que el hilo se suspenda esperando que la condici\u00f3n que lo bloquea deje de cumplirse implica que habr\u00e1 que notificarle en el futuro cuando deber\u00eda volver a estar listo para comprobar de nuevo la condici\u00f3n. As\u00ed, cuando otro hilo realice alguna acci\u00f3n que suponga que la condici\u00f3n que bloquea al primer hilo pueda dejar de cumplirse deber\u00e1 notificarlo al sistema para que el primer hilo trate de volver a adquirir el cerrojo y retome la secci\u00f3n cr\u00edtica, volviendo a comprobar la condici\u00f3n, de manera que si deja de cumplirse, contin\u00fae con la ejecuci\u00f3n de la secci\u00f3n cr\u00edtica.</p> <p>Esta condici\u00f3n de bloqueo recibe habitualmente el nombre de centinela (guard en ingl\u00e9s) o condici\u00f3n de paso.</p> <p>El ejemplo t\u00edpico de lo que acabamos de explicar es el llamado problema del productor-consumidor, que se describe a continuaci\u00f3n. Tenemos un buffer de datos en el que uno o m\u00e1s productores almacenan datos y del que uno o m\u00e1s consumidores extraen datos. Como el buffer es una estructura de datos compartida por ellos, deberemos controlar su acceso usando el mecanismo de sincronizaci\u00f3n descrito en el apartado anterior. Sin embargo, tenemos m\u00e1s limitaciones, como el hecho de que un proveedor no puede almacenar m\u00e1s datos en el buffer si \u00e9ste est\u00e1 lleno o que un consumidor no puede extraer datos del buffer si est\u00e1 vac\u00edo.</p> <p>M\u00e9todo wait()</p> <p>Al llamar a <code>wait()</code> desde un bloque o m\u00e9todo sincronizado, el hilo se suspende y se libera el cerrojo intr\u00ednseco que lo protege</p> <p>Para este tipo de situaciones, Java proporciona una serie de m\u00e9todos espec\u00edficos en la clase <code>Object</code>. Una vez obtenido mediante <code>synchronized</code> el cerrojo intr\u00ednseco asociado a un determinado objeto, un hilo puede llamar al m\u00e9todo <code>wait()</code> sobre dicho objeto. Al llamar a <code>wait()</code>, el hilo se suspende y se libera el cerrojo que protege el bloque sincronizado, lo que permite que otros hilos ejecuten otros bloques de c\u00f3digo sincronizados protegidos por el mismo cerrojo.</p> <p>El m\u00e9todo <code>wait(timeoutMillis)</code> se encuentra sobrecargado para que podamos especificar un tiempo m\u00e1ximo que un hilo puede estar suspendido esperando a que deje de cumplirse la condici\u00f3n de bloqueo, transcurrido el cual el hilo ser\u00e1 reactivado autom\u00e1ticamente. Si se pasa un valor negativo para el par\u00e1metro <code>timeoutMilllis</code> se lanza la excepci\u00f3n <code>IllegalArgumentException</code>. Sin embargo, bajo nuestro punto de vista, el m\u00e9todo <code>wait(timoutMillis)</code> tiene el inconveniente de que no nos informa de si se ha dejado de esperar porque nos han notificado o porque se ha consumido el tiempo m\u00e1ximo especificado.</p> <p>Como la mayor\u00eda de m\u00e9todos bloqueantes, los m\u00e9todo <code>wait()</code> y <code>wait(timeoutMillis)</code> lanzan la excepci\u00f3n <code>InterruptedException</code> si el hilo correspondiente es interrumpido mientras est\u00e1 suspendido en espera de que deje de cumplirse la condici\u00f3n de bloqueo, o si ya hab\u00eda sido marcado como interrumpido antes de llamar a <code>wait()</code> o <code>wait(timeoutMillis)</code>, reactivando inmediatamente el hilo en ambos casos.</p> <p>Si se llama a <code>wait()</code> o <code>wait(timeoutMillis)</code> desde hace fuera de un bloque o m\u00e9todo <code>synchronized</code>, se lanzar\u00e1 la excepci\u00f3n <code>IllegalMonitorStateException</code>, ya que el empleo de estos m\u00e9todos est\u00e1 asociado al cerrojo intr\u00ednseco del objeto sobre el que se ejecutan.</p> <p> Figura 3 - Wait y notifyAll</p> <p>Para reactivar un hilo que ha sido bloqueado mediante <code>wait()</code> o <code>wait(timeoutMillis)</code>, otro hilo debe llamar al m\u00e9todo <code>notify()</code> o <code>notifyAll()</code>, tambi\u00e9n desde dentro de un bloque de c\u00f3digo protegido por el mismo cerrojo intr\u00ednseco, para notificar que se ha producido alg\u00fan \"evento\" que hace que sea posible que alguna condici\u00f3n de bloqueo (guard) deje de cumplirse, y por tanto los hilos que estaban bloqueados en dicha condici\u00f3n puedan continuar.</p> <p>Como consecuencia de la llamada a <code>notifyAll()</code> todos los hilos que hubieran sido bloqueados mediante <code>wait()</code> o <code>wait(timeMillis)</code> en dicho cerrojo intr\u00ednseco por cualquier condici\u00f3n de bloqueo ser\u00e1n reactivados.</p> <p>Un aspecto importante es que cuando se hace <code>notifyAll()</code> no hay garant\u00eda de que el evento concreto que se est\u00e1 notificando sea por el que est\u00e1n interesados los hilos bloqueados en dicho cerrojo. De hecho, existe otro m\u00e9todo, llamado <code>notify()</code> que reactiva un s\u00f3lo hilo, pero no se recomienda su uso cuando haya distintas condiciones de espera, porque el hilo reactivado podr\u00eda no estar interesado en dicho \"evento\" y otros hilos que s\u00ed estar\u00edan interesados no ser\u00edan reactivados.</p> <p>Adem\u00e1s, el m\u00e9todo <code>notify()</code> no proporciona ninguna garant\u00eda sobre qu\u00e9 hilo ser\u00e1 reactivado si varios hilos est\u00e1n esperando en el mismo objeto monitor, lo que puede llevar a que un determinado hilo sufra inanici\u00f3n, es decir que nunca sea reactivado cuando se llama <code>notify()</code> porque siempre es reactivado alg\u00fan otro hilo que estuviera esperando. Para solucionar este problema, como estudiaremos m\u00e1s adelante, deberemos usar un objeto <code>ReentrantLock</code> con el modo fair activado y definir un objeto <code>Condition</code> por el que esperar, asociado a dicho cerrojo.</p> <p>Si existe una \u00fanica condici\u00f3n de espera en dicho objeto monitor y el evento s\u00f3lo va a permitir a un \u00fanico hilo continuar, entonces es m\u00e1s adecuado llamar a <code>notify()</code> en vez de llamar a <code>notifyAll()</code>, ya que estar\u00edamos reactivando a varios hilos innecesariamente, a lo que se conoce como el thundering herd problem (problema de la \"manada atronadora\").</p> <p>Este problema ocurre cuando un gran n\u00famero de procesos o hilos en espera de un evento (\"la manada\") son despertados repentinamente cuando se produce el evento, pero en realidad un s\u00f3lo hilo es capaz de sacar provecho de ello y avanzar. Todos los hilos lo intentar\u00e1n, compitiendo por los recursos, consumiendo ciclos de procesamiento, pero s\u00f3lo uno de ellos lo conseguir\u00e1. Ese consumo de recursos cesar\u00e1 cuando los hilos descubran que no pueden avanzar y vuelvan a esperar, es decir, \"cuando la manada vuelve a calmarse\".</p> <p>Warning</p> <p>Si comprobamos la condici\u00f3n de bloque una sola vez, puede que avancemos sin que debi\u00e9ramos</p> <p>Al usar <code>notifyAll()</code> debemos tener en cuenta que todos los hilos reactivados compiten por volver a adquirir el cerrojo, lo que puede implicar que para cuando un hilo reactivado consiga adquirir el cerrojo para continuar con la ejecuci\u00f3n de su secci\u00f3n cr\u00edtica la condici\u00f3n de bloqueo que lo bloqueaba vuelva a cumplirse, a pesar de que en alg\u00fan momento dej\u00f3 de cumplirse y otro hilo lo notific\u00f3. Por este motivo se debe evaluar la condici\u00f3n de bloqueo en un bucle <code>while</code> y no en un simple <code>if</code>.</p> <pre><code>synchronized(this) {\nwhile(condicion_bloqueo) {\nwait();\n}\n// ...\n}\n</code></pre>"},{"location":"bloque_v/tema_22/page-6/#proyecto-waitnotify","title":"Proyecto WaitNotify","text":"<p>En este proyecto crearemos una aplicaci\u00f3n que ejecuta dos hilos, un hilo productor dedicado a producir donuts y almacenarlos en una bandeja de la pasteler\u00eda y otro hilo consumidor dedicado a extraer elementos de la bandeja de la pasteler\u00eda y consumirlos. El problema radica en que ambos pueden acceder simult\u00e1neamente a la misma estructura de datos para agregar o extraer un donut, lo que implica que deberemos proveer mecanismos de sincronizaci\u00f3n sobre dichos accesos. Por otra parte, un productor no puede agregar un donut a la estructura de datos si la bandeja ya esta llena y un consumidor no puede extraer un elemento de la bandeja si \u00e9sta est\u00e1 vac\u00eda. Estas condiciones de bloqueo se ejecutan dentro del bloque sincronizado, por lo que deberemos usar el m\u00e9todo <code>wait()</code> para suspender los hilos mientras no puedan continuar y usar el m\u00e9todo <code>notifyAll()</code> para reactivarlos cuando deba volver a evaluarse la condici\u00f3n centinela.</p> MainBakeryDoughnutConsumerDoughnutProducer <pre><code>public class Main {\npublic static void main(String[] args) {\nBakery bakery = new Bakery();\nThread doughnutProducerThread = new Thread(new DoughnutProducer(bakery), \"Doughnut producer\");\nThread doughnutConsumerThread = new Thread(new DoughnutConsumer(bakery), \"Doughnut consumer\");\ndoughnutProducerThread.start();\ndoughnutConsumerThread.start();\n}\n}\n</code></pre> <pre><code>import java.util.ArrayList;\npublic class Bakery {\nprivate static final int TRAY_CAPACITY = 10;\nprivate final ArrayList&lt;Integer&gt; tray = new ArrayList&lt;&gt;();\npublic void addToTray(Integer doughnut) throws InterruptedException {\nsynchronized (this) {\nwhile (tray.size() &gt;= TRAY_CAPACITY) {\nSystem.out.println(\"Producer waiting for the tray to have room\");\nwait();\n}\ntray.add(doughnut);\nSystem.out.printf(\"Producer puts doughnut #%d on the tray\\n\", doughnut);\nnotifyAll();\n}\n}\npublic Integer extractFromTray() throws InterruptedException {\nInteger doughnut;\nsynchronized (this) {\nwhile (tray.isEmpty()) {\nSystem.out.println(\"Consumer waiting for the tray to have a doughnut\");\nwait();\n}\ndoughnut = tray.remove(0);\nSystem.out.printf(\"Consumer extracts doughnut #%d from tray\\n\", doughnut);\nnotifyAll();\nreturn doughnut;\n}\n}\n}\n</code></pre> <pre><code>import java.util.Objects;\nimport java.util.concurrent.TimeUnit;\npublic class DoughnutConsumer implements Runnable {\nprivate final Bakery bakery;\npublic DoughnutConsumer(Bakery bakery) {\nObjects.requireNonNull(bakery);\nthis.bakery = bakery;\n}\n@Override\npublic void run() {\nInteger doughnut;\nwhile (!Thread.currentThread().isInterrupted()) {\ntry {\ndoughnut = bakery.extractFromTray();\n} catch (InterruptedException e) {\nSystem.out.println(\"Consumer has been interrupted while extracting from tray\");\nreturn;\n}\ntry {\neat(doughnut);\n} catch (InterruptedException e) {\nSystem.out.println(\"Consumer has been interrupted while eating\");\nreturn;\n}\n}\nSystem.out.println(\"Consumer has been interrupted\");\n}\nprivate void eat(int doughnut) throws InterruptedException {\nSystem.out.printf(\"Consumer is eating doughnut #%d\\n\", doughnut);\nTimeUnit.SECONDS.sleep(1);\n}\n}\n</code></pre> <pre><code>import java.util.Objects;\nimport java.util.concurrent.TimeUnit;\npublic class DoughnutProducer implements Runnable {\nprivate final Bakery bakery;\nprivate int doughnutNumber;\npublic DoughnutProducer(Bakery bakery) {\nObjects.requireNonNull(bakery);\nthis.bakery = bakery;\n}\n@Override\npublic void run() {\nInteger doughnut;\nwhile (!Thread.currentThread().isInterrupted()) {\ntry {\ndoughnut = makeDoughnut();\n} catch (InterruptedException e) {\nSystem.out.println(\"Producer has been interrupted while making a doughnut\");\nreturn;\n}\ntry {\nbakery.addToTray(doughnut);\n} catch (InterruptedException e) {\nSystem.out.println(\"Producer has been interrupted while adding a doughnut to the tray\");\nreturn;\n}\n}\nSystem.out.println(\"Producer has been interrupted\");\n}\nprivate int makeDoughnut() throws InterruptedException {\nInteger doughnut = ++doughnutNumber;\nSystem.out.printf(\"Producer is making doughnut #%d\\n\", doughnut);\nTimeUnit.SECONDS.sleep(3);\nreturn doughnut;\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_22/page-7/","title":"7 Lock","text":""},{"location":"bloque_v/tema_22/page-7/#la-interfaz-lock","title":"La interfaz Lock","text":"<p>Java 5 trajo consigo un nuevo paquete de clases dise\u00f1ado espec\u00edficamente para proporcionar herramientas \u00fatiles para el desarrollo de aplicaciones concurrentes con m\u00faltiples hilos de ejecuci\u00f3n, denominado <code>java.util.concurrent</code>.</p> <p>En ese paquete Java proporciona otro mecanismo m\u00e1s potente y flexible que los cerrojos intr\u00ednsecos para la sincronizaci\u00f3n de bloques de c\u00f3digo, conocido como sincronizaci\u00f3n expl\u00edcita, basado en la interfaz <code>Lock</code> y las clases que la implementan, como por ejemplo la clase <code>ReentrantLock</code>.</p> <p>Al igual que en el caso de <code>synchronized</code> y los cerrojos intr\u00ednsecos, al usar la interfaz <code>Lock</code> no s\u00f3lo aseguramos la atomicidad sino tambi\u00e9n la visibilidad, por lo que no ser\u00e1 necesario definir con <code>volatile</code> las variables protegidas mediante un <code>Lock</code>.</p> <p>Este mecanismo presenta una serie de ventajas respecto al empleo de <code>synchronized</code> y los cerrojos intr\u00ednsecos, proporcionando funcionalidades adicionales. En primer lugar, permite que estructuras m\u00e1s complejas implementen una secci\u00f3n cr\u00edtica, dado que no est\u00e1 limitado por la construcci\u00f3n de un bloque sint\u00e1ctico <code>synchronized</code>.</p> <p>Adem\u00e1s, permite a un hilo adquirir el cerrojo de distintas formas. La primera de ella es adquirirla de forma similar a si us\u00e1ramos <code>synchronized</code>. Para ello usaremos el m\u00e9todo <code>lock()</code> de la interfaz <code>Lock</code>, que trata de adquirir el cerrojo y si no es posible bloquea al hilo en espera de poder adquirirlo. Si el hilo es interrumpido mientras est\u00e1 bloqueado esperando la adquisici\u00f3n del cerrojo, nada sucede, hasta que no consiga adquirir el hilo no podr\u00e1 ser consciente de que ha sido interrumpido. Se trata por tanto de una adquisici\u00f3n bloqueante no interrumpible.</p> <p> Figura 4 - Lock</p> <p>Otra forma de adquisici\u00f3n, no disponible mediante <code>synchronized</code>, es usar el m\u00e9todo <code>lockInterruptibly()</code> de la interfaz <code>Lock</code>, que trata de adquirir el cerrojo y si no es posible bloquea al hilo en espera de poder adquirirlo. Si el hilo es interrumpido mientras est\u00e1 bloqueado esperando la adquisici\u00f3n del cerrojo, el hilo es reactivado y se lanza la excepci\u00f3n <code>InterruptedException</code>. Si el hilo ya hab\u00eda sido marcado para interrupci\u00f3n antes de llamar a <code>lockInteruptibly()</code>, dicho m\u00e9todo lanzar\u00e1 directamente la excepci\u00f3n <code>InterruptedException</code> sin conceder el cerrojo al hilo. Se trata por tanto de una adquisici\u00f3n bloqueante interrumpible.</p> <p>Una tercera forma de adquisici\u00f3n, tampoco disponible mediante <code>synchronized</code>, es intentar adquirir el cerrojo sin tener que bloquearse si no puede hacerlo. Para tal fin, la interfaz <code>Lock</code> proporciona el m\u00e9todo <code>tryLock()</code>, que no bloquea el hilo, sino que retorna un valor booleano para indicar si se ha adquirido el cerrojo o no, permitiendo que el hilo decida qu\u00e9 hacer si no lo ha adquirido. Se trata por tanto de una adquisici\u00f3n no bloqueante</p> <p>Existe una cuarta alternativa intemedia, tampoco disponible mediante <code>synchronized</code>, consistente en usar el m\u00e9todo <code>tryLock(time, timeUnit)</code> sobrecargado de manera que recibe el tiempo m\u00e1ximo que queremos que sea bloqueado el hilo en espera de poder adquirir el cerrojo, transcurrido el cual retornar\u00e1 <code>true</code>. Esta llamada es bloqueante, pero con un l\u00edmite de tiempo. Si el hilo es interrumpido mientras est\u00e1 bloqueado en espera de adquirir el cerrojo, el hilo ser\u00e1 reactivado y se lanzar\u00e1 la excepci\u00f3n <code>InterruptedException</code>. De igual forma, si el hilo ya hab\u00eda sido marcado como interrumpido antes de llamar a <code>tryLock(timeout, timeUnit)</code>, se lanzar\u00e1 la misma excepci\u00f3n. Se trata por tanto de una adquisici\u00f3n bloqueante interrumpible con un tiempo m\u00e1ximo de espera. Si el valor pasado como tiempo es menor o igual a 0, se comportar\u00e1 igual que <code>tryLock()</code> y no se bloquear\u00e1.</p> <p>Podemos usar el m\u00e9todo <code>tryLock(timeout, timeUnit)</code> para evitar el problema conocido como dead lock (abrazo mortal), en el que dos hilos quedan interbloqueados en espera de adquisici\u00f3n de un cerrojo. Por ejemplo, si el hilo 1 adquiere el recurso A y trata de adquirir el recurso B, y el hilo 2 adquiere el recurso B y trata de adquirir el recurso A, ambos estar\u00e1n interbloqueados para siempre. Sin embargo, si usamos <code>tryLock(timeout, timeUnit)</code> a la hora de adquirir los cerrojos correspondientes a los recursos, entonces podemos programar que si transcurrido el tiempo no se ha adquirido liberemos el recurso que ya ten\u00edamos, permitiendo al otro hilo avanzar, deshaciendo as\u00ed el interbloqueo.</p> <p>A la hora de liberar el cerrojo que hayamos adquirido, deberemos llamar al m\u00e9todo <code>unlock()</code> de la interfaz <code>Lock</code>. Si no lo hici\u00e9ramos, los otros hilos que estuvieran esperando a adquirir el cerrojo estar\u00edan bloqueados indefinidamente, provocando una situaci\u00f3n de punto muerto (deadlock). Por este motivo, si usamos bloques <code>try-catch-finally</code> dentro de nuestra secci\u00f3n cr\u00edtica, debemos hacer la llamada a <code>unlock()</code> dentro de <code>finally</code>. De esta manera tanto si la secci\u00f3n cr\u00edtica es ejecutada satisfactoriamente como si se produce una excepci\u00f3n, el cerrojo ser\u00e1 liberado.</p> <p>Debemos tener en cuenta que el cerrojo debe ser liberado desde el mismo hilo que lo adquiri\u00f3. Esto parece bastante obvio, pero como estudiaremos m\u00e1s adelante, en otros tipos de sincronizadores, llamados sem\u00e1foros, la regla anterior no es obligatoria.</p> <p>El m\u00e9todo <code>unlock()</code> lanza la excepci\u00f3n <code>IllegalMonitorStateException</code> si se llama sin haber adquirido el cerrojo.</p> <p>Ve\u00e1moslo en c\u00f3digo:</p> <pre><code>lock.lock();\ntry {\n// Secci\u00f3n cr\u00edtica\n// ...\n} finally {\n// De esta manera, el cerrojo ser\u00e1 liberado tanto \nlock.unlock();\n}\n</code></pre> <p> Figura 5 - Unlock</p> <p>Al usar <code>synchronized</code> la adquisici\u00f3n y liberaci\u00f3n del cerrojo se realizaba de forma estructurada en forma de m\u00e9todo o de bloque de sentencias (fully bracket). De hecho, cuando se adquieren varios cerrojos intr\u00ednsecos, \u00e9stos son liberados obligatoriamente en el orden inverso en el que fueron adquiridos. Sin embargo al usar la interface <code>Lock</code>, la adquisici\u00f3n y liberaci\u00f3n de cerrojo no es estructurada (not fully bracket), sino que corresponde a simples llamadas a los m\u00e9todos vistos anteriormente. Este sistema es m\u00e1s flexible, pero obliga al programador a ser muy cuidadoso al establecer el orden en el que se llama a dichos m\u00e9todos.</p> <p>Otro aspecto muy importante con el que debemos tener cuidado a la hora de usar la interfaz <code>Lock</code> es evitar crear interbloqueos (deadlock) debido a que dos o m\u00e1s hilos queden bloqueados esperando la liberaci\u00f3n de cerrojos que nunca llegar\u00e1n a ser liberados. Por ejemplo, supongamos que un hilo A adquiere un cerrojo X y otro hilo B adquiere otro cerrojo Y. Si ahora el hilo A trata de adquirir el cerrojo Y y el hilo B simult\u00e1neamente trata de adquirir el cerrojo X, ambos hilos estar\u00e1n interbloqueados indefinidamente, porque est\u00e1n esperando la liberaci\u00f3n de cerrojos que nunca ser\u00e1n liberados. En este caso el problema ocurre porque ambos hilos tratan de obtener los cerrojos en el orden inverso uno respecto al otro.</p> <p>Otro aspecto diferenciador respecto a <code>synchronized</code> es que, como veremos en un apartado posterior, la interfaz <code>Lock</code> es usada por la interfaz <code>ReadWriteLock</code> y la clase <code>ReentrantReadWriteLock</code>, que permite que existan varios hilos lectores realizando operaciones de lectura sobre la estructura de datos protegida, algo que no es posible con los bloques o los m\u00e9todos <code>synchronized</code>.</p> <p>Una \u00faltima diferencia respecto a <code>synchronized</code> es que, como estudiaremos en un apartado posterior, la interfaz <code>Lock</code> permite definir m\u00e1s de una condici\u00f3n de bloqueo por la que los hilos pueden tener que ser bloqueados dentro de la secci\u00f3n cr\u00edtica una vez adquirido el cerrojo. Gracias a ello, cuando se produce un evento que puede hacer que deja de cumplirse una determinada condici\u00f3n de bloqueo, se puede notificar dicho evento a esa condici\u00f3n en concreto, de manera que s\u00f3lo sean reactivados los hilos que estuvieran bloqueados esperando en dicha condici\u00f3n de bloqueo, y no en otras. Esto es especialmente interesante porque nos permite \"notificar\" del evento a un \u00fanico hilo que estuviera esperando, de manera que s\u00f3lo se reactive un \u00fanico hilo. En la pr\u00e1ctica, con los bloques <code>synchronized</code>, al no disponer de distintas colas de espera no es tan seguro \"notificar\" del evento a un \u00fanico hilo, ya que puede que el hilo reactivado no estuviera esperando por dicho evento, con lo que ning\u00fan hilo que realmente estuviera esperando dicho evento ser\u00eda despertado.</p>"},{"location":"bloque_v/tema_22/page-7/#reentrantlock","title":"ReentrantLock","text":"<p>La clase <code>ReentrantLock</code> es la clase principal de implementa la interfaz <code>Lock</code>. Adem\u00e1s de la funcionalidad definida por dicha interfaz, la clase <code>ReentrantLock</code> proporciona una serie de m\u00e9todos informativos que permiten hacer un seguimiento del cerrojo:</p> <ul> <li><code>getOwner()</code>: Retorna el nombre del hilo que ha adquirido el lock.</li> <li><code>getQueuedThreads()</code>: Retorna la lista de hilos que est\u00e1n esperando a entrar en la secci\u00f3n cr\u00edtica protegida por el lock.</li> <li><code>hasQueuedThreads()</code>: Retorna <code>true</code> si hay hilos esperando en el lock.</li> <li><code>getQueueLength()</code>: Retorna el n\u00famero de hilos esperando en el lock.</li> <li><code>isLocked()</code>: Retorna <code>true</code> si alg\u00fan hilo ha obtenido el lock.</li> <li><code>isFair()</code>: Retorna <code>true</code> si el lock tiene activado el modo justo.</li> <li><code>getHoldCount()</code>: Retorna el n\u00famero de veces que el hilo actual ha adquirido el lock.</li> <li><code>isHeldByCurrentThread()</code>: Retorna si el lock ha sido adquirido por el hilo actual.</li> </ul> <p>El cerrojo definido por <code>ReentrantLock</code> es tambi\u00e9n reentrante (de ah\u00ed su nombre), al igual que el cerrojo intr\u00ednseco usado por <code>synchronized</code>, por lo que cuando un hilo obtiene en un m\u00e9todo el control de un cerrojo y realiza una llamada a otro m\u00e9todo o a ese mismo m\u00e9todo de forma recursiva, contin\u00faa teniendo el control del cerrojo, y si se trata de adquirir de nuevo no queda bloqueado por \u00e9l mismo.</p> <p> Figura 6 - ReentrantLock</p> <p>El constructor de la clase <code>ReentrantLock</code> est\u00e1 sobrecargado para admitir un par\u00e1metro booleano denominado <code>fair</code> (justo), que permite establecer si queremos que se active en el cerrojo el modo justo (fair-mode). Por defecto, los cerrojos tienen desactivados este modo, pero podemos activarlo pasando el valor <code>true</code> para dicho par\u00e1metro en el constructor.</p> <p>Al activar el modo justo, cuando varios hilos est\u00e9n esperando en el cerrojo, y \u00e9ste deba seleccionar un hilo para darle acceso a la secci\u00f3n cr\u00edtica, al haber sido liberado por el hilo que pose\u00eda, se seleccionar\u00e1 el hilo que lleve m\u00e1s tiempo esperando para obtener el cerrojo (cola FIFO), y no se seleccionar\u00e1 aleatoriamente, como sucede cuando el modo justo est\u00e1 desactivado.</p> <p>La ventaja principal del modo justo es que impide que se produzca inanici\u00f3n en la adquisici\u00f3n del cerrojo por parte de los hilos.</p> <p>El modo justo es respetado por los m\u00e9todos <code>lock()</code>, <code>lockInterruptibly()</code> y <code>tryLock(time, timeUnit)</code>, pero no por el m\u00e9todo <code>tryLock()</code>, que puede hacer que el hilo que lo llama \"se cuele\". Si queremos formar a que lo respete deberemos llamar a <code>tryLock(0, timeUnit)</code>.</p> <p>Finalmente, debemos tener en cuenta que la aplicaci\u00f3n del modo justo a un cerrojo a\u00f1ade un determinado coste en tiempo de ejecuci\u00f3n, por lo que s\u00f3lo debemos establecerlo cuando los requerimientos as\u00ed lo especifiquen.</p>"},{"location":"bloque_v/tema_22/page-7/#proyecto-reentrantlock","title":"Proyecto ReentrantLock","text":"<p>En este proyecto crearemos un programa que simula el env\u00edo de documentos a la cola de impresi\u00f3n de una impresora, teniendo en cuenta que s\u00f3lo un documento puede estar imprimi\u00e9ndose en un momento dado. Para la sincronizaci\u00f3n usaremos un objeto de la clase <code>ReentrantLock</code>, que implementa la interfaz <code>Lock</code>.</p> MainPrinterPrintJob <pre><code>public class Main {\npublic static void main(String[] args) {\nPrinter printer = new Printer();\nThread[] printJobThreads = new Thread[10];\nfor (int i = 0; i &lt; 10; i++) {\nprintJobThreads[i] = new Thread(new PrintJob(printer, \"Document #\" + i), \"Print job #\" + i);\n}\nfor (int i = 0; i &lt; 10; i++) {\nprintJobThreads[i].start();\n}\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\npublic class Printer {\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nprivate final Lock reentrantLock = new ReentrantLock(true);\npublic void print(String document) throws InterruptedException {\nreentrantLock.lock();\ntry {\nprintDocument(document);\n} finally {\n// This is called even if an exception is thrown.\nreentrantLock.unlock();\n}\n}\nprivate void printDocument(String document) throws InterruptedException {\nSystem.out.printf(\"%s -&gt; %s: Document printing started\\n\",\nLocalTime.now().format(dateTimeFormatter), Thread.currentThread().getName());\nSystem.out.printf(\"%s -&gt; %s: %s...\\n\",\nLocalTime.now().format(dateTimeFormatter), Thread.currentThread().getName(), document);\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5));\nSystem.out.printf(\"%s -&gt; %s: Printing finished\\n\",\nLocalTime.now().format(dateTimeFormatter), Thread.currentThread().getName());\n}\n}\n</code></pre> <pre><code>import java.util.Objects;\npublic class PrintJob implements Runnable {\nprivate final Printer printer;\nprivate final String document;\npublic PrintJob(Printer printer, String document) {\nObjects.requireNonNull(printer);\nObjects.requireNonNull(document);\nthis.printer = printer;\nthis.document = document;\n}\n@Override\npublic void run() {\ntry {\nprinter.print(document);\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s -&gt; I've been interrupted while printing document\\n\",\nThread.currentThread().getName());\n}\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_22/page-8/","title":"8 Condition","text":""},{"location":"bloque_v/tema_22/page-8/#condition","title":"Condition","text":"<p>Un cerrojo puede tener asociados una o m\u00e1s condiciones, tambi\u00e9n llamadas colas de condici\u00f3n (condition queues) o variables de condici\u00f3n (condition variables). Las condiciones son definidas por la interfaz <code>Condition</code> y proporcionan un mecanismo para suspender a un hilo que haya obtenido el cerrojo al que est\u00e1 asociado la condici\u00f3n, porque \u00e9sta no se cumpla, liberando el cerrojo para que otro hilo lo pueda adquirir.</p> <p>Cuando otro hilo que haya adquirido el cerrojo genere un evento por el que sospeche que la condici\u00f3n por la que han sido suspendidos otros hilos pueda cumplirse, podr\u00e1 notificarlo para que sean reactivados uno o m\u00e1s hilos, de manera que se pongan a la cola de adquisici\u00f3n del cerrojo y, una vez adquirido, volver a evaluar la condici\u00f3n (bucle).</p> <p>Este mecanismo es similar al que hab\u00edamos utilizado con los bloques <code>synchronized</code> y los m\u00e9todos <code>wait()</code> y <code>notify()</code>. Sin embargo, para un cerrojo podremos determinar distintas condiciones de suspensi\u00f3n independientes con distintas \"colas de espera\", a diferencia de los bloques <code>synchronized</code> que poseen una \u00fanica cola de espera de eventos (una \u00fanica condici\u00f3n).</p> <p>Para crear una condici\u00f3n de un cerrojo utilizaremos el m\u00e9todo factor\u00eda <code>newCondition()</code>de la interfaz <code>Lock</code>, que retornar\u00e1 un objeto <code>Condition</code> asociado a dicho cerrojo y que normalmente almacenaremos en una variable cuyo nombre refleje la condici\u00f3n por la que un hilo deber\u00e1 esperar. Por ejemplo:</p> <pre><code>Lock lock = new ReentrantLock();\nCondition notFull  = lock.newCondition(); Condition notEmpty = lock.newCondition();\n</code></pre> <p>Si queremos que un hilo sea suspendido en la cola correspondiente a una determinada condici\u00f3n usaremos el m\u00e9todo <code>await()</code> de dicho objeto <code>Condition</code>. El m\u00e9todo <code>await()</code> tiene una funcionalidad similar al m\u00e9todo <code>wait()</code> de los cerrojos intr\u00ednsecos usados por <code>synchronized</code>.</p> <pre><code>lock.lock();\ntry {\nwhile (items.length == CAPACITY) {\nnotFull.await();\n}\n// ...\n} finally {\nlock.unlock();\n}\n</code></pre> <p>El m\u00e9todo <code>await(timeout, timeUnit)</code> se encuentra sobrecargado para que podamos especificar un tiempo m\u00e1ximo que un hilo puede estar suspendido esperando por una determinada condici\u00f3n, transcurrido el cual el hilo ser\u00e1 reactivado autom\u00e1ticamente, retornando el valor <code>false</code>. En caso contrario retorna <code>true</code>.</p> <p>Como la mayor\u00eda de m\u00e9todos bloqueantes, los m\u00e9todo <code>await()</code> y <code>await(timeout, timeUnit)</code> lanzan la excepci\u00f3n <code>InterruptedException</code> si el hilo correspondiente es interrumpido mientras est\u00e1 suspendido en espera en una condici\u00f3n, o si ya hab\u00eda sido marcado como interrumpido antes de llamar a <code>await()</code> o <code>await(timeout, timeUnit)</code>, reactivando inmediatamente el hilo en ambos casos.</p> <p>La interfaz <code>Condition</code> nos ofrece otra alternativa, no disponible en la clase <code>Object</code> y los cerrojos intr\u00ednsecos, consistente en el m\u00e9todo <code>awaitUninterruptedly()</code>, que funciona de forma similar a <code>await()</code>, pero si el hilo es marcado para interrupci\u00f3n mientras est\u00e1 suspendido en la condici\u00f3n, o ya hab\u00eda sido marcado para interrupci\u00f3n antes de llamar a <code>awaitUninterruptedly()</code>, el hilo no ser\u00e1 reactivado inmediatamente ni se lanzar\u00e1 la excepci\u00f3n <code>InterruptedException</code>.</p> <p>Si se llama a <code>await()</code>, <code>await(timeout, timeUnit)</code> o <code>awaitUninterruptedly()</code> sobre una condici\u00f3n de un cerrojo sin estar en posesi\u00f3n de dicho cerrojo, se lanzar\u00e1 la excepci\u00f3n <code>IllegalMonitorStateException</code>, ya que la condici\u00f3n est\u00e1 asociada a la posesi\u00f3n del cerrojo correspondiente.</p> <p>Para reactivar un hilo que ha sido bloqueado mediante <code>await()</code> o <code>await(timeout, timeUnit)</code> o <code>awaitUninterruptedly()</code> en una determinada condici\u00f3n, otro hilo debe llamar al m\u00e9todo <code>signal()</code> o al m\u00e9todo <code>signalAll()</code> de dicha condici\u00f3n, estando en posesi\u00f3n del cerrojo correspondiente, para notificar que se ha producido alg\u00fan \"evento\" que hace que sea posible que dicha condici\u00f3n se cumpla.</p> <p>Como consecuencia de la llamada a <code>signal()</code> el primer los hilos que estuvieran esperando en la cola de dicha condici\u00f3n al haber llamado a <code>await()</code>, <code>await(timeout, timeUnit)</code> o <code>awaitUninterruptedly()</code> en dicha condici\u00f3n ser\u00e1 reactivado, coloc\u00e1ndose en la cola de adquisici\u00f3n del cerrojo, de manera que una vez adquirido vuelva a comprar la condici\u00f3n (bucle).</p> <p>Si usamos <code>signalAll()</code> para la notificaci\u00f3n, entonces ser\u00e1 reactivados todos los hilos que estuvieran esperando en dicha condici\u00f3n, siendo a\u00f1adido a la cola de adquisici\u00f3n del cerrojo.</p> <p>Un aspecto importante es que se debe hacer <code>signal()</code> o <code>signalAll()</code>sobre la condici\u00f3n relacionada con el \"evento\" que se ha producido, y no sobre cualquier condici\u00f3n asociada al cerrojo correspondiente, ya que queremos reactivar a los hilos adecuados, aquellos para los que el \"evento\" puede ser relevante.</p> <p> Figura 7 - Condition</p> <p>Al ser reactivados debemos tener en cuenta que los hilos deben volver a adquirir el cerrojo, lo que puede implicar que para cuando un hilo reactivado consiga adquirir el cerrojo para continuar con la ejecuci\u00f3n de su secci\u00f3n cr\u00edtica la condici\u00f3n que lo bloqueaba vuelva a dejar de cumplirse, a pesar de que en alg\u00fan momento s\u00ed se cumpli\u00f3 y otro hilo lo notific\u00f3. Por este motivo se debe evaluar la condici\u00f3n en un bucle <code>while</code> y no en un simple <code>if</code>.</p> <pre><code>lock.lock();\ntry {\nwhile (items.length == CAPACITY) {\nnotFull.await();\n}\n// ...\n} finally {\nlock.unlock();\n}\n</code></pre> <p>Nunca hagas esto</p> <p>Nunca uses los m\u00e9todos <code>wait()</code>, <code>notify</code> y <code>notifyAll</code> del objeto <code>Condition</code></p> <p>Algo que debemos tener en cuenta es que, dado que <code>Condition</code> extiende de <code>Object</code>, nuestro objeto <code>Condition</code> tambi\u00e9n posee los m\u00e9todos <code>wait()</code>, <code>notify</code> y <code>notifyAll</code>, pero nunca debemos usarlos. Estos m\u00e9todos s\u00f3lo deben ser usados desde bloques o m\u00e9todos <code>synchronized</code>.</p> <p>Si creamos condiciones en un <code>Lock</code> en el que ha establecido el modo justo, cuando los hilos sean reactivados mediante una notificaci\u00f3n, se a\u00f1adir\u00e1n \"en orden\" a la cola de adquisici\u00f3n del cerrojo.</p>"},{"location":"bloque_v/tema_22/page-8/#proyecto-condition","title":"Proyecto Condition","text":"<p>En este proyecto realizaremos el ejemplo del productor-consumidor que vimos en un apartado anterior, pero usando los cerrojos y las condiciones en vez de bloques <code>synchronized</code>.</p> MainBakeryDoughnutConsumerDoughnutProducer <pre><code>public class Main {\npublic static void main(String[] args) {\nBakery bakery = new Bakery();\nThread doughnutProducerThread = new Thread(new DoughnutProducer(bakery), \"Doughnut producer\");\nThread doughnutConsumerThread = new Thread(new DoughnutConsumer(bakery), \"Doughnut consumer\");\ndoughnutProducerThread.start();\ndoughnutConsumerThread.start();\n}\n}\n</code></pre> <pre><code>import java.util.ArrayList;\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.ReentrantLock;\npublic class Bakery {\nprivate static final int TRAY_CAPACITY = 10;\nprivate final ArrayList&lt;Integer&gt; tray = new ArrayList&lt;&gt;();\nprivate final ReentrantLock lock = new ReentrantLock(true);\nprivate final Condition isNotFull = lock.newCondition();\nprivate final Condition isNotEmpty = lock.newCondition();\npublic void addToTray(Integer doughnut) throws InterruptedException {\nlock.lock();\ntry {\nwhile (tray.size() &gt;= TRAY_CAPACITY) {\nSystem.out.println(\"Producer waiting for the tray to have room\");\nisNotFull.await();\n}\ntray.add(doughnut);\nSystem.out.printf(\"Producer puts doughnut #%d on the tray\\n\", doughnut);\nisNotEmpty.signal();\n} finally {\nlock.unlock();\n}\n}\npublic Integer extractFromTray() throws InterruptedException {\nInteger doughnut;\nlock.lock();\ntry {\nwhile (tray.isEmpty()) {\nSystem.out.println(\"Consumer waiting for the tray to have a doughnut\");\nisNotEmpty.await();\n}\ndoughnut = tray.remove(0);\nSystem.out.printf(\"Consumer extracts doughnut #%d from tray\\n\", doughnut);\nisNotFull.signal();\nreturn doughnut;\n} finally {\nlock.unlock();\n}\n}\n}\n</code></pre> <pre><code>import java.util.Objects;\nimport java.util.concurrent.TimeUnit;\npublic class DoughnutConsumer implements Runnable {\nprivate final Bakery bakery;\npublic DoughnutConsumer(Bakery bakery) {\nObjects.requireNonNull(bakery);\nthis.bakery = bakery;\n}\n@Override\npublic void run() {\nInteger doughnut;\nwhile (!Thread.currentThread().isInterrupted()) {\ntry {\ndoughnut = bakery.extractFromTray();\n} catch (InterruptedException e) {\nSystem.out.println(\"Consumer has been interrupted while extracting from tray\");\nreturn;\n}\ntry {\neat(doughnut);\n} catch (InterruptedException e) {\nSystem.out.println(\"Consumer has been interrupted while eating\");\nreturn;\n}\n}\nSystem.out.println(\"Consumer has been interrupted\");\n}\nprivate void eat(int doughnut) throws InterruptedException {\nSystem.out.printf(\"Consumer is eating doughnut #%d\\n\", doughnut);\nTimeUnit.SECONDS.sleep(1);\n}\n}\n</code></pre> <pre><code>import java.util.Objects;\nimport java.util.concurrent.TimeUnit;\npublic class DoughnutProducer implements Runnable {\nprivate final Bakery bakery;\nprivate int doughnutNumber;\npublic DoughnutProducer(Bakery bakery) {\nObjects.requireNonNull(bakery);\nthis.bakery = bakery;\n}\n@Override\npublic void run() {\nInteger doughnut;\nwhile (!Thread.currentThread().isInterrupted()) {\ntry {\ndoughnut = makeDoughnut();\n} catch (InterruptedException e) {\nSystem.out.println(\"Producer has been interrupted while making a doughnut\");\nreturn;\n}\ntry {\nbakery.addToTray(doughnut);\n} catch (InterruptedException e) {\nSystem.out.println(\"Producer has been interrupted while adding a doughnut to the tray\");\nreturn;\n}\n}\nSystem.out.println(\"Producer has been interrupted\");\n}\nprivate int makeDoughnut() throws InterruptedException {\nInteger doughnut = ++doughnutNumber;\nSystem.out.printf(\"Producer is making doughnut #%d\\n\", doughnut);\nTimeUnit.SECONDS.sleep(3);\nreturn doughnut;\n}\n}\n</code></pre> <p>Si ejecutamos el programa veremos que funciona de manera similar al \"Proyecto WaitNotify\".</p>"},{"location":"bloque_v/tema_22/page-9/","title":"9 ReentrantReadWriteLock","text":""},{"location":"bloque_v/tema_22/page-9/#reentrantreadwritelock","title":"ReentrantReadWriteLock","text":"<p>En algunas ocasiones, el recurso que estamos protegiendo mediante un cerrojo es accedido para lectura con una frecuencia mucho mayor que para escritura. Como ya sabemos, el acceso concurrente para lectura no es problem\u00e1tico, por lo que en estos casos, el uso de un objeto <code>ReentrantLock</code> para proteger el acceso al recurso supone un coste de ejecuci\u00f3n excesivo teniendo en cuenta que el acceso para escritura es muy poco frecuente y que el acceso concurrente para lectura no deber\u00eda bloquear a los hilos.</p> <p>Cabr\u00eda preguntarse los siguiente: \u00bfsi varios hilos s\u00f3lo van a leer el recurso y otros van a modificar el recurso, por qu\u00e9 es necesario que los hilos que s\u00f3lo van a leer adquieran un cerrojo de lectura? \u00bfpor qu\u00e9 no pueden simplemente leer el recurso?</p> <p>La respuesta es que es necesario que adquieran un cerrojo de lectura porque de lo contrario puede que cuando un hilo lea el recurso otro hilo est\u00e9 en medio de una operaci\u00f3n de actualizaci\u00f3n del recurso, y entonces el hilo que lee el recurso obtendr\u00eda un recurso inconsiste a medio actualizar.</p> <p>Por ejemplo, supongamos que el recurso es un producto y el hilo escritor est\u00e1 actualizando su nombre y su precio, para lo que usa un cerrojo de escritura. Si los hilos lectores no usaran un cerrojo de lectura, y simplemente accedieran al recurso, podr\u00eda ocurrir que recibieran una copia del producto en el que s\u00f3lo estuviera actualizado el nombre del producto pero no el precio, si da la casualidad de que dicha lectura se produce justo entre el momento en el que el hilo de escritura actualiza el nombre y el momento en el que actualiza el precio.</p> <p>ReentrantReadWriteLock</p> <p>Cerrojo que proporciona dos modos distintos de adquisici\u00f3n independientes, uno para lectura y otro para escritura</p> <p>Para estos casos concretos, la librer\u00eda de concurrencia de Java proporciona la interfaz <code>ReadWriteLock</code> y la clase <code>ReentrantReadWriteLock</code>, la \u00fanica que la implementa. La interfaz <code>ReadWriteLock</code> proporciona dos cerrojos <code>Lock</code> distintos, uno para operaciones de lectura y otro para operaciones de escritura.</p> <p>Cuando un hilo adquiere el cerrojo de lectura, ning\u00fan otro hilo puede adquirir el cerrojo de escritura, pero si que es posible que otros hilos adquieran tambi\u00e9n el cerrojo de lectura, y por tanto ejecuten operaciones de lectura simult\u00e1neamente.</p> <p> Figura 8 - Lectores en un ReadWriteLock</p> <p>Por otra parte, si un hilo adquiere el cerrojo de escritura, ning\u00fan otro hilo puede adquirir el cerrojo de escritura ni el de lectura.</p> <p> Figura 9 - Escritor en un ReadWriteLock</p> <p>Si hemos activado el modo justo, el comportamiento es algo m\u00e1s complejo:</p> <ul> <li>Si un hilo lector trata de adquirir el cerrojo de lectura (de forma no reentrante), ser\u00e1 bloqueado si el cerrojo de escritura ha sido adquirido o hay alg\u00fan hilo escritor m\u00e1s antiguo que \u00e9l esperando adquirirlo.</li> <li>Si un hilo escritor trata de adquirir el cerrojo de escritura (de forma no reentrante), ser\u00e1 bloqueado si el cerrojo de escritura o el cerrojo de lectura han sido adquiridos, o si hay alg\u00fan hilo esperando para adquirirlo. Debemos tener en cuenta que el m\u00e9todo <code>tryLock()</code> no respeta el modo justo, por lo que el hilo adquirir\u00eda el cerrojo si no ha sido adquirido, independientemente de que haya alg\u00fan hilo esperando.</li> </ul> <p>En teor\u00eda, el incremento de la concurrencia proporcionado por el uso de un cerrojo <code>ReadWriteLock</code> conllevar\u00e1 una mejora del rendimiento frente al uso de un simple cerrojo de exclusi\u00f3n mutua <code>Lock</code>. Sin embargo esto depender\u00e1 de la frecuencia con la que se producen acceso de lectura frente a los accesos de escritura, la duraci\u00f3n del acceso y el n\u00famero de accesos concurrentes, por lo que s\u00f3lo debemos usar cerrojos <code>ReadWriteLock</code> cuando se den las condiciones adecuadas.</p> <p>La interfaz <code>ReadWriteLock</code> proporciona dos m\u00e9todos, el m\u00e9todo <code>readLock()</code>, que retorna el objeto <code>Lock</code> correspondiente al cerrojo de lectura, y el m\u00e9todo <code>writeLock()</code>, que retorna el objeto <code>Lock</code> correspondiente al cerrojo de escritura.</p> <p>Una vez obtenido el objeto <code>Lock</code> deseado, podremos usar sobre \u00e9l los m\u00e9todos que ya estudiamos para adquirir o liberar el cerrojo, como <code>lock()</code>, <code>unlock()</code>, <code>tryLock()</code>, <code>lockInterruptibly()</code> y <code>newCondition()</code>.</p> <pre><code>Lock readLock = reentrantReadWriteLock.readLock();\nreadLock.lock();\ntry {\n// Acceso s\u00f3lo para lectura.\n// ...\n} finally {\nreadLock.unlock();    }\n</code></pre> <p>Warning</p> <p>Es responsabilidad del programador usar el cerrojo adecuado, lectura o escritura, dependiendo de las operaci\u00f3n que se quiera realizar</p> <p>Un aspecto muy importante es que es responsabilidad del programador asegurar el uso correcto de los cerrojos, realizando con ellos las operaciones para las que han sido dise\u00f1ados. Por ejemplo, cuando obtenemos un cerrojo de lectura, no deber\u00edamos modificar el valor de la variable o estructura de datos protegida, o de lo contrario podemos tener problemas de inconsistencia de datos.</p> <p>La clase principal que implementa la interfaz es <code>ReadWriteLock</code> es <code>ReentrantReadWriteLock</code>, que como su nombre indica implementa cerrojos de lectura y escritura reeentrantes, es decir que no es necesario readquirirlo si el hilo ya lo posee cuando llama a un determinado m\u00e9todo que lo requiere, incluso recursivamente. El constructor de la clase <code>ReentrantReadWriteLock(boolean)</code>puede recibir un valor booleano indicativo de si hay que activar el modo justo.</p> <p>El cerrojo de escritura de <code>ReentrantReadWriteLock</code> proporciona una implementaci\u00f3n del m\u00e9todo <code>newCondition()</code> similar a la de la clase <code>ReentrantLock</code>, por lo que podremos establecer condiciones para el cerrojo de escritura. Sin embargo, el cerrojo de lectura no permite el uso de objetos <code>Condition</code> y lanzar\u00e1 la excepci\u00f3n <code>UnsupportedOperationException</code> si llamamos a su m\u00e9todo <code>newCondition()</code> sobre \u00e9l.</p> <p>Otra posibilidad es la operaci\u00f3n conocida como degradado de cerrojo (lock downgrading), seg\u00fan la cu\u00e1l en un cerrojo <code>ReentrantReadWriteLock</code> podemos adquirir el cerrojo de escritura y, sin haberlo liberado a\u00fan expl\u00edcitamente, adquirir el cerrojo de lectura. Posteriormente, una vez adquirido el de lectura, podemos liberar el de escritura, leer el valor y finalmente liberar el de lectura. \u00bfQu\u00e9 conseguimos con esta operaci\u00f3n? Pasar de un cerrojo de escritura a uno de lectura sin tener que volver a competir por obtener el de lectura.</p> <pre><code>```java\n// Adquire write lock from the readWriteLock.\nLock lock = readWriteLock.writeLock();\nlock.lock();\ntry {\n    // Perform write operation.\n    // ...\n    // Adquire the read lock from the readWriteLock.\n    final readLock = readWriteLock.readLock();\n    readLock.lock();\n    try {\n        // Try to release write lock. From this moment on, other threads can read the resource.\n        lock.unlock();\n        // Perform read operation.\n        // ...\n    } finally {\n        // The lock to release eventually is the readLock\n        lock = readLock;\n    }\n} finally {\n    // Release the reaming lock.\n    lock.unlock();\n}\n```\n</code></pre> <p>Sin embargo la operaci\u00f3n contraria (lock upgrading) no est\u00e1 permitida, es decir, si obtenemos el cerrojo de lectura y despu\u00e9s queremos obtener el de escritura deberemos antes liberar expl\u00edcitamente el cerrojo de lectura, volviendo a competir para adquirir el de escritura.</p>"},{"location":"bloque_v/tema_22/page-9/#proyecto-readwritelock","title":"Proyecto ReadWriteLock","text":"<p>En este proyecto crearemos una aplicaci\u00f3n que simula la venta de un producto en una tienda online. Por un lado existir\u00e1n hilos clientes que consultar\u00e1n el precio del producto y por otra parte un hilo que representa la tienda vendedora que incrementa el precio del producto de vez en cuando. Usaremos la clase <code>ReentrantReadWriteLock</code> para permitir que varios hilos clientes consulten el precio a la vez.</p> MainProductClientShop <pre><code>import java.util.concurrent.TimeUnit;\npublic class Main {\npublic static void main(String[] args) throws InterruptedException {\nProduct product = new Product(100.00);\nThread[] clientThreads= new Thread[4];\nfor (int i = 0; i &lt; 4; i++) {\nclientThreads[i] = new Thread(new Client(product), \"Client \" + i);\n}\nThread shopThread = new Thread(new Shop(product), \"Shop\");\nshopThread.start();\n// Wait to start some clients.\nTimeUnit.SECONDS.sleep(1);\nfor (int i = 0; i &lt; 2; i++){\nclientThreads[i].start();\n}\n// Wait to start the rest of the clients.\nTimeUnit.SECONDS.sleep(3);\nfor (int i = 2; i &lt; 4; i++){\nclientThreads[i].start();\n}\n// Try to check a client thread blocks the shop thread but not other clients threads.\n// Try to check the shop thread blocks client threads.\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReadWriteLock;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\npublic class Product {\nprivate double price;\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nprivate final ReadWriteLock reentrantReadWriteLock = new ReentrantReadWriteLock();\nprivate final Lock readLock = reentrantReadWriteLock.readLock();\nprivate final Lock writeLock = reentrantReadWriteLock.writeLock();\npublic Product(double initialPrice) {\nthis.price = initialPrice;\n}\npublic double getPrice() throws InterruptedException {\nreadLock.lock();\ntry {\nreturn consultPrice();\n} finally {\nreadLock.unlock();\n}\n}\nprivate double consultPrice() throws InterruptedException {\nSystem.out.printf(\"%s -&gt; %s - Consulting price...\\n\",\nLocalTime.now().format(dateTimeFormatter),\nThread.currentThread().getName());\nTimeUnit.SECONDS.sleep(3);\nSystem.out.printf(\"%s -&gt; %s - Price: %.2f\\n\",\nLocalTime.now().format(dateTimeFormatter),\nThread.currentThread().getName(),\nprice);\nreturn price;\n}\npublic void updatePrice(double increment) throws InterruptedException {\nwriteLock.lock();\ntry {\nincrementPrice(increment);\n} finally {\nwriteLock.unlock();\n}\n}\nprivate void incrementPrice(double increment) throws InterruptedException {\nSystem.out.printf(\"%s -&gt; %s - Updating price...\\n\",\nLocalTime.now().format(dateTimeFormatter),\nThread.currentThread().getName());\nTimeUnit.SECONDS.sleep(1);\nthis.price += increment;\nSystem.out.printf(\"%s -&gt; %s - New price: %.2f\\n\",\nLocalTime.now().format(dateTimeFormatter),\nThread.currentThread().getName(),\nthis.price);\n}\n}\n</code></pre> <pre><code>import java.util.Objects;\npublic class Client implements Runnable {\nprivate final Product product;\npublic Client(Product product) {\nObjects.requireNonNull(product);\nthis.product = product;\n}\n@Override\npublic void run() {\ntry {\n@SuppressWarnings(\"unused\")\ndouble price = product.getPrice();\n} catch (InterruptedException e) {\nSystem.out.println(\"I've been interrupted while consulting the price\");\n}\n}\n}\n</code></pre> <pre><code>import java.util.Objects;\nimport java.util.concurrent.TimeUnit;\npublic class Shop implements Runnable {\nprivate final Product product;\npublic Shop(Product product) {\nObjects.requireNonNull(product);\nthis.product = product;\n}\n@Override\npublic void run() {\nfor (int i = 0; i &lt; 3; i++) {\ntry {\nproduct.updatePrice(20.0);\nTimeUnit.SECONDS.sleep(2);\n} catch (InterruptedException e) {\nSystem.out.println(\"I've been interrupted while updating the price\");\nreturn;\n}\n}\n}\n}\n</code></pre> <p>Si ejecutamos la aplicaci\u00f3n veremos que varios lectores pueden estar leyendo a la vez, pero s\u00f3lo uno puede estar escribiendo. Cambia los tiempos de los <code>sleep()</code> para tratar que un hilo cliente bloquee a un hilo tienda pero no a otros hilos cliente. Despu\u00e9s trata de que un hilo tienda bloquee a hilos clientes.</p>"},{"location":"bloque_v/tema_23/page-1/","title":"1 Barreras","text":""},{"location":"bloque_v/tema_23/page-1/#barreras","title":"Barreras","text":"<p>Todos los mecanismos vistos en el tema anterior correspond\u00edan a herramientas para asegurar la visibilidad (siempre se obtiene el valor actualizado) y la atomicidad (exclusi\u00f3n mutua).</p> <p>Barrera</p> <p>Elemento que permite sincronizar la ejecuci\u00f3n de varios hilos en uno o varios puntos</p> <p>Sin embargo, en este tema vamos a ver herramientas que no se usan para proteger el acceso a un recurso compartido o secci\u00f3n cr\u00edtica, sino para sincronizar la ejecuci\u00f3n de varios hilos en uno o varios puntos. Estas herramientas son conocidas como barreras (barriers).</p> <p>En un tema anterior, ya vimos una herramienta de este tipo, el m\u00e9todo <code>join()</code> de la clase <code>Thread</code>, pero dicho m\u00e9todo proporciona \u00fanicamente sincronizaci\u00f3n final, es decir sincronizarse con el momento en que otro hilo termina de ejecutarse. No permite realizar una sincronizaci\u00f3n inicial, es decir, que ambos hilos se sincronicen para empezar a trabajar, ni una sincronizaci\u00f3n en punto intermedio de ejecuci\u00f3n de ambos hilos, ni una sincronizaci\u00f3n por fases con varios puntos de sincronizaci\u00f3n.</p> <p>Para solucionar este problema, el paquete <code>java.util.concurrent</code> proporciona varias clases que permiten llevar a cabo distintos de tipos de sincronizaci\u00f3n.</p>"},{"location":"bloque_v/tema_23/page-2/","title":"2 CountDownLatch","text":""},{"location":"bloque_v/tema_23/page-2/#countdownlatch","title":"CountDownLatch","text":"<p>La API de concurrencia de Java nos proporciona la clase <code>CountDownLatch</code>, que permite a uno o m\u00e1s hilos esperar hasta que un conjunto de operaciones son ejecutadas.</p> <p>CountDownLatch</p> <p>Barrera de sincronizaci\u00f3n basada en el valor de un contador no reutilizable</p> <p>El constructor de esta clase recibe un par\u00e1metro entero que indica el n\u00famero de operaciones que los hilos deber\u00e1n esperar antes de poder continuar su ejecuci\u00f3n. Se trata, por tanto, de un sistema de control de avance (pestillo) que s\u00f3lo se abre cuando su cuenta atr\u00e1s es 0.</p> <p>Cuando un hilo ejecuta el m\u00e9todo <code>await()</code> de un objeto de esta clase, el hilo se suspende hasta que sean completadas el n\u00famero de operaciones indicadas al crear el objeto <code>CountDownLatch</code>.</p> <p> Figura 1 - CountDownLatch</p> <p>El m\u00e9todo <code>await(timeout, timeUnit)</code> est\u00e1 sobrecargado de manera que le podemos pasar el tiempo m\u00e1ximo que el hilo estar\u00e1 esperando a que finalice la cuenta atr\u00e1s del objeto <code>CountDownLatch</code>, transcurrido el cual ser\u00e1 reactivado y continuar\u00e1 su ejecuci\u00f3n aunque la cuenta atr\u00e1s no haya llegado a <code>0</code>, retornando el valor <code>false</code>. Si el contador interno llega al valor <code>0</code> el m\u00e9todo retornar\u00e1 el valor <code>true</code>.</p> <p>Como la mayor\u00eda de los m\u00e9todos bloqueantes, <code>await()</code> y <code>await(timeout, timeUnit)</code> lanzar\u00e1n la excepci\u00f3n <code>InterruptedException</code> si el hilo es interrumpido mientras estaba esperando en dichos m\u00e9todos para poder avanzar, o si ya hab\u00eda sido marcado para interrupci\u00f3n antes de ejecutarlos, reactivando inmediatamente el hilo correspondiente.</p> <p>Cada vez que termina la ejecuci\u00f3n de una de las operaciones gestionadas que afecten a la cuenta atr\u00e1s del <code>CountDownLatch</code>, debe llamarse al m\u00e9todo <code>countDown()</code> del mismo, que decrementa el contador interno del pestillo en una unidad. Cuando este contador llega a 0, la clase reactiva todos los hilos que estuvieran suspendidos por el m\u00e9todo <code>await()</code> o <code>await(timeout, timeUnit)</code>, que contin\u00faan su ejecuci\u00f3n.</p> <p>Debemos tener en cuenta que un hilo puede gestionar m\u00e1s de una operaci\u00f3n que afecte a la cuenta atr\u00e1s del <code>CountDownLatch</code> y por tanto llamar a su m\u00e9todo <code>countDown()</code> m\u00e1s de una vez. Podr\u00edamos por tanto decir que un <code>CountDownLatch</code> no sincroniza hilos en un determinado punto de ejecuci\u00f3n, sino que bloquea el avance de hilos hasta que ocurra un determinado n\u00famero de eventos, independientemente de en qu\u00e9 hilos se generen dichos eventos.</p> <p>No hay ninguna manera de reinicializar el contador interno del objeto <code>CountDownLatch</code> o de modificar directamente su valor. Una vez que el contador se inicializa al crear el objeto, el \u00fanico m\u00e9todo que modifica su valor es <code>countDown()</code>, como vimos en el p\u00e1rrafo anterior. Si que tenemos un m\u00e9todo informativo, <code>getCount()</code> que retorna el valor actual del contador interno del <code>CountDownLatch</code>.</p> <p>El objeto <code>CountDownLatch</code> admite un \u00fanico uso. Una vez que el contador interno llega a 0 todas las llamadas a sus m\u00e9todos no tienen efecto alguno, de manera que los hilos que los llaman contin\u00faan su ejecuci\u00f3n normalmente. Se tendr\u00eda que crear un nuevo objeto de dicha clase para llevar a cabo la misma sincronizaci\u00f3n de nuevo. Se dice, por tanto, que los <code>CountDownLatch</code> no son c\u00edclicos, sino que son de un solo \"tiro\" (one-shot).</p> <p>Otro aspecto curioso es que la clase <code>CountDownLatch</code> no implementa ning\u00fan modo de justicia, y que no existe una versi\u00f3n de <code>await()</code> en la que no sea posible interrumpir al hilo.</p>"},{"location":"bloque_v/tema_23/page-2/#proyecto-countdownlatch","title":"Proyecto CountDownLatch","text":"<p>En este proyecto simularemos una reuni\u00f3n de delegaciones de pa\u00edses para la que cada pa\u00eds aporta un n\u00famero de participantes. La reuni\u00f3n no puede comenzar hasta que no haya un quorum de al menos 10 participantes, independiente de qu\u00e9 pa\u00eds procedan. Para controlar que la reuni\u00f3n no comienza hasta que no haya quorum usaremos una <code>CountDownLatch</code>. Una vez haya comenzado la reuni\u00f3n las delegaciones podr\u00e1n realizar propuestas para la misma.</p> MainMeetingCountry <pre><code>import java.util.concurrent.ThreadLocalRandom;\npublic class Main {\nprivate static final int QUORUM = 10;\npublic static void main(String[] args) {\nMeeting meeting = new Meeting(QUORUM);\nnew Thread(meeting).start();\nfor (int i = 0; i &lt; 10; i++) {\nnew Thread(new Country(\nThreadLocalRandom.current().nextInt(5) + 1,\nmeeting, \"Country #\" + i)).start();\n}\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.CountDownLatch;\npublic class Meeting implements Runnable {\nprivate final CountDownLatch countDownLatch;\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\npublic Meeting(int quorum) {\ncountDownLatch = new CountDownLatch(quorum);\n}\n@Override\npublic void run() {\nSystem.out.printf(\"%s -&gt; Waiting for quorum to start the meeting\\n\",\nLocalTime.now().format(dateTimeFormatter));\ntry {\ncountDownLatch.await();\nSystem.out.printf(\"%s -&gt; We have quorum. Meeting started...\\n\",\nLocalTime.now().format(dateTimeFormatter));\n} catch (InterruptedException e) {\nSystem.out.println(\"Meeting has been interrupted while waiting to have quorum\");\n}\n}\npublic void join(int participants, String countryName) {\nSystem.out.printf(\"%s -&gt; %d participants from %s have joined the meeting\\n\",\nLocalTime.now().format(dateTimeFormatter), participants, countryName);\nfor (int i = 0; i &lt; participants; i++) {\ncountDownLatch.countDown();\n}\n}\npublic void propose(String countryName) {\nSystem.out.printf(\"%s -&gt; Delegation from %s has made some proposals\\n\",\nLocalTime.now().format(dateTimeFormatter), countryName);\n}\n}\n</code></pre> <pre><code>import java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TimeUnit;\npublic class Country implements Runnable {\nprivate final int participants;\nprivate final String countryName;\nprivate final Meeting meeting;\npublic Country(int participants, Meeting meeting, String countryName) {\nif (participants &lt; 1 || meeting == null || countryName == null) {\nthrow new IllegalArgumentException();\n}\nthis.participants = participants;\nthis.countryName = countryName;\nthis.meeting = meeting;\n}\n@Override\npublic void run() {\ntry {\ngoToMeeting();\n} catch (InterruptedException e) {\nSystem.out.println(\"I've been interrupted while going to the meeting\");\nreturn;\n}\nmeeting.join(participants, countryName);\ntry {\nmakeProposals();\n} catch (InterruptedException e) {\nSystem.out.println(\"I've been interrupted while making proposals\");\n}\n}\nprivate void goToMeeting() throws InterruptedException {\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5));\n}\nprivate void makeProposals() throws InterruptedException {\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(3));\nmeeting.propose(countryName);\n}\n}\n</code></pre> <p>Si ejecutamos el programa veremos que hasta que no haya quorum no comenzar\u00e1 la reuni\u00f3n.</p>"},{"location":"bloque_v/tema_23/page-3/","title":"3 CyclicBarrier","text":""},{"location":"bloque_v/tema_23/page-3/#cyclicbarrier","title":"CyclicBarrier","text":"<p>La API de concurrencia de Java nos proporciona la clase <code>CyclicBarrier</code>, que permite la sincronizaci\u00f3n de un n\u00famero fijo de dos o m\u00e1s hilos que deben esperarse unos a los otros en un determinado punto de sincronizaci\u00f3n com\u00fan antes de continuar su ejecuci\u00f3n. La barrera (barrier) no dejar\u00e1 avanzar a los hilos que lleguen a un determinado punto de sincronizaci\u00f3n hasta que todos hayan llegado a dicho punto.</p> <p>CyclicBarrier</p> <p>Barrera de sincronizaci\u00f3n de un n\u00famero predeterminado de hilos, que se reinicia autom\u00e1ticamente</p> <p>La gran ventaja de <code>CyclicBarrier</code> es que puede usar tanto una sincronizaci\u00f3n inicial como para una intermedia o una final.</p> <p> Figura 2 - Barrera</p> <p>El constructor de esta clase recibe un par\u00e1metro entero que indica el n\u00famero de hilos que ser\u00e1n sincronizados (denominado internamente parties). Si pasamos un valor negativo para dicho par\u00e1metro se lanzar\u00e1 la excepci\u00f3n <code>IllegalArgumentException</code>.</p> <p>Un objeto <code>CyclicBarrier</code> posee un contador interno para controlar cu\u00e1ntos hilos han llegado al punto de sincronizaci\u00f3n. Cuando uno de estos hilos llega al punto establecido, llama al m\u00e9todo <code>await()</code> para esperar al resto de los hilos, de manera que queda suspendido.</p> <p>El m\u00e9todo <code>await(timeout, timeUnit)</code> est\u00e1 sobrecargado de manera que recibe un tiempo m\u00e1ximo de espera, transcurrido el cu\u00e1l el hilo es reactivado autom\u00e1ticamente y se lanza la excepci\u00f3n <code>TimeoutException</code>. Si el <code>timeout</code> pasado al m\u00e9todo es menor o igual que 0, el hilo no esperar\u00e1.</p> <p>Tanto <code>await()</code> como <code>await(timeout, timeUnit)</code> retornan el orden en el que el hilo ha llegado a la barrera, donde el primer en llegar recibe el valor <code>participantes - 1</code> y el \u00faltimo en llegar recibe el valor <code>0</code>.</p> <p>Cuando el \u00faltimo de los hilos llama al m\u00e9todo <code>await()</code> del objeto <code>CyclicBarrier</code>, es decir, cuando el contador interno llega a <code>0</code>, se dice que se \"abre la barrera\" y el resto de hilos que estaban esperando en la misma son reactivados y contin\u00faan su ejecuci\u00f3n.</p> <p> Figura 3 - CyclicBarrier</p> <p>Como la mayor\u00eda de los m\u00e9todos bloqueantes, <code>await()</code> y <code>await(timeout, timeUnit)</code> lanzan la excepci\u00f3n <code>InterruptedException</code> si el hilo es interrumpido mientras est\u00e1 esperando en la barrera o si ya hab\u00eda sido marcado para interrupci\u00f3n antes de llamar a estos m\u00e9todos, de manera que el hilo es reactivado inmediatamente.</p> <p>Pero entonces, \u00bfqu\u00e9 ocurre entonces con los otros hilos que estaban esperando en la barrera? Dado que un hilo ha sido interrumpido podemos afirmar que las condiciones que deb\u00edan de darse para permitir avanzar a los hilos no van a poder darse, porque el contador interno de la barrera no podr\u00e1 llegar a 0. En ese caso, podemos decir que la barrera \"se ha roto\", pasando a un estado interno conocido como broken.</p> <p>Igualmente, si en un hilo que est\u00e1 ejecutando el m\u00e9todo <code>await(timeout, timeUnit)</code> se lanza la excepci\u00f3n <code>TimeoutException</code> porque el hilo haya esperado \"demasiado\", la barrera quedar\u00e1 \"rota\".</p> <p>Cuando una barrera \"se rompe\" los hilos que estuvieran esperando en dicha barrera son reactivados autom\u00e1ticamente lanzando la excepci\u00f3n <code>BrokenBarrierException</code>. Podemos saber si una barrera est\u00e1 rota llamando al m\u00e9todo <code>isBroken()</code>.</p> <p>Si un hilo llama al m\u00e9todo <code>await()</code> o <code>await(timeout, timeUnit)</code> una vez que la barrera ha sido marcada como rota, el hilo no ser\u00e1 bloqueado y se lanzar\u00e1 directamente la excepci\u00f3n <code>BrokenBarrierException</code>.</p> <p>Un aspecto interesante de la clase <code>CyclicBarrier</code> es que su constructor puede recibir un par\u00e1metro adicional consistente en un objeto <code>Runnable</code> que ser\u00e1 ejecutado autom\u00e1ticamente cuando el \u00faltimo de los hilos participantes haya indicado que han llegado a la barrera ejecutando el m\u00e9todo <code>await()</code> o <code>await(timeout, timeUnit)</code>. La tarea representada por el <code>Runnable</code> ser\u00e1 ejecutada en dicho hilo antes reactivar a los hilos que estaban esperando en la barrera para que contin\u00faen con su ejecuci\u00f3n. Suele emplearse para actualizar un estado com\u00fan a todos los hilos antes de que estos puedan continuar su ejecuci\u00f3n.</p> <p>Si se produjera una excepci\u00f3n no gestionada en el objeto <code>Runnable</code> la excepci\u00f3n ser\u00e1 propagada a dicho hilo y la barrera pasar\u00e1 al estado de rota, lanzando la excepci\u00f3n <code>BrokenBarrierException</code> en el resto de hilos que estaban esperando en la barrera.</p> <p>Debemos tener en cuenta que un objeto <code>CyclicBarrier</code> corresponde, como su nombre indica, a una barrera c\u00edclica. Esto quiere decir, que el contador interno es reseteado autom\u00e1ticamente a su valor inicial cuando todos los hilos participantes llegan a punto de sincronizaci\u00f3n y llaman al m\u00e9todo <code>await()</code> o <code>await(timeout, timeUnit)</code>, siempre y cuando la barrera no se encuentre o pase al estado de rota. Por tanto podremos reutilizar el mismo objeto <code>CyclicBarrier</code> para volver a sincronizar m\u00e1s adelante a los mismos hilos en un punto de sincronizaci\u00f3n posterior.</p> <p>En algunas ocasiones complejas es necesario reiniciar el proceso de sincronizaci\u00f3n de la barrera como si nada hubiera ocurrido. Para ello se necesita resetear expl\u00edcitamente el contador interno de la barrera a su valor inicial, para lo que podemos usar el m\u00e9todo <code>reset()</code>. Debemos tener en cuenta que en cuanto un hilo llama al m\u00e9todo <code>reset()</code> de la barrera los hilos que estuvieran esperando en la misma ser\u00e1n reactivados inmediatamente y se lanzar\u00e1 en ellos la excepci\u00f3n <code>BrokenBarrierException</code>. En general la operaci\u00f3n de reseteo puede ser compleja de gestionar por lo que puede resultar m\u00e1s conveniente simplemente crear un nuevo objeto <code>CyclicBarrier</code>.</p> <p>El objeto <code>CyclicBarrier</code> presenta una serie de diferencias importantes respecto a <code>CountDownLatch</code>:</p> <ul> <li><code>CyclicBarrier</code> sincroniza hilos en un determinado punto de ejecuci\u00f3n, mientras <code>CountDownLatch</code> bloquea el avance de hilos hasta que ocurra un determinado n\u00famero de eventos, independientemente de en qu\u00e9 hilos se generen dichos eventos. Dicho de manera sencilla, cada hilo participante en un <code>CyclicBarrier</code> s\u00f3lo puede aportar un \u00fanico evento (y no varios).</li> <li>Una <code>CyclicBarrier</code> es por definici\u00f3n c\u00edclica, mientras que un <code>CountDownLatch</code> no puede ser reutilizado para una segunda sincronizaci\u00f3n una vez que su contador interno llega a <code>0</code>.</li> <li>Podemos resetear expl\u00edcitamente una <code>CyclicBarrier</code>, mientras que los <code>CountDownLatch</code> no pueden ser reseteados.</li> </ul> <p>Otra caracter\u00edstica importante de la clase <code>CyclicBarrier</code> es que no se permite incrementar o decrementar din\u00e1micamente el n\u00famero de hilos que deben sincronizarse en la barrera, sino que la barrera siempre funcionar\u00e1 con el n\u00famero de hilos que le hayamos indicado en el constructor.</p> <p>La clase <code>CyclicBarrier</code> posee tambi\u00e9n una serie de m\u00e9todos informativos sobre el estado de la barrera, como:</p> <ul> <li><code>getNumberWaiting()</code>: Retorna el n\u00famero de hilos que est\u00e1n suspendidos en la barrera.</li> <li><code>getParties()</code>: Retorna el n\u00famero de hilos participantes que van a ser sincronizados en la barrera.</li> </ul>"},{"location":"bloque_v/tema_23/page-3/#proyecto-cyclicbarrier","title":"Proyecto CyclicBarrier","text":"<p>En este proyecto desarrollaremos una aplicaci\u00f3n que simula tres amigos que quedan en un bar para tomar dos cervezas. Como son bueno amigos, ninguno de ellos empieza a beber la primera cerveza hasta que todos han llegado al bar. De igual forma, hasta que todos no se han bebido la primera cerveza, ninguno comienza a beberse la segunda cerveza. Finalmente, cuando todos han terminado la segunda cerveza, los amigos se van cada uno a su casa. Para llevar a cabo la sincronizaci\u00f3n entre los amigos usaremos un objeto <code>CyclicBarrier</code> y lo configuraremos de manera que cada vez que los amigos dejen de esperarse se lance un mensaje de cambio de actividad.</p> MainFriendOpenedBarrierAction <pre><code>import java.util.concurrent.CyclicBarrier;\npublic class Main {\nprivate static final int NUMBER_OF_FRIENDS = 3;\npublic static void main(String[] args) {\nCyclicBarrier cyclicBarrier = new CyclicBarrier(NUMBER_OF_FRIENDS,\nnew OpenedBarrierAction());\nfor (int i = 0; i &lt; NUMBER_OF_FRIENDS; i++) {\nnew Thread(new Friend(\"Friend #\" + i, cyclicBarrier), \"Friend #\" + i).start();\n}\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Objects;\nimport java.util.concurrent.BrokenBarrierException;\nimport java.util.concurrent.CyclicBarrier;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TimeUnit;\npublic class Friend implements Runnable {\nprivate final String name;\nprivate final CyclicBarrier cyclicBarrier;\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\npublic Friend(String name, CyclicBarrier cyclicBarrier) {\nObjects.requireNonNull(name);\nObjects.requireNonNull(cyclicBarrier);\nthis.name = name;\nthis.cyclicBarrier = cyclicBarrier;\n}\n@Override\npublic void run() {\ntry {\ngoToPub();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while going to the pub\\n\", name);\nreturn;\n}\ntry {\ncyclicBarrier.await();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while waiting for friends in the pub\\n\", name);\nreturn;\n} catch (BrokenBarrierException e) {\nSystem.out.printf(\"%s doesn't wait any more for friends in the pub because someone isn't coming\\n\", name);\n}\ntry {\nfirstBeerInPub();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while drinking the first beer\\n\", name);\nreturn;\n}\ntry {\ncyclicBarrier.await();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while waiting for friends to finish their fist beer\\n\", name);\nreturn;\n} catch (BrokenBarrierException e) {\nSystem.out.printf(\"%s doesn't wait any more for friends to finish their first beer because someone isn't going to finish it\\n\", name);\n}\ntry {\nsecondBeerInPub();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while drinking the second beer\\n\", name);\nreturn;\n}\ntry {\ncyclicBarrier.await();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while waiting for friends to finish their second beer\\n\", name);\nreturn;\n} catch (BrokenBarrierException e) {\nSystem.out.printf(\"%s doesn't wait any more for friends to finish their second beer because someone isn't going to finish it\\n\", name);\n}\ntry {\ngoHome();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while going back home\\n\", name);\n}\n}\nprivate void goToPub() throws InterruptedException {\nSystem.out.printf(\"%s -&gt; %s is leaving home\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5) + 1);\nSystem.out.printf(\"%s -&gt; %s has arrived in the pub\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\n}\nprivate void firstBeerInPub() throws InterruptedException {\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5) + 1);\nSystem.out.printf(\"%s -&gt; %s has finished the first beer\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\n}\nprivate void secondBeerInPub() throws InterruptedException {\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5) + 1);\nSystem.out.printf(\"%s -&gt; %s has finished the first beer\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\n}\nprivate void goHome() throws InterruptedException {\nSystem.out.printf(\"%s -&gt; %s is leaving the pub\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5) + 1);\nSystem.out.printf(\"%s -&gt; %s is at home\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Locale;\npublic class OpenedBarrierAction implements Runnable {\nprivate final DateTimeFormatter dateTimeFormatter =\nDateTimeFormatter.ofPattern(\"HH:mm:ss\", Locale.getDefault());\n@Override\npublic void run() {\nSystem.out.printf(\"%s -&gt; Phase change (executed in %s)\\n\",\nLocalTime.now().format(dateTimeFormatter), Thread.currentThread().getName());\n}\n}\n</code></pre> <p>Si ejecutamos el programa veremos que unos amigos se esperan a los otros.</p>"},{"location":"bloque_v/tema_23/page-4/","title":"4 Phaser","text":""},{"location":"bloque_v/tema_23/page-4/#phaser","title":"Phaser","text":"<p>Una de las funcionalidades m\u00e1s potentes de la API de concurrencia de Java es la posibilidad de ejecutar tareas concurrentes que se sincronicen en distintas fases, para lo que utiliza la clase <code>Phaser</code> (secuenciador por fases).</p> <p>Phaser</p> <p>Barrera de sincronizaci\u00f3n de un n\u00famero variable de hilos que se reinicia autom\u00e1ticamente</p> <p>Este mecanismo es \u00fatil cuando las tareas concurrentes se dividen en varias fases (pasos o etapas). La clase <code>Phaser</code> nos proporciona el mecanismo para sincronizar los hilos al final de cada fase, de manera que ning\u00fan hilo comienza una nueva fase hasta que todos los hilos hayan concluido la fase anterior.</p> <p>Internamente, un objeto <code>Phaser</code> mantiene cuatro datos muy importantes para su funcionamiento:</p> <ul> <li>phase: N\u00famero de fase en el que se encuentra. Inicialmente vale 0.</li> <li>registered parties: N\u00famero de participantes registrados para participar en la siguiente fase.</li> <li>unarrived: N\u00famero de participantes que a\u00fan no han concluido la fase actual. Al comenzar una fase se reinicializa su valor al correspondiente a registered parties.</li> <li>terminated: Indicador booleano de si el proceso de sincronizaci\u00f3n a trav\u00e9s del Phaser se puede considerar como terminado o no. Su valor inicial es false.</li> </ul> <p>A diferencia de con otros tipos de barreras, como <code>CyclicBarrier</code>, el n\u00famero de hilos participantes en una sincronizaci\u00f3n con <code>Phaser</code> puede variar durante el proceso de sincronizaci\u00f3n.</p> <p>Para indicar el n\u00famero inicial de hilos participantes registrados podemos pasar un valor entero al constructor <code>Phaser(parties)</code> de la clase <code>Phaser</code>. Si le pasamos un valor negativo se lanzar\u00e1 la excepci\u00f3n <code>IllegalArgumentException</code>. Dicho valor ser\u00e1 establecido como valor inicial de unarrived y de registered parties.</p> <p>Si usamos el constructor vac\u00edo <code>Phaser()</code>, el valor de unarrived y de registered parties ser\u00e1 inicializado a 0.</p> <p>A diferencia de los <code>CyclicBarrier</code>, los propios hilos pueden registrarse como participantes en la sincronizaci\u00f3n, para lo que llamar\u00e1n al m\u00e9todo <code>register()</code>, que registra un nuevo participante en la fase actual, o al m\u00e9todo <code>bulkRegister(parties)</code>, que registra el n\u00famero de hilos indicados como participantes de la fase actual. Estos m\u00e9todos retornan el n\u00famero de fase en el que se han registrado (el valor actual de phase).</p> <p>En ambos casos, los hilos registrados son contabilizados como hilos que a\u00fan no han concluido la fase actual, incrementando el valor de unarrived, y como hilos registrados para la pr\u00f3xima fase, incrementando el valor de registered parties.</p> <p>Si el proceso de sincronizaci\u00f3n ya ha sido marcada como terminado para cuando el hilo se registra, es decir, si el valor de terminated es true para cuando un hilo llama a <code>register()</code> o <code>bulkRegister(parties)</code>, estos m\u00e9todos no tendr\u00e1n ning\u00fan efecto sobre los hilos ni sobre el <code>Phaser</code>, y retornar\u00e1n un valor negativo como n\u00famero de fase.</p> <p>Si un hilo trata de registrarse justo en el momento de un cambio de fase, es decir, como veremos m\u00e1s adelante, mientras se est\u00e1 ejecutando el m\u00e9todo <code>onAdvance()</code> del <code>Phaser</code>, el registro de los nuevos hilo esperar\u00e1 hasta que dicho m\u00e9todo concluya su ejecuci\u00f3n, registrando a los hilos como participantes de la nueva fase.</p> <p>El hecho de que los propios hilos puedan registrarse en el proceso de sincronizaci\u00f3n otorga una flexibilidad adicional que no posee CyclicBarrier. Gracias a ello, si usamos Phaser no tenemos por qu\u00e9 saber de antemano el n\u00famero de hilos a sincronizar, ya que cada uno de ellos puede registrarse personalmente, algo que no era posible en el caso de CyclicBarrier.</p> <p>Cada vez que un hilo concluye una fase debe informar de ello al <code>Phaser</code>. Dicha operaci\u00f3n se denomina arrive. Por otra parte, si queremos que el hilo espere a que el resto de hilos concluya la fase actual del <code>Phaser</code> deber\u00e1 de comunic\u00e1rselo expresamente a trav\u00e9s de una operaci\u00f3n conocida como await advance. Esta es otra de las diferencias principales respecto a otro tipos de barreras, en las que ambas operaciones, la indicaci\u00f3n de haber llegado a la barrera y la operaci\u00f3n de esperar al resto de hilos que deben llegar a la barrera correspond\u00eda a una \u00fanica operaci\u00f3n indivisible, como en el caso del m\u00e9todo <code>await()</code> de <code>CyclicBarrier</code>.</p> <p>La clase <code>Phaser</code> nos ofrece distintos m\u00e9todos para llevar a cabo las operaciones arrive y await advance. El primero de ellos es el m\u00e9todo <code>arrive()</code>, mediante el que un hilo informa al <code>Phaser</code> de que ha concluido la fase actual del mismo, sin ponerse a esperar a que el resto de hilos lo haga. Como consecuencia el <code>Phaser</code> decrementar\u00e1 el valor de unarrived. Este m\u00e9todo retorna la fase actual del <code>Phaser</code> a la que el hilo ha llegado, o un valor negativo si el <code>Phaser</code> ya ha sido marcado como terminado, es decir, si terminated es true.</p> <p>Gracias a esta separaci\u00f3n entre las operaciones arrive y await advance, el n\u00famero de participantes no tiene por qu\u00e9 corresponder obligatoriamente con el n\u00famero de hilos a sincronizar, aunque lo habitual es que coincidan.</p> <p>Como complemento a <code>arrive()</code>, tenemos el m\u00e9todo <code>awaitAdvance(phase)</code>, que permite al hilo indicar que desea esperar a que los hilos concluyan la fase pasada como argumento, es decir, a que el valor de unarrived sea 0. Si el <code>Phaser</code> no se encuentra en ese momento en dicha fase, o ya ha sido marcado como terminado (terminated es true), el m\u00e9todo no bloquear\u00e1 al hilo que lo ejecuta, retornando inmediatamente.</p> <p>El valor proporcionado como argumento a <code>awaitAdvance(phase)</code> provendr\u00e1 normalmente del valor retornado por una llamada anterior al m\u00e9todo <code>arrive()</code>. De hecho, si queremos realizar ambas operaciones arrive y await advance seguidas una detr\u00e1s de la otra har\u00edamos <code>awaitAdvance(arrive())</code>.</p> <p>Como esta opci\u00f3n de hacer ambas operaciones una seguida de la otra es la m\u00e1s habitual, la clase <code>Phaser</code> proporciona un m\u00e9todo para ejecutarlas con una \u00fanica llamada, a trav\u00e9s del m\u00e9todo <code>arriveAndAwaitAdvance()</code>, que informa de que el hilo la concluido la fase actual del <code>Phaser</code> (arrive), decrementando unarrived, y lo suspende hasta que todos los hilos participantes en dicha fase de la sincronizaci\u00f3n hayan informado de que la han concluido (awaitAdvance). Como vemos, el funcionamiento del m\u00e9todo <code>arriveAndAwaitAdvance()</code> es similar al del m\u00e9todo <code>await()</code> de un <code>CyclicBarrier</code>.</p> <p>Otra opci\u00f3n disponible para los hilos es indicar que se ha concluido la fase actual y que ya no se quiere participar en el resto de fases de la sincronizaci\u00f3n, por lo que ni siquiera va a esperar al resto de hilos. Para ello har\u00e1 uso del m\u00e9todo <code>arriveAndDeregister()</code>, que decrementa el valor de unarrived y adem\u00e1s hace que en las siguientes fases de la sincronizaci\u00f3n haya un participante menos, decrementando el valor de registered parties.</p> <p>Este m\u00e9todo es usado habitualmente por el hilo que controla la inicializaci\u00f3n del Phaser, por ejemplo el hilo principal, que desea coordinador el inicio del proceso de ejecuci\u00f3n de los otros hilos, como veremos m\u00e1s adelante en un ejemplo en el que se usa el Phaser como barrera inicial.</p> <p>Es importante que cuando un hilo ya no quiera participar en las siguientes fases de la sincronizaci\u00f3n haga <code>arriveAndDeregister()</code> ya que si tan s\u00f3lo hace <code>arrive()</code> no decrementar\u00e1 registered parties, afectando al correcto funcionamiento del <code>Phaser</code> y del resto de hilos que contin\u00faen en la sincronizaci\u00f3n, que estar\u00e1n esperando a que dicho hilo haga el arrive en la fase siguiente para poder continuar.</p> <p> Figura 4 - Phaser</p> <p>Los m\u00e9todos <code>arrive()</code>, <code>awaitAdvance()</code>, <code>arriveAndAwaitAdvance()</code> y <code>arriveAndDeregister()</code> no se ven afectados por el hecho de que el hilo ya estuviera marcado para interrupci\u00f3n.</p> <p>Adem\u00e1s, los m\u00e9todos <code>arriveAndAwaitAdvance()</code> y <code>awaitAdvance()</code> ni siquiera se ven afectados por el hecho de que el hilo sea interrumpido mientras est\u00e1 esperando a que el resto de hilos concluyan la fase actual del <code>Phaser</code>. Si queremos que se lance la interrupci\u00f3n <code>InterruptedException</code> en este caso, deberemos usar el m\u00e9todo <code>awaitAdvanceInterruptibly(phase)</code> o la versi\u00f3n con timeout explicado en el siguiente p\u00e1rrafo.</p> <p>El m\u00e9todo <code>awaitAdvanceInterruptibly(phase, timeout, timeUnit)</code> se encuentra sobrecargado para indicar un tiempo m\u00e1ximo que deseamos que el hilo sea suspendido en espera de que el resto de hilos concluyan la fase actual del <code>Phaser</code>, transcurrido el cu\u00e1l se lanzar\u00e1 la excepci\u00f3n <code>TimeoutException</code> y el hilo ser\u00e1 reactivado inmediatamente.</p> <p>A diferencia de en el caso de <code>CyclicBarrier</code>, en el que la generaci\u00f3n de la excepci\u00f3n <code>InterruptedException</code> o de <code>TimeoutException</code> en el m\u00e9todo <code>await()</code> produc\u00eda que la barrera fuera marcada como rota, la generaci\u00f3n de la excepci\u00f3n <code>InterruptedException</code> en los m\u00e9todos anteriores del <code>Phaser</code> no produce ning\u00fan cambio de estado en el mismo.</p> <p>Todos los m\u00e9todos vistos con anterioridad para realizar las operaciones de arrive y await advance retornan el n\u00famero de fase en el que se encuentra el <code>Phaser</code> cuando se llaman, o un valor negativo si la sincronizaci\u00f3n ya hab\u00eda concluido para cuando se llama a estos m\u00e9todos, es decir, cuando el <code>Phaser</code> ya hab\u00eda sido marcado como terminado.</p> <p>Cuando el hecho de que un hilo ejecute la operaci\u00f3n arrive hace el valor de unarrived pase a ser 0, se considera que la fase actual ha concluido, y en dicho hilo se ejecuta el m\u00e9todo <code>onAdvance(phase, registeredParties)</code> del <code>Phaser</code>, que recibe el n\u00famero de fase que se acaba de concluir y el n\u00famero de hilos que est\u00e1n registrados para la pr\u00f3xima fase. Al cambiar de fase, unarrived se reinicializa al valor de registered parties y el valor de phase es incrementado en una unidad.</p> <p>El m\u00e9todo <code>onAdvance()</code> debe retornar un valor booleano indicativo de si el proceso de sincronizaci\u00f3n o ha concluido o no y por tanto si el <code>Phaser</code> debe ser marcado como terminado, activando el valor terminated. La implementaci\u00f3n por defecto de este m\u00e9todo retornar\u00e1 <code>false</code>, a no ser que el n\u00famero de participantes registrados para la nueva fase sea <code>0</code>:</p> <pre><code>// Default implementation of onAdvance\nprotected boolean onAdvance(int phase, int registeredParties) {\nreturn registeredParties == 0;\n}\n</code></pre> <p>Si se produce una excepci\u00f3n en este m\u00e9todo, dicha excepci\u00f3n ser\u00e1 propagada al hilo que propici\u00f3 su ejecuci\u00f3n al concluir la fase y el <code>Phaser</code> no avanzar\u00e1 a la siguiente fase.</p> <p>Para saber si un <code>Phaser</code> ha sido marcado como terminado podemos usar el m\u00e9todo <code>isTerminated()</code>. Si queremos forzar el marcado como terminado del <code>Phaser</code> podemos usar su m\u00e9todo <code>forceTermination()</code>, que establece el valor true en terminated, independientemente del n\u00famero de participantes que hayan ejecutado el m\u00e9todo <code>arriveAndDeregister()</code>, o de que hayamos sobrescrito el m\u00e9todo <code>onAdvance()</code>. Si hab\u00eda hilos esperando que otros finalizaran la fase actual, son reactivados.</p> <p>Cuando un objeto <code>Phaser</code> entra en este estado de terminaci\u00f3n, es decir cuando terminated es true, los m\u00e9todos relacionados con la operaci\u00f3n await advance retornan un valor negativo, en vez del valor positivo correspondiente al n\u00famero de fase actual que retornan habitualmente, algo que deberemos comprobar cuando el objeto <code>Phaser</code> pueda ser terminado abruptamente.</p> <p>La clase <code>Phaser</code> define adem\u00e1s una serie de m\u00e9todos informativos que nos permiten hacer un seguimiento del estado del mismo:</p> <ul> <li><code>getPhase()</code>: Retorna la fase en la que se encuentra el <code>Phaser</code>.</li> <li><code>getRegisteredParties()</code>: Retorna el n\u00famero de participantes registrados en la fase actual del <code>Phaser</code>.</li> <li><code>getArrivedParties()</code>: Retorna el n\u00famero de participantes que han concluido la fase actual del <code>Phaser</code>.</li> <li><code>getUnarrivedParties()</code>: Retorna el n\u00famero de participantes registrados que no han concluido a\u00fan la fase actual del <code>Phaser</code>.</li> </ul> <p>Veamos distintos casos de uso de <code>Phaser</code>.</p>"},{"location":"bloque_v/tema_23/page-4/#phaser-como-barrera-de-sincronizacion","title":"Phaser como barrera de sincronizaci\u00f3n","text":"<pre><code>void runTasks(List&lt;Runnable&gt; tasks) {\n// The thread than calls runTasks creates the Phaser and registers itself.\nfinal Phaser phaser = new Phaser(1);\n// Create and starts the tasks\nfor (final Runnable task : tasks) {\n// Register the task. It must be done before running the tasks, so they\n// can wait each other.\nphaser.register();\nnew Thread() {\npublic void run() {\n// The first thing each task does is awaiting creation of all tasks.\nphaser.arriveAndAwaitAdvance();\ntask.run();\n}\n}.start();\n}\n// After registering the task the thread that calls runTasks can continue\n// without any later synchronization\nphaser.arriveAndDeregister();\n}\n</code></pre> <p>Como vemos el c\u00f3digo anterior es bastante parecido al funcionamiento de una CyclicBarrier que act\u00fae como barrera inicial. Sin embargo el uso de Phaser lo hace m\u00e1s flexible, porque no tenemos por qu\u00e9 saber de antemano el n\u00famero de hilos a sincronizar, ya que cada uno de ellos puede registrarse, algo que no era posible en el caso de CyclicBarrier.</p>"},{"location":"bloque_v/tema_23/page-4/#phaser-como-barrera-ciclica-con-un-numero-de-ciclos","title":"Phaser como barrera c\u00edclica con un n\u00famero de ciclos","text":"<pre><code>void startTasks(List&lt;Runnable&gt; tasks, final int iterations) {\n// The thread that calls startTasks creates and custom phaser is marked\n// as terminated when the number of iterations is done or no\n// parties are registered.\nfinal Phaser phaser = new Phaser() {\nprotected boolean onAdvance(int phase, int registeredParties) {\nreturn phase &gt;= iterations || registeredParties == 0;\n}\n};\n// The thread that calls startTasks register itself and each task before\n// stating them\nphaser.register();\nfor (final Runnable task : tasks) {\nphaser.register();\nnew Thread() {\npublic void run() {\ndo {\n// Each task runs and then await to the rest to advance\n// to the next iteration until the phaser is terminated.\ntask.run();\nphaser.arriveAndAwaitAdvance();\n} while (!phaser.isTerminated());\n}\n}.start();\n}\n// The thread that calls startTasks can continue without any later synchronization\nphaser.arriveAndDeregister();\n}\n</code></pre>"},{"location":"bloque_v/tema_23/page-4/#proyecto-phaser","title":"Proyecto Phaser","text":"<p>En este proyecto desarrollaremos una aplicaci\u00f3n que simula una conjunto de amigos que han quedado para tomar unas cervezas en un pub. El plan consiste en salir de casa y quedar en el pub, esperando a que lleguen todos los amigos para tomar la primera cerveza. Cuando todos hayan terminado de beber la primera cerveza, se tomar\u00e1n una segunda cerveza, y cuando todos se la hayan tomado, se despedir\u00e1n y se ir\u00e1n a casa.</p> <p>En esta demo tendremos diferentes tipos de amigos:</p> <ul> <li>Tres amigos que realizan al completo todas las fases cumpliendo con las esperas de rigor (friend #0, #1 y #2, representados por la clase Friend).</li> <li>Un amigo impaciente que realizar al completo todas la fases pero que no piensa esperar a nadie (friend #3, representado por la clase ImpacientFriend).</li> <li>Un amigo que s\u00f3lo se tomar\u00e1 una cerveza, pero que esperar\u00e1 a los amigos en el pub y esperar\u00e1 a que se terminen la primera cerveza antes de irse a casa (friend #4, representado por la clase OneBeerFriend).</li> <li>Un amigo que va a unirse m\u00e1s tarde, y que se tomar\u00e1 las cervezas que pueda dependiendo que cuando haya informado a los amigos de su incorporaci\u00f3n. Los amigos respetuosos lo esperar\u00e1n en la fase en la que se encuentren (friend #5, representado por la clase TardyFriend).</li> <li>Un amigo que para cuando trata de unirse es demasiado tarde porque el resto de amigos ya no est\u00e1n tomando cervezas (friend #6, representado tambi\u00e9n por la clase TardyFriend, pero que ser\u00e1 lanzado mucho m\u00e1s tarde, cuando el phaser ya se encuentre terminado).</li> </ul> <p>Para la sincronizaci\u00f3n se crear\u00e1 una clase que extienda de <code>Phaser</code> en la que sobrescribiremos el m\u00e9todo <code>onAdvance()</code> para mostrar mensajes personalizados cuando se cambie de fase, y que de por terminada la secuenciaci\u00f3n cuando los amigos se terminen la segunda cerveza.</p> MainFriendPhaserFriendImpatientFriendOneBeerFriendTardyFriend <pre><code>import java.util.concurrent.TimeUnit;\npublic class Main {\nprivate static final int NORMAL_FRIENDS = 3;\npublic static void main(String[] args) throws InterruptedException {\nint i;\nFriendsPhaser phaser = new FriendsPhaser();\nfor (i = 0; i &lt; NORMAL_FRIENDS; i++) {\nnew Thread(new Friend(\"Friend #\" + i, phaser), \"Friend #\" + i).start();\n}\n// This friend won't wait for anybody.\nnew Thread(new ImpacientFriend(\"Friend #\" + i, phaser), \"Friend #\" + i).start();\ni++;\n// This friend will drink just one beer and will go home.\nnew Thread(new OneBeerFriend(\"Friend #\" + i, phaser), \"Friend #\" + i).start();\ni++;\n// This friend will join be late, maybe when other friends are drinking.\nTimeUnit.SECONDS.sleep(9);\nnew Thread(new TardyFriend(\"Friend #\" + i, phaser), \"Friend #\" + i).start();\ni++;\n// This friend will join very very late.\nTimeUnit.SECONDS.sleep(12);\nnew Thread(new TardyFriend(\"Friend #\" + i, phaser), \"Friend #\" + i).start();\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.Phaser;\npublic class FriendsPhaser extends Phaser {\npublic static final int ARRIVE_TO_PUB_PHASE = 0;\npublic static final int FINISH_FIST_BEER_PHASE = 1;\npublic static final int FINISH_SECOND_BEER_PHASE = 2;\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\n@Override\nprotected boolean onAdvance(int phase, int registeredParties) {\nswitch (phase) {\ncase ARRIVE_TO_PUB_PHASE:\nSystem.out.printf(\"%s -&gt; All %d friends arrived to pub (executed in %s)\\n\",\nLocalTime.now().format(dateTimeFormatter), registeredParties,\nThread.currentThread().getName());\nbreak;\ncase FINISH_FIST_BEER_PHASE:\nSystem.out.printf(\"%s -&gt; All %d friends finished their first beer (executed in %s)\\n\",\nLocalTime.now().format(dateTimeFormatter), registeredParties,\nThread.currentThread().getName());\nbreak;\ncase FINISH_SECOND_BEER_PHASE:\nSystem.out.printf(\"%s -&gt; All %d friends finished their second beer (executed in %s)\\n\",\nLocalTime.now().format(dateTimeFormatter), registeredParties,\nThread.currentThread().getName());\n// The phaser is marked as terminated.\nreturn true;\n}\nreturn super.onAdvance(phase, registeredParties);\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Objects;\nimport java.util.concurrent.Phaser;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TimeUnit;\npublic class Friend implements Runnable {\nprivate final String name;\nprivate final Phaser phaser;\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\npublic Friend(String name, Phaser phaser) {\nObjects.requireNonNull(name);\nObjects.requireNonNull(phaser);\nthis.name = name;\nthis.phaser = phaser;\n}\n@Override\npublic void run() {\nphaser.register();\ntry {\ngoToPub();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while going to the pub\\n\", name);\nreturn;\n}\ntry {\nphaser.awaitAdvanceInterruptibly(phaser.arrive());\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while waiting for friends in the pub\\n\", name);\nreturn;\n}\ntry {\nfirstBeerInPub();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while drinking the first beer\\n\", name);\nreturn;\n}\ntry {\nphaser.awaitAdvanceInterruptibly(phaser.arrive());\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while waiting for friends to finish their fist beer\\n\", name);\nreturn;\n}\ntry {\nsecondBeerInPub();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while drinking the second beer\\n\", name);\nreturn;\n}\ntry {\nphaser.awaitAdvanceInterruptibly(phaser.arrive());\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while waiting for friends to finish their second beer\\n\", name);\nreturn;\n}\ntry {\ngoHome();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while going back home\\n\", name);\n}\n}\nprivate void goToPub() throws InterruptedException {\nSystem.out.printf(\"%s -&gt; %s is leaving home\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5) + 1);\nSystem.out.printf(\"%s -&gt; %s has arrived in the pub\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\n}\nprivate void firstBeerInPub() throws InterruptedException {\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5) + 1);\nSystem.out.printf(\"%s -&gt; %s has finished the first beer\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\n}\nprivate void secondBeerInPub() throws InterruptedException {\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5) + 1);\nSystem.out.printf(\"%s -&gt; %s has finished the second beer\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\n}\nprivate void goHome() throws InterruptedException {\nSystem.out.printf(\"%s -&gt; %s is leaving the pub\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5) + 1);\nSystem.out.printf(\"%s -&gt; %s is at home\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Objects;\nimport java.util.concurrent.Phaser;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TimeUnit;\npublic class ImpacientFriend implements Runnable {\nprivate final String name;\nprivate final Phaser phaser;\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\npublic ImpacientFriend(String name, Phaser phaser) {\nObjects.requireNonNull(name);\nObjects.requireNonNull(phaser);\nthis.name = name;\nthis.phaser = phaser;\n}\n@Override\npublic void run() {\nphaser.register();\ntry {\ngoToPub();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while going to the pub\\n\", name);\nreturn;\n}\nphaser.arriveAndDeregister();\ntry {\nfirstBeerInPub();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while drinking the first beer\\n\", name);\nreturn;\n}\ntry {\nsecondBeerInPub();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while drinking the second beer\\n\", name);\nreturn;\n}\ntry {\ngoHome();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while going back home\\n\", name);\n}\n}\nprivate void goToPub() throws InterruptedException {\nSystem.out.printf(\"%s -&gt; %s is leaving home\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5) + 1);\nSystem.out.printf(\"%s -&gt; %s has arrived in the pub\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\n}\nprivate void firstBeerInPub() throws InterruptedException {\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5) + 1);\nSystem.out.printf(\"%s -&gt; %s has finished the first beer\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\n}\nprivate void secondBeerInPub() throws InterruptedException {\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5) + 1);\nSystem.out.printf(\"%s -&gt; %s has finished the second beer\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\n}\nprivate void goHome() throws InterruptedException {\nSystem.out.printf(\"%s -&gt; %s is leaving the pub\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5) + 1);\nSystem.out.printf(\"%s -&gt; %s is at home\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Objects;\nimport java.util.concurrent.Phaser;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TimeUnit;\npublic class OneBeerFriend implements Runnable {\nprivate final String name;\nprivate final Phaser phaser;\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\npublic OneBeerFriend(String name, Phaser phaser) {\nObjects.requireNonNull(name);\nObjects.requireNonNull(phaser);\nthis.name = name;\nthis.phaser = phaser;\n}\n@Override\npublic void run() {\nphaser.register();\ntry {\ngoToPub();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while going to the pub\\n\", name);\nreturn;\n}\ntry {\nphaser.awaitAdvanceInterruptibly(phaser.arrive());\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while waiting for friends in the pub\\n\", name);\nreturn;\n}\ntry {\nfirstBeerInPub();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while drinking the first beer\\n\", name);\nreturn;\n}\ntry {\nphaser.awaitAdvanceInterruptibly(phaser.arrive());\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while waiting for friends to finish their fist beer\\n\", name);\nreturn;\n}\n// No more beers.\nphaser.arriveAndDeregister();\ntry {\ngoHome();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while going back home\\n\", name);\n}\n}\nprivate void goToPub() throws InterruptedException {\nSystem.out.printf(\"%s -&gt; %s is leaving home\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5) + 1);\nSystem.out.printf(\"%s -&gt; %s has arrived in the pub\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\n}\nprivate void firstBeerInPub() throws InterruptedException {\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5) + 1);\nSystem.out.printf(\"%s -&gt; %s has finished the first beer\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\n}\nprivate void goHome() throws InterruptedException {\nSystem.out.printf(\"%s -&gt; %s is leaving the pub\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5) + 1);\nSystem.out.printf(\"%s -&gt; %s is at home\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Objects;\nimport java.util.concurrent.Phaser;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TimeUnit;\npublic class TardyFriend implements Runnable {\nprivate final String name;\nprivate final Phaser phaser;\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\npublic TardyFriend(String name, Phaser phaser) {\nObjects.requireNonNull(name);\nObjects.requireNonNull(phaser);\nthis.name = name;\nthis.phaser = phaser;\n}\n@Override\npublic void run() {\nif (!phaser.isTerminated()) {\nint joinPhase = phaser.register();\nSystem.out.printf(\"%s -&gt; %s has joined friends in phase #%d\\n\",\nLocalTime.now().format(dateTimeFormatter), name, joinPhase);\ntry {\ngoToPub();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while going to the pub\\n\", name);\nreturn;\n}\n// Tardy friends shouln't do arrive on previous phases in order not to\n// interfere with the synchonization process or the current phase of the\n// phaser.\nif (joinPhase &lt;= FriendsPhaser.ARRIVE_TO_PUB_PHASE) {\ntry {\nphaser.awaitAdvanceInterruptibly(phaser.arrive());\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while waiting for friends in the pub\\n\", name);\nreturn;\n}\n}\ntry {\nfirstBeerInPub();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while drinking the first beer\\n\", name);\nreturn;\n}\nif (joinPhase &lt;= FriendsPhaser.FINISH_FIST_BEER_PHASE) {\ntry {\nphaser.awaitAdvanceInterruptibly(phaser.arrive());\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while waiting for friends to finish their fist beer\\n\", name);\nreturn;\n}\n}\ntry {\nsecondBeerInPub();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while drinking the second beer\\n\", name);\nreturn;\n}\nif (joinPhase &lt;= FriendsPhaser.FINISH_SECOND_BEER_PHASE) {\ntry {\nphaser.awaitAdvanceInterruptibly(phaser.arrive());\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while waiting for friends to finish their second beer\\n\", name);\nreturn;\n}\n}\ntry {\ngoHome();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s has been interrupted while going back home\\n\", name);\n}\n} else {\nSystem.out.printf(\"%s -&gt; %s called his friends too late\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\n}\n}\nprivate void goToPub() throws InterruptedException {\nSystem.out.printf(\"%s -&gt; %s is leaving home\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5) + 1);\nSystem.out.printf(\"%s -&gt; %s has arrived in the pub\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\n}\nprivate void firstBeerInPub() throws InterruptedException {\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5) + 1);\nSystem.out.printf(\"%s -&gt; %s has finished the first beer\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\n}\nprivate void secondBeerInPub() throws InterruptedException {\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5) + 1);\nSystem.out.printf(\"%s -&gt; %s has finished the second beer\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\n}\nprivate void goHome() throws InterruptedException {\nSystem.out.printf(\"%s -&gt; %s is leaving the pub\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5) + 1);\nSystem.out.printf(\"%s -&gt; %s is at home\\n\",\nLocalTime.now().format(dateTimeFormatter), name);\n}\n@SuppressWarnings(\"unused\")\nprivate void awaitPhase(Phaser phaser, int currentPhase, int expectedPhase) {\nwhile (currentPhase &lt; expectedPhase &amp;&amp; !phaser.isTerminated()) {\nSystem.out.printf(\"%s -&gt; %s is waiting phase #%d to finish\\n\",\nLocalTime.now().format(dateTimeFormatter), name, currentPhase);\ncurrentPhase = phaser.arriveAndAwaitAdvance();\n}\n}\n}\n</code></pre> <p>Si ejecutamos el programa veremos el comportamiento de los distintos tipos de amigos respecto al phaser.</p>"},{"location":"bloque_v/tema_23/page-5/","title":"5 Exchanger","text":""},{"location":"bloque_v/tema_23/page-5/#exchanger","title":"Exchanger","text":"<p>La API de concurrencia de Java nos proporciona un tipo adicional de barrera, a trav\u00e9s de la clase <code>Exchanger&lt;T&gt;</code> (intercambiador), que permite definir un punto de sincronizaci\u00f3n entre dos hilos de manera que el primero de los dos en llegar es bloqueado en espera del otro, de manera que cuando ambos llegan a dicho punto se sincronizaci\u00f3n intercambian entre ellos un determinado objeto de tipo <code>T</code>.</p> <p>Exchanger</p> <p>Barrera de sincronizaci\u00f3n entre dos hilos para el intercambio de una estructura de datos</p> <p>Ambos hilos tendr\u00e1n definido un objeto del tipo <code>T</code> cuyas direcciones de memoria ser\u00e1n intercambiadas al llegar al punto de sincronizaci\u00f3n.</p> <p>Para poder llevar a cabo el intercambio ambos hilos deben compartir el objeto <code>Exchanger&lt;T&gt;</code> y tener definido un objeto propio del tipo <code>T</code>. Al llegar al punto de sincronizaci\u00f3n, cada hilo llamar\u00e1 al m\u00e9todo <code>exchange(T_object)</code> del objeto <code>Exchanger</code> pas\u00e1ndole el objeto <code>T</code> que aporta al intercambio. Si el otro hilo a\u00fan no ha llegado al punto de sincronizaci\u00f3n el hilo es suspendido hasta que el otro hilo ejecute el mismo m\u00e9todo. Cuando ambos hilos hayan llamado al m\u00e9todo <code>exchange(T_object)</code>, el hilo que estuviera esperando (el primero que lleg\u00f3) ser\u00e1 reactivado y el otro ni siquiera ser\u00e1 bloqueado, y como valor de retorno de la llamada a <code>exchange(T_object)</code>, cada hilo recibir\u00e1 el objeto proporcionando por el otro hilo, que normalmente asignar\u00e1 a la variable que albergaba su objeto. De esta manera, ambos hilos pueden continuar su ejecuci\u00f3n, pero ahora su objeto en realidad corresponde al que conten\u00eda el otro hilo antes del intercambio.</p> <p>El m\u00e9todo <code>exchange(T_object, timeout, timeUnit)</code> est\u00e1 sobrecargado de manera que recibe un tiempo m\u00e1ximo de espera, transcurrido el cu\u00e1l el hilo es reactivado autom\u00e1ticamente y se lanza la excepci\u00f3n <code>TimeoutException</code>. Si el <code>timeout</code> pasado al m\u00e9todo es menor o igual que 0, el hilo no esperar\u00e1.</p> <p>Como la mayor\u00eda de los m\u00e9todos bloqueantes, <code>exchange(T_object)</code> y <code>exchange(T_object, timeout, timeUnit)</code> lanzar\u00e1n la excepci\u00f3n <code>InterruptedException</code> si el hilo es interrumpido mientras estaba esperando en dichos m\u00e9todos, o si ya hab\u00eda sido marcado para interrupci\u00f3n antes de ejecutarlos, reactivando inmediatamente el hilo correspondiente.</p> <p> Figura  - Exchanger</p> <p>Esta clase puede ser muy \u00fatil en problemas parecidos al del productor-consumidor, aunque con la limitaci\u00f3n de poder sincronizar un \u00fanico productor y un \u00fanico consumidor, dado que la clase <code>Exchanger&lt;T&gt;</code> s\u00f3lo funciona entre dos hilos.</p>"},{"location":"bloque_v/tema_23/page-5/#proyecto-exchanger","title":"Proyecto Exchanger","text":"<p>En este proyecto desarrollaremos una aplicaci\u00f3n para simular el problema del productor-consumidor con un solo productor y un solo consumidor, que intercambiar\u00e1n el buffer de datos una vez \u00e9ste se haya llenado, para lo que har\u00e1 uso de la clase <code>Exchanger</code>.</p> MainDoughnutProducerDoughnutConsumer <pre><code>import java.util.List;\nimport java.util.concurrent.Exchanger;\npublic class Main {\npublic static final int BUFFER_SIZE = 10;\npublic static void main(String[] args) {\nExchanger&lt;List&lt;Integer&gt;&gt; exchanger = new Exchanger&lt;&gt;();\nThread doughnutProducerThread = new Thread(new DoughnutProducer(exchanger), \"Doughnut producer\");\nThread doughnutConsumerThread = new Thread(new DoughnutConsumer(exchanger), \"Doughnut consumer\");\ndoughnutProducerThread.start();\ndoughnutConsumerThread.start();\n}\n</code></pre> <pre><code>import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.Exchanger;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\npublic class DoughnutProducer implements Runnable {\nprivate final Exchanger&lt;List&lt;Integer&gt;&gt; exchanger;\nprivate List&lt;Integer&gt; buffer = new ArrayList&lt;&gt;();\nprivate int doughnutNumber;\npublic DoughnutProducer(Exchanger&lt;List&lt;Integer&gt;&gt; exchanger) {\nObjects.requireNonNull(exchanger);\nthis.exchanger = exchanger;\n}\n@Override\npublic void run() {\nInteger doughnut;\nwhile (!Thread.currentThread().isInterrupted()) {\n// Fill the buffer and then exchange.\nfor (int i = 0; i &lt; Main.BUFFER_SIZE; i++){\ntry {\ndoughnut = makeDoughnut();\n} catch (InterruptedException e) {\nSystem.out.println(\n\"Producer has been interrupted while making a doughnut\");\nreturn;\n}\nSystem.out.printf(\"Producer has made doughnut #%d\\n\", doughnut);\nbuffer.add(doughnut);\n}\nSystem.out.println(\"Producer ready for exchange\");\ntry {\nbuffer = exchanger.exchange(buffer, 20, TimeUnit.SECONDS);\n} catch (InterruptedException e) {\nSystem.out.println(\n\"Producer has been interrupted while exchanging buffer\");\nreturn;\n} catch (TimeoutException e) {\nSystem.out.println(\"Producer can't wait for the consumer anymore\");\nreturn;\n}\n}\nSystem.out.println(\"Producer has been interrupted\");\n}\nprivate int makeDoughnut() throws InterruptedException {\nint doughnut = ++doughnutNumber;\nTimeUnit.SECONDS.sleep(1);\nreturn doughnut;\n}\n}\n</code></pre> <pre><code>import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.Exchanger;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\npublic class DoughnutConsumer implements Runnable {\nprivate final Exchanger&lt;List&lt;Integer&gt;&gt; exchanger;\nprivate List&lt;Integer&gt; buffer = new ArrayList&lt;&gt;();\npublic DoughnutConsumer(Exchanger&lt;List&lt;Integer&gt;&gt; exchanger) {\nObjects.requireNonNull(exchanger);\nthis.exchanger = exchanger;\n}\n@Override\npublic void run() {\nInteger doughnut;\nwhile (!Thread.currentThread().isInterrupted()) {\n// Exchage the empty buffer for a full one and then consume it.\nSystem.out.println(\"Consumer ready for exchange\");\ntry {\nbuffer = exchanger.exchange(buffer, 20, TimeUnit.SECONDS);\n} catch (InterruptedException e) {\nSystem.out.println(\n\"Consumer has been interrupted while exchanging buffer\");\nreturn;\n} catch (TimeoutException e) {\nSystem.out.println(\"Consumer can't wait for the producer anymore\");\nreturn;\n}\nfor (int i = 0; i &lt; Main.BUFFER_SIZE; i++){\ndoughnut = buffer.remove(0);\ntry {\neat(doughnut);\n} catch (InterruptedException e) {\nSystem.out.println(\"Consumer has been interrupted while eating\");\nreturn;\n}\n}\n}\nSystem.out.println(\"Consumer has been interrupted\");\n}\nprivate void eat(int doughnut) throws InterruptedException {\nSystem.out.printf(\"Consumer is eating doughnut #%d\\n\", doughnut);\nTimeUnit.MILLISECONDS.sleep(500);\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_23/page-6/","title":"Ejercicios","text":"Proyecto CountDownLatch <p>Seis alumnos de un instituto quieren comprarle un regalo a su profesor para el final de curso. Han elegido por mayor\u00eda absoluta, que uno de ellos ser\u00e1 el que recoja el dinero. A este alumno se la ha denominado como hermano mayor, y recoger\u00e1 el dinero hasta completarlo, luego ir\u00e1 a comprar el regalo.</p> <p>El regalo a comprar tiene un costo de $10, y cada alumno deber\u00e1 poner entre $2 y $5 y tardar\u00e1 entre 3 y 10 segundo en pagarlo.</p> <p>Realiza una aplicaci\u00f3n de Java haciendo uso de la clase <code>CountDownLatch</code> y mostrando mensajes en cada instante.</p> Proyecto CyclicBarrier <p>Diez amigos deciden ir el fin de semana a realizar una ruta de ciclismo siguiendo las siguientes etapas:</p> <ol> <li>En primer lugar, salen de casan y van hacia la gasolinera. El amigo m\u00e1s cercano est\u00e1 a un segundo y el m\u00e1s lejano a 3.</li> <li>Una vez lleguen a la gasolinera, comienza la etapa, que dura entre 5 y 10 segundos. Cuando finalizan la etapa llegan a un bar para poder refrescarse.</li> <li>Una vez que se refrescan, deciden volver a la gasolinera (tardan el mismo tiempo).</li> <li>Por \u00faltimo, deciden volver a casa.</li> </ol> <p>Ten en cuenta, que no todos los amigos ciclistas tardan el mismo tiempo en realizar las etapas, por lo que si hay alguno que se adelante debe esperar al resto. Crea una simulaci\u00f3n mostrando mensajes de informaci\u00f3n en cada etapa haciendo uso de <code>CyclicBarrier</code>.</p> Proyecto Phaser <p>Realiza el mismo ejercicio anterior, teniendo en cuenta lo siguiente: </p> <ul> <li>10 amigos realizan todas las fases, esperando a que el resto las realice.</li> <li>Hay un amigo impaciente, que no esperar\u00e1 al resto de amigos.</li> <li>Hay un amigo, que llega tarde y que intentar\u00e1 ponerse a la altura de sus amigos, realizando las etapas sin necesidad de esperar si \u00e9stos ya lo han realizado,</li> <li>Por \u00faltimo, hay un amigo que llega cuando todos los dem\u00e1s est\u00e1n terminando las etapas</li> </ul> <p>Crea una simulaci\u00f3n, pero en est\u00e1 ocasi\u00f3n haciendo uso de <code>Phaser</code>.</p>"},{"location":"bloque_v/tema_24/page-1/","title":"1 Paquete atomic","text":""},{"location":"bloque_v/tema_24/page-1/#paquete-javautilconcurrentatomic","title":"Paquete java.util.concurrent.atomic","text":"<p>En un tema anterior vimos que si tenemos una variable que puede ser le\u00edda y escrita desde distintos hilos deberemos incorporar alg\u00fan mecanismo que asegure la exclusi\u00f3n mutua, como <code>synchronize</code> o <code>ReentrantLock</code>. El simple hecho de poder incrementar una variable entera desde distintos hilos ya nos obliga a incorporar alguno de estos mecanismos.</p> <p>Sin embargo, debemos tener en cuenta que el empleo de estas herramientas de sincronizaci\u00f3n implica una ralentizaci\u00f3n del tiempo de ejecuci\u00f3n de nuestro c\u00f3digo, debido al tiempo empleado por estas herramientas para asegurar la integridad.</p> <p>Con objeto de solucionar este problema es casos tan simples como el descrito anteriormente, Java 5 incorpor\u00f3 el paquete <code>java.util.concurrent.atomic</code>, que incluye clases wrapper (envoltura) que permiten mantener la integridad de un determinado tipo de dato sin tener que usar sincronizaci\u00f3n.</p> <p>Para que estas clases puedan asegurar la integridad hacen uso de una operaci\u00f3n a bajo nivel proporcionada por el procesador denominado compare and swap, o tambi\u00e9n compare and set (CAS), que recibe el valor que se espera que tenga actualmente una variable y el nuevo valor que se le pretende asignar, y s\u00f3lo se realiza la asignaci\u00f3n si el valor que se espera que tenga actualmente es realmente el que contiene.</p> <p>Esta t\u00e9cnica es \u00fatil es operaciones del tipo check then act (comprobar y luego actuar). El problema de este tipo de operaciones en programas multihilo es que debemos asegurar que desde que se comprueba hasta que se act\u00faa no ha cambiado el valor.</p> <p>Veamos un ejemplo de operaci\u00f3n que puede dar problemas en programas multihilo:</p> <pre><code>public class Count {\nprivate volatile long count = 0;\npublic void increment() {\ncount++;\n}\n}\n</code></pre> <p>Para asegurar la atomicidad de la operaci\u00f3n de incremento podemos usar, por ejemplo <code>synchronized</code>:</p> <pre><code>public class Count {\n// No hace falta definirla volatile porque synchronized asegura tambi\u00e9n la\n// visibilidad.\nprivate long count = 0;\npublic synchronized void increment() {\ncount++;\n}\n}\n</code></pre> <p>Sin embargo, tenemos una manera m\u00e1s \u00f3ptima de asegurar la atomicidad del incremento sin tener que usar alg\u00fan mecanismo de sincronizaci\u00f3n. La soluci\u00f3n consiste en usar una de las clases incluidas en el paquete <code>java.util.concurrent.atomic</code>, en este caso <code>AtomicLong</code>. Esta clase envuelve un valor entero proporcionando la funcionalidad del mantenimiento de la integridad mediante el empleo de la operaci\u00f3n de bajo nivel compare and swap del procesador. As\u00ed, modificaremos nuestro c\u00f3digo de la siguiente manera:</p> <pre><code>public class Count {\n// No hace falta definirla volatile porque AtomicInteger usa internamente\n// una variable volatile.\nprivate AtomicLong count = new AtomicLong(0);\npublic void increment() {\ncount.incrementAndGet();\n}\n}\n</code></pre> <p>La operaci\u00f3n compare and swap (CAS) es optimista, en el sentido de que se obtiene el valor y luego trata de actualizarla. Si al ir a actualizarla se detecta que el valor existente es igual que el valor que hab\u00eda sido obtenido, entonces simplemente se actualiza, sin que haya sido necesario llevar a cabo ning\u00fan tipo de sincronizaci\u00f3n. Si, por el contrario para cuando se va a realizar la actualizaci\u00f3n se detecta que el valor actual es distinto al que hab\u00eda sido obtenido, es porque en el periodo de tiempo desde que se obtuvo el valor hasta que se trata de actualizar otro hilo ha cambiado el valor de la variable. En ese caso, no se realiza la actualizaci\u00f3n, sino que se vuelve a iniciar el proceso de nuevo, es decir obtener el valor y tratar de actualizar (espera activa, busy wait). En alg\u00fan instante futuro no muy lejano la operaci\u00f3n compare and swap podr\u00e1 ser realizada, y no habr\u00e1 sido necesario usar ning\u00fan tipo de sincronizaci\u00f3n.</p> <p>Para comprender la t\u00e9cnica descrita anteriormente, veamos el c\u00f3digo interno del m\u00e9todo <code>incrementAndGet()</code>:</p> <pre><code>public final long incrementAndGet() {\nfor (;;) {\nlong current = get();\n// Dangerous zone\nlong next = current + 1;\n// End of dangerous zone\nif (compareAndSet(current, next))\nreturn next;\n}\n}\n</code></pre> <p>En Java 8 el c\u00f3digo anterior se ha cambiado por una versi\u00f3n m\u00e1s reducida (pero el funcionamiento es el mismo):</p> <pre><code>public final long incrementAndGet() {\nreturn unsafe.getAndAddLong(this, valueOffset, 1L) + 1L;\n}\n</code></pre> <p>En realidad el c\u00f3digo anterior es convertido a una \u00fanica instrucci\u00f3n m\u00e1quina que en el caso de la arquitectura de procesadores x86 corresponde a <code>LOCK XADD</code>, que proporciona un mejor rendimiento que el cl\u00e1sico bucle CAS.</p>"},{"location":"bloque_v/tema_24/page-2/","title":"2 Variables at\u00f3micas","text":""},{"location":"bloque_v/tema_24/page-2/#variables-atomicas","title":"Variables at\u00f3micas","text":"<p>Java proporciona clases wrappers at\u00f3micas para los tipos m\u00e1s habituales, como <code>AtomicInteger</code>, <code>AtomicLong</code> y <code>AtomicBoolean</code>, junto con una versi\u00f3n para la referencia a cualquier variable, <code>AtomicReference</code>.</p> <p>Estas clases proporcionan m\u00e9todos espec\u00edficos para realizar operaciones b\u00e1sicas sobre las variables de manera at\u00f3mica, como:</p> <ul> <li><code>get()</code>: Obtiene el valor contenido en la variable, asegurando la visibilidad (volatile)</li> <li><code>set(newValue)</code>: Establece el valor de la variable, asegurando la visibilidad (volatile).</li> <li><code>getAndSet(newValue)</code>: Establece el valor de la variable, y retorna el valor antiguo, todo ello de manera at\u00f3mica.</li> <li><code>compareAndSet(expectedValue, newValue)</code>: Actualiza el valor de la variable a <code>newValue</code> s\u00f3lo si el valor actual corresponde a <code>expectedValue</code>, todo ello de manera at\u00f3mica. Retorna <code>true</code> si se ha realizado la actualizaci\u00f3n.</li> </ul> <p>Para las clases at\u00f3micas correspondientes a tipos num\u00e9ricos tendremos tambi\u00e9n disponibles adem\u00e1s operaciones at\u00f3micas de suma/resta, incremento y decremento:</p> <ul> <li><code>addAndGet(cantidad)</code>: Suma la cantidad indicada al valor de la variable, lo establece como nuevo valor de la misma y lo retorna, todo ello de forma at\u00f3mica.</li> <li><code>getAndAdd(cantidad)</code>: Suma la cantidad indicada al valor de la variable, lo establece como nuevo valor de la misma, pero retorna el valor que ten\u00eda la variable antes de la actualizaci\u00f3n, todo ello de forma at\u00f3mica.</li> <li><code>decrementAndGet()</code> y <code>getAndDecrement()</code>:</li> <li><code>incrementAndGet()</code> y <code>getAndIncrement()</code>:</li> </ul> <p>Adem\u00e1s, tambi\u00e9n proporciona clases wrappers at\u00f3micas para los tipos de arrays m\u00e1s habituales, como <code>AtomicIntegerArray</code>, <code>AtomicLongArray</code> y <code>AtomicReferenceArray</code>.</p> <p>Una de las operaciones t\u00edpicas del tipo check then act (comprobar y luego actuar) es cuando se quiere realizar una tarea una \u00fanica vez y para ello se utiliza variable booleana que act\u00faa como bandera (flag). Si el objeto que contiene la bandera es accedido para escritura desde varios hilos es posible que se produzcan condiciones de carrera (race conditions) seg\u00fan los cuales la tarea sea ejecutada m\u00e1s de una vez, porque se solapen la comprobaci\u00f3n del valor de la bandera desde dichos hilos antes de que cambien el valor de la misma. Para solucionar este problema podemos hacer que la bander sea una variable <code>AtomicBoolean</code>. Veamos un ejemplo:</p> <pre><code>public class Event&lt;T&gt; {\nprivate T content;\nprivate AtomicBoolean handled = new AtomicBoolean(false);\npublic Event(T content) {\nthis.content = content;    }\n// Retorna el contenido si a\u00fan no ha sido consumido, o null en caso contrario.\npublic T getContentIfNotHandled() {\nif (handled.compareAndSet(false, true)) {\nreturn content;\n} else {\nreturn null;\n}\n}\n}\n</code></pre> <p>Como vemos, la librer\u00eda de concurrencia de Java s\u00f3lo proporciona clases atomic para los tipos m\u00e1s frecuentes, pero carece de las clases <code>AtomicFloat</code> o <code>AtomicDouble</code>.</p> <p>Para esos casos podemos usar la clase <code>AtomicInteger</code> y a la hora de retornar o recibir los datos usar los m\u00e9todos <code>Float.floatToIntBits</code> y <code>Float.intBitsToFloat</code> o <code>Double.doubleToLongBits</code>y <code>Double.longBitsToDouble</code> para realizar las conversiones adecuadas (puede ver las clases correspondientes en el proyecto AtomicLong, aunque no se usan en \u00e9l, obtenidas de este enlace). Puede utilizar tambi\u00e9n las clases<code>DoubleAccumulator</code> o <code>DoubleAdder</code> que veremos en el siguiente apartado.</p>"},{"location":"bloque_v/tema_24/page-2/#proyecto-atomiclong","title":"Proyecto AtomicLong","text":"<p>En este proyecto simularemos el funcionamiento de una cuenta bancaria, en la que una empresa realiza abonos desde un hilo y el banco realiza cargos desde otro hilo. El saldo de la cuenta ser\u00e1 almacenado usando una variable at\u00f3mica.</p> MainAccountAccountConsumerAccountSaver <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\npublic class Main {\npublic static void main(String[] args) throws InterruptedException {\nDateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nAccount account = new Account(0);\n// Show initial balance.\nSystem.out.printf(\"%s -&gt; Initial balance: %d\u20ac\\n\",\nLocalTime.now().format(dateTimeFormatter), account.getBalance());\n// Start both saver and consumer threads. Both threads share the same account.\nThread saverThread = new Thread(new AccountSaver(account));\nsaverThread.start();\nThread consumerThread = new Thread(new AccountConsumer(account));\nconsumerThread.start();\n// Wait for both threads to finish.\nsaverThread.join();\nconsumerThread.join();\n// Show final balance.\nSystem.out.printf(\"\\n%s -&gt; Final balance: %d\u20ac\\n\",\nLocalTime.now().format(dateTimeFormatter), account.getBalance());\n}\n}\n</code></pre> <pre><code>import java.util.concurrent.atomic.AtomicLong;\npublic class Account {\nprivate final AtomicLong balance;\npublic Account(long initialBalance) {\nbalance = new AtomicLong(initialBalance);\n}\npublic long getBalance() {\nreturn balance.get();\n}\npublic void deposit(long amount) {\nbalance.addAndGet(amount);\n}\npublic void debit(long amount) {\nbalance.addAndGet(-amount);\n}\n}\n</code></pre> <pre><code>public class AccountConsumer implements Runnable {\nprivate final Account account;\npublic AccountConsumer(Account account) {\nthis.account = account;\n}\n@Override\npublic void run() {\nfor (int i = 0; i &lt; 100000; i++) {\naccount.debit(5);\n}\n}\n}\n</code></pre> <pre><code>public class AccountSaver implements Runnable {\nprivate final Account account;\npublic AccountSaver(Account account) {\nthis.account = account;\n}\n@Override\npublic void run() {\nfor (int i = 0; i &lt; 100000; i++) {\naccount.deposit(10);\n}\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_24/page-3/","title":"3 Acumuladores At\u00f3micos","text":""},{"location":"bloque_v/tema_24/page-3/#acumuladores-atomicos","title":"Acumuladores At\u00f3micos","text":"<p>Si tenemos muchos hilos actualizando simult\u00e1neamente una variable at\u00f3mica, el n\u00famero de fallos y reintentos que produce la t\u00e9cnica compare and swap es muy alto. Con objeto de minimizar el tiempo de ejecuci\u00f3n asociado a dichos reintentos, Java 8 introdujo clases espec\u00edficas para crear variables contadoras o acumuladoras thread-safe que internamente emplean t\u00e9cnicas de atomicidad distintas a las de las variables at\u00f3micas y que pueden proporcionar mejoras en el rendimiento respecto a ellas en determinadas situaciones como la descrita anteriormente.</p> <p>Acumulador at\u00f3mico</p> <p>Variable que no almacena un \u00fanico valor que se va modificando, sino una lista de celdas de acumulaci\u00f3n at\u00f3micas</p> <p>Estas clases no almacenan un \u00fanico valor que va modificando conforme se actualiza el valor del acumulador, sino que almacenan una lista de celdas de acumulaci\u00f3n at\u00f3micas en la que almacenan los valores acumulados.</p> <p>Al intentar acumular un valor en el acumulador, se busca alguna celda de acumulaci\u00f3n que no est\u00e9 siendo usada en ese momento y se realiza en ella la acumulaci\u00f3n.</p> <p>Cuando se quiere obtener el valor resultante se ejecuta una funci\u00f3n de acumulaci\u00f3n sobre los elementos de la lista de celdas para obtener el resultado de la acumulaci\u00f3n.</p> <p>Las clases incorporadas son:</p> <ul> <li><code>DoubleAccumulator</code>: Corresponde a uno o m\u00e1s valores que al aplicarles una determinada funci\u00f3n conforman un \u00fanico valor de tipo <code>Double</code>. La funci\u00f3n a utilizar debe implementar la interfaz funcional <code>DoubleBinaryOperator</code> y ser pasado al constructor del objeto <code>DoubleAccumulator</code>, que tambi\u00e9n recibir\u00e1 el valor inicial (llamado identity, identidad).</li> <li><code>DoubleAdder</code>: Corresponde a uno o m\u00e1s valores que sumados a partir del valor 0 conforman un \u00fanico valor de tipo <code>Double</code>. Es caso especial de <code>DoubleAccumulator</code> donde la funci\u00f3n de acumulaci\u00f3n corresponde a la suma y el valor inicial es 0, es decir, equivalente a <code>new DoubleAccumulator((x, y) -&gt; x + y, 0.0)</code></li> <li><code>LongAccumulator</code>: Similar a <code>DoubleAccumulator</code> pero para tipos <code>Long</code>.</li> <li><code>LongAdder</code>: Similar a <code>DoubleAdder</code> pero para tipos <code>Long</code>.</li> </ul> <p>Para acumular un nuevo valor a un objeto de alguna de estas clases usaremos el m\u00e9todo <code>accumulate(value)</code>. Para obtener el valor resultante de la acumulaci\u00f3n usaremos el m\u00e9todo <code>get()</code>, en <code>DoubleAccumulator</code> y <code>LongAccumulator</code>, o el m\u00e9todo <code>sum()</code> en <code>DoubleAdder</code> y <code>LongAdder</code>. Tambi\u00e9n tendremos disponibles m\u00e9todos <code>tipoValue()</code> para obtener el valor resultante en un tipo determinado, por ejemplo <code>intValue()</code> retornar\u00e1 el valor resultante de la acumulaci\u00f3n en forma de entero.</p> <p>Finalmente, mediante el m\u00e9todo <code>reset()</code> podemos resetear el valor del acumulador a la identidad (valor inicial).</p> <p>Se recomienda el empleo de estas clases respecto a las variables Atomic cuando la frecuencia de operaciones de acumulaci\u00f3n sea mucho mayor que el de operaciones de lectura del valor.</p>"},{"location":"bloque_v/tema_24/page-3/#proyecto-doubleadder","title":"Proyecto DoubleAdder","text":"<p>En este proyecto simularemos el funcionamiento de una cuenta bancaria, en la que una empresa realiza abonos desde un hilo y el banco realiza cargos desde otro hilo. El saldo de la cuenta ser\u00e1 almacenado usando una variable <code>DoubleAdder</code>.</p> MainAccountAccountConsumerAccountSaver <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\npublic class Main {\npublic static void main(String[] args) throws InterruptedException {\nDateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nAccount account = new Account(0);\n// Show initial balance.\nSystem.out.printf(\"%s -&gt; Initial balance: %d\u20ac\\n\",\nLocalTime.now().format(dateTimeFormatter), account.getBalance());\n// Start both saver and consumer threads. Both threads share the same account.\nThread saverThread = new Thread(new AccountSaver(account));\nsaverThread.start();\nThread consumerThread = new Thread(new AccountConsumer(account));\nconsumerThread.start();\n// Wait for both threads to finish.\nsaverThread.join();\nconsumerThread.join();\n// Show final balance.\nSystem.out.printf(\"\\n%s -&gt; Final balance: %d\u20ac\\n\",\nLocalTime.now().format(dateTimeFormatter), account.getBalance());\n}\n}\n</code></pre> <pre><code>import java.util.concurrent.atomic.DoubleAdder;\npublic class Account {\nprivate final DoubleAdder balance = new DoubleAdder();\npublic Account(double initialBalance) {\nbalance.add(initialBalance);\n}\npublic double getBalance() {\nreturn balance.doubleValue();\n}\npublic void deposit(long amount) {\nbalance.add(amount);\n}\npublic void debit(long amount) {\nbalance.add(-amount);\n}\n}\n</code></pre> <pre><code>public class AccountConsumer implements Runnable {\nprivate final Account account;\npublic AccountConsumer(Account account) {\nthis.account = account;\n}\n@Override\npublic void run() {\nfor (int i = 0; i &lt; 100000; i++) {\naccount.debit(5);\n}\n}\n}\n</code></pre> <pre><code>public class AccountSaver implements Runnable {\nprivate final Account account;\npublic AccountSaver(Account account) {\nthis.account = account;\n}\n@Override\npublic void run() {\nfor (int i = 0; i &lt; 100000; i++) {\naccount.deposit(10);\n}\n}\n}\n</code></pre> <p>Si ejecutamos el programa veremos que siempre produce el resultado correcto.</p>"},{"location":"bloque_v/tema_24/page-4/","title":"4 VarHandle","text":""},{"location":"bloque_v/tema_24/page-4/#varhandle","title":"VarHandle","text":"<p>Java 9 incorpor\u00f3 la clase <code>VarHandle</code>, como una forma de almacenar una referencia tipada (con tipo) a un determinado atributo (est\u00e1tico o no) de una clase o un elemento de array, de manera que se puede acceder al valor de dicho atributo en un determinado objeto a trav\u00e9s del <code>VarHandle</code>. El objetivo de esta clase es proporcionar una funcionalidad de acceso equivalente a la de las variables at\u00f3micas en propiedades de objetos (campos, fields) y en elementos de arrays.</p> <p>VarHandle</p> <p>Referencia a una variable que permite acceder a ella con distintos m\u00e9todos de acceso</p> <p>La ventaja de este acceso referenciado es que podemos usar m\u00e9todos de nuestro <code>VarHandle</code> para acceder de diferentes formas al atributo referenciado de un determinado objeto, sin tener que usar ning\u00fan mecanismo de sincronizaci\u00f3n ni usar ning\u00fan wrapper al definir el atributo. As\u00ed tendremos diferentes modos de acceso: acceso normal de lectura y escritura, acceso vol\u00e1til de lectura y escritura y, el m\u00e1s interesante, acceso mediante CAS (compare and swap), mediante el cu\u00e1l podemos ofrecer una acceso thread-safe al valor de dicho atributo en cualquier objeto de la clase correspondiente.</p> <p>Hasta ahora esta opci\u00f3n de acceso thread-safe sin usar ning\u00fan mecanismo de sincronizaci\u00f3n s\u00f3lo estaba disponible a trav\u00e9s de la clases Atomic, Accumulator o Adder, que actuaban como wrappers de los tipos m\u00e1s b\u00e1sicos. Sin embargo, gracias a <code>VarHandle</code> podemos extender esta funcionalidad de acceso thread-safe a cualquier tipo de atributo, no s\u00f3lo a los de tipo primitivo b\u00e1sico.</p> <p>Por ejemplo, si tenemos definida una clase como la siguiente:</p> <pre><code>public class Account { public double amount; public Account() { this.amount = 0; } }\n</code></pre> <p>en el siguiente c\u00f3digo podemos ver c\u00f3mo obtener la referencia al atributo <code>amount</code> de dicha clase y almacenarla en un <code>VarHandle</code>, para posteriormente acceder de forma thread-safe al valor dicho atributo en un determinado objeto:</p> <pre><code>public class Incrementer implements Runnable { private Account account; public Incrementer(Account account) { this.account = account;\n}\n@Override public void run() {\nVarHandle varHandle; try {\n// Se obtiene una referencia al atributo amount de la clase Account, que es\n// de tipo double. La referencia es gen\u00e9rica a dicho atributo, y podremos usarla\n// sobre cualquier objeto de la clase Account.\nvarHandle = MethodHandles.lookup().in(Account.class)\n.findVarHandle(Account.class, \"amount\", double.class); // Se accede de forma thread-safe al atributo amount del objeto Account\n// recibido en el contructor, en este caso para incrementar su valor.\nfor (int i = 0; i &lt; 10000; i++) { varHandle.getAndAdd(account, 100); } } catch (NoSuchFieldException | IllegalAccessException e) { // El atributo no existe en la clase Account o se ha producido un acceso ilegal.\ne.printStackTrace(); }\n}\n}\n</code></pre> <p>Warning</p> <p>Este ejemplo podr\u00eda haber realizado definiendo el atributo <code>amount</code> como un <code>DoubleAdder</code>, pero lo hemos elegido para demostrar la clase <code>VarHandle</code> por su simplicidad.</p> <p>Si queremos acceder para lectura al atributo de una variable a trav\u00e9s de un <code>VarHandle</code> tenemos a nuestra disposici\u00f3n una serie de m\u00e9todos, entre los que destacamos:</p> <ul> <li><code>get(object)</code>: Lee el valor del atributo de <code>object</code> referenciado por el <code>VarHandle</code>, como si el atributo hubiera sido definido como no vol\u00e1til (sin la palabra reservada <code>volatile</code>).</li> <li><code>getVolatile(object)</code>: Lee el valor del atributo de <code>object</code> referenciado por el <code>VarHandle</code>, como si el atributo hubiera sido definido como vol\u00e1til (<code>volatile</code>).</li> </ul> <p>Si queremos acceder para escritura podemos usar:</p> <ul> <li><code>get(object, newValue)</code>: Escribe <code>newValue</code> como valor del atributo de <code>object</code> referenciado por el <code>VarHandle</code>, como si el atributo hubiera sido definido como no vol\u00e1til (sin la palabra reservada <code>volatile</code>).</li> <li><code>setVolatile(object, newValue)</code>: Escribe <code>newValue</code> como valor del atributo de <code>object</code> referenciado por el <code>VarHandle</code>, como si el atributo hubiera sido definido como vol\u00e1til (<code>volatile</code>).</li> <li><code>compareAndSet(object, expectedValue, newValue)</code>: Escribe <code>newValue</code> como valor del atributo de <code>object</code> referenciado por el <code>VarHandle</code>, como si el atributo hubiera sido definido como vol\u00e1til (<code>volatile</code>), s\u00f3lo si el valor actual del atributo corresponde con <code>expectedValue</code>.</li> </ul> <p>Info</p> <p>Para saber m\u00e1s visite https://www.baeldung.com/java-variable-handles</p>"},{"location":"bloque_v/tema_24/page-4/#proyecto-varhandle","title":"Proyecto VarHandle","text":"<p>En este proyecto simularemos el funcionamiento de una cuenta bancaria, en la que una empresa realiza abonos desde un hilo y el banco realiza cargos desde otro hilo. El saldo de la cuenta ser\u00e1 almacenado usando una propiedad p\u00fablica <code>double</code>.</p> MainAccountAccountSaverAccountConsumer <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\npublic class Main {\npublic static void main(String[] args) throws InterruptedException {\nDateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nAccount account = new Account(0);\n// Show initial balance.\nSystem.out.printf(\"%s -&gt; Initial balance: %.2f\u20ac\\n\",\nLocalTime.now().format(dateTimeFormatter), account.balance);\n// Start both saver and consumer threads. Both threads share the same account.\nThread saverThread = new Thread(new AccountSaver(account));\nsaverThread.start();\nThread consumerThread = new Thread(new AccountConsumer(account));\nconsumerThread.start();\n// Wait for both threads to finish.\nsaverThread.join();\nconsumerThread.join();\n// Show final balance.\nSystem.out.printf(\"\\n%s -&gt; Final balance: %.2f\u20ac\\n\",\nLocalTime.now().format(dateTimeFormatter), account.balance);\n}\n}\n</code></pre> <pre><code>public class Account {\npublic double balance;\npublic Account(double initialBalance) {\nbalance = initialBalance;\n}\n}\n</code></pre> <pre><code>import java.lang.invoke.MethodHandles;\nimport java.lang.invoke.VarHandle;\npublic class AccountSaver implements Runnable {\nprivate final Account account;\npublic AccountSaver(Account account) {\nthis.account = account;\n}\n@Override\npublic void run() {\nVarHandle varHandle;\ntry {\nvarHandle = MethodHandles.lookup().in(Account.class)\n.findVarHandle(Account.class, \"balance\", double.class);\nfor (int i = 0; i &lt; 100000; i++) {\nvarHandle.getAndAdd(account, 10);\n}\n} catch (NoSuchFieldException | IllegalAccessException e) {\ne.printStackTrace();\n}\n}\n}\n</code></pre> <pre><code>import java.lang.invoke.MethodHandles;\nimport java.lang.invoke.VarHandle;\npublic class AccountConsumer implements Runnable {\nprivate final Account account;\npublic AccountConsumer(Account account) {\nthis.account = account;\n}\n@Override\npublic void run() {\nVarHandle varHandle;\ntry {\nvarHandle = MethodHandles.lookup().in(Account.class).findVarHandle(Account.class, \"balance\", double.class);\nfor (int i = 0; i &lt; 100000; i++) {\nvarHandle.getAndAdd(account, -5);\n}\n} catch (NoSuchFieldException | IllegalAccessException e) {\ne.printStackTrace();\n}\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_24/page-5/","title":"Ejercicios","text":"Proyecto Atomic <p>Realiza un proyecto Java haciendo uso de hilos (Runnables) y haciendo uso de las clases wrapper at\u00f3micas, en el que se quiere calcular las veces que las caras de un dado son lanzadas al azar. Ten en cuenta que un dado puede ser lanzado un m\u00e1ximo de 10.000 veces por hilo, crea un programa en Java en el que se cree 3 hilos que lancen dados, almacenando el n\u00famero de veces que se obtiene cada una de las caras de un dado (1-6).</p> <p>Adem\u00e1s, deber\u00e1s mostrar:</p> <ul> <li>El resultado obtenido por cada vez que se lanza el dado, mostrando tambi\u00e9n desde que hilo ha sido lanzado.</li> <li>El resultado total de cada una de las caras del dado.</li> <li>El n\u00famero total de tiradas en todos los hilos.</li> </ul> Proyecto Accumulator <p>Realiza el proyecto haciendo uso de acumuladores.</p>"},{"location":"bloque_v/tema_25/page-1/","title":"1 Tipos de Colecciones Thread-Safe","text":""},{"location":"bloque_v/tema_25/page-1/#tipos-de-colecciones-thread-safe","title":"Tipos de Colecciones Thread-safe","text":"<p>Cuando desarrollamos programas multihilo debemos ser muy ciudadosos con el uso de las colecciones de datos, ya que la mayor\u00eda de las estas clases no est\u00e1n preparadas para trabajar con aplicaciones concurrentes, ya que no controlan autom\u00e1ticamente el acceso concurrente a sus datos. Si distintas tareas concurrentes comparten una estructura de datos y no se implementan estrategias de acceso concurrente, pueden producirse errores de inconsistencia de datos que afectar\u00e1n a correctitud de nuestro programa.</p> <p>Por defecto, las colecciones habituales de Java, como <code>ArrayList</code> o <code>HashMap</code> no est\u00e1n sincronizadas, lo que implica que no es seguro usarlas desde distintos hilos de ejecuci\u00f3n (no son thread-safe). Por ejemplo, si varios hilos llaman a m\u00e9todos que var\u00edan la estructura de una <code>ArrayList</code>, como <code>add()</code> o <code>remove()</code> pueden producirse condiciones de carrera que generen errores en la estructura de la colecci\u00f3n.</p> <p>Con las distintas versiones de Java han ido apareciendo distintas formas de conseguir estructuras de datos thread-safe, cada una de ellas con sus ventajas e inconvenientes:</p> <ul> <li>Unmodifiable collections: Colecciones inmodificables que envuelven una colecci\u00f3n mutable.</li> <li>Copy on write collections: Colecciones creadas a partir de una colecci\u00f3n mutable, que cada vez que son modificadas crean una nueva versi\u00f3n de la colecci\u00f3n.</li> <li>Inmutable collections: Colecciones inmodificables creadas a partir de los elementos de una colecci\u00f3n, pero que no la envuelven.</li> <li>Synchronized collections: Colecciones que envuelven otra colecci\u00f3n para proporcionar un acceso sincronizado a trav\u00e9s de un objeto cerrojo asociado. Son thread-safe, pero no proporcionan un rendimiento \u00f3ptimo en casos de concurrencia intensiva.</li> <li>Concurrent-aware collections: Colecciones que no solamente son thread-safe, sino que adem\u00e1s est\u00e1n especialmente dise\u00f1adas para que el acceso concurrente sea lo m\u00e1s \u00f3ptimo posible en relaci\u00f3n a su rendimiento. Existen dos subtipos: las que usan cerrojos y proporcionan un modo bloqueante, y las que no usan cerrojos, sino operaciones CAS (lock-free).</li> </ul>"},{"location":"bloque_v/tema_25/page-2/","title":"2 Unmodifiable Collections","text":""},{"location":"bloque_v/tema_25/page-2/#unmodifiable-collection","title":"Unmodifiable Collection","text":"<p>Una unmodifiable collection es un wrapper de s\u00f3lo lectura sobre otra colecci\u00f3n existente. Estos wrappers no permiten realizar a trav\u00e9s de ellos las operaciones de agregar o eliminar en la colecci\u00f3n. Sin embargo, la colecci\u00f3n original que envuelve s\u00ed que puede ser modificada directamente y los cambios se ver\u00e1n reflejados en la versi\u00f3n inmodificable, e incluso podemos establecer <code>null</code> como elemento.</p> <p>La clase <code>Collections</code> proporciona una serie de m\u00e9todos est\u00e1ticos para crear unmodified collections a partir de distintos tipos de colecciones, como por ejemplo <code>Collections.unmodifiableCollection(collection)</code>, <code>Collections.unmodifiableList(list)</code>, <code>Collections.unmodifiableMap(map)</code>o <code>Collections.unmodifiableSet(set)</code>.</p> <p>Veamos un ejemplo:</p> <pre><code>List&lt;String&gt; mutableList = new ArrayList&lt;&gt;(Arrays.asList(\"C\", \"C++\", \"Java\"));\nList&lt;String&gt; unmodifiableList = Collections.unmodifiableList(mutableList);\n// Any attempt to modify the unmodifiableList will throw UnsupportedOperationException\ntry {\nunmodifiableList.add(\"Python\");\n}\ncatch (UnsupportedOperationException ex) {\nSystem.out.println(\"java.lang.UnsupportedOperationException\");\n}\n// Any changes made to the original list will be reflected back in the unmodifiable list\nmutableList.add(\"Go\");\n// You can use null as an element of the list\nmutableList.add(null);\nSystem.out.println(unmodifiableList);\n</code></pre> <p>Otro ejemplo de colecci\u00f3n inmodificable (parcialmente) es la lista retornada por el m\u00e9todo est\u00e1tico <code>Arrays.asList()</code>, que retorna una lista que act\u00faa como wrapper sobre un array. Dado que lo arrays no pueden cambiar su tama\u00f1o, no es posible a\u00f1adir o eliminar elementos en la lista retornada por este m\u00e9todo, lanz\u00e1ndose la excepci\u00f3n <code>UnsupportedOperationException</code>. Sin embargo, s\u00ed que es posible modificar el valor de un elemento de la lista usando el m\u00e9todo <code>set(index, element)</code> o modificando el array original.</p> <p>Veamos un ejemplo:</p> <pre><code>String[] lang = new String[]{\"C\", \"C++\", \"Java\"};\nList&lt;String&gt; fixedLengthList = Arrays.asList(lang);\ntry {\n// any add or remove operation on the list will result in\n// an UnsupportedOperationException\nfixedLengthList.add(\"Python\");\nSystem.out.println(\"List  : \" + fixedLengthList);\n} catch (UnsupportedOperationException ex) {\nSystem.out.println(\"java.lang.UnsupportedOperationException\");\n}\n// List can be modified by calling set() method\nfixedLengthList.set(1, \"Go\");\n// Any changes made to the original array will be reflected in the list\nlang[2] = \"JS\";\n// You can use null as an element of the list\nlang[2] = null;\nSystem.out.println(\"Array : \" + Arrays.toString(lang));\n</code></pre> <p>Debemos tener en cuenta que si una colecci\u00f3n no es modificable podemos decir que es thread-safe, ya que los distintos hilos no podr\u00e1n modificarla y por tanto no podr\u00e1n crearse conflictos.</p>"},{"location":"bloque_v/tema_25/page-3/","title":"3 Copy on write collections","text":""},{"location":"bloque_v/tema_25/page-3/#copy-on-write-collections","title":"Copy on write collections","text":"<p>La clase <code>CopyOnWriteArrayList</code> crea una versi\u00f3n thread-safe de la clase <code>ArrayList</code> en la que la ejecuci\u00f3n de cualquier operaci\u00f3n que cambie la estructura de datos, como <code>add(e)</code>, <code>set(index, e)</code> o <code>remove(e)</code> produce una nueva copia de la lista en vez de modificar la existente. Est\u00e1 permitido la inserci\u00f3n de valores <code>null</code> en la lista.</p> <p>Una vez creado un objeto <code>CopyOnWriteArrayList</code>, los cambios en \u00e9l no afectan a la lista original y viceversa.</p> <p>Al crear un iterador de un CopyOnWriteArrayList, obtenemos una captura de los datos de la lista en ese momento, por lo que si posteriormente a\u00f1adimos un elemento a la lista el iterador no ser\u00e1 consciente de ello.</p> <p>La clase <code>CopyOnWriteArrayList</code> fue creada principalmente para permitir la iteraci\u00f3n segura sobre los elementos de una lista mientras que la lista original es modificada desde otros hilos. Debido al mecanismo de copia, la operaci\u00f3n <code>remove()</code> en el iterado no est\u00e1 permitida, lanzando la excepci\u00f3n <code>UnsupportedOperationException</code>.</p> <pre><code>List&lt;String&gt; mutableList = new ArrayList&lt;&gt;();\nmutableList.add(\"C\");\nmutableList.add(\"C++\");\nmutableList.add(\"Java\");\nList&lt;String&gt; copyOnWriteList = new CopyOnWriteArrayList&lt;&gt;(mutableList);\nIterator&lt;String&gt; iterator = copyOnWriteList.iterator();\n// Each modification of the list creates a new copy of the list.\ncopyOnWriteList.add(\"Go\");\n// Null is allowed as element.\ncopyOnWriteList.add(null);\n// Changes in original list don't affect copyOnWriteList.\nmutableList.add(\"Typescript\");\nSystem.out.println(copyOnWriteList);\n// Changes in copyOnWriteList don't affect original list.\nSystem.out.println(mutableList);\n// Iterator has an \"old copy\" of the list\niterator.forEachRemaining(System.out::println);\nIterator&lt;String&gt; iterator2 = copyOnWriteList.iterator();\nwhile (iterator2.hasNext()) {\ntry {\niterator2.remove();\n} catch (Exception e) {\nSystem.out.println(\"remove() in iterator is unsupported\");\nreturn;\n}\n}\n</code></pre> <p>Por otra parte, tenemos la clase <code>CopyOnWriteArraySet</code>, que nos permite crear una estructura de datos conjunto (set) que envuelve otro conjunto, y que usa internamente un objeto <code>CopyOnWriteArrayList</code> para sus operaciones, por los que comparte todas sus caracter\u00edsticas b\u00e1sicas.</p> <p>Warning</p> <p>Evidentemente esta caracter\u00edstica puede ser muy costosa en tiempo y memoria, pero puede ser muy eficiente en casos muy concretos, en los que las operaciones de modificaci\u00f3n de la estructura de datos son \u00ednfimas en relaci\u00f3n al n\u00famero de operaciones de consulta y recorrido de la misma.</p>"},{"location":"bloque_v/tema_25/page-4/","title":"4 Inmutable Collections","text":""},{"location":"bloque_v/tema_25/page-4/#inmutable-collections","title":"Inmutable Collections","text":"<p>Java 9 trajo consigo una serie de m\u00e9todos est\u00e1ticos factor\u00eda en las interfaces <code>List</code>, <code>Set</code> y <code>Map</code> para la creaci\u00f3n de listas, conjuntos y mapas inmutables, respectivamente. As\u00ed, por ejemplo, tenemos los m\u00e9todos <code>List.of(element...)</code> o <code>List.copyOf(collection)</code> para crear listas inmutables, <code>Set.of(element...)</code> o <code>Set.copyOf(collection)</code> para crear conjuntos inmutables, y <code>Map.of(key1, value1, key2, value2)</code>, <code>Map.ofEntries(mapEntries...)</code>, o <code>Map.copyOf(map)</code> para crear mapas inmutables.</p> <p>Podemos considerar un objeto como inmutable si su estado no puede cambiar despu\u00e9s de ser construido, manteniendo durante toda su vida los mismos datos. Si las colecciones creadas usando los m\u00e9todos anteriores contienen a su vez objetos inmutables, entonces podemos afirmar que la colecci\u00f3n es autom\u00e1ticamente thread-safe, ya que no se podr\u00e1 modificar ni su estructura ni los elementos contenidos en ella. Si, por el contrario, la colecci\u00f3n contiene objetos que son mutables, entonces no podr\u00e1 ser considerada thread-safe, por mucho que no podamos cambiar su estructura.</p> <p>Al crear una colecci\u00f3n en la que no se puede modificar su estructura, podemos hacer que sea lo m\u00e1s eficiente posible en relaci\u00f3n al consumo de espacio en memoria.</p> <p>Debemos tener en cuenta que las colecciones inmutables no son lo mismo que las unmodifiable collections, ya que no son wrappers sobre una colecci\u00f3n mutable. Corresponden a nuevas colecciones cuyos elementos son obtenidos a partir de la colecci\u00f3n dada, pero una vez creada, la nueva colecci\u00f3n no tiene relaci\u00f3n alguna con la usada para establecer los elementos.</p> <p>As\u00ed, las colecciones inmutables no permiten las operaciones de a\u00f1adir, eliminar o reemplazar elementos, lanzando la excepci\u00f3n <code>UnsupportedOperationException</code>. Sin embargo, si los elementos contenidos en la colecci\u00f3n son mutables, entonces es posible que la colecci\u00f3n parezca que haya sido modificada, cuando en realidad lo que se han reemplazado son los valores de sus elementos</p> <p>Otra caracter\u00edstica importante de las colecciones inmutables es que no pueden contener elementos <code>null</code>. Cualquier intento de crear una colecci\u00f3n inmutable con elementos <code>null</code> lanzar\u00e1 la excepci\u00f3n <code>NullPointerException</code>.</p> <p>Veamos un ejemplo:</p> <pre><code>List&lt;String&gt; mutableList = new ArrayList&lt;&gt;();\nmutableList.add(\"C\");\nmutableList.add(\"C++\");\nmutableList.add(\"Java\");\nList&lt;String&gt; inmutableList = List.copyOf(mutableList);\n// Any attempt to modify list throws UnsupportedOperationException\ntry {\ninmutableList.add(\"Go\");\n} catch (UnsupportedOperationException e) {\nSystem.out.println(\"Add is an unsupported operation\");\n}\ntry {\ninmutableList.set(0, \"Go\");\n} catch (UnsupportedOperationException e) {\nSystem.out.println(\"Set is an unsupported operation\");\n}\n// Changes in original list don't affect inmutableList.\nmutableList.add(\"Typescript\");\nSystem.out.println(inmutableList);\n// Null is forbidden as value in inmutableList. Throws NullPointerException\nList&lt;String&gt; mutableList2 = new ArrayList&lt;&gt;();\nmutableList2.add(\"C\");\nmutableList2.add(\"C++\");\nmutableList2.add(null);\ntry {\nList&lt;String&gt; inmutableList2 = List.copyOf(mutableList2);\n} catch (NullPointerException e) {\nSystem.out.println(\"Can't create an inmutable list with a null element\");\n}\ntry {\nList&lt;String&gt; inmutableList2 = List.of(\"C\", \"C++\", null);\n} catch (NullPointerException e) {\nSystem.out.println(\"Can't create an inmutable list with a null element\");\n}\n</code></pre>"},{"location":"bloque_v/tema_25/page-5/","title":"5 Synchronized Collections","text":""},{"location":"bloque_v/tema_25/page-5/#synchronized-collections","title":"Synchronized Collections","text":"<p>Hasta ahora hemos visto distintas herramientas que nos proporciona Java para crear colecciones que tengan restringidas las operaciones de modificaci\u00f3n de la misma, con objeto de convertirlas en thread-safe.</p> <p>Sin embargo, hay ocasiones en las que es necesario obligatoriamente poder modificar la colecci\u00f3n desde distintos hilos. Para eso casos Java nos proporciona distintas posibilidades.</p> <p>La primera de ellas en las conocidas como synchronized collection (colecciones sincronizadas), que no son m\u00e1s que wrappers de las principales colecciones a las que se asocia un \u00fanico objeto monitor para sincronizar las operaciones sobre ella.</p> <p>Para crear objetos de estas clases wrapper usaremos alguno de los m\u00e9todos est\u00e1ticos disponibles para tal fin en la clase <code>Collections</code>, que reciben la colecci\u00f3n que se quiere proteger: <code>Collections.synchronizedCollection(collection)</code>, <code>Collections.synchronizedList(list)</code>, <code>`Collections.synchronizedMap(map)</code> y <code>Collections.synchronizedSet(set)</code>.</p> <p>Sin embargo aunque estas clases wrapper son thread-safe, no est\u00e1n dise\u00f1adas ni optimizadas para acceso concurrente, ya que simplemente usan un \u00fanico objeto monitor (cerrojo intr\u00ednseco) para toda la colecci\u00f3n.</p> <p>De hecho, se recomienda que usemos un acceso sincronizado cuando iteremos sobre la colecci\u00f3n, o de lo contrario podemos obtener un comportamiento no deseado. Para a\u00f1adir o eliminar elementos de la colecci\u00f3n no es necesario usar un acceso sincronizado.</p> <p>Veamos un ejemplo:</p> <pre><code>List&lt;String&gt; synchronizedList = Collections.synchronizedList(new ArrayList&lt;String&gt;());\nsynchronizedList.add(\"Alex\");\nsynchronizedList.add(\"Brian\");\nsynchronized(synchronizedList) {\nIterator&lt;String&gt; iterator = synchronizedList.iterator(); while (iterator.hasNext()) {\nSystem.out.println(iterator.next());\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_25/page-6/","title":"6 Concurrent-aware collections","text":""},{"location":"bloque_v/tema_25/page-6/#concurrent-aware-collections","title":"Concurrent-aware collections","text":"<p>Para facilitar el uso de estructuras de datos en programas concurrentes, Java proporciona una serie de interfaces y de clases para estructuras de datos dise\u00f1adas espec\u00edficamente para ser usados en programas multihilo sin que se produzcan errores de inconsistencia de datos.</p> <p>Concurrent-aware</p> <p>Dise\u00f1ado espec\u00edficamente para que uso concurrente</p> <p>Se dice que dichas clases son no solo thread-safe, sino tambi\u00e9n concurrent-aware (adecuadas para uso concurrente). Estas clases pueden clasificarse en los siguientes grupos:</p> <ul> <li>Colecciones concurrentes que usan cerrojos: Aseguran la integridad haciendo uso de varios cerrojos de sincronizaci\u00f3n independientes. Un ejemplo de este tipo de colecciones es <code>LinkedBlockingQueue</code>. Suelen tener dos modos de funcionamiento:<ul> <li>Modo bloqueante: Incluye operaciones para a\u00f1adir y eliminar datos, de manera que si la operaci\u00f3n no puede ser realizada inmediatamente, ya sea porque la colecci\u00f3n est\u00e1 llena o vac\u00eda, el hilo que realiza la llamada a la operaci\u00f3n ser\u00e1 bloqueado hasta que la operaci\u00f3n pueda llevarse a cabo.</li> <li>Modo no bloqueante: Incluye operaciones para a\u00f1adir y eliminar datos, pero en este caso si la operaci\u00f3n no se puede realizar inmediatamente, la operaci\u00f3n retorna el valor <code>null</code> o lanza una excepci\u00f3n, y el hilo que realiz\u00f3 la llamada NO ser\u00e1 bloqueado.</li> </ul> </li> <li>Colecciones concurrentes que no usan cerrojos (lock-free): Aseguran la integridad sin tener que usan ning\u00fan tipo de cerrojo, sino operaciones CAS (compare and swap). Por su naturaleza s\u00f3lo pueden funcionar en modo no bloqueante. Un ejemplo de este tipo de colecciones es <code>ConcurrentLinkedQueue</code>.</li> </ul> <p>Aunque las colecciones concurrentes que usan cerrojos se pueden usar en modo no bloqueante, en ese caso es m\u00e1s \u00f3ptimo usar colecciones concurrentes que no usen cerrojos (lock-free).</p> <p>Las colecciones concurrentes bloqueantes est\u00e1n recomendadas en aquellos casos en los que los consumidores y los productores trabajen de forma conjunta. En ese caso, por ejemplo, los consumidores pueden llegar a vaciar la cola, en cuyo caso debe bloquearse hasta que alg\u00fan productor agregue alg\u00fan elemento a la misma.</p> <p>Sin embargo, si los productores y los consumidores no trabajan sobre la colecci\u00f3n conjuntamente, es decir, si los productores s\u00f3lo compiten entre ellos o los consumidores s\u00f3lo compiten entre ellos, no hay necesidad de bloqueo, y por tanto se recomienda usar una colecci\u00f3n concurrente que no use cerrojo.</p> <p>El paquete <code>java.util.concurrent</code> define una serie de interfaces para colecciones que puedan funcionar en modo bloqueante:</p> <ul> <li><code>BlockingQueue</code>: Define una estructura de datos cola FIFO concurrent-aware. Es implementada por las clases <code>ArrayBlockingQueue</code>, <code>LinkedBlockingQueue</code> y <code>PriorityBlockingQueue</code>.</li> <li><code>TransferQueue</code>: Define una estructura de datos cola FIFO concurrent-aware en las que los productores (los que insertan datos) pueden decidir esperar a que los consumidores (los que extraen datos) reciban los elementos. Es implementada por la clase <code>LinkedTransferQueue</code>.</li> <li><code>BlockingDeque</code>: Define una estructura de datos cola LIFO y FIFO concurrent-aware (con inserciones y extracciones en ambos extremos).</li> </ul> <p>Tambi\u00e9n define una serie de interfaces para colecciones que funcionen s\u00f3lo en modo no bloqueante:</p> <ul> <li><code>ConcurrentMap</code>: Define una estructura de datos mapa concurrent-aware. Es implementada por las clases <code>ConcurrentHashMap</code> y <code>ConcurrentSkipListMap</code>.</li> <li><code>ConcurrentNavigableMap</code>: Define una estructura de datos de mapa navegable concurrent-aware. Es implementado por la clase <code>ConcurrentSkipListMap</code>.</li> </ul>"},{"location":"bloque_v/tema_25/page-7/","title":"7 Concurrent-aware collections que usan cerrojos","text":""},{"location":"bloque_v/tema_25/page-7/#arrayblockingqueue-y-linkedblockingqueue","title":"ArrayBlockingQueue y LinkedBlockingQueue","text":"<p>La interfaz <code>BlockingQueue</code> define una estructura de datos en forma de cola FIFO proporcionando operaciones optimizadas concurrent-aware.</p> <p><code>BlockingQueue</code> proporciona cuatro grupos de m\u00e9todos, dependiendo de lo que queremos que ocurra si no se puede realizar la operaci\u00f3n solicitada inmediatamente porque otro hilo est\u00e1 haciendo otra operaci\u00f3n que lo imposibilita, pero puede realizarse m\u00e1s adelante. As\u00ed, tendremos m\u00e9todos que lanzar\u00e1n una excepci\u00f3n, otros que retornan un valor especial (<code>null</code> o <code>false</code>), otros que bloquean al hilo llamador indefinidamente y otros que bloquean al hilo llamador una cantidad m\u00e1xima de tiempo antes de darse por vencido.</p> <p>En la siguiente tabla se muestran las operaciones, los grupos y los m\u00e9todos:</p> Lanzan un excepci\u00f3n Retornan valor especial Bloquean Bloquean con limite tiempo Inserci\u00f3n <code>add(e)</code> <code>offer(e)</code> <code>put(e)</code> <code>offer(e, time, unit)</code> Eliminaci\u00f3n <code>remove()</code> <code>poll()</code> <code>take()</code> <code>poll(time, unit)</code> Consulta <code>element()</code> <code>peek()</code> - - <p>Las estructuras de datos <code>BlockingQueue</code> no acepta el valor <code>null</code> como elemento, dado que dicho valor es usado como valor centinela para indicar fallos en las operaciones <code>poll()</code>. De hecho, si pasamos el valor <code>null</code> a los m\u00e9todos <code>add()</code>, <code>put()</code> o <code>offer()</code> se lanzar\u00e1 la excepci\u00f3n <code>NullPointerException</code>.</p> <p>Se puede definir un l\u00edmite de capacidad a una <code>BlockingQueue</code>, de manera que si una vez alcanzada la capacidad m\u00e1xima se intenta agregar un elemento mediante <code>put()</code>, el hilo llamador quede bloqueado, en espera de que haya espacio disponible.</p> <p>Por su parte, si la cola est\u00e1 vac\u00eda y un hilo llama al m\u00e9todo <code>take()</code> el hilo quedar\u00e1 bloqueada hasta que haya alg\u00fan elemento en la cola.</p> <p>La interfaz <code>BlockingQueue</code> es implementada por diferentes clases que usan distintos tipos de estructuras para almacenar los datos:</p> <ul> <li><code>ArrayBlockingQueue</code>: Una blocking queue FIFO, limitada en capacidad, y en la que los elementos se almacenan en un array. Una vez creada, no se puede modificar su capacidad. Corresponde al t\u00edpico buffer de capacidad fija. Podemos activar un modo justo (fair mode) para la espera de los hilos bloqueados para la inserci\u00f3n con <code>put()</code> o la extracci\u00f3n con <code>take()</code>.</li> <li><code>LinkedBlockingQueue</code>: Una blocking queue FIFO, que opcionalmente podemos limitar en capacidad, y en la que los elementos se almacenan como nodos enlazados. Los nodos son creados din\u00e1micamente cuando se insertan los elementos, siempre y cuando no se haya llegado a la capacidad m\u00e1xima, si \u00e9sta ha sido especificada.</li> <li><code>PriorityBlockingQueue</code>: Una blocking queue, no limitada en capacidad, en la que los elementos son ordenados atendiendo a un determinado criterio o prioridad. Los elementos deben implementar la interfaz <code>Comparable</code> para poder llevar a cabo la ordenaci\u00f3n.</li> <li><code>DelayQueue</code>: Una blocking queue, no limitada en capacidad, en la que cada elemento tiene asociado un determinado delay o tiempo de expiraci\u00f3n, antes del cual no pueden ser extra\u00eddos de la cola. As\u00ed, la cola est\u00e1 ordenada por tiempo de expiraci\u00f3n.</li> <li><code>SynchronousQueue</code>: Una blocking queue en la que cada operaci\u00f3n de inserci\u00f3n debe esperar a su correspondiente operaci\u00f3n de extracci\u00f3n, y viceversa. En realidad la cola no almacena ning\u00fan elemento y por tanto no tiene ninguna capacidad, ya que simplemente act\u00faa como intermediario de entrega de datos. Por tanto no se puede consultar elementos en la cola, ni iterar sobre ellos, y s\u00f3lo pueden insertarse si otro hilo va a extraerlo.</li> </ul>"},{"location":"bloque_v/tema_25/page-7/#proyecto-arrayblockingqueue","title":"Proyecto ArrayBlockingQueue","text":"<p>Este proyecto es similar al Proyecto WaitNotify pero haciendo uso de una estructura de datos <code>ArrayBlockingQueue</code>, en vez de usar cerrojos intr\u00ednsecos.</p> MainBakeryDoughnut ConsumerDoughnut Producer <pre><code>public class Main {\npublic static void main(String[] args) {\nBakery bakery = new Bakery();\nThread doughnutProducerThread = new Thread(new DoughnutProducer(bakery), \"Doughnut producer\");\nThread doughnutConsumerThread = new Thread(new DoughnutConsumer(bakery), \"Doughnut consumer\");\ndoughnutProducerThread.start();\ndoughnutConsumerThread.start();\n}\n}\n</code></pre> <pre><code>import java.util.concurrent.ArrayBlockingQueue;\npublic class Bakery {\nprivate static final int TRAY_CAPACITY = 10;\nprivate final ArrayBlockingQueue&lt;Integer&gt; tray = new ArrayBlockingQueue&lt;&gt;(TRAY_CAPACITY);\npublic void addToTray(Integer doughnut) throws InterruptedException {\ntray.put(doughnut);\nSystem.out.printf(\"Producer puts doughnut #%d on the tray\\n\", doughnut);\n}\npublic Integer extractFromTray() throws InterruptedException {\nInteger doughnut = tray.take();\nSystem.out.printf(\"Consumer extracts doughnut #%d from tray\\n\", doughnut);\nreturn doughnut;\n}\n}\n</code></pre> <pre><code>import java.util.Objects;\nimport java.util.concurrent.TimeUnit;\npublic class DoughnutConsumer implements Runnable {\nprivate final Bakery bakery;\npublic DoughnutConsumer(Bakery bakery) {\nObjects.requireNonNull(bakery);\nthis.bakery = bakery;\n}\n@Override\npublic void run() {\nInteger doughnut;\nwhile (!Thread.currentThread().isInterrupted()) {\ntry {\ndoughnut = bakery.extractFromTray();\n} catch (InterruptedException e) {\nSystem.out.println(\"Consumer has been interrupted while extracting from tray\");\nreturn;\n}\ntry {\neat(doughnut);\n} catch (InterruptedException e) {\nSystem.out.println(\"Consumer has been interrupted while eating\");\nreturn;\n}\n}\nSystem.out.println(\"Consumer has been interrupted\");\n}\nprivate void eat(int doughnut) throws InterruptedException {\nSystem.out.printf(\"Consumer is eating doughnut #%d\\n\", doughnut);\nTimeUnit.SECONDS.sleep(30);\n}\n}\n</code></pre> <pre><code>import java.util.Objects;\nimport java.util.concurrent.TimeUnit;\npublic class DoughnutProducer implements Runnable {\nprivate final Bakery bakery;\nprivate int doughnutNumber;\npublic DoughnutProducer(Bakery bakery) {\nObjects.requireNonNull(bakery);\nthis.bakery = bakery;\n}\n@Override\npublic void run() {\nint doughnut;\nwhile (!Thread.currentThread().isInterrupted()) {\ntry {\ndoughnut = makeDoughnut();\n} catch (InterruptedException e) {\nSystem.out.println(\"Producer has been interrupted while making a doughnut\");\nreturn;\n}\ntry {\nbakery.addToTray(doughnut);\n} catch (InterruptedException e) {\nSystem.out.println(\"Producer has been interrupted while adding a doughnut to the tray\");\nreturn;\n}\n}\nSystem.out.println(\"Producer has been interrupted\");\n}\nprivate int makeDoughnut() throws InterruptedException {\nint doughnut = ++doughnutNumber;\nSystem.out.printf(\"Producer is making doughnut #%d\\n\", doughnut);\nTimeUnit.SECONDS.sleep(1);\nreturn doughnut;\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_25/page-7/#proyecto-delayedqueue","title":"Proyecto DelayedQueue","text":"<p>Este proyecto es parecido al Proyecto ArrayBlockingQueue pero haciendo que no sea posible extraer un donut de la bandeja si \u00e9ste no lleva en ella al menos tres segundos (para dar tiempo a que el glaseado se condense adecuadamente). Por tanto, el consumidor ser\u00e1 bloqueado si no hay en la bandeja ning\u00fan donut que cumpla dicha caracter\u00edstica. Para proporcionar dicha funcionalidad usaremos una <code>DelayedQueue</code>.</p> MainDoughnutBakeryDoughnutConsumerDoughnutProducer <pre><code>public class Main {\npublic static void main(String[] args) {\nBakery bakery = new Bakery();\nThread doughnutProducerThread = new Thread(new DoughnutProducer(bakery), \"Doughnut producer\");\nThread doughnutConsumerThread = new Thread(new DoughnutConsumer(bakery), \"Doughnut consumer\");\ndoughnutProducerThread.start();\ndoughnutConsumerThread.start();\n}\n}\n</code></pre> <pre><code>import java.util.concurrent.Delayed;\nimport java.util.concurrent.TimeUnit;\npublic class Doughnut implements Delayed {\nprivate static final long DONUT_GLAZE_DELAY_MILLIS = 3000;\nprivate final int number;\nprivate final long startTime;\npublic Doughnut(int number) {\nthis.number = number;\nthis.startTime = System.currentTimeMillis() + DONUT_GLAZE_DELAY_MILLIS;\n}\npublic int getNumber() {\nreturn number;\n}\n@Override\npublic long getDelay(TimeUnit unit) {\nlong diff = startTime - System.currentTimeMillis();\nreturn unit.convert(diff, TimeUnit.MILLISECONDS);\n}\n@Override\npublic int compareTo(Delayed o) {\nreturn (int) (this.startTime - ((Doughnut) o).startTime);\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.DelayQueue;\npublic class Bakery {\nfinal DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nprivate final DelayQueue&lt;Doughnut&gt; tray = new DelayQueue&lt;&gt;();\npublic void addToTray(Doughnut doughnut) {\ntray.put(doughnut);\nSystem.out.printf(\"%s -&gt; Producer puts doughnut #%d on the tray\\n\",\nLocalTime.now().format(dateTimeFormatter), doughnut.getNumber());\n}\npublic Doughnut extractFromTray() throws InterruptedException {\nSystem.out.printf(\"%s -&gt; Consumer tries to extract a doughnut from tray\\n\",\nLocalTime.now().format(dateTimeFormatter));\nDoughnut doughnut = tray.take();\nSystem.out.printf(\"%s -&gt; Consumer extracts doughnut #%d from tray\\n\",\nLocalTime.now().format(dateTimeFormatter), doughnut.getNumber());\nreturn doughnut;\n}\n}\n</code></pre> <pre><code>import java.util.Objects;\nimport java.util.concurrent.TimeUnit;\npublic class DoughnutConsumer implements Runnable {\nprivate final Bakery bakery;\npublic DoughnutConsumer(Bakery bakery) {\nObjects.requireNonNull(bakery);\nthis.bakery = bakery;\n}\n@Override\npublic void run() {\nDoughnut doughnut;\nwhile (!Thread.currentThread().isInterrupted()) {\ntry {\ndoughnut = bakery.extractFromTray();\n} catch (InterruptedException e) {\nSystem.out.println(\"Consumer has been interrupted while extracting from tray\");\nreturn;\n}\ntry {\neat(doughnut);\n} catch (InterruptedException e) {\nSystem.out.println(\"Consumer has been interrupted while eating\");\nreturn;\n}\n}\nSystem.out.println(\"Consumer has been interrupted\");\n}\nprivate void eat(Doughnut doughnut) throws InterruptedException {\nSystem.out.printf(\"Consumer is eating doughnut #%d\\n\", doughnut.getNumber());\nTimeUnit.SECONDS.sleep(1);\n}\n}\n</code></pre> <pre><code>import java.util.Objects;\nimport java.util.concurrent.TimeUnit;\npublic class DoughnutProducer implements Runnable {\nprivate final Bakery bakery;\nprivate int doughnutNumber;\npublic DoughnutProducer(Bakery bakery) {\nObjects.requireNonNull(bakery);\nthis.bakery = bakery;\n}\n@Override\npublic void run() {\nDoughnut doughnut;\nwhile (!Thread.currentThread().isInterrupted()) {\ntry {\ndoughnut = makeDoughnut();\n} catch (InterruptedException e) {\nSystem.out.println(\"Producer has been interrupted while making a doughnut\");\nreturn;\n}\nbakery.addToTray(doughnut);\n}\nSystem.out.println(\"Producer has been interrupted\");\n}\nprivate Doughnut makeDoughnut() throws InterruptedException {\nint doughnut = ++doughnutNumber;\nSystem.out.printf(\"Producer is making doughnut #%d\\n\", doughnut);\nTimeUnit.SECONDS.sleep(4);\nreturn new Doughnut(doughnut);\n}\n}\n</code></pre> <p>Si ejecutamos la aplicaci\u00f3n veremos que no rd posible extraer un donut de la bandeja si \u00e9ste no lleva en ella al menos tres segundos.</p>"},{"location":"bloque_v/tema_25/page-7/#proyecto-synchronousqueue","title":"Proyecto SynchronousQueue","text":"<p>Este proyecto es parecido al Proyecto ArrayBlockingQueue pero haciendo que el productor sea bloqueado en la bandeja cada vez de agrega un donuts a ella, hasta que el cliente lo extraiga de la misma. De esta manera el productor se asegura que no produce mas de un donut por adelantado.</p> MainBakeryDoughnutConsumerDoughnutProducer <pre><code>public class Main {\npublic static void main(String[] args) {\nBakery bakery = new Bakery();\nThread doughnutProducerThread = new Thread(new DoughnutProducer(bakery), \"Doughnut producer\");\nThread doughnutConsumerThread = new Thread(new DoughnutConsumer(bakery), \"Doughnut consumer\");\ndoughnutProducerThread.start();\ndoughnutConsumerThread.start();\n}\n}\n</code></pre> <pre><code>import java.util.concurrent.SynchronousQueue;\npublic class Bakery {\nprivate final SynchronousQueue&lt;Integer&gt; tray = new SynchronousQueue&lt;&gt;();\npublic void addToTray(Integer doughnut) throws InterruptedException {\nSystem.out.printf(\"Producer puts doughnut #%d on the tray\\n\", doughnut);\ntray.put(doughnut);\n}\npublic Integer extractFromTray() throws InterruptedException {\nInteger doughnut = tray.take();\nSystem.out.printf(\"Consumer extracts doughnut #%d from tray\\n\", doughnut);\nreturn doughnut;\n}\n}\n</code></pre> <pre><code>import java.util.Objects;\nimport java.util.concurrent.TimeUnit;\npublic class DoughnutConsumer implements Runnable {\nprivate final Bakery bakery;\npublic DoughnutConsumer(Bakery bakery) {\nObjects.requireNonNull(bakery);\nthis.bakery = bakery;\n}\n@Override\npublic void run() {\nInteger doughnut;\nwhile (!Thread.currentThread().isInterrupted()) {\ntry {\ndoughnut = bakery.extractFromTray();\n} catch (InterruptedException e) {\nSystem.out.println(\"Consumer has been interrupted while extracting from tray\");\nreturn;\n}\ntry {\neat(doughnut);\n} catch (InterruptedException e) {\nSystem.out.println(\"Consumer has been interrupted while eating\");\nreturn;\n}\n}\nSystem.out.println(\"Consumer has been interrupted\");\n}\nprivate void eat(int doughnut) throws InterruptedException {\nSystem.out.printf(\"Consumer is eating doughnut #%d\\n\", doughnut);\nTimeUnit.SECONDS.sleep(20);\n}\n}\n</code></pre> <pre><code>import java.util.Objects;\nimport java.util.concurrent.TimeUnit;\npublic class DoughnutProducer implements Runnable {\nprivate final Bakery bakery;\nprivate int doughnutNumber;\npublic DoughnutProducer(Bakery bakery) {\nObjects.requireNonNull(bakery);\nthis.bakery = bakery;\n}\n@Override\npublic void run() {\nint doughnut;\nwhile (!Thread.currentThread().isInterrupted()) {\ntry {\ndoughnut = makeDoughnut();\n} catch (InterruptedException e) {\nSystem.out.println(\"Producer has been interrupted while making a doughnut\");\nreturn;\n}\ntry {\nbakery.addToTray(doughnut);\n} catch (InterruptedException e) {\nSystem.out.println(\"Producer has been interrupted while adding a doughnut to the tray\");\nreturn;\n}\n}\nSystem.out.println(\"Producer has been interrupted\");\n}\nprivate int makeDoughnut() throws InterruptedException {\nint doughnut = ++doughnutNumber;\nSystem.out.printf(\"Producer is making doughnut #%d\\n\", doughnut);\nTimeUnit.SECONDS.sleep(1);\nreturn doughnut;\n}\n}\n</code></pre> <p>Si ejecutamos la aplicaci\u00f3n veremos que los donuts se entregan \"en mano\" uno a uno entre el productor y el consumidor.</p>"},{"location":"bloque_v/tema_25/page-7/#linkedtransferqueue","title":"LinkedTransferQueue","text":"<p>Una <code>TransferQueue</code> es una blocking queue, que opcionalmente podemos limitar en capacidad, con una funcionalidad adicional a la <code>BlockingQueue</code>, la de permitir al hilo que realiza la inserci\u00f3n bloquearse esperando a que un consumidor extraiga dicho elemento, es decir, esperar a que la transferencia se hace efectiva (de ah\u00ed su nombre).</p> <p>Para ello, adem\u00e1s de los m\u00e9todos habituales de inserci\u00f3n proporcionados por la interfaz <code>BlockingQueue</code>, la interfaz <code>TransferQueue</code> proporciona el m\u00e9todo <code>transfer(e)</code> para tal fin, que har\u00e1 que el hilo que lo ejecute ser\u00e1 bloqueado hasta que alg\u00fan otro hilo llame al m\u00e9todo <code>take()</code> o al m\u00e9todo <code>poll()</code> para obtener dicho elemento. Si cuando se llama al m\u00e9todo <code>transfer(e)</code> ya hab\u00eda elementos en la lista, el hilo ser\u00e1 bloqueado mientras otros hilos procesan todos los elementos anteriores de la cola y s\u00f3lo ser\u00e1 desbloqueado cuando otro hilo extraiga de la cola elemento transferido.</p> <p>Es posible tambi\u00e9n llamar al m\u00e9todo <code>hasWaitingConsumer()</code> para consultar si hay alg\u00fan consumidor esperando a que haya elementos en la cola.</p> <p>La clase que implementa esta interfaz es <code>LinkedTransferQueue</code>, en la que los elementos se almacenan como nodos enlazados.</p> <p>La clase <code>LinkedTransferQueue</code> proporciona un modo de funcionamiento similar al de <code>SynchronousQueue</code>. Sin embargo, a diferencia de \u00e9sta, <code>LinkedTransferQueue</code> proporciona otros modos de funcionamiento, en concreto los proporcionados por la interfaz <code>BlockingQueue</code>, por lo que nos permite decidir en cada momento qu\u00e9 modo usar.</p>"},{"location":"bloque_v/tema_25/page-7/#proyecto-linkedtransferqueue","title":"Proyecto LinkedTransferQueue","text":"<p>Este proyecto es parecido al Proyecto ArrayBlockingQueue pero haciendo que el productor sea bloqueado en la bandeja cada tres donuts, hasta que el cliente extraiga de la misma el tercer donut. De esta manera el productor se asegura que no produce mas de tres donuts por adelantado.</p> MainBakeryDoughnutConsumerDoughnutProducer <pre><code>public class Main {\npublic static void main(String[] args) {\nBakery bakery = new Bakery();\nThread doughnutProducerThread = new Thread(new DoughnutProducer(bakery), \"Doughnut producer\");\nThread doughnutConsumerThread = new Thread(new DoughnutConsumer(bakery), \"Doughnut consumer\");\ndoughnutProducerThread.start();\ndoughnutConsumerThread.start();\n}\n}\n</code></pre> <pre><code>import java.util.concurrent.LinkedTransferQueue;\npublic class Bakery {\nprivate final LinkedTransferQueue&lt;Integer&gt; tray = new LinkedTransferQueue&lt;&gt;();\npublic void addToTray(Integer doughnut) {\nSystem.out.printf(\"Producer puts doughnut #%d on the tray\\n\", doughnut);\ntray.put(doughnut);\n}\npublic void addToTrayAndBlock(Integer doughnut) throws InterruptedException {\nSystem.out.printf(\"Producer puts doughnut #%d on the tray and waits to the consumer to extract it\\n\", doughnut);\ntray.transfer(doughnut);\n}\npublic Integer extractFromTray() throws InterruptedException {\nInteger doughnut = tray.take();\nSystem.out.printf(\"Consumer extracts doughnut #%d from tray\\n\", doughnut);\nreturn doughnut;\n}\n}\n</code></pre> <pre><code>import java.util.Objects;\nimport java.util.concurrent.TimeUnit;\npublic class DoughnutProducer implements Runnable {\nprivate final Bakery bakery;\nprivate int doughnutNumber;\npublic DoughnutProducer(Bakery bakery) {\nObjects.requireNonNull(bakery);\nthis.bakery = bakery;\n}\n@Override\npublic void run() {\nint doughnut;\nwhile (!Thread.currentThread().isInterrupted()) {\ntry {\ndoughnut = makeDoughnut();\n} catch (InterruptedException e) {\nSystem.out.println(\"Producer has been interrupted while making a doughnut\");\nreturn;\n}\ntry {\nif (doughnut % 3 == 0) {\nbakery.addToTrayAndBlock(doughnut);\n} else {\nbakery.addToTray(doughnut);\n}\n} catch (InterruptedException e) {\nSystem.out.println(\"Producer has been interrupted while adding a doughnut to the tray\");\nreturn;\n}\n}\nSystem.out.println(\"Producer has been interrupted\");\n}\nprivate int makeDoughnut() throws InterruptedException {\nint doughnut = ++doughnutNumber;\nSystem.out.printf(\"Producer is making doughnut #%d\\n\", doughnut);\nTimeUnit.SECONDS.sleep(1);\nreturn doughnut;\n}\n}\n</code></pre> <pre><code>import java.util.Objects;\nimport java.util.concurrent.TimeUnit;\npublic class DoughnutProducer implements Runnable {\nprivate final Bakery bakery;\nprivate int doughnutNumber;\npublic DoughnutProducer(Bakery bakery) {\nObjects.requireNonNull(bakery);\nthis.bakery = bakery;\n}\n@Override\npublic void run() {\nint doughnut;\nwhile (!Thread.currentThread().isInterrupted()) {\ntry {\ndoughnut = makeDoughnut();\n} catch (InterruptedException e) {\nSystem.out.println(\"Producer has been interrupted while making a doughnut\");\nreturn;\n}\ntry {\nif (doughnut % 3 == 0) {\nbakery.addToTrayAndBlock(doughnut);\n} else {\nbakery.addToTray(doughnut);\n}\n} catch (InterruptedException e) {\nSystem.out.println(\"Producer has been interrupted while adding a doughnut to the tray\");\nreturn;\n}\n}\nSystem.out.println(\"Producer has been interrupted\");\n}\nprivate int makeDoughnut() throws InterruptedException {\nint doughnut = ++doughnutNumber;\nSystem.out.printf(\"Producer is making doughnut #%d\\n\", doughnut);\nTimeUnit.SECONDS.sleep(1);\nreturn doughnut;\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_25/page-7/#linkedblockingdequeue","title":"LinkedBlockingDequeue","text":"<p>La interfaz <code>BlockingDequeue</code> define una estructura de datos en forma de cola bidireccional proporcionando operaciones optimizadas concurrent-aware. Se caracteriza porque se pueden realizar inserciones y extracciones en ambos extremos de la cola.</p> <p><code>BlockingDequeue</code> proporciona cuatro grupos de m\u00e9todos, dependiendo de lo que queremos que ocurra si no se puede realizar la operaci\u00f3n solicitada inmediatamente porque otro hilo est\u00e1 haciendo otra operaci\u00f3n que lo imposibilita, pero puede realizarse m\u00e1s adelante. As\u00ed, tendremos m\u00e9todos que lanzar\u00e1n una excepci\u00f3n, otros que retornan un valor especial (<code>null</code> o <code>false</code>), otros que bloquean al hilo llamador indefinidamente y otros que bloquean al hilo llamador una cantidad m\u00e1xima de tiempo antes de darse por vencido.</p> <p>En las siguientes tablas se muestran las operaciones, los grupos, los extremos y los m\u00e9todos:</p> Extremo head Lanzan un excepci\u00f3n Retornan valor especial Bloquean Bloquean con l\u00edmite tiempo Inserci\u00f3n <code>addFirst(e)</code> <code>offerFirst(e)</code> <code>putFirst(e)</code> <code>offerFirst(e, time, unit)</code> Eliminaci\u00f3n <code>removeFirst(e)</code> <code>pollFirst()</code> <code>takeFirst()</code> <code>pollFirst(time, unit)</code> Consulta <code>getFirst()</code> <code>peekFirst()</code> - - Extremo tail Lanzan un excepci\u00f3n Retornan valor especial Bloquean Bloquean con l\u00edmite tiempo Inserci\u00f3n <code>addLast(e)</code> <code>offerLast(e)</code> <code>putLast(e)</code> <code>offerLast(e, time, unit)</code> Eliminaci\u00f3n <code>removeLast(e)</code> <code>pollLast()</code> <code>takeLast()</code> <code>pollLast(time, unit)</code> Consulta <code>getLast()</code> <code>peekLast()</code> - - <p>Al igual que <code>BlockingQueue</code>, las estructuras de datos <code>BlockingDequeue</code> no aceptan el valor <code>null</code> como elemento.</p> <p>Una implementaci\u00f3n de <code>BlockingDeque</code> pude ser usada directamente como una cola <code>BlockingQueue</code>, ya que hereda de ella, haciendo m\u00e9todos equivalentes. Por ejemplo, <code>add(e)</code> es equivalente a <code>addLst(e)</code>, <code>remove()</code> es equivalente a <code>removeFirst()</code> y <code>element()</code> es equivalente a <code>getFirst()</code>.</p> <p>La clase que implementa esta interfaz es <code>LinkedBlockingDequeue</code>, que opcionalmente podemos limitar en capacidad, y en la que los elementos se almacenan como nodos enlazados.</p>"},{"location":"bloque_v/tema_25/page-7/#concurrenthashmap","title":"ConcurrentHashMap","text":"<p>La interfaz <code>ConcurrentMap</code> define una estructura de datos mapa concurrent-aware, que garantiza la atomicidad de las operaciones.</p> <p>Proporciona m\u00e9todos del tipo check-then-act (comprueba y despu\u00e9s act\u00faa) que son realizados at\u00f3micamente, como:</p> <ul> <li><code>replace(K key, V oldValue, V newValue)</code>: S\u00f3lo reemplaza el valor asociado a la clave si en ese momento contiene el valor <code>oldValue</code>.</li> <li><code>putIfAbsent(K key, V value)</code>: S\u00f3lo asocia el valor a la clave si \u00e9sta no tiene ning\u00fan valor asociado.</li> <li><code>computeIfAbsent(K key, Function&lt;? super K,? extends V&gt; mappingFunction)</code>: S\u00f3lo si la clave no tiene asociado ning\u00fan valor ejecuta la funci\u00f3n recibida como argumento y asocia el valor retornado por \u00e9sta a la clave.</li> <li><code>computeIfPresent(K key, Function&lt;? super K,? extends V&gt; mappingFunction)</code>: S\u00f3lo si la clave tiene asociado alg\u00fan valor ejecuta la funci\u00f3n recibida como argumento y asocia el valor retornado por \u00e9sta a la clave.</li> </ul> <p>La clase principal que implementa la interfaz <code>ConcurrentMap</code> es <code>ConcurrentHashMap</code>, que usa internamente una tabla *hash* para almacenar los datos.</p> <p>Para la mayor\u00eda de las operaciones de actualizaci\u00f3n <code>ConcurrentHashMap</code> usa operaciones CAS (compare and swap), por los que proporciona buen rendimiento. Sin embargo si se produce una colisi\u00f3n en el hash entre dos elementos, usar\u00e1 un cerrojo. Por este motivo no se puede clasificar totalmente como lock-free.</p>"},{"location":"bloque_v/tema_25/page-8/","title":"8 Concurrent-aware collections","text":""},{"location":"bloque_v/tema_25/page-8/#introduccion","title":"Introducci\u00f3n","text":"<p>Las colecciones thread-safe que vamos a estudiar a continuaci\u00f3n se basan en el algoritmo de Michael &amp; Scott algorithm para colas no bloqueantes sin cerrojos (non blocking lock-free queues).</p> <p>Estas colecciones NO proporcionan un modo bloqueante, dado que emplea un algoritmo no bloqueante muy eficiente. Por este motivo, estas clases no implementan la interfaz <code>BlockingQueue</code> o <code>BlockingDequeue</code>, y no proporcionan los m\u00e9todos bloqueantes incluidos en ellas.</p> <p>Por tanto su uso no est\u00e1 recomendado en escenarios en los que los productores deban bloquearse esperando a consumidores o viceversa, ya que no podr\u00e1n hacerlo.</p> <p>Debemos tener en cuenta que los iteradores creados para recorrer estas colecciones son d\u00e9bilmente consistentes, devolviendo elementos que reflejan el estado de la colecci\u00f3n en alg\u00fan momento desde la creaci\u00f3n del iterador. No lanzan la excepci\u00f3n <code>ConcurrentModificationException</code>, y pueden funcionar concurrentemente con otras operaciones. Los elementos contenidos en la colecci\u00f3n desde la creaci\u00f3n del iterador ser\u00e1n devueltos exactamente una vez.</p> <p>Otro aspecto que debemos vigilar es que, a diferencia de en la mayor\u00eda de las colecciones, y debido a la naturaleza asincr\u00f3nica de estas colas, la determinaci\u00f3n del n\u00famero actual de elementos requiere una traves\u00eda de los elementos, y por lo tanto el m\u00e9todo <code>size()</code> puede devolver resultados inexactos si esta colecci\u00f3n se modifica durante el recorrido para calcular el tama\u00f1o.</p> <p>Al igual que en otras colecciones concurrentes, se asegura que si concurrentemente un hilo est\u00e1 agregando un objeto a la colecci\u00f3n y otro lo est\u00e1 accediendo o eliminando, esta segunda operaci\u00f3n se realizar\u00e1 despu\u00e9s de la de inserci\u00f3n.</p> <p>Estas colecciones tampoco permite insertar en ella valores <code>null</code>, al igual de todas las colecciones concurrentes vistas anteriormente.</p> <p>Para saber m\u00e1s</p> <p>https://www.codejava.net/java-core/collections/understanding-collections-and-thread-safety-in-java</p>"},{"location":"bloque_v/tema_25/page-8/#concurrentlinkedqueue","title":"ConcurrentLinkedQueue","text":"<p>La clase <code>ConcurrentLinkedQueue</code> proporciona una estructura de datos en forma de cola FIFO thread-safe, sin limitaci\u00f3n de capacidad, en la que los elementos son nodos enlazados.</p> <p>A diferencia de <code>LinkedBlockingQueue</code>, la clase <code>ConcurrentLinkedQueue</code> NO proporcionan un modo bloqueante.</p> <p>En la siguiente tablas se muestran las operaciones principales y sus m\u00e9todos:</p> M\u00e9todo Inserci\u00f3n <code>add(e)</code> Eliminaci\u00f3n <code>remove()</code> Consulta <code>element()</code> <p>Esta colecci\u00f3n tampoco permite insertar en ella valores <code>null</code>, al igual de todas las colecciones concurrentes vistas anteriormente.</p>"},{"location":"bloque_v/tema_25/page-8/#concurrentlinkeddequeue","title":"ConcurrentLinkedDequeue","text":"<p>La clase <code>ConcurrentLinkedQueue</code> proporciona una estructura de datos en forma de cola FIFO y LIFO thread-safe, sin limitaci\u00f3n de capacidad, en la que los elementos son nodos enlazados.</p> <p>A diferencia de <code>LinkedBlockingDequeue</code>, la clase <code>ConcurrentLinkedDequeue</code> NO proporciona un modo bloqueante.</p> <p>En la siguiente tabla se muestran las operaciones principales y sus m\u00e9todos:</p> Extremo head Extremo tail Inserci\u00f3n <code>addFirst(e)</code> <code>addLast(e)</code> Eliminaci\u00f3n <code>removeFirst(e)</code> <code>removeFirst(e)</code> Consulta <code>getFirst()</code> <code>getLast()</code> <p>Esta colecci\u00f3n tampoco permite insertar en ella valores <code>null</code>, al igual de todas las colecciones concurrentes vistas anteriormente.</p>"},{"location":"bloque_v/tema_25/page-9/","title":"Ejercicios","text":"ArrayBlockingQueue <p>Realiza el ejercicio de los platos haciendo uso de la clase <code>ArrayBlockingQueue</code>.</p>"},{"location":"bloque_v/tema_26/page-1/","title":"1 Introducci\u00f3n","text":""},{"location":"bloque_v/tema_26/page-1/#introduccion","title":"Introducci\u00f3n","text":"<p>Normalmente, cuando se desarrolla una aplicaci\u00f3n concurrente simple en Java se crean varios objetos <code>Runnable</code> y los correspondientes objetos <code>Thread</code> para ejecutarlos. Si nuestro programa debe ejecutar muchas tareas concurrentes, este m\u00e9todo tiene varias desventajas:</p> <ul> <li>Se debe implementar toda la informaci\u00f3n relacionada con el c\u00f3digo para la gesti\u00f3n de los objetos <code>Thread</code> (creaci\u00f3n, terminaci\u00f3n, obtenci\u00f3n de resultados, etc.).</li> <li>Se debe crear un objeto <code>Thread</code> por cada tarea. Si se debe ejecutar un gran n\u00famero de tareas, este hecho puede afectar al rendimiento de la aplicaci\u00f3n.</li> <li>Se debe controlar y gestionar eficientemente los recursos del ordenador. Si se crean demasiados hilos, se puede saturar el sistema.</li> </ul> <p>Desde Java 5, la API de concurrencia de Java proporciona un mecanismo para resolver estos problemas, llamado Executor framework (entorno de trabajo de ejecuci\u00f3n), que se construye en base a la interfaz <code>Executor</code> (ejecutor), su subinterfaz <code>ExecutorService</code> (servicio de ejecuci\u00f3n) y la clase <code>ThreadPoolExecutor</code> (ejecutor mediante grupos de hilos), que implementa ambas interfaces.</p> <p>Este mecanismo separa por un lado la creaci\u00f3n de tareas y por otro lado su ejecuci\u00f3n, aplicando el patr\u00f3n de dise\u00f1o conocido como command. Tan s\u00f3lo ser\u00e1 necesario implementar los objetos <code>Runnable</code> correspondientes a las tareas y envi\u00e1rselos al ejecutor, quien ser\u00e1 responsable de su ejecuci\u00f3n. Para ello el ejecutor gestiona un grupo de hilos (threadpool) en el que va ejecutando las tareas que se le van enviando. Dependiendo del tipo de ejecutor del que se trate, en algunos casos es posible aumentar o decrementar el n\u00famero de hilos del threadpool atendiendo a las necesidades.</p> <p>El objetivo del empleo de un threadpool de work thread es la posibilidad de reutilizar hilos secundarios para ejecutar varias tareas, minimizando as\u00ed el tiempo necesario para crear hilos. As\u00ed cada hilo del threadpool ejecuta un bucle en el que cada iteraci\u00f3n trata de obtener (take) la siguiente tarea de una cola de tareas <code>BlockingQueue</code> del ejecutor (workQueue), en la se van insertando (offer) conforme son enviadas (submit). Si no existe ninguna tarea en la cola el hilo quedar\u00e1 bloqueado esperando (normalmente un determinado tiempo m\u00e1ximo). Una vez obtenido la tarea la ejecuta (run). Si transcurrido el tiempo m\u00e1ximo de espera el hilo no tiene tarea que ejecutar, dependiendo del tipo de ejecutor, puede que el hilo sea directamente finalizado, reduciendo el n\u00famero de hilos del threadpool del ejecutor.</p> <p> Figura 1 - ThreadPoolExecutor</p>"},{"location":"bloque_v/tema_26/page-10/","title":"10 InvokeAll()","text":""},{"location":"bloque_v/tema_26/page-10/#invokeall","title":"invokeAll()","text":"<p>Como hemos visto en el ejemplo anterior, cuando queremos enviar una colecci\u00f3n de tareas callable al ejecutor para que sean ejecutadas debemos enviarlas una a una e ir almacenando en una <code>List&lt;Future&lt;V&gt;&gt;</code> los objetos <code>Future&lt;V&gt;</code> retornados por las repetidas llamadas al m\u00e9todo <code>submit(callableV)</code> del ejecutor. Posteriormente recorreremos dicha lista de objetos <code>Future&lt;V&gt;</code> obteniendo uno a uno el resultado retornado por cada tarea callable, esperando en orden a que el resultado de cada tarea est\u00e9 disponible.</p> <p>Sin embargo, la interfaz <code>ExecutorService</code> define un m\u00e9todo adicional que nos permite en un solo realizar lo descrito en el apartado anterior. As\u00ed el m\u00e9todo <code>invokeAll(callableVCollection)</code> recibe una colecci\u00f3n de objetos <code>Callable&lt;V&gt;</code> que queremos que sean ejecutadas por el ejecutor, y retorna una <code>List&lt;Future&lt;V&gt;&gt;</code>, es decir una lista que contendr\u00e1 un objeto <code>Future</code> por cada tarea en la lista recibida como par\u00e1metro, y en el mismo orden, cada uno de los cuales contendr\u00e1 m\u00e1s adelante el valor retornado por la tarea <code>Callable&lt;V&gt;</code> correspondiente.</p> <p>Si le pasamos <code>null</code> como <code>callableVCollection</code> el m\u00e9todo lanzar\u00e1 la excepci\u00f3n <code>NullPointerException</code>. Si cualquiera de las tareas enviadas es rechazada por el ejecutor, por ejemplo porque \u00e9ste ya haya sido terminado, el m\u00e9todo lanzar\u00e1 la excepci\u00f3n <code>RejectedExecutionException</code>.</p> <p>Lo m\u00e1s interesante de este m\u00e9todo es que es bloqueante, en el sentido de que el hilo desde el que se llama queda bloqueado hasta que todas las tareas de la lista hayan finalizado su ejecuci\u00f3n, ya sea correctamente o lanzando una excepci\u00f3n. Si alguna de la tareas callable lanz\u00f3 una excepci\u00f3n, cuando accedamos al resultado de dicha tarea a trav\u00e9s del m\u00e9todo <code>get()</code> del correspondiente objeto <code>Future</code> se lanzar\u00e1 la excepci\u00f3n <code>ExecutionException</code>.</p> <p>Si mientras est\u00e1 bloqueado esperando en el m\u00e9todo <code>invokeAll(callableVCollection)</code> es hilo desde el que se llam\u00f3 es interrumpido, se lanzar\u00e1 la excepci\u00f3n <code>InterruptedException</code> y se cancelar\u00e1n las tareas de la lista que no hayan comenzado su ejecuci\u00f3n y aquellas que no la hayan completado, marcando como interrumpidos los correspondientes hilos del threadpool del ejecutor.</p> <p>Un aspecto muy importante es que debemos asegurarnos de no agregar o quitar elementos de la lista de callables pasada como argumento mientras se est\u00e1n ejecutando las tareas en el ejector, o de lo contrario se podr\u00e1n producir errores y el resultado no est\u00e1 definido.</p> <p>Este m\u00e9todo se encuentra sobrecargado <code>invokeAll(callableList, timeout, timeUnit)</code>, para que podamos especificar el tiempo m\u00e1ximo que queremos que el hilo desde el que se llama est\u00e9 bloqueado esperando a que finalicen todas las tareas. Si todas las tareas no han finalizado su ejecuci\u00f3n antes de dicho tiempo m\u00e1ximo, cuando \u00e9ste se alcance todas las tareas de la lista que est\u00e9n en ejecuci\u00f3n o pendientes de ejecuci\u00f3n ser\u00e1n canceladas, marcando como interrumpidos los correspondientes hilos de threadpool del ejecutor.</p>"},{"location":"bloque_v/tema_26/page-10/#proyecto-invokeall","title":"Proyecto InvokeAll","text":"<p>En este proyecto desarrollaremos una aplicaci\u00f3n similar a la del proyecto anterior, en la que se calcula el factorial de 10 n\u00fameros distintos. Crearemos un tarea <code>Callable</code> que calcule el factorial de un n\u00famero y un ejecutor con un threadpool fijo de 2 hilos que lance las diez tareas y obtenga el resultado de cada una de ellas, usando objetos <code>Future</code>, y lo almacene en una lista, para finalmente mostrar todos los resultados.</p> MainTask <pre><code>import java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.*;\nclass Main {\npublic static void main(String[] args) {\nThreadPoolExecutor fixedThreadPool =\n(ThreadPoolExecutor) Executors.newFixedThreadPool(2);\nList&lt;Task&gt; tasks = new ArrayList&lt;&gt;();\nint[] numbers = new int[10];\nfor (int i = 0; i &lt; 10; i++) {\nnumbers[i] = ThreadLocalRandom.current().nextInt(15) - 5;\ntasks.add(new Task(numbers[i]));\n}\ntry {\nList&lt;Future&lt;Integer&gt;&gt; futureList = fixedThreadPool.invokeAll(tasks, 2, TimeUnit.SECONDS);\nSystem.out.print(\"Results:\\n\");\nfor (int i = 0; i &lt; futureList.size(); i++) {\n// This get returns inmediately.\nFuture&lt;Integer&gt; future = futureList.get(i);\ntry {\nInteger factorial = future.get();\nSystem.out.printf(\"Task %d -&gt; factorial(%d) = %d\\n\", i + 1,\nnumbers[i], factorial);\n} catch (ExecutionException e) {\nSystem.out.printf(\"Task %d -&gt; factorial(%d) threw an exception\\n\",\ni + 1, numbers[i]);\n} catch (CancellationException e) {\nSystem.out.printf(\"Task %d -&gt; factorial(%d) was cancelled\\n\",\ni + 1, numbers[i]);\n}\n}\n} catch (InterruptedException ignored) {\n} finally {\nfixedThreadPool.shutdown();\n}\n}\n}\n</code></pre> <pre><code>import java.util.concurrent.Callable;\nimport java.util.concurrent.TimeUnit;\nclass Task implements Callable&lt;Integer&gt; {\nprivate final int number;\nTask(int number) {\nthis.number = number;\n}\n@Override\npublic Integer call() throws InterruptedException {\nreturn factorial(number);\n}\nprivate Integer factorial(int number) throws InterruptedException {\nif (number &lt; 0) throw new IllegalArgumentException(\"Number can't be negative\");\nint factorial = 1;\nfor (int i = 2; i &lt;= number; i++) {\nfactorial *= i;\nTimeUnit.MILLISECONDS.sleep(200);\n}\nreturn factorial;\n}\n}\n</code></pre> <p>Si ejecutamos el programa veremos c\u00f3mo se env\u00edan al ejecutor todas la tareas de c\u00e1lculo de una vez y el hilo principal queda bloqueado hasta que todas hayan terminado.</p>"},{"location":"bloque_v/tema_26/page-11/","title":"11 InvokeAny()","text":""},{"location":"bloque_v/tema_26/page-11/#invokeany","title":"invokeAny()","text":"<p>Una de las estrategias de resoluci\u00f3n de problemas con programaci\u00f3n concurrente consiste en ejecutar simult\u00e1neamente varias tareas que resuelven el mismo problema y quedarnos con el resultado de la primera tarea que lo resuelva. Por ejemplo, supongamos que queremos ordenar un array, por lo que creamos una tarea por cada algoritmo de ordenaci\u00f3n que hayamos implementado. Podemos lanzar todas estas tareas y quedarnos con el resultado del algoritmo que tarde menos en ordenar el array.</p> <p>Para llevar a cabo esta estrategia deberemos agrupar los objetos <code>Callable</code> correspondientes a las distintas tareas en una lista de tareas y enviar dicha lista al ejecutor mediante el m\u00e9todo <code>invokeAny(callableList)</code>.</p> <p>El m\u00e9todo <code>invokeAny(callableList)</code> de la clase <code>ThreadPoolExecutor</code> recibe una lista de tareas, inicia su ejecuci\u00f3n y retorna el resultado de la primera tarea que finalice sin lanzar una excepci\u00f3n. En cuanto una tarea finaliza, el resto de tareas son marcadas para cancelaci\u00f3n autom\u00e1ticamente, marcando como interrumpidos los hilos del threadpool del ejecutor de aquellas que se est\u00e9n ejecutando.</p> <p>El hilo que llama a <code>invokeAny(callableList)</code> es bloqueado hasta que la primera tarea finalice sin lanzar una excepci\u00f3n o a que todas finalicen con una excepci\u00f3n.</p> <p>Si todas las tareas enviadas al ejecutor mediante el m\u00e9todo <code>invokeAny()</code> lanzaran una excepci\u00f3n, el propio m\u00e9todo generar\u00e1 la excepci\u00f3n <code>ExecutionException</code> y el resultado del m\u00e9todo ser\u00eda indefinido.</p> <p>No podemos olvidar que el m\u00e9todo <code>invokeAny(callableList)</code> no retorna un <code>Future</code>, sino directamente un valor del tipo <code>V</code> correspondiente al tipo retornado por los callables de la lista enviada al ejecutar a trav\u00e9s de dicho m\u00e9todo.</p> <p>La clase <code>ThreadPoolExecutor</code> proporciona una versi\u00f3n sobrecargada del m\u00e9todo <code>invokeAny(callableList, time, timeUnit)</code>, para que podamos especificar el tiempo m\u00e1ximo que queremos que el hilo llamador est\u00e9 bloqueado esperando a que finalice alguna de las tareas sin lanzar una excepci\u00f3n. Si transcurrido dicho tiempo ninguna tarea ha finalizado satisfactoriamente, pero a\u00fan quedan tareas en ejecuci\u00f3n o por ejecutarse, se lanzar\u00e1 las excepci\u00f3n <code>TimeoutException</code>.</p>"},{"location":"bloque_v/tema_26/page-11/#proyecto-invokeany","title":"Proyecto InvokeAny","text":"<p>En este proyecto vamos a desarrollar una aplicaci\u00f3n para la autenticaci\u00f3n de un usuario en el sistema. La comprobaci\u00f3n se llevar\u00e1 a cabo mediante dos m\u00e9todos: comprobaci\u00f3n sobre una base de datos local y comprobaci\u00f3n sobre una base de datos remota. En realidad, en cuanto una de las dos autenticaciones tengan \u00e9xito y nos indique que el usuario es un usuario registrado en el sistema, el resultado de la otra comprobaci\u00f3n no nos ser\u00e1 de inter\u00e9s, y de hecho ser\u00e1 cancelada. Finalmente mostraremos por pantalla el m\u00e9todo que ha autenticado al usuario, si es que alguno lo ha hecho. Si ninguno lo ha hecho, se mostrar\u00e1 un mensaje de que el usuario no se ha autenticado.</p> MainAuthenticationSystemLocalDataBaseRemoteDatabaseAuthenticationTask <pre><code>import java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ThreadPoolExecutor;\nclass Main {\npublic static void main(String[] args) {\nString username = \"username\";\nString password = \"password\";\nRemoteDatabase remoteDatabase = new RemoteDatabase();\nLocalDatabase localDatabase = new LocalDatabase();\nAuthenticationTask remoteDatabaseTask = new AuthenticationTask(remoteDatabase, username, password);\nAuthenticationTask localDatabaseTask = new AuthenticationTask(localDatabase, username, password);\nList&lt;AuthenticationTask&gt; tasks = new ArrayList&lt;&gt;();\ntasks.add(remoteDatabaseTask);\ntasks.add(localDatabaseTask);\nThreadPoolExecutor fixedThreadPoolExecutor =\n(ThreadPoolExecutor) Executors.newFixedThreadPool(2);\ntry {\nAuthenticationSystem authenticationSystem = fixedThreadPoolExecutor.invokeAny(tasks);\nSystem.out.printf(\"User authenticated by %s\\n\", authenticationSystem.getName());\n} catch (InterruptedException ignored) {\n} catch (ExecutionException e) {\nSystem.out.print(\"User not authenticated\\n\");\n} finally {\nfixedThreadPoolExecutor.shutdown();\n}\n}\n}\n</code></pre> <pre><code>public interface AuthenticationSystem {\nString getName();\n@SuppressWarnings(\"unused\")\nboolean authenticate(String username, String password) throws InterruptedException;\n}\n</code></pre> <pre><code>import java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TimeUnit;\npublic class LocalDatabase implements AuthenticationSystem {\n@Override\npublic String getName() {\nreturn \"Local database\";\n}\n@Override\npublic boolean authenticate(String username, String password) throws InterruptedException {\nint searchDuration = ThreadLocalRandom.current().nextInt(5) + 1;\nSystem.out.print(\"Local database -&gt; Authenticating...\\n\");\nsearch(searchDuration);\nboolean authenticated = ThreadLocalRandom.current().nextBoolean();\nif (authenticated) {\nSystem.out.printf(\"Local database -&gt; Authenticated in %d seconds\\n\", searchDuration);\n} else {\nSystem.out.printf(\"Local database -&gt; Not authenticated in %d seconds\\n\", searchDuration);\n}\nreturn authenticated;\n}\nprivate void search(int searchDuration) throws InterruptedException {\ntry {\nTimeUnit.SECONDS.sleep(searchDuration);\n} catch (InterruptedException e) {\nSystem.out.print(\"Local database -&gt; Authentication cancelled\\n\");\nthrow new InterruptedException();\n}\n}\n}\n</code></pre> <pre><code>import java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TimeUnit;\npublic class RemoteDatabase implements AuthenticationSystem {\n@Override\npublic String getName() {\nreturn \"Remote database\";\n}\n@Override\npublic boolean authenticate(String username, String password) throws InterruptedException {\nint searchDuration = ThreadLocalRandom.current().nextInt(5) + 1;\nSystem.out.print(\"Remote database -&gt; Authenticating...\\n\");\nsearch(searchDuration);\nboolean authenticated = ThreadLocalRandom.current().nextBoolean();\nif (authenticated) {\nSystem.out.printf(\"Remote database -&gt; Authenticated in %d seconds\\n\", searchDuration);\n} else {\nSystem.out.printf(\"Remote database -&gt; Not authenticated in %d seconds\\n\", searchDuration);\n}\nreturn authenticated;\n}\nprivate void search(int searchDuration) throws InterruptedException {\ntry {\nTimeUnit.SECONDS.sleep(searchDuration);\n} catch (InterruptedException e) {\nSystem.out.print(\"Remote database -&gt; Authentication cancelled\\n\");\nthrow new InterruptedException();\n}\n}\n}\n</code></pre> <pre><code>import java.util.concurrent.Callable;\nclass AuthenticationTask implements Callable&lt;AuthenticationSystem&gt; {\nprivate final AuthenticationSystem authenticationSystem;\nprivate final String username;\nprivate final String password;\nAuthenticationTask(AuthenticationSystem authenticationSystem, String username, String password) {\nthis.authenticationSystem = authenticationSystem;\nthis.username = username;\nthis.password = password;\n}\n@Override\npublic AuthenticationSystem call() throws InterruptedException {\nboolean authenticated = authenticationSystem.authenticate(username, password);\nif (!authenticated) {\nthrow new RuntimeException(\"Authentication failed\");\n}\nreturn authenticationSystem;\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_26/page-12/","title":"12 ThreadFactory","text":""},{"location":"bloque_v/tema_26/page-12/#threadfactory","title":"ThreadFactory","text":"<p>Si queremos personalizar la forma en que los ejecutores crean los hilos cuando es necesario, podemos proporcionarle al ejecutor un objeto factor\u00eda de una clase que implemente la interfaz <code>ThreadFactory</code>, ya sea a trav\u00e9s del constructor del ejecutor, a trav\u00e9s de alg\u00fan m\u00e9todo est\u00e1tico factor\u00eda de la clase <code>Executors</code> o del propio m\u00e9todo <code>setThreadFactory(threadFactory)</code> del ejecutor.</p> <p><code>ThreadFactory</code> corresponde a una interfaz funcional cuyo m\u00e9todo <code>newThread(runnable)</code> recibe el runnable que debe ejecutar el hilo, de manera que debe construir y retornar un objeto <code>Thread</code> que lo ejecute. As\u00ed, podemos personalizar la creaci\u00f3n del hilo, por ejemplo estableciendo una determinada pol\u00edtica de nombres o de prioridades.</p> <pre><code>ThreadPoolExecutor cachedThreadPoolExecutor = (ThreadPoolExecutor) Executors.newCachedThreadPool(new ThreadFactory() {\n@Override\npublic Thread newThread(Runnable runnable) {\nThread thread = new Thread(runnable);\n// Customize thread\n// ...\nreturn thread;\n}\n});\n</code></pre>"},{"location":"bloque_v/tema_26/page-13/","title":"13 RejectedExecutionHandler","text":""},{"location":"bloque_v/tema_26/page-13/#controlar-las-tareas-rechazadas-por-el-ejecutor","title":"Controlar las tareas rechazadas por el ejecutor","text":"<p>Cuando deseamos finalizar la ejecuci\u00f3n de un ejecutor usamos su m\u00e9todo <code>shutdown()</code> o <code>shutdownNow()</code> para indicarle que debe concluir su ejecuci\u00f3n. En ese momento el ejecutor deja de aceptar nuevas tareas.</p> <p>Si enviamos una tarea al ejecutor despu\u00e9s de haberle informado de que debe terminarse, es decir, despu\u00e9s de llamar al m\u00e9todo <code>shutdown()</code> o <code>shutdownNow()</code>, dicha tarea es rechazada y, por defecto, la llamada al m\u00e9todo con el que se ha enviado la tarea lanzar\u00e1 una excepci\u00f3n <code>RejectedExecutionException</code>.</p> <p>La clase <code>ThreadPoolExecutor</code> proporciona un mecanismo para personalizar la respuesta ante el hecho de que una tarea sea rechazada. Para ello, podemos proporcionar al ejecutor un objeto de una clase que implemente la interfaz <code>RejectedExecutionHandler</code>, ya sea a trav\u00e9s del constructor o a trav\u00e9s del m\u00e9todo <code>setRejectedExecutionHandler(rejectedExecutionHandler)</code>.</p> <p>La interfaz <code>RejectedExecutionHandler</code> define un \u00fanico m\u00e9todo <code>rejectedExecution(runnable, threadPoolExecutor)</code>, que recibe el objeto <code>Runnable</code> correspondiente a la tarea rechazada y el ejecutor.</p> <p>Si le hemos proporcionado al ejecutor un objeto <code>RejectedExecutionHandler</code>, cuando el ejecutor rechace una tarea, no lanzar\u00e1 la excepci\u00f3n <code>RejectedExecutionException</code>, sino que llamar\u00e1 al m\u00e9todo <code>rejectedExecution(runnable, threadPoolExecutor)</code>, pas\u00e1ndole la tarea rechazada y \u00e9l mismo como ejecutor.</p>"},{"location":"bloque_v/tema_26/page-13/#proyecto-rejectedexecutionhandler","title":"Proyecto RejectedExecutionHandler","text":"<p>Este proyecto es similar al proyecto FixedThreadPool que estudiamos anteriormente, pero se usar\u00e1 un objeto <code>ThreadFactory</code> para que el ejecutor cree sus hilos y un objeto <code>RejectedExecutionHandler</code> para tratar las tareas que hayan sido rechazadas por haber sido enviadas despu\u00e9s de que el el servidor se haya terminado.</p> MainServerTask <pre><code>class Main {\npublic static void main(String[] args) {\nServer server = new Server();\nfor (int i = 0; i &lt; 50; i++) {\nTask task = new Task(\"Task \" + i);\nserver.execute(task);\ntry {\n// The less time you sleep the greater the thread pool size gets.\n// Try to reduce the time sleeping and see what happens to thread pool size.\nThread.sleep(100);\n} catch (InterruptedException e) {\nreturn;\n}\n}\ntry {\n// server.shutdown();\n// Try shutdownNow instead and see what happens.\nserver.shutdownNow();\n} catch (InterruptedException exception) {\nreturn;\n}\nTask task = new Task(\"Task sent after shutdown\");\nserver.execute(task);\n}\n}\n</code></pre> <pre><code>import java.util.concurrent.*;\nclass Server {\nstatic class ServerThreadFactory implements ThreadFactory {\nint threadNumber = 1;\n@Override\npublic Thread newThread(Runnable runnable) {\nreturn new Thread(runnable, \"Server thread \" + threadNumber++);\n}\n}\nprivate final ThreadPoolExecutor fixedThreadPool =\n(ThreadPoolExecutor) Executors.newFixedThreadPool(5);\nServer() {\nfixedThreadPool.setThreadFactory(new ServerThreadFactory());\nfixedThreadPool.setRejectedExecutionHandler((runnable, executor) -&gt;\nSystem.out.printf(\"Handler -&gt; Task rejected: %s\\n\",\n((Task) runnable).getName()));\n}\nvoid execute(Task task) {\nfixedThreadPool.execute(task);\n}\n@SuppressWarnings(\"unused\")\nvoid shutdown() throws InterruptedException {\nfixedThreadPool.shutdown();\nif (fixedThreadPool.awaitTermination(5, TimeUnit.SECONDS)) {\nSystem.out.printf(\"Server -&gt; Terminated. Completed: %d\\n\",\nfixedThreadPool.getCompletedTaskCount());\n} else {\nSystem.out.printf(\"Server -&gt; Await termination timeout. Completed: %d\\n\",\nfixedThreadPool.getCompletedTaskCount());\n}\n}\nvoid shutdownNow() throws InterruptedException {\nfixedThreadPool.shutdownNow();\nif (fixedThreadPool.awaitTermination(5, TimeUnit.SECONDS)) {\nSystem.out.printf(\"Server -&gt; Terminated. Completed: %d\\n\",\nfixedThreadPool.getCompletedTaskCount());\n} else {\nSystem.out.printf(\"Server -&gt; Await termination timeout. Completed: %d\\n\",\nfixedThreadPool.getCompletedTaskCount());\n}\n}\n}\n</code></pre> <pre><code>import java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TimeUnit;\nclass Task implements Runnable {\nprivate final String name;\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nTask(String name) {\nthis.name = name;\n}\nString getName() {\nreturn name;\n}\n@Override\npublic void run() {\nSystem.out.printf(\"%s -&gt; %s -&gt; Started at: %s\\n\",\nThread.currentThread().getName(), name, dateTimeFormatter.format(LocalDateTime.now()));\ntry {\nwork();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s -&gt; %s -&gt; Interrupted at: %s\\n\",\nThread.currentThread().getName(), name, dateTimeFormatter.format(LocalDateTime.now()));\nreturn;\n}\nSystem.out.printf(\"%s -&gt; %s -&gt; Finished at: %s\\n\",\nThread.currentThread().getName(), name, dateTimeFormatter.format(LocalDateTime.now()));\n}\nprivate void work() throws InterruptedException {\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(10));\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_26/page-14/","title":"14 ScheduledThreadPoolExecutor","text":""},{"location":"bloque_v/tema_26/page-14/#scheduledthreadpoolexecutor","title":"ScheduledThreadPoolExecutor","text":"<p>Como hemos visto, el Executor framework proporciona la clase <code>ThreadPoolExecutor</code> para ejecutar tareas <code>Callable</code> y <code>Runnable</code> con un grupo de hilos, sin que tengamos que preocuparnos de las operaciones de creaci\u00f3n de los hilos. Cuando se env\u00eda una tarea al ejecutor, \u00e9sta es ejecutada lo m\u00e1s pronto que sea posible, teniendo en cuenta la configuraci\u00f3n del ejecutor.</p> <p>Sin embargo, algunas veces este comportamiento no es precisamente el deseado, sino que queremos que la tarea sea ejecutada una vez haya transcurrido un cierto lapso de tiempo.</p> <p>Para este cometido, el Executor framework pone a nuestra disposici\u00f3n la interfaz <code>ScheduledExecutorService</code>, que extiende de <code>ExecutorService</code>, para definir una serie de m\u00e9todos que van a permitir planificar cu\u00e1ndo queremos que se ejecute una tarea aproximadamente, e incluso que \u00e9sta se ejecute de forma peri\u00f3dica.</p> <p>Veamos la definici\u00f3n de la interfaz <code>ScheduledExecutorService</code>:</p> <pre><code>public interface ScheduledExecutorService extends ExecutorService {\n// M\u00e9todos para retrasar un determinado tiempo la ejecuci\u00f3n\n// de una tarea en el ejecutor.\npublic ScheduledFuture&lt;?&gt; schedule(Runnable command, long delay, TimeUnit unit);\npublic &lt;V&gt; ScheduledFuture&lt;V&gt; schedule(Callable&lt;V&gt; callable, long delay, TimeUnit unit);\n// M\u00e9todos para planificar la ejecuci\u00f3n peri\u00f3dica de una tarea\n// en el ejecutor.\npublic ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command, long initialDelay,\nlong period, TimeUnit unit);\npublic ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(Runnable command, long initialDelay,\nlong delay, TimeUnit unit);\n}\n</code></pre> <p>La clase <code>ScheduledThreadPoolExecutor</code> extiende de <code>ThreadPoolExecutor</code>, por lo que incorpora toda su funcionalidad, pero adem\u00e1s implementa la interfaz <code>ScheduledExecutorService</code>.</p> <p>Esta clase ofrece distintos constructores sobrecargados, que nos permiten configurar el corePoolSize, el threadFactory y el rejectedExecutionHandler. Por ejemplo:</p> <pre><code>public class ScheduledThreadPoolExecutor extends ThreadPoolExecutor implements ScheduledExecutorService {\npublic ScheduledThreadPoolExecutor(int corePoolSize) {\nsuper(corePoolSize, Integer.MAX_VALUE,\nDEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,\nnew DelayedWorkQueue());\n}\n// ...\n}\n</code></pre> <p>Como vemos, por defecto se crea un cached threadpool executor, que mantendr\u00e1 como m\u00ednimo el n\u00famero de hilos pasado como argumento al constructor. Por defecto, los hilos ser\u00e1n destruidos si est\u00e1n 10 milisegundos inactivos, siempre y cuando el n\u00famero de hilos sea mayor que el valor m\u00ednimo pasado como argumento al constructor. Las tareas se mantendr\u00e1n en un tipo especial de <code>BlockingQueue&lt;Runnable&gt;</code> llamada <code>DelayedWorkQueue</code>.</p> <p>La clase <code>Executors</code> proporciona el m\u00e9todo est\u00e1tico factor\u00eda <code>Executors.newScheduledThreadPool(corePoolSize)</code>, que recibir\u00e1 el n\u00famero de hilos m\u00ednimos que queremos que tenga el threadpool del ejecutor. Tambi\u00e9n proporciona el m\u00e9todo <code>Executors.newSingleThreadScheduledExecutor()</code>, en el que el n\u00famero m\u00ednimo de hilos a mantener en el threadpool ser\u00e1 1.</p>"},{"location":"bloque_v/tema_26/page-15/","title":"15 Planificaci\u00f3n del inicio de ejecuci\u00f3n de una tarea","text":""},{"location":"bloque_v/tema_26/page-15/#planificacion-del-inicio-de-ejecucion-de-una-tarea","title":"Planificaci\u00f3n del inicio de ejecuci\u00f3n de una tarea","text":"<p>Para poder planificar el momento en el que debe ejecutarse una tarea en el ejecutor, la interfaz <code>ScheduledExecutorService</code> proporciona el m\u00e9todo <code>schedule(runnable, delay, timeUnit)</code>, en el que la tarea se pasa en forma de <code>Runnable</code>. Recibe adem\u00e1s el periodo de tiempo que queremos que el ejecutor espere antes de ejecutarla respecto al momento en el que se recibe, a lo que se conoce como delay, y la unidad de tiempo en la que debe medirse dicha cantidad de tiempo (timeUnit). Este m\u00e9todo retorna un <code>ScheduledFuture&lt;?&gt;</code> que representa la tarea as\u00edncrona enviada que no va a retornar ning\u00fan valor, ya que se trata de un runnable.</p> <p><code>ScheduledFuture&lt;V&gt;</code> es una interfaz que extiende de <code>Future&lt;V&gt;</code>, por lo que incluye toda la funcionalidad que ya conocemos para obtener el valor o cancelar la tarea, pero adem\u00e1s extiende de la interfaz <code>Delayed</code>, que proporciona el m\u00e9todo <code>getDelay(timeUnit)</code> para poder obtener el delay restante para iniciar la ejecuci\u00f3n de la tarea asociada.</p> <p> Figura 3 - ScheduledExecutorService</p> <p>Si la tarea que queremos planificar es un <code>Callable&lt;V&gt;</code>, podemos usar el m\u00e9todo <code>schedule(callableV, delay, timeUnit)</code>, que recibe el callable y los par\u00e1metros delay y timeUnit que estudiamos en el m\u00e9todo anterior. La llamada a este m\u00e9todo retornar\u00e1 un <code>ScheduledFuture&lt;V&gt;</code> que podremos usar para obtener el valor retornado por el callable, cancelar la tarea e incluso consultar cu\u00e1nto tiempo falta para su ejecuci\u00f3n.</p> <p>Un aspecto muy importante de ambos m\u00e9todos es que el valor de delay debe ser expresado respecto al momento del env\u00edo de la tarea al ejecutor, por lo que si queremos que la tarea se ejecute en un momento concreto, deberemos calcular la diferencia entre dicho momento y la fecha/hora actual y usarla como delay.</p> <p>El ejecutor garantiza que la tarea no comenzar\u00e1 su ejecuci\u00f3n antes de que haya transcurrido el delay especificado, ya que su ejecuci\u00f3n no estar\u00e1 habilitada hasta que no pase dicho lapso de tiempo. Sin embargo, una vez habilitada la posibilidad de ejecuci\u00f3n, no hay una garant\u00eda del momento exacto en el que \u00e9sta comenzar\u00e1. Si varias tareas son habilitadas para ejecuci\u00f3n exactamente en el mismo momento, se ejecutar\u00e1n en el orden en el que fueron enviadas.</p>"},{"location":"bloque_v/tema_26/page-15/#proyecto-schedule","title":"Proyecto Schedule","text":"<p>En este proyecto crearemos un ejecutor <code>ScheduledThreadPoolExecutor</code> con uno s\u00f3lo hilo al que enviaremos , de manera que las tareas se ejecuten en orden y con un retardo de 1 segundo entre ellas. La tarea en s\u00ed ser\u00e1 simulada con la escritura de un mensaje y retornar\u00e1 una cadena con un saludo.</p> MainGreetTaskFactorialTask <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.*;\nclass Main {\npublic static void main(String[] args) {\nDateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nScheduledExecutorService scheduledExecutor =\nExecutors.newScheduledThreadPool(5);\nGreetTask greetTask = new GreetTask(\"Hello\");\nScheduledFuture&lt;?&gt; greetScheduledFuture = scheduledExecutor.schedule(greetTask, 5, TimeUnit.SECONDS);\nSystem.out.printf(\"%s -&gt; %s - Greet task sent. Still %d seconds left\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\ngreetScheduledFuture.getDelay(TimeUnit.SECONDS));\nint number = -10;\n// Try with\n//int number = -1;\nint factorialTaskDelay = 10;\n// Try with\n// int factorialTaskDelay = 1;\nFactorialTask factorialTask = new FactorialTask(number);\nScheduledFuture&lt;Integer&gt; factorialScheduledFuture =\nscheduledExecutor.schedule(factorialTask, factorialTaskDelay, TimeUnit.SECONDS);\nSystem.out.printf(\"%s -&gt; %s - factorial(%d) task sent\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\nnumber);\nSystem.out.printf(\"%s -&gt; %s - Waiting for factorial(%d) result. Still %d seconds left\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\nnumber,\nfactorialScheduledFuture.getDelay(TimeUnit.SECONDS));\ntry {\nInteger factorial = factorialScheduledFuture.get();\nSystem.out.printf(\"%s -&gt; %s - factorial(%d) = %d\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\nnumber, factorial);\n} catch (InterruptedException ignored) {\n} catch (ExecutionException e) {\nSystem.out.printf(\"%s -&gt; %s - factorial(%d) launched an exception\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\nnumber);\n} finally {\nscheduledExecutor.shutdown();\n}\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.TimeUnit;\nclass GreetTask implements Runnable {\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nprivate final String greet;\n@SuppressWarnings(\"SameParameterValue\")\nGreetTask(String greet) {\nthis.greet = greet;\n}\n@Override\npublic void run() {\ntry {\nTimeUnit.SECONDS.sleep(6);\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\nSystem.out.printf(\"%s -&gt; %s - %s\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\ngreet);\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.TimeUnit;\nclass FactorialTask implements Callable&lt;Integer&gt; {\nprivate final int number;\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nFactorialTask(int number) {\nthis.number = number;\n}\n@Override\npublic Integer call() throws InterruptedException {\nInteger result = factorial(number);\nSystem.out.printf(\"%s -&gt; %s - factorial(%d) calculated\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\nnumber);\nreturn result;\n}\nprivate Integer factorial(int number) throws InterruptedException {\nif (number &lt; 0) throw new IllegalArgumentException(\"Number can't be negative\");\nint factorial = 1;\nfor (int i = 2; i &lt;= number; i++) {\nfactorial *= i;\nTimeUnit.MILLISECONDS.sleep(20);\n}\nTimeUnit.SECONDS.sleep(2);\nreturn factorial;\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_26/page-16/","title":"16 Ejecutar una tarea de manera peri\u00f3dica","text":""},{"location":"bloque_v/tema_26/page-16/#ejecutar-una-tarea-de-manera-periodica","title":"Ejecutar una tarea de manera peri\u00f3dica","text":"<p>Algunas veces queremos enviar al ejecutor una misma tarea de manera peri\u00f3dico, para que sea ejecutada cada cierto tiempo. Para ello, la interfaz <code>ScheduledExecutorService</code> nos define el m\u00e9todo <code>scheduledAtFixedRate(runnable, initialDelay, period, timeUnit)</code>, que recibe como argumento la tarea a ejecutar en forma de <code>Runnable</code>, el tiempo de espera para la primera ejecuci\u00f3n (initial delay), el tiempo entre ejecuciones (period) y la unidad de tiempo en la que medir los par\u00e1metros anteriores (timeUnit). La llamada a este m\u00e9todo retornar\u00e1 un objeto <code>ScheduledFuture&lt;?&gt;</code>.</p> <p>Debemos tener en cuenta que el periodo entre ejecuciones se refiere al momento del inicio de la ejecuci\u00f3n, no al tiempo transcurrido desde la finalizaci\u00f3n de una ejecuci\u00f3n anterior y el inicio de la siguiente.</p> <p>Pero, \u00bfqu\u00e9 ocurre si, por ejemplo, la tarea tarda en ejecutarse 5 segundos y el periodo entre ejecuciones se establece en 3 segundos? Pues que la tarea vuelve a ser habilitada para ejecuci\u00f3n 3 segundos despu\u00e9s de que lo fuera la vez anterior. Sin embargo, es probable que la tarea est\u00e9 en ese momento en ejecuci\u00f3n. Cuando dicha ejecuci\u00f3n finalice, y dado que la tarea ha vuelto a ser habilitada, puede comenzar a ejecutarse de nuevo inmediatamente.</p> <p>Si en vez de querer habilitar para ejecuci\u00f3n la tarea cada \"x\" tiempo lo que queremos es hacer que se vuelve a habilitar para ejecuci\u00f3n cuando haya transcurrido tiempo desde que finalizara su \u00faltima ejecuci\u00f3n, entonces podemos usar el m\u00e9todo <code>scheduleWithFixedDelay(runnable, initialDelay, delay, timeUnit)</code>, muy parecido al anterior, pero en el que el par\u00e1metro relativo al periodo de tiempo (delay) hace referencia al tiempo transcurrido entre la finalizaci\u00f3n de la ejecuci\u00f3n de la tarea y el inicio de la siguiente habilitaci\u00f3n. La llamada a este m\u00e9todo retornar\u00e1 un objeto <code>ScheduledFuture&lt;?&gt;</code>.</p> <p>Como vemos en ambos m\u00e9todos la tarea debe ser enviada en forma de runnable, ya que no tiene sentido tener una tarea de c\u00e1lculo en forma de callable que sea ejecutada peri\u00f3dicamente.</p> <p>Warning</p> <p>La versi\u00f3n 1.3 del JDK introdujo la clase <code>java.util.Timer</code>, que permite planificar la ejecuci\u00f3n de una tarea e incluso su ejecuci\u00f3n peri\u00f3dica. Usa un \u00fanico hilo trabajador, por lo que si s\u00f3lo una de las tareas que le hayamos enviado podr\u00e1 estar ejecut\u00e1ndose en un momento dado, incluso aunque por su delay inicial o periodicidad indicara que debiera estar ejecut\u00e1ndose.</p> <p>La tareas con las que puede trabajar un objeto <code>Timer</code> deber\u00e1n ser objetos de la clase <code>TimerTask</code> o de alguna clase que la extienda. Esta clase implementa la interfaz <code>Runnable</code>, de manera que en su m\u00e9todo <code>run()</code> especificaremos el c\u00f3digo que debe ejecutar la tarea.</p> <p>La clase <code>Timer</code> proporciona distintos m\u00e9todos para poder enviarle una tarea, como por ejemplo <code>schedule()</code> o <code>scheduleAtFixedRate()</code>. Para cancelar la ejecuci\u00f3n de las tareas enviadas objeto <code>Timer</code> podemos llamar a su m\u00e9todo <code>cancel()</code>.</p> <p>Se recomienda no usar las clases Timer o TimerTask, sino un <code>ScheduledThreadPoolExecutor</code>, dado que \u00e9ste ofrece una mayor flexibilidad en la planificaci\u00f3n y puede emplear varios hilos de ejecuci\u00f3n.</p>"},{"location":"bloque_v/tema_26/page-16/#proyecto-scheduledperiodictask","title":"Proyecto ScheduledPeriodicTask","text":"<p>En este proyecto enviaremos la misma tarea de saludo del proyecto anterior pero esta vez para que se ejecute de forma peri\u00f3dica, de manera que transcurridos unos segundos se termina el ejecutor.</p> MainGreetTask <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledFuture;\nimport java.util.concurrent.ScheduledThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\nclass Main {\npublic static void main(String[] args) {\nDateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nScheduledThreadPoolExecutor scheduledExecutor =\n(ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1);\nGreetTask greetTask = new GreetTask(\"Hello\");\nint periodSeconds = 5;\nScheduledFuture&lt;?&gt; greetScheduledFuture =\nscheduledExecutor.scheduleAtFixedRate(greetTask, 5, periodSeconds, TimeUnit.SECONDS);\nSystem.out.printf(\"%s -&gt; %s - Greet task sent to be executed every %d seconds. Still %d seconds left to first execution\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\nperiodSeconds,\ngreetScheduledFuture.getDelay(TimeUnit.SECONDS));\nint sleepSeconds = 25;\ntry {\nTimeUnit.SECONDS.sleep(sleepSeconds);\n} catch (InterruptedException ignored) {\n} finally {\nSystem.out.printf(\"%s -&gt; %s - Executor shut down after %d seconds\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\nsleepSeconds);\nscheduledExecutor.shutdownNow();\n}\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nclass GreetTask implements Runnable {\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nprivate final String greet;\n@SuppressWarnings(\"SameParameterValue\")\nGreetTask(String greet) {\nthis.greet = greet;\n}\n@Override\npublic void run() {\nSystem.out.printf(\"%s -&gt; %s - %s\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\ngreet);\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_26/page-17/","title":"17 Cancelaci\u00f3n de tareas y terminaci\u00f3n del ScheduledThreadPoolExecutor","text":""},{"location":"bloque_v/tema_26/page-17/#cancelacion-de-tareas-y-terminacion-del-scheduledthreadpoolexecutor","title":"Cancelaci\u00f3n de tareas y terminaci\u00f3n del ScheduledThreadPoolExecutor","text":"<p>Cuando marcamos como cancelada una tarea del ejecutor llamando al m\u00e9todo <code>cancel()</code> del <code>ScheduledFuture</code> correspondiente, si dicha tarea estaba deshabilitada para ejecuci\u00f3n esperando que transcurriera el delayed indicado cuando se envi\u00f3, la tarea nunca llegar\u00e1 a ejecutarse.</p> <p>Por defecto, las tareas canceladas no son inmediatamente eliminadas de la work queue, sino que se espera a que transcurra el delay especificado cuando se enviaron. Sin embargo podemos cambiar dicha pol\u00edtica llamando al m\u00e9todo <code>setRemoveOnCancelPolicy(true)</code>, que har\u00e1 que se eliminen inmediatamente. Este m\u00e9todo est\u00e1 disponible desde Java 7.</p> <p>Cuando llamamos al m\u00e9todo <code>shutdown()</code> para finalizar el <code>ScheduledThreadPoolExecutor</code>, al igual que ocurr\u00eda con la clase <code>ThreadPoolExecutor</code>, se dejar\u00e1n de aceptar nuevas tareas, por lo que si se le env\u00edan nuevas tareas \u00e9stas son rechazadas. Adem\u00e1s, por defecto, se permitir\u00e1 completar su ejecuci\u00f3n tanto las tareas que ya est\u00e9n en ejecuci\u00f3n como aquellas que est\u00e9n esperando para comenzar su ejecuci\u00f3n, incluso las que est\u00e9n deshabilitadas para ejecuci\u00f3n en ese momento al no haber transcurrido a\u00fan el delay especificado cuando se enviaron.</p> <p>Sin embargo, la clase <code>ScheduledThreadPoolExecutor</code> nos permite cambiar la pol\u00edtica concreta de qu\u00e9 hacer con las tareas que est\u00e1n deshabilitadas para ejecuci\u00f3n cuando se llama a <code>shutdown()</code>. As\u00ed, si llamamos al m\u00e9todo <code>setExecuteExistingDelayedTasksAfterShutdownPolicy(false)</code> configuraremos el ejecutor para que dichas tareas no lleguen a ser ejecutadas.</p> <p>De forma similar, mediante el m\u00e9todo <code>setContinueExistingPeriodicTasksAfterShutdownPolicy(false)</code> podemos hacer que las tareas peri\u00f3dicas esperando la siguiente ejecuci\u00f3n no lleguen a ser ejecutadas m\u00e1s.</p> <p>Si llamamos al m\u00e9todo <code>shutdownNow(mayInterruptIfRunning)</code>, en vez de a <code>shutdown()</code>, el funcionamiento de este m\u00e9todo ser\u00e1 exactamente igual que en el caso de <code>ThreadPoolExecutor</code>, es decir, todas las tareas pendientes de ejecuci\u00f3n, peri\u00f3dicas o no, no llegar\u00e1n a ejecutarse, independientemente de las pol\u00edticas establecidas anteriormente.</p>"},{"location":"bloque_v/tema_26/page-17/#proyecto-cancelperiodictask","title":"Proyecto CancelPeriodicTask","text":"<p>En este proyecto modificamos el proyecto anterior para cancelar la tarea peri\u00f3dica antes de terminar el ejecutor.</p> MainGreetTask <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledFuture;\nimport java.util.concurrent.ScheduledThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\nclass Main {\npublic static void main(String[] args) {\nDateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nScheduledThreadPoolExecutor scheduledExecutor =\n(ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1);\nscheduledExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);\nscheduledExecutor.setRemoveOnCancelPolicy(true);\nGreetTask greetTask = new GreetTask(\"Hello\");\nint periodSeconds = 5;\nScheduledFuture&lt;?&gt; greetScheduledFuture =\nscheduledExecutor.scheduleAtFixedRate(greetTask, 5, periodSeconds, TimeUnit.SECONDS);\nSystem.out.printf(\"%s -&gt; %s - Greet task sent to be executed every %d seconds. Still %d seconds left to first ejecution\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\nperiodSeconds,\ngreetScheduledFuture.getDelay(TimeUnit.SECONDS));\nint sleepSeconds = 25;\ntry {\nTimeUnit.SECONDS.sleep(sleepSeconds);\n} catch (InterruptedException ignored) {\n} finally {\ngreetScheduledFuture.cancel(true);\nSystem.out.printf(\"%s -&gt; %s - Greet periodic task cancelled after %d seconds\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\nsleepSeconds);\nscheduledExecutor.shutdownNow();\n}\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nclass GreetTask implements Runnable {\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nprivate final String greet;\n@SuppressWarnings(\"SameParameterValue\")\nGreetTask(String greet) {\nthis.greet = greet;\n}\n@Override\npublic void run() {\nSystem.out.printf(\"%s -&gt; %s - %s\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\ngreet);\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_26/page-18/","title":"18 ExecutorCompletionService","text":""},{"location":"bloque_v/tema_26/page-18/#executorcompletionservice","title":"ExecutorCompletionService","text":"<p>Normalmente, cuando ejecutamos tareas concurrentes mediante un ejecutor, le enviamos la tarea <code>Runnable</code> o <code>Callable</code> mediante alguno de sus m\u00e9todos, que nos retorna un objeto <code>Future</code>, con el que podremos, m\u00e1s adelante, obtener el resultado retornado por la tarea. Pero tanto el env\u00edo como el procesado del resultado se realiza en el mismo hilo (en nuestros proyectos anteriores en el hilo principal correspondiente a la clase <code>Main</code>). Adem\u00e1s, la obtenci\u00f3n del valor mediante el m\u00e9todo <code>get()</code> es bloqueante, por lo que se suele decir que se trata de un modelo de \"procesamiento futuro s\u00edncrono\" (synchronous future processing).</p> <p>Sin embargo, en algunas ocasiones es necesario independizar el env\u00edo de tareas al ejecutor en un hilo y el procesamiento de los resultados en otro hilo distinto o simplemente nos gustar\u00eda realizar un procesamiento as\u00edncrono del resultado (en contraste con el procesamiento futuro as\u00edncrono descrito en el p\u00e1rrafo anterior).</p> <p>Para ello, la API de Concurrencia de Java proporciona un mecanismo, conocido como <code>CompletionService</code>, que nos permite crear un objeto que act\u00faa como servicio intermedio de almacenaje de los objetos <code>Future</code> correspondientes a tareas <code>Callable</code> que han completado su ejecuci\u00f3n. De esta manera el procesamiento de los resultados puede llevarse a cabo as\u00edncronamente en hilos diferentes a los que enviaron las tareas.</p> <p>La clase principal de este mecanismo es <code>ExecutorCompletionService</code>, que usa internamente un objeto ejecutor que implemente la interfaz <code>ExecutorService</code> y que deberemos suministrarlo en la construcci\u00f3n. Adem\u00e1s, la clase <code>ExecutorCompletionService</code> implementa la interfaz <code>CompletionService</code>, que establece los m\u00e9todos para enviar tareas al servicio y para extraer objetos <code>Future</code> del mismo.</p> <p> Figura 4 - ExecutorCompletionService</p> <p>De esta manera, el objeto <code>ExecutorCompletionService</code> act\u00faa como puente entre una serie de hilos productores que le env\u00edan tareas a trav\u00e9s de su m\u00e9todo <code>submit()</code>, y otra serie de hilos consumidores que extraen los objetos <code>Future</code> resultantes de la ejecuci\u00f3n de las tareas, por ejemplo a trav\u00e9s de su m\u00e9todo <code>poll()</code> para procesar resultados.</p> <p>Este mecanismo tiene la limitaci\u00f3n de que los hilos consumidores de resultados tan solo puede obtener los objetos <code>Future</code> de aquellas tareas que hayan finalizado su ejecuci\u00f3n, por lo que \u00fanicamente pueden ser usados para obtener el resultado de las tareas y no para otras operaciones de control, como por ejemplo la cancelaci\u00f3n de las tareas. De hecho, cuando un hilo consumidor extraiga un <code>Future</code> de la cola del <code>ExecutorCompletionService</code> dicho <code>Future</code> forzosamente habr\u00e1 sido completado (<code>isDone()</code> retornar\u00e1 <code>true</code>), por lo que si se llama al m\u00e9todo <code>get()</code> sobre dicho <code>Future</code> nunca quedar\u00e1 bloqueado.</p> <p>La interfaz <code>CompletionService</code> proporciona los siguientes m\u00e9todos para enviar tareas:</p> <ul> <li><code>submit(callable)</code>: Env\u00eda un <code>Callable</code> al ejecutor para que sea ejecutado. El resultado de la tarea ser\u00e1 encolado en el servicio.</li> <li><code>submit(runnable, returnValue)</code>: Env\u00eda un <code>Runnable</code> al ejecutor. Una vez concluida su ejecuci\u00f3n el <code>returnValue</code> indicado se establece como valor del <code>Future</code> que es encolado en el servicio.</li> </ul> <p>\u00a1OJO!</p> <p>Aunque estos m\u00e9todos retornan un <code>Future</code>, no debemos usarlo, ya que todo el prop\u00f3sito de usar un <code>CompletionService</code> es que los hilos productores no act\u00faen como consumidores de los resultados.</p> <p>Por otra parte, la interfaz <code>CompletionService</code> proporciona los siguientes m\u00e9todos para obtener los objetos <code>Future</code> correspondiente al resultado de la ejecuci\u00f3n de las tareas:</p> <ul> <li><code>Future&lt;V&gt; poll()</code>: Extrae de la cola interna del servicio el objeto <code>Future</code> correspondiente al resultado de la siguiente tarea completada o <code>null</code> si no hay ninguno.</li> <li><code>Future&lt;V&gt; poll(long timeout, TimeUnit unit)</code>: Extrae de la cola interna el objeto <code>Future</code> correspondiente al resultado de la siguiente tarea completada, esperando si es necesario el tiempo m\u00e1ximo pasado como argumento. Lanza la excepci\u00f3n <code>InterruptedException</code> si el hilo es interrumpido mientras esperaba.</li> <li><code>Future&lt;V&gt; take()</code>: Extrae de la cola interna el objeto <code>Future</code> correspondiente al resultado de la siguiente tarea completada, bloqueando el hilo hasta que la cola tenga alg\u00fan elemento. Lanza la excepci\u00f3n <code>InterruptedException</code> si el hilo es interrumpido mientras esperaba.</li> </ul>"},{"location":"bloque_v/tema_26/page-18/#proyecto-executorcompletionservice","title":"Proyecto ExecutorCompletionService","text":"<p>En este proyecto vamos a desarrollar una aplicaci\u00f3n en la que varios hilos solicitantes solicitan el c\u00e1lculo de factoriales a un <code>ExecutorCompletionService</code>. Por otro lado, un hilo consumidor de resultados va obteniendo del <code>ExecutorCompletionService</code> los resultados uno a uno y los muestra por pantalla.</p> <p>La tarea de c\u00e1lculo que se env\u00eda est\u00e1 representada por la clase <code>Task</code>, que implementa la interfaz <code>Callable&lt;FactorialCalculation&gt;</code>. El resultado del c\u00e1lculo est\u00e1 representado por la clase <code>FactorialCalculation</code>, que contiene informaci\u00f3n sobre qui\u00e9n la solicit\u00f3, cu\u00e1ndo, con qu\u00e9 valor, y el resultado obtenido o la excepci\u00f3n lanzada durante el c\u00e1lculo.</p> <p>Para representar el hecho de que haya un resultado o se haya producido una excepci\u00f3n definimos una clase <code>ResultOrThrowable&lt;T&gt;</code>.</p> MainResultOrThrowableFactorialCalculationTaskTaskProducerTaskConsumer <pre><code>import java.util.concurrent.*;\nclass Main {\npublic static void main(String[] args) {\nExecutorService executor = Executors.newCachedThreadPool();\nCompletionService&lt;FactorialCalculation&gt; completionService\n= new ExecutorCompletionService&lt;&gt;(executor);\nThread taskProducer1 = new Thread(new TaskProducer(\"Task producer 1\", completionService));\nThread taskProducer2 = new Thread(new TaskProducer(\"Task producer 2\", completionService));\nThread taskConsumer = new Thread(new TaskConsumer(completionService));\ntaskProducer1.start();\ntaskProducer2.start();\ntaskConsumer.start();\ntry {\nTimeUnit.SECONDS.sleep(15);\ntaskConsumer.interrupt();\ntaskConsumer.join();\n} catch (InterruptedException ignored) {\n} finally {\nexecutor.shutdownNow();\n}\n}\n}\n</code></pre> <pre><code>class ResultOrThrowable&lt;T&gt; {\nprivate final T result;\nprivate final Throwable throwable;\nprivate ResultOrThrowable(T result, Throwable throwable) {\nthis.result = result;\nthis.throwable = throwable;\n}\nT getResult() {\nreturn result;\n}\nThrowable getThrowable() {\nreturn throwable;\n}\nstatic &lt;T&gt; ResultOrThrowable&lt;T&gt; newResult(T result) {\nreturn new ResultOrThrowable&lt;&gt;(result, null);\n}\nstatic &lt;T&gt; ResultOrThrowable&lt;T&gt; newThrowable(Throwable throwable) {\nreturn new ResultOrThrowable&lt;&gt;(null, throwable);\n}\n}\n</code></pre> <pre><code>class FactorialCalculation {\nprivate final String requester;\nprivate final int value;\nprivate final String when;\nprivate final ResultOrThrowable&lt;Integer&gt; resultOrThrowable;\nFactorialCalculation(String requester, int value, String when, ResultOrThrowable&lt;Integer&gt; resultOrException) {\nthis.requester = requester;\nthis.value = value;\nthis.when = when;\nthis.resultOrThrowable = resultOrException;\n}\nString getRequester() {\nreturn requester;\n}\nint getValue() {\nreturn value;\n}\nString getWhen() {\nreturn when;\n}\nInteger getResult() {\nreturn resultOrThrowable.getResult();\n}\nThrowable getThrowable() {\nreturn resultOrThrowable.getThrowable();\n}\n}\n</code></pre> <pre><code>import java.util.concurrent.Callable;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TimeUnit;\nclass Task implements Callable&lt;FactorialCalculation&gt; {\nprivate final String requester;\nprivate final int value;\nprivate final String when;\nTask(String requester, int value, String when) {\nthis.requester = requester;\nthis.value = value;\nthis.when = when;\n}\n@Override\npublic FactorialCalculation call() {\nInteger factorial;\nResultOrThrowable&lt;Integer&gt; resultOrThrowable;\ntry {\nfactorial = factorial(value);\nresultOrThrowable = ResultOrThrowable.newResult(factorial);\n} catch (Exception e) {\nresultOrThrowable = ResultOrThrowable.newThrowable(e);\n}\nreturn new FactorialCalculation(requester, value, when, resultOrThrowable);\n}\nprivate Integer factorial(int number) throws InterruptedException {\nif (number &lt; 0) throw new IllegalArgumentException(\"Number can't be negative\");\nint factorial = 1;\nfor (int i = 2; i &lt;= number; i++) {\nfactorial *= i;\n}\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(5) + 1);\nreturn factorial;\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.CompletionService;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TimeUnit;\nclass TaskProducer implements Runnable {\nprivate final DateTimeFormatter dateTimeFormatter =\nDateTimeFormatter.ofPattern(\"HH:mm:ss\");\nprivate final String name;\nprivate final CompletionService&lt;FactorialCalculation&gt; completionService;\nTaskProducer(String name, CompletionService&lt;FactorialCalculation&gt; completionService) {\nthis.name = name;\nthis.completionService = completionService;\n}\n@Override\npublic void run() {\nfor (int i = 0; i &lt; 10; i++) {\nint value = ThreadLocalRandom.current().nextInt(15) - 5;\nString when = dateTimeFormatter.format(LocalTime.now());\nSystem.out.printf(\"%s -&gt; %s requests factorial(%d) at %s\\n\",\nThread.currentThread().getName(), name, value, when);\ncompletionService.submit(new Task(name, value, when));\ntry {\nTimeUnit.SECONDS.sleep(1);\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s -&gt; %s interrupted\\n\",\nThread.currentThread().getName(), name);\nreturn;\n}\n}\nSystem.out.printf(\"%s -&gt; %s finished\\n\",\nThread.currentThread().getName(), name);\n}\n}\n</code></pre> <pre><code>import java.util.concurrent.CompletionService;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Future;\nclass TaskConsumer implements Runnable {\nprivate final CompletionService&lt;FactorialCalculation&gt; completionService;\nTaskConsumer(CompletionService&lt;FactorialCalculation&gt; completionService) {\nthis.completionService = completionService;\n}\n@Override\npublic void run() {\nwhile (!Thread.currentThread().isInterrupted()) {\nFuture&lt;FactorialCalculation&gt; taskResultFuture;\ntry {\ntaskResultFuture = completionService.take();\nif (taskResultFuture != null) {\nFactorialCalculation factorialCalculation = taskResultFuture.get();\nif (factorialCalculation.getThrowable() == null) {\nshowResult(factorialCalculation);\n} else {\nshowError(factorialCalculation);\n}\n}\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s -&gt; Task consumer interrupted\\n\",\nThread.currentThread().getName());\nreturn;\n} catch (ExecutionException e) {\nSystem.out.printf(\"%s -&gt; Task consumer calculation poll - Error calculating factorial\\n\",\nThread.currentThread().getName());\n}\n}\nSystem.out.printf(\"%s -&gt; Task consumer finished\\n\",\nThread.currentThread().getName());\n}\nprivate void showError(FactorialCalculation factorialCalculation) {\nSystem.out.printf(\"%s -&gt; Task consumer calculation poll - factorial(%d) threw %s, requested by %s at %s\\n\",\nThread.currentThread().getName(), factorialCalculation.getValue(),\nfactorialCalculation.getThrowable().getClass().getSimpleName(), factorialCalculation.getRequester(),\nfactorialCalculation.getWhen());\n}\nprivate void showResult(FactorialCalculation factorialCalculation) {\nSystem.out.printf(\"%s -&gt; Task consumer calculation poll - factorial(%d) = %d requested by %s at %s\\n\",\nThread.currentThread().getName(), factorialCalculation.getValue(),\nfactorialCalculation.getResult(), factorialCalculation.getRequester(),\nfactorialCalculation.getWhen());\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_26/page-19/","title":"19 FutureTask","text":""},{"location":"bloque_v/tema_26/page-19/#futuretask","title":"FutureTask","text":"<p>La clase <code>FutureTask</code> permite encapsular en un mismo objeto las funcionalidades de operaci\u00f3n ejecutable y de un resultado futuro, es decir, de un <code>Runnable</code> y de un <code>Future</code>. De hecho, esta clase implementa la interfaz <code>RunnableFuture&lt;V&gt;</code>, que a su vez extiende de las interfaces <code>Runnable</code> y <code>Future&lt;V&gt;</code>.</p> <pre><code>public interface RunnableFuture&lt;V&gt; extends Runnable, Future&lt;V&gt; {\nvoid run();\n}\n</code></pre> <p>Representa por tanto una operaci\u00f3n as\u00edncrona con una serie de caracter\u00edsticas muy importantes:</p> <ul> <li>Se puede ejecutar directamente en un hilo gestionado por nosotros mismos, o puede ser enviada a un ejecutor para que la ejecute, dado que implementa la interfaz <code>Runnable</code>, y por tanto dispone del m\u00e9todo <code>run()</code>.</li> <li>Puede ser cancelada en cualquier momento, dado que implementa la interfaz <code>Future</code>, a trav\u00e9s de su m\u00e9todo <code>cancel(mayInterruptIfRunning)</code></li> <li>Permite consultar si la operaci\u00f3n se ha completado, dado que implementa la interfaz <code>Future</code>, a trav\u00e9s de su m\u00e9todo <code>isDone()</code>.</li> <li>Podemos obtener el resultado de la operaci\u00f3n, dado que implementa la interfaz <code>Future</code>, a trav\u00e9s del m\u00e9todo <code>get()</code>, que es bloqueante.</li> </ul> <p>La clase <code>FutureTask</code> nos permite envolver un <code>Callable</code> que queramos ejecutar, que es recibido a trav\u00e9s del constructor. El m\u00e9todo <code>run()</code> del <code>FutureTask</code> llamar\u00e1 al m\u00e9todo <code>call()</code> del <code>Callable</code> que envuelve, y establecer\u00e1 el valor resultante de la llamada como valor del propio <code>FutureTask</code>.</p> <p>Existe otra opci\u00f3n, consistente en pasar al constructor de la clase <code>FutureTask</code> un runnable junto a un valor de retorno. Internamente se crear\u00e1 un <code>Callable</code> cuyo m\u00e9todo <code>call()</code> consiste en llamar al m\u00e9todo <code>run()</code>del runnable y retornar el valor indicado. El m\u00e9todo <code>run()</code> del <code>FutureTask</code> llamar\u00e1 al m\u00e9todo <code>call()</code> del <code>Callable</code> creado, y establecer\u00e1 el valor resultante de la llamada como valor del propio <code>FutureTask</code>.</p> <p>Adem\u00e1s de toda la funcionalidad proporcionada por las interfaces <code>Runnable</code> y <code>Future</code>, la clase <code>FutureTask</code> proporciona un m\u00e9todo llamado <code>done()</code>, que es llamado internamente cuando el <code>FutureTask</code> se da por completado, estos es, cuando <code>isDone()</code> pasa a ser <code>true</code>, independientemente de si la tarea ha sido cancelada, la llamada al m\u00e9todo <code>call()</code> ha finalizado normalmente y se ha establecido el valor retornado como valor del propio <code>FutureTask</code>, o el m\u00e9todo <code>call()</code> del callable ha lanzado una excepci\u00f3n.</p> <p>Podemos sobrescribir este m\u00e9todo <code>done()</code>, permiti\u00e9ndonos ejecutar c\u00f3digo una vez haya terminado de ejecutarse la tarea. Podemos usar esta caracter\u00edstica para realizar operaciones de post-procesamiento, generar un informe, enviar resultados por e-mail, o liberar alg\u00fan recurso que estuvi\u00e9ramos utilizando, etc., aunque no podremos cambiar el valor retornado o el estado de la tarea. Si desde el m\u00e9todo <code>done()</code> queremos acceder al valor retornado por la tarea podemos usar el m\u00e9todo <code>get()</code> del <code>FutureTask</code>.</p> <p>Por ejemplo, la clase <code>ExecutorCompletionService</code> hace uso de una extensi\u00f3n de la clase <code>FutureTask</code>, llamada <code>ExecutorCompletionService.QueueingFuture</code>, que sobrescribe el m\u00e9todo <code>done()</code> para que cada <code>Future</code> ejecutado por el ejecutor asociado al <code>ExecutorCompletionService</code> cuando termine su ejecuci\u00f3n se auto encole en la cola de tareas completadas.</p>"},{"location":"bloque_v/tema_26/page-19/#proyecto-futuretask","title":"Proyecto FutureTask","text":"<p>En este proyecto crearemos dos FutureTask que envuelve dos Callable que calculan dos factoriales distintos. La primera FutureTask ser\u00e1 ejecutada a trav\u00e9s de un hilo que crearemos expresamente para ello y la segunda FutureTask ser\u00e1 enviada a un ejecutor.</p> <p>Las FutureTask est\u00e1n dise\u00f1adas para que muestren por pantalla cuando se han completado si ha sido cancelada, ha finalizado el c\u00e1lculo correctamente o se ha producido una excepci\u00f3n.</p> MainLogFutureTaskFactorialTask <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\npublic class Main {\npublic static void main(String[] args) throws InterruptedException {\nfinal DateTimeFormatter dateTimeFormatter =\nDateTimeFormatter.ofPattern(\"HH:mm:ss\");\nExecutorService executor = Executors.newCachedThreadPool();\nLogFutureTask&lt;Integer&gt; task1 = new LogFutureTask&lt;&gt;(new FactorialTask(-1));\nLogFutureTask&lt;Integer&gt; task2 = new LogFutureTask&lt;&gt;(new FactorialTask(4));\nThread thread = new Thread(task1);\nSystem.out.printf(\"%s - %s - Task1 started\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()));\nthread.start();\nSystem.out.printf(\"%s - %s - Task2 sent\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()));\nexecutor.submit(task2);\nexecutor.shutdown();\nTimeUnit.SECONDS.sleep(2);\n//task1.cancel(true);\n//task2.cancel(true);\nthread.join();\nexecutor.awaitTermination(1, TimeUnit.MINUTES);\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.FutureTask;\npublic class LogFutureTask&lt;V&gt; extends FutureTask&lt;V&gt; {\nprivate final DateTimeFormatter dateTimeFormatter =\nDateTimeFormatter.ofPattern(\"HH:mm:ss\");\nLogFutureTask(Callable&lt;V&gt; callable) {\nsuper(callable);\n}\n@Override\nprotected void done() {\nif (isCancelled()) {\nSystem.out.printf(\"%s - %s - Operation cancelled\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()));\n} else {\ntry {\nV value = get();\nSystem.out.printf(\"%s - %s - Result: %s\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\nvalue);\n} catch (InterruptedException ignored) {\n} catch (ExecutionException e) {\nSystem.out.printf(\"%s - %s - %s\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\ne.getClass().getSimpleName());\n}\n}\n}\n}\n</code></pre> <pre><code>import java.util.concurrent.Callable;\nimport java.util.concurrent.TimeUnit;\nclass FactorialTask implements Callable&lt;Integer&gt; {\nprivate final int number;\nFactorialTask(int number) {\nthis.number = number;\n}\n@Override\npublic Integer call() throws InterruptedException {\nreturn factorial(number);\n}\nprivate Integer factorial(int number) throws InterruptedException {\nif (number &lt; 0) throw new IllegalArgumentException(\"Number can't be negative\");\nint factorial = 1;\nfor (int i = 2; i &lt;= number; i++) {\nfactorial *= i;\nTimeUnit.SECONDS.sleep(1);\n}\nreturn factorial;\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_26/page-2/","title":"2 La Interfaz Executor","text":""},{"location":"bloque_v/tema_26/page-2/#la-interfaz-executor","title":"La interfaz Executor","text":"<p>La interfaz <code>Executor</code> es una interfaz funcional que implementan (indirectamente) todos los ejecutores que iremos estudiando, y que posee el m\u00e9todo <code>execute(runnable)</code>para enviar al ejecutor una tarea en forma de objeto runnable para que sea ejecutada en alguno de los hilos que gestiona. La llamada al m\u00e9todo no retornar\u00e1 ning\u00fan valor.</p> <pre><code>public interface Executor {\nvoid execute(Runnable command);\n}\n</code></pre> <p>El m\u00e9todo lanzar\u00e1 la excepci\u00f3n <code>NullPointerException</code> si le pasamos <code>null</code> como runnable, o <code>RejectedExecutionException</code> si la tarea no pudo ser aceptada para su ejecuci\u00f3n, por ejemplo porque el ejecutor ya ha sido terminado, como estudiaremos m\u00e1s adelante.</p> <p>La interfaz <code>Executor</code> tiene importantes limitaciones:</p> <ul> <li>S\u00f3lo admite enviar tareas en forma de objetos runnable. Dado que el m\u00e9todo <code>run()</code> de los runnables no retorna un valor, es complicado hacer que una tarea retorne un valor a qui\u00e9n lo haya llamado.</li> <li>No proporciona ninguna forma de hacer un seguimiento del progreso de la ejecuci\u00f3n de las tareas runnable enviadas al ejecutor, cancelar la tarea, o simplemente determinar cu\u00e1ndo ha concluido su ejecuci\u00f3n.</li> <li>No proporciona una forma directa de ejecutar una colecci\u00f3n de runnables.</li> <li>No proporciona a la aplicaci\u00f3n una forma de terminar (detener) un ejecutor y sus hilos, liberando los recursos obtenidos.</li> </ul> <p>Como veremos m\u00e1s adelante, estas limitaciones ser\u00e1n solventadas por la interfaz <code>ExecutorService</code>, que extiende <code>Executor</code>.</p>"},{"location":"bloque_v/tema_26/page-20/","title":"Ejercicios","text":"CachedThreadPool Project <p>Realiza un proyecto haciendo uso de <code>CachedThreadPool</code> que ejecute la tabla de potencias de los n\u00fameros del 1 al 10. Entre cada tabla debe pasar 200 milisegundos. Luego, apaga/cierra el CachedTreadPool.</p> FixedThreadPool Project <p>Realiza un proyecto igual que el anterior, pero en esta ocasi\u00f3n haz uso de <code>FixedThreadPool</code>.</p> InvokeAll Project <p>Realiza un programa multihilo en Java que dada una matriz de dos dimensiones, halle la suma de sus filas, siendo cada una de \u00e9stas un hilo en Java. Haz uso de <code>ThreadPoolExecutor</code> y el m\u00e9todo <code>invokeAll</code>. Finalmente, muestra la suma completa de la matriz.</p> InvokeAny Project <p>Realiza una aplicaci\u00f3n multihilo que dada una matriz de dimensiones NxM y un n\u00famero, busque dicho n\u00famero por cada fila de la matriz, retornando como resultado la columna y la fila en la que se encuentra. Realiza el proyecto haciendo uso de un <code>ThreadPoolExecutor</code> y su m\u00e9todo <code>invokeAny</code>.</p> Schedule Project <p>Realiza un programa en Java haciendo uso del multihilo, que se asemeje al juego de MARCO-POLO. Haz uso de <code>ScheduleExecutorsService</code> teniendo en cuenta lo siguiente:</p> <ul> <li>La tarea encargada de decir Marco se ejecutar\u00e1 al segundo de ser enviada.</li> <li>La tarea encargada de decir Polo se ejecutar\u00e1 a los dos segundos de ser enviada.</li> <li>Las tareas se repetir\u00e1n en un per\u00edodo de dos segundos.</li> <li>Si las tareas son canceladas, deben ser eliminadas inmediatamente desde su cancelaci\u00f3n.</li> <li>Si se para al executor las tareas peri\u00f3dicas que est\u00e1n en espera, no ser\u00e1n ejecutadas jam\u00e1s.</li> </ul> ExecutorCompletionService Project <p>Realiza el proyecto InvokeAll haciendo uso de un CompletionService.</p>"},{"location":"bloque_v/tema_26/page-3/","title":"3 Creaci\u00f3n de un ThreadPoolExecutor","text":""},{"location":"bloque_v/tema_26/page-3/#creacion-de-un-threadpoolexecutor","title":"Creaci\u00f3n de un ThreadPoolExecutor","text":"<p>El primer paso para trabajar con el Executor framework es crear un objeto ejecutor. Todas la clases que representan ejecutores extienden de la clase abstracta <code>AbstractExecutorService</code>, que a su vez implementa la interfaz <code>ExecutorService</code>, y por ello <code>Executor</code>.</p> <p>Aunque existen distintas clases que definen tipos de ejecutores, comenzaremos con la clase <code>ThreadPoolExecutor</code>, que extiende <code>AbstractExecutorService</code>.</p> <p>Internamente un <code>ThreadPoolExecutor</code> se configura en base a los siguientes par\u00e1metros:</p> <ul> <li>corePoolSize: N\u00famero de hilos que deben mantenerse en el pool incluso aunque est\u00e9n sin ejecutar ninguna tarea.</li> <li>maximumPoolSize: N\u00famero m\u00e1ximo de hilos que puede haber en el threadpool.</li> <li>keepAliveTime: Indica el tiempo m\u00e1ximo que un hilo esperar\u00e1 a que le entreguen una nueva tarea antes de finalizar, siempre y cuando el n\u00famero actual de hilos del threadpool sea mayor que corePoolSize. Esto permite que los hilos se vayan finalizando cuando ya no son necesarios y que el tama\u00f1o del threadpool vaya decreciendo.</li> <li>keepAliveTimeUnit: Unidad de tiempo correspondiente al valor de keepAliveTime.</li> <li>workQueue: Cola de trabajo <code>BlockingQueue&lt;Runnable&gt;</code>en la que se almacenan las tareas antes de ser ejecutadas.</li> <li>threadFactory: Factor\u00eda de hilos que usa el ejecutor para crear un hilo cuando es necesario. Corresponder\u00e1 a un objeto de una clase que implemente la interfaz <code>ThreadFactory</code>. Si no se establece se crea una por defecto, correspondiente al objeto retornado por el m\u00e9todo est\u00e1tico factor\u00eda <code>Executors.defaultThreadFactory()</code>.</li> <li>rejectedExecutionHandler: Gestor de tareas que hayan sido rechazadas por el ejecutor. Corresponder\u00e1 a un objeto de una clase que implemente la interfaz <code>RejectedExecutionHandler</code>. Si no se establece uno, la excepci\u00f3n <code>RejectedException</code> no ser\u00e1 gestionada por el ejecutor sino que simplemente ser\u00e1 lanzada.</li> </ul> <p>La clase <code>ThreadPoolExecutor</code> posee distintos constructores sobrecargados para crear un threadpool executor configurando los par\u00e1metros anteriores. Por ejemplo, el m\u00e1s simple corresponde a:</p> <pre><code>ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, keepAliveTimeUnit, workQueue)\n</code></pre> <p>Tambi\u00e9n tendremos los m\u00e9todos getter y setter correspondientes a dichos par\u00e1metros de configuraci\u00f3n del ejecutor, como <code>getCorePoolSize()</code>, <code>setCorePoolSize()</code>, etc., excepto <code>setQueue(blockingQueue)</code>, que no existe.</p> <p>Dado que se tratan de muchos par\u00e1metros y que hay que entender bien el funcionamiento interno del ejecutor para poder configurarlos, la clase <code>Executors</code> nos facilita la construcci\u00f3n de ejecutores proporcion\u00e1ndonos una serie de m\u00e9todos est\u00e1ticos factor\u00eda especializados en la creaci\u00f3n de los tipos de threadpool executors mas habituales, que llaman al constructor de la clase <code>ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, keepAliveTimeUnit, workQueue)</code> con los argumentos adecuados.</p> <p>As\u00ed tenemos los m\u00e9todos factor\u00eda <code>Executors.newCachedThreadPool()</code>, <code>Executors.newFixedThreadPool(numberOfThreads)</code>, <code>Executors.newSingleThreadExecutor()</code>, etc. Estudiaremos estos m\u00e9todos dentro de poco.</p> <p>La clase <code>ThreadPoolExecutor</code> proporciona algunos m\u00e9todos informativos que nos permiten obtener informaci\u00f3n sobre las tareas que ejecuta el ejecutor:</p> <ul> <li><code>getPoolSize()</code>: Retorna el n\u00famero actual de hilos en el threadpool gestionado por el ejecutor.</li> <li><code>getActiveCount()</code>: Retorna el n\u00famero de hilos que est\u00e1n actualmente ejecutando tareas en el ejecutor.</li> <li><code>getCompletedTaskCount()</code>: Retorna el n\u00famero de tareas completadas por el ejecutor.</li> <li><code>getTaskCount()</code>: Retorna el n\u00famero de tareas que han sido enviadas al ejecutor.</li> <li><code>getLargestPoolSize()</code>: Retorna el n\u00famero m\u00e1ximo de hilos que han sido utilizados a la vez por el ejecutor en un momento dado. Es decir, el tama\u00f1o m\u00e1ximo que ha alcanzado el threadpool.</li> </ul>"},{"location":"bloque_v/tema_26/page-4/","title":"4 Terminaci\u00f3n de un ejecutor","text":""},{"location":"bloque_v/tema_26/page-4/#terminacion-de-un-ejecutor","title":"Terminaci\u00f3n de un ejecutor","text":"<p>La interfaz <code>ExecutorService</code> extiende la interfaz <code>Executor</code> para proporcionar la funcionalidad que solvente las limitaciones de \u00e9sta \u00faltima. Este aspecto es muy importante, ya que los ejecutores est\u00e1n dise\u00f1ados de manera que si no se termina su ejecuci\u00f3n expl\u00edcitamente, el programa que lo uso nunca terminar\u00e1, incluso aunque el ejecutor no tenga ninguna tarea para ejecutar, dado que los hilos del ejecutor seguir\u00e1n vivos.</p> <p>Por este motivo, la interfaz <code>ExecutorService</code> proporciona, entre otras cosas, una serie de m\u00e9todos que permitan a la aplicaci\u00f3n terminar (detener) un ejecutor y sus hilos, liberando los recursos obtenidos.</p> <p>Veamos parte de la definici\u00f3n de la interfaz <code>ExecutorService</code>:</p> <pre><code>public interface ExecutorService extends Executor {\n// M\u00e9todos relacionados con el control del ciclo de vida de los ejecutores\nvoid shutdown();\nList&lt;Runnable&gt; shutdownNow();\nboolean isShutdown();\nboolean isTerminated();\nboolean awaitTermination(long timeout, TimeUnit unit)\nthrows InterruptedException;\n// ...\n}\n</code></pre> <p>As\u00ed, tenemos el m\u00e9todo <code>shutdown()</code>, que termina el ejecutor, de manera que ya no se aceptan m\u00e1s tareas nuevas en \u00e9l, que son rechazadas, pero a las tareas que estuvieran ejecut\u00e1ndose o las que ya hubieran sido recibidas y a\u00fan no se hayan ejecutado se les permitir\u00e1 concluir su ejecuci\u00f3n. A este se le conoce como terminaci\u00f3n \"ordenada\".</p> <p>Pero si queremos llevar a cabo una terminaci\u00f3n de ejecutor mucho m\u00e1s dr\u00e1stica, podemos llamar al m\u00e9todo <code>shutdownNow()</code>, que termina el ejecutor inmediatamente, de manera que las nuevas tareas que le lleguen son rechazadas y los hilos del threadpool en los que se est\u00e1n ejecutando tareas en ese momento son marcados para interrupci\u00f3n, aunque no hay garant\u00eda de que las tareas decidan detectar la interrupci\u00f3n y finalizar su ejecuci\u00f3n. Las tareas que estuvieran en el ejecutor pendientes de comenzar su ejecuci\u00f3n no llegar\u00e1n a ser ejecutadas, y se retornar\u00e1 un lista <code>List&lt;Runnable&gt;</code>con \u00e9stas. El m\u00e9todo retorna inmediatamente, sin esperar a que las tareas que ya est\u00e1n en ejecuci\u00f3n terminen de ejecutarse.</p> <p>Si despu\u00e9s de haber llamado al m\u00e9todo <code>shutdown()</code> o <code>shutdownNow()</code> tratamos de enviar alguna otra tarea al ejecutor, \u00e9sta ser\u00e1 rechazada y el ejecutor lanzar\u00e1 una excepci\u00f3n <code>RejectedExecutionException</code> en la llamada al m\u00e9todo que ha sido usado para el env\u00edo.</p> <p>Si queremos esperar a la terminaci\u00f3n del ejecutor, es decir a que todas las tareas que gestiona terminen de ejecutarse, podemos llamar al m\u00e9todo <code>awaitTermination(long timeout, TimeUnit unit)</code>, que bloquea el hilo en el que se realiza la llamada hasta que las tareas del ejecutor hayan terminado o transcurre el tiempo m\u00e1ximo de espera (timeout). Este m\u00e9todo retorna un booleano indicativo de si realmente termin\u00f3 el ejecutor. Si se sobrepasa el tiempo de espera m\u00e1ximo se retornar\u00e1 <code>false</code>.</p> <p>Debemos tener en cuenta que si llamamos a <code>awaitTermination()</code> sin haber llamado antes a <code>shutdown()</code> o <code>shutdownNow()</code>, la llamada a <code>awaitTermination()</code> retornar\u00e1 inmediatamente y no tendr\u00e1 ning\u00fan efecto.</p> <p>Una de las opciones recomendadas para terminar un ejecutor es usar una combinaci\u00f3n de los m\u00e9todos anteriores, tratando de finalizar el ejecutor de forma ordenada, esperando un tiempo prudencial a su terminaci\u00f3n, transcurrido el cu\u00e1l se fuerza la finalizaci\u00f3n:</p> <pre><code>executorService.shutdown();\ntry {\nif (!executorService.awaitTermination(1, TimeUnit.SECONDS)) {\nexecutorService.shutdownNow();\n} } catch (InterruptedException e) {\nexecutorService.shutdownNow();\n}\n</code></pre> <p>Adem\u00e1s tendremos disponibles otros m\u00e9todos informativos relacionados con la finalizaci\u00f3n del ejecutor:</p> <ul> <li><code>isShutdown()</code>: Retorna <code>true</code> si se ha llamado al m\u00e9todo <code>shutdown()</code> o <code>shutdownNow()</code> del ejecutor.</li> <li><code>isTerminating()</code>: Retorna <code>true</code> si el ejecutor est\u00e1 realizando la operaci\u00f3n de finalizar su ejecuci\u00f3n, despu\u00e9s de haber sido llamado el m\u00e9todo <code>shutdown)</code> o <code>shutdownNow()</code>, pero no ha concluido a\u00fan.</li> <li><code>isTerminated()</code>: Retorna <code>true</code> si se ha llamado al m\u00e9todo <code>shutdown()</code> o <code>shutdownNow()</code> del ejecutor y todas las tareas han finalizado su ejecuci\u00f3n.</li> </ul>"},{"location":"bloque_v/tema_26/page-5/","title":"5 CachedThreadPool","text":""},{"location":"bloque_v/tema_26/page-5/#cachedthreadpool","title":"CachedThreadPool","text":"<p>Uno de los tipos de ThreadPoolExecutor que podemos crear es lo que se conoce como cached thread pool (grupo de hilos cacheado), que se caracteriza porque cuando recibe una nueva tarea que ejecutar, trata de ejecutarla en alg\u00fan hilo del thread pool que est\u00e9 \"libre\", y si todos los hilos del threadpool est\u00e1n ocupados ejecutando otras tareas, el ejecutor crea un nuevo hilo que es a\u00f1adido al thread pool y ejecuta en \u00e9l la tarea recibida.</p> <p>Para crear un cached thread pool executor usaremos el m\u00e9todo est\u00e1tico factor\u00eda <code>Executors.newCachedThreadPool()</code>, que retorna un objeto de la interfaz <code>ExecutorService</code>, al que haremos un cast a <code>ThreadPoolExecutor</code>.</p> <pre><code>ThreadPoolExecutor cachedThreadPoolExecutor = (ThreadPoolExecutor) Executors.newCachedThreadPool();\n</code></pre> <p>Este m\u00e9todo factor\u00eda est\u00e1 sobrecargado <code>Executors.newCachedThreadPool(threadFactory)</code> para recibir como argumento un objeto de la interfaz <code>ThreadFactory</code> (factor\u00eda de hilos) que ser\u00e1 usado para construir los hilos del threadpool cuando sea necesario, permiti\u00e9ndonos as\u00ed personalizar dicha construcci\u00f3n.</p> <p>Este tipo de ejecutor tiene el problema de que si enviamos muchas tareas a la vez o de manera muy seguida podremos sobrecargar el sistema, dado que el threadpool ir\u00e1 creciendo con cada nueva tarea recibida al estar todos sus hilos ocupados con otras tareas.</p> <p>Por otra parte, tenemos la ventaja de que las tareas siempre ser\u00e1n ejecutadas inmediatamente en cuanto hayan sido recibidas por el ejecutor, tanto si finalmente son ejecutadas en un hilo ya existente en el threadpool como si se hace crecer \u00e9ste creando y a\u00f1adiendo un nuevo hilo para ejecutar la tarea.</p> <p>Por tanto, cuanto m\u00e1s espaciadas en el tiempo lleguen en el tiempo y menos tiempo de ejecuci\u00f3n requieran, mejor ser\u00e1 el rendimiento de este tipo de ejecutor.</p> <p>Veamos la definici\u00f3n interna del m\u00e9todo <code>Executors.newCachedThreadPool()</code>, lo que nos servir\u00e1 para entender correctamente su funcionamiento:</p> <pre><code>public static ExecutorService newCachedThreadPool() {\nreturn new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n60L, TimeUnit.SECONDS,\nnew SynchronousQueue&lt;Runnable&gt;());\n}\n</code></pre> <p>Como vemos, no es obligatorio mantener un n\u00famero m\u00ednimo de hilos, no hay un n\u00famero m\u00e1ximo de hilos, los hilos ser\u00e1n destruidos autom\u00e1ticamente tras 60 segundos de inactividad y la cola de trabajo corresponde a una <code>SynchronousQueue&lt;Runnable&gt;</code>, que se caracteriza porque la inserci\u00f3n en la cola de trabajo espera directamente a su extracci\u00f3n, dado que en realidad nunca habr\u00e1 m\u00e1s de una tarea en la cola puesto que se extraer\u00e1 inmediatamente de ella en cuanto llegue, creando un hilo adicional si todos los hilos actuales est\u00e1n ocupados.</p>"},{"location":"bloque_v/tema_26/page-5/#proyecto-cachedthreadpool","title":"Proyecto CachedThreadPool","text":"<p>En este proyecto simularemos el funcionamiento de un servidor web que procesa peticiones de varios clientes. Internamente el servidor har\u00e1 uso de un cached thread pool executor para ejecutar las tareas que le vayan llegando.</p> MainServerTask <pre><code>class Main {\npublic static void main(String[] args) {\nServer server = new Server();\nfor (int i = 0; i &lt; 50; i++) {\nTask task = new Task(\"Task \" + i);\nserver.execute(task);\ntry {\n// The less time you sleep the greater the thread pool size gets.\n// Try to reduce the time sleeping and see what happens to thread pool size.\nThread.sleep(100);\n} catch (InterruptedException e) {\nreturn;\n}\n}\ntry {\nserver.shutdown();\n// Try shutdownNow instead and see what happens.\n// server.shutdownNow();\n} catch (InterruptedException e) {\nreturn;\n}\nTask task = new Task(\"Task sent after shutdown\");\nserver.execute(task);\n}\n}\n</code></pre> <pre><code>import java.util.concurrent.Executors;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\nclass Server {\nprivate final ThreadPoolExecutor cachedThreadPool =\n(ThreadPoolExecutor) Executors.newCachedThreadPool();\nvoid execute(Task task) {\ntry {\ncachedThreadPool.execute(task);\nSystem.out.printf(\"Server -&gt; Thread pool size: %d\\n\", cachedThreadPool.getPoolSize());\nSystem.out.printf(\"Server -&gt; Active threads count: %d\\n\", cachedThreadPool.getActiveCount());\n} catch (Exception e) {\nSystem.out.printf(\"Server -&gt; Task rejected: %s\\n\", task.getName());\n}\n}\nvoid shutdown() throws InterruptedException {\ncachedThreadPool.shutdown();\nif (cachedThreadPool.awaitTermination(5, TimeUnit.SECONDS)) {\nSystem.out.printf(\"Server -&gt; Terminated. Completed: %d\\n\",\ncachedThreadPool.getCompletedTaskCount());\n} else {\nSystem.out.printf(\"Server -&gt; Await termination timeout. Completed: %d\\n\",\ncachedThreadPool.getCompletedTaskCount());\n}\n}\n@SuppressWarnings(\"unused\")\nvoid shutdownNow() throws InterruptedException {\ncachedThreadPool.shutdownNow();\nif (cachedThreadPool.awaitTermination(5, TimeUnit.SECONDS)) {\nSystem.out.printf(\"Server -&gt; Terminated. Completed: %d\\n\",\ncachedThreadPool.getCompletedTaskCount());\n} else {\nSystem.out.printf(\"Server -&gt; Await termination timeout. Completed: %d\\n\",\ncachedThreadPool.getCompletedTaskCount());\n}\n}\n}\n</code></pre> <pre><code>import java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TimeUnit;\nclass Task implements Runnable {\nprivate final String name;\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nTask(String name) {\nthis.name = name;\n}\nString getName() {\nreturn name;\n}\n@Override\npublic void run() {\nSystem.out.printf(\"%s -&gt; %s -&gt; Started at: %s\\n\",\nThread.currentThread().getName(), name, dateTimeFormatter.format(LocalDateTime.now()));\ntry {\nwork();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s -&gt; %s -&gt; Interrupted at: %s\\n\",\nThread.currentThread().getName(), name, dateTimeFormatter.format(LocalDateTime.now()));\nreturn;\n}\nSystem.out.printf(\"%s -&gt; %s -&gt; Finished at: %s\\n\",\nThread.currentThread().getName(), name, dateTimeFormatter.format(LocalDateTime.now()));\n}\nprivate void work() throws InterruptedException {\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(10));\n}\n}\n</code></pre> <p>Si ejecutamos la aplicaci\u00f3n veremos que el servidor hace uso de un cached thread pool executor para ejecutar las tareas que le vayan llegando.</p>"},{"location":"bloque_v/tema_26/page-6/","title":"6 FixedThreadPool","text":""},{"location":"bloque_v/tema_26/page-6/#fixedthreadpool","title":"FixedThreadPool","text":"<p>Como vimos en el apartado anterior, si usamos un <code>ThreadPoolExecutor</code> creado mediante el m\u00e9todo <code>newCachedThreadPool()</code> de la clase <code>Executors</code> corremos el riesgo de sobrecargar el sistema, especialmente si el n\u00famero de tareas es alto y de larga duraci\u00f3n.</p> <p>Para evitar este problema, la clase <code>Executors</code> proporciona el m\u00e9todo est\u00e1tico factor\u00eda <code>Executors.newFixedThreadPool(numberOfThreads)</code> para crear un ejecutor que use como m\u00e1ximo el n\u00famero fijo de hilos que recibe como argumento.</p> <p>Este m\u00e9todo est\u00e1 sobrecargado <code>Executors.newFixedThreadPool(numberOfThreads, threadFactory)</code> para recibir tambi\u00e9n un objeto que implemente la interfaz <code>ThreadFactory</code>, cuyo m\u00e9todo <code>newThread(runnable)</code> ser\u00e1 llamado cuando sea necesario crear un hilo para el threadpool del ejecutor.</p> <p>Veamos la definici\u00f3n interna del m\u00e9todo factor\u00eda para comprender su funcionamiento:</p> <pre><code>public static ExecutorService newFixedThreadPool(int nThreads) {\nreturn new ThreadPoolExecutor(nThreads, nThreads,\n0L, TimeUnit.MILLISECONDS,\nnew LinkedBlockingQueue&lt;Runnable&gt;());\n}\n</code></pre> <p>Por defecto, los hilos del thread pool se van creando bajo demanda conforme son necesarios, hasta alcanzar el n\u00famero de hilos indicado, pero una vez alcanzado dicho m\u00e1ximo dichos hilos no podr\u00e1n ser eliminados.</p> <p>Adem\u00e1s, cuando el ejecutor recibe una tarea y todos los hilos de su threadpool est\u00e1n ocupados y dicho n\u00famero corresponde al m\u00e1ximo permitido, el ejecutor no crear\u00e1 nuevos hilos, sino que la tarea ser\u00e1 almacenada en en la LinkedBlockingQueue proporcionada, esperando a que haya alg\u00fan hilo del threadpool disponible para ejecutarla.</p> <p>Si queremos que en el threadpool se cree directamente el n\u00famero de hilos con el que se ha configurado el ejecutor, podemos llamar a su m\u00e9todo <code>preStartAllCoreThreads()</code>, que crear\u00e1 e iniciar\u00e1 dichos hilos, que quedar\u00e1n en espera de tener alguna tarea que ejecutar. Tambi\u00e9n tenemos el m\u00e9todo <code>preStartCoreThreads()</code>, que crea e inicia un hilo del thead pool, quedando en espera de alguna tarea.</p> <p>Gracias a estos m\u00e9todos sobrescribimos la pol\u00edtica por defecto de crear e iniciar los hilos solo cuando llega una nueva tarea y no hay ning\u00fan hilo disponible.</p> <p>Cuando el ejecutor recibe una tarea y todos los hilos de su threadpool est\u00e1n ocupados y dicho n\u00famero corresponde al m\u00e1ximo permitido, el ejecutor no crear\u00e1 nuevos hilos, sino que, por defecto, la tarea ser\u00e1 almacenada en la LinkedBlockingQueue proporcionada, esperando a que haya alg\u00fan hilo del threadpool disponible para ejecutarla.</p> <p>El n\u00famero recomendado de hilos depende normalmente del n\u00famero de n\u00facleos de procesamiento disponibles y del tipo de tareas que se env\u00edan (intensivas de CPU o intensivas de E/S). Podemos obtener el n\u00famero de n\u00facleos de procesamiento disponibles en la m\u00e1quina en la que no estamos ejecutando mediante <code>Runtime.getRuntime().availableProcessors()</code>.</p> <p>Como norma general, si se van a enviar al ejecutor tareas intensivas de CPU (normalmente de corta duraci\u00f3n), se recomienda usar un tama\u00f1o de threadpool igual al n\u00famero de n\u00facleos de procesamiento + 1 (para prevenir potenciales pausas). Sin embargo, si se van a enviar al ejecutor tareas intensivas de entrada y salida, como por ejemplo de acceso a Internet o a una base de datos, se recomienda usar un tama\u00f1o de threadpool mayor, dado que los hilos ser\u00e1n bloqueados en entrada / salida, permitiendo as\u00ed a m\u00e1s tareas ejecutarse.</p> <p>Un caso extremo de este tipo de ejecutor es el que se obtiene llamando al m\u00e9todo est\u00e1tico factor\u00eda <code>Executors.newSingleThreadExecutor()</code>, que crea un ejecutor cuyo threadpool s\u00f3lo podr\u00e1 contener como m\u00e1ximo un solo hilo, por lo que, en la pr\u00e1ctica, las tareas son ejecutadas en dicho ejecutor de una en una de forma secuencial. El m\u00e9todo tambi\u00e9n est\u00e1 sobrecargado <code>Executor.newSingleThreadExecutor(threadFactory)</code> para recibir la factor\u00eda a usar para crear el hilo.</p> <p>La definici\u00f3n interna de este m\u00e9todo factor\u00eda es (m\u00e1s o menos) la siguiente:</p> <pre><code>public static ExecutorService newSingleThreadExecutor() {\nreturn new ThreadPoolExecutor(1, 1,\n0L, TimeUnit.MILLISECONDS,\nnew LinkedBlockingQueue&lt;Runnable&gt;());\n}\n</code></pre>"},{"location":"bloque_v/tema_26/page-6/#politicas-de-saturacion","title":"Pol\u00edticas de saturaci\u00f3n","text":"<p>Llamamos saturaci\u00f3n, cuando llega una tarea al ejecutor y todos los hilos de su thread pool est\u00e1n ocupados ejecutando alguna tarea. La pol\u00edtica por defecto corresponder\u00e1 a que la tarea esperar\u00e1 en una cola hasta que pueda ser ejecutada por alguno de los hilos del ejecutor.</p> <p>Sin embargo, podemos configurar nuestro ejecutor para que implemente otras pol\u00edcitas, usando el m\u00e9todo <code>setRejectedExecutionHandler(handler)</code>.</p> <p>As\u00ed, tenemos predefinidos una serie de handlers que implementan distintas pol\u00edticas de rechazo:</p> <ul> <li><code>ThreadPoolExecutor.AbortPolicy</code>: Se lanza una excepci\u00f3n <code>RejectedExecutionException</code>.</li> <li><code>ThreadPoolExecutor.CallerRunsPolicy</code>: La tarea se ejecuta en el hilo que envi\u00f3 la tarea al ejecutor. De esta manera se implementa un mecanismo de control natural que hace que se ralentice la frecuencia de env\u00edo de tareas al ejecutor por parte del hilo emisor.</li> <li><code>ThreadPoolExecutor.DiscardPolicy</code>: Se descarta la tarea, que no es ejecutada.</li> <li><code>ThreadPoolExecutor.DiscardOldestPolicy</code>: Si el ejecutor no est\u00e1 terminado, la tarea m\u00e1s antigua en la cola de espera es descartada y no llegar\u00e1 a ejecutarse, y se trata de ejecutar de nuevo la tarea enviada.</li> </ul>"},{"location":"bloque_v/tema_26/page-6/#proyecto-fixedthreadpool","title":"Proyecto FixedThreadPool","text":"<p>En este proyecto simularemos el funcionamiento de un servidor web que procesa peticiones de varios clientes usando internamente un fixed thread pool executor de como m\u00e1ximo 5 hilos.</p> MainServerTask <pre><code>class Main {\npublic static void main(String[] args) {\nServer server = new Server();\nfor (int i = 0; i &lt; 50; i++) {\nTask task = new Task(\"Task \" + i);\nserver.execute(task);\ntry {\n// The less time you sleep the greater the thread pool size gets.\n// Try to reduce the time sleeping and see what happens to thread pool size.\nThread.sleep(100);\n} catch (InterruptedException e) {\nreturn;\n}\n}\ntry {\nserver.shutdown();\n// Try shutdownNow instead and see what happens.\n// server.shutdownNow();\n} catch (InterruptedException exception) {\nreturn;\n}\nTask task = new Task(\"Task sent after shutdown\");\nserver.execute(task);\n}\n}\n</code></pre> <pre><code>import java.util.concurrent.Executors;\nimport java.util.concurrent.RejectedExecutionException;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\nclass Server {\nprivate final ThreadPoolExecutor fixedThreadPool =\n(ThreadPoolExecutor) Executors.newFixedThreadPool(5);\nvoid execute(Task task) {\ntry {\nfixedThreadPool.execute(task);\nSystem.out.printf(\"Server -&gt; Thread pool size: %d\\n\", fixedThreadPool.getPoolSize());\nSystem.out.printf(\"Server -&gt; Active threads count: %d\\n\", fixedThreadPool.getActiveCount());\n} catch (RejectedExecutionException e) {\nSystem.out.printf(\"Server -&gt; Task rejected: %s\\n\", task.getName());\n}\n}\nvoid shutdown() throws InterruptedException {\nfixedThreadPool.shutdown();\nif (fixedThreadPool.awaitTermination(5, TimeUnit.SECONDS)) {\nSystem.out.printf(\"Server -&gt; Terminated. Completed: %d\\n\",\nfixedThreadPool.getCompletedTaskCount());\n} else {\nSystem.out.printf(\"Server -&gt; Await termination timeout. Completed: %d\\n\",\nfixedThreadPool.getCompletedTaskCount());\n}\n}\n@SuppressWarnings(\"unused\")\nvoid shutdownNow() throws InterruptedException {\nfixedThreadPool.shutdownNow();\nif (fixedThreadPool.awaitTermination(5, TimeUnit.SECONDS)) {\nSystem.out.printf(\"Server -&gt; Terminated. Completed: %d\\n\",\nfixedThreadPool.getCompletedTaskCount());\n} else {\nSystem.out.printf(\"Server -&gt; Await termination timeout. Completed: %d\\n\",\nfixedThreadPool.getCompletedTaskCount());\n}\n}\n}\n</code></pre> <pre><code>import java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TimeUnit;\nclass Task implements Runnable {\nprivate final String name;\nprivate final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\nTask(String name) {\nthis.name = name;\n}\nString getName() {\nreturn name;\n}\n@Override\npublic void run() {\nSystem.out.printf(\"%s -&gt; %s -&gt; Started at: %s\\n\",\nThread.currentThread().getName(), name, dateTimeFormatter.format(LocalDateTime.now()));\ntry {\nwork();\n} catch (InterruptedException e) {\nSystem.out.printf(\"%s -&gt; %s -&gt; Interrupted at: %s\\n\",\nThread.currentThread().getName(), name, dateTimeFormatter.format(LocalDateTime.now()));\nreturn;\n}\nSystem.out.printf(\"%s -&gt; %s -&gt; Finished at: %s\\n\",\nThread.currentThread().getName(), name, dateTimeFormatter.format(LocalDateTime.now()));\n}\nprivate void work() throws InterruptedException {\nTimeUnit.SECONDS.sleep(ThreadLocalRandom.current().nextInt(10));\n}\n}\n</code></pre> <p>Si ejecutamos el programa veremos que el servidor no puede procesar m\u00e1s de 5 peticiones a la vez.</p>"},{"location":"bloque_v/tema_26/page-7/","title":"7 Callable","text":""},{"location":"bloque_v/tema_26/page-7/#la-interfaz-callable","title":"La interfaz Callable","text":"<p>Una de las ventajas de los ejecutores es que se pueden ejecutar tareas concurrentes que retornen un resultado. Para ello la API de concurrencia de Java proporciona la interfaz <code>Callable&lt;V&gt;</code>.</p> <p>La interfaz <code>Callable&lt;T&gt;</code> corresponde a una interfaz funcional parametrizada que permite representar una computaci\u00f3n (tarea) que, a diferencia de <code>Runnable</code>, retorna un valor. Contiene un \u00fanico m\u00e9todo llamado <code>call()</code>, que retorna un valor de tipo <code>T</code>.</p> <p>Veamos la definici\u00f3n interna de la interfaz <code>Callable&lt;V&gt;</code>.</p> <pre><code>@FunctionalInterface\npublic interface Callable&lt;V&gt; {\nV call() throws Exception\n}\n</code></pre> <p>Debemos tener en cuenta que el m\u00e9todo <code>call()</code> puede lanzar tanto unchecked exceptions como checked exceptions, que podremos procesar implementando nuestro propio ejecutor que sobrescriba el m\u00e9todo <code>afterExecute()</code>.</p>"},{"location":"bloque_v/tema_26/page-8/","title":"8 Future","text":""},{"location":"bloque_v/tema_26/page-8/#la-interfaz-future","title":"La interfaz future","text":"<p>La interfaz <code>Future&lt;V&gt;</code> representa una tarea as\u00edncrona enviada a un ejecutor, cuyo resultado ser\u00e1 obtenido en un momento futuro. En otras palabras, corresponde a una promesa de valor. Se trata de una interfaz parametrizable, cuyo tipo <code>V</code> corresponder\u00e1 al tipo del valor retornado por la tarea.</p> <p>Veamos la definici\u00f3n de la interfaz <code>Future&lt;V&gt;</code>:</p> <pre><code>public interface Future&lt;V&gt; {\n// M\u00e9todos relacionados con la obtenci\u00f3n del valor retornado\n// por la tarea as\u00edncrona.\nV get() throws InterruptedException, ExecutionException;\nV get(long timeout, TimeUnit unit)\nthrows InterruptedException, ExecutionException, TimeoutException;\n// M\u00e9todos relacionados con la cancelaci\u00f3n de la tarea as\u00edncrona.\nboolean cancel(boolean mayInterruptIfRunning);\nboolean isCancelled();\n// M\u00e9todos relacionados con la completitud de la tarea as\u00edncrona.\nboolean isDone();\n}\n</code></pre> <p>Como vemos, cuando el hilo que env\u00edo la tarea as\u00edncrona al ejecutor desee acceder al valor que \u00e9sta haya retornado podr\u00e1 llamar al m\u00e9todo <code>get()</code> del objeto <code>Future&lt;V&gt;</code> que fue obtenido en respuesta al env\u00edo de la tarea al ejecutor.</p> <p>Si cuando llamamos al m\u00e9todo <code>get()</code> la tarea correspondiente ya ha terminado su ejecuci\u00f3n correctamente, directamente se nos retornar\u00e1 el valor del tipo <code>V</code> que haya retornado la tarea. Si la tarea hab\u00eda sido cancelada, se nos lanzar\u00e1 la excepci\u00f3n <code>CancellationException</code>.</p> <p>Si, por el contrario, para cuando llamamos al m\u00e9todo <code>get()</code> la tarea correspondiente a\u00fan no ha terminado de ejecutarse, el hilo que llama al m\u00e9todo <code>get()</code> quedar\u00e1 bloqueado en espera de que la tarea termine su ejecuci\u00f3n y retorne un valor del tipo <code>V</code>. Cuando la tarea concluya el valor retornado por \u00e9sta ser\u00e1 almacenado en el <code>Future</code> y se reactivar\u00e1 el hilo que fue bloqueado retorn\u00e1ndole el valor correspondiente. Si estando bloqueado el hilo que llam\u00f3 a <code>get()</code> \u00e9ste es interrumpido, se le lanzar\u00e1 la excepci\u00f3n <code>InterruptedException</code>.</p> <p>El m\u00e9todo <code>get(timeout, timeUnit)</code> est\u00e1 sobrecargado de manera que podamos pasarle el tiempo m\u00e1ximo que queremos que el hilo est\u00e9 esperando a que termine de ejecutarse la tarea correspondiente. Si transcurrido dicho tiempo la tarea no ha finalizado su ejecuci\u00f3n, el m\u00e9todo <code>get(time, timeUnit)</code> lanzar\u00e1 la excepci\u00f3n <code>TimeoutException</code>.</p> <p>Finalmente, si la tarea correspondiente termin\u00f3 su ejecuci\u00f3n lanzando una excepci\u00f3n, cuando llamemos al m\u00e9todo <code>get()</code> del objeto <code>Future</code> correspondiente, se lanzar\u00e1 la excepci\u00f3n <code>ExecutionException</code>, indicativa que en la tarea ejecutada en el ejecutor se produjo una excepci\u00f3n.</p> <p>Otra de las funcionalidades que nos proporciona la interfaz <code>Future</code>, a parte de obtener el valor retornado por la tarea, es la poder cancelar la tarea si ya no estamos interesados en que se ejecute o termine su ejecuci\u00f3n. Para ello, tenemos disponible el m\u00e9todo <code>cancel(mayInterruptIfRunning)</code>, que trata de marcar la tarea asociada como cancelada, retornando si se consigui\u00f3 marcar o no. As\u00ed, pueden darse los siguientes casos:</p> <ul> <li>Si la tarea ya hab\u00eda concluido su ejecuci\u00f3n, ya sea correctamente o con una excepci\u00f3n, evidentemente no podr\u00e1 ser marcada como cancelada, porque ya concluy\u00f3 su ejecuci\u00f3n, por lo que el m\u00e9todo <code>cancel(mayInterruptIfRunning)</code> retornar\u00e1 <code>false</code>.</li> <li>De igual forma, si la tarea ya hab\u00eda sido cancelada con anterioridad, no podr\u00e1 ser cancelada de nuevo, en cuyo caso tambi\u00e9n se retornar\u00e1 <code>false</code>.</li> <li>Si la tarea estaba en el ejecutor esperando poder comenzar su ejecuci\u00f3n, se marcar\u00e1 como cancelada, la tarea nunca llegar\u00e1 a ejecutarse, y se retornar\u00e1 <code>true</code>.</li> <li>Si la tarea estaba en ejecuci\u00f3n en el ejecutor para cuando se llama al m\u00e9todo <code>cancel(mayInterruptIfRunning)</code>, se marcar\u00e1 como cancelada y se retornar\u00e1 <code>true</code>. Adem\u00e1s, si el par\u00e1metro <code>mayInterruptIfRunning</code> recibe el valor <code>true</code> entonces el hilo del threadpool del ejecutor en el que se est\u00e1 ejecutando la tarea ser\u00e1 marcado como interrumpido. Depender\u00e1 ya del c\u00f3digo de la propia tarea detectar que el hilo ha sido interrumpido y finalizar su ejecuci\u00f3n. Como vemos la cancelaci\u00f3n real es colaborativa, es decir, que requiere de la colaboraci\u00f3n de la propia tarea. Si no pasamos el valor <code>true</code> para <code>mayInterruptIfRunning</code> o la tarea no hace caso al hecho de que el hilo en el que se est\u00e1 ejecutando haya sido marcado para interrupci\u00f3n, la tarea completar\u00e1 su ejecuci\u00f3n.</li> </ul> <p>Debemos tener en cuenta que una tarea ha sido marcada como cancelada, si llamamos al m\u00e9todo <code>get()</code> del objeto para obtener su valor <code>Future</code> correspondiente se lanzar\u00e1 la excepci\u00f3n <code>CancellationException</code>.</p> <p>Si queremos saber si la tarea asociada a un objeto <code>Future</code> ha sido marcada como cancelada podemos llamar a su m\u00e9todo <code>isCancelled()</code>.</p> <p>Finalmente, la interfaz <code>Future</code> proporciona el m\u00e9todo <code>isDone()</code>, que retorna <code>true</code> si la tarea asociada termin\u00f3 su ejecuci\u00f3n, ya sea correctamente, lanzando una excepci\u00f3n o porque no lleg\u00f3 a ejecutarse al ser cancelada antes de poder iniciar su ejecuci\u00f3n.</p>"},{"location":"bloque_v/tema_26/page-9/","title":"9 M\u00e9todos de env\u00edo de tareas en la interfaz ExecutorService","text":""},{"location":"bloque_v/tema_26/page-9/#metodos-de-envio-de-tareas-en-la-interfaz-executorservice","title":"M\u00e9todos de env\u00edo de tareas en la interfaz ExecutorService","text":"<p>La interfaz <code>ExecutorService</code>, adem\u00e1s de los m\u00e9todos para la terminaci\u00f3n de un ejecuci\u00f3n, que hemos estudiado anteriormente, define una serie de m\u00e9todos para el env\u00edo de tareas:</p> <pre><code>public interface ExecutorService extends Executor {\n// ...\n// M\u00e9todos relacionados con el env\u00edo de runnables.\nFuture&lt;?&gt; submit(Runnable task);\n&lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result);\n// M\u00e9todos relacionados con el env\u00edo de callables.\n&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);\n&lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)\nthrows InterruptedException;\n&lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,\nlong timeout, TimeUnit unit)\n&lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)\nthrows InterruptedException, ExecutionException;\n&lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,\nlong timeout, TimeUnit unit)\nthrows InterruptedException, ExecutionException, TimeoutException;\n}\n</code></pre> <p>As\u00ed, la interfaz <code>ExecutorService</code> proporciona nuevos m\u00e9todos para enviar runnables a un ejecutor, pero que, a diferencia del m\u00e9todo <code>execute(runnable)</code> de la interfaz <code>Executor</code>, retornan un objeto de la interfaz <code>Future</code> que representa la tarea as\u00edncrona enviada al ejecutor.</p> <p>El primero de ellos es el m\u00e9todo <code>submit(runnable)</code>, que env\u00eda al ejecutor la tarea correspondiente al runnable. Retorna un <code>Future&lt;?&gt;</code> que representa la tarea as\u00edncrona que se est\u00e1 ejecutando, y que podemos usar para cancelar la tarea. El objeto Future no contendr\u00e1 ning\u00fan valor.</p> <p>Una mejora a este \u00faltimo es el m\u00e9todo <code>submit(runnable, V value)</code>, que env\u00eda al ejecutor la tarea correspondiente al runnable. Retorna un <code>Future&lt;T&gt;</code>, cuyo valor ser\u00e1 establecido a <code>value</code> cuando el runnable termine de ejecutarse correctamente, sin que se haya producido una excepci\u00f3n o haya sido cancelada antes de llegar a comenzar su ejecuci\u00f3n. Como vemos, nos permite establecer el valor del <code>Future</code> asociado a la tarea aunque \u00e9sta realmente no haya retornado dicho valor.</p> <p>Aparte de las mejoras para el env\u00edo de runnables al ejecutor, la interfaz <code>ExecutorService</code> proporciona una serie de m\u00e9todos espec\u00edficos para el env\u00edo al ejecutor de tareas en forma de objetos <code>Callable</code>.</p> <p>El primero de ellos es el m\u00e9todo <code>submit(callable&lt;V&gt;)</code>, que env\u00eda al ejecutor la tarea representada por el callable. Retorna un <code>Future&lt;T&gt;</code>, cuyo valor ser\u00e1 el valor retornado por el m\u00e9todo <code>call()</code> del callable.</p> <p>Dentro de poco estudiaremos en su propio apartado los otros dos m\u00e9todos disponibles en esta interfaz para el env\u00edo de listas de objetos <code>Callable</code>, llamados <code>invokeAll(callableCollection)</code> y <code>invokeAny(callableCollection</code>.</p> <p> Figura  - Executor Service</p>"},{"location":"bloque_v/tema_26/page-9/#proyecto-callable","title":"Proyecto Callable","text":"<p>En este proyecto desarrollaremos una aplicaci\u00f3n que calcula el factorial de 10 n\u00fameros distintos. Crearemos un tarea <code>Callable</code> que calcule el factorial de un n\u00famero y un ejecutor con un threadpool fijo de 2 hilos que lance las diez tareas y obtenga el resultado de cada una de ellas, usando objetos <code>Future</code>, y lo almacene en una lista, para finalmente mostrar todos los resultados.</p> MainTask <pre><code>import java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.*;\nclass Main {\npublic static void main(String[] args) {\nThreadPoolExecutor fixedThreadPool =\n(ThreadPoolExecutor) Executors.newFixedThreadPool(2);\nList&lt;Future&lt;Integer&gt;&gt; futureList = new ArrayList&lt;&gt;();\nint[] numbers = new int[10];\nfor (int i = 0; i &lt; 10; i++) {\nnumbers[i] = ThreadLocalRandom.current().nextInt(15) - 5;\nTask task = new Task(numbers[i]);\nfutureList.add(fixedThreadPool.submit(task));\n}\n// Main thread can do some work here.\n// ...\nSystem.out.print(\"Results:\\n\");\ntry {\nfor (int i = 0; i &lt; futureList.size(); i++) {\nFuture&lt;Integer&gt; future = futureList.get(i);\ntry {\nInteger factorial = future.get();\nSystem.out.printf(\"Task %d -&gt; factorial(%d) = %d\\n\", i + 1,\nnumbers[i], factorial);\n} catch (ExecutionException e) {\nSystem.out.printf(\"Task %d -&gt; factorial(%d) threw an exception\\n\",\ni + 1, numbers[i]);\n}\n}\n} catch (InterruptedException ignored) {\n} finally {\nfixedThreadPool.shutdown();\n}\n}\n}\n</code></pre> <pre><code>import java.util.concurrent.Callable;\nimport java.util.concurrent.TimeUnit;\nclass Task implements Callable&lt;Integer&gt; {\nprivate final int number;\nTask(int number) {\nthis.number = number;\n}\n@Override\npublic Integer call() throws InterruptedException {\nreturn factorial(number);\n}\nprivate Integer factorial(int number) throws InterruptedException {\nif (number &lt; 0) throw new IllegalArgumentException(\"Number can't be negative\");\nint factorial = 1;\nfor (int i = 2; i &lt;= number; i++) {\nfactorial *= i;\nTimeUnit.MILLISECONDS.sleep(20);\n}\nreturn factorial;\n}\n}\n</code></pre> <p>Si ejecutamos el programa veremos c\u00f3mo se utiliza la interfaz <code>Future</code> para acceder a los resultados de las tareas de c\u00e1lculo enviadas al ejecutor.</p>"},{"location":"bloque_v/tema_27/page-1/","title":"1 Introducci\u00f3n al ForkJoin framework","text":""},{"location":"bloque_v/tema_27/page-1/#intro","title":"Intro","text":"<p>Como hemos visto, Java 5 introdujo el concepto de ejecutor, a trav\u00e9s de las interfaces <code>Executor</code> y <code>ExecutorService</code>, y de las clases que las implementan, como <code>ThreadPoolExecutor</code>. El uso de ejecutores permite separar por un lado la creaci\u00f3n de la tarea y por otro lado su ejecuci\u00f3n. Tan s\u00f3lo es necesario crear las tareas y envi\u00e1rselas al ejecutor, que es quien crea, gestiona y finaliza los hilos necesarios para la ejecuci\u00f3n de las tareas.</p> <p>Java 7 va un paso m\u00e1s all\u00e1 proporcion\u00e1ndonos una implementaci\u00f3n adicional de la interfaz <code>ExecutorService</code>, conocida como fork/join framework, que proporciona un entorno de trabajo de alto rendimiento para el paralelismo de datos en Java, es decir para que se realicen tareas sobre una colecci\u00f3n de datos de forma concurrente, aprovechando la disponibilidad de varios n\u00facleos de procesamiento.</p> <p>Este framework est\u00e1 dise\u00f1ado para ser usado con tareas que pueden descomponerse en subtareas. Est\u00e1 orientado a la resoluci\u00f3n concurrente de un problema mediante la t\u00e9cnica divide y vencer\u00e1s, consistente en descomponer un problema en subproblemas m\u00e1s simples, cuya operaci\u00f3n se conoce como fork, obtener la soluci\u00f3n de dichos subproblemas, y componer la soluci\u00f3n total en base a la soluci\u00f3n de los subproblemas, a lo que se conoce como join. El algoritmo ser\u00eda algo as\u00ed:</p> <pre><code>if problem is small enough\n    solve problem directly (sequential algorithm)\nelse\n    split problem into independent parts\n    fork new sub-tasks to solve each part\n    sub-tasks are solved in parallel, even in different threads\n    join all sub-tasks\n    compose result from sub-results\n</code></pre> <p>As\u00ed, el framework se basa en dos operaciones principales:</p> <ul> <li>Descomposici\u00f3n (fork): Divide una tarea en subtareas m\u00e1s peque\u00f1as y las ejecuta.</li> <li>Composici\u00f3n (join): La tarea espera la finalizaci\u00f3n de las subtareas en las que se ha descompuesto. Cuando una tarea se encuentra en esta situaci\u00f3n, el hilo en el que se est\u00e1 ejecutando es asignado a otra tarea del ejecutor que no haya sido ejecutada a\u00fan. A este mecanismo se le conoce como algoritmo de robo de trabajo (work-stealing algorithm).</li> </ul> <p> Figura 1 - Fork y Join</p> <p>Las tareas que pueden ser utilizadas con este framework tienen una serie de limitaciones:</p> <ul> <li>S\u00f3lo pueden utilizar como mecanismos de sincronizaci\u00f3n los m\u00e9todos <code>fork()</code> y <code>join()</code>. Si utilizan otros mecanismos de sincronizaci\u00f3n, no podr\u00e1 ser usado el algoritmo de robo de trabajo, es decir, que los hilos del ejecutor no podr\u00e1n ser reusados por otras tareas mientras la tarea est\u00e9 en una operaci\u00f3n de sincronizaci\u00f3n (por ejemplo si se pone a dormir).</li> <li>No deben realizar operaciones de Entrada/Salida, como leer o escribir datos en un archivo.</li> <li>No deben lanzar excepciones chequeadas (checked exceptions). Deben incluir el c\u00f3digo necesario para procesar dichas excepciones.</li> </ul> <p>El n\u00facleo del entorno est\u00e1 formado por las siguientes dos clases: <code>ForkJoinPool</code> y <code>ForkJoinTask</code>.</p>"},{"location":"bloque_v/tema_27/page-2/","title":"2 ForkJoinPool","text":""},{"location":"bloque_v/tema_27/page-2/#intro","title":"Intro","text":"<p>La clase <code>ForkJoinPool</code> es un tipo de ejecutor, que al igual que <code>ThreadPoolExecutor</code>, hereda de <code>AbstractExecutorService</code>, y por tanto implementa las interfaces <code>ExecutorService</code> y <code>Executor</code>.</p> <p>Al heredar de <code>AbstractExecutorService</code>, implementa todos los m\u00e9todos caracter\u00edsticos de la interfaz <code>ExecutorService</code> que hemos estudiado antes, tanto para el env\u00edo de objetos <code>Runnable</code> y <code>Callable</code>, como <code>execute(runnable)</code>, <code>submit(callable)</code>, <code>invokeAll(callableCollection)</code> e <code>invokeAny(callableCollection)</code>, y los m\u00e9todos relacionados con la terminaci\u00f3n expl\u00edcita del ejecutor, como <code>shutdown()</code>, <code>shutdownNow()</code> o <code>awaitTermination()</code>.</p> <p>En los m\u00e9todos anteriores, un ejecutor ForkJoinPool se comporta de forma similar a un ThreadPoolExecutor.</p> <p>Sin embargo, la clase <code>ForkJoinPool</code> proporciona una caracter\u00edstica adicional que lo hace muy especial: implementa el algoritmo de robo de trabajo. Esta caracter\u00edsticas s\u00f3lo est\u00e1 disponible en un tipo especial de tareas dise\u00f1adas para trabajar con este tipo de ejecutor, representadas por la clase <code>ForkJoinTask</code>.</p> <p>Podemos crear un ejecutor ForkJoinPool a trav\u00e9s del constructor de dicha clase <code>ForkJoinPool()</code>, que hace que el ejecutor se cree con un threadpool de un tama\u00f1o igual al n\u00famero de n\u00facleos de procesamiento disponibles en el sistema. El constructor est\u00e1 sobrecargado <code>ForkJoinPool(parallelism)</code> para recibir el n\u00famero de hilos que debe tener el threadpool del ejecutor, lo que nos puede ser \u00fatil para indicar un n\u00famero inferior al n\u00famero real de n\u00facleos de procesamiento disponibles.</p> <p>Aunque es posible crear un ejecutor ForkJoinPool a trav\u00e9s de alguno de sus constructores, la opci\u00f3n recomendada es usar el m\u00e9todo est\u00e1tico <code>ForkJoinPool.commonPool()</code>, que retorna un ForkJoinPool ya existente, creado por el sistema, com\u00fan a todas la aplicaciones, y que que usa tantos hilos como n\u00facleos de procesamiento haya disponibles en el sistema. El objetivo de usar este ForkJoinPool com\u00fan es el de reducir el uso de recursos. De hecho, y como veremos m\u00e1s adelante, los objetos <code>ForkJoinTask</code> lo usan si no se indica expl\u00edcitamente el ForkJoinPool que debe usarse.</p> <p> Figura 2 - Diagrama de clases de ForkJoinPool</p> <p>La clase <code>ForkJoinPool</code> proporciona nuevos m\u00e9todos para poder enviar objetos <code>ForkJoinTask</code> al ejecutor. Estos m\u00e9todos ser\u00e1n usados por clientes externos al propio ForkJoinPool (non ForkJoinTask clients). Debemos tener en cuenta que las propias tareas ForkJoinTask que se est\u00e9n ejecutando en el ejecutor pueden a su vez enviar subtareas al ejecutor, pero no lo hacen usando estos m\u00e9todos, sino otros m\u00e9todos que estudiaremos dentro de poco:</p> <ul> <li><code>execute(ForkJoinTask&lt;?&gt; tarea)</code>: Env\u00eda al ejecutor una tarea ForkJoinTask que no retorna ning\u00fan valor. El hilo desde el que se realiza el env\u00edo NO es bloqueado, por lo que puede continuar con su ejecuci\u00f3n. La llamada a este m\u00e9todo no retorna nada.</li> <li><code>submit(ForkJoinTask&lt;T&gt; tarea)</code>: Env\u00eda al ejecutor una tarea ForkJoinTask que retorna un valor de tipo <code>T</code>. El hilo desde el que se realiza el env\u00edo NO es bloqueado, por lo que puede continuar con su ejecuci\u00f3n. La llamada a este m\u00e9todo retorna un <code>ForkJoinTask&lt;T&gt;</code>, que extiende de <code>Future&lt;T&gt;</code>, en el que se almacenar\u00e1 el valor del tipo <code>T</code> retornado por la tarea cuando \u00e9sta termine de ejecutarse.</li> <li><code>invoke(ForkJoinTask&lt;T&gt; tarea)</code>: Env\u00eda al ejecutor una tarea ForkJoinTask que retorna un valor de tipo <code>T</code>. El hilo desde el que se realiza el env\u00edo es bloqueado hasta que termine de ejecutarse la tarea enviada. La llamada a este m\u00e9todo retorna el valor del tipo <code>T</code> retornado por la tarea.</li> </ul> <p>El ForkJoinPool dispone de una cola compartida (shared queue) en la que se encolan las ForkJoinTasks enviadas por clientes externos. Por su parte, cada hilo del threadpool del ejecutor posee su propia cola de trabajo (work queue) de la que extraen las tareas para ejecutarlas, que corresponde a una cola de doble extremo (dequeue, double-ended queue), es decir, una cola en la que se pueden realizar inserciones y extracciones por ambos extremos.</p> <p>Cuando se recibe una ForkJoinTask en la cola compartida y alg\u00fan hilo con su cola de trabajo vac\u00eda, la tarea se extrae de la cola compartida y se lleva a la cola de trabajo de dicho hilo.</p> <p> Figura 3 - Cola compartida del ForkJoin pool</p> <p>La clase <code>ForkJoinPool</code> proporciona una serie de m\u00e9todos informativos para obtener informaci\u00f3n sobre su ejecuci\u00f3n:</p> <ul> <li><code>getPoolSize()</code>: Retorna el n\u00famero de hilos trabajadores usados por el ejecutor.</li> <li><code>getParallelism()</code>: Retorna el nivel deseado de paralelismo establecido para el ejecutor.</li> <li><code>getActiveThreadCount()</code>: Retorna el n\u00famero de hilos del ejecutor que est\u00e1n ejecutando tareas en este momento.</li> <li><code>getRunningThreadCount()</code>: Retorna el n\u00famero de hilos que no est\u00e1n bloqueados en ning\u00fan mecanismo de sincronizaci\u00f3n.</li> <li><code>getQueuedSubmissionCount()</code>: Retorna el n\u00famero de tareas que han sido enviadas al ejecutor y que a\u00fan no han comenzado su ejecuci\u00f3n.</li> <li><code>getQueuedTaskCount()</code>: Retorna el n\u00famero de tareas que han sido enviadas al ejecutor y que ya han comenzado su ejecuci\u00f3n.</li> <li><code>hasQueuedSubmissions()</code>: Retorna <code>true</code> si el ejecutor tiene tareas pendientes de comenzar a ejecutar.</li> <li><code>getStealCount()</code>: Retorna el n\u00famero de veces que se ha producido robo de trabajo (lo estudiaremos dentro de poco).</li> <li><code>isTerminated()</code>: Retorna <code>true</code> si el ejecutor ya ha finalizado su ejecuci\u00f3n.</li> </ul>"},{"location":"bloque_v/tema_27/page-3/","title":"3 ForkJoinTask","text":""},{"location":"bloque_v/tema_27/page-3/#intro","title":"Intro","text":"<p>La clase <code>ForkJoinTask&lt;V&gt;</code> es la clase base de las tareas que pueden ser ejecutadas por un ejecutor <code>ForkJoinPool</code>, e implementa la interfaz <code>Future&lt;V&gt;</code>.</p> <p>El objetivo de esta clase es asociar una determinada colecci\u00f3n de datos con la computaci\u00f3n que se debe realizar con ellos. Proporciona mecanismos para ejecutar las operaciones de descomposici\u00f3n (fork) y de reunificaci\u00f3n (join) dentro de la tarea y los m\u00e9todos de control del estado de la tarea, permiti\u00e9ndonos utilizar una estrategia divide y vencer\u00e1s para llevar a cabo el trabajo encomendado.</p> <p>Para ello, dentro de la tarea usemos alg\u00fan algoritmo del tipo de descomposici\u00f3n y reunificaci\u00f3n recursivo, como el siguiente:</p> <pre><code>Si el tama\u00f1o de la tarea es suficientemente peque\u00f1o\n    Resolver la tarea directamente de forma secuencial\n    Obtener resultado (opcional)\nsino\n    Subdividir la tarea en subtareas independientes\n    Ejecutar cada una de las subtareas en paralelo, incluso en hilo diferentes\n    Esperar a que todas las subtareas terminen de ejecutarse\n    Obtener resultado componiendo el resultado de cada una de las subtareas (opcional)\nRetornar resultado (opcional)\n</code></pre> <p>La ventaja principal de aplicar este algoritmo de divide y vencer\u00e1s es que podemos ejecutar un alto n\u00famero de ForkJoinTasks en un n\u00famero peque\u00f1o de hilos del fork-join pool, sin tener que sobrecargar el sistema creando muchos hilos.</p> <p>Como vemos en este sencillo algoritmo, la propia tarea deber\u00e1 ejecutar una serie de subtareas. Y esta es una de las diferencias m\u00e1s notables entre el Executor Framework y el Fork/Join Framework. Mientras que en el primero todas las tareas deben ser enviadas al ejecutor, en el segundo las propias tareas incluyen m\u00e9todos para ejecutar y controlar subtareas.</p> <p>A la hora de crear nuestras tareas no extenderemos directamente la clase <code>ForkJoinTask</code>, sino alguna de sus subclases:</p> <ul> <li><code>RecursiveAction</code>: Lo usaremos si nuestra tarea no va a retornar ning\u00fan resultado.</li> <li><code>RecursiveTask</code>: Lo usaremos si nuestra tarea retornar\u00e1 un resultado.</li> <li><code>CountedCompleter</code>: Lo usaremos si al completarse nuestra tarea se deben lanzar otras tareas. Representa \u00e1rboles jer\u00e1rquicos de tareas recursivas. Fue agregada en Java 8.</li> </ul> <p> Figura 4 - Diagrama de clases de ForkJoinTask</p> <p>El m\u00e9todo principal de estas clases, y que deberemos sobrescribir para implementar su funcionalidad, es el m\u00e9todo <code>void compute()</code>, que no retorna nada, en el caso de la clase <code>RecursiveAction</code>, o <code>V compute()</code>, que s\u00ed retorna un valor cuyo tipo <code>V</code> corresponde al tipo gen\u00e9rico de la clase, en el caso de la clase <code>RecursiveTask&lt;V&gt;</code>.</p> <p>Desgraciadamente, estas clases no son interfaces funcionales, por lo que no podemos usar expresiones lambda, sino que estamos obligados a crear clases que hereden de ellas. Debemos tener en cuenta que estas clases fueron dise\u00f1adas para Java 7, versi\u00f3n que a\u00fan no incorporaba las lambdas.</p> <p>Dentro de este m\u00e9todo se realizar\u00e1 la descomposici\u00f3n de la tarea en subtareas. Una vez creadas las subtareas, deberemos envi\u00e1rselas al ejecutor <code>ForkJoinPool</code> para que sean ejecutadas. Para ello usaremos alguno de los siguiente m\u00e9todos existentes en la clase <code>ForkJoinTask</code>, y que son heredados por <code>RecursiveAction</code> y <code>RecursiveTask</code>.</p> <p>La primera opci\u00f3n es usar el m\u00e9todo <code>fork()</code> sobre una subtarea, para que \u00e9sta sea enviada internamente al mismo ForkJoinPool, en el que se se inicie su ejecuci\u00f3n de manera as\u00edncrona, de manera que la tarea padre continuar su ejecuci\u00f3n (no es bloqueado). Como consecuencia, la subtarea es insertada al principio de la cola de trabajo asociada al mismo hilo en el que se est\u00e1 ejecutando la tarea padre. La llamada a este m\u00e9todo retorna la propia subtarea sobre la que se ejecuta.</p> <p>Si la tarea padre desea posteriormente esperar a que termine la subtarea, deber\u00e1 llamar al m\u00e9todo <code>join()</code> de la subtarea, que har\u00e1 que la tarea padre quede suspendida hasta que la subtarea finalice su ejecuci\u00f3n, de manera que el hilo trabajador que estaba ejecutando la tarea padre es asignado a otra tarea del ejecutor (algoritmo de robo de trabajo). Es importante recalcar que el hilo en el que se est\u00e1 ejecutando la tarea padre NO es bloqueado, lo que es bloqueada es la tarea padre en s\u00ed, y de hecho el hilo que estaba asignado a la tarea padre es resignado a otra tarea. Cuando la subtarea sobre la que se ha hecho <code>join()</code> es completado, satisfactoriamente o con una excepci\u00f3n, cuando <code>isDone()</code> sea <code>true</code>, la tarea padre es reactivada y recibe el valor retornado el <code>join()</code>, pudiendo continuar con su ejecuci\u00f3n.</p> <p>Si la ejecuci\u00f3n de la subtarea retorna un valor, dicho valor ser\u00e1 retornado por el propio m\u00e9todo <code>join()</code>, de manera que la tarea padre pueda hacer uso de \u00e9l. Si la tarea no retorna un valor, el m\u00e9todo <code>join()</code> retornar\u00e1 <code>null</code>.</p> <p>Si al ejecutar la subarea se produjera una excepci\u00f3n, al hacer <code>join()</code> sobre ella se lanzar\u00e1 una <code>RuntimeException</code> o <code>Error</code>, pero no <code>ExecutionException</code>, a diferencia de lo que ocurr\u00eda el m\u00e9todo <code>get()</code> de la interfaz <code>Future</code>. Otra diferencia, es que si el hilo desde el que se ha llamado a <code>join()</code>, que est\u00e1 bloqueado esperando que termine de ejecutarse la subtarea, es interrumpido, dicha interrupci\u00f3n no provocar\u00e1 a que la llamada retorne abruptamente lanzando la excepci\u00f3n <code>InterruptedException</code>.</p> <p>Una segunda opci\u00f3n es usar sobre la subtarea el m\u00e9todo <code>invoke()</code> que realiza ambas operaciones, la de fork y la de join, por lo env\u00eda la subarea al ForkJoinPool para que sea ejecutada, de manera que la tarea padre quedar\u00e1 suspendida hasta que la subtarea finalice su ejecuci\u00f3n, por lo que el hilo trabajador que estaba ejecutando la tarea padre es asignado a otra tarea del ejecutor (algoritmo de robo de trabajo). La llamada a este m\u00e9todo retornar\u00e1 el valor retornado por la subtarea. Si la ejecuci\u00f3n de la subtarea lanzara una excepci\u00f3n, la llamada al m\u00e9todo lanzar\u00e1 una <code>RuntimeException</code>.</p> <p>Debemos recalcar que <code>fork()</code>, <code>join()</code> y <code>invoke()</code> deben ser ejecutados sobre el objeto subtarea que hayamos creado en el m\u00e9todo <code>compute()</code> de la tarea, y NO sobre la tarea padre en s\u00ed.</p> <p> Figura 5 - Relaci\u00f3n entre tarea ForkJoinTask padre y tareas ForkJoinTask hijas</p> <p>Una tercera opci\u00f3n es que la tarea padre llame al m\u00e9todo est\u00e1tico <code>ForkJoinTask.invokeAll(forkJoinSubTask&lt;?&gt;...)</code>, que comienza la ejecuci\u00f3n de cada una de las subtareas pasadas como argumento, quedando la tarea padre desde la que se realiza la llamada suspendida hasta que terminen de ejecutarse las subtareas, de manera que hilo trabajador que estaba ejecutando la tarea padre es asignado a otra tarea del ejecutor (algoritmo de robo de trabajo). Este m\u00e9todo est\u00e1 sobrecargado, de manera que pueda recibir como par\u00e1metros un par de subtareas, <code>ForkJoinTask.invokeAll(forkJoinSubTask1, forkJoinSubTask2)</code>. La llamada a estos m\u00e9todos no retorna nada. Este comportamiento ofrece una gesti\u00f3n de tareas m\u00e1s eficiente que la proporcionada por los objetos <code>Runnable</code> y <code>Callable</code>.</p> <p>Finalmente, tambi\u00e9n es posible obtener un objeto <code>ForkJoinTask</code> a partir de un objeto <code>Runnable</code> o <code>Callable</code>, mediante los siguientes m\u00e9todos est\u00e1ticos:</p> <ul> <li><code>ForkJoinTask.adapt(runnable)</code>: Retorna un <code>ForkJoinTask&lt;?&gt;</code>.</li> <li><code>ForkJoinTask.adapt(runnable, resultT)</code>: Retorna un <code>ForkJoinTask&lt;T&gt;</code>.</li> <li><code>ForkJoinTask.adapt(callableT)</code>: Retorna un <code>ForkJoinTask&lt;T&gt;</code>.</li> </ul>"},{"location":"bloque_v/tema_27/page-4/","title":"4 Algoritmo de robo de trabajo","text":""},{"location":"bloque_v/tema_27/page-4/#intro","title":"Intro","text":"<p>Como ya hemos dicho, cada hilo del threadpool del ejecutor posee su propia cola de trabajo (work queue) de la que se extrae una a una las tareas para ejecutarlas y en la que se insertan nuevas tareas que deben ser ejecutadas.</p> <p>La cola de trabajo de cada hilo corresponde a lo que se conoce como una cola de doble extremo (dequeue, double-ended queue), es decir, una cola en la que se pueden realizar inserciones y extracciones por ambos extremos. Uno de los extremos recibe el nombre de head y el otro extremo recibe el nombre de tail.</p> <p>Cada hilo trabajador se encuentra ejecutando una especie de bucle infinito en el que conforme termina de ejecutar una tarea, extrae otra del head de la dequeue (operaci\u00f3n pop) y la ejecuta. Dado que cada hilo dispone de su propia dequeue, no debe competir con otros hilos y por tanto se disminuye la contenci\u00f3n (el hecho de tener que bloquear un hilo por estar esperando en un cerrojo).</p> <p>Cuando una tarea padre hace <code>fork()</code> sobre una subtarea, dicha subtarea es insertada en el head de la dequeue de trabajo asociada al mismo hilo en el que se est\u00e1 ejecutando la tarea padre (operaci\u00f3n push). Por tanto, si la tarea padre hace <code>fork()</code> de varias subtareas, \u00e9stas se van encolando en orden LIFO (last input first output), de manera que la \u00faltima subtarea sobre la que se ha hecho fork() es la que ocupar\u00e1 el head de la dequeue de trabajo (como si fuera una pila).</p> <p>Cuando durante su ejecuci\u00f3n una tarea padre hace <code>join()</code> sobre una subtarea porque necesita esperar a que \u00e9sta termine su ejecuci\u00f3n, la tarea padre queda bloqueada y el hilo trabajador es asignada a otra tarea.</p> <p>Con el objetivo de tener a los hilos del threadpool del ejecutor lo m\u00e1s ocupados que sea posible, \u00e9stos implementan el conocido como algoritmo de robo de trabajo (work-stealing algorithm), que consiste en que si un hilo del threadpool debe extraer una nueva tarea del head de su dequeue de trabajo y detecta que \u00e9sta est\u00e1 vac\u00eda, comprueba las dequeue de trabajo del resto de hilos del threadpool del ejecutor y, de entre aquellas que contengan tareas pendientes de ejecuci\u00f3n, elige una aleatoriamente para extraer del tail de dicha dequeue de trabajo una tarea (operaci\u00f3n poll) y comenzar su ejecuci\u00f3n.</p> <p>Como vemos, las tareas extraen del tail de otra dequeue de trabajo, por lo que digamos que \"se roban\" en orden FIFO (fist input first output), es decir que las subtareas sobre las que se hicieron primero <code>fork()</code> en el hilo original son las primeras en poder ser robadas por otros hilos (como si fuera una cola). El objetivo de que el robo se realice desde el extremo contrario al que se extraen las tareas normalmente para su ejecuci\u00f3n es minimizar la contenci\u00f3n entre el hilo poseedor de la dequeue y el hilo que pretende hacer el robo, dado que los dos extremos de la dequeue est\u00e1n protegidos por mecanismo de locking distintos.</p> <p> Figura 6 - Algoritmo de robo de trabajo (1 de 2)</p> <p> Figura 7 - Algoritmo de robo de trabajo (2 de 2)</p> <p>Si el hilo no encuentra ninguna tarea que \"robar\" de las colas de trabajo del resto de hilos, el hilo accede a la cola com\u00fan del ejecutor, extrae una tarea de ella y comienza su ejecuci\u00f3n.</p> <p>Si dos hilos tratan de \"robar\" tareas de la misma cola de trabajo, se producir\u00e1 contenci\u00f3n, pero \u00e9sta es normalmente insignificante.</p> <p>Antes hemos comentado que cuando durante su ejecuci\u00f3n una tarea padre hace <code>join()</code> sobre una subtarea porque necesita esperar a que \u00e9sta termine su ejecuci\u00f3n, la tarea padre queda bloqueada y el hilo trabajador es asignada a otra tarea. Pero \u00bfa qu\u00e9 otra tarea?:</p> <ul> <li>Si, para cuando la tarea padre llama a <code>join()</code> sobre una subtarea, dicha subtarea a\u00fan no ha comenzado su ejecuci\u00f3n, dicha subtarea ser\u00e1 extra\u00edda de la pila y el hilo que antes estaba asignado a la tarea padre ser\u00e1 asignado a la subtarea, que comenzar\u00e1 su ejecuci\u00f3n.</li> <li>Si, para cuando la tarea padre llama a <code>join()</code> sobre una subtarea, dicha subtarea ya ha comenzado su ejecuci\u00f3n porque ha sido robada por otro hilo trabajador, el hilo que estaba asociado a la tarea padre extrae la siguiente tarea de la head de su cola de trabajo y la ejecuta en dicho hilo, o \"roba\" una tarea de la cola de trabajo de otro hilo, si su cola de trabajo est\u00e1 vac\u00eda, y as\u00ed sucesivamente, hasta que la subtarea sobre la que se hice <code>join()</code> termine su ejecuci\u00f3n en el hilo que la \"rob\u00f3\".</li> </ul> <p>Cada vez que el hilo termina de ejecutar una tarea, comprueba si la subtarea sobre la que hab\u00eda hecho <code>join()</code> ha termina su ejecuci\u00f3n, de manera que en el momento en el que eso sea cierto, en vez de obtener otra tarea de su cola de trabajo para ejecutarla (o robar otra tarea), contin\u00faa con la ejecuci\u00f3n de la tarea padre.</p>"},{"location":"bloque_v/tema_27/page-5/","title":"5 RecursiveAction","text":""},{"location":"bloque_v/tema_27/page-5/#proyecto-recursiveaction","title":"Proyecto RecursiveAction","text":"<p>En este proyecto implementaremos una tarea recursiva que consiste en incrementar en un determinado valor todos los elementos de un array. Si el rango de elementos a incrementar tiene menos de 10 valores, se realizar\u00e1 el incremento de manera secuencial. Si el rango de elementos a incrementar tiene 10 valores o m\u00e1s seguiremos una de las siguientes dos estrategias:</p> <ul> <li>Estrategia 1: Dividir el rango por la mitad y crear dos subtareas cada una de las cuales incremente un subrango aplicando recursivamente el mismo algoritmo anterior.</li> <li>Estrategia 2: Dividir el rango por la mitad y hacer que el primer subrango sea incrementado secuencialmente y crear una subtarea para el segundo subrango aplicando recursivamente el mismo algoritmo anterior.</li> </ul> MainIncrementTask <pre><code>import java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ForkJoinPool;\nclass Main {\npublic static void main(String[] args) throws InterruptedException, ExecutionException {\nnew Main().start();\n}\nprivate void start() throws InterruptedException, ExecutionException {\nint size = 1000;\nint increment = 5;\nint[] values = createArray(size);\nincrementSecuentially(values, increment);\nincrementInParallel(values, increment);\n}\nprivate void incrementSecuentially(int[] values, int increment) {\nlong start = System.currentTimeMillis();\nfor (int i = 0; i &lt; values.length; i++) {\nvalues[i] = values[i] + increment;\n}\nSystem.out.printf(\"Secuential increment done in %d millis\\n\", System.currentTimeMillis() - start);\n}\nprivate void incrementInParallel(int[] values, int increment) throws InterruptedException, ExecutionException {\nlong start = System.currentTimeMillis();\nIncrementTask incrementTask = new IncrementTask(values, 0, values.length, increment);\nForkJoinPool forkJoinPool = new ForkJoinPool();\nforkJoinPool.execute(incrementTask);\nincrementTask.get();\nSystem.out.printf(\"Parallel increment done in %d millis\\n\", System.currentTimeMillis() - start);\nSystem.out.printf(\"Work steal count: %d\\n\", forkJoinPool.getStealCount());\nforkJoinPool.shutdown();\n}\nprivate int[] createArray(int size) {\nint[] values = new int[size];\nfor (int i = 0; i &lt; size; i++) {\nvalues[i] = 10;\n}\nreturn values;\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.RecursiveAction;\npublic class IncrementTask extends RecursiveAction {\nprivate final DateTimeFormatter dateTimeFormatter =\nDateTimeFormatter.ofPattern(\"HH:mm:ss:SSS\");\nprivate final int[] values;\nprivate final int from;\nprivate final int to;\nprivate final int increment;\nIncrementTask(int[] values, int from, int to,\nint increment) {\nthis.values = values;\nthis.from = from;\nthis.to = to;\nthis.increment = increment;\n}\n@Override\nprotected void compute() {\n// If range is small enough update directly secuentially.\nif (to - from &lt; 10) {\nincrementValues(values, from, to, increment);\n} else {\napplyStrategy1(values, from, to, increment);\n//            applyStrategy2(values, from, to, increment);\n}\n}\nprivate void applyStrategy1(int[] values, int from, int to, int increment) {\nint pivot = (to + from) / 2;\nSystem.out.printf(\"%s - %s - [%d,%d) split in [%d,%d) y [%d,%d)\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\nfrom, to, from, pivot, pivot, to);\n// Create two subtasks, one for each half.\nIncrementTask subTask1 = new IncrementTask(values, from, pivot, increment);\nIncrementTask subTask2 = new IncrementTask(values, pivot, to, increment);\n// Fork and join them.\nsubTask1.fork();\nsubTask2.fork();\nsubTask1.join();\nsubTask2.join();\nSystem.out.printf(\"%s - %s - [%d, %d) and [%d, %d) joined. [%d, %d] done\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\nfrom, pivot, pivot, to, from, to);\n}\n@SuppressWarnings(\"unused\")\nprivate void applyStrategy2(int[] values, int from, int to, int increment) {\n// Split range in two.\nint pivot = (to + from) / 2;\nSystem.out.printf(\"%s - %s - [%d,%d) split in [%d,%d) y [%d,%d)\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\nfrom, to, from, pivot, pivot, to);\nIncrementTask subTask2 = new IncrementTask(values, pivot, to, increment);\nsubTask2.fork();\nincrementValues(values, from, pivot, increment);\nsubTask2.join();\nSystem.out.printf(\"%s - %s - [%d, %d) and [%d, %d) joined. [%d, %d] done\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\nfrom, pivot, pivot, to, from, to);\n}\nprivate void incrementValues(int[] values, int from, int to, int increment) {\nfor (int i = from; i &lt; to; i++) {\nvalues[i] = values[i] * (1 + increment);\n}\nSystem.out.printf(\"%s - %s - [%d, %d) done secuentially\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\nfrom, to);\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_27/page-6/","title":"6 RecursiveTask","text":""},{"location":"bloque_v/tema_27/page-6/#proyecto-recursivetask","title":"Proyecto RecursiveTask","text":"<p>En este proyecto implementaremos una tarea recursiva que consiste en sumar todos los elementos de un array. Si el rango de elementos a sumar tiene menos de 10 valores, se calcular\u00e1 la suma recorriendo el rango de manera secuencial. Si el rango de elementos a sumar tiene 10 valores o m\u00e1s, seguiremos una de las siguientes dos estrategias:</p> <ul> <li>Estrategia 1: Dividir el rango por la mitad y crear dos subtareas cada una de las cuales sume un subrango aplicando recursivamente el mismo algoritmo anterior.</li> <li>Estrategia 2: Dividir el rango por la mitad y hacer que el primer subrango sea sumado secuencialmente y crear una subtarea para el segundo subrango aplicando recursivamente el mismo algoritmo anterior.</li> </ul> MainSumTask <pre><code>import java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ForkJoinPool;\nimport java.util.concurrent.ThreadLocalRandom;\nclass Main {\npublic static void main(String[] args) throws InterruptedException, ExecutionException {\nnew Main().start();\n}\nprivate void start() throws InterruptedException, ExecutionException {\nint size = 1000;\nint[] values = createArray(size);\nfindSumSecuentially(values);\nfindSumInParallel(values);\n}\nprivate void findSumSecuentially(int[] values) {\nlong start = System.currentTimeMillis();\nlong sum = 0;\nfor (int value : values) {\nsum += value;\n}\nSystem.out.printf(\"Secuential sum done in %d millis with result %d\\n\", System.currentTimeMillis() - start, sum);\n}\nprivate void findSumInParallel(int[] values) throws InterruptedException, ExecutionException {\nlong start = System.currentTimeMillis();\nSumTask sumTask = new SumTask(values, 0, values.length);\nForkJoinPool forkJoinPool = new ForkJoinPool();\nlong max = forkJoinPool.invoke(sumTask);\nSystem.out.printf(\"Parallel sum done in %d millis with result %d\\n\", System.currentTimeMillis() - start, max);\nSystem.out.printf(\"Work steal count: %d\\n\", forkJoinPool.getStealCount());\nforkJoinPool.shutdown();\n}\nprivate int[] createArray(int size) {\nint[] values = new int[size];\nfor (int i = 0; i &lt; size; i++) {\nvalues[i] = ThreadLocalRandom.current().nextInt(100);\n}\nreturn values;\n}\n}\n</code></pre> <pre><code>import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.concurrent.RecursiveTask;\npublic class SumTask extends RecursiveTask&lt;Long&gt; {\nprivate final DateTimeFormatter dateTimeFormatter =\nDateTimeFormatter.ofPattern(\"HH:mm:ss:SSS\");\nprivate final int[] values;\nprivate final int from;\nprivate final int to;\nSumTask(int[] values, int from, int to) {\nthis.values = values;\nthis.from = from;\nthis.to = to;\n}\n@Override\nprotected Long compute() {\n// If range is small enough update directly secuentially.\nif (to - from &lt; 10) {\nreturn sum(values, from, to);\n} else {\nlong sum = applyStrategy1(values, from, to);\n//            long sum = applyStrategy2(values, from, to);\nreturn sum;\n}\n}\nprivate long applyStrategy1(int[] values, int from, int to) {\nint pivot = (to + from) / 2;\nSystem.out.printf(\"%s - %s - [%d,%d) split in [%d,%d) y [%d,%d)\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\nfrom, to, from, pivot, pivot, to);\nSumTask subTask1 = new SumTask(values, from, pivot);\nSumTask subTask2 = new SumTask(values, pivot, to);\nsubTask1.fork();\nsubTask2.fork();\nlong sum1 = subTask1.join();\nlong sum2 = subTask2.join();\nlong sum = sum1 + sum2;\nSystem.out.printf(\"%s - %s - [%d, %d) joined with %d\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\nfrom, pivot, sum1);\nSystem.out.printf(\"%s - %s - [%d, %d) joined with %d\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\npivot, to, sum2);\nSystem.out.printf(\"%s - %s - [%d, %d) done with %d\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\nfrom, to, sum);\nreturn sum;\n}\nprivate long applyStrategy2(int[] values, int from, int to) {\nint pivot = (to + from) / 2;\nSystem.out.printf(\"%s - %s - [%d,%d) split in [%d,%d) y [%d,%d)\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\nfrom, to, from, pivot, pivot, to);\nSumTask subTask2 = new SumTask(values, pivot, to);\nsubTask2.fork();\nlong sum1 = sum(values, from, pivot);\nlong sum2 = subTask2.join();\nlong sum = sum1 + sum2;\nSystem.out.printf(\"%s - %s - [%d, %d) joined with %d\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\npivot, to, sum2);\nSystem.out.printf(\"%s - %s - [%d, %d) done with %d\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\nfrom, to, sum);\nreturn sum;\n}\nprivate long sum(int[] values, int from, int to) {\nlong sum = 0;\nfor (int i = from; i &lt; to; i++) {\nsum += values[i];\n}\nSystem.out.printf(\"%s - %s - [%d, %d] done secuentially with %d\\n\",\nThread.currentThread().getName(),\ndateTimeFormatter.format(LocalTime.now()),\nfrom, to, sum);\nreturn sum;\n}\n}\n</code></pre>"},{"location":"bloque_v/tema_27/page-7/","title":"7 Common Fork-Join pool","text":""},{"location":"bloque_v/tema_27/page-7/#intro","title":"Intro","text":"<p>A partir de Java 8, la forma m\u00e1s conveniente de acceder a una instancia de <code>ForkJoinPool</code> es usar el m\u00e9todo est\u00e1tico <code>ForkJoinPool.commonPool()</code>.</p> <p>Como su nombre indica, esta llamada retorna una referencia al un objeto <code>ForkJoinPool</code> com\u00fan, predefinido por el sistema, que usa tantos hilos como n\u00facleos de procesamiento est\u00e9n disponibles.</p> <p>El uso del pool com\u00fan predefinido reduce el consumo de recursos, ya que no es necesaria la creaci\u00f3n de un thread pool independiente para cada tarea.</p> <p>Sin embargo, no siempre tiene por qu\u00e9 ser el pool id\u00f3neo. Por ejemplo, en el caso de tareas intensivas de entrada/salida, que van a ser bloqueadas en operaciones de E/S, ser\u00e1 interesante que el pool tuviera un mayor n\u00famero de hilos.</p> <p>Otro aspecto que debemos tener en cuenta es que el common fork join pool es com\u00fan a todas las aplicaciones, y, como veremos m\u00e1s adelante, es usado por defecto por otras api de Java, como los streams paralelos o CompletableFuture, por lo que puede que los hilos de dicho ejecutor est\u00e9n muy ocupados.</p>"},{"location":"bloque_v/tema_27/page-8/","title":"Ejercicios","text":"<p>Realiza un proyecto multihilo en Java haciendo uso del framework <code>ForkJoinPool</code> para buscar en un array de 100 elementos un n\u00famero. Cada elemento del array es un n\u00famero comprendido entre el 0 y el 255.</p>"}]}