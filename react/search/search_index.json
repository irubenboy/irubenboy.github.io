{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"tema_1/page-1/","title":"1 Introducci\u00f3n a React","text":""},{"location":"tema_1/page-1/#que-es-react","title":"\u00bfQu\u00e9 es react?","text":"<p>React es una biblioteca de Javascript utilizada para construir interfaces de usuario (UI) interactivas y componentes reutilizables en aplicaciones web. Fue desarrollada y es mantenida por Facebook, y es ampliamente  utilizada en la industria para crear aplicaciones web de una sola p\u00e1gina (Single Page Applications) y aplicaciones m\u00f3viles utilizando React Native.</p> <p>Algunas de las caracter\u00edsticas clave de React incluyen:</p> <ul> <li>Componentes: React se basa en el concepto de componentes, que son piezas independientes de la interfaz de usuario que pueden ser reutilizadas en diferentes partes de una aplicaci\u00f3n.</li> <li>Virtual DOM: React utiliza un Virtual DOM (DOM virtual) para optimizar el rendimiento. En lugar de actualizar directamente el DOM del navegador cada vez que cambia el estado de una aplicaci\u00f3n, React actualiza primero el Virtual DOM y luego compara las diferencias (diffing) para actualizar solo las partes del DOM que han cambiado. Esto mejora la eficiencia y la velocidad de la aplicaci\u00f3n.</li> <li>Unidireccionalidad de datos: React promueve el flujo de datos en una sola direcci\u00f3n, lo que significa que los datos fluyen desde un componente principal hacia sus componentes secundarios. Esto hace que sea m\u00e1s f\u00e1cil de entender y depurar c\u00f3mo los datos afectan a la interfaz de usuario.</li> <li>JSX: React utiliza una extensi\u00f3n de JavaScript llamada JSX (JavaScript XML) que permite definir la estructura de la interfaz de usuario de manera similar al HTML, pero dentro de JavaScript. Esto facilita la creaci\u00f3n de componentes de manera declarativa.</li> <li>Amplia comunidad y ecosistema: React tiene una comunidad activa y un amplio ecosistema de bibliotecas y herramientas complementarias que lo hacen a\u00fan m\u00e1s poderoso y vers\u00e1til.</li> </ul> <p>En resumen, React es una herramienta popular y poderosa para crear interfaces de usuario din\u00e1micas y eficientes en aplicaciones web y m\u00f3viles, y ha sido ampliamente adoptada en la industria del desarrollo de software.</p> <p>React es agn\u00f3stica de la plataforma, es decir, no est\u00e1 vinculado a una plataforma espec\u00edfica de desarrollo o de tecnolog\u00eda. React tiene la capacidad de trabajar de manera afectiva en diferentes entornos y plataformas.</p> <p>React es utilizado com\u00fanmente para construir interfaces de usuario en aplicaciones web, pero su dise\u00f1o modular y su arquitectura permiten que se utilice en una variedad de contextos. Por ejemplo, puede ser usado para construir aplicaciones web de una sola p\u00e1gina (SPA), aplicaciones m\u00f3viles, e incluso aplicaciones de escritorio.</p> <p>Uno de los principales motivos para usar React es que usa Javascript de forma declarativa, y no de forma imperativa, y adem\u00e1s est\u00e1 basado en componentes lo que permite reutilizar y escalar c\u00f3digo.</p>"},{"location":"tema_1/page-1/#por-que-react","title":"\u00bfPor qu\u00e9 React?","text":"<p>React fue lanzada por primera vez en 2013 y desde entonces ha experimentado un r\u00e1pido crecimiento en popularidad debido a su enfoque en la creaci\u00f3n de componentes reutilizables y su paradigma de programaci\u00f3n declarativa. Meta, la empresa detr\u00e1s de React, la utiliza en todos sus productos (Facebook, Instagram, Whatsapp, etc)</p> <p>Aunque al principio no se consideraba open source, Meta decidi\u00f3 liberar el c\u00f3digo fuente, pero a\u00fan as\u00ed tiene una licencia permisiva.</p> <p>React es una de las librer\u00edas m\u00e1s demandadas y con mayor salida laboral. Adem\u00e1s, en su versi\u00f3n React Native permite crear aplicaciones para m\u00f3viles, y tambi\u00e9n aplicaciones para escritorio Windows y macOS.</p> <p>React tiene un gran soporte y es un gran ecosistema, adem\u00e1s te ayudar\u00e1, en caso de que quieras migrar, a otras librer\u00edas o frameworks como Angular, Vue y Svelt. Tambi\u00e9n, cuenta con una API estable (en varios idiomas) y tiene un gran soporte ya que cuenta con una gran comunidad.</p>"},{"location":"tema_1/page-1/#javascript-vs-react","title":"Javascript vs React","text":"<p>El uso de Javascript nativo (vainilla Javascript) es diferente a como se usa en React. En el primer caso, se usa de forma imperativo, es decir, indica COMO lo tiene que hacer, lo que imposibilita la escalabilidad, mientras que en React, se usa de forma declarativa.</p> <p>React define un elemento ra\u00edz, el cual contendr\u00e1 toda el contenido de nuestra aplicaci\u00f3n. Dicha ra\u00edz estar\u00e1 formada por diferentes componentes, con los elementos que se desee mostrar.</p> <p>Importante</p> <p>Es importante resaltar que en React TODO se considera un componente, desde el elemento m\u00e1s primario hasta el elemento m\u00e1s compuesto.</p> <p>React recibe los diferentes elementos que desea renderizar. La renderizaci\u00f3n es el proceso de generar la representaci\u00f3n visual de un elemento o conjunto de elementos para que pueda ser percibido por los usuarios.</p> <p>Veamos un ejemplo en el que se renderice un bot\u00f3n con javascript nativo. Para ello, necesitamos un elemento HTML:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;&lt;/title&gt;\n&lt;style&gt;\nbutton {\nbackground-color: #09f;\ncolor: #fff;\nborder: 0;\npadding: 4px 8px;\nfont-size: 18px;\ncursor: pointer;\n}\nbody {\nbackground-color: #222;\ncolor: #f0f0f0;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;button data-id=\"123\"&gt;Me gusta&lt;/button&gt;\n&lt;script&gt;\n// Recuperamos el bot\u00f3n\nconst button = document.querySelector('button')\n// al hacer click en el bot\u00f3n, tenemos que ejecutar una funci\u00f3n\nbutton.addEventListener('click', function () {\n// recuperar el id del atributo del HTML\nconst id = button.getAttribute('data-id')\n// llamar a un servicio para actualizar si me gusta\n// toggleLike(id) // no necesario\nif (button.classList.contains('liked')) {\nbutton.classList.remove('liked')\nbutton.innerText = 'Me gusta'\n} else {\nbutton.classList.add('liked')\nbutton.innerText = 'Quitar me gusta'\n}\n})\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>En el ejemplo anterior, podemos observamos como tenemos un elemento HTML que representa un bot\u00f3n. Al hacer clic en ese bot\u00f3n, recuperamos su id (data-id) y modificamos su contenido de me gusta a no me gusta o viceversa. Pero, \u00bfy si a\u00f1adimos m\u00e1s botones al c\u00f3digo HTML?:</p> <pre><code>&lt;!-- ... --&gt;\n&lt;button data-id=\"123\"&gt;Me gusta&lt;/button&gt;\n&lt;button data-id=\"456\"&gt;Me gusta&lt;/button&gt;\n&lt;button data-id=\"789\"&gt;Me gusta&lt;/button&gt;\n&lt;script&gt;\n// al hacer click en el bot\u00f3n, tenemos que ejecutar una funci\u00f3n\nbutton.addEventListener('click', function () {\n// recuperar el id del atributo del HTML\nconst id = button.getAttribute('data-id')\n// llamar a un servicio para actualizar si me gusta\n// toggleLike(id) // no necesario\nif (button.classList.contains('liked')) {\nbutton.classList.remove('liked')\nbutton.innerText = 'Me gusta'\n} else {\nbutton.classList.add('liked')\nbutton.innerText = 'Quitar me gusta'\n}\n})\n&lt;/script&gt;\n</code></pre> <p>En este caso, el c\u00f3digo javascript no funcionar\u00e1, por lo que habr\u00e1 que modificar el c\u00f3digo javascript para implementar este cambio:</p> <pre><code>&lt;!-- ... --&gt;\n&lt;button data-id=\"123\"&gt;Me gusta&lt;/button&gt;\n&lt;button data-id=\"456\"&gt;Me gusta&lt;/button&gt;\n&lt;button data-id=\"789\"&gt;Me gusta&lt;/button&gt;\n&lt;script&gt;\n// Recuperamos todos los botones\nconst buttons = document.querySelectorAll('button')\nbuttons.forEach(button =&gt; {\n// al hacer click en el bot\u00f3n, tenemos que ejecutar una funci\u00f3n\nbutton.addEventListener('click', function () {\n// recuperar el id del atributo del HTML\nconst id = button.getAttribute('data-id')\n// llamar a un servicio para actualizar si me gusta\n// toggleLike(id) // no necesario\nif (button.classList.contains('liked')) {\nbutton.classList.remove('liked')\nbutton.innerText = 'Me gusta'\n} else {\nbutton.classList.add('liked')\nbutton.innerText = 'Quitar me gusta'\n}\n})\n})\n&lt;/script&gt;\n</code></pre> <p>Esto a la larga puede convertirse un trabajo pesado y no es nada eficiente si queremos crear diferentes elemento y cada uno con una funcionalidad diferente. Para eso y m\u00e1s, React nos facilitar\u00e1 la tarea.</p> <p>Info</p> <p>En este enlace, https://es.react.dev/, se encuentra la API de React oficial y en espa\u00f1ol.</p>"},{"location":"tema_1/page-1/#trabajando-con-react","title":"Trabajando con React","text":"<p>Para trabajar con React, ser\u00e1 necesario usar la librer\u00eda <code>React</code>, que contiene los m\u00e9todos para crear elementos y componentes, y la librer\u00eda <code>ReactDOM</code> para poder trabajar con el DOM de forma sencilla.</p> <p>En primer lugar, para poder trabajar con React necesito un fichero HTML que defina el elemento ra\u00edz de nuestra aplicaci\u00f3n:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n&lt;title&gt;React&lt;/title&gt;\n&lt;style&gt;\nbutton {\nbackground-color: #09f;\ncolor: #fff;\nborder: 0;\npadding: 4px 8px;\nfont-size: 18px;\ncursor: pointer;\n}\nbody {\nbackground-color: #222;\ncolor: #f0f0f0;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"app\"&gt;&lt;/div&gt;\n&lt;script src=\"react.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>En este ejemplo, tenemos un contenedor que hemos definido con la clase <code>app</code>. Desde nuestro archivo javascript, obtenemos ese elemento HTML que funciona como ra\u00edz y con el m\u00e9todo <code>createRoot(element)</code>, de la librer\u00eda <code>ReactDOM</code>:</p> <pre><code>import ReactDOM from \"https://esm.sh/react-dom@18.2.0/client\"\nimport React from \"https://esm.sh/react@18.2.0\"\nconst app = document.getElementById('app') // Obtenemos el elemento HTML que funcionar\u00e1 como ra\u00edz\nconst root = ReactDOM.createRoot(app) // Indicamos que elemento es la ra\u00edz\n</code></pre> <p>Para poder renderizar el contenido usamos el m\u00e9todo <code>render(elemento)</code> de la librer\u00eda <code>React</code>:</p> <pre><code>import ReactDOM from \"https://esm.sh/react-dom@18.2.0/client\"\nimport React from \"https://esm.sh/react@18.2.0\"\nconst app = document.getElementById('app') // Obtenemos el elemento HTML que funcionar\u00e1 como ra\u00edz\nconst root = ReactDOM.createRoot(app) // Indicamos que elemento es la ra\u00edz\nroot.render('Hola mundo')\n</code></pre>"},{"location":"tema_1/page-1/#renderizar-elementos","title":"Renderizar elementos","text":"<p>Si se intenta renderizar un elemento HTML sin comillas (\"\"), eso no funcionar\u00e1 ya que dar\u00e1 un error y no se renderizar\u00e1, y si se usa con las comillas los renderizar\u00e1 como textos. Los elementos HTML NO se puede renderizar de forma directa, habr\u00e1 que crearlos primero como elementos en React y luego ya se podr\u00e1n renderizar.</p> <p>Para poder crear elementos en React, existe la funci\u00f3n <code>createElement()</code> que recibe tres par\u00e1metros:</p> <ul> <li>El primero de ellos, hace referencia al elemento HTML que debe crear.</li> <li>El segundo, es un objeto con los atributos del elemento, como por ejemplo, su clase o su id.</li> <li>El tercero, es el contenido de dicho elemento. Puede ser un simple dato primitivo (por ejemplo una cadena), o uno o varios elementos de React.</li> </ul> <pre><code>import ReactDOM from \"https://esm.sh/react-dom@18.2.0/client\"\nimport React from \"https://esm.sh/react@18.2.0\"\nconst app = document.getElementById('app') // Obtenemos el elemento HTML que funcionar\u00e1 como ra\u00edz\nconst root = ReactDOM.createRoot(app) // Indicamos que elemento es la ra\u00edz\nconst button = React.createElement('button', {\n'data-id': 123\n}, 'Button')\nroot.render(button)\n</code></pre> <p>La funci\u00f3n <code>render</code> solo puede renderizar un \u00fanico elemento a la vez. Si quisi\u00e9ramos renderizar por ejemplo varios botones, ser\u00eda necesario envolverlos en un elemento superior y renderizar dicho elemento:</p> <pre><code>import ReactDOM from \"https://esm.sh/react-dom@18.2.0/client\"\nimport React from \"https://esm.sh/react@18.2.0\"\nconst app = document.getElementById('app') // Obtenemos el elemento HTML que funcionar\u00e1 como ra\u00edz\nconst root = ReactDOM.createRoot(app) // Indicamos que elemento es la ra\u00edz\nconst button1 = React.createElement('button', {\n'data-id': 123\n}, 'Button')\nconst button2 = React.createElement('button', {\n'data-id': 123\n}, 'Button')\nconst button3 = React.createElement('button', {\n'data-id': 123\n}, 'Button')\nconst wrapped = React.createElement('div', null, [button1, button2, button3]);\nroot.render(wrapped)\n</code></pre>"},{"location":"tema_1/page-1/#react-fragment","title":"React Fragment","text":"<p>React a la hora de renderizar los elementos, los transforma a elementos de HTML, por lo que los a\u00f1ade al \u00e1rbol DOM de la p\u00e1gina. De esa forma, el ejemplo anterior pasar\u00eda a ser de la siguiente forma:</p> <pre><code>html\n    head\n        title\n        metas\n    body\n        div.root\n            div\n                button\n                button\n                button\n</code></pre> <p>De forma innecesario ha creado un div para envolver a los tres botones. Esta peque\u00f1a molestia puede provocar errores a cu\u00e1nto los estilos de CSS o incluso en la interactividad con el usuario, sino se tiene en cuenta. Pero, si tenemos que envolver los elementos React en un elemento superior para poder renderizar un solo elemento, \u00bfc\u00f3mo podemos evitar este peque\u00f1o inconveniente?</p> <p>React posee un elemento que puede ser usado como elemento superior pero a la hora de transformarlo a elementos HTML y a\u00f1adirlos al DOM, no crea un elemento innecesario. Este elemento se conoce como <code>Fragment</code>, por lo que de esta manera podemos hacer el ejemplo anterior de una forma mucho m\u00e1s limpia:</p> <pre><code>import ReactDOM from \"https://esm.sh/react-dom@18.2.0/client\"\nimport React from \"https://esm.sh/react@18.2.0\"\nconst app = document.getElementById('app') // Obtenemos el elemento HTML que funcionar\u00e1 como ra\u00edz\nconst root = ReactDOM.createRoot(app) // Indicamos que elemento es la ra\u00edz\nconst button1 = React.createElement('button', {\n'data-id': 123\n}, 'Button')\nconst button2 = React.createElement('button', {\n'data-id': 123\n}, 'Button')\nconst button3 = React.createElement('button', {\n'data-id': 123\n}, 'Button')\nconst wrapped = React.createElement(React.Fragment, null, [button1, button2, button3]);\nroot.render(wrapped)\n</code></pre> <p>De esta manera, el \u00e1rbol DOM queda m\u00e1s limpio y precavido de incidentes:</p> <pre><code>html\n    head\n        title\n        metas\n    body\n        div.root\n           button\n           button\n           button\n</code></pre> <p>A\u00fan as\u00ed, los ejemplos que hemos ido desarrollando usan una peculiaridad que quer\u00edamos evitar, la imperatividad. Para poder evitarla, ser\u00e1 necesario hacer JSX y crearnos un proyecto que nos facilite el trabajo.</p>"},{"location":"tema_1/page-1/#proyecto-react","title":"Proyecto React","text":"<p>Para poder hacer uso de la librer\u00eda ser\u00e1 necesario tener instalado NodeJS y un manejador de paquetes (npn, yarn, etc)</p> <p>Podemos crear react a trav\u00e9s de comandos diferentes: <code>npx create-react-app</code> o haciendo uso de <code>vite</code>. La primera opci\u00f3n es la forma nativa y recomendada por React en su API, pero cierto es que es una forma m\u00e1s anticuada y mucho m\u00e1s lenta</p> <pre><code>npx create-react-app example\ncd example\n</code></pre> <p>Para ejecutar el proyecto se usa el siguiente comando:</p> <pre><code>npm start\n</code></pre> <p>Vite ha creado un comando que hace que la creaci\u00f3n de un proyecto sea m\u00e1s sencillo y m\u00e1s r\u00e1pido:</p> <pre><code>npm  create vite@latest\ncd project\n</code></pre> <p>Para poder ejecutar el proyecto creado:</p> <pre><code>npm run dev\n</code></pre> <p>Una vez ejecutado el navegador predeterminado deber\u00e1 ser ejecutado con el proyecto en marcha. En caso de que no lo haga, se puede acceder a \u00e9l a trav\u00e9s de la URL http://localhost:<code>PORT</code>, donde el valor del puerto ser\u00e1 por defecto 3000, en caso de usar el comando oficial, y 5173 si se usa el gestor de vite.</p> <p>Adem\u00e1s al ejecutar el comando de creaci\u00f3n, se habr\u00e1 creado una estructura de proyecto similar a la siguiente (varia dependiendo de la versi\u00f3n del proyecto creado):</p> <p> Figura I - Estructura del proyecto</p> <p>Los ficheros y carpetas m\u00e1s importantes son:</p> <ul> <li>Carpeta node_modules: Esta carpeta contiene todas las librer\u00edas de React y las que vayamos instalando a trav\u00e9s de Node JS.</li> <li>public: En esta carpeta aparecen los archivos p\u00fablicos del proyecto, as\u00ed como las im\u00e1genes, las plantillas html, etc.</li> <li>src: Esta carpeta es la carpeta principal del proyecto y contiene todos los archivos necesarios para el desarrollo de nuestro proyecto, as\u00ed como los componentes y el archivo principal (<code>index.js</code> para el comando oficial y <code>main.jsx</code> para vite).</li> </ul> index.htmlindex.js/main.jsx <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\" /&gt;\n&lt;link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" /&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;\n&lt;meta name=\"theme-color\" content=\"#000000\" /&gt;\n&lt;meta\nname=\"description\"\ncontent=\"Web site created using create-react-app\"\n/&gt;\n&lt;link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" /&gt;\n&lt;!--\n      manifest.json provides metadata used when your web app is installed on a\n      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/\n    --&gt;\n&lt;link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" /&gt;\n&lt;!--\n      Notice the use of %PUBLIC_URL% in the tags above.\n      It will be replaced with the URL of the `public` folder during the build.\n      Only files inside the `public` folder can be referenced from the HTML.\n      Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\n      work correctly both with client-side routing and a non-root public URL.\n      Learn how to configure a non-root public URL by running `npm run build`.\n    --&gt;\n&lt;title&gt;React App&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;noscript&gt;You need to enable JavaScript to run this app.&lt;/noscript&gt;\n&lt;div id=\"root\"&gt;&lt;/div&gt;\n&lt;!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the &lt;body&gt; tag.\n      To begin the development, run `npm start` or `yarn start`.\n      To create a production bundle, use `npm run build` or `yarn build`.\n    --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals'; // (1)!\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n&lt;React.StrictMode&gt;\n&lt;App /&gt;\n&lt;/React.StrictMode&gt;\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: &lt;https://bit.ly/CRA-vitals&gt;\nreportWebVitals(); // (1)!\n</code></pre> <ol> <li>Estas l\u00edneas han de ser eliminadas en caso de que no se vaya a usar los ficheros reportWebVitals.js y setUp.js</li> <li>Estas l\u00edneas han de ser eliminadas en caso de que no se vaya a usar los ficheros reportWebVitals.js y setUp.js</li> </ol>"},{"location":"tema_1/page-2/","title":"2 JSX","text":""},{"location":"tema_1/page-2/#introduccion","title":"Introducci\u00f3n","text":"<p>JSX es una extensi\u00f3n de sintaxis para JavaScript que permite escribir marcado similar a HTML dentro de una archivo JavaScript. Aunque hay otras formas de escribir componentes, la mayor\u00eda de los desarrolladores de React prefieren la concisi\u00f3n de JSX, y la mayor\u00eda de las bases de c\u00f3digo lo usan.</p> <pre><code>const element = &lt;h1&gt;Soy un elemento escrito en JSX&lt;/h1&gt;\n</code></pre> <p>Esta l\u00ednea de c\u00f3digo ser\u00eda equivalente a lo siguiente haciendo uso de React imperativo:</p> <pre><code>const element = React.createElement(h1, null, \"Soy un elemento escrito en JSX\")\n</code></pre>"},{"location":"tema_1/page-2/#poniendo-marcado-dentro-de-javascript","title":"Poniendo marcado dentro de Javascript","text":"<p>La Web se ha construido com\u00fanmente sobre archivos HTML, CSS y Javascript, de forma separada o en un \u00fanico fichero HTML. De esta forma, el contenido de la p\u00e1gina queda marcado con HTML, los estilos est\u00e1n indicados con CSS y la l\u00f3gica y funcionalidad de la p\u00e1gina en Javascript</p> <p>Al volverse las web m\u00e1s interactivas, el contenido de un p\u00e1gina se ve\u00eda determinado cada vez m\u00e1s por la l\u00f3gica, por ejemplo, al hacer clic en diferentes botones se muestra diferentes contenidos dentro de la misma p\u00e1gina.</p> <p>Esto supone una gran desventaja, y es que al no estar relacionados pierde seguridad y a\u00f1ade m\u00e1s trabajo y funcionalidad. Para ello, se implemento JSX.</p> <p>Los componentes de React contienen una funci\u00f3n de Javascript que puede contener alg\u00fan marcado que React muestra en el navegador. Dichos componentes usan la extensi\u00f3n <code>.jxs</code></p> <p>La sintaxis de JSX es muy parecida a la de HTML, pero con la diferencia que \u00e9sta es m\u00e1s estricta y puede mostrar informaci\u00f3n din\u00e1mica de una forma sencilla y segura.</p> <p>Note</p> <p>JSX y React son independientes. A menudo se usan en conjunto, pero se pueden usar de forma separada. JSX es una extensi\u00f3n de sintaxis, mientras React es una biblioteca de JavaScript.</p>"},{"location":"tema_1/page-2/#convertir-html-a-jsx","title":"Convertir HTML a JSX","text":"<p>Si queremos convertir un HTML a un JSX, no se puede hacer de forma literal, es decir, no podemos copiar los elementos HTML en un fichero JSX, ya que es m\u00e1s estricto y requiere de ciertas modificaciones. Por ejemplo, en el siguiente c\u00f3digo, dar\u00e1 un error en caso de querer ejecutarlo:</p> HTMLJSX <pre><code>&lt;h1&gt;Tareas Pendientes de Hedy Lamarr&lt;/h1&gt;\n&lt;img\nsrc=\"&lt;https://i.imgur.com/yXOvdOSs.jpg&gt;\"\nalt=\"Hedy Lamarr\"\nclass=\"photo\"\n&gt;\n&lt;ul&gt;\n&lt;li&gt;Inventar nuevo sem\u00e1foro\n    &lt;li&gt;Ensayar la escena de la pel\u00edcula\n    &lt;li&gt;Mejorar la tecnolog\u00eda del espectro\n&lt;/ul&gt;\n</code></pre> <pre><code>const element = // \u274c\u274c\u00a1Esto no funciona!\u274c\u274c\n&lt;h1&gt;Tareas Pendientes Hedy Lammar&lt;/h1&gt;\n&lt;img\nsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"\nalt=\"Hedy Lamarr\"\nclass=\"photo\"\n&gt;\n&lt;ul&gt;\n&lt;li&gt;Inventar nuevo sem\u00e1foro\n&lt;li&gt;Ensayar la escena de la pel\u00edcula\n&lt;li&gt;Mejorar la tecnolog\u00eda del espectro\n&lt;/ul&gt;\n</code></pre> <p>Para convertir un HTML a un JSX hay que seguir ciertas reglas de sintaxis:</p> <ol> <li> <p>Devolver un solo elemento ra\u00edz. Para devolver m\u00faltiples elementos de un componente, envu\u00e9lvelos con solo una etiqueta principal.</p> <pre><code>&lt;div&gt;\n&lt;h1&gt;Tareas pendientes Hedy Lammar&lt;/h1&gt;\n&lt;img src=\"https://i.imgur.com/yXOvdOSs.jpg\" alt=\"Hedy Lamarr\" class=\"photo\"\n&gt;\n&lt;ul&gt;\n//...\n&lt;/ul&gt;\n&lt;/div&gt;\n</code></pre> <p>En caso de que no quieras crear un elemento <code>div</code> para englobar el resto de elementos puedes hacer uso del Fragment, como hemos visto anteriormente.</p> <pre><code>&lt;React.Fragment&gt;\n&lt;h1&gt;Tareas pendientes Hedy Lammar&lt;/h1&gt;\n&lt;img\nsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"\nalt=\"Hedy Lamarr\"\nclass=\"photo\"\n&gt;\n&lt;ul&gt;\n//...\n&lt;/ul&gt;\n&lt;/React.Fragment&gt;\n</code></pre> <p>A la hora de usarlo con JSX no es necesario indicar <code>React.Fragment</code>, sino que se puede usar las etiquetas vac\u00edas <code>&lt;&gt;</code>:</p> <pre><code>&lt;&gt;\n&lt;h1&gt;Tareas pendientes Hedy Lammar&lt;/h1&gt;\n&lt;img\nsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"\nalt=\"Hedy Lamarr\"\nclass=\"photo\"\n&gt;\n&lt;ul&gt;\n//...\n&lt;/ul&gt;\n&lt;/&gt;\n</code></pre> <p>Warning</p> <p>JSX parece HTML, pero por debajo se transforma en objetos planos de JavaScript. No puedes devolver dos objetos desde una funci\u00f3n sin envolverlos en un array. Esto explica por qu\u00e9 tampoco puedes devolver dos etiquetas JSX sin envolverlas en otra etiqueta o Fragmento.</p> </li> <li> <p>Cerrar todas las etiquetas. JSX requiere que todas las etiquetas se cierren de forma expl\u00edcita, as\u00ed c\u00f3mo las etiquetas de cierre autom\u00e1tico como <code>&lt;img&gt;</code> deben convertirse en <code>&lt;img/&gt;</code>, y las etiquetas envolventes deben ser cerradas, como<code>&lt;li&gt;&lt;/li&gt;</code></p> <pre><code>&lt;&gt;\n&lt;h1&gt;Tareas Pendientes&lt;/h1&gt;\n&lt;img\nsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"\nalt=\"Hedy Lamarr\"\nclass=\"photo\"\n/&gt;\n&lt;ul&gt;\n&lt;li&gt;Inventar nuevo sem\u00e1foro&lt;/li&gt;\n&lt;li&gt;Ensayar la escena de la pel\u00edcula&lt;/li&gt;\n&lt;li&gt;Mejorar la tecnolog\u00eda del espectro&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/&gt;\n</code></pre> </li> <li> <p>Uso de lowerCamelCase: JSX se convierte en Javascript, por lo que los atributos de una etiqueta se convertir\u00e1n en keys de objetos Javascript as\u00ed como en variables. \u00c9sta tiene limitaciones en los nombres de las variables, como por ejemplo, no admite guiones ni puede contener palabras reservadas. Para evitar estos errores, los nombre de los atributos tendr\u00e1n que ser usados con la anotaci\u00f3n lowerCamelCase, y en caso de las palabras reservadas, como por ejemplo <code>class</code> tiene que haber un equivalente parecido como <code>className</code>. De esta forma, por ejemplo el atributo <code>stroke-width</code> pasar\u00e1 a ser <code>strokeWidth</code>.</p> <pre><code>//...\n&lt;img\nsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"\nalt=\"Hedy Lamarr\"\nclassName=\"photo\"\n/&gt;\n//...\n</code></pre> <p>Info</p> <p>Puedes encontrar todos estos atributos en la lista de props de los componentes DOM</p> </li> </ol> <p>Una vez realizado estos cambios nuestro HTML puede ser convertido exitosamente a JSX:</p> <pre><code>const elemento = &lt;&gt;\n// \u2705\u2705\u00a1Esto ya funciona!\u2705\u2705\n&lt;h1&gt;Tareas Pendientes Hedy Lammar&lt;/h1&gt;\n&lt;img\nsrc=\"https://i.imgur.com/yXOvdOSs.jpg\"\nalt=\"Hedy Lamarr\"\nclassName=\"photo\"\n/&gt;\n&lt;ul&gt;\n&lt;li&gt;Inventar nuevo sem\u00e1foro&lt;/li&gt;\n&lt;li&gt;Ensayar la escena de la pel\u00edcula&lt;/li&gt;\n&lt;li&gt;Mejorar la tecnolog\u00eda del espectro&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/&gt;\n</code></pre> <p>Para a\u00f1adir c\u00f3digo Javascript dentro de los elementos JSX es necesario envolverlos en llaves <code>{}</code>:</p> <pre><code>const user = \"R\"\n&lt;h1&gt;Hello {user}&lt;/h1&gt;\n</code></pre> <p>Info</p> <p>Tambi\u00e9n puedes usar un convertidor online. Aunque es aconsejable ir practic\u00e1ndolo primero.</p>"},{"location":"tema_1/page-2/#expresiones","title":"Expresiones","text":"<p>Si queremos valuar alguna expresi\u00f3n en un elemento JSX ser\u00e1 necesario el uso de llaves <code>{}</code>:</p> <pre><code>const name = number % 2 == 0 ? 'isEven' : 'isOdd'\nconst element = &lt;h1 className={name}&gt;Este elemento tiene una clase llamada {name}&lt;/h1&gt;\n</code></pre> <p>Incluso se puede evitar la creaci\u00f3n de la variable:</p> <pre><code>const element = &lt;h1 className={number % 2 == 0 ? 'isEven' : 'isOdd'}&gt;Este elemento tiene una clase llamada {number % 2 == 0 ? 'isEven' : 'isOdd'}&lt;/h1&gt;\n</code></pre>"},{"location":"tema_1/page-3/","title":"3 Componentes","text":""},{"location":"tema_1/page-3/#introduccion","title":"Introducci\u00f3n","text":"<p>Un componente es un funci\u00f3n renderizadora que puede ser reutilizada en otros componentes. Pueden estar separados en diferentes ficheros o estar incluidos en el mismo fichero.</p> <p>Un componente es una funci\u00f3n que devuelve c\u00f3digo JSX, por lo que se puede crear de forma habitual o de forma arrow functions:</p> <pre><code>const MyFirstComponent = () =&gt; {\nreturn (\n&lt;&gt;\n&lt;h2&gt;This is my first component&lt;/h2&gt;\n&lt;div&gt;This is my first component&lt;/div&gt;\n&lt;/&gt;\n)\n}\n</code></pre> <p>La ventaja de usar componentes es que se puede reutilizar y escalar el c\u00f3digo de forma sencilla y segura. Por ejemplo, la p\u00e1gina web de twitter contiene much\u00edsimos elementos tweets, en ese caso, ser\u00eda l\u00f3gico pensar que cada tweet es un componente que recibe diferente tipo de informaci\u00f3n.</p>"},{"location":"tema_1/page-3/#nomenclatura","title":"Nomenclatura","text":"<p>Los componentes est\u00e1n obligados a ser escritos en PascalCase (UpperCamelCase). React entiende a los elementos escrito de en min\u00fasculas como elementos HTML, por lo que si un componente est\u00e1 escrito de esa forma nunca lo reconocer\u00e1 como tal, sino como un elemento HTML, incluso si el elemento no existe, pero como el cat\u00e1logo HTML es tan amplio y puede seguir creciendo con el paso de los a\u00f1os, React no tiene forma de diferencias entre un componente y elemento HTML.</p> <pre><code>function myComponente() {\n// \u274c\u274c ESTO NO SE HACE\n}\nfunction MyComponents(){\n// \u2705\u2705 ESTA ES LA FORMA CORRECTA\n}\n</code></pre>"},{"location":"tema_1/page-3/#componentes-multiples","title":"Componentes m\u00faltiples","text":"<p>Un componente, al ser reutilizable, puede ser usado en varias ocasiones. Por ejemplo, el componente anterior puede ser usado en otro componente:</p> <pre><code>const App = () =&gt; {\nreturn (\n&lt;&gt;\n&lt;h1&gt;Esta es mi app&lt;/h1&gt;\n&lt;MyFirstComponent /&gt;\n&lt;MyFirstComponent /&gt;\n&lt;MyFirstComponent /&gt;\n&lt;/&gt;\n)\n}\n</code></pre> <p>A su vez, cada componente puede llamar otros componentes, generando as\u00ed un gran \u00e1rbol de componentes que puede interactuar entre ellos, facilit\u00e1ndonos as\u00ed el desarrollo de nuestra aplicaci\u00f3n web.</p>"},{"location":"tema_1/page-3/#atributos-de-los-componentes","title":"Atributos de los componentes","text":"<p>Para poder pasar datos a los componentes hacemos usos de los llamados props. Un props es un par\u00e1metro que se a\u00f1ade a la funci\u00f3n principal del componente e indica que permite recibir datos desde fuera de \u00e9l.</p> <pre><code>const MyComponent = (props) =&gt; {\n//...\n}\n</code></pre> <p>Dicho par\u00e1metro recibe un objeto que tiene como campos a los correspondientes que el usuario ha definido en la llamada del componente.</p> <pre><code>const App = () =&gt; {\nreturn (\n&lt;&gt;\n&lt;h1&gt;Hola, bienvenido&lt;/h1&gt;\n&lt;MyComponent name=\"Rub\u00e9n\"/&gt;\n&lt;/&gt;\n)\n}\nconst MyComponent = (props) =&gt; {\nreturn (\n&lt;span&gt;Este es tu usuario {props.name}&lt;/span&gt;\n)\n}\n</code></pre> <p>Importante</p> <p>Es importante recalcar que el nombre de los componentes deben estar en may\u00fasculas capitalizada si no React los interpretar\u00e1 como c\u00f3digo HTML y mostrar\u00e1 un c\u00f3digo inexistente completamente vac\u00edo.</p> <p>Es importante destacar que el valor de los componente vayan entre comillas si se trata de un dato de tipo cadena, por el contrario, ya sea de otro tipo de dato u otro componente deber\u00eda usarse entre llave <code>{}</code>:</p> <pre><code>const App = () =&gt; {\nreturn (\n&lt;&gt;\n&lt;h1&gt;Hola, bienvenido&lt;/h1&gt;\n&lt;MyComponent name=\"Rub\u00e9n\" isTrue={true} number={2} otherComponent={&lt;MyComponent/&gt;} /&gt;\n&lt;/&gt;\n)\n}\n</code></pre> <p>Si el tipo de atributo que va a recibir el componente es booleano, se puede evitar el <code>param={true}</code> y poner directamente <code>param</code> como los atributos en HTML, por lo contrario si el valor es false se debe seguir usando las llaves <code>{}</code>:</p> <pre><code>const App = () =&gt; {\nreturn (\n&lt;&gt;\n&lt;h1&gt;Hola, bienvenido&lt;/h1&gt;\n&lt;MyComponent name=\"Rub\u00e9n\" isTrue number={2} otherComponent={&lt;MyComponent/&gt;} /&gt;\n&lt;/&gt;\n)\n}\n</code></pre> <p>Los props de los componentes tambi\u00e9n pueden ser pasados como un objeto nombrado para una mayor seguridad, incluso se puede indicar alg\u00fan valor por defecto para cada uno de ellos:</p> <pre><code>const MyComponent = ({name = ''}) =&gt; {\n//...\n}\n</code></pre> <p>OJO</p> <p>Si al componente se le indica un prop y \u00e9ste es usado por el componente, pero a la hora de usarlo no se indica, su valor por defecto es undefined y si esto no es controlado por el componente en ciertas ocasiones puede dar lugar a resultados no deseados.</p> <p>Se recomienda que los props en React sean inmutables, es decir, que no se puedan cambiar su valor dentro de ellos, para as\u00ed poder evitar problemas a la hora de escalar el componente. En su lugar se deber\u00eda crear un variable que contenga el valor de prop, y en caso de modificaci\u00f3n de modifique dicha variable:</p> <pre><code>const MyComponent = ({name = '', age}) =&gt; {\n// age = 30 \u274c\u274c No se deber\u00eda hacer esto\nconst copyAge = age // \u2705\u2705 En su lugar, se debe hacer esto\n}\n</code></pre> <p>Diferencia entre elemento y componente</p> <p>Llegados a este punto es importante recalcar que un elemento de React es lo que se renderiza para que interact\u00fae con el usuario, mientras que un componente es un funci\u00f3n factor\u00eda que se encarga de crear los elementos.</p> <p>Por otro lugar, se puede pasar los props de los componentes como una variable haciendo uso del spread-operator <code>...</code>, de esta forma har\u00e1 la transformaci\u00f3n correcto a varios props en lugar de un prop cuyo valor sea un objeto:</p> <pre><code>const props = {isFollowing, name='Sergio'}\nconst App = () =&gt; {\nreturn (\n&lt;&gt;\n&lt;h1&gt;Hola, bienvenido&lt;/h1&gt;\n&lt;MyComponent props /&gt; // (1)! \n&lt;MyComponent {..props} /&gt; // (2)!\n&lt;/&gt;\n)\n}\n</code></pre> <ol> <li>\u274c\u274c De est\u00e1 forma crea un \u00fanico prop cuyo valor es el objeto</li> <li>\u2705\u2705 De est\u00e1 forma a\u00f1ade a los props, un prop por cada elemento del objeto</li> </ol>"},{"location":"tema_1/page-3/#hijos-de-un-componente","title":"Hijos de un componente","text":"<p>Un componente puede contener hijos y para ello debe recibir un prop llamado <code>children</code>:</p> <pre><code>const MyComponent = ({children, name = '', age}) =&gt; {\nreturn (\n&lt;div&gt;\n{children}\n&lt;/div&gt;\n)\n}\nconst App = () =&gt; {\n&lt;MyComponent&gt;\n&lt;h1&gt;Esto es un hijo del componente MyComponent&lt;/h1&gt;\n&lt;h2&gt;Esto es un otro hijo del componente MyComponent&lt;/h2&gt;\n&lt;/MyComponent&gt;\n}\n</code></pre> <p>En este caso, al tener hijos, no se puede usar la etiqueta auto-cierre (<code>&lt;MyComponent/&gt;</code>), en su lugar debe utilizar la etiqueta de apertura y cierre.</p>"},{"location":"tema_1/page-4/","title":"Proyecto","text":"<p>Haciendo uso de componentes, JSX, y estilos CSS crea la siguiente interfaz de Usuario:</p> <p> Soluci\u00f3n del proyecto</p>"}]}