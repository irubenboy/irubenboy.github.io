{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":""},{"location":"bloque_i/tema_1/pages-1/","title":"1.1 Introducci\u00f3n al lenguaje Dart","text":""},{"location":"bloque_i/tema_1/pages-1/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>En la actualidad existen una infinidad de lenguajes de programaci\u00f3n para las distintas plataformas existentes.</p> <p>Dart es un lenguaje de programaci\u00f3n open source, relativamente nuevo, que fue desarrollado por Google y que lanz\u00f3 su primera versi\u00f3n en 2011. Este lenguaje se cre\u00f3 con el objetivo de permitir a los desarrolladores utilizar un lenguaje orientado a objetos y con an\u00e1lisis est\u00e1tico de tipo.</p> <p>La programaci\u00f3n Dart es una alternativa a reemplazar JavaScript y convertirse en el lenguaje prioritario para los navegadores actuales, aunque este lenguaje todav\u00eda est\u00e1 en proceso de mejoras y adaptaciones.</p>"},{"location":"bloque_i/tema_1/pages-1/#2-razon-para-un-nuevo-lenguaje","title":"2. Raz\u00f3n para un nuevo lenguaje","text":"<p>Dart est\u00e1 pensado para ofrecer mejores resultados mediante alternativas a algunos problemas de JavaScript. Pretende ser una herramienta sencilla para proyectos m\u00e1s grandes y ofrecer una mejor seguridad.</p> <p>Desde 2011, los ingenieros de Google desarrollaron un programa desde internet para el desarrollo de aplicaciones llamado Brightly, que quiz\u00e1s sea la primera aplicaci\u00f3n creada con Dart. Google ofrece una herramienta para traducir Dart a ECMAScript 3 en el instante, para ser compatible con los navegadores que no utilicen Dart. Google tambi\u00e9n integrar\u00e1 una m\u00e1quina virtual nativa en Google Chrome y facilitar\u00e1 a sus competidores lo mismo para sus navegadores. El lanzamiento de la MV de Dart y su traductor se anunci\u00f3 para finales de 2011.</p>"},{"location":"bloque_i/tema_1/pages-1/#3-versiones-dart","title":"3. Versiones Dart","text":"<p>Un \u00fanico SDK de Dart puede soportar simult\u00e1neamente varias versiones del lenguaje Dart. El compilador determina a qu\u00e9 versi\u00f3n se dirige el c\u00f3digo, e interpreta el c\u00f3digo de acuerdo con esa versi\u00f3n.</p> <p>La versi\u00f3n del lenguaje es importante en las raras ocasiones en que Dart introduce una caracter\u00edstica incompatible como null safety. El c\u00f3digo que sol\u00eda compilar limpiamente antes null safety (pero que quiz\u00e1s se bloquea en tiempo de ejecuci\u00f3n) puede dejar de compilar una vez que null safety est\u00e1 habilitada. Debido a que la migraci\u00f3n de sus aplicaciones y paquetes \u2014 y todos los paquetes de los que dependen \u2014 a null safety le puede llevar un tiempo, Dart utiliza el versionado del lenguaje para soportar el uso de c\u00f3digo no null safety junto con el c\u00f3digo null safety.</p> <p>Los principales cambios en cada versi\u00f3n de Dart son:</p> <ul> <li>Dart 2.0 implement\u00f3 un nuevo sistema de tipos s\u00f3lido. Antes de Dart 2.0, los tipos no eran completamente s\u00f3lidos, y Dart depend\u00eda en gran medida de la comprobaci\u00f3n de tipos en tiempo de ejecuci\u00f3n. El c\u00f3digo de Dart 1.x tuvo que ser migrado a Dart 2.</li> <li>Dart 2.7 a\u00f1adi\u00f3 soporte para m\u00e9todos de extensi\u00f3n, permiti\u00e9ndole a\u00f1adir funcionalidad a cualquier tipo \u2014 incluso a los tipos que no controla \u2014 con la brevedad y la experiencia de autocompletar de las llamadas a m\u00e9todos regulares.</li> <li>Dart 2.8 no a\u00f1ad\u00eda ninguna caracter\u00edstica al lenguaje Dart, pero conten\u00eda una serie de cambios de ruptura preparatorios para asegurar una gran usabilidad y rendimiento relacionados con la null safety en la pr\u00f3xima caracter\u00edstica.</li> </ul> <p>Para ver m\u00e1s</p> <p>Para ver m\u00e1s, visita: https://dart.dev/guides/language/evolution</p>"},{"location":"bloque_i/tema_1/pages-1/#4-herramientas","title":"4. Herramientas","text":"<p>Chromium es el directorio donde se almacena una compilaci\u00f3n especial del navegador web Chromium llamada Dartium porque incluye la m\u00e1quina virtual de Dart (Dart VM). De este modo podr\u00e1s ejecutar tus aplicaciones Dart nativas directamente en este navegador.</p> <p>Actualmente no es posible ejecutar c\u00f3digo nativo Dart en ning\u00fan navegador m\u00e1s porque ninguno incluye a\u00fan la m\u00e1quina virtual; Es posible hacerlo si se convierte Dart a JavaScript.</p> <p>Dart-sdk es el kit de desarrollo de software de Dart (SDK). Incluye todas las librer\u00edas de Dart como <code>dart:core</code> o <code>dart:html</code> y tiene herramientas de l\u00ednea de comandos muy \u00fatiles como el compilador de Dart-to-JavaScript y la m\u00e1quina virtual de Dart.</p> <p>Samples contiene varios ejemplos de aplicaciones Dart para aprender y profundizar con ejemplos de aplicaciones reales.</p>"},{"location":"bloque_i/tema_1/pages-1/#5-ejemplo-de-codigo-dart","title":"5. Ejemplo de c\u00f3digo Dart","text":"<p>En el siguiente ejemplo, podemos observar el m\u00e9todo principal de Dart, main, que es el que se ejecutar\u00e1 cuando se ejecut\u00e9 la aplicaci\u00f3n.</p> Ejemplo Dart<pre><code>void main(){\nprint('Hola, Dart!');\n}\n</code></pre> <p>El m\u00e9todo print, muestra por consola el texto que se le ha indicado.</p>"},{"location":"bloque_i/tema_1/pages-1/#6-primeros-conceptos-basicos","title":"6. Primeros conceptos b\u00e1sicos","text":""},{"location":"bloque_i/tema_1/pages-1/#sentencia","title":"Sentencia","text":"<p>Una sentencia es la unidad m\u00ednima de ejecuci\u00f3n de un programa. Un programa se compone de un conjunto de sentencias que acaban resolviendo un problema. Al final de cada una de las sentencias encontraremos un punto y coma (<code>;</code>)</p> <p>Veamos algunos ejemplos de sentencias en Dart:</p> <ul> <li>Sentencias de declaraci\u00f3n: <code>int x</code>.</li> <li>Invocaciones o llamadas a m\u00e9todos de tipo void: <code>print('Hello World')</code>.</li> <li>Sentencias de control de flujo: el flujo de ejecuci\u00f3n para tomar decisiones o repetir sentencias.</li> </ul>"},{"location":"bloque_i/tema_1/pages-1/#expresion","title":"Expresi\u00f3n","text":"<p>Una expresi\u00f3n es una combinaci\u00f3n de operadores y operando que se eval\u00faa gener\u00e1ndose un \u00fanico resultado de un tipo determinado.</p> <p>La diferencia entre las sentencias y los operadores es que las expresiones devuelven un valor y las sentencias no devuelven nada.</p>"},{"location":"bloque_i/tema_1/pages-1/#bloques","title":"Bloques","text":"<p>Un bloque es un conjunto de sentencias las cuales est\u00e1n delimitas por llaves:</p> <pre><code>{\nsentencias\n}\n</code></pre>"},{"location":"bloque_i/tema_1/pages-1/#7-donde-se-puede-utilizar","title":"7. \u00bfD\u00f3nde se puede utilizar?","text":"<p>Actualmente Dart lo puedes utilizar casi para cualquier cosa, como por ejemplo en:</p> <ul> <li>En aplicaciones web.</li> <li>En servidores.</li> <li>En aplicaciones de consola.</li> <li>En aplicaciones m\u00f3viles.</li> </ul> <p>Los principales ejemplos de uso de este lenguaje los podemos encontrar en: Flutter, Google AdSense y Google AdWords.</p>"},{"location":"bloque_i/tema_1/pages-1/#8-flutter","title":"8. Flutter","text":"<p>Flutter es un framework que usa Dart como \u00fanico c\u00f3digo para crear aplicaciones multiplataforma. A diferencia de otros frameworks, compila a c\u00f3digo nativo consiguiendo de esta manera un mayor rendimiento respecto a otros frameworks multiplataforma basados en web-views. Flutter tiene sus propios componentes llamados widgets, lo que hace que la misma aplicaci\u00f3n se vea igual independientemente del dispositivo, versi\u00f3n o sistema operativo.</p>"},{"location":"bloque_i/tema_1/pages-1/#9-diferencias-entre-dart-y-otros-lenguajes-de-programacion","title":"9. Diferencias entre Dart y otros lenguajes de programaci\u00f3n","text":"<p>La principal diferencia que presenta Google Dart frente a otros lenguajes de programaci\u00f3n es que es m\u00e1s f\u00e1cil de leer ya que la sintaxis de este se acerca al lenguaje humano, tiene m\u00e1s posibilidades y menos comandos.</p> <p>Es posible utilizar caracteres en blanco, pesta\u00f1as y saltos de l\u00ednea a discreci\u00f3n, lo que permite a los programadores de estructurar bien el c\u00f3digo, de manera que sea \u00faltimamente ignorado por el compilador. Sin embrago, hay unas cuantas excepciones, como las palabras clave y los nombres de variables y funciones, es decir, todas las definiciones establecidas dentro del lenguaje Dart. Entre ellas se encuentran, por ejemplo, if, else, string o void.</p> <p>Por \u00faltimo, se diferencia entre may\u00fasculas y min\u00fasculas, lo que deja espacio a las denominaciones.</p>"},{"location":"bloque_i/tema_1/pages-1/#10-caracteristicas-y-ventajas-de-dart","title":"10. Caracter\u00edsticas y ventajas de Dart","text":"<p>Las caracter\u00edsticas que podemos encontrar en el lenguaje de Dart son:</p> <ul> <li>Programaci\u00f3n estructurada y flexible. Google dise\u00f1\u00f3 Dart para poder ser utilizado en proyectos de una sola persona hasta proyectos m\u00e1s desarrollados o complejos.</li> <li>Lenguaje familiar y f\u00e1cil de aprender. Es un lenguaje realmente sencillo y f\u00e1cil de aprender. En su sitio web se pueden encontrar varios tutoriales, y tambi\u00e9n permite colaboraciones de otros desarrolladores.</li> <li>Permite la adaptaci\u00f3n de nueva herramienta a cualquier navegador web. El lenguaje de programaci\u00f3n Dart se puede ejecutar de dos maneras; en una m\u00e1quina virtual (MV), o en un motor de Javascript utilizando un compilador para traducir el c\u00f3digo. Esto le permite adaptarse a cualquier navegador.</li> <li>Lenguaje basado en clases e interfaces o POO. Gracias a sus basamentos en clases o en la programaci\u00f3n orientada a objetos, se facilita la encapsulaci\u00f3n y la reutilizaci\u00f3n del c\u00f3digo.</li> </ul> <p>Las ventajas son:</p> <ul> <li>Es de acceso gratuito para cualquier persona.</li> <li>Detr\u00e1s de su programaci\u00f3n se encuentra Google, lo que ofrece perspectivas a largo plazo para el desarrollo del lenguaje.</li> <li>Dart es f\u00e1cil de aprender debido a que los desarrolladores han simplificado caracter\u00edsticas complicadas de otros lenguajes.</li> <li>Funciona en todos los navegadores m\u00f3viles y de escritorio actuales.</li> </ul>"},{"location":"bloque_i/tema_1/pages-2/","title":"1.2 Variables y constantes","text":""},{"location":"bloque_i/tema_1/pages-2/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Las variables son contenedores que sirven para almacenar los datos que utiliza el programa, es decir, son nombres que asociamos a determinados datos. La realidad es que cada variable ocupa un espacio en la memoria RAM del ordenador para almacenar el dato al que se refiere. Dicho de otra forma, cuando utilizamos el nombre de una variable realmente estamos haciendo una referencia a un dato que est\u00e1 en memoria.</p> <p>Las variables tienen un nombre, identificador, que se escribe en min\u00fascula, y si consta de varias palabras se utiliza la notaci\u00f3n lowerCamelCase. Ejemplo: myFirstVariable. Adem\u00e1s, deben cumplir lo siguiente:</p> <ul> <li>NO deben comenzar con los caracteres gui\u00f3n bajo (_) o el signo del d\u00f3lar ($), aunque se admiten.</li> <li>Se admiten los n\u00fameros pero NO como primer car\u00e1cter.</li> <li>Deben ser cortos per significativos. La elecci\u00f3n de un nombre de variable debe ser mnem\u00f3nico, es decir, dise\u00f1ados para indicar al observador casual la intenci\u00f3n de su uso. Por ejemplo, si queremos usar una variable para almacenar una edad, la llamaremos edad.</li> <li>Se deben evitar los nombre de variables de un solo car\u00e1cter excepto para las variables temporales de usar y tirar. Los nombres comunes de las variables temporales son i, j, k, m y n para enteros; c, d y e para caracteres.</li> </ul>"},{"location":"bloque_i/tema_1/pages-2/#2-declaracion-de-variables","title":"2. Declaraci\u00f3n de variables","text":"<p>Antes de poder utilizar una variable, esta se debe declarar de la siguiente manera: <code>tipo nombreVariable</code>, donde tipo es el tipo de datos que almacenar\u00e1 la variable (texto, n\u00fameros enteros,...) y nombreVariable es el identificador de la variable. Ejemplos:</p> <pre><code>int days;\nbool exit;\n</code></pre> <p>Dart es un lenguaje muy estricto al utilizar tipos de datos. Las variables de datos que sean distintos son incompatibles. Se dice, entonces, que Dart es un lenguaje fuertemente tipado o incluso un lenguaje muy tipificado.</p> <p>Por convenci\u00f3n de c\u00f3digo, todas las declaraciones de variables se ponen al principio.</p>"},{"location":"bloque_i/tema_1/pages-2/#3-inicializacion-de-variables","title":"3. Inicializaci\u00f3n de variables","text":"<p>En Dart se utilizar el operador de asignaci\u00f3n (<code>=</code>) para inicializar una variable, es decir, para darle un valor inicial.</p> <p>La inicializaci\u00f3n se puede realizar:</p> <ul> <li>En la misma l\u00ednea de c\u00f3digo que la declaraci\u00f3n:</li> </ul> <pre><code>int x = 7;\n</code></pre> <ul> <li>En cualquier otro momento, pero siempre despu\u00e9s de haberla declarado:</li> </ul> <pre><code>int x;\n// ...\nx = 7;\n</code></pre> <ul> <li>Se puede utilizar una expresi\u00f3n para asignar una variable:</li> </ul> <pre><code>int x;\n// ...\nx = 7;\n//...\nx = x * 2;\nint a = 13;\nint b = 18;\nint c = a + b;\n</code></pre> <ul> <li>Se puede declarar m\u00e1s de una variable a la vez del mismo tipo en la misma l\u00ednea si las separamos con comas:</li> </ul> <pre><code>int days, year, weeks;\n</code></pre> <ul> <li>Incluso tambi\u00e9n se puede inicializar en la misma l\u00ednea:</li> </ul> <pre><code>int days = 365, year = 2019, weeks;\n</code></pre>"},{"location":"bloque_i/tema_1/pages-2/#4-ambito-de-vida-de-las-variables","title":"4. \u00c1mbito de vida de las variables","text":"<p>Toda variable tiene un \u00e1mbito de vida. Esto es la parte del c\u00f3digo en la que una variable puede utilizar, que es en el bloque donde se ha declarado. De hecho las variables tienen un ciclo de vida:</p> <ol> <li>En la declaraci\u00f3n se reserva el espacio necesario para que se puedan comenzar a utilizar (digamos que se avisa de su futura existencia)</li> <li>Se la asigna su primer valor (la variable nace)</li> <li>Se utiliza en diversas sentencias. Cuando finaliza el bloque en el que fue declarada, la variable muere. Es decir, se libera el espacio que ocupa esa variable en memoria.</li> <li>Una vez que la variable ha sido eliminada, no se puede utilizar. Dicho de otro modo, no se puede utilizar una variable m\u00e1s all\u00e1 del bloque en el que ha sido definida. Ejemplo</li> </ol> <pre><code>{ // (1)!\nint x = 9;\n} // (2)!\nint y = x;\n</code></pre> <ol> <li>Se utiliza { para indicar le comienzo del bloque de c\u00f3digo</li> <li>Se utiliza } para indicar el fin del bloque de c\u00f3digo</li> </ol>"},{"location":"bloque_i/tema_1/pages-2/#5-constantes","title":"5. Constantes","text":"<p>Una constante es un valor que no puede ser modificado durante la ejecuci\u00f3n de un programa, \u00fanicamente puede ser le\u00eddo.</p> <p>En Dart, existen dos formas de crear constantes, la primera es con la palabra reservada const y la segunda es con la palabra reservada final.</p> <p>La diferencia entre ambas, es que const implica que aloja el valor en tiempo de compilaci\u00f3n, y final en tiempo de ejecuci\u00f3n.</p> <p>Por ejemplo:</p> <pre><code>const date = new DateTime.now(); // ERROR porque es una operaci\u00f3n en tiempo de ejecuci\u00f3n\nconst days = 7; // CORRECTO, operaci\u00f3n en tiempo de compilaci\u00f3n.\nfinal d = new DateTime.now(); // CORRECTO;\nfinal day = 7; // CORRECTO\n</code></pre> <p>Cuando un mismo valor se utilice en varias partes del c\u00f3digo, entonces hay que declararlo como una constante ya que si en alg\u00fan momento de la vida de la aplicaci\u00f3n, ese valor var\u00eda, solamente hay que cambiar el valor de la constante y no estar cambi\u00e1ndolo en todos los sitios del c\u00f3digo donde aparezca</p>"},{"location":"bloque_i/tema_1/pages-3/","title":"1.3 Tipo de datos","text":""},{"location":"bloque_i/tema_1/pages-3/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>En Dart, existen los siguientes diferentes tipos de datos:</p> <ul> <li>Enteros, int</li> <li>Decimales, double</li> <li>Cadenas de texto, String</li> <li>Booleanos, bool</li> <li>Din\u00e1micos, dynamic</li> <li>Objetos, Object</li> </ul>"},{"location":"bloque_i/tema_1/pages-3/#2-numericos","title":"2. Num\u00e9ricos","text":"<p>En Dart existen dos tipos n\u00fameros, los int y los double. Los tipos int son los n\u00fameros enteros, es decir, sin coma decimal, mientras que los tipos double son decimales.</p> <pre><code>int a = 5; double b = 10;\n</code></pre> <p>Tipo num</p> <p>Existe un tipo num que engloba los dos tipos anteriores. Por lo que, permite almacenar tanto enteros como decimales.</p> <pre><code>num a = 5;\nnum b = 10.75;\n</code></pre>"},{"location":"bloque_i/tema_1/pages-3/#3-cadenas-de-texto","title":"3. Cadenas de texto","text":"<p>Para asignar una cadena de texto a una variable, se pueden usar comillas dobles (\"\") o comillas simples ('').</p> <pre><code>String cad = \"Hola mundo\";\n</code></pre> <p>Las cadenas se pueden concatenar de diferentes formas:</p> <ul> <li>Usando el operador de concatenaci\u00f3n +.</li> <li>Usando un espacio entre las dos cadenas. (\u00a1OJO! solo se puede entre literales de cadenas y no con variables).</li> <li>Usando un salto de l\u00ednea. (\u00a1OJO! solo se puede entre literales de cadenas y no con variables)</li> <li>Interpolaci\u00f3n con <code>$</code> o con <code>${}</code>, siendo el primero para una sentencia simple y el segundo para una expresi\u00f3n m\u00e1s compleja</li> </ul> <pre><code>String cad = \"hola\";\nString cad2 = \"mundo\";\nString result = cad + \" \" + cad2; // hola mundo\nString result2 = \"hola\" \"mundo\"; //holamundo\nString result3 = cad \"mundo\"; // ERROR COMPILACI\u00d3N\nString result4 = \"hola\"\n\"mundo\"; // holamundo\nString result5 = cad\n\"mundo\"; // ERROR COMPILACI\u00d3N\nString result6 = \"$cad $cad2 ${2+3}.\"; // Hola mundo 5.\n</code></pre> <p>Los caracteres de escape es una forma de transformar un literal cadena en un car\u00e1cter especial. Para indicarlo, ser\u00e1 necesario anteponer <code>\\</code> a el car\u00e1cter que desee. Los diferentes tipos de caracteres de escape que existen son:</p> Car\u00e1cter Significado \\n Salto de l\u00ednea \\t Tabulador \\\" Mostrar comillas dobles dentro de una cadena con comillas dobles \\' Mostrar comilla simple dentro de una cadena con comillas simples \\\\ Barra invertida \\udddd Representa el car\u00e1cter Unicode cuyo c\u00f3digo es representado por <code>dddd</code> en hexadecimal <pre><code>String cad1 = \"Hola\\nmundo\"; //Hola\n//mundo\nString cad2 = \"\\tHola mundo\"; // Hola mundo\nString cad3 = \"Hola \\\"mundo\\\"\"; // Hola \"mundo\"\nString cad4 = 'Hola \\'mundo\\''; // Hola 'mundo'\nString cad5 = \"La barra invertida \\\\ sirve para caracteres de escape\"; // La barra invertida \\ sirve para caracteres de escape\n</code></pre> <p>Si se desea anular el valor del car\u00e1cter de espace, ser\u00e1 necesario usar doble barra invertida <code>\\\\</code></p> <pre><code>String cad1 = \"\\\\n sirve para salto de l\u00ednea\"; // \\n sirve para salto de l\u00ednea\n</code></pre> <p>Otra forma de anular estos caracteres es haciendo uso de la triple comilla simple <code>'''</code>, o la triple comilla doble <code>\"\"\"</code></p> <pre><code>String saludo = \"\"\" Hola esto es un saludo\n con tabulaci\u00f3n y salto de \"linea\"\n\"\"\";\n</code></pre>"},{"location":"bloque_i/tema_1/pages-3/#4-booleanos","title":"4. Booleanos","text":"<p>Este tipo de variable solo admite dos opciones, true o false.</p> <pre><code>bool encendido = false;\nbool apagado = true;\n</code></pre>"},{"location":"bloque_i/tema_1/pages-3/#5-dinamicos","title":"5. Din\u00e1micos","text":"<p>Dart permite la creaci\u00f3n de tipos din\u00e1micos, es decir, se le puede asignar un tipo a una variable y a lo largo de la ejecuci\u00f3n del programa cambiarla a otro tipo diferente.</p> <pre><code>dynamic a = 10; // Es un n\u00famero\na = \"Hola mundo\"; // Es una cadena\na = false; // Es un booleano\n</code></pre> <p>\u00a1OJO!</p> <p>Hay que tener cuidado, y no abusar del uso del tipo din\u00e1mico, ya que su uso puede provocar errores en el c\u00f3digo.</p>"},{"location":"bloque_i/tema_1/pages-3/#6-tipo-inferido","title":"6. Tipo inferido","text":"<p>Podemos inicializar una variable con la palabra reservada var, de esta forma el tipo de valor de la variable no ser\u00e1 asignado hasta que no se le asigne un valor.</p> <pre><code>var b; // No tiene tipo definido\nb = 10; // es un n\u00famero\n</code></pre> <p>Si no se le asigna un valor en el momento de declararla, su valor por defecto ser\u00e1 <code>null</code> y su tipo por defecto din\u00e1mico.</p> <p>Importante</p> <p>A diferencia del tipo <code>dynamic</code> si se le asigna un valor a una variable declarada con var, \u00e9sta no podr\u00e1 cambiar de tipo y se mantendr\u00e1 durante toda su vida con el mismo tipo indicado.</p> <pre><code>var a = 10; // es un n\u00famero\na = \"hola mundo\"; // ERROR\n</code></pre>"},{"location":"bloque_i/tema_1/pages-4/","title":"1.4 Operadores","text":""},{"location":"bloque_i/tema_1/pages-4/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Un operador lleva a cabo operaciones sobre uno (operador unario), dos (operador binario) o tres (operador ternario) datos u operandos de tipo primitivo devolviendo un valor determinado tambi\u00e9n a un tipo primitivo. El tipo de valor devuelto tras la evaluaci\u00f3n depende del operador y del tipo de los operandos.</p>"},{"location":"bloque_i/tema_1/pages-4/#2-operador-de-asignacion","title":"2. Operador de asignaci\u00f3n","text":"<p>El operador de asignaci\u00f3n <code>=</code> es un operador binario que asigna el valor del t\u00e9rmino de la derecha al operando de la izquierda. El operando de la izquierda es una variable, y el termino de la derecha debe ser una expresi\u00f3n de tipo de dato compatible.</p> <pre><code>var a = 5;\n</code></pre> <p>\u00a1OJO!</p> <p>No se deben confundir el operador de asignaci\u00f3n (=) con el operador de igualdad (==)</p>"},{"location":"bloque_i/tema_1/pages-4/#3-operadores-aritmeticos","title":"3. Operadores aritm\u00e9ticos","text":"<p>Existen diferentes operadores aritm\u00e9ticos para los datos num\u00e9ricos enteros y decimales.</p> Operador Descripci\u00f3n Ejemplo de expresi\u00f3n Resultado del ejemplo - Operador unario de cambio de signo -4 -4 + Suma 2.5 + 7.1 9.6 - Resta 235.6 - 103.5 132.1 * Multiplicaci\u00f3n 1.2 * 1.1 1.32 % M\u00f3dulo (Resto de una divisi\u00f3n) 20 % 7 14.5 % 2 60.5"},{"location":"bloque_i/tema_1/pages-4/#4-operadores-aritmeticos-incrementales","title":"4. Operadores aritm\u00e9ticos incrementales","text":"<p>Los operadores aritm\u00e9ticos incrementales son operadores unarios. Existen dos tipos: incrementales y decrem\u00e9ntales.</p> Operador Descripci\u00f3n Ejemplo de expresi\u00f3n Resultado del ejemplo ++ Incremento 4++ 5 -- Decremento 4-- 3 <p>Estos operadores pueden emplearse de dos formas dependiendo de su posici\u00f3n con respecto al operando:</p> <ul> <li>si el operador est\u00e1 detr\u00e1s del operando, primero se utiliza la variable y luego se incrementa/decrementa su valor:</li> <li>Post-incremento: a++</li> <li>Post-decremento: a--</li> <li>si el operador est\u00e1 delante del operando, primero se incrementa/decrementa el valor de la variable y luego se utiliza:</li> <li>Pre-incremento: ++a</li> <li>Pre-decremento: --a</li> </ul> <pre><code>void main(){\nint a = 10, b = 20;\nprint(a); // 10\nprint(a++); // 10\nprint(a); // 11\nprint(b); // 20\nprint(++b); // 21\nprint(b); // 21\n}\n</code></pre>"},{"location":"bloque_i/tema_1/pages-4/#5-operadores-aritmeticos-combinados","title":"5. Operadores aritm\u00e9ticos combinados","text":"<p>Combinan un operador aritm\u00e9tico con el operador de asignaci\u00f3n.</p> Operador Descripci\u00f3n Ejemplo de expresi\u00f3n Resultado del ejemplo += Suma combinada a+=b a=a+b -= Resta combinada a-=b a=a-b *= Multiplicaci\u00f3n combinada a*=b a=a*b /= Divisi\u00f3n combinada a/=b a=a/b %= Resto combinado a%=b a=a%b <p>Ejemplo:</p> <pre><code>void main(){\nint a = 10;\na += 3; // 13\n}\n</code></pre>"},{"location":"bloque_i/tema_1/pages-4/#6-operadores-relacionales","title":"6. Operadores relacionales","text":"<p>Realizan comparaciones entre datos compatibles obteniendo siempre un resultado booleano.</p> Operador Descripci\u00f3n Ejemplo de expresi\u00f3n Resultado del ejemplo == Igual que 7 ?== 38 false != Distinto que 'a' != 'k' true &lt; Menor que 4 &lt; 2 false &gt; Mayor que 4 &gt; 2 true &lt;= Menor o igual que 7.2 &lt;= 7.38 false &gt;= Mayor o igual que 38 &gt;= 7 true"},{"location":"bloque_i/tema_1/pages-4/#7-operadores-logicos-o-booleanos","title":"7. Operadores l\u00f3gicos o booleanos","text":"<p>Las puertas l\u00f3gicas son circuitos electr\u00f3nicos capaces de realizar operaciones l\u00f3gicas b\u00e1sicas.</p> <ul> <li>Puerta NOT. La salida es la inversa de la entrada.</li> </ul> Entrada Salida 0 1 1 0 <ul> <li>Puerto AND. La se\u00f1al de salida se activa solo cuando se activan todas las se\u00f1ales de entrada. Equivale al producto l\u00f3gico <code>S = A \u00b7 B</code> y se corresponde a :</li> </ul> A (Entrada 1) B (Entrada 2) S (Salida) 0 0 0 0 1 0 1 0 0 1 1 1 <ul> <li>Puerta OR. La salida se activa cuando cualquiera de las entradas est\u00e1 activada. Equivale a la suma l\u00f3gica <code>S = A + B</code> y se corresponde a:</li> </ul> A (Entrada 1) B (Entrada 2) S (Salida) 0 0 0 0 1 1 1 0 1 1 1 1 <p>Los operadores l\u00f3gicos o booleanos realizan operaciones sobre datos booleanos y tienen como resultado un valor booleano.</p> Operador Descripci\u00f3n Ejemplo de expresi\u00f3n Resultado del ejemplo ! Negaci\u00f3n - NOT (unario) ! false ! (5==5) truefalse || Suma l\u00f3gica - OR (binario) true || false (5 == 5) &amp;&amp; (5 &lt; 4) truetrue &amp;&amp; Producto l\u00f3gico - AND (binario) false &amp;&amp; true (5==5) &amp;&amp; (5 &lt; 4) falsefalse <p>El producto l\u00f3gico se realiza con cortocircuito, es decir, si el primer operando es false el segundo operando no se eval\u00faa ya que el resultado va a ser de todas maneras false. En este caso es conveniente situar la condici\u00f3n m\u00e1s propensa a ser falsa en el t\u00e9rmino de la izquierda.</p> <p>La suma l\u00f3gica tambi\u00e9n se realiza con cortocircuito, es decir, si el primer operando es true entonces el segundo operando no se eval\u00faa ya que el resultado va a ser de todas maneras true. En este caso es conveniente colocar la condici\u00f3n m\u00e1s propensa a ser verdadera en el t\u00e9rmino de la izquierda.</p> <p>Ejemplo:</p> <pre><code>bool adult, younger;\nint age = 21:\nadult = age &gt;= 18; // true\nyounger = !adult; // false\n</code></pre> <pre><code>bool drivingLicense = true;\nint age = 20;\nbool canDrive = (age &gt;= 18) &amp;&amp; drivingLicense;\n/* Si la edad es de al menos 18 a\u00f1os y tiene carnet de conducir entonces puede conducir */\n</code></pre> <pre><code>bool snow = true, rain = false, hail = false;\nbool badWeather = snow || rain || hail; // Si nieva o llueve o graniza, hace mal tiempo\n</code></pre>"},{"location":"bloque_i/tema_1/pages-4/#8-operador-condicional","title":"8. Operador condicional","text":"<p>Este operador ternario permite devolver valores en funci\u00f3n de una expresi\u00f3n l\u00f3gica. Su sintaxis es la siguiente:</p> <p><code>expresionLogica ? expresion_1 : expresion_2</code></p> <p>Si el resultado de evaluar la expresi\u00f3n l\u00f3gica es verdadero, devuelvo el valor de la primera expresi\u00f3n, y en caso contrario, devuelve el valor de la segunda expresi\u00f3n.</p> Operador Descripci\u00f3n Ejemplo de expresi\u00f3n Resultado Ejemplo ?: Operador condicinal a = 4;b = a == 4 ? a +5 : 6 -ab = a &gt; 4 ? a * 7 : a +8; b vale 9b vale 12 <p>Ejemplo:</p> <pre><code>var pay = (age &gt; 18) ? 6000 : 3000;\n</code></pre> <p>En este caso, si la variable edad es mayor de 18, la paga ser\u00e1 de 6000, sino ser\u00e1 de 3000.</p>"},{"location":"bloque_i/tema_1/pages-4/#9-operadores-a-nivel-binario","title":"9. Operadores a Nivel binario","text":"<p>Se le denomina operadores binarios porque operan los datos a nivel de bit. Esto quiere decir que el c\u00e1lculo lo haremos a nivel de bit. Ejemplo: si tenemos el valor 10 su representaci\u00f3n binaria es 1010 por lo que su negaci\u00f3n (tambi\u00e9n conocido como complemento) ser\u00eda invertir cada bit dando como resultado 0101 qu\u00e9 es el 5. Tome en cuenta que el caso anterior consideramos un valor de 4 bit. Para Dart el valor int est\u00e1 conformado de 32 bit.</p> Operador Descripci\u00f3n &amp; AND L\u00f3gico. 1 si ambas entradas son 1. | OR L\u00f3gico. 1 si al menos una de sus entradas es uno ^ XOR (OR exclusivo). ! si solo una de sus entradas es 1 ~ Negaci\u00f3n/Complemento. 1 si la entrada es 0. &lt;&lt; Desplazamiento a la izquierda (Shift Left). Mueve los bits a la izquierda tantas veces como se le indique &gt;&gt; Desplazamiento a la derecha (Shift Right). Mueve los bits a la derecha tantas veces como se le indique &gt;&gt;&gt; Desplazamiento a la derecha sin signo (Shift Right). Igual al desplazamiento a la derecha solo que ignora el signo del valor <pre><code>void main() {\nfinal value = 3; // 0011\nfinal mask = 5;  // 0101\nvar result = value &amp; mask;\nprint(result.toRadixString(2)); // 0001\nresult = value | mask;\nprint(result.toRadixString(2)); // 0111\nresult = value ^ mask;\nprint(result.toRadixString(2)); // 0110\nresult = ~value;\nprint(result.toRadixString(2)); // 1100\nresult = value &lt;&lt; 2;\nprint(result.toRadixString(2)); // 0110\nresult = value &gt;&gt; 1;\nprint(result.toRadixString(2)); // 0001\nresult = value &gt;&gt;&gt; 2;\nprint(result.toRadixString(2)); // 0000\n}\n</code></pre>"},{"location":"bloque_i/tema_1/pages-5/","title":"1.5 Sentencias y Expresiones","text":""},{"location":"bloque_i/tema_1/pages-5/#1-sentencias","title":"1. Sentencias","text":"<p>Una sentencia es la unidad m\u00ednima de ejecuci\u00f3n de un programa. Un programa se compone de un conjunto de sentencias que acaban resolviendo un problema. AL final de cada una de las sentencias encontraremos un punto y coma (<code>;</code>).</p> <p>Ejemplos:</p> <ul> <li>Sentencias de declaraci\u00f3n: <code>int x;</code></li> <li>Invocaciones o llamadas a m\u00e9todos de tipo void: <code>print(\"Hola mundo\")</code></li> <li>Sentencias de control de flujo: alteran el flujo de ejecuci\u00f3n para tomar decisiones o repetir sentencias.</li> </ul>"},{"location":"bloque_i/tema_1/pages-5/#2-expresiones","title":"2. Expresiones","text":"<p>Una expresi\u00f3n es una combinaci\u00f3n de operadores y operandos que se eval\u00faa gener\u00e1ndose un \u00fanico resultado de un tipo determinado.</p> <p>La diferencia entre sentencias y las expresiones es que las expresiones devuelven un valor y las sentencias no devuelven nada.</p>"},{"location":"bloque_i/tema_1/pages-5/#3-prioridad-entre-operadores","title":"3. Prioridad entre operadores","text":"<p>A veces hay expresiones con operadores que resultan confusas. Por ejemplo: <code>resultado = 8 + 4 / 2</code>.</p> <p>Es dif\u00edcil saber el resultado. \u00bfEs seis o diez? LA respuesta es 10 y la raz\u00f3n es que el operador de la divisi\u00f3n siempre precede en el orden de ejecuci\u00f3n al de la suma. Es decir, siempre se ejecuta antes la divisi\u00f3n que la suma. Siempre se pueden usar par\u00e9ntesis para forzar el orden deseado: <code>resultado =  (8+4)/2</code>. Ahora no hay duda, el resultado es seis.</p> <p>\u00bfC\u00f3mo podemos saber en qu\u00e9 orden se van a ejecutar los operadores en una expresi\u00f3n en Dart? Pues se ejecutan en funci\u00f3n de una prioridad, es decir, primero se ejecuta el que tenga m\u00e1s prioridad. La siguiente tabla muestra los operadores ordenados de mayor a menor prioridad. La primera l\u00ednea de la tabla contiene los operadores de mayor prioridad y la \u00faltima los de menor prioridad. Los operadores que aparecen en la misma l\u00ednea tienen la misma prioridad. Cuando una expresi\u00f3n tenga dos operadores con la misma prioridad, la expresi\u00f3n se eval\u00faa seg\u00fan su asociatividad.</p> Nivel Operador Descripci\u00f3n Asociatividad 1 [].() Acceso elementos arrayAcceso miembros objetosPar\u00e9ntesis De izquierda a derecha 2 ++-- Unario post-incrementoUnario post-decremento No asociativos 3 ++--+-!~ Unario pre-incrementoUnario pre-decrementoUnario m\u00e1sUnario menosUnario l\u00f3gico NOTUnario NOT a nivel de bits De derecha a izquierda 4 asnew CastCreaci\u00f3n de objetos De derecha a izquierda 5 */% Multiplicaci\u00f3nDivisi\u00f3nM\u00f3dulo De izquierda a derecha 6 +-+ SumaRestaConcatenaci\u00f3n de cadenas De izquierda a derecha 7 &lt;&lt;&gt;&gt;&gt;&gt;&gt; Desplazamientos a nivel de bits De izquierda a derecha 8 &lt;&lt;=&gt;&gt;=is Relacionales No asociativos 9 ==!= IgualDistinto De izquierda a derecha 10 &amp; AND a nivel de bits De izquierda a derecha 11 ^ XOR a nivel de bits De izquierda a derecha 12 | OR a nivel de bits De izquierda a derecha 13 &amp;&amp; AND De izquierda a derecha 14 || OR De izquierda a derecha 15 ?: Ternario condicional De derecha a izquierda 16 =+=-=*=/=%=&amp;=^=|=&lt;&lt;=&gt;&gt;=&gt;&gt;&gt; Asignaciones De derecha a izquierda <p>Por ejemplo: <code>resultado = 9 / 3 * 3</code>. En este caso, la multiplicaci\u00f3n y la divisi\u00f3n tienen la misma prioridad y su asociatividad es de izquierda a derecha por lo que se realiza primero la operaci\u00f3n que est\u00e9 m\u00e1s a la izquierda, que en este caso es la divisi\u00f3n. El resultado ser\u00eda, por lo tanto, nueve. SI se desea que se haga primero la multiplicaci\u00f3n, habr\u00eda que utilizar un par\u00e9ntesis: <code>resultado = 9 / (3 * 3)</code>. En este caso, el resultado ser\u00eda 1.</p> <p>Importante</p> <p>Si se desea realizar una operaci\u00f3n de menor nivel antes que una operaci\u00f3n de alto nivel, se podr\u00e1 usar los par\u00e9ntesis para destacar dicha operaci\u00f3n. Otro ejemplo: <code>x = y = z = 17</code>Como la asociatividad de la asignaci\u00f3n es de derecha a izquierda, primero se asigna el valor 17 a <code>z</code>, luego a <code>y</code> y por \u00faltimo a <code>x</code>.</p> <p>Algunos operadores son no asociativos, por ejemplo, la expresi\u00f3n <code>x &lt;= y &lt;= z</code>es inv\u00e1lida ya que el valor devuelto por estos operadores es de un tipo diferente (bool) al de los operadores que se necesita.</p>"},{"location":"bloque_i/tema_1/pages-5/#4-evaluacion-cortocircuito","title":"4. Evaluaci\u00f3n cortocircuito","text":"<p>La evaluaci\u00f3n de cortocircuito denota la sem\u00e1ntica de algunos operadores booleanos en algunos lenguajes de programaci\u00f3n en los cuales si con la evaluaci\u00f3n de la primera expresi\u00f3n ya se conoce el resultado, ya no se eval\u00faan el resto de expresiones.</p> <p>Por ejemplo:</p> <pre><code>12 &lt; 9 &amp;&amp; 5 &gt; 1 &amp;&amp; 8 &gt;= 13;\n</code></pre> <p>Se eval\u00faa la primera expresi\u00f3n <code>12 &lt; 9</code> dando <code>false</code>. Como el resultado va a ser false independientemente del resultado de la segunda y tercera expresi\u00f3n, entonces no se eval\u00faan ni la segunda 5 &gt; 1, ni la tercera expresi\u00f3n <code>8 &lt;= 13</code>, sino que solamente se eval\u00faa la primera dando como resultado <code>false</code>.</p> <p>Lo mismo pasa con el operador <code>OR</code>:</p> <pre><code>8 &lt;= 13 || 12 &lt; 9 || 5 &gt; 1;\n</code></pre> <p>Se eval\u00faa la primera expresi\u00f3n <code>8 &lt;= 13</code>, dando <code>true</code>. Como el resultado a ser true independientemente del resultado de la segunda y de la tercera expresi\u00f3n, entonces no se eval\u00faan ni la segunda <code>12&lt;9</code> ni la tercera expresi\u00f3n <code>5 &gt; 1</code>, sino que solamente se eval\u00faa la primera, dando como resultado <code>true</code>.</p>"},{"location":"bloque_i/tema_1/pages-6/","title":"1.6 Null Safety","text":""},{"location":"bloque_i/tema_1/pages-6/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Un variable con valor Null es equivalente a no tener valor o ausencia de valor. El concepto null es bastante \u00fatil y necesario. Si se desea almacenar el valor de una variable, pero por cualquier motivo se desconoce su valor, esta variable se inicializa a null para as\u00ed indicar que no tiene valor.</p> <p>La principal desventaja de este valor, es que durante la ejecuci\u00f3n de un programa puede ser f\u00e1cil olvidar su existencia, lo que supondr\u00eda un error a la hora de manejarlos, ya que no se puede acceder ni a atributos ni propiedades de un valor null, y al intentarlo se romper\u00eda el programa.</p> <p>Ejemplo:</p> <pre><code>var num1 = 3, num2 = -1, num3 = null;\nprint(num1.isNegative)); // false\nprint(num2.isNegative); // true\nprint(num3.isNegative); // ERROR\n</code></pre> <p>Al ejecutar el programa, se lanzar\u00e1 la siguiente excepci\u00f3n: <code>NoSuchMethodError: The getter 'isNegative' was called on null.</code></p> <p>Para poder evitar dicho error, ser\u00eda necesario antes comprobar si el valor de la variable es null.</p>"},{"location":"bloque_i/tema_1/pages-6/#2-sound-null-safety","title":"2. Sound Null Safety","text":"<p>Desde la versi\u00f3n Dart 2.12, se permite la posibilidad de impedir darle un valor null a una variable, de tal forma que se nos advierta de los posibles errores que pueden provocar los valores null en nuestro c\u00f3digo.</p> <p>Para ello, a partir de dicha versi\u00f3n se crea dos formas de distinguir una variable: nullable y non-nullable.</p> <p>Los valores nullables son aquellos que pueden contener un valor null, mientras que los non-nullables, s\u00ed se le permite contener un valor null.</p> <p>Para indicar que una variable puede contener el valor null, se le indica con el operador <code>?</code>, por ejemplo:</p> <pre><code>int i = 10; // NON-NULLABLE\nint? x = 100; // NULLABLE\ni = null; // ERROR, por que es non-nullable\nx = null; // Correcto.\n</code></pre> <p>Cualquier variable de tipo nullable que no haya sido inicializada, su valor por defecto ser\u00e1 null, mientras que un variable de tipo non-nullable debe inicializar la variable con un valor de forma obligatoria.</p> <pre><code>int? x; // Valor por defecto, null\nint y; // ERROR, debe ser inicializada.\n</code></pre>"},{"location":"bloque_i/tema_1/pages-6/#3-null-aware-operators","title":"3. Null-aware operators","text":"<p>La diferenciaci\u00f3n entre tipo nullable y tipo non-nullable, no facilita a la hora de trabajar con null, de tal manera que podemos seguir cometiendo el mismo error.</p> <pre><code>String? name;\nprint(name.length); // ERROR DE COMPILACI\u00d3N, por que no se puede acceder a la propiedad de un valor null\n</code></pre> <p>Para evitar este tipo de error, Dart ofrece una serie de herramientas llamadas null-aware operators que ayudar\u00e1 a manejar los valores null.</p>"},{"location":"bloque_i/tema_1/pages-6/#if-null-operator","title":"If-null operator (<code>??</code>)","text":"<p>Este operador se utiliza para comprar si una variable es null, y en caso de serlo, tener otra alternativa. Ejemplo:</p> <pre><code>String message?;\nfinal String text = message ?? 'Error'; //  \n</code></pre> <p>SI la variable <code>message</code> es <code>NULL</code>, el valor de la variable <code>text</code> ser\u00e1 Error, por el contrario tendr\u00e1 el valor de la variable message.</p>"},{"location":"bloque_i/tema_1/pages-6/#assignament-operator","title":"Assignament operator (<code>??=</code>)","text":"<p>Este operador comprueba si la variable tiene valor null, en caso de tenerla, se le asignar\u00e1 un valor indicado, en caso de no serlo, se le asignar\u00e1 el valor de la variable, por ejemplo:</p> <pre><code>double? fontSize;\nfontSize ??= 20.0;\n// Equivalente a\ndouble? fontSize;\nfontSize = fontSize ?? 20.0;\n</code></pre>"},{"location":"bloque_i/tema_1/pages-6/#access-operator","title":"Access operator (<code>?.</code>)","text":"<p>Este operador sirve para poder acceder a los propiedades o m\u00e9todos de una varibale en caso de no tener un valor null, en caso contrario, devolver\u00eda null, por ejemplo:</p> <pre><code>int? age;\nprint(age?.isNegative); // NULL\nString? str = \"Hello World\";\nprint(str?.length); // 11\n</code></pre>"},{"location":"bloque_i/tema_1/pages-6/#null-assertion-operator","title":"Null assertion operator (<code>!</code>)","text":"<p>Este operador convierte un tipo non-nullable a nullable.</p> <pre><code>String? str = \"Hello\";\nint? size = str?.length; // 5, pero nullable\nprint(size?.isNegative); // Accedo como non-nullable\n// Para evitar usar tanto ?\nString? str = \"Hello\";\nint size = str!.length; // 5, pero non-nullable\nprint(size.isNegative); // Accedo como non-nullable\n</code></pre> <p>\u00a1OJO!</p> <p>Este operador solo debe ser usado cuando estemos seguros de que la variable nullable no contiene un null, por el contrario, se lanzar\u00e1 un excepci\u00f3n.</p> <pre><code>String? str;\nint size = str!.length; // ERROR!!\nprint(size.isNegative);\n</code></pre> <p>Este operador es equivalente a hacer un casting al tipo non-nullable.</p> <pre><code>String? str = \"Hello\";\nint size = str.length as int; // 4, pero non-nullable\nprint(size.isNegative); // Accedo como non-nullable\n</code></pre> <p>\u00a1Cuidado!</p> <p>Si se le intenta asignar una valor nullable a una variable non-nullable, lanzar\u00e1 un excepci\u00f3n. <pre><code>String? str = \"Hello\";\nint size = str?.length; // A value of type 'int?' can't be assigned to a variable of type int\n</code></pre></p> <p>Asignar un valor non-nullable si se le puede asignar sin problema a un valor nullable.</p> <pre><code>String str = \"hello\";\nint? size = str.length; // 5\n</code></pre>"},{"location":"bloque_i/tema_1/pages-7/","title":"1.7 Libraries and packages","text":"<ul> <li>1.7 Libraries and packages<ul> <li>1. Introducci\u00f3n</li> <li>2. Libraries en Dart</li> <li>3. Prefijos</li> <li>4. Rutas</li> <li>5. Packages</li> <li>6. Fichero Pubspec</li> <li>7. Dependencias de terceros</li> <li>8. Constraints</li> </ul> </li> </ul>"},{"location":"bloque_i/tema_1/pages-7/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Las librer\u00edas, o libraries, son una forma de estructurar un proyecto basado en modularidad, permitiendo as\u00ed al desarrollador dividir el c\u00f3digo en m\u00faltiples archvios.</p> <p>Se puede compartir parte de su c\u00f3digo con otros desarrolladores.</p>"},{"location":"bloque_i/tema_1/pages-7/#2-libraries-en-dart","title":"2. Libraries en Dart","text":"<p>Al igual que en muchos otros lenguajes de programaci\u00f3n, Dart usa librer\u00edas para permitir al desarrollador la posibilidad de estructurar el c\u00f3digo (modularizar).</p> <p>En Dart, adem\u00e1s, tiene otro importante rol, determinar que es visible o no para otras libraries.</p> <p>Para importar una librer\u00eda, hacemos uso de la palabra reservada import seguida del archivo en la cual se encuentra nuestra librer\u00eda.</p> <pre><code>import 'my_library.dart';\n</code></pre> <p>Cualquier c\u00f3digo tipeado en la librer\u00eda <code>my_library.dart</code>puede ser usada ahora en el fichero que hayamos hecho la importaci\u00f3n.</p> <p>En ocasiones, no es necesario importar todo el c\u00f3digo de la librer\u00eda, ya sea porque no necesitemos todo el c\u00f3digo, para evitar conflitos de nombrados de dos librer\u00edas diferentes, o simplemente no lo usemos.</p> <p>Se puede usar la palabra reservada show, para mostrar el c\u00f3digo que necesitaremos.</p> <pre><code>import 'my_library.dart' show MathUtils; // Solo acceder\u00e1 la clase MathUtils de la librer\u00eda\n</code></pre> <p>La palabra hide sirve para ocultar el c\u00f3digo que no vamos a utilizar.</p> <pre><code>import 'my_library.dart' hide MathUtils; // Acceder\u00e1 toda la librer\u00eda excepto la clase MathUtils\n</code></pre>"},{"location":"bloque_i/tema_1/pages-7/#3-prefijos","title":"3. Prefijos","text":"<p>En ocasiones tenemos el mismo contenido en dos librer\u00edas diferentes, eso puede dar conflicto a la hora de desarrollar.</p> <p>Una de las soluciones a este problema, ser\u00eda ocultar la clase del mismo nombre que no se vaya a usar, de esta forma no dar\u00e1 lugar a ning\u00fan tipo de conflicto, por ejemplo, tenemos una librer\u00eda llamada lib_A.dart que contiene la clase User, por otro lado, tenemos otra librer\u00eda llamada lib_B.dart, que tambi\u00e9n contiene la clase User, y la clase Math.</p> <pre><code>import 'lib_A.dart'; // De esta libreria voy a usar la clase User\nimport 'lib_B.dart' hide User; // Solo se va a usar la clase Math para que no d\u00e9 conflicto se oculta la clase User\n</code></pre> <p>La desventaja de esto, es que en ocasiones es necesario usar ambas clases de ambas librer\u00edas, por lo que no se puede ocultar ninguna.</p> <p>En Dart, a diferencia de otros lenguajes, no existen namespace ni nada similar para identificar el contexto de una librer\u00eda. En su caso, para evitar dicha ambig\u00fcedad, Dart propone como soluci\u00f3n los prefijos.</p> <p>Para definir un prefijo se usa la palabra reservada as despu\u00e9s del import.</p> <pre><code>import 'lib_A.dart' as libA;\nimport 'lib_B.dart' as libB;\nvoid main(){\nlibA.User userA = libA.User(); // Usuario de la librer\u00eda A\nlibB.User userB = libB.User(); // Usuario de la librer\u00eda B\n}\n</code></pre>"},{"location":"bloque_i/tema_1/pages-7/#4-rutas","title":"4. Rutas","text":"<p>Para poder importar la librer\u00eda debemos tener en cuenta, su ubicaci\u00f3n. Podemos acceder a ella de estas maneras:</p> <ul> <li>Rutas relativas: <code>import 'directory/library.dart'</code></li> <li>Rutas absolutas: <code>import 'file:///c://directory/library.dart'</code> (DEPENDE DEL SO)</li> <li>Desde una URL: <code>import 'http://www.IES.com/directory/library.dart'</code></li> <li>Desde un paquete: <code>import 'package:my_package/directory/library.dart'</code></li> </ul>"},{"location":"bloque_i/tema_1/pages-7/#5-packages","title":"5. Packages","text":"<p>El ecosistema de Dart usa paquetes para administrar software compartido, como bibliotecas o herramientas. La principal ventaja de usar y crear paquetes es que el c\u00f3digo puede ser reusada y compartido.</p> <p>El manejo y configuraci\u00f3n de paquetes se realiza a trav\u00e9s de la herramienta pub, desde la consola del sistema operativo.</p> <p>En Dart, nos podemos encontrar con dos tipos de packages:</p> <ul> <li>Application Packages: No est\u00e1n pensados para ser compartidos, aunque pueden contener dependencias. Por ejemplo: una aplicaci\u00f3n.</li> <li>Library Packages: Contiene c\u00f3digo \u00fatil para otros. Se puede usar como dependencia y tener dependencias de otros.</li> </ul> <p>Haciendo uso de la herramienta pub que debe ser instalada a trav\u00e9s del SDK de Dart podemos generar un proyecto.</p> <p> </p> Figure I - Project Structure <ul> <li>pubspec.yaml -&gt; Describe el paquete para el repositorio p\u00fablico.</li> <li>lib -&gt; Este es el lugar donde se ubican las libraries. Todo lo que pongamos en este directorio estar\u00e1 p\u00fablicamente disponible para otros paquetes. Se conoce tambi\u00e9n como el \u201cpackage public API\u201d</li> </ul>"},{"location":"bloque_i/tema_1/pages-7/#6-fichero-pubspec","title":"6. Fichero Pubspec","text":"<p>El fichero pubspec sirve para configurar y definir los aspectos m\u00e1s relevantes de un paquete Dart. Est\u00e1 basado en yaml, un formato est\u00e1ndar usado sobretodo en archivo de configuraci\u00f3n. Su estructura es f\u00e1cil de leer y de seguir.</p> <p>Info</p> <p>Para m\u00e1s informaci\u00f3n https://dart.dev/tools/pub/pubspec</p> Pubspec file<pre><code>name: dart_package\ndescription: A sample command-line application.\n# version: 1.0.0\n# homepage: https://www.example.com\nenvironment:\nsdk: '&gt;=2.8.1 &lt;3.0.0'\n#dependencies:\n#  path: ^1.7.0\ndev_dependencies:\npedantic: ^1.9.0\ntest: ^1.14.4\n</code></pre>"},{"location":"bloque_i/tema_1/pages-7/#7-dependencias-de-terceros","title":"7. Dependencias de terceros","text":"<p>Durante el desarrollo de una aplicaci\u00f3n, podemos encontrarnos con la necesidad de de usar paquetes de terceros. Para ello, ser\u00e1 necesario incluir dicho paquete en mi proyecto y luego importarlo donde sea necesario para poder usarlo.</p> <p>Para poder incluirlo, no es necesario descargarlo y a\u00f1adirlo al proyecto, simplemente bastar\u00e1 con definir la dependencia en nuestro fichero de configuraci\u00f3n pubspec e invocar el comando <code>dart pub get</code> desde la carpeta que contiene dicho archivo en la consola del sistema operativo que estemos usando para el desarrollo,</p> <pre><code>name: dart_package\ndescription: A sample command-line application.\n# version: 1.0.0\n# homepage: https://www.example.com\nenvironment:\nsdk: '&gt;=2.8.1 &lt;3.0.0'\ndependencies:\nemail_validator: '^2.0.1' # A\u00f1adimos el email validator\ndev_dependencies:\npedantic: ^1.9.0\ntest: ^1.14.4\n</code></pre> <pre><code>cd path\ndart pub get\n</code></pre> <p>Una vez realizado los pasos anteriores, la dependencia se cargar\u00e1 en el sistema y en el proyecto se ha generado un fichero (en caso de que no existiera) donde se registra la ubicaci\u00f3n de este.</p> <p>Al no incluir dicha dependencia en nuestro workspace estamos aislando nuestro c\u00f3digo del exterior.</p> <p>Resumen</p> <p>Para a\u00f1adir una nueva dependencia a mi proyecto tenemos que a\u00f1adir en el fichero pubspec dentro del apartado dependencies lo siguiente:</p> <pre><code>dependencies:\n&lt;package&gt;: &lt;constraints&gt;\n</code></pre> <p>Info</p> <p>Encontrar paquetes: https://pub.dev/</p>"},{"location":"bloque_i/tema_1/pages-7/#8-constraints","title":"8. Constraints","text":"<p>A la hora de a\u00f1adir una dependencia, podemos definir las siguientes restricciones:</p> <ul> <li>Vac\u00edo: Si no indicamos nada, no restringimos ninguna. Normalmente se usar\u00eda la versi\u00f3n m\u00e1s actual. <code>email_validator:</code>. Equivalente a <code>email_validator: any</code></li> <li>Versi\u00f3n en concreto: Indicamos la versi\u00f3n exacta. <code>email_validator: '1.0.5'</code></li> <li>Versi\u00f3n m\u00ednima: Indicamos que nos valdr\u00eda cualquier versi\u00f3n desde la indicada. <code>email_validator: '&gt;1.0.5'</code>. Tambi\u00e9n se puede usar <code>&gt;=</code></li> <li>Versi\u00f3n m\u00e1xima: Al rev\u00e9s que la anterior, acepta como m\u00e1ximo la que aceptemos. <code>email_validator: '&lt;=1.0.5'</code></li> <li>Rango: Indicamos un rango. <code>email_validator: '&gt;1.0 &lt;1.0.5'</code></li> <li>Rango sem\u00e1ntico: Como m\u00ednimo la indicada y como m\u00e1ximo la siguiente salto. <code>email_validator: '^1.0.0'</code>. Equivalente a <code>email_validator: \u2018&gt;=1.0.0 &lt;2.0.0\u2019</code>. <code>email_validator: \u2018^1.1.0\u2019</code>. Equivalente a <code>email_validator: \u2018&gt;=1.1.0 &lt;1.2.0\u2019</code></li> </ul> <p>Info</p> <p>M\u00e1s informaci\u00f3n en https://dart.dev/tools/pub/versioning Adem\u00e1s de poder restringir por versi\u00f3n tambi\u00e9n podemos indicarle a nuestro archivo de configuraci\u00f3n restricciones de la fuente desde donde se obtiene la dependencia.</p> <p>Ejemplo de ello lo podemos ver en la siguiente URL: https://dart.dev/tools/pub/dependencies#dependency-source</p>"}]}